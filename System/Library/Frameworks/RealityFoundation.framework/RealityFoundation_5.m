uint64_t PhotogrammetrySessionImpl.RequestMap.findRequest(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v28 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v29 = (uint64_t)&v27 - v15;
  swift_beginAccess();
  v16 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  v17 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
  swift_release();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v27 = a2;
    v19 = v17 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v20 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of __RKEntityActionSpecification(v19, (uint64_t)v10, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      if ((MEMORY[0x220768780](&v10[*(int *)(v5 + 20)], a1) & 1) != 0)
        break;
      outlined destroy of __RKEntityActionSpecification((uint64_t)v10, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      v19 += v20;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        v21 = 1;
        a2 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22 = v29;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v10, v29, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    v21 = 0;
    a2 = v27;
  }
  else
  {
    v21 = 1;
LABEL_7:
    v22 = v29;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v22, v21, 1, v5);
  swift_bridgeObjectRelease();
  outlined init with copy of (Int, URL)(v22, (uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5) == 1)
  {
    v23 = type metadata accessor for PhotogrammetrySession.Request(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
  }
  else
  {
    v24 = v28;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v13, v28, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    outlined init with copy of __RKEntityActionSpecification(v24, a2, type metadata accessor for PhotogrammetrySession.Request);
    outlined destroy of __RKEntityActionSpecification(v24, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    v25 = type metadata accessor for PhotogrammetrySession.Request(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 0, 1, v25);
  }
  return outlined destroy of BodyTrackingComponent?(v22, &demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
}

uint64_t PhotogrammetrySessionImpl.RequestMap.removeRequest(internalRequest:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for Logger();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v37 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (os_unfair_lock_s **)(v2 + 16);
  swift_beginAccess();
  v11 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
  swift_release();
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = 0;
    v15 = v12 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v16 = *(_QWORD *)(v7 + 72);
    while ((MEMORY[0x220768780](v15 + *(int *)(v6 + 20), a1) & 1) == 0)
    {
      ++v14;
      v15 += v16;
      if (v13 == v14)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v17 = *v10;
    v18 = *v10 + 6;
    os_unfair_lock_lock(v18);
    v19 = *(_QWORD *)&v17[4]._os_unfair_lock_opaque;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v18);
    v41 = v19;
    specialized Array.remove(at:)(v14, (uint64_t)v9);
    outlined destroy of __RKEntityActionSpecification((uint64_t)v9, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    v20 = v41;
    v21 = *v10;
    v22 = *v10 + 6;
    os_unfair_lock_lock(v22);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v21[4]._os_unfair_lock_opaque = v20;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v22);
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  v24 = v38;
  v23 = v39;
  v25 = v37;
  if (one-time initialization token for logger != -1)
    swift_once();
  v26 = __swift_project_value_buffer(v23, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v25, v26, v23);
  swift_retain_n();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v40[0] = v30;
    *(_DWORD *)v29 = 136446210;
    v31 = *(_QWORD *)(v2 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v31 + 24));
    v32 = *(_QWORD *)(v31 + 16);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 24));
    swift_release();
    v33 = *(_QWORD *)(v32 + 16);
    swift_bridgeObjectRelease();
    v41 = v33;
    v34 = dispatch thunk of CustomStringConvertible.description.getter();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v27, v28, "Number of requests left: %{public}s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v30, -1, -1);
    MEMORY[0x220772F44](v29, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v37, v39);
  }
  else
  {

    swift_release_n();
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v25, v23);
  }
}

uint64_t PhotogrammetrySessionImpl.RequestMap.getStartTimestamp(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v12 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
  swift_release();
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v23 = a2;
    v15 = v13 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v16 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of __RKEntityActionSpecification(v15, (uint64_t)v8, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      if ((MEMORY[0x220768780](&v8[*(int *)(v5 + 20)], a1) & 1) != 0)
        break;
      outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      v15 += v16;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        v17 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with take of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v11, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    v17 = 0;
LABEL_8:
    a2 = v23;
  }
  else
  {
    v17 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, v17, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
    v18 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
  else
  {
    v20 = &v11[*(int *)(v5 + 24)];
    v21 = type metadata accessor for Date();
    v22 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(a2, v20, v21);
    outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(a2, 0, 1, v21);
  }
}

uint64_t PhotogrammetrySessionImpl.RequestMap.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in PhotogrammetrySessionImpl.onProcessingCancelled()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_requestMap);
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  swift_endAccess();
  result = swift_release();
  *(_BYTE *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing) = 0;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) = 0;
  return result;
}

uint64_t PhotogrammetrySessionImpl.logAnalyticsEvents(sourceType:)(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char *v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v2 = a1 & 1;
  v27 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent(0);
  MEMORY[0x24BDAC7A8](v27);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(0);
  v6 = *(_QWORD *)(inited - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](inited);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - v10;
  if (one-time initialization token for shared != -1)
    swift_once();
  v12 = v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sessionID;
  v13 = type metadata accessor for UUID();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v26 = v12;
  v14(v11, v12, v13);
  v11[*(int *)(inited + 20)] = v2;
  v15 = (void *)MEMORY[0x220768C3C](0xD000000000000031, 0x800000021BE8B870);
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v11, (uint64_t)v8, type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent);
  v16 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v17 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v8, v17 + v16, type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent);
  aBlock[4] = partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionInitEvent(event:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_17;
  v18 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);

  outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent);
  v19 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v20 = objc_msgSend(v19, sel_bundleIdentifier);

  if (v20)
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

  }
  else
  {
    v21 = 0;
    v23 = 0xE000000000000000;
  }
  v14(v4, v26, v13);
  v24 = (uint64_t *)&v4[*(int *)(v27 + 20)];
  *v24 = v21;
  v24[1] = v23;
  specialized AnalyticsManager.sendPhotogrammetrySessionBundleIdentifierEvent(event:)((uint64_t)v4);
  return outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
}

uint64_t type metadata accessor for PhotogrammetrySessionImpl.RequestMap()
{
  return objc_opt_self();
}

uint64_t OutputPublisherMonitor.sessionID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t Strong;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE v20[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v20[-v7];
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v20[-v10];
  v12 = v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor____lazy_storage___sessionID;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v12, (uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v11, 1, v13) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(a1, v11, v13);
  outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v18(v8, 1, 1, v13);
    goto LABEL_7;
  }
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16);
  v17(v8, Strong + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sessionID, v13);
  swift_release();
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v18(v8, 0, 1, v13);
  if (v15(v8, 1, v13) == 1)
  {
LABEL_7:
    UUID.init()();
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
    v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16);
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(a1, v8, v13);
LABEL_8:
  v17(v5, a1, v13);
  v18(v5, 0, 1, v13);
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)v5, v12, &demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

uint64_t OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v35 = a1;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation.BufferingPolicy);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v33 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v28 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v9);
  v11 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v12 = v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v31 = v13;
  v30(v12, 1, 1, v13);
  swift_weakInit();
  v14 = v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor____lazy_storage___sessionID;
  v15 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput);
  *v16 = 0;
  v16[1] = 0;
  v17 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_serialOutputQueue;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  v39 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v10, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v8, *MEMORY[0x24BEE5750], v29);
  *(_QWORD *)(v1 + v17) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v18 = (_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  *v18 = 0;
  v18[1] = 0;
  v19 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor__internalProcessingCompleteReceived;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Bool, os_unfair_lock_s>);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 20) = 0;
  *(_BYTE *)(v20 + 16) = 0;
  *(_QWORD *)(v2 + v19) = v20;
  v21 = (_QWORD *)(v2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
  *v21 = 0;
  v21[1] = 0;
  v22 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks;
  type metadata accessor for OutputPublisherMonitor.Tasks();
  v23 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v23 + 112) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v2 + v22) = v23;
  v37 = v2;
  v38 = v35;
  type metadata accessor for PhotogrammetrySession.Output(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v33, *MEMORY[0x24BEE6A10], v36);
  v24 = (uint64_t)v32;
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  v30(v24, 0, 1, v31);
  v25 = v2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs;
  swift_beginAccess();
  outlined assign with take of Material?(v24, v25, &demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  swift_endAccess();
  return v2;
}

uint64_t closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (**v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t (**v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD v44[2];
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v51 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v50 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Publishers.PrefetchStrategy();
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v47 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v46 = v11;
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  swift_weakInit();
  v14 = (uint64_t (**)(uint64_t))((char *)a2
                                         + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput);
  v15 = *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput);
  *v14 = partial apply for closure #1 in closure #1 in OutputPublisherMonitor.init(publisher:);
  v14[1] = (uint64_t (*)(uint64_t))v13;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
  v16 = swift_allocObject();
  swift_weakInit();
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v44[0] = a1;
  v45(v12, a1, v9);
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = (v17 + 24) & ~v17;
  v44[1] = v17 | 7;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v16;
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v20(v19 + v18, v12, v9);
  v21 = (uint64_t (**)(uint64_t))((char *)a2
                                         + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  v22 = *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  *v21 = partial apply for closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:);
  v21[1] = (uint64_t (*)(uint64_t))v19;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v22);
  v23 = swift_allocObject();
  swift_weakInit();
  v24 = v45;
  v45(v12, a1, v9);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v23;
  v20(v25 + v18, v12, v9);
  v26 = (uint64_t (**)())((char *)a2
                       + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
  v27 = *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
  *v26 = partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:);
  v26[1] = (uint64_t (*)())v25;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v27);
  v24(v12, v44[0], v9);
  v28 = swift_allocObject();
  v20(v28 + ((v17 + 16) & ~v17), v12, v9);
  v29 = a2[7];
  a2[7] = partial apply for closure #4 in closure #1 in OutputPublisherMonitor.init(publisher:);
  a2[8] = v28;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v29);
  swift_retain();
  AsyncStream.Continuation.onTermination.setter();
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<PhotogrammetrySession.Output, Never>>);
  v31 = *(_QWORD *)(v30 - 8);
  v45 = (void (*)(char *, uint64_t, uint64_t))v30;
  v46 = v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)v44 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v51;
  v36 = v47;
  v35 = v48;
  v37 = v49;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v48 + 104))(v47, *MEMORY[0x24BDB9638], v49, v32);
  v39 = v52;
  v38 = v53;
  v40 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v50, *MEMORY[0x24BDB9660], v53);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PhotogrammetrySession.Output, Never>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AnyPublisher<PhotogrammetrySession.Output, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PhotogrammetrySession.Output, Never>, MEMORY[0x24BDB9AF8]);
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Publishers.Buffer<AnyPublisher<PhotogrammetrySession.Output, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<PhotogrammetrySession.Output, Never>>, MEMORY[0x24BDB97E0]);
  v41 = v45;
  v42 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v46 + 8))(v34, v41);
  a2[2] = v42;
  return swift_release();
}

uint64_t closure #1 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    OutputPublisherMonitor.publishOutputMessage(internalOutput:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v24 = a3;
  v25 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v28 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PhotogrammetrySession.Output(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v23 = *(id *)(result + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_serialOutputQueue);
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v11);
    outlined init with copy of __RKEntityActionSpecification(v25, (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PhotogrammetrySession.Output);
    v16 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v17 = (v13 + *(unsigned __int8 *)(v9 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v18 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
    outlined init with take of __RKEntityActionSpecification((uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for PhotogrammetrySession.Output);
    aBlock[4] = partial apply for closure #1 in closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_93_0;
    v19 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter();
    v31 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v20 = v28;
    v21 = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v22 = v23;
    MEMORY[0x2207693A4](0, v7, v20, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v21);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v27);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v3 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation.YieldResult);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v5, type metadata accessor for PhotogrammetrySession.Output);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v20 = *(_QWORD *)(v7 - 8);
  v21 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v14 = result;
    v19[1] = *(_QWORD *)(result + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_serialOutputQueue);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
    v15 = *(unsigned __int8 *)(v11 + 80);
    v19[0] = v4;
    v16 = (v15 + 24) & ~v15;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v14;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v17 + v16, (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    aBlock[4] = partial apply for closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:);
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_82_0;
    v18 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v22 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v9, v6, v18);
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v19[0] + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  os_unfair_lock_s **v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  uint64_t result;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation.YieldResult);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v23 = a1;
    v14 = v13;
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_21B9AA000, v11, v12, "Publishing processingComplete...", v13, 2u);
    a1 = v23;
    MEMORY[0x220772F44](v14, -1, -1);
  }

  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:), (uint64_t)v16);
  swift_release();
  v17 = (os_unfair_lock_s **)(a1
                            + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor__internalProcessingCompleteReceived);
  swift_beginAccess();
  v18 = *v17;
  v19 = *v17 + 5;
  os_unfair_lock_lock(v19);
  LOBYTE(v18[4]._os_unfair_lock_opaque) = 0;
  os_unfair_lock_unlock(v19);
  swift_endAccess();
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v21 = *(void (**)(uint64_t))(a1 + 24);
  if (v21)
  {
    v22 = swift_retain();
    v21(v22);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v21);
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;

  OutputPublisherMonitor.Tasks.clear()();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void closure #4 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_21B9AA000, v1, v2, "Ending continuation...", v3, 2u);
    MEMORY[0x220772F44](v3, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  AsyncStream.Continuation.finish()();
}

uint64_t closure #5 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_21B9AA000, v1, v2, "onTermination() called. Stopping monitoring...", v3, 2u);
    MEMORY[0x220772F44](v3, -1, -1);
  }

  return OutputPublisherMonitor.stopMonitoring()();
}

uint64_t OutputPublisherMonitor.stopMonitoring()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 16))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  *(_QWORD *)(v0 + 16) = 0;
  swift_release();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs;
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)v3, v5, &demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  return swift_endAccess();
}

uint64_t closure #1 in OutputPublisherMonitor.connectPublisher(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v23 = *(id *)(result + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_serialOutputQueue);
    swift_release();
    v13 = type metadata accessor for PhotogrammetrySession.Output();
    v25 = v8;
    v26 = &v21;
    v24 = v5;
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(_QWORD *)(v14 + 64);
    v16 = MEMORY[0x24BDAC7A8](v13);
    v22 = v9;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v16);
    v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = a2;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
    aBlock[4] = partial apply for closure #1 in closure #1 in OutputPublisherMonitor.connectPublisher(_:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_76;
    v19 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v27 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v20 = v23;
    MEMORY[0x2207693A4](0, v11, v7, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v25);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in OutputPublisherMonitor.connectPublisher(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void (*v4)(uint64_t);

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = *(void (**)(uint64_t))(result + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v4);
    result = swift_release();
    if (v4)
    {
      v4(a2);
      return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
    }
  }
  return result;
}

void OutputPublisherMonitor.publishOutputMessage(internalOutput:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t *v18;
  void (*v19)(uint64_t *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __n128 v49;
  void (*v50)(char *, uint64_t *, __n128);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __n128 v57;
  void (*v58)(char *, uint64_t *, __n128);
  _QWORD *v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t Strong;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD **v72;
  _QWORD *v73;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v75;
  unint64_t v76;
  void (*v77)(_QWORD *);
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD **v81;
  _QWORD *v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  void (*v86)(_QWORD *);
  _QWORD *v87;
  void (*v88)(_QWORD *);
  _QWORD *v89;
  __n128 v90;
  unint64_t v91;
  void (*v92)(char *, char *, uint64_t, __n128);
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  void (*v96)(char *, uint64_t);
  void (*v97)(_QWORD *);
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  __n128 v101;
  unint64_t v102;
  void (*v103)(char *, __n128);
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  void (*v109)(char *, _QWORD *);
  uint64_t v110;
  void (*v111)(char *, _QWORD *);
  _QWORD *v112;
  void (*v113)(_QWORD *);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  __n128 v124;
  Swift::String v125;
  _QWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v126 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v126 - v6;
  v133 = (char *)type metadata accessor for PhotogrammetrySession.Request(0);
  v8 = *((_QWORD *)v133 - 1);
  MEMORY[0x24BDAC7A8](v133);
  v132 = (uint64_t)v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v126 - v11;
  v134 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x24BDAC7A8](v134);
  v135 = (_QWORD *)((char *)v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for PhotogrammetrySession.Output();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v18 = (_QWORD *)((char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v15 + 16);
  v19(v18, a1, v14, v17);
  v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 88))(v18, v14);
  if (MEMORY[0x24BE1EC68] && (_DWORD)v20 == *MEMORY[0x24BE1EC68])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    v21 = (char *)v18
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Error))
                 + 48);
    v22 = type metadata accessor for PhotogrammetrySession.Request();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = MEMORY[0x24BDAC7A8](v22);
    v26 = (char *)v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v23 + 32))(v26, v18, v22, v24);
    v27 = type metadata accessor for PhotogrammetrySession.Error();
    v28 = *(_QWORD *)(v27 - 8);
    v29 = MEMORY[0x24BDAC7A8](v27);
    v31 = (char *)v126 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t, __n128))(v28 + 32))(v31, v21, v27, v29);
    lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error();
    v32 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v33, v31, v27);
    OutputPublisherMonitor.handleRequestError(internalRequest:error:)((uint64_t)v26, v32);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);

    return;
  }
  if (MEMORY[0x24BE1EC88] && (_DWORD)v20 == *MEMORY[0x24BE1EC88])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    v34 = (char *)v18
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                 + 48);
    v35 = type metadata accessor for PhotogrammetrySession.Request();
    v36 = *(_QWORD *)(v35 - 8);
    v37 = MEMORY[0x24BDAC7A8](v35);
    v39 = (char *)v126 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v36 + 32))(v39, v18, v35, v37);
    v40 = type metadata accessor for PhotogrammetrySession.Result();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = MEMORY[0x24BDAC7A8](v40);
    v44 = (char *)v126 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t, __n128))(v41 + 32))(v44, v34, v40, v42);
    OutputPublisherMonitor.handleRequestComplete(internalRequest:internalResult:)((uint64_t)v39, (uint64_t)v44);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v40);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    return;
  }
  if (MEMORY[0x24BE1EC90] && (_DWORD)v20 == *MEMORY[0x24BE1EC90])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    v45 = *(uint64_t *)((char *)v18
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double))
                              + 48));
    v46 = type metadata accessor for PhotogrammetrySession.Request();
    v131 = v126;
    v47 = *(_QWORD **)(v46 - 8);
    v48 = v47[8];
    v49 = MEMORY[0x24BDAC7A8](v46);
    v50 = (void (*)(char *, uint64_t *, __n128))v47[4];
    v132 = v51;
    v50((char *)v126 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v49);
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      PhotogrammetrySessionImpl.RequestMap.findRequest(for:)((uint64_t)v126 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v7);
      v52 = swift_release();
      v53 = v133;
    }
    else
    {
      v53 = v133;
      v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t, char *))(v8 + 56))(v7, 1, 1, v133);
    }
    v130 = v126;
    v90 = MEMORY[0x24BDAC7A8](v52);
    v91 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
    v92 = (void (*)(char *, char *, uint64_t, __n128))v47[2];
    v133 = (char *)v126 - v91;
    v93 = v132;
    v92((char *)v126 - v91, (char *)v126 - v91, v132, v90);
    v94 = (*(uint64_t (**)(char *, uint64_t, char *))(v8 + 48))(v7, 1, v53);
    if ((_DWORD)v94 == 1)
    {
      v95 = MEMORY[0x24BDAC7A8](v94);
      v92((char *)v126 - v91, (char *)v126 - v91, v93, v95);
      PhotogrammetrySession.Request.init(_:)((uint64_t)v126 - v91, (uint64_t)v12);
      v96 = (void (*)(char *, uint64_t))v47[1];
      v96((char *)v126 - v91, v93);
      outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for PhotogrammetrySession.Request?);
    }
    else
    {
      v96 = (void (*)(char *, uint64_t))v47[1];
      v96((char *)v126 - v91, v93);
      outlined init with take of __RKEntityActionSpecification((uint64_t)v7, (uint64_t)v12, type metadata accessor for PhotogrammetrySession.Request);
    }
    v97 = *(void (**)(_QWORD *))(v136
                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    v98 = v133;
    if (v97)
    {
      v99 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double))
                   + 48);
      v100 = v135;
      outlined init with copy of __RKEntityActionSpecification((uint64_t)v12, (uint64_t)v135, type metadata accessor for PhotogrammetrySession.Request);
      *(_QWORD *)((char *)v100 + v99) = v45;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v97(v100);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v97);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v100, type metadata accessor for PhotogrammetrySession.Output);
    }
    outlined destroy of __RKEntityActionSpecification((uint64_t)v12, type metadata accessor for PhotogrammetrySession.Request);
    v96(v98, v132);
    return;
  }
  if (MEMORY[0x24BE1ECA8] && (_DWORD)v20 == *MEMORY[0x24BE1ECA8])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, progress: PhotogrammetrySession.Output.ProgressInfo));
    v54 = type metadata accessor for PhotogrammetrySession.Request();
    v131 = v126;
    v55 = *(_QWORD **)(v54 - 8);
    v56 = v55[8];
    v57 = MEMORY[0x24BDAC7A8](v54);
    v58 = (void (*)(char *, uint64_t *, __n128))v55[4];
    v130 = v59;
    v58((char *)v126 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v57);
    v60 = type metadata accessor for PhotogrammetrySession.Output.ProgressInfo();
    v129 = v126;
    v61 = MEMORY[0x24BDAC7A8](v60);
    v126[1] = v62;
    v127 = v63;
    v64 = (char *)v126 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(__n128))(v63 + 32))(v61);
    Strong = swift_weakLoadStrong();
    v128 = v60;
    if (Strong)
    {
      swift_retain();
      swift_release();
      PhotogrammetrySessionImpl.RequestMap.findRequest(for:)((uint64_t)v126 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v4);
      v66 = swift_release();
      v67 = v133;
    }
    else
    {
      v67 = v133;
      v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t, char *))(v8 + 56))(v4, 1, 1, v133);
    }
    v126[2] = v126;
    v101 = MEMORY[0x24BDAC7A8](v66);
    v102 = (v56 + 15) & 0xFFFFFFFFFFFFFFF0;
    v103 = (void (*)(char *, __n128))v55[2];
    v133 = v104;
    v105 = v130;
    v103((char *)v126 - v102, v101);
    v106 = (*(uint64_t (**)(char *, uint64_t, char *))(v8 + 48))(v4, 1, v67);
    if ((_DWORD)v106 == 1)
    {
      v107 = MEMORY[0x24BDAC7A8](v106);
      ((void (*)(char *, char *, _QWORD *, __n128))v103)((char *)v126 - v102, (char *)v126 - v102, v105, v107);
      v108 = v132;
      PhotogrammetrySession.Request.init(_:)((uint64_t)v126 - v102, v132);
      v109 = (void (*)(char *, _QWORD *))v55[1];
      v110 = v108;
      v111 = v109;
      v109((char *)v126 - v102, v105);
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for PhotogrammetrySession.Request?);
    }
    else
    {
      v111 = (void (*)(char *, _QWORD *))v55[1];
      v111((char *)v126 - v102, v105);
      v110 = v132;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v4, v132, type metadata accessor for PhotogrammetrySession.Request);
    }
    v112 = v105;
    v113 = *(void (**)(_QWORD *))(v136
                                           + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    v114 = v127;
    v115 = v128;
    if (v113)
    {
      v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo));
      v117 = v135;
      v118 = (char *)v135 + *(int *)(v116 + 48);
      v119 = outlined init with copy of __RKEntityActionSpecification(v110, (uint64_t)v135, type metadata accessor for PhotogrammetrySession.Request);
      v120 = MEMORY[0x24BDAC7A8](v119);
      v122 = (char *)v126 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t, __n128))(v114 + 16))(v122, v64, v115, v120);
      swift_retain();
      v123 = (uint64_t)v118;
      v112 = v130;
      PhotogrammetrySession.Output.ProgressInfo.init(_:)((uint64_t)v122, v123);
      v110 = v132;
      swift_storeEnumTagMultiPayload();
      v113(v117);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v113);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v117, type metadata accessor for PhotogrammetrySession.Output);
    }
    outlined destroy of __RKEntityActionSpecification(v110, type metadata accessor for PhotogrammetrySession.Request);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v64, v115);
    v111(v133, v112);
  }
  else if (MEMORY[0x24BE1EC78] && (_DWORD)v20 == *MEMORY[0x24BE1EC78])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    v68 = *v18;
    v69 = v18[1];
    v70 = v18[2];
    v71 = swift_weakLoadStrong();
    if (v71)
    {
      v72 = (_QWORD **)(v71 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_invalidSamples);
      swift_beginAccess();
      v73 = *v72;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v72 = v73;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73[2] + 1, 1, v73);
        *v72 = v73;
      }
      v76 = v73[2];
      v75 = v73[3];
      if (v76 >= v75 >> 1)
      {
        v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v75 > 1), v76 + 1, 1, v73);
        *v72 = v73;
      }
      v73[2] = v76 + 1;
      v73[v76 + 4] = v68;
      swift_endAccess();
      swift_release();
    }
    v77 = *(void (**)(_QWORD *))(v136
                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    if (v77)
    {
      v78 = v135;
      *v135 = v68;
      v78[1] = v69;
      v78[2] = v70;
      swift_storeEnumTagMultiPayload();
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v77);
      swift_bridgeObjectRetain();
      v77(v78);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v77);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v78, type metadata accessor for PhotogrammetrySession.Output);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!MEMORY[0x24BE1EC80] || (_DWORD)v20 != *MEMORY[0x24BE1EC80])
    {
      if (MEMORY[0x24BE1EC70] && (_DWORD)v20 == *MEMORY[0x24BE1EC70])
      {
        v88 = *(void (**)(_QWORD *))(v136
                                              + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
        if (!v88)
          return;
        v89 = v135;
      }
      else if (MEMORY[0x24BE1ECB8] && (_DWORD)v20 == *MEMORY[0x24BE1ECB8])
      {
        v88 = *(void (**)(_QWORD *))(v136
                                              + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
        if (!v88)
          return;
        v89 = v135;
      }
      else
      {
        if (!MEMORY[0x24BE1ECB0] || (_DWORD)v20 != *MEMORY[0x24BE1ECB0])
        {
          if (MEMORY[0x24BE1EC98] && (_DWORD)v20 == *MEMORY[0x24BE1EC98])
          {
            OutputPublisherMonitor.handleProcessingComplete()();
          }
          else if (MEMORY[0x24BE1ECA0] && (_DWORD)v20 == *MEMORY[0x24BE1ECA0])
          {
            OutputPublisherMonitor.handleProcessingCancelled()();
          }
          else
          {
            v124 = MEMORY[0x24BDAC7A8](v20);
            v19((_QWORD *)((char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0)), a1, v14, v124);
            v137 = 0;
            v138 = 0xE000000000000000;
            _StringGuts.grow(_:)(48);
            v125._object = (void *)0x800000021BE8B800;
            v125._countAndFlagsBits = 0xD00000000000002ELL;
            String.append(_:)(v125);
            _print_unlocked<A, B>(_:_:)();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          return;
        }
        v88 = *(void (**)(_QWORD *))(v136
                                              + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
        if (!v88)
          return;
        v89 = v135;
      }
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v88(v89);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v88);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v89, type metadata accessor for PhotogrammetrySession.Output);
      return;
    }
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    v79 = *v18;
    v80 = swift_weakLoadStrong();
    if (v80)
    {
      v81 = (_QWORD **)(v80 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_skippedSamples);
      swift_beginAccess();
      v82 = *v81;
      v83 = swift_isUniquelyReferenced_nonNull_native();
      *v81 = v82;
      if ((v83 & 1) == 0)
      {
        v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82[2] + 1, 1, v82);
        *v81 = v82;
      }
      v85 = v82[2];
      v84 = v82[3];
      if (v85 >= v84 >> 1)
      {
        v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v84 > 1), v85 + 1, 1, v82);
        *v81 = v82;
      }
      v82[2] = v85 + 1;
      v82[v85 + 4] = v79;
      swift_endAccess();
      swift_release();
    }
    v86 = *(void (**)(_QWORD *))(v136
                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    if (v86)
    {
      v87 = v135;
      *v135 = v79;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v86(v87);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v86);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v87, type metadata accessor for PhotogrammetrySession.Output);
    }
  }
}

uint64_t PhotogrammetrySession.Request.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(__n128);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t result;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(char *, char *, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  uint64_t *v70;
  char *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v4 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PhotogrammetrySession.Request();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, a1, v11, v13);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v11);
  if (MEMORY[0x24BE1ED68] && v16 == *MEMORY[0x24BE1ED68])
  {
    v70 = (uint64_t *)v6;
    v74 = a1;
    v75 = v4;
    v76 = a2;
    (*(void (**)(char *, uint64_t))(v12 + 96))(v15, v11);
    v17 = (uint64_t)&v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                               + 64)];
    v81 = v8;
    v82 = v7;
    v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v77 = v10;
    v18(v10, v15, v7);
    v19 = type metadata accessor for PhotogrammetrySession.Request.Detail();
    v73 = &v57;
    v20 = MEMORY[0x24BDAC7A8](v19);
    v58 = v21;
    v78 = v22;
    v79 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = *(void (**)(__n128))(v22 + 32);
    v80 = v24;
    v23(v20);
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
    v72 = &v57;
    v26 = *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64);
    MEMORY[0x24BDAC7A8](v25);
    v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with take of Transform?(v17, (uint64_t)v27, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
    v28 = type metadata accessor for PhotogrammetrySession.Request.Geometry();
    v63 = &v57;
    v29 = *(_QWORD *)(v28 - 8);
    MEMORY[0x24BDAC7A8](v28);
    v31 = (char *)&v57 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x24BDAC7A8](v32);
    v71 = v27;
    outlined init with copy of (Int, URL)((uint64_t)v27, (uint64_t)v27, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
    v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28);
    if (v69 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
      v62 = 0u;
      v60 = 0;
      *(_QWORD *)&v59 = 0;
      v68 = 0uLL;
      v66 = 0;
      v67 = 0;
      v64 = 0;
      v65 = 0;
      v61 = 0u;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v27, v28);
      PhotogrammetrySession.Request.Geometry.orientedBoundsTransform.getter();
      computeOrientedBoundingBox(for:)(&v83);
      v68 = v83;
      v67 = v85;
      v66 = v84;
      v65 = v87;
      v64 = v86;
      PhotogrammetrySession.Request.Geometry.rootTransform.getter();
      REMakeSRTFromMatrix();
      v62 = v34;
      v61 = v35;
      v59 = v36;
      if (one-time initialization token for identity != -1)
        swift_once();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
      v60 = v59;
      *(_QWORD *)&v59 = *((_QWORD *)&v59 + 1);
    }
    v37 = (uint64_t)v70;
    v38 = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v81 + 16))(v70, v77, v82);
    v70 = &v57;
    v39 = v58;
    v40 = MEMORY[0x24BDAC7A8](v38);
    v41 = (char *)&v57 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    v42 = v78;
    v43 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v78 + 16);
    v44 = v80;
    v45 = v43(v41, v79, v80, v40);
    v46 = MEMORY[0x24BDAC7A8](v45);
    v43(v41, v41, v44, v46);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v41, v44);
    if (MEMORY[0x24BE1ED20] && v47 == *MEMORY[0x24BE1ED20])
    {
      v48 = v69 == 1;
      v49 = v37
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      v50 = *(void (**)(char *, uint64_t))(v78 + 8);
      v51 = v80;
      v50((char *)&v57 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), v80);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v74, v11);
      outlined destroy of BodyTrackingComponent?((uint64_t)v71, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
      v50(v79, v51);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v77, v82);
      v52 = v61;
      *(_OWORD *)v49 = v62;
      *(_OWORD *)(v49 + 16) = v52;
      v53 = v59;
      *(_QWORD *)(v49 + 32) = v60;
      *(_QWORD *)(v49 + 40) = v53;
      v54 = *((_QWORD *)&v68 + 1);
      *(_QWORD *)(v49 + 48) = v68;
      *(_QWORD *)(v49 + 56) = v54;
      v55 = v67;
      *(_QWORD *)(v49 + 64) = v66;
      *(_QWORD *)(v49 + 72) = v55;
      v56 = v65;
      *(_QWORD *)(v49 + 80) = v64;
      *(_QWORD *)(v49 + 88) = v56;
      *(_BYTE *)(v49 + 96) = v48;
      swift_storeEnumTagMultiPayload();
      return outlined init with take of __RKEntityActionSpecification(v37, v76, type metadata accessor for PhotogrammetrySession.Request);
    }
  }
  else if (MEMORY[0x24BE1ED08] && v16 == *MEMORY[0x24BE1ED08]
         || MEMORY[0x24BE1ED38] && v16 == *MEMORY[0x24BE1ED38]
         || MEMORY[0x24BE1ED18] && v16 == *MEMORY[0x24BE1ED18])
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
    return swift_storeEnumTagMultiPayload();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PhotogrammetrySession.Output.ProgressInfo.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  __n128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = PhotogrammetrySession.Output.ProgressInfo.estimatedRemainingTime.getter();
  v6 = v5;
  v7 = type metadata accessor for PhotogrammetrySession.ProcessStage();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.ProcessStage?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  PhotogrammetrySession.Output.ProgressInfo.processStage.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
  {
    v14 = type metadata accessor for PhotogrammetrySession.Output.ProgressInfo();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
    result = outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySession.ProcessStage?);
    v16 = 6;
LABEL_22:
    *(_QWORD *)a2 = v4;
    *(_BYTE *)(a2 + 8) = v6 & 1;
    *(_BYTE *)(a2 + 9) = v16;
    return result;
  }
  v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v21 - v10, v13, v7);
  v18 = MEMORY[0x24BDAC7A8](v17);
  (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 16))((char *)&v21 - v10, (char *)&v21 - v10, v7, v18);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))((char *)&v21 - v10, v7);
  if (MEMORY[0x24BE1EAF8] && v19 == *MEMORY[0x24BE1EAF8])
  {
    v16 = 0;
LABEL_21:
    v20 = type metadata accessor for PhotogrammetrySession.Output.ProgressInfo();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))((char *)&v21 - v10, v7);
    goto LABEL_22;
  }
  if (MEMORY[0x24BE1EB00] && v19 == *MEMORY[0x24BE1EB00])
  {
    v16 = 1;
    goto LABEL_21;
  }
  if (MEMORY[0x24BE1EB18] && v19 == *MEMORY[0x24BE1EB18])
  {
    v16 = 2;
    goto LABEL_21;
  }
  if (MEMORY[0x24BE1EB08] && v19 == *MEMORY[0x24BE1EB08])
  {
    v16 = 3;
    goto LABEL_21;
  }
  if (MEMORY[0x24BE1EB10] && v19 == *MEMORY[0x24BE1EB10])
  {
    v16 = 4;
    goto LABEL_21;
  }
  if (MEMORY[0x24BE1EAF0] && v19 == *MEMORY[0x24BE1EAF0])
  {
    v16 = 5;
    goto LABEL_21;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t OutputPublisherMonitor.handleRequestError(internalRequest:error:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  void *v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char v51;
  uint64_t v52;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v63 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v61 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v55 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)&v54 - v9;
  v56 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x24BDAC7A8](v56);
  v57 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PhotogrammetrySession.Request(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v65 = (uint64_t)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_session;
  Strong = swift_weakLoadStrong();
  v66 = v2;
  v59 = v17;
  v60 = v6;
  if (Strong)
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.findRequest(for:)(a1, (uint64_t)v13);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  v19 = type metadata accessor for PhotogrammetrySession.Request();
  v58 = &v54;
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v23 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  v64 = a1;
  v24((char *)&v54 - v23, a1, v19, v22);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  if ((_DWORD)v25 == 1)
  {
    v26 = MEMORY[0x24BDAC7A8](v25);
    v24((char *)&v54 - v23, (uint64_t)&v54 - v23, v19, v26);
    v27 = v65;
    PhotogrammetrySession.Request.init(_:)((uint64_t)&v54 - v23, v65);
    (*(void (**)(char *, uint64_t))(v20 + 8))((char *)&v54 - v23, v19);
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))((char *)&v54 - v23, v19);
    v27 = v65;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v13, v65, type metadata accessor for PhotogrammetrySession.Request);
  }
  v28 = v63;
  v29 = *(void (**)(uint64_t))(v66
                                       + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  if (v29)
  {
    v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                 + 48);
    v31 = v57;
    outlined init with copy of __RKEntityActionSpecification(v27, v57, type metadata accessor for PhotogrammetrySession.Request);
    *(_QWORD *)(v31 + v30) = v28;
    swift_storeEnumTagMultiPayload();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v29);
    v32 = v28;
    v29(v31);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v29);
    outlined destroy of __RKEntityActionSpecification(v31, type metadata accessor for PhotogrammetrySession.Output);
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)logger);
  v34 = v28;
  v35 = v28;
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v39 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v38 = 138543362;
    v27 = v65;
    v40 = v28;
    v41 = _swift_stdlib_bridgeErrorToNSError();
    v67 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v39 = v41;

    _os_log_impl(&dword_21B9AA000, v36, v37, "requestError: %{public}@", v38, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v39, -1, -1);
    MEMORY[0x220772F44](v38, -1, -1);
  }
  else
  {

  }
  v42 = v64;
  v43 = v62;
  v44 = v60;

  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    v45 = v61;
    PhotogrammetrySessionImpl.RequestMap.getStartTimestamp(for:)(v42, v61);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43) != 1)
    {
      v46 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v54, v45, v43);
      v47 = v55;
      Date.init()();
      Date.timeIntervalSince(_:)();
      v49 = v48;
      v50 = *(void (**)(char *, uint64_t))(v44 + 8);
      v50(v47, v43);
      v50(v46, v43);
      v51 = 0;
      v52 = v49;
      goto LABEL_19;
    }
  }
  else
  {
    v45 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v61, 1, 1, v43);
  }
  outlined destroy of BodyTrackingComponent?(v45, &demangling cache variable for type metadata for Date?);
  v52 = 0;
  v51 = 1;
LABEL_19:
  OutputPublisherMonitor.sendAnalyticsForRequest(request:success:error:requestTime:)(v27, 0, v28, v52, v51);
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.removeRequest(internalRequest:)(v42);
    swift_release();
  }
  return outlined destroy of __RKEntityActionSpecification(v27, type metadata accessor for PhotogrammetrySession.Request);
}

uint64_t OutputPublisherMonitor.handleRequestComplete(internalRequest:internalResult:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, __n128);
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t EnumCaseMultiPayload;
  __n128 v43;
  char *v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;

  v88 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v84 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v83 = (char *)&v79 - v11;
  v85 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x24BDAC7A8](v85);
  v86 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PhotogrammetrySession.Result(0);
  MEMORY[0x24BDAC7A8](v13);
  v87 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL();
  v81 = *(_QWORD *)(v15 - 8);
  v82 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v80 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PhotogrammetrySession.Request(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v94 = (uint64_t)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v79 - v24;
  v95 = v2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_session;
  Strong = swift_weakLoadStrong();
  v92 = v7;
  v93 = v2;
  v90 = v8;
  v91 = v6;
  v97 = v25;
  if (Strong)
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.findRequest(for:)(a1, (uint64_t)v19);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
  }
  v27 = type metadata accessor for PhotogrammetrySession.Request();
  v89 = &v79;
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 64);
  v30 = MEMORY[0x24BDAC7A8](v27);
  v31 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  v32 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16);
  v96 = a1;
  v32((char *)&v79 - v31, a1, v27, v30);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  if ((_DWORD)v33 == 1)
  {
    v79 = (uint64_t)&v79;
    v34 = MEMORY[0x24BDAC7A8](v33);
    v32((char *)&v79 - v31, (uint64_t)&v79 - v31, v27, v34);
    v35 = (uint64_t)v97;
    PhotogrammetrySession.Request.init(_:)((uint64_t)&v79 - v31, (uint64_t)v97);
    v36 = *(void (**)(char *, uint64_t))(v28 + 8);
    v36((char *)&v79 - v31, v27);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t))(v28 + 8);
    v36((char *)&v79 - v31, v27);
    v35 = (uint64_t)v97;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v19, (uint64_t)v97, type metadata accessor for PhotogrammetrySession.Request);
  }
  v38 = (uint64_t)v91;
  v37 = v92;
  v39 = (void (*)(char *, char *, uint64_t))v35;
  v40 = v35;
  v41 = v94;
  outlined init with copy of __RKEntityActionSpecification(v40, v94, type metadata accessor for PhotogrammetrySession.Request);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v43 = MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
    v44 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    v32(v44, v96, v27, v43);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v44, v27);
    if (MEMORY[0x24BE1ED68] && v45 == *MEMORY[0x24BE1ED68])
    {
      (*(void (**)(char *, uint64_t))(v28 + 96))(v44, v27);
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?));
      v47 = &v44[*(int *)(v46 + 48)];
      v48 = (uint64_t)&v44[*(int *)(v46 + 64)];
      v50 = (uint64_t)v80;
      v49 = v81;
      v51 = v44;
      v52 = v82;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v80, v51, v82);
      outlined destroy of BodyTrackingComponent?(v48, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
      v53 = type metadata accessor for PhotogrammetrySession.Request.Detail();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v47, v53);
      OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(v50, v39);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v52);
      v54 = v90;
      goto LABEL_16;
    }
    v36(v44, v27);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification(v41, type metadata accessor for PhotogrammetrySession.Request);
  }
  v55 = v93;
  v54 = v90;
  v56 = (uint64_t)v39;
  v57 = (uint64_t)v87;
  v58 = swift_weakLoadStrong();
  v59 = type metadata accessor for PhotogrammetrySession.Result();
  v60 = MEMORY[0x24BDAC7A8](v59);
  v62 = (char *)&v79 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v63 + 16))(v62, v88, v60);
  PhotogrammetrySession.Result.init(session:internalResult:)(v58, (uint64_t)v62, v57);
  v64 = *(void (**)(uint64_t))(v55
                                       + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  if (v64)
  {
    v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result));
    v66 = v37;
    v67 = v86;
    v68 = v86 + *(int *)(v65 + 48);
    outlined init with copy of __RKEntityActionSpecification(v56, v86, type metadata accessor for PhotogrammetrySession.Request);
    outlined init with copy of __RKEntityActionSpecification(v57, v68, type metadata accessor for PhotogrammetrySession.Result);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    v64(v67);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v64);
    v69 = v67;
    v37 = v66;
    outlined destroy of __RKEntityActionSpecification(v69, type metadata accessor for PhotogrammetrySession.Output);
  }
  outlined destroy of __RKEntityActionSpecification(v57, type metadata accessor for PhotogrammetrySession.Result);
LABEL_16:
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.getStartTimestamp(for:)(v96, v38);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v38, 1, v37) != 1)
    {
      v70 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v83, v38, v37);
      v71 = v84;
      Date.init()();
      Date.timeIntervalSince(_:)();
      v73 = v72;
      v74 = *(void (**)(char *, uint64_t))(v54 + 8);
      v74(v71, v37);
      v74(v70, v37);
      v75 = 0;
      v76 = v73;
      goto LABEL_21;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v38, 1, 1, v37);
  }
  outlined destroy of BodyTrackingComponent?(v38, &demangling cache variable for type metadata for Date?);
  v76 = 0;
  v75 = 1;
LABEL_21:
  v77 = (uint64_t)v97;
  OutputPublisherMonitor.sendAnalyticsForRequest(request:success:error:requestTime:)((uint64_t)v97, 1, 0, v76, v75);
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.removeRequest(internalRequest:)(v96);
    swift_release();
  }
  return outlined destroy of __RKEntityActionSpecification(v77, type metadata accessor for PhotogrammetrySession.Request);
}

uint64_t PhotogrammetrySession.Result.init(session:internalResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  __int128 v43;
  __int128 v44;

  v6 = type metadata accessor for PhotogrammetrySession.Result(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (_OWORD *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for PhotogrammetrySession.Result();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a2, v9, v11);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
  if (MEMORY[0x24BE1ECE8] && v14 == *MEMORY[0x24BE1ECE8])
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
    v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a3, v13, v15);
    return swift_storeEnumTagMultiPayload();
  }
  else if (MEMORY[0x24BE1ECE0] && v14 == *MEMORY[0x24BE1ECE0])
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
    computeOrientedBoundingBox(for:)(&v42);
    v38 = v43;
    v39 = v44;
    simd_matrix4x4(v42);
    REAABBTransform();
    v38 = v18;
    v39 = v17;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    *v8 = v39;
    v8[1] = v38;
    swift_storeEnumTagMultiPayload();
    return outlined init with take of __RKEntityActionSpecification((uint64_t)v8, a3, type metadata accessor for PhotogrammetrySession.Result);
  }
  else
  {
    v40 = a2;
    v41 = v6;
    if (MEMORY[0x24BE1ECD0] && v14 == *MEMORY[0x24BE1ECD0])
    {
      (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
      v19 = type metadata accessor for PhotogrammetrySession.PointCloud();
      *(_QWORD *)&v39 = &v36;
      v20 = *(_QWORD *)(v19 - 8);
      v37 = v19;
      v21 = *(_QWORD *)(v20 + 64);
      v22 = MEMORY[0x24BDAC7A8](v19);
      v23 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = (*(uint64_t (**)(char *, char *, __n128))(v20 + 32))(v23, v13, v22);
      *(_QWORD *)&v38 = &v36;
      v25 = MEMORY[0x24BDAC7A8](v24);
      v26 = v37;
      (*(void (**)(char *, char *, uint64_t, __n128))(v20 + 16))(v23, v23, v37, v25);
      PhotogrammetrySession.PointCloud.init(_:)((uint64_t)v23, &v42);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v40, v9);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v26);
      *(_QWORD *)v8 = v42.i64[0];
      swift_storeEnumTagMultiPayload();
      return outlined init with take of __RKEntityActionSpecification((uint64_t)v8, a3, type metadata accessor for PhotogrammetrySession.Result);
    }
    else
    {
      *(_QWORD *)&v39 = a3;
      if (MEMORY[0x24BE1ECD8] && v14 == *MEMORY[0x24BE1ECD8])
      {
        (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
        v27 = type metadata accessor for PhotogrammetrySession.Poses();
        *(_QWORD *)&v38 = &v36;
        v28 = *(_QWORD *)(v27 - 8);
        v29 = *(_QWORD *)(v28 + 64);
        v30 = MEMORY[0x24BDAC7A8](v27);
        v31 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
        v32 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v28 + 32))((char *)&v36 - v31, v13, v27, v30);
        v33 = MEMORY[0x24BDAC7A8](v32);
        (*(void (**)(char *, char *, uint64_t, __n128))(v28 + 16))((char *)&v36 - v31, (char *)&v36 - v31, v27, v33);
        PhotogrammetrySession.Poses.init(poses:)((uint64_t)&v36 - v31, (unint64_t *)&v42);
        if (a1)
        {
          swift_retain();
          PhotogrammetrySessionImpl.addImageMappingDictionary(into:)((uint64_t)&v42);
          swift_release_n();
        }
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v40, v9);
        (*(void (**)(char *, uint64_t))(v28 + 8))((char *)&v36 - v31, v27);
        v34 = v43;
        v35 = v39;
        *(float32x4_t *)v39 = v42;
        *(_QWORD *)(v35 + 16) = v34;
        return swift_storeEnumTagMultiPayload();
      }
      else
      {
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1, void (*a2)(char *, char *, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  v47 = a1;
  v48 = a2;
  v2 = type metadata accessor for PhotogrammetrySession.Request(0);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v53 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v40 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v10;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v14;
  v42 = v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v38 - v16;
  v43 = (char *)&v38 - v16;
  UUID.init()();
  v18 = type metadata accessor for TaskPriority();
  v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v46 = v18;
  v45(v10, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v47, v5);
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v48, v53, type metadata accessor for PhotogrammetrySession.Request);
  v48 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v19 = v11;
  v48(v14, v17, v11);
  v20 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (*(unsigned __int8 *)(v49 + 80) + v21 + 8) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  v23 = *(unsigned __int8 *)(v12 + 80);
  v24 = v12;
  v44 = v12;
  v25 = (v50 + v23 + v22) & ~v23;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v26 + v20, v40, v39);
  v27 = v51;
  *(_QWORD *)(v26 + v21) = v51;
  outlined init with take of __RKEntityActionSpecification(v53, v26 + v22, type metadata accessor for PhotogrammetrySession.Request);
  v28 = *(void (**)(unint64_t, char *, uint64_t))(v24 + 32);
  v29 = v41;
  v30 = v19;
  v28(v26 + v25, v41, v19);
  swift_retain();
  v31 = (uint64_t)v52;
  v32 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v52, (uint64_t)&async function pointer to partial apply for closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), v26);
  v45((char *)v31, 1, 1, v46);
  v33 = v43;
  v48(v29, v43, v30);
  v34 = (v23 + 40) & ~v23;
  v35 = (v42 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = 0;
  v36[3] = 0;
  v36[4] = v27;
  v28((unint64_t)v36 + v34, v29, v30);
  *(_QWORD *)((char *)v36 + v35) = v32;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v52, (uint64_t)&async function pointer to partial apply for closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), (uint64_t)v36);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v33, v30);
}

uint64_t closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v7[14] = type metadata accessor for PhotogrammetrySession.Output(0);
  v7[15] = swift_task_alloc();
  v8 = type metadata accessor for URL();
  v7[16] = v8;
  v7[17] = *(_QWORD *)(v8 - 8);
  v7[18] = swift_task_alloc();
  v7[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = v0[10];
  v2 = v0[19];
  v3 = v0[16];
  v4 = v0[17];
  v5 = type metadata accessor for Logger();
  v0[20] = __swift_project_value_buffer(v5, (uint64_t)logger);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v1, v3);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[19];
  v11 = v0[16];
  if (v9)
  {
    v20 = v0[17];
    v12 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v22 = v21;
    *(_DWORD *)v12 = 141558274;
    v0[8] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2080;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v11);
    _os_log_impl(&dword_21B9AA000, v7, v8, "Loading model from url: %{mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v21, -1, -1);
    MEMORY[0x220772F44](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[19], v0[16]);
  }

  v15 = v0[18];
  v16 = v0[16];
  v17 = v0[10];
  type metadata accessor for ModelEntity();
  v6(v15, v17, v16);
  v18 = (_QWORD *)swift_task_alloc();
  v0[21] = v18;
  *v18 = v0;
  v18[1] = closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:);
  return Entity.init(contentsOf:withName:)(v0[18], 0, 0);
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_21B9AA000, v1, v2, "The model is successfully loaded!", v3, 2u);
    MEMORY[0x220772F44](v3, -1, -1);
  }

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v4, v5))
    {
      swift_release();

      goto LABEL_10;
    }
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_21B9AA000, v4, v5, "Task for model loading was canceled!", v6, 2u);
    MEMORY[0x220772F44](v6, -1, -1);

    goto LABEL_8;
  }
  v7 = *(void (**)(uint64_t))(v0[11]
                                      + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  v8 = v0[22];
  if (!v7)
  {
LABEL_8:
    swift_release();
    goto LABEL_10;
  }
  v9 = v0[15];
  v10 = v0[12];
  v11 = (_QWORD *)(v9
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                          + 48));
  outlined init with copy of __RKEntityActionSpecification(v10, v9, type metadata accessor for PhotogrammetrySession.Request);
  *v11 = v8;
  type metadata accessor for PhotogrammetrySession.Result(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v7);
  swift_retain();
  v7(v9);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);
  swift_release();
  outlined destroy of __RKEntityActionSpecification(v9, type metadata accessor for PhotogrammetrySession.Output);
LABEL_10:
  v12 = v0[11];
  v13 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks;
  v0[24] = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks;
  v0[25] = *(_QWORD *)(v12 + v13);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;

  OutputPublisherMonitor.Tasks.removeTask(ID:)(*(_QWORD *)(v0 + 104));
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 88)
                 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor__internalProcessingCompleteReceived);
  swift_beginAccess();
  v2 = *v1;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  v3 = *(unsigned __int8 *)(v2 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
  swift_release();
  if (v3 == 1)
  {
    *(_QWORD *)(v0 + 208) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + *(_QWORD *)(v0 + 192));
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_beginAccess();
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 16);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  if (!*(_QWORD *)(v0 + 216))
  {
    v1 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 88)
                                        + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
    if (v1)
    {
      v2 = swift_retain();
      v1(v2);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v1);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  void *v4;
  uint8_t *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.debug.getter();
    v3 = os_log_type_enabled(v1, v2);
    v4 = (void *)v0[23];
    if (!v3)
    {

      goto LABEL_8;
    }
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_21B9AA000, v1, v2, "Task for model loading was canceled!", v5, 2u);
    MEMORY[0x220772F44](v5, -1, -1);

    goto LABEL_6;
  }
  v6 = *(void (**)(uint64_t))(v0[11]
                                      + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  v4 = (void *)v0[23];
  if (!v6)
  {
LABEL_6:

    goto LABEL_8;
  }
  v7 = v0[15];
  v8 = v0[12];
  v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
              + 48);
  outlined init with copy of __RKEntityActionSpecification(v8, v7, type metadata accessor for PhotogrammetrySession.Request);
  *(_QWORD *)(v7 + v9) = v4;
  swift_storeEnumTagMultiPayload();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v6);
  v10 = v4;
  v6(v7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);

  outlined destroy of __RKEntityActionSpecification(v7, type metadata accessor for PhotogrammetrySession.Output);
LABEL_8:
  v11 = v0[11];
  v12 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks;
  v0[24] = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks;
  v0[25] = *(_QWORD *)(v11 + v12);
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;

  OutputPublisherMonitor.Tasks.addTask(ID:task:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OutputPublisherMonitor.handleProcessingComplete()()
{
  return OutputPublisherMonitor.handleProcessingComplete()((uint64_t)&unk_24DFB7150, (uint64_t)&unk_24DFB7178, (uint64_t)&async function pointer to partial apply for closure #1 in OutputPublisherMonitor.handleProcessingComplete());
}

uint64_t closure #1 in OutputPublisherMonitor.handleProcessingComplete()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 64) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in OutputPublisherMonitor.handleProcessingComplete()()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[9] = __swift_project_value_buffer(v1, (uint64_t)logger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_21B9AA000, v2, v3, "Got processingComplete from the internal publisher...", v4, 2u);
    MEMORY[0x220772F44](v4, -1, -1);
  }
  v5 = v0[8];

  v0[10] = *(_QWORD *)(v5 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_beginAccess();
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 16);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_21B9AA000, v1, v2, "Waiting for internal tasks to finish...", v3, 2u);
      MEMORY[0x220772F44](v3, -1, -1);
    }
    v4 = *(_QWORD *)(v0 + 64);

    v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor__internalProcessingCompleteReceived);
    swift_beginAccess();
    *(_BYTE *)(v0 + 96) = 1;
    v6 = *v5;
    v7 = swift_task_alloc();
    *(_QWORD *)(v7 + 16) = v0 + 96;
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 20));
    *(_BYTE *)(v6 + 16) = **(_BYTE **)(v7 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 20));
    swift_task_dealloc();
    swift_endAccess();
  }
  else
  {
    v8 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 64)
                                        + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
    if (v8)
    {
      v9 = swift_retain();
      v8(v9);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v8);
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OutputPublisherMonitor.handleProcessingCancelled()()
{
  return OutputPublisherMonitor.handleProcessingComplete()((uint64_t)&unk_24DFB70D8, (uint64_t)&unk_24DFB7100, (uint64_t)&async function pointer to partial apply for closure #1 in OutputPublisherMonitor.handleProcessingCancelled());
}

uint64_t OutputPublisherMonitor.handleProcessingComplete()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];

  v5 = v3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v5;
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_retain();
  if (v12 == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    v13 = 0;
    v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v13 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = v11;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in OutputPublisherMonitor.handleProcessingCancelled()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = a4;
  v4[3] = type metadata accessor for PhotogrammetrySession.Output(0);
  v4[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in OutputPublisherMonitor.handleProcessingCancelled()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_21B9AA000, v2, v3, "Got processingCancelled from the internal publisher...", v4, 2u);
    MEMORY[0x220772F44](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 16);

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v5 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks);
  swift_retain();
  return swift_task_switch();
}

{
  OutputPublisherMonitor.Tasks.clear()();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t))(v1
                                      + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 32);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v2);
    outlined destroy of __RKEntityActionSpecification(v3, type metadata accessor for PhotogrammetrySession.Output);
    v1 = *(_QWORD *)(v0 + 16);
  }
  v4 = *(void (**)(uint64_t))(v1 + 40);
  if (v4)
  {
    v5 = swift_retain();
    v4(v5);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void OutputPublisherMonitor.sendAnalyticsForRequest(request:success:error:requestTime:)(uint64_t a1, char a2, void *a3, uint64_t a4, char a5)
{
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  char v26;
  uint8_t *v27;
  uint8_t *v28;
  double v29;
  id v30;
  uint64_t v31;
  void *v32;

  v10 = (int *)type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v15, v16);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v15, type metadata accessor for PhotogrammetrySession.Request);
    if (one-time initialization token for logger != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_21B9AA000, v18, v19, "Not logging the Request to analytics since not .modelFile.", v20, 2u);
      MEMORY[0x220772F44](v20, -1, -1);
    }

  }
  else
  {
    v21 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v15, v21);
    if (one-time initialization token for logger != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)logger);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v32 = a3;
      v26 = a2;
      v27 = v25;
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_21B9AA000, v23, v24, "Logging the .modelFile Request analytics...", v25, 2u);
      v28 = v27;
      a2 = v26;
      a3 = v32;
      MEMORY[0x220772F44](v28, -1, -1);
    }

    if ((a5 & 1) != 0)
      v29 = -1.0;
    else
      v29 = *(double *)&a4;
    if (one-time initialization token for shared != -1)
      swift_once();
    OutputPublisherMonitor.sessionID.getter((uint64_t)v12);
    outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)&v12[v10[5]], type metadata accessor for PhotogrammetrySession.Request);
    v12[v10[7]] = a2 & 1;
    *(_QWORD *)&v12[v10[8]] = a3;
    *(double *)&v12[v10[9]] = v29;
    v30 = a3;
    specialized AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)((uint64_t)v12);
    outlined destroy of __RKEntityActionSpecification((uint64_t)v12, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
  }
}

uint64_t OutputPublisherMonitor.Tasks.addTask(ID:task:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint8_t *v23;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32[3];

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v26 - v10;
  if (one-time initialization token for logger != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v30(v11, a1, v5);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v28 = v8;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v29 = a2;
    v18 = v17;
    v32[0] = v17;
    v27 = a1;
    *(_DWORD *)v16 = 136446210;
    v26[1] = v16 + 4;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v32);
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v11, v5);
    _os_log_impl(&dword_21B9AA000, v13, v14, "Adding a task: %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    v22 = v18;
    a2 = v29;
    MEMORY[0x220772F44](v22, -1, -1);
    v23 = v16;
    v8 = v28;
    MEMORY[0x220772F44](v23, -1, -1);
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v11, v5);
  }

  v30(v8, a1, v5);
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 112) = v31;
  swift_bridgeObjectRelease();
  v21(v8, v5);
  return swift_endAccess();
}

uint64_t OutputPublisherMonitor.Tasks.removeTask(ID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v16 = v1;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc();
    v19[0] = v12;
    *(_DWORD *)v11 = 136446210;
    v17 = a1;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v19);
    a1 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl(&dword_21B9AA000, v8, v9, "Removing a task: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v12, -1, -1);
    MEMORY[0x220772F44](v11, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_endAccess();
  return swift_release();
}

uint64_t OutputPublisherMonitor.Tasks.clear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>)?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - v6;
  if (one-time initialization token for logger == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    swift_retain_n();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v40[0] = v12;
      *(_DWORD *)v11 = 136446210;
      swift_beginAccess();
      v39 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 16);
      v13 = dispatch thunk of CustomStringConvertible.description.getter();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v9, v10, "Clearing tasks - number of scheduled tasks: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v12, -1, -1);
      MEMORY[0x220772F44](v11, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v36 = (_QWORD *)(v1 + 112);
    swift_beginAccess();
    v1 = *(_QWORD *)(v1 + 112);
    v15 = *(_QWORD *)(v1 + 64);
    v37 = v1 + 64;
    v16 = 1 << *(_BYTE *)(v1 + 32);
    v17 = -1;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    v18 = v17 & v15;
    v38 = (unint64_t)(v16 + 63) >> 6;
    v35 = v38 - 1;
    result = swift_bridgeObjectRetain();
    v20 = 0;
    v21 = MEMORY[0x24BEE4AE0] + 8;
    if (v18)
    {
      while (1)
      {
        v23 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v24 = v23 | (v20 << 6);
LABEL_11:
        v25 = *(_QWORD *)(v1 + 48);
        v26 = type metadata accessor for UUID();
        (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v4, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v24, v26);
        v27 = *(_QWORD *)(v1 + 56);
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>));
        *(_QWORD *)&v4[*(int *)(v28 + 48)] = *(_QWORD *)(v27 + 8 * v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v4, 0, 1, v28);
        swift_retain();
LABEL_30:
        outlined init with take of Transform?((uint64_t)v4, (uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>)?);
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>));
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v7, 1, v33) == 1)
          break;
        MEMORY[0x220769128](*(_QWORD *)&v7[*(int *)(v33 + 48)], v21, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
        swift_release();
        v22 = type metadata accessor for UUID();
        result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v7, v22);
        if (!v18)
          goto LABEL_12;
      }
      swift_release();
      *v36 = MEMORY[0x24BEE4B00];
      return swift_bridgeObjectRelease();
    }
LABEL_12:
    v29 = v20 + 1;
    if (!__OFADD__(v20, 1))
      break;
    __break(1u);
  }
  if (v29 >= v38)
    goto LABEL_29;
  v30 = *(_QWORD *)(v37 + 8 * v29);
  if (v30)
  {
LABEL_15:
    v18 = (v30 - 1) & v30;
    v24 = __clz(__rbit64(v30)) + (v29 << 6);
    v20 = v29;
    goto LABEL_11;
  }
  v31 = v20 + 2;
  ++v20;
  if (v29 + 1 >= v38)
    goto LABEL_29;
  v30 = *(_QWORD *)(v37 + 8 * v31);
  if (v30)
  {
LABEL_18:
    v29 = v31;
    goto LABEL_15;
  }
  v20 = v29 + 1;
  if (v29 + 2 >= v38)
    goto LABEL_29;
  v30 = *(_QWORD *)(v37 + 8 * (v29 + 2));
  if (v30)
  {
    v29 += 2;
    goto LABEL_15;
  }
  v31 = v29 + 3;
  v20 = v29 + 2;
  if (v29 + 3 >= v38)
  {
LABEL_29:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v4, 1, 1, v32);
    v18 = 0;
    goto LABEL_30;
  }
  v30 = *(_QWORD *)(v37 + 8 * v31);
  if (v30)
    goto LABEL_18;
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v38)
    {
      v20 = v35;
      goto LABEL_29;
    }
    v30 = *(_QWORD *)(v37 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t OutputPublisherMonitor.Tasks.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t *OutputPublisherMonitor.deinit()
{
  uint64_t *v0;

  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v0[3]);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v0[5]);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v0[7]);
  outlined destroy of BodyTrackingComponent?((uint64_t)v0 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs, &demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  swift_weakDestroy();
  outlined destroy of BodyTrackingComponent?((uint64_t)v0 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor____lazy_storage___sessionID, &demangling cache variable for type metadata for UUID?);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(uint64_t *)((char *)v0
                                                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput));

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(uint64_t *)((char *)v0
                                                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage));
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(uint64_t *)((char *)v0
                                                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete));
  swift_release();
  return v0;
}

uint64_t OutputPublisherMonitor.__deallocating_deinit()
{
  OutputPublisherMonitor.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for OutputPublisherMonitor()
{
  return type metadata accessor for OutputPublisherMonitor(0);
}

uint64_t type metadata accessor for OutputPublisherMonitor(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for OutputPublisherMonitor);
}

void type metadata completion function for OutputPublisherMonitor()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AsyncStream<PhotogrammetrySession.Output>?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void type metadata accessor for AsyncStream<PhotogrammetrySession.Output>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  }
}

uint64_t type metadata accessor for OutputPublisherMonitor.Tasks()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v9 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = *((_OWORD *)v12 + 5);
      *((_OWORD *)v11 + 4) = *((_OWORD *)v12 + 4);
      *((_OWORD *)v11 + 5) = v13;
      v11[96] = v12[96];
      v14 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v14;
      v15 = *((_OWORD *)v12 + 3);
      *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
      *((_OWORD *)v11 + 3) = v15;
      swift_storeEnumTagMultiPayload();
    }
    v16 = *(int *)(a3 + 20);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for PhotogrammetrySession.Request();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = *(int *)(a3 + 24);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for PhotogrammetrySession.Request(0);
  if (!swift_getEnumCaseMultiPayload())
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

char *initializeWithCopy for PhotogrammetrySessionImpl.RequestMap.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = type metadata accessor for PhotogrammetrySession.Request(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = *((_OWORD *)v10 + 5);
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    *((_OWORD *)v9 + 5) = v11;
    v9[96] = v10[96];
    v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v12;
    v13 = *((_OWORD *)v10 + 3);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 3) = v13;
    swift_storeEnumTagMultiPayload();
  }
  v14 = *(int *)(a3 + 20);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

char *assignWithCopy for PhotogrammetrySessionImpl.RequestMap.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Request);
    v6 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = *((_OWORD *)v10 + 3);
      v12 = *((_OWORD *)v10 + 4);
      v13 = *((_OWORD *)v10 + 5);
      v9[96] = v10[96];
      *((_OWORD *)v9 + 4) = v12;
      *((_OWORD *)v9 + 5) = v13;
      *((_OWORD *)v9 + 3) = v11;
      v15 = *((_OWORD *)v10 + 1);
      v14 = *((_OWORD *)v10 + 2);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v15;
      *((_OWORD *)v9 + 2) = v14;
      swift_storeEnumTagMultiPayload();
    }
  }
  v16 = *(int *)(a3 + 20);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = *(int *)(a3 + 24);
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

char *initializeWithTake for PhotogrammetrySessionImpl.RequestMap.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = type metadata accessor for PhotogrammetrySession.Request(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = *((_OWORD *)v10 + 5);
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    *((_OWORD *)v9 + 5) = v11;
    v9[96] = v10[96];
    v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v12;
    v13 = *((_OWORD *)v10 + 3);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 3) = v13;
    swift_storeEnumTagMultiPayload();
  }
  v14 = *(int *)(a3 + 20);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

char *assignWithTake for PhotogrammetrySessionImpl.RequestMap.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Request);
    v6 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = *((_OWORD *)v10 + 5);
      *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
      *((_OWORD *)v9 + 5) = v11;
      v9[96] = v10[96];
      v12 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v12;
      v13 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v13;
      swift_storeEnumTagMultiPayload();
    }
  }
  v14 = *(int *)(a3 + 20);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySessionImpl.RequestMap.Entry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBF31F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for PhotogrammetrySession.Request(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for PhotogrammetrySession.Request();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for Date();
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySessionImpl.RequestMap.Entry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBF3298(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for PhotogrammetrySession.Request(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for PhotogrammetrySession.Request();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for Date();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySessionImpl.RequestMap.Entry);
}

uint64_t type metadata completion function for PhotogrammetrySessionImpl.RequestMap.Entry()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for PhotogrammetrySession.Request(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PhotogrammetrySession.Request();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Date();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySessionImpl.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BBF3438 + 4 * byte_21BE650F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BBF346C + 4 * byte_21BE650F0[v4]))();
}

uint64_t sub_21BBF346C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBF3474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBF347CLL);
  return result;
}

uint64_t sub_21BBF3488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBF3490);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BBF3494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBF349C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PhotogrammetrySessionImpl.State()
{
  return &unk_24DFB7060;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySessionImpl.State and conformance PhotogrammetrySessionImpl.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhotogrammetrySessionImpl.State and conformance PhotogrammetrySessionImpl.State;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySessionImpl.State and conformance PhotogrammetrySessionImpl.State)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhotogrammetrySessionImpl.State, &unk_24DFB7060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySessionImpl.State and conformance PhotogrammetrySessionImpl.State);
  }
  return result;
}

uint64_t protocol witness for AsyncOutputIteratorProtocol.next() in conformance AsyncOutputIterator()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  *v1 = v0;
  v1[1] = protocol witness for AsyncOutputIteratorProtocol.next() in conformance AsyncOutputIterator;
  return AsyncStream.Iterator.next()();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

float computeOrientedBoundingBox(for:)@<S0>(_OWORD *a1@<X8>)
{
  float32x4_t v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float32x2_t v6;
  __int128 v7;
  float result;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;

  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v10 = v4;
    v11 = v3;
    v9 = v2;
    swift_once();
    v2 = v9;
    v4 = v10;
    v3 = v11;
  }
  v5 = vmuls_lane_f32(0.5, v2, 2);
  v6 = vmul_f32(*(float32x2_t *)v2.f32, (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)&v7 = vsub_f32(*(float32x2_t *)&v4, v6);
  *((float *)&v7 + 2) = *((float *)&v4 + 2) - v5;
  HIDWORD(v7) = 0;
  *(float32x2_t *)&v4 = vadd_f32(*(float32x2_t *)&v4, v6);
  result = *((float *)&v4 + 2) + v5;
  *((float *)&v4 + 2) = *((float *)&v4 + 2) + v5;
  HIDWORD(v4) = 0;
  *a1 = v3;
  a1[1] = v7;
  a1[2] = v4;
  return result;
}

uint64_t PhotogrammetrySession.PointCloud.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t, __n128);
  uint64_t v16;
  __n128 v17;
  __int128 v18;
  int v19;
  void (*v20)(char *, uint64_t);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v4 = PhotogrammetrySession.PointCloud.points.getter();
  v5 = *(_QWORD *)(v4 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v27 = a1;
    v28 = a2;
    v33 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    isUniquelyReferenced_nonNull_native = type metadata accessor for PhotogrammetrySession.PointCloud.Point();
    v8 = isUniquelyReferenced_nonNull_native;
    v9 = *(_QWORD *)(isUniquelyReferenced_nonNull_native - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v26 = v4;
    v11 = v4 + ((v10 + 32) & ~v10);
    v12 = *(_QWORD *)(v9 + 64);
    v30 = *(_QWORD *)(v9 + 72);
    v31 = v9;
    v29 = *(void (**)(char *, char *, uint64_t, __n128))(v9 + 16);
    do
    {
      v13 = MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
      v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      v15 = v29;
      v16 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v29)(v14, v11, v8, v13);
      v17 = MEMORY[0x24BDAC7A8](v16);
      v15(v14, v14, v8, v17);
      PhotogrammetrySession.PointCloud.Point.position.getter();
      v32 = v18;
      v19 = PhotogrammetrySession.PointCloud.Point.color.getter();
      v20 = *(void (**)(char *, uint64_t))(v31 + 8);
      v20(v14, v8);
      v20(v14, v8);
      v6 = v33;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v33;
      }
      v22 = *(_QWORD *)(v6 + 16);
      v21 = *(_QWORD *)(v6 + 24);
      if (v22 >= v21 >> 1)
      {
        isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v6 = v33;
      }
      *(_QWORD *)(v6 + 16) = v22 + 1;
      v23 = v6 + 32 * v22;
      *(_OWORD *)(v23 + 32) = v32;
      *(_DWORD *)(v23 + 48) = v19;
      v11 += v30;
      --v5;
    }
    while (v5);
    a1 = v27;
    a2 = v28;
  }
  v24 = type metadata accessor for PhotogrammetrySession.PointCloud();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t PhotogrammetrySession.Poses.init(poses:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unsigned __int32 v56;
  unint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  __n128 v71;
  __n128 v72;
  uint64_t v73[2];

  v3 = MEMORY[0x24BEE4AF8];
  v4 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v57 = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v54 = a1;
  v5 = PhotogrammetrySession.PointCloud.points.getter();
  v6 = 0;
  v58 = v5 + 64;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v59 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v60 = (v9 - 1) & v9;
      v61 = v6;
      v10 = __clz(__rbit64(v9)) | (v6 << 6);
    }
    else
    {
      v11 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_48;
      if (v11 >= v59)
      {
LABEL_45:
        swift_release();
        v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v52 = type metadata accessor for PhotogrammetrySession.Poses();
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v54, v52);
        *a2 = v57;
        a2[1] = v51;
        a2[2] = (unint64_t)v4;
        return result;
      }
      v12 = *(_QWORD *)(v58 + 8 * v11);
      v13 = v6 + 1;
      if (!v12)
      {
        v13 = v6 + 2;
        if (v6 + 2 >= v59)
          goto LABEL_45;
        v12 = *(_QWORD *)(v58 + 8 * v13);
        if (!v12)
        {
          v13 = v6 + 3;
          if (v6 + 3 >= v59)
            goto LABEL_45;
          v12 = *(_QWORD *)(v58 + 8 * v13);
          if (!v12)
          {
            v14 = v6 + 4;
            if (v6 + 4 >= v59)
              goto LABEL_45;
            v12 = *(_QWORD *)(v58 + 8 * v14);
            if (!v12)
            {
              while (1)
              {
                v13 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_49;
                if (v13 >= v59)
                  goto LABEL_45;
                v12 = *(_QWORD *)(v58 + 8 * v13);
                ++v14;
                if (v12)
                  goto LABEL_21;
              }
            }
            v13 = v6 + 4;
          }
        }
      }
LABEL_21:
      v60 = (v12 - 1) & v12;
      v61 = v13;
      v10 = __clz(__rbit64(v12)) + (v13 << 6);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v10);
    v16 = *(_QWORD *)(v5 + 56) + 80 * v10;
    v62 = *(_QWORD *)v16;
    v63 = *(_QWORD *)(v16 + 16);
    v64 = *(_QWORD *)(v16 + 8);
    v65 = *(_QWORD *)(v16 + 32);
    v68 = *(_QWORD *)(v16 + 40);
    v66 = *(_QWORD *)(v16 + 24);
    v67 = *(_QWORD *)(v16 + 48);
    v70 = *(_QWORD *)(v16 + 56);
    v17 = *(_BYTE *)(v16 + 64);
    if (one-time initialization token for logger != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v73[0] = v22;
      *(_DWORD *)v21 = 134218242;
      *(_QWORD *)(v21 + 4) = v15;
      *(_WORD *)(v21 + 12) = 2080;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
      v23 = String.init<A>(describing:)();
      *(_QWORD *)(v21 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v73);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v19, v20, "Caching sampleID=%ld pose=%s.", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v22, -1, -1);
      MEMORY[0x220772F44](v21, -1, -1);
    }

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    v28 = v4[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v4[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v26 & 1) != 0)
          goto LABEL_33;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v31 & 1) != 0)
          goto LABEL_33;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_50;
      v27 = v32;
      if ((v31 & 1) != 0)
      {
LABEL_33:
        v34 = v4[7] + 80 * v27;
        *(_QWORD *)v34 = v62;
        *(_QWORD *)(v34 + 8) = v64;
        *(_QWORD *)(v34 + 16) = v63;
        *(_QWORD *)(v34 + 24) = v66;
        *(_QWORD *)(v34 + 32) = v65;
        *(_QWORD *)(v34 + 40) = v68;
        *(_QWORD *)(v34 + 48) = v67;
        *(_QWORD *)(v34 + 56) = v70;
        *(_BYTE *)(v34 + 64) = v17;
        goto LABEL_37;
      }
    }
    v4[(v27 >> 6) + 8] |= 1 << v27;
    *(_QWORD *)(v4[6] + 8 * v27) = v15;
    v35 = v4[7] + 80 * v27;
    *(_QWORD *)v35 = v62;
    *(_QWORD *)(v35 + 8) = v64;
    *(_QWORD *)(v35 + 16) = v63;
    *(_QWORD *)(v35 + 24) = v66;
    *(_QWORD *)(v35 + 32) = v65;
    *(_QWORD *)(v35 + 40) = v68;
    *(_QWORD *)(v35 + 48) = v67;
    *(_QWORD *)(v35 + 56) = v70;
    *(_BYTE *)(v35 + 64) = v17;
    v36 = v4[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_47;
    v4[2] = v38;
LABEL_37:
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      v39 = Logger.logObject.getter();
      v40 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc();
        *(_DWORD *)v41 = 134349056;
        *(_QWORD *)(v41 + 4) = v15;
        _os_log_impl(&dword_21B9AA000, v39, v40, "Poses: sampleID=%{public}ld was unable to be registered.  Not returning a pose.", (uint8_t *)v41, 0xCu);
        MEMORY[0x220772F44](v41, -1, -1);
      }

    }
    else
    {
      REMakeSRTFromMatrix();
      v69 = v43;
      if (one-time initialization token for identity != -1)
      {
        v72 = v42;
        swift_once();
        v42 = v72;
      }
      v42.n128_u32[3] = v56;
      v71 = v42;
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = swift_slowAlloc();
        v47 = swift_slowAlloc();
        v73[0] = v47;
        *(_DWORD *)v46 = 134349314;
        *(_QWORD *)(v46 + 4) = v15;
        *(_WORD *)(v46 + 12) = 2082;
        v48 = String.init<A>(describing:)();
        *(_QWORD *)(v46 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v73);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21B9AA000, v44, v45, "Adding posesBySample[%{public}ld] = %{public}s", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v47, -1, -1);
        MEMORY[0x220772F44](v46, -1, -1);
      }

      v50 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v50, v71, v69);
      swift_bridgeObjectRelease();
      v56 = v71.n128_u32[3];
    }
    v9 = v60;
    v6 = v61;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char v22;
  char *v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 96;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 96;
  v32 = __src;
  v31 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -95)
    {
      if (__dst != a2 || &a2[96 * v11] <= __dst)
        memmove(__dst, a2, 96 * v11);
      v18 = &v4[96 * v11];
      v30 = (unint64_t)v18;
      v32 = v6;
      if (__src < v6 && v10 >= 96)
      {
        v19 = (char *)(a3 - 96);
        do
        {
          outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)(v18 - 96), (uint64_t)&v28);
          v20 = (unint64_t)(v6 - 96);
          outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)(v6 - 96), (uint64_t)&v26);
          if (v26 == v28 && v27 == v29)
            v22 = 0;
          else
            v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v23 = v19 + 96;
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v26);
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v28);
          if ((v22 & 1) != 0)
          {
            if (v23 != v6 || v19 >= v6)
              memmove(v19, v6 - 96, 0x60uLL);
            v32 -= 96;
            v18 = (char *)v30;
            if (v30 <= (unint64_t)v4)
              break;
          }
          else
          {
            v24 = v30;
            v18 = (char *)(v30 - 96);
            v30 -= 96;
            if ((unint64_t)v23 < v24 || (unint64_t)v19 >= v24 || v23 != (char *)v24)
              memmove(v19, (const void *)(v24 - 96), 0x60uLL);
            v20 = (unint64_t)v6;
            if (v18 <= v4)
              break;
          }
          v19 -= 96;
          v6 = (char *)v20;
        }
        while (v20 > (unint64_t)__src);
      }
LABEL_51:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v32, (const void **)&v31, &v30);
      return 1;
    }
  }
  else if (v8 >= -95)
  {
    if (__dst != __src || &__src[96 * v9] <= __dst)
      memmove(__dst, __src, 96 * v9);
    v12 = (unint64_t)&v4[96 * v9];
    v30 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 96)
    {
      while (1)
      {
        outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v6, (uint64_t)&v28);
        outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v4, (uint64_t)&v26);
        if (v26 == v28 && v27 == v29)
          break;
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v26);
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v28);
        if ((v14 & 1) == 0)
          goto LABEL_18;
        v15 = v32;
        v16 = (unint64_t)(v6 + 96);
        if (v32 >= v6 && (unint64_t)v32 < v16 && v32 == v6)
          v15 = v6;
        else
          memmove(v32, v6, 0x60uLL);
LABEL_22:
        v32 = v15 + 96;
        v4 = v31;
        if ((unint64_t)v31 < v12)
        {
          v6 = (char *)v16;
          if (v16 < a3)
            continue;
        }
        goto LABEL_51;
      }
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v26);
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v28);
LABEL_18:
      v15 = v32;
      v17 = v31 + 96;
      if (v32 != v31 || v32 >= v17)
        memmove(v32, v31, 0x60uLL);
      v31 = v17;
      v16 = (unint64_t)v6;
      goto LABEL_22;
    }
    goto LABEL_51;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  BOOL v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t result;
  char *v36;
  const void *v37;
  char *v38;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 63;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 6;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 63;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 6;
  v37 = __dst;
  v38 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -63)
    {
      v23 = v13 << 6;
      if (__dst != a2 || &a2[v23] <= __dst)
        memmove(__dst, a2, v13 << 6);
      v24 = &v4[v23];
      v36 = v24;
      v38 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 64) <= 0xFFFFFFFFFFFFFF80)
      {
        v25 = (char *)(a3 - 64);
        do
        {
          v26 = v25 + 64;
          v27 = *((_QWORD *)v24 - 7) == *((_QWORD *)v6 - 7) && *((_QWORD *)v24 - 6) == *((_QWORD *)v6 - 6);
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v36 = v24 - 64;
            if (v26 < v24 || v25 >= v24 || v26 != v24)
            {
              v32 = *((_OWORD *)v24 - 4);
              v33 = *((_OWORD *)v24 - 3);
              v34 = *((_OWORD *)v24 - 1);
              *((_OWORD *)v25 + 2) = *((_OWORD *)v24 - 2);
              *((_OWORD *)v25 + 3) = v34;
              *(_OWORD *)v25 = v32;
              *((_OWORD *)v25 + 1) = v33;
            }
            v28 = v6;
            v24 -= 64;
            if (v6 <= v7)
              break;
          }
          else
          {
            v28 = v6 - 64;
            if (v26 != v6 || v25 >= v6)
            {
              v29 = *(_OWORD *)v28;
              v30 = *((_OWORD *)v6 - 3);
              v31 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v25 + 2) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v25 + 3) = v31;
              *(_OWORD *)v25 = v29;
              *((_OWORD *)v25 + 1) = v30;
            }
            v38 = v6 - 64;
            if (v28 <= v7)
              break;
          }
          v25 -= 64;
          v6 = v28;
        }
        while (v24 > v4);
      }
LABEL_52:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v38, &v37, &v36);
      return 1;
    }
  }
  else if (v8 >= -63)
  {
    v14 = v10 << 6;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v36 = v15;
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 64) <= 0xFFFFFFFFFFFFFF80)
    {
      v16 = v4;
      while (1)
      {
        v17 = *((_QWORD *)v6 + 1) == *((_QWORD *)v16 + 1) && *((_QWORD *)v6 + 2) == *((_QWORD *)v16 + 2);
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v4 = v16 + 64;
          v19 = v16;
          v18 = v6;
          if (v7 == v16)
          {
            v16 += 64;
            if (v7 < v4)
              goto LABEL_26;
          }
          else
          {
            v16 += 64;
          }
        }
        else
        {
          v18 = v6 + 64;
          v19 = v6;
          if (v7 == v6 && v7 < v18)
            goto LABEL_26;
        }
        v20 = *(_OWORD *)v19;
        v21 = *((_OWORD *)v19 + 1);
        v22 = *((_OWORD *)v19 + 3);
        *((_OWORD *)v7 + 2) = *((_OWORD *)v19 + 2);
        *((_OWORD *)v7 + 3) = v22;
        *(_OWORD *)v7 = v20;
        *((_OWORD *)v7 + 1) = v21;
LABEL_26:
        v7 += 64;
        if (v16 < v15)
        {
          v6 = v18;
          if ((unint64_t)v18 < a3)
            continue;
        }
        v37 = v4;
        v38 = v7;
        goto LABEL_52;
      }
    }
    goto LABEL_52;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, Date));
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -96)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 96;
    if (result != v3 || result >= &v3[96 * v6])
      return (char *)memmove(result, v3, 96 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -64)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0x3FuLL : 0)) & 0xFFFFFFFFFFFFFFC0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -96)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 96 * (v4 / 96);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.handleProcessingCancelled()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return closure #1 in OutputPublisherMonitor.handleProcessingCancelled()(a1, v4, v5, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA_10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.handleProcessingComplete()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  v3[8] = v2;
  return swift_task_switch();
}

uint64_t sub_21BBF506C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBF5090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(type metadata accessor for PhotogrammetrySession.Request(0) - 8);
  v10 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 64);
  v12 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v12 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  v8 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v8(v0 + v3, v1);
  swift_release();
  if (!swift_getEnumCaseMultiPayload())
    v8(v0 + v10, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + ((v10 + v11 + v7) & ~v7), v12);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for PhotogrammetrySession.Request(0) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v11 = v8 + v9 + v10;
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = v1 + v5;
  v15 = *(_QWORD *)(v1 + v6);
  v16 = v1 + v8;
  v17 = v1 + (v11 & ~v10);
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v18;
  *v18 = v2;
  v18[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(a1, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_21BBF52C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = v4;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error)
  {
    v1 = type metadata accessor for PhotogrammetrySession.Error();
    result = MEMORY[0x220772E3C](MEMORY[0x24BE1EC28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error);
  }
  return result;
}

uint64_t sub_21BBF543C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(0)
                                      - 8)
                          + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionInitEvent(event:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(0)
                                      - 8)
                          + 80);
  return closure #1 in AnalyticsManager.sendPhotogrammetrySessionInitEvent(event:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t outlined destroy of PhotogrammetrySession.Outputs(uint64_t a1)
{
  destroy for AnyMeshBuffer();
  return a1;
}

uint64_t specialized static PhotogrammetrySessionImpl.verifyFreeStorageForFolderInputOrThrow(inputFolder:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(char *, uint64_t);
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - v12;
  result = (uint64_t)specialized static ImageHelper.calculateTotalImagesSizeInFolderShallowly(_:)();
  if (v2)
    return result;
  v15 = 3 * result;
  if ((unsigned __int128)(result * (__int128)3) >> 64 != (3 * result) >> 63)
  {
    __break(1u);
    goto LABEL_19;
  }
  v16 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  outlined init with copy of (Int, URL)(a2 + *(int *)(v16 + 28), (uint64_t)v6, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    if (one-time initialization token for temporaryDirectory == -1)
    {
LABEL_5:
      v17 = __swift_project_value_buffer(v7, (uint64_t)static PhotogrammetryFileHelpers.temporaryDirectory);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v17, v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
      goto LABEL_7;
    }
LABEL_19:
    swift_once();
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
LABEL_7:
  specialized static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)((uint64_t)v13);
  if (specialized static PhotogrammetryFileHelpers.checkIfSufficientStorageSpace(requiredBytes:directory:)(v15, (uint64_t)v13))
  {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  v19 = v18;
  if (one-time initialization token for logger != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)logger);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v22))
  {
    v37 = v22;
    v34 = v19;
    v23 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v40 = v36;
    *(_DWORD *)v23 = 141558530;
    v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2080;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v40);
    v35 = &v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v26 = *(void (**)(char *, uint64_t))(v8 + 8);
    v26(v10, v7);
    *(_WORD *)(v23 + 22) = 2082;
    v33 = v23 + 24;
    if (one-time initialization token for byteFormatter != -1)
      swift_once();
    v19 = v34;
    v27 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v34, v33);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v21, (os_log_type_t)v37, "Insufficient storage remaining in checkpointDirectory = %{mask.hash}s  Required bytes = %{public}s", (uint8_t *)v23, 0x20u);
    v31 = v36;
    swift_arrayDestroy();
    MEMORY[0x220772F44](v31, -1, -1);
    MEMORY[0x220772F44](v23, -1, -1);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t))(v8 + 8);
    v26(v10, v7);
  }

  type metadata accessor for PhotogrammetrySession.Error(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, type metadata accessor for PhotogrammetrySession.Error, (uint64_t)&protocol conformance descriptor for PhotogrammetrySession.Error);
  swift_allocError();
  *v32 = v19;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v26)(v13, v7);
}

BOOL specialized static PhotogrammetrySessionImpl.containsMinimalNumberOfImages(_:)(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ImageHelper();
  v8 = static ImageHelper.enumerateImageFilesInFolderShallowly(_:sorted:)(a1, 0);
  if (!v1)
  {
    v9 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRelease();
    v2 = v9 > 2;
    if (v9 <= 2)
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)logger);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.error.getter();
      v13 = v12;
      if (os_log_type_enabled(v11, v12))
      {
        v14 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v23 = v21;
        *(_DWORD *)v14 = 141558274;
        v22 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v14 + 12) = 2080;
        v19 = v14 + 14;
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v20 = v13;
        v15 = dispatch thunk of CustomStringConvertible.description.getter();
        v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        _os_log_impl(&dword_21B9AA000, v11, (os_log_type_t)v20, "There are not enough images in the input folder: %{mask.hash}s", (uint8_t *)v14, 0x16u);
        v17 = v21;
        swift_arrayDestroy();
        MEMORY[0x220772F44](v17, -1, -1);
        MEMORY[0x220772F44](v14, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }

    }
  }
  return v2;
}

uint64_t specialized static PhotogrammetrySessionImpl.isCheckpointDirectoryValidForResumingReconstruction(checkpointDirectory:inputURL:internalConfiguration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  os_log_type_t v18;

  if (!specialized static PhotogrammetryFileHelpers.isEmptyDirectory(_:)())
  {
    type metadata accessor for ImageHelper();
    v4 = static ImageHelper.enumerateImageFilesInFolderShallowly(_:sorted:)(a2, 0);
    type metadata accessor for PhotogrammetrySession();
    v5 = static PhotogrammetrySession.getNumberOfSamplesInSnapshot(snapshotURL:)();
    if ((v6 & 1) != 0)
      v7 = 0;
    else
      v7 = v5;
    v8 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRelease();
    if (v8 == v7)
    {
      if ((static PhotogrammetrySession.isConfigurationCompatibleWithSnapshot(configuration:snapshotURL:)() & 1) != 0)
      {
        if ((static PhotogrammetrySession.isDeviceCompatibleWithSnapshot(snapshotURL:)() & 1) != 0)
        {
          if (one-time initialization token for logger != -1)
            swift_once();
          v17 = type metadata accessor for Logger();
          __swift_project_value_buffer(v17, (uint64_t)logger);
          v10 = Logger.logObject.getter();
          v18 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v10, v18))
          {
            v3 = 1;
            goto LABEL_24;
          }
          v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v12 = 0;
          _os_log_impl(&dword_21B9AA000, v10, v18, "The checkpoint directory is valid for resuming reconstruction.", v12, 2u);
          v3 = 1;
          goto LABEL_22;
        }
        if (one-time initialization token for logger != -1)
          swift_once();
        v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)logger);
        v10 = Logger.logObject.getter();
        v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v12 = 0;
          v13 = "The checkpoint is not compatible with this device. Ignoring the checkpoint...";
          goto LABEL_21;
        }
      }
      else
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)logger);
        v10 = Logger.logObject.getter();
        v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v12 = 0;
          v13 = "The configuration is different than the one in the checkpoint. Ignoring the checkpoint...";
LABEL_21:
          _os_log_impl(&dword_21B9AA000, v10, v11, v13, v12, 2u);
          v3 = 0;
LABEL_22:
          MEMORY[0x220772F44](v12, -1, -1);
LABEL_24:

          return v3;
        }
      }
    }
    else
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)logger);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v12 = 0;
        v13 = "Number of input images does not match the samples in the checkpoint. Ignoring the checkpoint...";
        goto LABEL_21;
      }
    }
    v3 = 0;
    goto LABEL_24;
  }
  return 0;
}

char *specialized PhotogrammetrySessionImpl.__allocating_init(id:input:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t, __n128);
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  _BOOL4 v54;
  uint64_t v55;
  uint8_t *v56;
  void *v57;
  uint8_t *v58;
  __n128 v59;
  uint64_t v60;
  unint64_t v61;
  os_log_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(_QWORD, _QWORD, _QWORD);
  _QWORD *v76;
  void (*v77)(char *, char *, uint64_t, __n128);
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD);
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  int v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t, __n128);
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  id v101;
  id v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  id v106;
  uint64_t v107;
  unint64_t v108;
  void (*v109)(_QWORD, _QWORD, _QWORD);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  id v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  NSObject *v153;
  os_log_type_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  os_log_type_t v160;
  void (*v161)(uint64_t, uint64_t);
  uint64_t v162;
  NSObject *v163;
  os_log_type_t v164;
  uint8_t *v165;
  uint8_t *v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD v176[2];
  os_log_t v177;
  int v178;
  void *v179;
  _QWORD *v180;
  void (*v181)(char *, uint64_t);
  uint64_t v182;
  char *v183;
  void *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  _QWORD *v189;
  void (*v190)(_QWORD, _QWORD, _QWORD);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  void (*v198)(_QWORD, _QWORD);
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  id v208;

  v202 = a1;
  v201 = type metadata accessor for UUID();
  v203 = *(_QWORD *)(v201 - 8);
  MEMORY[0x24BDAC7A8](v201);
  v199 = (char *)v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v194);
  v193 = (uint64_t)v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v198 = (void (*)(_QWORD, _QWORD))((char *)v176 - v8);
  v9 = type metadata accessor for URL();
  v204 = *(_QWORD **)(v9 - 8);
  v205 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v195 = (char *)v176 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v197 = (char *)v176 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v196 = (char *)v176 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v176 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v176 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v176 - v22;
  v24 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v176 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)v176 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)v176 - v31;
  v33 = v200;
  specialized static PhotogrammetrySessionImpl.verifyFreeStorageForFolderInputOrThrow(inputFolder:configuration:)(a2, a3);
  if (v33)
  {
    v34 = v33;
    outlined destroy of __RKEntityActionSpecification(a3, type metadata accessor for PhotogrammetrySession.Configuration);
    ((void (*)(uint64_t, uint64_t))v204[1])(a2, v205);
    (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v202, v201);
    return v34;
  }
  v189 = v32;
  v190 = (void (*)(_QWORD, _QWORD, _QWORD))v20;
  v200 = v23;
  v187 = v29;
  v188 = v17;
  v191 = v24;
  v186 = v26;
  v192 = a3;
  v35 = specialized static PhotogrammetrySessionImpl.containsMinimalNumberOfImages(_:)(a2);
  v36 = a2;
  v38 = v192;
  if (v35)
  {
    v184 = 0;
    v39 = type metadata accessor for PhotogrammetrySession.Configuration();
    v180 = v176;
    v40 = *(_QWORD **)(v39 - 8);
    v41 = v40[8];
    MEMORY[0x24BDAC7A8](v39);
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
    v43 = (char *)v176 - v42;
    v44 = v38;
    v45 = (uint64_t)v189;
    outlined init with copy of __RKEntityActionSpecification(v44, (uint64_t)v189, type metadata accessor for PhotogrammetrySession.Configuration);
    PhotogrammetrySession.Configuration.init(_:)(v45);
    if (one-time initialization token for logger != -1)
      swift_once();
    v46 = type metadata accessor for Logger();
    v47 = __swift_project_value_buffer(v46, (uint64_t)logger);
    v189 = v176;
    v48 = MEMORY[0x24BDAC7A8](v47);
    v49 = (char *)v176 - v42;
    v50 = (void (*)(char *, char *, uint64_t, __n128))v40[2];
    v50((char *)v176 - v42, (char *)v176 - v42, v39, v48);
    v197 = (char *)v47;
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.default.getter();
    v53 = v52;
    v54 = os_log_type_enabled(v51, v52);
    v185 = v36;
    v182 = v41;
    if (v54)
    {
      v55 = swift_slowAlloc();
      v178 = v53;
      v56 = (uint8_t *)v55;
      v57 = (void *)swift_slowAlloc();
      v179 = v57;
      v176[1] = v176;
      v208 = v57;
      v177 = v51;
      *(_DWORD *)v56 = 136315138;
      v181 = (void (*)(char *, uint64_t))(v56 + 4);
      v58 = v56;
      v59 = MEMORY[0x24BDAC7A8](v57);
      v50((char *)v176 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0), v49, v39, v59);
      v60 = String.init<A>(describing:)();
      v207 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v36 = v185;
      v181 = (void (*)(char *, uint64_t))v40[1];
      v181(v49, v39);
      v62 = v177;
      _os_log_impl(&dword_21B9AA000, v177, (os_log_type_t)v178, "Using internal session config = %s", v56, 0xCu);
      v63 = v179;
      swift_arrayDestroy();
      MEMORY[0x220772F44](v63, -1, -1);
      MEMORY[0x220772F44](v58, -1, -1);

    }
    else
    {
      v181 = (void (*)(char *, uint64_t))v40[1];
      v181(v49, v39);

    }
    v75 = v190;
    v76 = v204;
    v77 = v50;
    v78 = (uint64_t)v200;
    v79 = v198;
    outlined init with copy of (Int, URL)(v192 + *(int *)(v191 + 28), (uint64_t)v198, &demangling cache variable for type metadata for URL?);
    v80 = ((uint64_t (*)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))v76[6])(v79, 1, v205);
    v183 = v43;
    if (v80 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v79, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      ((void (*)(uint64_t, void (*)(_QWORD, _QWORD), uint64_t))v76[4])(v78, v79, v205);
      if ((specialized static PhotogrammetrySessionImpl.isCheckpointDirectoryValidForResumingReconstruction(checkpointDirectory:inputURL:internalConfiguration:)(v78, v36) & 1) != 0)
      {
        v190 = (void (*)(_QWORD, _QWORD, _QWORD))v76[2];
        v190(v75, v78, v205);
        v85 = Logger.logObject.getter();
        v86 = static os_log_type_t.info.getter();
        v87 = v86;
        if (os_log_type_enabled(v85, v86))
        {
          v88 = swift_slowAlloc();
          v189 = (_QWORD *)swift_slowAlloc();
          v208 = v189;
          *(_DWORD *)v88 = 141558274;
          v207 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v88 + 12) = 2080;
          v198 = (void (*)(_QWORD, _QWORD))(v88 + 14);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
          LODWORD(v179) = v87;
          v89 = v77;
          v90 = v205;
          v91 = dispatch thunk of CustomStringConvertible.description.getter();
          v207 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, (uint64_t *)&v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v93 = v90;
          v77 = v89;
          v198 = (void (*)(_QWORD, _QWORD))v204[1];
          v198(v75, v93);
          _os_log_impl(&dword_21B9AA000, v85, (os_log_type_t)v179, "Resuming internal photogrammetry session from checkpointDirectory = %{mask.hash}s", (uint8_t *)v88, 0x16u);
          v94 = (uint64_t)v189;
          swift_arrayDestroy();
          MEMORY[0x220772F44](v94, -1, -1);
          MEMORY[0x220772F44](v88, -1, -1);
        }
        else
        {
          v198 = (void (*)(_QWORD, _QWORD))v76[1];
          v198(v75, v205);
        }

        v95 = (uint64_t)v199;
        v97 = MEMORY[0x24BDAC7A8](v96);
        v77((char *)v176 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0), v183, v39, v97);
        type metadata accessor for PhotogrammetrySession();
        swift_allocObject();
        v99 = v184;
        v100 = PhotogrammetrySession.init(configuration:)();
        if (!v99)
        {
          v110 = v100;
          v111 = v39;
          v198(v200, v205);
          v112 = v201;
          goto LABEL_36;
        }
        v184 = 0;
        v101 = v99;
        v102 = v99;
        v103 = Logger.logObject.getter();
        v104 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v103, v104))
        {
          v105 = (uint8_t *)swift_slowAlloc();
          v190 = (void (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc();
          v208 = v190;
          *(_DWORD *)v105 = 136446210;
          v189 = v105 + 4;
          v207 = (uint64_t)v99;
          v106 = v99;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          v107 = String.init<A>(describing:)();
          v207 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, (uint64_t *)&v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_21B9AA000, v103, v104, "Resuming internal photogrammetry session failed with %{public}s", v105, 0xCu);
          v109 = v190;
          swift_arrayDestroy();
          MEMORY[0x220772F44](v109, -1, -1);
          MEMORY[0x220772F44](v105, -1, -1);

        }
        else
        {

        }
        v198(v200, v205);
        v76 = v204;
        v43 = v183;
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))v76[1])(v78, v205);
      }
    }
    v113 = v188;
    v190 = (void (*)(_QWORD, _QWORD, _QWORD))v76[2];
    v190(v188, v36, v205);
    v114 = Logger.logObject.getter();
    v115 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v114, v115))
    {
      v116 = swift_slowAlloc();
      v179 = (void *)swift_slowAlloc();
      v208 = v179;
      *(_DWORD *)v116 = 141558274;
      v207 = 1752392040;
      v189 = v77;
      v117 = v205;
      v200 = (char *)v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v116 + 12) = 2080;
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v118 = dispatch thunk of CustomStringConvertible.description.getter();
      v207 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v119, (uint64_t *)&v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v39 = (uint64_t)v200;
      v120 = v117;
      v77 = (void (*)(char *, char *, uint64_t, __n128))v189;
      v198 = (void (*)(_QWORD, _QWORD))v204[1];
      v198(v113, v120);
      _os_log_impl(&dword_21B9AA000, v114, v115, "Creating internal photogrammetry session from imageURL = %{mask.hash}s", (uint8_t *)v116, 0x16u);
      v121 = v179;
      swift_arrayDestroy();
      MEMORY[0x220772F44](v121, -1, -1);
      v122 = v116;
      v43 = v183;
      MEMORY[0x220772F44](v122, -1, -1);
    }
    else
    {
      v198 = (void (*)(_QWORD, _QWORD))v76[1];
      v198(v113, v205);
    }

    v95 = (uint64_t)v199;
    v123 = ((uint64_t (*)(char *, uint64_t, uint64_t))v190)(v196, v36, v205);
    v124 = MEMORY[0x24BDAC7A8](v123);
    v34 = (char *)v176 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
    v77(v34, v43, v39, v124);
    type metadata accessor for PhotogrammetrySession();
    swift_allocObject();
    v126 = v184;
    v127 = PhotogrammetrySession.init(imagesURL:configuration:)();
    v128 = v39;
    v112 = v201;
    if (v126)
    {
      v181(v43, v128);
      v132 = 0;
      v208 = v126;
      v133 = type metadata accessor for PhotogrammetrySession.Error();
      v204 = v176;
      v134 = *(_QWORD *)(v133 - 8);
      MEMORY[0x24BDAC7A8](v133);
      v136 = (char *)v176 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
      v137 = v126;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v138 = swift_dynamicCast();
      v139 = v203;
      if (v138)
      {
        v140 = (*(uint64_t (**)(char *, uint64_t))(v134 + 88))(v136, v133);
        v141 = v140;
        if (MEMORY[0x24BE1EC10] && (_DWORD)v140 == *MEMORY[0x24BE1EC10])
        {

          v142 = (uint64_t)v186;
          outlined init with copy of __RKEntityActionSpecification(v192, (uint64_t)v186, type metadata accessor for PhotogrammetrySession.Configuration);
          v143 = Logger.logObject.getter();
          v144 = static os_log_type_t.error.getter();
          LODWORD(v199) = v144;
          if (os_log_type_enabled(v143, v144))
          {
            v145 = swift_slowAlloc();
            v146 = swift_slowAlloc();
            v197 = (char *)v146;
            *(_DWORD *)v145 = 141558274;
            v206 = 1752392040;
            v207 = v146;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v145 + 12) = 2080;
            v196 = (char *)(v145 + 14);
            v147 = v142 + *(int *)(v191 + 28);
            LODWORD(v200) = 0;
            outlined init with copy of (Int, URL)(v147, v193, &demangling cache variable for type metadata for URL?);
            v148 = String.init<A>(describing:)();
            v206 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v149, &v207);
            v112 = v201;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v132 = (int)v200;
            swift_bridgeObjectRelease();
            outlined destroy of __RKEntityActionSpecification(v142, type metadata accessor for PhotogrammetrySession.Configuration);
            _os_log_impl(&dword_21B9AA000, v143, (os_log_type_t)v199, "Internal photogrammetry session init failed for checkpointDirectory = %{mask.hash}s", (uint8_t *)v145, 0x16u);
            v150 = v197;
            swift_arrayDestroy();
            MEMORY[0x220772F44](v150, -1, -1);
            v151 = v145;
            v139 = v203;
            MEMORY[0x220772F44](v151, -1, -1);
          }
          else
          {
            outlined destroy of __RKEntityActionSpecification(v142, type metadata accessor for PhotogrammetrySession.Configuration);
          }

          lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error();
          swift_allocError();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 104))(v170, v141, v133);
          swift_willThrow();
          outlined destroy of __RKEntityActionSpecification(v192, type metadata accessor for PhotogrammetrySession.Configuration);
          v198(v185, v205);
          v168 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
LABEL_56:
          v171 = v202;
          v172 = v112;
LABEL_59:
          v168(v171, v172);

          if (v132)
            swift_release();
          return v34;
        }
        if (MEMORY[0x24BE1EC08] && (_DWORD)v140 == *MEMORY[0x24BE1EC08])
        {

          v152 = v195;
          v190(v195, v185, v205);
          v153 = Logger.logObject.getter();
          v154 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v153, v154))
          {
            v155 = swift_slowAlloc();
            v156 = swift_slowAlloc();
            *(_DWORD *)v155 = 141558274;
            v206 = 1752392040;
            v207 = v156;
            LODWORD(v200) = 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v155 + 12) = 2080;
            lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
            v157 = dispatch thunk of CustomStringConvertible.description.getter();
            v206 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v158, &v207);
            v132 = (int)v200;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v159 = v198;
            v198(v152, v205);
            v160 = v154;
            v161 = v159;
            _os_log_impl(&dword_21B9AA000, v153, v160, "Internal photogrammetry session init failed for imageURL = %{mask.hash}s", (uint8_t *)v155, 0x16u);
            swift_arrayDestroy();
            v162 = v201;
            MEMORY[0x220772F44](v156, -1, -1);
            MEMORY[0x220772F44](v155, -1, -1);

          }
          else
          {
            v161 = v198;
            v198(v152, v205);

            v162 = v112;
          }
          type metadata accessor for PhotogrammetrySession.Error(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, type metadata accessor for PhotogrammetrySession.Error, (uint64_t)&protocol conformance descriptor for PhotogrammetrySession.Error);
          swift_allocError();
          v173 = v185;
          v174 = v205;
          v190(v175, v185, v205);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          outlined destroy of __RKEntityActionSpecification(v192, type metadata accessor for PhotogrammetrySession.Configuration);
          v161(v173, v174);
          v171 = v202;
          v168 = *(void (**)(uint64_t, uint64_t))(v203 + 8);
          v172 = v162;
          goto LABEL_59;
        }
        if (MEMORY[0x24BE1EC00] && (_DWORD)v140 == *MEMORY[0x24BE1EC00])
        {

          v163 = Logger.logObject.getter();
          v164 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v163, v164))
          {
            v165 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v165 = 0;
            _os_log_impl(&dword_21B9AA000, v163, v164, "Internal photogrammetry session init failed!", v165, 2u);
            v166 = v165;
            v112 = v201;
            MEMORY[0x220772F44](v166, -1, -1);
          }

          lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error();
          swift_allocError();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 104))(v167, v141, v133);
          swift_willThrow();
          outlined destroy of __RKEntityActionSpecification(v192, type metadata accessor for PhotogrammetrySession.Configuration);
          v198(v185, v205);
          v168 = *(void (**)(uint64_t, uint64_t))(v203 + 8);
          goto LABEL_56;
        }
        (*(void (**)(char *, uint64_t))(v134 + 8))(v136, v133);
      }

      swift_willThrow();
      outlined destroy of __RKEntityActionSpecification(v192, type metadata accessor for PhotogrammetrySession.Configuration);
      v198(v185, v205);
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v202, v112);
      return v34;
    }
    v110 = v127;
    v111 = v128;
LABEL_36:
    v129 = v192;
    v130 = v202;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v203 + 16))(v95, v202, v112);
    v131 = (uint64_t)v187;
    outlined init with copy of __RKEntityActionSpecification(v129, (uint64_t)v187, type metadata accessor for PhotogrammetrySession.Configuration);
    type metadata accessor for PhotogrammetrySessionImpl(0);
    v34 = (char *)swift_allocObject();
    swift_retain();
    PhotogrammetrySessionImpl.init(id:using:configuration:)(v95, v110, v131);
    type metadata accessor for ImageHelper();
    swift_retain();
    *(_QWORD *)&v34[OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sortedImageFiles] = static ImageHelper.enumerateImageFilesInFolderShallowly(_:sorted:)(v36, 1);
    swift_bridgeObjectRelease();
    v169 = swift_bridgeObjectRetain();
    specialized static ImageHelper.logFilenames(files:)(v169);
    swift_release();
    swift_bridgeObjectRelease();
    v181(v183, v111);
    PhotogrammetrySessionImpl.logAnalyticsEvents(sourceType:)(0);
    outlined destroy of __RKEntityActionSpecification(v192, type metadata accessor for PhotogrammetrySession.Configuration);
    v198(v36, v205);
    (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v130, v112);
    swift_release();
    return v34;
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)logger);
  v65 = v204;
  v66 = v197;
  v200 = (char *)v204[2];
  ((void (*)(char *, uint64_t, uint64_t))v200)(v197, a2, v205);
  v67 = Logger.logObject.getter();
  v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = v66;
    v70 = swift_slowAlloc();
    v71 = (void *)swift_slowAlloc();
    v208 = v71;
    *(_DWORD *)v70 = 141558274;
    v207 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 12) = 2080;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v72 = dispatch thunk of CustomStringConvertible.description.getter();
    v207 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)&v208);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v74 = (void (*)(char *, uint64_t))v204[1];
    v74(v69, v205);
    _os_log_impl(&dword_21B9AA000, v67, v68, "The given URL didn't have enough images to reconstruct: %{mask.hash}s", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v71, -1, -1);
    MEMORY[0x220772F44](v70, -1, -1);
  }
  else
  {
    v74 = (void (*)(char *, uint64_t))v65[1];
    v74(v66, v205);
  }

  v81 = v202;
  v82 = v203;
  v34 = (char *)type metadata accessor for PhotogrammetrySession.Error(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, type metadata accessor for PhotogrammetrySession.Error, (uint64_t)&protocol conformance descriptor for PhotogrammetrySession.Error);
  swift_allocError();
  v83 = v205;
  ((void (*)(uint64_t, uint64_t, uint64_t))v200)(v84, v36, v205);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  outlined destroy of __RKEntityActionSpecification(v192, type metadata accessor for PhotogrammetrySession.Configuration);
  v74((char *)v36, v83);
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v201);
  return v34;
}

uint64_t specialized static PhotogrammetrySessionImpl.verifyFreeStorageForSequenceInputOrThrow(configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - v11;
  if (one-time initialization token for requiredBytesForImagesCaptureDirectory != -1)
    swift_once();
  v13 = 3 * static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory;
  if ((unsigned __int128)(static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory * (__int128)3) >> 64 != (3 * static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory) >> 63)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_6;
  }
  v14 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  outlined init with copy of (Int, URL)(a1 + *(int *)(v14 + 28), (uint64_t)v5, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    goto LABEL_8;
  }
  if (one-time initialization token for temporaryDirectory != -1)
    goto LABEL_20;
LABEL_6:
  v15 = __swift_project_value_buffer(v6, (uint64_t)static PhotogrammetryFileHelpers.temporaryDirectory);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v15, v6);
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
LABEL_8:
  specialized static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)((uint64_t)v12);
  if (v1
    || specialized static PhotogrammetryFileHelpers.checkIfSufficientStorageSpace(requiredBytes:directory:)(v13, (uint64_t)v12))
  {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  v18 = v16;
  if (one-time initialization token for logger != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)logger);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    v36 = v21;
    v33 = v18;
    v22 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    v39 = v35;
    *(_DWORD *)v22 = 141558530;
    v37 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2080;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v23 = dispatch thunk of CustomStringConvertible.description.getter();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
    v34 = &v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v9, v6);
    *(_WORD *)(v22 + 22) = 2082;
    v32 = v22 + 24;
    if (one-time initialization token for byteFormatter != -1)
      swift_once();
    v18 = v33;
    v26 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v33, v32);
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v20, (os_log_type_t)v36, "Insufficient storage remaining in checkpointDirectory = %{mask.hash}s  Required bytes = %{public}s", (uint8_t *)v22, 0x20u);
    v30 = v35;
    swift_arrayDestroy();
    MEMORY[0x220772F44](v30, -1, -1);
    MEMORY[0x220772F44](v22, -1, -1);
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v9, v6);
  }

  type metadata accessor for PhotogrammetrySession.Error(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, type metadata accessor for PhotogrammetrySession.Error, (uint64_t)&protocol conformance descriptor for PhotogrammetrySession.Error);
  swift_allocError();
  *v31 = v18;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v25)(v12, v6);
}

uint64_t specialized PhotogrammetrySessionImpl.isValidModelUrl(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_14;
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    v10 = "modelFile output URL must be a file URL!";
    goto LABEL_13;
  }
  if ((URL.hasDirectoryPath.getter() & 1) != 0)
  {
    if (specialized static PhotogrammetryFileHelpers.isExistingDirectory(_:)())
    {
      if (!specialized static PhotogrammetryFileHelpers.isEmptyDirectory(_:)())
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v6 = type metadata accessor for Logger();
        __swift_project_value_buffer(v6, (uint64_t)logger);
        v7 = Logger.logObject.getter();
        v8 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v7, v8))
          goto LABEL_14;
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        v10 = "Existing directory output URL must be empty!";
LABEL_13:
        _os_log_impl(&dword_21B9AA000, v7, v8, v10, v9, 2u);
        MEMORY[0x220772F44](v9, -1, -1);
LABEL_14:

        return 0;
      }
    }
    else
    {
      v14 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v15 = URL.path.getter();
      v16 = (void *)MEMORY[0x220768C3C](v15);
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(v14, sel_fileExistsAtPath_, v16);

      if (v17)
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v18 = type metadata accessor for Logger();
        __swift_project_value_buffer(v18, (uint64_t)logger);
        v7 = Logger.logObject.getter();
        v8 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v7, v8))
          goto LABEL_14;
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        v10 = "Model output directory URL provided, but a non-directory already exists at this URL!";
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (URL.pathExtension.getter() == 2053403509 && v13 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)logger);
        v7 = Logger.logObject.getter();
        v8 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v7, v8))
          goto LABEL_14;
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        v10 = "Output URL must be specify a '.usdz' extension file!";
        goto LABEL_13;
      }
    }
    v20 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v21 = URL.path.getter();
    v22 = (void *)MEMORY[0x220768C3C](v21);
    swift_bridgeObjectRelease();
    v23 = objc_msgSend(v20, sel_fileExistsAtPath_, v22);

    if (v23)
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)logger);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc();
        v28 = swift_slowAlloc();
        *(_DWORD *)v27 = 141558274;
        v32 = 1752392040;
        v33 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 12) = 2080;
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v29 = dispatch thunk of CustomStringConvertible.description.getter();
        v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        _os_log_impl(&dword_21B9AA000, v25, v26, "A file already exists at url %{mask.hash}s and will not be overwritten!", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v28, -1, -1);
        MEMORY[0x220772F44](v27, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }

      return 0;
    }
  }
  return 1;
}

uint64_t type metadata accessor for AsyncOutputIterator(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AsyncOutputIterator);
}

uint64_t sub_21BBF8258()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  return closure #1 in PhotogrammetrySessionImpl.init(id:using:configuration:)();
}

uint64_t partial apply for closure #2 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  return closure #2 in PhotogrammetrySessionImpl.init(id:using:configuration:)();
}

uint64_t partial apply for closure #1 in PhotogrammetrySessionImpl.onProcessingCancelled()()
{
  uint64_t v0;

  return closure #1 in PhotogrammetrySessionImpl.onProcessingCancelled()(v0);
}

uint64_t sub_21BBF8294()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PhotogrammetrySessionImpl.onProcessingComplete()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) = 0;
}

uint64_t sub_21BBF82C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in OutputPublisherMonitor.init(publisher:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  return closure #1 in closure #1 in OutputPublisherMonitor.init(publisher:)(a1);
}

uint64_t partial apply for closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation)
                                      - 8)
                          + 80);
  return closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  return partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:));
}

uint64_t sub_21BBF8338()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for closure #4 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  closure #4 in closure #1 in OutputPublisherMonitor.init(publisher:)();
}

uint64_t partial apply for closure #5 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  return closure #5 in closure #1 in OutputPublisherMonitor.init(publisher:)();
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.connectPublisher(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in OutputPublisherMonitor.connectPublisher(_:)(a1, v1);
}

uint64_t sub_21BBF83DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for PhotogrammetrySession.Output();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in OutputPublisherMonitor.connectPublisher(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PhotogrammetrySession.Output() - 8) + 80);
  return closure #1 in closure #1 in OutputPublisherMonitor.connectPublisher(_:)(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t objectdestroy_61Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  return partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)((uint64_t (*)(_QWORD, uint64_t))closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:));
}

uint64_t partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation)
                                      - 8)
                          + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t objectdestroyTm_2()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_21BBF85DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PhotogrammetrySession.Output(0) - 8) + 80);
  v6 = (v3 + v4 + v5) & ~v5;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v7 = v0 + v6;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        v10 = type metadata accessor for URL();
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v0 + v6, v10);
      }
      objc_release(*(id *)(v7
                         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                                  + 48)));
      break;
    case 1u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        v8 = type metadata accessor for URL();
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v6, v8);
      }
      v7 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                   + 48);
      type metadata accessor for PhotogrammetrySession.Result(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          swift_release();
          break;
        case 3u:
          goto LABEL_13;
        case 4u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_13;
        default:
          return swift_deallocObject();
      }
      break;
    case 2u:
    case 5u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
LABEL_7:
        v9 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
      }
      break;
    case 3u:
LABEL_13:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PhotogrammetrySession.Output(0) - 8) + 80);
  return closure #1 in closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t outlined init with copy of PhotogrammetrySample(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PhotogrammetrySample(a2, a1);
  return a2;
}

uint64_t outlined destroy of PhotogrammetrySample(uint64_t a1)
{
  destroy for PhotogrammetrySample(a1);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for AsyncOutputIterator(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncOutputIterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBF8A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AsyncOutputIterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBF8AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for AsyncOutputIterator()
{
  unint64_t v0;

  type metadata accessor for UUID?(319, &lazy cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator, type metadata accessor for PhotogrammetrySession.Output, MEMORY[0x24BEE6A78]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for UUID?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t storeEnumTagSinglePayload for AudioFileGroupResource.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BBF8C54 + 4 * byte_21BE65309[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BBF8C88 + 4 * byte_21BE65304[v4]))();
}

uint64_t sub_21BBF8C88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBF8C90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBF8C98);
  return result;
}

uint64_t sub_21BBF8CA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBF8CACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BBF8CB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBF8CB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioFileGroupResource.Error()
{
  return &type metadata for AudioFileGroupResource.Error;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioFileGroupResource.Error()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000050;
  if (*v0 != 1)
    v1 = 0xD000000000000064;
  if (*v0)
    return v1;
  else
    return 0x206E776F6E6B6E55;
}

void MeshJointInfluence.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t MeshJointInfluence.init(jointIndex:weight:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_DWORD *)a2 = result;
    *(float *)(a2 + 4) = a3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t MeshJointInfluence.jointIndex.getter()
{
  int *v0;

  return *v0;
}

uint64_t MeshJointInfluence.jointIndex.setter(uint64_t result)
{
  _DWORD *v1;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *v1 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t (*MeshJointInfluence.jointIndex.modify(_QWORD *a1))(uint64_t result, char a2)
{
  int *v1;

  *a1 = *v1;
  a1[1] = v1;
  return MeshJointInfluence.jointIndex.modify;
}

uint64_t MeshJointInfluence.jointIndex.modify(uint64_t result, char a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)result < (uint64_t)0xFFFFFFFF80000000;
  if ((a2 & 1) != 0)
  {
    if (*(_QWORD *)result < (int64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_9;
    }
    v3 = v2 < 0x7FFFFFFF;
    if (v2 <= 0x7FFFFFFF)
    {
LABEL_7:
      **(_DWORD **)(result + 8) = v2;
      return result;
    }
    __break(1u);
  }
  if (v3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 <= 0x7FFFFFFF)
    goto LABEL_7;
LABEL_10:
  __break(1u);
  return result;
}

float MeshJointInfluence.weight.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void MeshJointInfluence.weight.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

float (*MeshJointInfluence.weight.modify(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return MeshJointInfluence.weight.modify;
}

float MeshJointInfluence.weight.modify(float *a1)
{
  float result;

  result = a1[2];
  *(float *)(*(_QWORD *)a1 + 4) = result;
  return result;
}

Swift::Bool __swiftcall MeshBuffers.Identifier.BufferName.validType(_:)(RealityFoundation::MeshBuffers::ElementType a1)
{
  unsigned __int8 v1;

  return ((uint64_t (*)(void))((char *)sub_21BBF8EB0 + 4 * byte_21BE65408[v1]))();
}

BOOL sub_21BBF8EB0@<W0>(int a1@<W8>)
{
  return a1 == 9;
}

BOOL sub_21BBF8EBC@<W0>(int a1@<W8>)
{
  return a1 == 8;
}

BOOL sub_21BBF8EC8@<W0>(int a1@<W8>)
{
  return (a1 - 1) < 2;
}

BOOL sub_21BBF8ED8@<W0>(int a1@<W8>)
{
  return a1 == 11;
}

BOOL sub_21BBF8EE4@<W0>(int a1@<W8>)
{
  return a1 == 5;
}

BOOL static MeshBuffers.ElementType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MeshBuffers.Identifier.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshBuffers.Identifier.isCustom.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t MeshBuffers.Identifier.isBlendShape.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

void one-time initialization function for positions()
{
  strcpy((char *)&static MeshBuffers.Identifier.positions, "vertexPosition");
  unk_2551A1307 = -18;
  word_2551A1308 = 0;
}

uint64_t static MeshBuffers.Identifier.positions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  if (one-time initialization token for positions != -1)
    swift_once();
  v2 = unk_2551A1300;
  v3 = word_2551A1308;
  v4 = HIBYTE(word_2551A1308);
  *(_QWORD *)a1 = static MeshBuffers.Identifier.positions;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void one-time initialization function for normals()
{
  strcpy((char *)&static MeshBuffers.Identifier.normals, "vertexNormal");
  algn_2551A1318[5] = 0;
  *(_WORD *)&algn_2551A1318[6] = -5120;
  word_2551A1320 = 0;
}

uint64_t static MeshBuffers.Identifier.normals.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  if (one-time initialization token for normals != -1)
    swift_once();
  v2 = *(_QWORD *)algn_2551A1318;
  v3 = word_2551A1320;
  v4 = HIBYTE(word_2551A1320);
  *(_QWORD *)a1 = static MeshBuffers.Identifier.normals;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void one-time initialization function for tangents()
{
  strcpy((char *)&static MeshBuffers.Identifier.tangents, "vertexTangent");
  unk_2551A1336 = -4864;
  word_2551A1338 = 0;
}

uint64_t static MeshBuffers.Identifier.tangents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  if (one-time initialization token for tangents != -1)
    swift_once();
  v2 = unk_2551A1330;
  v3 = word_2551A1338;
  v4 = HIBYTE(word_2551A1338);
  *(_QWORD *)a1 = static MeshBuffers.Identifier.tangents;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void one-time initialization function for bitangents()
{
  static MeshBuffers.Identifier.bitangents = 0x6942786574726576;
  *(_QWORD *)algn_2551A1348 = 0xEF746E65676E6174;
  word_2551A1350 = 0;
}

uint64_t static MeshBuffers.Identifier.bitangents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  if (one-time initialization token for bitangents != -1)
    swift_once();
  v2 = *(_QWORD *)algn_2551A1348;
  v3 = word_2551A1350;
  v4 = HIBYTE(word_2551A1350);
  *(_QWORD *)a1 = static MeshBuffers.Identifier.bitangents;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void one-time initialization function for textureCoordinates()
{
  static MeshBuffers.Identifier.textureCoordinates = 0x5655786574726576;
  unk_2551A1360 = 0xE800000000000000;
  word_2551A1368 = 0;
}

uint64_t static MeshBuffers.Identifier.textureCoordinates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  if (one-time initialization token for textureCoordinates != -1)
    swift_once();
  v2 = unk_2551A1360;
  v3 = word_2551A1368;
  v4 = HIBYTE(word_2551A1368);
  *(_QWORD *)a1 = static MeshBuffers.Identifier.textureCoordinates;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void one-time initialization function for triangleIndices()
{
  strcpy((char *)&static MeshBuffers.Identifier.triangleIndices, "indexTriangles");
  algn_2551A1378[7] = -18;
  word_2551A1380 = 0;
}

uint64_t static MeshBuffers.Identifier.triangleIndices.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  if (one-time initialization token for triangleIndices != -1)
    swift_once();
  v2 = *(_QWORD *)algn_2551A1378;
  v3 = word_2551A1380;
  v4 = HIBYTE(word_2551A1380);
  *(_QWORD *)a1 = static MeshBuffers.Identifier.triangleIndices;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t MeshBuffers.Identifier.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
    v3 = 34;
  else
    v3 = 0;
  if (*(_BYTE *)(v0 + 16))
    v4 = (void *)0xE100000000000000;
  else
    v4 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v3;
  v6._object = v4;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t MeshBuffers.Identifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static MeshBuffers.Identifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int MeshBuffers.Identifier.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MeshBuffers.Identifier()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MeshBuffers.Identifier()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MeshBuffers.Identifier()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MeshBuffers.Identifier(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void MeshBuffers.ElementType.genericAttributeDescriptor.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_21BBF951C()
{
  uint64_t v0;
  uint64_t result;

  v0 = *MEMORY[0x24BE262E0];
  type metadata accessor for MeshAttributeDescriptor();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

void MeshBuffers.ElementType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

unint64_t BufferDescriptor.init(bufferName:reRate:reType:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  int v10;
  char v11;
  char v12;
  unint64_t result;
  char v14;
  Swift::String v15;
  Swift::String v16;

  if (a4 <= 0xAu)
  {
    v8 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v8 = a1 & 0xFFFFFFFFFFFFLL;
    if (v8)
    {
      v10 = byte_21BE65E0A[(char)a4];
      swift_bridgeObjectRetain();
      v15._countAndFlagsBits = a1;
      v15._object = (void *)a2;
      v11 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v15);
      if (v11 == 8)
      {
        if (a3 <= 3u)
        {
          swift_bridgeObjectRetain();
          v16._countAndFlagsBits = a1;
          v16._object = (void *)a2;
          result = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v16);
          *(_QWORD *)a5 = a1;
          *(_QWORD *)(a5 + 8) = a2;
          *(_BYTE *)(a5 + 20) = 1;
          *(_DWORD *)(a5 + 16) = (result == 8) | ((0x2010003u >> (8 * a3)) << 16) | (v10 << 24);
          return result;
        }
      }
      else
      {
        v12 = v11;
        v14 = v10;
        if (MeshBuffers.Identifier.BufferName.validType(_:)((RealityFoundation::MeshBuffers::ElementType)&v14))
          __asm { BR              X10 }
      }
    }
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 13) = 0;
  return result;
}

uint64_t BufferDescriptor.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 20);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  if (v3)
    v7 = 695216160;
  else
    v7 = 0;
  if (v3)
    v8 = 0xE400000000000000;
  else
    v8 = 0xE000000000000000;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t MeshBuffers.Semantic.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 17);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void static MeshBuffers.positions.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "vertexPosition");
  *(_BYTE *)(a1 + 15) = -18;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.normals.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "vertexNormal");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.tangents.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "vertexTangent");
  *(_WORD *)(a1 + 14) = -4864;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.bitangents.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x6942786574726576;
  *(_QWORD *)(a1 + 8) = 0xEF746E65676E6174;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.textureCoordinates.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x5655786574726576;
  *(_QWORD *)(a1 + 8) = 0xE800000000000000;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.triangleIndices.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "indexTriangles");
  *(_BYTE *)(a1 + 15) = -18;
  *(_WORD *)(a1 + 16) = 0;
}

unint64_t static MeshBuffers.custom<A>(_:type:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  Swift::String v7;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  result = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v7);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = result == 8;
  *(_BYTE *)(a3 + 17) = 0;
  return result;
}

void static MeshBuffers.jointInfluences.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD00000000000001FLL;
  *(_QWORD *)(a1 + 8) = 0x800000021BE81900;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.jointInfluenceEndIndices.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0xD000000000000023;
  *(_QWORD *)(a1 + 8) = 0x800000021BE81920;
  *(_WORD *)(a1 + 16) = 0;
}

void one-time initialization function for jointInfluences()
{
  static MeshBuffers.Identifier.jointInfluences = 0xD00000000000001FLL;
  unk_2551A1390 = 0x800000021BE81900;
  word_2551A1398 = 0;
}

uint64_t static MeshBuffers.Identifier.jointInfluences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  if (one-time initialization token for jointInfluences != -1)
    swift_once();
  v2 = unk_2551A1390;
  v3 = word_2551A1398;
  v4 = HIBYTE(word_2551A1398);
  *(_QWORD *)a1 = static MeshBuffers.Identifier.jointInfluences;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void one-time initialization function for jointInfluenceEndIndices()
{
  static MeshBuffers.Identifier.jointInfluenceEndIndices = 0xD000000000000023;
  *(_QWORD *)algn_2551A13A8 = 0x800000021BE81920;
  word_2551A13B0 = 0;
}

uint64_t static MeshBuffers.Identifier.jointInfluenceEndIndices.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  if (one-time initialization token for jointInfluenceEndIndices != -1)
    swift_once();
  v2 = *(_QWORD *)algn_2551A13A8;
  v3 = word_2551A13B0;
  v4 = HIBYTE(word_2551A13B0);
  *(_QWORD *)a1 = static MeshBuffers.Identifier.jointInfluenceEndIndices;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

Swift::Bool __swiftcall MeshBuffer.Iterator.getChunk()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  v2 = ((uint64_t (*)(uint64_t))v0[2])(*v0);
  v4 = v3;
  if (v3)
  {
    *v1 = v2;
    swift_release();
    v1[1] = v4;
  }
  return v4 != 0;
}

uint64_t MeshBuffer.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v13 - v9;
  if (!*(_QWORD *)(v2 + 8))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 56))(a2, 1, 1, v5, v8);
  swift_retain();
  AnyIterator.next()();
  v11 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (MeshBuffer.Iterator.getChunk()())
      MeshBuffer.Iterator.next()(a1);
    else
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, 1, 1, v5);
    return swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v10, v5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v5);
  }
}

BOOL MeshBuffer.makeIterator()@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 48);
  return MeshBuffer.Iterator.getChunk()();
}

uint64_t type metadata accessor for MeshBuffer.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MeshBuffer.Iterator);
}

uint64_t MeshBuffer.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

void MeshBuffer.rate.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 80);
}

_BYTE *MeshBuffer.rate.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = *result;
  return result;
}

uint64_t (*MeshBuffer.rate.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t specialized MeshBuffer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 3;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 4;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 1;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 5;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 2;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 6;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 7;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 8;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = closure #1 in MeshBuffer.init<A>(_:)specialized partial apply;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = closure #2 in MeshBuffer.init<A>(_:)specialized partial apply;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = closure #3 in MeshBuffer.init<A>(_:)specialized partial apply;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = closure #4 in MeshBuffer.init<A>(_:)specialized partial apply;
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 9;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 10;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 11;
  *(_QWORD *)(a2 + 72) = v4;
  *(_BYTE *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

uint64_t specialized MeshBuffer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 3;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 4;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 1;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 5;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 2;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 6;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 7;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 8;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 9;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 10;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 11;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

uint64_t specialized closure #3 in MeshBuffer.init<A>(_:)()
{
  uint64_t ModelPartBufferAttributeCount;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD v4[2];

  ModelPartBufferAttributeCount = REMeshAssetGetModelPartBufferAttributeCount();
  v1 = (unsigned __int128)(ModelPartBufferAttributeCount * (__int128)12) >> 64;
  result = 12 * ModelPartBufferAttributeCount;
  if (v1 == result >> 63)
  {
    v4[0] = specialized Data.init(count:)(result);
    v4[1] = v3;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v4);
    return v4[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = REMeshAssetGetModelPartBufferAttributeCount();
  if ((unint64_t)(result - 0x800000000000000) >> 60 == 15)
  {
    v2[0] = specialized Data.init(count:)(16 * result);
    v2[1] = v1;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v2);
    return v2[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = REMeshAssetGetModelPartBufferAttributeCount();
  if ((unint64_t)(result - 0x1000000000000000) >> 61 == 7)
  {
    v2[0] = specialized Data.init(count:)(8 * result);
    v2[1] = v1;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v2);
    return v2[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = REMeshAssetGetModelPartBufferAttributeCount();
  if ((unint64_t)(result - 0x2000000000000000) >> 62 == 3)
  {
    v2[0] = specialized Data.init(count:)(4 * result);
    v2[1] = v1;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v2);
    return v2[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = REMeshAssetGetModelPartBufferAttributeCount();
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v2[0] = specialized Data.init(count:)(2 * result);
    v2[1] = v1;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v2);
    return v2[0];
  }
  return result;
}

{
  uint64_t ModelPartBufferAttributeCount;
  uint64_t v1;
  _QWORD v3[2];

  ModelPartBufferAttributeCount = REMeshAssetGetModelPartBufferAttributeCount();
  v3[0] = specialized Data.init(count:)(ModelPartBufferAttributeCount);
  v3[1] = v1;
  swift_retain();
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v3);
  return v3[0];
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t ModelPartBufferAttributeData;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 48);
  if ((v4 & 0x8000000000000000) == 0)
  {
    swift_retain();
    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(a3);
      v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v8 + 16) = v4;
    }
    else
    {
      v8 = MEMORY[0x24BEE4AF8];
    }
    ModelPartBufferAttributeData = REMeshAssetGetModelPartBufferAttributeData();
    if (v4 < ModelPartBufferAttributeData)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v8 + 16) = ModelPartBufferAttributeData;
      swift_release();
      v10 = *(_QWORD *)(v8 + 16);
      if (!v10)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      v11 = __OFADD__(a1, v10);
      v12 = a1 + v10;
      if (!v11)
      {
        __swift_instantiateConcreteTypeFromMangledName(a4);
        v13 = swift_allocObject();
        *(_QWORD *)(v13 + 16) = v8;
        *(_QWORD *)(v13 + 24) = 0;
        return v12;
      }
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t ModelPartBufferAttributeData;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 48);
  if ((v4 & 0x8000000000000000) == 0)
  {
    swift_retain();
    if (v4)
    {
      v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v7 + 16) = v4;
    }
    else
    {
      v7 = MEMORY[0x24BEE4AF8];
    }
    ModelPartBufferAttributeData = REMeshAssetGetModelPartBufferAttributeData();
    if (v4 < ModelPartBufferAttributeData)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v7 + 16) = ModelPartBufferAttributeData;
      swift_release();
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      v10 = __OFADD__(a1, v9);
      v11 = a1 + v9;
      if (!v10)
      {
        __swift_instantiateConcreteTypeFromMangledName(a4);
        v12 = swift_allocObject();
        *(_QWORD *)(v12 + 16) = v7;
        *(_QWORD *)(v12 + 24) = 0;
        return v11;
      }
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MeshBuffer.elements.getter(uint64_t a1)
{
  uint64_t (**v1)(void);
  uint64_t result;

  result = (*v1)();
  if (!result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffer<A>, a1);
    return Array.init<A>(_:)();
  }
  return result;
}

uint64_t MeshBuffer.usingRate(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(_BYTE *)(v2 + 64);
  v6 = *(_BYTE *)(v2 + 65);
  v7 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v2 + 40);
  *(_QWORD *)(a2 + 56) = v4;
  *(_BYTE *)(a2 + 64) = v5;
  *(_BYTE *)(a2 + 65) = v6;
  *(_QWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t MeshBuffer.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v18 = a2;
  v17 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v19 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v19 - 8);
  v7 = MEMORY[0x24BDAC7A8](v19);
  v9 = (char *)&v17 - v8;
  v10 = *((_BYTE *)v3 + 64);
  v11 = *((_BYTE *)v3 + 65);
  v12 = *((_QWORD *)v3 + 9);
  v13 = *((_BYTE *)v3 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 56))((char *)&v17 - v8, 1, 1, v5, v7);
  v33 = 1;
  v14 = v3[1];
  v25 = *v3;
  v26 = v14;
  v15 = v3[3];
  v27 = v3[2];
  v28 = v15;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  v20 = v5;
  v21 = &v33;
  v22 = v9;
  v23 = v17;
  v24 = v18;
  MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffer<A>, a3);
  Sequence.forEach(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v19);
}

{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __int128 v16;
  __int128 v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v23 = a3;
  v22 = a2;
  v21 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v25 = type metadata accessor for Optional();
  v24 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - v9;
  v11 = *((_BYTE *)v3 + 64);
  v12 = *((_BYTE *)v3 + 65);
  v13 = *((_QWORD *)v3 + 9);
  v14 = *((_BYTE *)v3 + 80);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v4 - 8) + 56);
  v15((char *)&v21 - v9, 1, 1, v4, v8);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v15)(v6, 1, 1, v4);
  v40 = 1;
  v16 = v3[1];
  v32 = *v3;
  v33 = v16;
  v17 = v3[3];
  v34 = v3[2];
  v35 = v17;
  v36 = v11;
  v37 = v12;
  v38 = v13;
  v39 = v14;
  v26 = v4;
  v27 = &v40;
  v28 = v10;
  v29 = v6;
  v30 = v21;
  v31 = v22;
  MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffer<A>, v23);
  Sequence.forEach(_:)();
  v18 = *(void (**)(char *, uint64_t))(v24 + 8);
  v19 = v25;
  v18(v6, v25);
  return ((uint64_t (*)(char *, uint64_t))v18)(v10, v19);
}

{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __int128 v18;
  __int128 v19;
  void (*v20)(char *, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v26 = a3;
  v25 = a2;
  v24 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = type metadata accessor for Optional();
  v27 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - v9;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - v13;
  v15 = *((_BYTE *)v3 + 64);
  v23 = *((unsigned __int8 *)v3 + 65);
  v16 = *((_QWORD *)v3 + 9);
  v22 = *((unsigned __int8 *)v3 + 80);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v4 - 8) + 56);
  v17((char *)&v22 - v13, 1, 1, v4, v12);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v17)(v10, 1, 1, v4);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v17)(v7, 1, 1, v4);
  v43 = 1;
  v18 = v3[1];
  v35 = *v3;
  v36 = v18;
  v19 = v3[3];
  v37 = v3[2];
  v38 = v19;
  v39 = v15;
  v40 = v23;
  v41 = v16;
  v42 = v22;
  v28 = v4;
  v29 = &v43;
  v30 = v14;
  v31 = v10;
  v32 = v7;
  v33 = v24;
  v34 = v25;
  MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffer<A>, v26);
  Sequence.forEach(_:)();
  v20 = *(void (**)(char *, uint64_t))(v27 + 8);
  v20(v7, v5);
  v20(v10, v5);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v5);
}

void closure #1 in MeshBuffer.forEach(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(char *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v12 = type metadata accessor for Optional();
  v16 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v21 - v15;
  if (*a2 != 2)
  {
    if (*a2 != 1)
      return;
    (*(void (**)(uint64_t, uint64_t, __n128))(v14 + 8))(a3, v13, v16);
    v18 = *(_QWORD *)(a6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a3, a1, a6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a3, 0, 1, a6);
    v19 = 2;
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t, __n128))(v14 + 16))((char *)&v21 - v15, a3, v16);
  v20 = *(_QWORD *)(a6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, a6) == 1)
  {
    __break(1u);
    return;
  }
  a4(v17, a1);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v17, a6);
  if (!v6)
  {
    v19 = 1;
LABEL_7:
    *a2 = v19;
  }
}

void partial apply for closure #1 in MeshBuffer.forEach(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in MeshBuffer.forEach(_:)(a1, *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(char *, uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  closure #1 in MeshBuffer.forEach(_:)(a1, *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(char *, char *, uint64_t))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  closure #1 in MeshBuffer.forEach(_:)(a1, *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void (**)(char *, char *, char *, uint64_t))(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16));
}

void closure #1 in MeshBuffer.forEach(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);

  v31 = a6;
  v32 = a5;
  v13 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v28 - v18;
  v21 = *a2;
  if (*a2 == 1)
  {
    v22 = a1;
    v23 = 2;
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, __n128))(v17 + 8))(a3, v13, v19);
    v27 = *(_QWORD *)(a7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(a3, v22, a7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(a3, 0, 1, a7);
    goto LABEL_11;
  }
  if (v21 != 3)
  {
    if (v21 != 2)
      return;
    v22 = a1;
    v23 = 3;
    a3 = a4;
    goto LABEL_10;
  }
  v30 = a1;
  v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  v24((char *)&v28 - v18, a3, v13, v19);
  v29 = *(_QWORD *)(a7 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v25(v20, 1, a7) == 1)
  {
    __break(1u);
    goto LABEL_14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v24)(v15, a4, v13);
  if (v25(v15, 1, a7) == 1)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v32(v20, v15, v30);
  v26 = *(void (**)(char *, uint64_t))(v29 + 8);
  v26(v15, a7);
  v26(v20, a7);
  if (v7)
    return;
  v23 = 1;
LABEL_11:
  *a2 = v23;
}

void closure #1 in MeshBuffer.forEach(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, char *, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, __n128);
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a7;
  v34 = a6;
  v35 = a5;
  v37 = a1;
  v13 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v31 - v17;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v31 - v21;
  v24 = *a2 - 1;
  v36 = v8;
  v25 = 2;
  switch(v24)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v25 = 3;
      a3 = a4;
      goto LABEL_4;
    case 2:
      v25 = 4;
      a3 = v35;
LABEL_4:
      (*(void (**)(uint64_t, uint64_t, __n128))(v20 + 8))(a3, v13, v22);
      v26 = *(_QWORD *)(a8 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(a3, v37, a8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(a3, 0, 1, a8);
      goto LABEL_5;
    case 3:
      v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
      v27((char *)&v31 - v21, a3, v13, v22);
      v32 = *(_QWORD *)(a8 - 8);
      v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      if (v28(v23, 1, a8) == 1)
      {
        __break(1u);
        goto LABEL_13;
      }
      ((void (*)(char *, uint64_t, uint64_t))v27)(v18, a4, v13);
      if (v28(v18, 1, a8) == 1)
      {
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      ((void (*)(char *, uint64_t, uint64_t))v27)(v15, v35, v13);
      if (v28(v15, 1, a8) == 1)
      {
LABEL_14:
        __break(1u);
        JUMPOUT(0x21BBFC73CLL);
      }
      v29 = v36;
      v34(v23, v18, v15, v37);
      v30 = *(void (**)(char *, uint64_t))(v32 + 8);
      v30(v15, a8);
      v30(v18, a8);
      v30(v23, a8);
      if (!v29)
      {
        v36 = 0;
        v25 = 1;
LABEL_5:
        *a2 = v25;
      }
      return;
    default:
      return;
  }
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshBuffer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

double MeshBuffer<A>.init(_:)@<D0>(uint64_t a1@<X8>)
{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

double MeshBuffer<A>.init(elements:indices:)@<D0>(uint64_t a1@<X8>)
{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

uint64_t MeshBuffer<A>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x24BEE3E50], a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 3;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x24BEE4260], a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x24BEE3F30], a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 4;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x24BEE4478], a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 1;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x24BEE3F88], a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 5;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x24BEE44F0], a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 2;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x24BEE14E8], a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 6;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x24BEE13C8], a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 7;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  v7 = specialized SequenceBuffer.init<A>(_:)(a1, v6, a2);
  v9 = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v9;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v7;
  *(_QWORD *)(v13 + 24) = v9;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v14(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v12;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v13;
  *(_WORD *)(a3 + 64) = 8;
  *(_QWORD *)(a3 + 72) = v9;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v7 = specialized SequenceBuffer.init<A>(_:)(a1, v6, a2);
  v9 = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v9;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v7;
  *(_QWORD *)(v13 + 24) = v9;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v14(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v12;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v13;
  *(_WORD *)(a3 + 64) = 9;
  *(_QWORD *)(a3 + 72) = v9;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  v7 = specialized SequenceBuffer.init<A>(_:)(a1, v6, a2);
  v9 = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v9;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v7;
  *(_QWORD *)(v13 + 24) = v9;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v14(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v12;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v13;
  *(_WORD *)(a3 + 64) = 10;
  *(_QWORD *)(a3 + 72) = v9;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t result;

  v6 = specialized SequenceBuffer.init<A>(_:)(a1, (uint64_t)&type metadata for MeshJointInfluence, a2);
  v8 = v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  swift_retain_n();
  result = v13(a1, a2);
  *(_QWORD *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(_QWORD *)(a3 + 56) = v12;
  *(_WORD *)(a3 + 64) = 11;
  *(_QWORD *)(a3 + 72) = v8;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

double MeshBuffer<A>.init(_:)@<D0>(void (*a1)(_OWORD *__return_ptr)@<X1>, uint64_t a2@<X8>)
{
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[4];
  char v12;
  char v13;
  uint64_t v14;
  char v15;

  a1(v11);
  v3 = v12;
  v4 = v13;
  v5 = v14;
  v6 = v15;
  result = *(double *)v11;
  v8 = v11[1];
  v9 = v11[2];
  v10 = v11[3];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 64) = v3;
  *(_BYTE *)(a2 + 65) = v4;
  *(_QWORD *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = v6;
  return result;
}

double MeshBuffer<A>.init(elements:indices:)@<D0>(void (*a1)(_OWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[4];
  char v12;
  char v13;
  uint64_t v14;
  char v15;

  a1(v11);
  v3 = v12;
  v4 = v13;
  v5 = v14;
  v6 = v15;
  result = *(double *)v11;
  v8 = v11[1];
  v9 = v11[2];
  v10 = v11[3];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 64) = v3;
  *(_BYTE *)(a2 + 65) = v4;
  *(_QWORD *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = v6;
  return result;
}

uint64_t IndexingBuffer.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v4 = *(_QWORD *)(v2 + 16);
  if (v4 >= *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(result + 16) - 8) + 56))(a2, 1, 1);
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(result + 16);
    swift_bridgeObjectRetain();
    Array.subscript.getter();
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
    v6 = *(_QWORD *)(v2 + 16);
    v7 = __OFADD__(v6, 1);
    v8 = v6 + 1;
    if (!v7)
    {
      *(_QWORD *)(v2 + 16) = v8;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t ConversionBuffer.ConvertingIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - v8;
  v10 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyIterator.next()();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, v5);
    (*(void (**)(char *))(v2 + 8))(v13);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 0, 1);
  }
}

unsigned __int16 *closure #1 in MeshBuffer<A>.asUInt32.getter@<X0>(unsigned __int16 *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

float closure #1 in MeshBuffer<A>.asSIMD3.getter@<S0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;

  *(_QWORD *)&v2 = *(_QWORD *)a1;
  *((_QWORD *)&v2 + 1) = *(unsigned int *)(a1 + 8);
  *a2 = v2;
  return *(float *)&v2;
}

unint64_t static MeshBuffers.blendShapeOffsets(named:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  Swift::String v7;

  swift_bridgeObjectRetain_n();
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  result = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v7);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 17) = result == 8;
  return result;
}

__n128 MeshBufferDictionary.BufferEntry.init<A>(_:buffer:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char v16;
  __n128 result;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  v24 = a2[1];
  v25 = *a2;
  v22 = (__n128)a2[3];
  v23 = a2[2];
  v9 = *((_BYTE *)a2 + 64);
  v10 = *((_BYTE *)a2 + 65);
  v11 = *((_QWORD *)a2 + 9);
  v12 = *((_BYTE *)a2 + 80);
  v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24);
  v13(&v26, a3, a4);
  v20 = v27;
  v21 = v26;
  v18 = v29;
  v19 = v28;
  v13(&v26, a3, a4);
  v15 = v26;
  v14 = v27;
  if (one-time initialization token for triangleIndices != -1)
    swift_once();
  v16 = 2;
  if (v15 != static MeshBuffers.Identifier.triangleIndices || v14 != *(_QWORD *)algn_2551A1378)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      v16 = 2;
    else
      v16 = v12;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v21;
  *(_QWORD *)(a5 + 8) = v20;
  *(_BYTE *)(a5 + 16) = v19;
  *(_BYTE *)(a5 + 17) = v18;
  *(_QWORD *)(a5 + 24) = v11;
  *(_BYTE *)(a5 + 32) = v16;
  *(_BYTE *)(a5 + 33) = v9;
  *(_BYTE *)(a5 + 34) = v10;
  *(_OWORD *)(a5 + 40) = v25;
  *(_OWORD *)(a5 + 56) = v24;
  *(_OWORD *)(a5 + 72) = v23;
  result = v22;
  *(__n128 *)(a5 + 88) = v22;
  *(_BYTE *)(a5 + 104) = v9;
  *(_BYTE *)(a5 + 105) = v10;
  *(_QWORD *)(a5 + 112) = v11;
  *(_BYTE *)(a5 + 120) = v12;
  return result;
}

uint64_t MeshBufferDictionary.BufferEntry.asGPUData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 72))();
}

double MeshBufferDictionary.BufferEntry.get<A>()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned __int8 v37;
  char v38;
  uint64_t v39;
  char v40;

  v6 = *(unsigned __int8 *)(v5 + 33);
  if (v6 != 1)
  {
    if (v6 != 9)
      goto LABEL_12;
    if (*(_BYTE *)(v5 + 34) != 1)
      goto LABEL_12;
    v7 = a1;
    v31 = a2;
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    a2 = v31;
    v9 = v8 == v31;
    a1 = v7;
    if (!v9)
      goto LABEL_12;
    type metadata accessor for MeshBuffer(0, *(_QWORD *)(v7 + 16), a3, a4);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffer<FloatVector3Packed>);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = v33;
      *(_OWORD *)(v10 + 32) = v34;
      *(_OWORD *)(v10 + 48) = v35;
      *(_OWORD *)(v10 + 64) = v36;
      *(_BYTE *)(v10 + 80) = v37;
      *(_BYTE *)(v10 + 81) = v38;
      *(_QWORD *)(v10 + 88) = v39;
      *(_BYTE *)(v10 + 96) = v40;
      *(_QWORD *)(v10 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
      *(_QWORD *)(v10 + 112) = 0;
      v11 = (_QWORD *)swift_allocObject();
      v11[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
      v11[3] = v10;
      v11[4] = v39;
      v12 = (_QWORD *)swift_allocObject();
      v12[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
      v12[3] = v10;
      v12[4] = v39;
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
      v13[3] = v10;
      v13[4] = v39;
      v14 = (_QWORD *)swift_allocObject();
      v14[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
      v14[3] = v10;
      v14[4] = v39;
      swift_retain();
      swift_retain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffer<SIMD3<Float>>);
      type metadata accessor for MeshBuffer(0, v31, v15, v16);
      v17 = swift_dynamicCast();
      v18 = a5;
      if ((v17 & 1) != 0)
      {
        v19 = 256;
        if (!v38)
          v19 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      v18 = a5;
    }
    *(_BYTE *)(v18 + 80) = 0;
    result = 0.0;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)v18 = 0u;
    return result;
  }
  if (a2 == MEMORY[0x24BEE44F0])
  {
    type metadata accessor for MeshBuffer(0, *(_QWORD *)(a1 + 16), a3, a4);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffer<UInt16>);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_20;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v33;
    *(_OWORD *)(v24 + 32) = v34;
    *(_OWORD *)(v24 + 48) = v35;
    *(_OWORD *)(v24 + 64) = v36;
    *(_BYTE *)(v24 + 80) = v37;
    *(_BYTE *)(v24 + 81) = v38;
    *(_QWORD *)(v24 + 88) = v39;
    *(_BYTE *)(v24 + 96) = v40;
    *(_QWORD *)(v24 + 104) = closure #1 in MeshBuffer<A>.asUInt32.getter;
    *(_QWORD *)(v24 + 112) = 0;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
    v25[3] = v24;
    v25[4] = v39;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
    v26[3] = v24;
    v26[4] = v39;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
    v27[3] = v24;
    v27[4] = v39;
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
    v28[3] = v24;
    v28[4] = v39;
    swift_retain();
    swift_retain_n();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffer<UInt32>);
    type metadata accessor for MeshBuffer(0, MEMORY[0x24BEE44F0], v29, v30);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_20:
      *(_BYTE *)(a5 + 80) = 0;
      result = 0.0;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)a5 = 0u;
      return result;
    }
    v19 = 256;
    if (!v38)
      v19 = 0;
LABEL_10:
    result = *(double *)&v33;
    *(_OWORD *)a5 = v33;
    *(_OWORD *)(a5 + 16) = v34;
    *(_OWORD *)(a5 + 32) = v35;
    *(_OWORD *)(a5 + 48) = v36;
    *(_QWORD *)(a5 + 64) = v19 | v37;
    *(_QWORD *)(a5 + 72) = v39;
    *(_BYTE *)(a5 + 80) = v40;
    return result;
  }
LABEL_12:
  v21 = a2;
  type metadata accessor for MeshBuffer(0, *(_QWORD *)(a1 + 16), a3, a4);
  type metadata accessor for MeshBuffer(0, v21, v22, v23);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_BYTE *)(a5 + 80) = 0;
    result = 0.0;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

uint64_t protocol witness for MeshBufferErased.id.getter in conformance MeshBufferDictionary.BufferEntry<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 17);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void protocol witness for MeshBufferErased.rate.getter in conformance MeshBufferDictionary.BufferEntry<A>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

void protocol witness for MeshBufferErased.elementType.getter in conformance MeshBufferDictionary.BufferEntry<A>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

double protocol witness for MeshBufferErased.get<A>() in conformance MeshBufferDictionary.BufferEntry<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return MeshBufferDictionary.BufferEntry.get<A>()(a2, a1, a3, a4, a5);
}

double MeshBufferDictionary.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  __int16 v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  double result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17[2];
  unsigned __int8 v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 24))(v17, a2, a3);
  if (*(_QWORD *)(a1 + 16)
    && (!v19 ? (v6 = 0) : (v6 = 256),
        v7 = specialized __RawDictionaryStorage.find<A>(_:)(v17[0], v17[1], v6 | v18),
        (v8 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(a1 + 56) + 40 * v7, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v15 + 1))
    {
      outlined init with take of BindableDataInternal(&v14, (uint64_t)v20);
      v9 = v21;
      v10 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v11(AssociatedTypeWitness, v9, v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      return result;
    }
  }
  else
  {
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v14, &demangling cache variable for type metadata for MeshBufferErased?);
  *(_BYTE *)(a4 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  return result;
}

uint64_t MeshBufferDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  char v62;
  uint64_t v63[2];
  unsigned __int8 v64;
  char v65;
  uint64_t v66;
  _UNKNOWN **v67;
  _QWORD v68[2];
  unsigned __int8 v69;
  unsigned __int8 v70;

  v4 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)v5;
  if (*(_QWORD *)v5)
  {
    v39 = *(unsigned __int8 *)(v5 + 80);
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(_QWORD *)(v5 + 56);
    v52 = *(_QWORD *)(v5 + 64);
    v53 = v13;
    v51 = v4;
    v15 = *(_QWORD *)(v5 + 40);
    v45 = *(_QWORD *)(v5 + 48);
    v16 = v45;
    v37 = v15;
    v17 = *(_QWORD *)(v5 + 24);
    v44 = *(_QWORD *)(v5 + 32);
    v18 = v44;
    v50 = v3;
    v36 = v17;
    v19 = *(_QWORD *)(v5 + 8);
    v46 = *(_QWORD *)(v5 + 16);
    v20 = v46;
    v35 = v19;
    v40 = v11;
    v21 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128))(v8 + 24);
    v43 = v12;
    v22 = v6;
    v49 = v6;
    v23 = v7;
    v38 = v8;
    v21(v68, v7, v8, v9);
    v48 = v68[0];
    v47 = v68[1];
    v42 = v69;
    v41 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v11, v22, v23);
    *(_QWORD *)&v54 = v12;
    *((_QWORD *)&v54 + 1) = v35;
    *(_QWORD *)&v55 = v20;
    *((_QWORD *)&v55 + 1) = v36;
    v56 = v18;
    v57 = v37;
    v58 = v16;
    v59 = v14;
    v60 = v52 & 0x1FF;
    v61 = v53;
    v62 = v39;
    v24 = v38;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v66 = type metadata accessor for MeshBufferDictionary.BufferEntry(0, AssociatedTypeWitness, v26, v27);
    v67 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v28 = swift_allocObject();
    v29 = v28 + 16;
    v63[0] = v28;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    MeshBufferDictionary.BufferEntry.init<A>(_:buffer:)((uint64_t)v40, &v54, v23, v24, v29);
    if (v41)
      v30 = 256;
    else
      v30 = 0;
    specialized Dictionary.subscript.setter((uint64_t)v63, v48, v47, v30 | v42);
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v49, v23);
  }
  else
  {
    v32 = v6;
    v33 = v7;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(v8 + 24))(v63, v7, v8, v9);
    if (v65)
      v34 = 256;
    else
      v34 = 0;
    v56 = 0;
    v54 = 0u;
    v55 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v54, v63[0], v63[1], v34 | v64);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v32, v33);
  }
}

uint64_t AnyMeshBuffer.id.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t AnyMeshBuffer.count.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t AnyMeshBuffer.rate.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t AnyMeshBuffer.elementType.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t AnyMeshBuffer.get<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2[3];
  v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, v4, v5);
}

uint64_t specialized MeshBufferContainer.positions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;

  v3 = *(_QWORD *)(v1 + 16);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_5;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
  if ((v5 & 1) == 0)
    goto LABEL_5;
  outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v27);
  outlined init with take of BindableDataInternal((__int128 *)&v27, (uint64_t)&v19);
  v6 = *((_QWORD *)&v20 + 1);
  v7 = v21;
  __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
  v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v8(&v27, v9, v6, v7);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  if (v27)
  {
    v11 = v34;
    v12 = v33;
    v13 = v32;
    v14 = v31;
    *(_QWORD *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_OWORD *)(a1 + 40) = v30;
    v15 = (v13 >> 8) & 1;
    *(_QWORD *)(a1 + 56) = v14;
  }
  else
  {
LABEL_5:
    result = specialized MeshBuffer.init<A>(_:)(MEMORY[0x24BEE4AF8], (uint64_t)&v19);
    LOBYTE(v13) = v23;
    LOBYTE(v15) = v24;
    v12 = v25;
    v11 = v26;
    v16 = v20;
    v17 = v21;
    v18 = v22;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v18;
  }
  *(_BYTE *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 65) = v15;
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v11;
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;

  v3 = *v1;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_5;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
  if ((v5 & 1) == 0)
    goto LABEL_5;
  outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v27);
  outlined init with take of BindableDataInternal((__int128 *)&v27, (uint64_t)&v19);
  v6 = *((_QWORD *)&v20 + 1);
  v7 = v21;
  __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
  v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v8(&v27, v9, v6, v7);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  if (v27)
  {
    v11 = v34;
    v12 = v33;
    v13 = v32;
    v14 = v31;
    *(_QWORD *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_OWORD *)(a1 + 40) = v30;
    v15 = (v13 >> 8) & 1;
    *(_QWORD *)(a1 + 56) = v14;
  }
  else
  {
LABEL_5:
    result = specialized MeshBuffer.init<A>(_:)(MEMORY[0x24BEE4AF8], (uint64_t)&v19);
    LOBYTE(v13) = v23;
    LOBYTE(v15) = v24;
    v12 = v25;
    v11 = v26;
    v16 = v20;
    v17 = v21;
    v18 = v22;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v18;
  }
  *(_BYTE *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 65) = v15;
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v11;
  return result;
}

_QWORD *MeshBufferContainer.positions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *(*v6)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char v33;

  strcpy((char *)&v18, "vertexPosition");
  HIBYTE(v18) = -18;
  LOWORD(v19) = 0;
  v6 = *(_QWORD *(**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  v8 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(&lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  result = v6(&v26, &v18, v7, v8, a1, a2);
  if (v26)
  {
    v10 = v33;
    v11 = v32;
    v12 = v31;
    v13 = v30;
    *(_QWORD *)a3 = v26;
    *(_OWORD *)(a3 + 8) = v27;
    *(_OWORD *)(a3 + 24) = v28;
    *(_OWORD *)(a3 + 40) = v29;
    v14 = (v12 >> 8) & 1;
    *(_QWORD *)(a3 + 56) = v13;
  }
  else
  {
    result = (_QWORD *)specialized MeshBuffer.init<A>(_:)(MEMORY[0x24BEE4AF8], (uint64_t)&v18);
    LOBYTE(v12) = v22;
    LOBYTE(v14) = v23;
    v11 = v24;
    v10 = v25;
    v15 = v19;
    v16 = v20;
    v17 = v21;
    *(_OWORD *)a3 = v18;
    *(_OWORD *)(a3 + 16) = v15;
    *(_OWORD *)(a3 + 32) = v16;
    *(_OWORD *)(a3 + 48) = v17;
  }
  *(_BYTE *)(a3 + 64) = v12;
  *(_BYTE *)(a3 + 65) = v14;
  *(_QWORD *)(a3 + 72) = v11;
  *(_BYTE *)(a3 + 80) = v10;
  return result;
}

double key path getter for MeshBufferContainer.positions : <A>A@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;

  MeshBufferContainer.positions.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), (uint64_t)v11);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v11[1];
  *(_OWORD *)a3 = v11[0];
  *(_OWORD *)(a3 + 16) = v8;
  result = *(double *)&v12;
  v10 = v13;
  *(_OWORD *)(a3 + 32) = v12;
  *(_OWORD *)(a3 + 48) = v10;
  *(_BYTE *)(a3 + 64) = v4;
  *(_BYTE *)(a3 + 65) = v5;
  *(_QWORD *)(a3 + 72) = v6;
  *(_BYTE *)(a3 + 80) = v7;
  return result;
}

uint64_t key path setter for MeshBufferContainer.positions : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = a1[7];
  v7 = *((_BYTE *)a1 + 64);
  v8 = *((_BYTE *)a1 + 65);
  v9 = a1[9];
  v10 = *((_BYTE *)a1 + 80);
  v13 = *a1;
  v12 = *(_OWORD *)(a1 + 3);
  v14 = *(_OWORD *)(a1 + 1);
  v15 = v12;
  v16 = *(_OWORD *)(a1 + 5);
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return MeshBufferContainer.positions.setter((uint64_t)&v13, v4, v5);
}

uint64_t MeshBufferContainer.positions.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t (*v11)(_OWORD *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char v15[16];
  __int16 v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  char v20;

  v5 = *(unsigned __int8 *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_BYTE *)(a1 + 80);
  v8 = 256;
  if (!*(_BYTE *)(a1 + 65))
    v8 = 0;
  v9 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v17[2] = *(_OWORD *)(a1 + 32);
  v17[3] = v10;
  v18 = v8 | v5;
  v19 = v6;
  v20 = v7;
  strcpy(v15, "vertexPosition");
  v15[15] = -18;
  v16 = 0;
  v11 = *(uint64_t (**)(_OWORD *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  v13 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(&lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  return v11(v17, v15, v12, v13, a2, a3);
}

void (*MeshBufferContainer.positions.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.positions.getter(a2, a3, (uint64_t)v7);
  return MeshBufferContainer.positions.modify;
}

void MeshBufferContainer.positions.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  char v18;
  char v19;
  uint64_t v20;
  char v21;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v11 = *((_BYTE *)v2 + 64);
  v12 = *((_BYTE *)v2 + 65);
  v13 = v2[9];
  v14 = *((_BYTE *)v2 + 80);
  v15 = v2[12];
  v16 = v2[11];
  v17[0] = v4;
  v17[1] = v3;
  v17[2] = v5;
  v17[3] = v6;
  v17[4] = v7;
  v17[5] = v8;
  v17[6] = v9;
  v17[7] = v10;
  v18 = v11;
  v19 = v12;
  v20 = v13;
  v21 = v14;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    MeshBufferContainer.positions.setter((uint64_t)v17, v16, v15);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    MeshBufferContainer.positions.setter((uint64_t)v17, v16, v15);
  }
  free(v2);
}

uint64_t MeshBufferContainer.normals.getter(uint64_t a1, uint64_t a2)
{
  return MeshBufferContainer.normals.getter(a1, a2, 0x6F4E786574726576, 0xEC0000006C616D72, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

uint64_t MeshBufferContainer.normals.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MeshBufferContainer.normals.setter(a1, a2, a3, 0x6F4E786574726576, 0xEC0000006C616D72, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

void (*MeshBufferContainer.normals.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.normals.getter(a2, a3);
  return MeshBufferContainer.normals.modify;
}

void MeshBufferContainer.normals.modify(uint64_t **a1, char a2)
{
  MeshBufferContainer.normals.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))MeshBufferContainer.normals.setter);
}

uint64_t MeshBufferContainer.tangents.getter(uint64_t a1, uint64_t a2)
{
  return MeshBufferContainer.normals.getter(a1, a2, 0x6154786574726576, 0xED0000746E65676ELL, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

uint64_t MeshBufferContainer.normals.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t *a6)
{
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  __int16 v15;

  v14[0] = a3;
  v14[1] = a4;
  v15 = 0;
  v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
  v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v12 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(a6, a5);
  return v10(v14, v11, v12, a1, a2);
}

uint64_t MeshBufferContainer.tangents.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MeshBufferContainer.normals.setter(a1, a2, a3, 0x6154786574726576, 0xED0000746E65676ELL, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

uint64_t MeshBufferContainer.normals.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unint64_t *a7)
{
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t (*v14)(_OWORD *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  __int16 v19;
  _OWORD v20[5];
  char v21;

  v11 = *(_BYTE *)(a1 + 80);
  v12 = *(_OWORD *)(a1 + 16);
  v20[0] = *(_OWORD *)a1;
  v20[1] = v12;
  v13 = *(_OWORD *)(a1 + 48);
  v20[2] = *(_OWORD *)(a1 + 32);
  v20[3] = v13;
  v20[4] = *(_OWORD *)(a1 + 64);
  v21 = v11;
  v18[0] = a4;
  v18[1] = a5;
  v19 = 0;
  v14 = *(uint64_t (**)(_OWORD *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24);
  v15 = __swift_instantiateConcreteTypeFromMangledName(a6);
  v16 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(a7, a6);
  return v14(v20, v18, v15, v16, a2, a3);
}

void (*MeshBufferContainer.tangents.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.tangents.getter(a2, a3);
  return MeshBufferContainer.tangents.modify;
}

void MeshBufferContainer.tangents.modify(uint64_t **a1, char a2)
{
  MeshBufferContainer.normals.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))MeshBufferContainer.tangents.setter);
}

uint64_t MeshBufferContainer.bitangents.getter(uint64_t a1, uint64_t a2)
{
  return MeshBufferContainer.normals.getter(a1, a2, 0x6942786574726576, 0xEF746E65676E6174, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

uint64_t MeshBufferContainer.bitangents.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MeshBufferContainer.normals.setter(a1, a2, a3, 0x6942786574726576, 0xEF746E65676E6174, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

void (*MeshBufferContainer.bitangents.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.bitangents.getter(a2, a3);
  return MeshBufferContainer.bitangents.modify;
}

void MeshBufferContainer.bitangents.modify(uint64_t **a1, char a2)
{
  MeshBufferContainer.normals.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))MeshBufferContainer.bitangents.setter);
}

uint64_t MeshBufferContainer.textureCoordinates.getter(uint64_t a1, uint64_t a2)
{
  return MeshBufferContainer.normals.getter(a1, a2, 0x5655786574726576, 0xE800000000000000, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD2<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD2<Float>> and conformance MeshBuffers.Semantic<A>);
}

double key path getter for MeshBufferContainer.normals : <A>A@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(_OWORD *__return_ptr, _QWORD, _QWORD)@<X3>, uint64_t a4@<X8>)
{
  char v5;
  __int128 v6;
  __int128 v7;
  double result;
  _OWORD v9[4];
  __int128 v10;
  char v11;

  a3(v9, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  v5 = v11;
  v6 = v9[1];
  *(_OWORD *)a4 = v9[0];
  *(_OWORD *)(a4 + 16) = v6;
  v7 = v9[3];
  *(_OWORD *)(a4 + 32) = v9[2];
  *(_OWORD *)(a4 + 48) = v7;
  result = *(double *)&v10;
  *(_OWORD *)(a4 + 64) = v10;
  *(_BYTE *)(a4 + 80) = v5;
  return result;
}

uint64_t key path setter for MeshBufferContainer.normals : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19[10];
  char v20;

  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_BYTE *)(a1 + 80);
  v19[0] = *(_QWORD *)a1;
  v19[1] = v8;
  v19[2] = v9;
  v19[3] = v10;
  v19[4] = v11;
  v19[5] = v12;
  v19[6] = v13;
  v19[7] = v14;
  v19[8] = v15;
  v19[9] = v16;
  v20 = v17;
  outlined copy of MeshBuffer<SIMD3<Float>>?(v19[0]);
  return a5(v19, v6, v7);
}

uint64_t MeshBufferContainer.textureCoordinates.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MeshBufferContainer.normals.setter(a1, a2, a3, 0x5655786574726576, 0xE800000000000000, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD2<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD2<Float>> and conformance MeshBuffers.Semantic<A>);
}

void (*MeshBufferContainer.textureCoordinates.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.textureCoordinates.getter(a2, a3);
  return MeshBufferContainer.textureCoordinates.modify;
}

void MeshBufferContainer.textureCoordinates.modify(uint64_t **a1, char a2)
{
  MeshBufferContainer.normals.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))MeshBufferContainer.textureCoordinates.setter);
}

void MeshBufferContainer.normals.modify(uint64_t **a1, char a2, void (*a3)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[10];
  char v20;

  v5 = *a1;
  v6 = **a1;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v10 = v5[4];
  v11 = v5[5];
  v12 = v5[6];
  v13 = v5[7];
  v14 = v5[8];
  v15 = v5[9];
  v16 = *((_BYTE *)v5 + 80);
  v17 = v5[12];
  v18 = v5[11];
  v19[0] = v6;
  v19[1] = v7;
  v19[2] = v8;
  v19[3] = v9;
  v19[4] = v10;
  v19[5] = v11;
  v19[6] = v12;
  v19[7] = v13;
  v19[8] = v14;
  v19[9] = v15;
  v20 = v16;
  if ((a2 & 1) != 0)
  {
    outlined copy of MeshBuffer<SIMD3<Float>>?(v6);
    a3(v19, v18, v17);
    outlined consume of MeshBuffer<SIMD3<Float>>?(*v5);
  }
  else
  {
    a3(v19, v18, v17);
  }
  free(v5);
}

uint64_t MeshBufferContainer.blendShapeOffsets(named:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  BOOL v14;
  Swift::String v15;

  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = a1;
  v15._object = a2;
  v12[0] = a1;
  v12[1] = a2;
  v13 = 0;
  v14 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v15) == 8;
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  v10 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(&lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  return v8(v12, v9, v10, a3, a4);
}

uint64_t MeshBufferContainer.setBlendShapeOffsets(named:buffer:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t (*v15)(_QWORD *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[2];
  char v25;
  BOOL v26;
  _QWORD v27[10];
  char v28;
  Swift::String v29;

  v7 = *(_QWORD *)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(a3 + 32);
  v21 = *(_QWORD *)(a3 + 40);
  v12 = *(_QWORD *)(a3 + 64);
  v19 = *(_QWORD *)(a3 + 56);
  v20 = *(_QWORD *)(a3 + 48);
  v13 = *(_QWORD *)(a3 + 72);
  v14 = *(_BYTE *)(a3 + 80);
  swift_bridgeObjectRetain_n();
  v29._countAndFlagsBits = a1;
  v29._object = a2;
  v27[0] = v7;
  v27[1] = v8;
  v27[2] = v9;
  v27[3] = v10;
  v27[4] = v11;
  v27[5] = v21;
  v27[6] = v20;
  v27[7] = v19;
  v27[8] = v12;
  v27[9] = v13;
  v28 = v14;
  v24[0] = a1;
  v24[1] = a2;
  v25 = 0;
  v26 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v29) == 8;
  v15 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24);
  outlined copy of MeshBuffer<SIMD3<Float>>?(v7);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  v17 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(&lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  return v15(v27, v24, v16, v17, a4, a5);
}

uint64_t MeshBufferContainer.blendShapeNames.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  result = (*(uint64_t (**)(void))(a2 + 8))();
  v3 = result;
  v4 = 0;
  v5 = *(_QWORD *)(result + 64);
  v44 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v9 = (unint64_t)(v6 + 63) >> 6;
  v42 = v9 - 5;
  v40 = v9 - 1;
  v41 = result + 104;
  v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v45 = v9;
  if ((v7 & v5) == 0)
    goto LABEL_8;
LABEL_6:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v11 = v10 | (v4 << 6);
LABEL_7:
  v12 = *(_QWORD *)(v3 + 56);
  v13 = *(_QWORD *)(v3 + 48) + 24 * v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_BYTE *)(v13 + 16);
  LOBYTE(v13) = *(_BYTE *)(v13 + 17);
  *(_QWORD *)&v47 = v14;
  *((_QWORD *)&v47 + 1) = v15;
  LOBYTE(v48) = v16;
  BYTE1(v48) = v13;
  outlined init with copy of AnyMeshBuffer(v12 + 40 * v11, (uint64_t)&v48 + 8);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of Transform?((uint64_t)&v47, (uint64_t)&v51, &demangling cache variable for type metadata for (key: MeshBuffers.Identifier, value: AnyMeshBuffer)?);
    v20 = v52;
    if (!v52)
    {
      swift_release();
      return (uint64_t)v43;
    }
    v21 = v51;
    v47 = v54;
    v48 = v55;
    *(_QWORD *)&v49 = v56;
    if ((v53 & 1) == 0)
    {
      outlined destroy of AnyMeshBuffer((uint64_t)&v47);
      result = swift_bridgeObjectRelease();
      if (v8)
        goto LABEL_6;
      goto LABEL_8;
    }
    v22 = *((_QWORD *)&v48 + 1);
    v23 = v49;
    __swift_project_boxed_opaque_existential_1(&v47, *((uint64_t *)&v48 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 24))(&v46, v22, v23);
    if ((_BYTE)v46)
    {
      type metadata accessor for OS_os_log();
      swift_bridgeObjectRetain();
      v24 = static OS_os_log.default.getter();
      v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v27 = swift_slowAlloc();
        v46 = v27;
        *(_DWORD *)v26 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v46);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_21B9AA000, v24, v25, "Skipping non-vertex rate blendShape attribute '%s'", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v27, -1, -1);
        v28 = v26;
        v9 = v45;
LABEL_22:
        MEMORY[0x220772F44](v28, -1, -1);

        goto LABEL_24;
      }
LABEL_23:

      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
    v29 = *((_QWORD *)&v48 + 1);
    v30 = v49;
    __swift_project_boxed_opaque_existential_1(&v47, *((uint64_t *)&v48 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 32))(&v46, v29, v30);
    MeshBuffers.ElementType.genericAttributeDescriptor.getter();
    v32 = v31;
    swift_release();
    if (!v32)
    {
      type metadata accessor for OS_os_log();
      swift_bridgeObjectRetain();
      v24 = static OS_os_log.default.getter();
      v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v33))
      {
        v34 = swift_slowAlloc();
        v35 = swift_slowAlloc();
        v46 = v35;
        *(_DWORD *)v34 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v34 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v46);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_21B9AA000, v24, v33, "Skipping unknown element type '%s'", (uint8_t *)v34, 0xCu);
        swift_arrayDestroy();
        v36 = v35;
        v9 = v45;
        MEMORY[0x220772F44](v36, -1, -1);
        v28 = v34;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    v38 = v43[2];
    v37 = v43[3];
    if (v38 >= v37 >> 1)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v43);
    v43[2] = v38 + 1;
    v39 = &v43[2 * v38];
    v39[4] = v21;
    v39[5] = v20;
LABEL_24:
    result = outlined destroy of AnyMeshBuffer((uint64_t)&v47);
    if (v8)
      goto LABEL_6;
LABEL_8:
    v17 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v17 >= v9)
    {
      v19 = v4;
    }
    else
    {
      v18 = *(_QWORD *)(v44 + 8 * v17);
      if (v18)
        goto LABEL_11;
      v19 = v4 + 1;
      if (v4 + 2 < v9)
      {
        v18 = *(_QWORD *)(v44 + 8 * (v4 + 2));
        if (v18)
        {
          v17 = v4 + 2;
LABEL_11:
          v8 = (v18 - 1) & v18;
          v11 = __clz(__rbit64(v18)) + (v17 << 6);
          v4 = v17;
          goto LABEL_7;
        }
        v19 = v4 + 2;
        if (v4 + 3 < v9)
        {
          v18 = *(_QWORD *)(v44 + 8 * (v4 + 3));
          if (v18)
          {
            v17 = v4 + 3;
            goto LABEL_11;
          }
          v17 = v4 + 4;
          v19 = v4 + 3;
          if (v4 + 4 < v9)
          {
            v18 = *(_QWORD *)(v44 + 8 * v17);
            if (v18)
              goto LABEL_11;
            while (v42 != v4)
            {
              v18 = *(_QWORD *)(v41 + 8 * v4++);
              if (v18)
              {
                v17 = v4 + 4;
                goto LABEL_11;
              }
            }
            v19 = v40;
          }
        }
      }
    }
    v8 = 0;
    v49 = 0u;
    v50 = 0u;
    v4 = v19;
    v47 = 0u;
    v48 = 0u;
  }
  __break(1u);
  return result;
}

RealityFoundation::MeshSkeleton __swiftcall MeshSkeleton.init(name:inverseBindPoses:jointPaths:)(Swift::String name, Swift::OpaquePointer inverseBindPoses, Swift::OpaquePointer jointPaths)
{
  uint64_t v3;
  RealityFoundation::MeshSkeleton result;

  *(Swift::String *)v3 = name;
  *(Swift::OpaquePointer *)(v3 + 16) = inverseBindPoses;
  *(Swift::OpaquePointer *)(v3 + 24) = jointPaths;
  result.name = name;
  result.jointPaths = jointPaths;
  result.inverseBindPoses = inverseBindPoses;
  return result;
}

uint64_t MeshSkeleton.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshSkeleton.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshSkeleton.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshSkeleton.inverseBindPoses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshSkeleton.inverseBindPoses.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MeshSkeleton.inverseBindPoses.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshSkeleton.jointPaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshSkeleton.jointPaths.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MeshSkeleton.jointPaths.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::OpaquePointer __swiftcall MeshSkeleton.makeSkeletonDef()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::OpaquePointer result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = RESkeletonDefinitionCreate();
  String.utf8CString.getter();
  RESkeletonDefinitionSetName();
  swift_release();
  v4 = *(_QWORD *)(v2 + 16);
  if (HIDWORD(v4))
    goto LABEL_10;
  RESkeletonDefinitionSetJointCount();
  if (v4)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      v5 = 0;
      v6 = v2 + 40;
      while (1)
      {
        String.utf8CString.getter();
        RESkeletonDefinitionSetJointName();
        swift_release();
        if (v4 - 1 == v5)
          break;
        v6 += 16;
        if ((unint64_t)++v5 >= *(_QWORD *)(v2 + 16))
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      __break(1u);
    }
  }
  if (HIDWORD(*(_QWORD *)(v1 + 16)))
  {
LABEL_10:
    result._rawValue = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    RESkeletonDefinitionSetInverseBindPoses();
    return (Swift::OpaquePointer)v3;
  }
  return result;
}

double MeshDescriptor.init(name:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  double result;

  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = -1;
  result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 96) = 0;
  return result;
}

uint64_t MeshDescriptor.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshDescriptor.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshDescriptor.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.materials.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of MeshDescriptor.Materials(v2, v3);
}

uint64_t MeshDescriptor.materials.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = outlined consume of MeshDescriptor.Materials(*(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  *(_QWORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 32) = v3;
  return result;
}

uint64_t (*MeshDescriptor.materials.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.primitives.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 56);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of MeshDescriptor.Primitives?(v2, v3, v4);
}

uint64_t MeshDescriptor.primitives.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of MeshDescriptor.Primitives?(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 56) = v4;
  return result;
}

uint64_t (*MeshDescriptor.primitives.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.buffers.getter()
{
  uint64_t v0;

  return specialized _NativeDictionary.mapValues<A>(_:)(*(_QWORD *)(v0 + 16));
}

double MeshDescriptor.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return MeshBufferDictionary.subscript.getter(*(_QWORD *)(v3 + 16), a1, a2, a3);
}

double key path getter for MeshDescriptor.subscript<A>(_:) : <A>MeshDescriptorA@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v4;
  __int128 v5;
  __int128 v6;
  double result;
  _OWORD v8[4];
  __int128 v9;
  char v10;

  MeshDescriptor.subscript.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), (uint64_t)v8);
  v4 = v10;
  v5 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v5;
  v6 = v8[3];
  *(_OWORD *)(a3 + 32) = v8[2];
  *(_OWORD *)(a3 + 48) = v6;
  result = *(double *)&v9;
  *(_OWORD *)(a3 + 64) = v9;
  *(_BYTE *)(a3 + 80) = v4;
  return result;
}

uint64_t key path setter for MeshDescriptor.subscript<A>(_:) : <A>MeshDescriptorA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17[10];
  char v18;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 80);
  v17[0] = *(_QWORD *)a1;
  v17[1] = v6;
  v17[2] = v7;
  v17[3] = v8;
  v17[4] = v9;
  v17[5] = v10;
  v17[6] = v11;
  v17[7] = v12;
  v17[8] = v13;
  v17[9] = v14;
  v18 = v15;
  outlined copy of MeshBuffer<SIMD3<Float>>?(v17[0]);
  return specialized MeshDescriptor.subscript.setter((uint64_t)v17, a3, v5);
}

uint64_t MeshDescriptor.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized MeshDescriptor.subscript.setter(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

void (*MeshDescriptor.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = malloc(0x80uLL);
  *a1 = v8;
  v8[11] = a3;
  v8[12] = a4;
  v9 = *(_QWORD *)(a3 - 8);
  v8[13] = v4;
  v8[14] = v9;
  v8[15] = malloc(*(_QWORD *)(v9 + 64));
  (*(void (**)(void))(v9 + 16))();
  MeshBufferDictionary.subscript.getter(*(_QWORD *)(v4 + 16), a3, a4, (uint64_t)v8);
  return MeshDescriptor.subscript.modify;
}

void MeshDescriptor.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[10];
  char v19;

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  v11 = v3[7];
  v12 = v3[8];
  v13 = v3[9];
  v14 = *((_BYTE *)v3 + 80);
  v16 = v3[14];
  v15 = (void *)v3[15];
  v17 = v3[11];
  v18[0] = v4;
  v18[1] = v5;
  v18[2] = v6;
  v18[3] = v7;
  v18[4] = v8;
  v18[5] = v9;
  v18[6] = v10;
  v18[7] = v11;
  v18[8] = v12;
  v18[9] = v13;
  v19 = v14;
  if ((a2 & 1) != 0)
  {
    outlined copy of MeshBuffer<SIMD3<Float>>?(v4);
    specialized MeshDescriptor.subscript.setter((uint64_t)v18, (uint64_t)v15, v17);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v15, v17);
    outlined consume of MeshBuffer<SIMD3<Float>>?(*v3);
  }
  else
  {
    specialized MeshDescriptor.subscript.setter((uint64_t)v18, (uint64_t)v15, v17);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v15, v17);
  }
  free(v15);
  free(v3);
}

uint64_t MeshDescriptor.skinning.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  v5 = v1[11];
  v6 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return outlined copy of MeshDescriptor.Skinning?(v2, v3);
}

__n128 MeshDescriptor.skinning.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;
  __n128 v5;

  v4 = a1[1];
  v5 = *a1;
  v2 = a1[2].n128_u64[0];
  outlined consume of StateMachineGraph?(v1[4].n128_i64[0], v1[4].n128_i64[1]);
  result = v4;
  v1[4] = v5;
  v1[5] = v4;
  v1[6].n128_u64[0] = v2;
  return result;
}

uint64_t (*MeshDescriptor.skinning.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for MeshBufferContainer.buffers.getter in conformance MeshDescriptor()
{
  uint64_t v0;

  return specialized _NativeDictionary.mapValues<A>(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t protocol witness for MeshBufferContainer.subscript.setter in conformance MeshDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized MeshDescriptor.subscript.setter(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

void (*protocol witness for MeshBufferContainer.subscript.modify in conformance MeshDescriptor(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MeshDescriptor.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t MeshDescriptor.Skinning.skeletonName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshDescriptor.Skinning.skeletonName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshDescriptor.Skinning.skeletonName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.Skinning.jointIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshDescriptor.Skinning.jointIndices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MeshDescriptor.Skinning.jointIndices.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.Skinning.weights.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshDescriptor.Skinning.weights.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MeshDescriptor.Skinning.weights.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.Skinning.influencesPerVertex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MeshDescriptor.Skinning.influencesPerVertex.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*MeshDescriptor.Skinning.influencesPerVertex.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.Skinning.init(skeletonName:jointIndices:weights:influencesPerVertex:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD, uint64_t (*)(), uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (v15 = v73) != 0))
  {
    v16 = *((_QWORD *)&v73 + 1);
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v20 = v77;
    v55 = v78;
    v21 = v80;
    v56 = v79;
    v54 = v81;
    v22 = v82;
    v57 = (v80 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v55;
    *(_QWORD *)(v23 + 72) = v56;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v57;
    *(_QWORD *)(v23 + 88) = v54;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v63 + 1) = v23;
    v64 = v54;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    v58 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(_QWORD *)(v24 + 32) = v64;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v54;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v54;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v54;
    *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v73 + 1) = v24;
    v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v75 = v25;
    v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v77 = v26;
    v78 = thunk for @callee_guaranteed () -> ()partial apply;
    v79 = v27;
    LOWORD(v80) = 9;
    v81 = v54;
    v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v58);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v63;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      goto LABEL_13;
    }
    v50 = a1[3];
    v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
    {
      v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v52 + 32, v60, v54, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x24BEE4260], v32, v33);
    v35 = v73;
    if ((_QWORD)v73)
    {
      v36 = ((uint64_t (*)(_QWORD *))v74)(v34);
      if (v36)
      {
        v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(_QWORD *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    v40 = a1[3];
    v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x24BEE4260], v40, v41);
    v43 = v63;
    if (!(_QWORD)v63)
    {
LABEL_13:
      v39 = 0;
      return v39 & 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    v81 = v71;
    v82 = v72;
    v44 = ((uint64_t (*)(_QWORD *))v63)(v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    v46 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    v48 = *(_QWORD *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (v15 = v73) != 0))
  {
    v16 = *((_QWORD *)&v73 + 1);
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v20 = v77;
    v55 = v78;
    v21 = v80;
    v56 = v79;
    v54 = v81;
    v22 = v82;
    v57 = (v80 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v55;
    *(_QWORD *)(v23 + 72) = v56;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v57;
    *(_QWORD *)(v23 + 88) = v54;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v63 + 1) = v23;
    v64 = v54;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    v58 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(_QWORD *)(v24 + 32) = v64;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v54;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v54;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v54;
    *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v73 + 1) = v24;
    v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v75 = v25;
    v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v77 = v26;
    v78 = thunk for @callee_guaranteed () -> ()partial apply;
    v79 = v27;
    LOWORD(v80) = 9;
    v81 = v54;
    v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v58);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v63;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      goto LABEL_13;
    }
    v50 = a1[3];
    v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
    {
      v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v52 + 32, v60, v54, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x24BEE4478], v32, v33);
    v35 = v73;
    if ((_QWORD)v73)
    {
      v36 = ((uint64_t (*)(_QWORD *))v74)(v34);
      if (v36)
      {
        v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(_QWORD *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    v40 = a1[3];
    v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x24BEE4478], v40, v41);
    v43 = v63;
    if (!(_QWORD)v63)
    {
LABEL_13:
      v39 = 0;
      return v39 & 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    v81 = v71;
    v82 = v72;
    v44 = ((uint64_t (*)(_QWORD *))v63)(v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    v46 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    v48 = *(_QWORD *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (v15 = v73) != 0))
  {
    v16 = *((_QWORD *)&v73 + 1);
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v20 = v77;
    v55 = v78;
    v21 = v80;
    v56 = v79;
    v54 = v81;
    v22 = v82;
    v57 = (v80 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v55;
    *(_QWORD *)(v23 + 72) = v56;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v57;
    *(_QWORD *)(v23 + 88) = v54;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v63 + 1) = v23;
    v64 = v54;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    v58 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(_QWORD *)(v24 + 32) = v64;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v54;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v54;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v54;
    *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v73 + 1) = v24;
    v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v75 = v25;
    v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v77 = v26;
    v78 = thunk for @callee_guaranteed () -> ()partial apply;
    v79 = v27;
    LOWORD(v80) = 9;
    v81 = v54;
    v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v58);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v63;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      goto LABEL_13;
    }
    v50 = a1[3];
    v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
    {
      v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v52 + 32, v60, v54, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x24BEE44F0], v32, v33);
    v35 = v73;
    if ((_QWORD)v73)
    {
      v36 = ((uint64_t (*)(_QWORD *))v74)(v34);
      if (v36)
      {
        v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(_QWORD *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    v40 = a1[3];
    v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x24BEE44F0], v40, v41);
    v43 = v63;
    if (!(_QWORD)v63)
    {
LABEL_13:
      v39 = 0;
      return v39 & 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    v81 = v71;
    v82 = v72;
    v44 = ((uint64_t (*)(_QWORD *))v63)(v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    v46 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    v48 = *(_QWORD *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (v15 = v73) != 0))
  {
    v16 = *((_QWORD *)&v73 + 1);
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v20 = v77;
    v55 = v78;
    v21 = v80;
    v56 = v79;
    v54 = v81;
    v22 = v82;
    v57 = (v80 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v55;
    *(_QWORD *)(v23 + 72) = v56;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v57;
    *(_QWORD *)(v23 + 88) = v54;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v63 + 1) = v23;
    v64 = v54;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    v58 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(_QWORD *)(v24 + 32) = v64;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v54;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v54;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v54;
    *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v73 + 1) = v24;
    v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v75 = v25;
    v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v77 = v26;
    v78 = thunk for @callee_guaranteed () -> ()partial apply;
    v79 = v27;
    LOWORD(v80) = 9;
    v81 = v54;
    v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v58);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v63;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      goto LABEL_13;
    }
    v50 = a1[3];
    v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
    {
      v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v52 + 32, v60, v54, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x24BEE3E50], v32, v33);
    v35 = v73;
    if ((_QWORD)v73)
    {
      v36 = ((uint64_t (*)(_QWORD *))v74)(v34);
      if (v36)
      {
        v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(_QWORD *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    v40 = a1[3];
    v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x24BEE3E50], v40, v41);
    v43 = v63;
    if (!(_QWORD)v63)
    {
LABEL_13:
      v39 = 0;
      return v39 & 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    v81 = v71;
    v82 = v72;
    v44 = ((uint64_t (*)(_QWORD *))v63)(v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    v46 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    v48 = *(_QWORD *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (v15 = v73) != 0))
  {
    v16 = *((_QWORD *)&v73 + 1);
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v20 = v77;
    v55 = v78;
    v21 = v80;
    v56 = v79;
    v54 = v81;
    v22 = v82;
    v57 = (v80 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v55;
    *(_QWORD *)(v23 + 72) = v56;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v57;
    *(_QWORD *)(v23 + 88) = v54;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v63 + 1) = v23;
    v64 = v54;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    v58 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(_QWORD *)(v24 + 32) = v64;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v54;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v54;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v54;
    *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v73 + 1) = v24;
    v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v75 = v25;
    v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v77 = v26;
    v78 = thunk for @callee_guaranteed () -> ()partial apply;
    v79 = v27;
    LOWORD(v80) = 9;
    v81 = v54;
    v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v58);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v63;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      goto LABEL_13;
    }
    v50 = a1[3];
    v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
    {
      v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v52 + 32, v60, v54, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x24BEE3F30], v32, v33);
    v35 = v73;
    if ((_QWORD)v73)
    {
      v36 = ((uint64_t (*)(_QWORD *))v74)(v34);
      if (v36)
      {
        v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(_QWORD *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    v40 = a1[3];
    v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x24BEE3F30], v40, v41);
    v43 = v63;
    if (!(_QWORD)v63)
    {
LABEL_13:
      v39 = 0;
      return v39 & 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    v81 = v71;
    v82 = v72;
    v44 = ((uint64_t (*)(_QWORD *))v63)(v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    v46 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    v48 = *(_QWORD *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (v15 = v73) != 0))
  {
    v16 = *((_QWORD *)&v73 + 1);
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v20 = v77;
    v55 = v78;
    v21 = v80;
    v56 = v79;
    v54 = v81;
    v22 = v82;
    v57 = (v80 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v55;
    *(_QWORD *)(v23 + 72) = v56;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v57;
    *(_QWORD *)(v23 + 88) = v54;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v63 + 1) = v23;
    v64 = v54;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    v58 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(_QWORD *)(v24 + 32) = v64;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v54;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v54;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v54;
    *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v73 + 1) = v24;
    v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v75 = v25;
    v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v77 = v26;
    v78 = thunk for @callee_guaranteed () -> ()partial apply;
    v79 = v27;
    LOWORD(v80) = 9;
    v81 = v54;
    v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v58);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v63;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      goto LABEL_13;
    }
    v50 = a1[3];
    v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
    {
      v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v52 + 32, v60, v54, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x24BEE3F88], v32, v33);
    v35 = v73;
    if ((_QWORD)v73)
    {
      v36 = ((uint64_t (*)(_QWORD *))v74)(v34);
      if (v36)
      {
        v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(_QWORD *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    v40 = a1[3];
    v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x24BEE3F88], v40, v41);
    v43 = v63;
    if (!(_QWORD)v63)
    {
LABEL_13:
      v39 = 0;
      return v39 & 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    v81 = v71;
    v82 = v72;
    v44 = ((uint64_t (*)(_QWORD *))v63)(v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    v46 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    v48 = *(_QWORD *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (v15 = v73) != 0))
  {
    v16 = *((_QWORD *)&v73 + 1);
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v20 = v77;
    v55 = v78;
    v21 = v80;
    v56 = v79;
    v54 = v81;
    v22 = v82;
    v57 = (v80 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v55;
    *(_QWORD *)(v23 + 72) = v56;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v57;
    *(_QWORD *)(v23 + 88) = v54;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v63 + 1) = v23;
    v64 = v54;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    v58 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(_QWORD *)(v24 + 32) = v64;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v54;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v54;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v54;
    *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v73 + 1) = v24;
    v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v75 = v25;
    v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v77 = v26;
    v78 = thunk for @callee_guaranteed () -> ()partial apply;
    v79 = v27;
    LOWORD(v80) = 9;
    v81 = v54;
    v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v58);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v63;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      goto LABEL_13;
    }
    v50 = a1[3];
    v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
    {
      v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v52 + 32, v60, v54, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x24BEE14E8], v32, v33);
    v35 = v73;
    if ((_QWORD)v73)
    {
      v36 = ((uint64_t (*)(_QWORD *))v74)(v34);
      if (v36)
      {
        v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(_QWORD *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    v40 = a1[3];
    v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x24BEE14E8], v40, v41);
    v43 = v63;
    if (!(_QWORD)v63)
    {
LABEL_13:
      v39 = 0;
      return v39 & 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    v81 = v71;
    v82 = v72;
    v44 = ((uint64_t (*)(_QWORD *))v63)(v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    v46 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    v48 = *(_QWORD *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  uint64_t (*v55)();
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (v15 = v73) != 0))
  {
    v16 = *((_QWORD *)&v73 + 1);
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v20 = v77;
    v55 = v78;
    v21 = v80;
    v56 = v79;
    v54 = v81;
    v22 = v82;
    v57 = (v80 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v55;
    *(_QWORD *)(v23 + 72) = v56;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v57;
    *(_QWORD *)(v23 + 88) = v54;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v63 + 1) = v23;
    v64 = v54;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    v58 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(_QWORD *)(v24 + 32) = v64;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v54;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v54;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v54;
    *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v73 + 1) = v24;
    v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v75 = v25;
    v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v77 = v26;
    v78 = thunk for @callee_guaranteed () -> ()partial apply;
    v79 = v27;
    LOWORD(v80) = 9;
    v81 = v54;
    v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v58);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v63;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      goto LABEL_13;
    }
    v50 = a1[3];
    v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
    {
      v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v52 + 32, v60, v54, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v58);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x24BEE13C8], v32, v33);
    v35 = v73;
    if ((_QWORD)v73)
    {
      v36 = ((uint64_t (*)(_QWORD *))v74)(v34);
      if (v36)
      {
        v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(_QWORD *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    v40 = a1[3];
    v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    v42 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x24BEE13C8], v40, v41);
    v43 = v63;
    if (!(_QWORD)v63)
    {
LABEL_13:
      v39 = 0;
      return v39 & 1;
    }
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    v81 = v71;
    v82 = v72;
    v44 = ((uint64_t (*)(_QWORD *))v63)(v42);
    if (v44)
    {
      v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    v46 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    v48 = *(_QWORD *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *(*v34)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t (*v56)();
  uint64_t (*v57)();
  _QWORD *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v62;
  _BYTE v64[32];
  __int128 v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t (*v70)();
  _QWORD *v71;
  uint64_t v72;
  uint64_t (*v73)();
  char v74;
  __int128 v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t (*v80)();
  _QWORD *v81;
  uint64_t v82;
  uint64_t (*v83)();
  char v84;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v75, v9, v10);
  v62 = 0x30201u >> (8 * v75);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v75, v11, v12);
  if (v75 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v75, &type metadata for FloatVector3Packed, v13, v14), (v15 = v75) != 0))
  {
    v16 = *((_QWORD *)&v75 + 1);
    v17 = v76;
    v18 = v77;
    v19 = v78;
    v20 = v79;
    v57 = v80;
    v21 = v82;
    v58 = v81;
    v56 = v83;
    v22 = v84;
    v59 = (v82 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v57;
    *(_QWORD *)(v23 + 72) = v58;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v59;
    *(_QWORD *)(v23 + 88) = v56;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v65 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v65 + 1) = v23;
    v66 = v56;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v65, (uint64_t)v64);
    v60 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v65;
    *(_QWORD *)(v24 + 32) = v66;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v56;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v56;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v56;
    *(_QWORD *)&v75 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v75 + 1) = v24;
    v76 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v77 = v25;
    v78 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v79 = v26;
    v80 = thunk for @callee_guaranteed () -> ()partial apply;
    v81 = v27;
    LOWORD(v82) = 9;
    v83 = v56;
    v84 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v64, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v60);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v75);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v65 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v65;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v60);
      goto LABEL_13;
    }
    v52 = a1[3];
    v53 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v52);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v53 + 8))(&v65, v52, v53);
    if (((unint64_t)v56 & 0x8000000000000000) == 0 && !((unint64_t)v56 >> 32))
    {
      v54 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v41 = a2(a6, v54 + 32, v62, v56, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v60);
      swift_release();
      swift_release();
      return v41 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = *(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v33 + 56);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    v36 = v34(&v75, v35, v32, v33);
    v37 = v75;
    if ((_QWORD)v75)
    {
      v38 = ((uint64_t (*)(_QWORD *))v76)(v36);
      if (v38)
      {
        v40 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v38 + 32, *(_QWORD *)(v38 + 16), v39, a4, a5, a6, a1, v62);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v40 != 2)
        {
          v41 = v40 & 1;
          return v41 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v37);
      }
    }
    v42 = a1[3];
    v43 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v42);
    v44 = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v43 + 56))(&v65, v35, v42, v43);
    v45 = v65;
    if (!(_QWORD)v65)
    {
LABEL_13:
      v41 = 0;
      return v41 & 1;
    }
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    v80 = v70;
    v81 = v71;
    LOWORD(v82) = v72 & 0x1FF;
    v83 = v73;
    v84 = v74;
    v46 = ((uint64_t (*)(_QWORD *))v65)(v44);
    if (v46)
    {
      v47 = v46;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v47 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v75);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v45);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v45);
    v48 = a1[3];
    v49 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v48);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v49 + 8))(&v65, v48, v49);
    v50 = *(_QWORD *)(v47 + 16);
    if (!HIDWORD(v50))
    {
      v51 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v41 = a2(a6, v51 + 32, v62, (uint64_t (*)())v50, v47 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v41 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *(*v36)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unsigned int v60;
  _BYTE v62[32];
  __int128 v63;
  uint64_t (*v64)();
  _QWORD *v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  __int128 v73;
  uint64_t (*v74)();
  _QWORD *v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  v60 = 0x30201u >> (8 * v73);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9)
  {
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14);
    v15 = v73;
    if ((_QWORD)v73)
    {
      v16 = *((_QWORD *)&v73 + 1);
      v17 = v74;
      v18 = v75;
      v19 = v76;
      v20 = v78;
      v57 = v77;
      v21 = v80;
      v58 = v79;
      v54 = v81;
      v22 = v82;
      v55 = (v80 >> 8) & 1;
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = v15;
      *(_QWORD *)(v23 + 24) = v16;
      *(_QWORD *)(v23 + 32) = v17;
      *(_QWORD *)(v23 + 40) = v18;
      *(_QWORD *)(v23 + 48) = v19;
      *(_QWORD *)(v23 + 56) = v57;
      *(_QWORD *)(v23 + 64) = v20;
      *(_QWORD *)(v23 + 72) = v58;
      *(_BYTE *)(v23 + 80) = v21;
      *(_BYTE *)(v23 + 81) = v55;
      *(_QWORD *)(v23 + 88) = v54;
      *(_BYTE *)(v23 + 96) = v22;
      *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
      *(_QWORD *)(v23 + 112) = 0;
      *(_QWORD *)&v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
      *((_QWORD *)&v63 + 1) = v23;
      v64 = v54;
      outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
      v56 = v15;
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v63;
      *(_QWORD *)(v24 + 32) = v64;
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
      v25[3] = v23;
      v25[4] = v54;
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
      v26[3] = v23;
      v26[4] = v54;
      v27 = (_QWORD *)swift_allocObject();
      v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
      v27[3] = v23;
      v27[4] = v54;
      *(_QWORD *)&v73 = __RKEntityLookAtCameraAction.reversed();
      *((_QWORD *)&v73 + 1) = v24;
      v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
      v75 = v25;
      v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
      v77 = v26;
      v78 = thunk for @callee_guaranteed () -> ()partial apply;
      v79 = v27;
      LOWORD(v80) = 9;
      v81 = v54;
      v82 = 0;
      swift_retain();
      outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
      swift_retain_n();
      outlined copy of MeshBuffer<SIMD3<Float>>?(v56);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      v29 = specialized _arrayConditionalCast<A, B>(_:)(v28);
      swift_bridgeObjectRelease();
      if (v29)
      {
        v30 = a1[3];
        v31 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v30);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v31 + 8))(&v63, v30, v31);
        if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
        {
          v32 = String.utf8CString.getter();
          swift_bridgeObjectRelease();
          v33 = a2(a6, v32 + 32, v60, v54, v29 + 32);
          outlined consume of MeshBuffer<SIMD3<Float>>?(v56);
LABEL_18:
          swift_release();
          swift_bridgeObjectRelease();
          return v33 & 1;
        }
        goto LABEL_22;
      }
      outlined consume of MeshBuffer<SIMD3<Float>>?(v56);
LABEL_20:
      v33 = 0;
      return v33 & 1;
    }
  }
  v34 = a1[3];
  v35 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v34);
  v36 = *(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v35 + 56);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v38 = v36(&v73, v37, v34, v35);
  v39 = v73;
  if ((_QWORD)v73)
  {
    v40 = ((uint64_t (*)(_QWORD *))v74)(v38);
    if (v40)
    {
      v42 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v40 + 32, *(_QWORD *)(v40 + 16), v41, a4, a5, a6, a1, v60);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v42 != 2)
      {
        v33 = v42 & 1;
        return v33 & 1;
      }
    }
    else
    {
      outlined consume of MeshBuffer<SIMD3<Float>>?(v39);
    }
  }
  v43 = a1[3];
  v44 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v43);
  v45 = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v44 + 56))(&v63, v37, v43, v44);
  v46 = v63;
  if (!(_QWORD)v63)
    goto LABEL_20;
  v73 = v63;
  v74 = v64;
  v75 = v65;
  v76 = v66;
  v77 = v67;
  v78 = v68;
  v79 = v69;
  LOWORD(v80) = v70 & 0x1FF;
  v81 = v71;
  v82 = v72;
  v47 = ((uint64_t (*)(_QWORD *))v63)(v45);
  if (v47)
  {
    v48 = v47;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v48 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    outlined consume of MeshBuffer<SIMD3<Float>>?(v46);
  }
  outlined consume of MeshBuffer<SIMD3<Float>>?(v46);
  v49 = a1[3];
  v50 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v49);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v50 + 8))(&v63, v49, v50);
  v51 = *(_QWORD *)(v48 + 16);
  if (!HIDWORD(v51))
  {
    v52 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v33 = a2(a6, v52 + 32, v60, (uint64_t (*)())v51, v48 + 32);
    goto LABEL_18;
  }
LABEL_22:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *(*v34)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t (*v56)();
  uint64_t (*v57)();
  _QWORD *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v62;
  _BYTE v64[32];
  __int128 v65;
  uint64_t (*v66)();
  _QWORD *v67;
  uint64_t (*v68)();
  _QWORD *v69;
  uint64_t (*v70)();
  _QWORD *v71;
  uint64_t v72;
  uint64_t (*v73)();
  char v74;
  __int128 v75;
  uint64_t (*v76)();
  _QWORD *v77;
  uint64_t (*v78)();
  _QWORD *v79;
  uint64_t (*v80)();
  _QWORD *v81;
  uint64_t v82;
  uint64_t (*v83)();
  char v84;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v75, v9, v10);
  v62 = 0x30201u >> (8 * v75);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v75, v11, v12);
  if (v75 == 9
    && (v13 = a1[3],
        v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v75, &type metadata for FloatVector3Packed, v13, v14), (v15 = v75) != 0))
  {
    v16 = *((_QWORD *)&v75 + 1);
    v17 = v76;
    v18 = v77;
    v19 = v78;
    v20 = v79;
    v57 = v80;
    v21 = v82;
    v58 = v81;
    v56 = v83;
    v22 = v84;
    v59 = (v82 >> 8) & 1;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v15;
    *(_QWORD *)(v23 + 24) = v16;
    *(_QWORD *)(v23 + 32) = v17;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    *(_QWORD *)(v23 + 64) = v57;
    *(_QWORD *)(v23 + 72) = v58;
    *(_BYTE *)(v23 + 80) = v21;
    *(_BYTE *)(v23 + 81) = v59;
    *(_QWORD *)(v23 + 88) = v56;
    *(_BYTE *)(v23 + 96) = v22;
    *(_QWORD *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(_QWORD *)(v23 + 112) = 0;
    *(_QWORD *)&v65 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((_QWORD *)&v65 + 1) = v23;
    v66 = v56;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v65, (uint64_t)v64);
    v60 = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v65;
    *(_QWORD *)(v24 + 32) = v66;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v56;
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v56;
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v56;
    *(_QWORD *)&v75 = __RKEntityLookAtCameraAction.reversed();
    *((_QWORD *)&v75 + 1) = v24;
    v76 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v77 = v25;
    v78 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v79 = v26;
    v80 = thunk for @callee_guaranteed () -> ()partial apply;
    v81 = v27;
    LOWORD(v82) = 9;
    v83 = v56;
    v84 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v64, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v60);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v75);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)&v65 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    v30 = v65;
    v31 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v60);
      goto LABEL_13;
    }
    v52 = a1[3];
    v53 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v52);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v53 + 8))(&v65, v52, v53);
    if (((unint64_t)v56 & 0x8000000000000000) == 0 && !((unint64_t)v56 >> 32))
    {
      v54 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v41 = a2(a6, v54 + 32, v62, v56, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v60);
      swift_release();
      swift_release();
      return v41 & 1;
    }
  }
  else
  {
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = *(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v33 + 56);
    v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    v36 = v34(&v75, v35, v32, v33);
    v37 = v75;
    if ((_QWORD)v75)
    {
      v38 = ((uint64_t (*)(_QWORD *))v76)(v36);
      if (v38)
      {
        v40 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v38 + 32, *(_QWORD *)(v38 + 16), v39, a4, a5, a6, a1, v62);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v40 != 2)
        {
          v41 = v40 & 1;
          return v41 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v37);
      }
    }
    v42 = a1[3];
    v43 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v42);
    v44 = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v43 + 56))(&v65, v35, v42, v43);
    v45 = v65;
    if (!(_QWORD)v65)
    {
LABEL_13:
      v41 = 0;
      return v41 & 1;
    }
    v75 = v65;
    v76 = v66;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    v80 = v70;
    v81 = v71;
    LOWORD(v82) = v72 & 0x1FF;
    v83 = v73;
    v84 = v74;
    v46 = ((uint64_t (*)(_QWORD *))v65)(v44);
    if (v46)
    {
      v47 = v46;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v47 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v75);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v45);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v45);
    v48 = a1[3];
    v49 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v48);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v49 + 8))(&v65, v48, v49);
    v50 = *(_QWORD *)(v47 + 16);
    if (!HIDWORD(v50))
    {
      v51 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v41 = a2(a6, v51 + 32, v62, (uint64_t (*)())v50, v47 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v41 & 1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeUInt8(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D514](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeUInt8(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeUInt8();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeUInt16(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D4FC](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeUInt16(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeUInt16();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeUInt32(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D508](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeUInt32(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeUInt32();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeInt8(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D4F0](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeInt8(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeInt8();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeInt16(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D4D8](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeInt16(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeInt16();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeInt32(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D4E4](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeInt32(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeInt32();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeFloat(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D4CC](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeFloat(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeFloat();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeDouble(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D4C0](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeDouble(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeDouble();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeVector2F(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D520](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeVector2F(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeVector2F();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeVector3F(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D52C](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeVector3F(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeVector3F();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeVector4F(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22076D538](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeVector4F(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeVector4F();
}

double MeshDescriptor.makeGeomMesh()@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  double result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57[4];

  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[2];
  v51 = v1[3];
  v52[0] = v3;
  v52[1] = v4;
  v6 = v1[1];
  v48 = *v1;
  v53 = *((_QWORD *)v1 + 12);
  v49 = v6;
  v50 = v5;
  outlined retain of MeshDescriptor((uint64_t)&v48);
  specialized MeshBufferContainer.positions.getter((uint64_t)&v44);
  outlined release of MeshDescriptor((uint64_t)&v48);
  v7 = v47;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!v7)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_WORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 18) = 1;
    return result;
  }
  outlined retain of MeshDescriptor((uint64_t)&v48);
  specialized MeshBufferContainer.positions.getter((uint64_t)&v44);
  outlined release of MeshDescriptor((uint64_t)&v48);
  v9 = v47;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v10 = *((_QWORD *)&v50 + 1);
  v11 = v51;
  v40 = a1;
  if (BYTE8(v51) > 1u)
  {
    if (BYTE8(v51) == 2)
    {
      v13 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 16) / 3uLL;
      v14 = *(_QWORD *)(v51 + 16) >> 2;
      v12 = v14 + v13;
      outlined copy of MeshDescriptor.Primitives(*((uint64_t *)&v50 + 1), v51, 2u);
      v15 = specialized Array.init(repeating:count:)(3, v13);
      v16 = specialized Array.init(repeating:count:)(4, v14);
      *(_QWORD *)&v44 = v15;
      specialized Array.append<A>(contentsOf:)(v16);
      *(_QWORD *)&v44 = v10;
      specialized Array.append<A>(contentsOf:)(v11);
    }
    else
    {
      v12 = 0;
    }
  }
  else if (BYTE8(v51))
  {
    v12 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 16);
    outlined copy of MeshDescriptor.Primitives(*((uint64_t *)&v50 + 1), v51, 1u);
  }
  else
  {
    v12 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 16) / 3uLL;
    outlined copy of MeshDescriptor.Primitives(*((uint64_t *)&v50 + 1), v51, 0);
    specialized Array.init(repeating:count:)(3, v12);
  }
  if ((v9 & 0x8000000000000000) != 0 || HIDWORD(v9) || HIDWORD(v12))
    goto LABEL_62;
  v17 = REGeomModelDescriptorCreate();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v17)
  {
    result = 0.0;
    *(_OWORD *)v40 = xmmword_21BE56B70;
    *(_WORD *)(v40 + 16) = 0;
    *(_BYTE *)(v40 + 18) = 1;
    return result;
  }
  v41 = v17;
  v39 = v9;
  v18 = v49;
  outlined retain of MeshDescriptor((uint64_t)&v48);
  v19 = specialized _NativeDictionary.mapValues<A>(_:)(v18);
  outlined release of MeshDescriptor((uint64_t)&v48);
  v20 = 0;
  v21 = v19 + 64;
  v22 = 1 << *(_BYTE *)(v19 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(v19 + 64);
  v25 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v20 << 6);
      goto LABEL_37;
    }
    v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v28 >= v25)
      goto LABEL_43;
    v29 = *(_QWORD *)(v21 + 8 * v28);
    ++v20;
    if (!v29)
    {
      v20 = v28 + 1;
      if (v28 + 1 >= v25)
        goto LABEL_43;
      v29 = *(_QWORD *)(v21 + 8 * v20);
      if (!v29)
      {
        v20 = v28 + 2;
        if (v28 + 2 >= v25)
          goto LABEL_43;
        v29 = *(_QWORD *)(v21 + 8 * v20);
        if (!v29)
        {
          v20 = v28 + 3;
          if (v28 + 3 >= v25)
            goto LABEL_43;
          v29 = *(_QWORD *)(v21 + 8 * v20);
          if (!v29)
            break;
        }
      }
    }
LABEL_36:
    v24 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_37:
    outlined init with copy of AnyMeshBuffer(*(_QWORD *)(v19 + 56) + 40 * v27, (uint64_t)&v44);
    v56 = v46;
    v54 = v44;
    v55 = v45;
    v31 = *((_QWORD *)&v45 + 1);
    v32 = v46;
    __swift_project_boxed_opaque_existential_1(&v54, *((uint64_t *)&v45 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v32 + 8))(&v42, v31, v32);
    v34 = v42;
    v33 = v43;
    if (one-time initialization token for triangleIndices != -1)
      swift_once();
    if (v34 == static MeshBuffers.Identifier.triangleIndices && v33 == *(_QWORD *)algn_2551A1378)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
      {
        v36 = *((_QWORD *)&v55 + 1);
        v37 = v56;
        __swift_project_boxed_opaque_existential_1(&v54, *((uint64_t *)&v55 + 1));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v37 + 32))(&v42, v36, v37);
        __asm { BR              X9 }
      }
    }
    outlined destroy of AnyMeshBuffer((uint64_t)&v54);
  }
  v30 = v28 + 4;
  if (v30 < v25)
  {
    v29 = *(_QWORD *)(v21 + 8 * v30);
    if (!v29)
    {
      while (1)
      {
        v20 = v30 + 1;
        if (__OFADD__(v30, 1))
          break;
        if (v20 >= v25)
          goto LABEL_43;
        v29 = *(_QWORD *)(v21 + 8 * v20);
        ++v30;
        if (v29)
          goto LABEL_36;
      }
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    v20 = v30;
    goto LABEL_36;
  }
LABEL_43:
  swift_release();
  String.utf8CString.getter();
  REGeomModelDescriptorSetName();
  swift_release();
  outlined init with take of MeshDescriptor.Materials((uint64_t *)&v49 + 1, (uint64_t)v57);
  outlined init with take of MeshDescriptor.Materials(v57, (uint64_t)&v42);
  if ((v43 & 1) != 0)
    REGeomModelDescriptorSetMaterialAssignmentsPerFace();
  else
    REGeomModelDescriptorSetMaterialAssignmentForModel();
  outlined init with take of Transform?((uint64_t)v52, (uint64_t)&v54, &demangling cache variable for type metadata for MeshDescriptor.Skinning?);
  outlined init with take of Transform?((uint64_t)&v54, (uint64_t)&v44, &demangling cache variable for type metadata for MeshDescriptor.Skinning?);
  if (*((_QWORD *)&v44 + 1))
  {
    v38 = v46 * v39;
    if ((unsigned __int128)(v46 * (__int128)(uint64_t)v39) >> 64 != (uint64_t)(v46 * v39) >> 63)
      goto LABEL_59;
    if (v38 && *(_QWORD *)(*((_QWORD *)&v45 + 1) + 16) == v38 && *(_QWORD *)(v45 + 16) == v38)
    {
      if (v46 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_60;
      if (v46 <= 0x7FFFFFFF)
      {
        String.utf8CString.getter();
        REGeomModelDescriptorAddSkinningData();
        swift_release();
        goto LABEL_55;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x21BC063A0);
    }
    RERelease();
    result = 0.0;
    *(_OWORD *)v40 = xmmword_21BE56B70;
    *(_WORD *)(v40 + 16) = 0;
    *(_BYTE *)(v40 + 18) = 1;
  }
  else
  {
LABEL_55:
    *(_QWORD *)v40 = v41;
    *(_QWORD *)(v40 + 8) = 0;
    *(_WORD *)(v40 + 16) = 0;
    *(_BYTE *)(v40 + 18) = 0;
  }
  return result;
}

uint64_t MeshPartBuffer.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t static MeshResource.Skeleton.unpack(coreAsset:skeletonIndex:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t SkeletonJointCount;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  uint64_t SkeletonJointParent;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  Swift::String v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  SkeletonJointCount = REMeshAssetGetSkeletonJointCount();
  REMeshAssetGetSkeletonName();
  v3 = String.init(cString:)();
  v5 = v4;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletonJointCount & ~(SkeletonJointCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletonJointCount & ~(SkeletonJointCount >> 63), 0, v6);
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletonJointCount & ~(SkeletonJointCount >> 63), 0, v6);
  if (SkeletonJointCount < 0)
  {
    __break(1u);
    _StringGuts.grow(_:)(31);
    v31._object = (void *)0x800000021BE8BB00;
    v31._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v31);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v10 = v9;
    v35 = v5;
    v36 = v3;
    if (SkeletonJointCount)
    {
      v34 = a1;
      for (i = 0; i != SkeletonJointCount; ++i)
      {
        REMeshAssetGetSkeletonJointName();
        v12 = String.init(cString:)();
        v14 = v13;
        v16 = v7[2];
        v15 = v7[3];
        if (v16 >= v15 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v7);
        v7[2] = v16 + 1;
        v17 = &v7[2 * v16];
        v17[4] = v12;
        v17[5] = v14;
        REMeshAssetGetSkeletonBindPoseTransform();
        v21 = v18;
        if (one-time initialization token for identity != -1)
        {
          v39 = v20;
          v41 = v18;
          v32 = v19;
          swift_once();
          v19 = v32;
          v20 = v39;
          v21 = v41;
        }
        v23 = v8[2];
        v22 = v8[3];
        if (v23 >= v22 >> 1)
        {
          v40 = v20;
          v42 = v21;
          v33 = v19;
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v8);
          v19 = v33;
          v20 = v40;
          v21 = v42;
          v8 = v28;
        }
        HIDWORD(v21) = v38;
        HIDWORD(v20) = v37;
        v8[2] = v23 + 1;
        v24 = &v8[6 * v23];
        v24[2] = v21;
        v24[3] = v19;
        v24[4] = v20;
        SkeletonJointParent = REMeshAssetGetSkeletonJointParent();
        v27 = v10[2];
        v26 = v10[3];
        if (v27 >= v26 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v10);
        v10[2] = v27 + 1;
        v10[v27 + 4] = SkeletonJointParent;
      }
      if (SkeletonJointCount < 1)
      {
        v29 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        type metadata accessor for simd_float4x4(0);
        v29 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v29 + 16) = SkeletonJointCount;
      }
      a1 = v34;
    }
    else
    {
      v29 = MEMORY[0x24BEE4AF8];
    }
    REMeshAssetCopySkeletonInverseBindPoseTransforms();
    *(_QWORD *)(v29 + 16) = SkeletonJointCount;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)(v36, v35, (uint64_t)v7, v29, (uint64_t)v8, (uint64_t)v10, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MeshResource.Model.combine()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t i;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  Class isa;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  Class v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  Class v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  int64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  char v138;
  char v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  Class v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t (*v153)(uint64_t);
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  Class v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  Class v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  Class v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  void (*v232)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int16 v250;
  unsigned __int8 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  __int16 v261;
  unsigned __int8 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void (*v266)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  __int16 v272;
  unsigned __int8 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t (*v276)(uint64_t);
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  Class v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  float v303;
  float v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t result;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  __int128 *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  int64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  __int16 v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  int64_t v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359[2];
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  uint64_t v366;
  _OWORD v367[4];
  __int128 v368;
  _OWORD v369[3];
  __int128 v370;
  unsigned __int8 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  _QWORD v377[3];
  uint64_t v378;
  uint64_t v379;
  uint64_t v380[10];
  _QWORD v381[4];
  __int128 v382;
  __int128 v383;
  __int16 v384;
  uint64_t v385;
  unsigned __int8 v386;
  _OWORD v387[5];
  unsigned __int8 v388;
  __int128 v389;
  __int128 v390;
  _BYTE v391[25];
  _OWORD v392[4];
  __int16 v393;
  uint64_t v394;
  unsigned __int8 v395;
  _OWORD v396[4];
  __int16 v397;
  uint64_t v398;
  unsigned __int8 v399;
  _OWORD v400[4];
  __int16 v401;
  uint64_t v402;
  unsigned __int8 v403;
  _OWORD v404[4];
  __int16 v405;
  uint64_t v406;
  unsigned __int8 v407;
  __int128 v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  __int128 v413;
  __int16 v414;
  uint64_t v415;
  unsigned __int8 v416;
  __int128 v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  __int128 v422;
  __int16 v423;
  uint64_t v424;
  unsigned __int8 v425;
  __int128 v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  __int128 v431;
  __int16 v432;
  uint64_t v433;
  unsigned __int8 v434;
  _OWORD v435[4];
  __int16 v436;
  uint64_t v437;
  unsigned __int8 v438;
  _OWORD v439[4];
  __int16 v440;
  uint64_t v441;
  unsigned __int8 v442;
  _OWORD v443[4];
  __int16 v444;
  uint64_t v445;
  unsigned __int8 v446;
  _OWORD v447[4];
  __int16 v448;
  uint64_t v449;
  unsigned __int8 v450;
  char v451[8];
  _BYTE v452[16];
  char v453[8];
  uint64_t v454;
  _QWORD v455[2];
  int v456;
  char v457;
  uint64_t v458;

  v2 = *(_QWORD *)(v0 + 16);
  v325 = *(_QWORD *)(v0 + 32);
  v3 = REMeshModelDefinitionCreate();
  type metadata accessor for MeshModelDefinition();
  v326 = swift_allocObject();
  *(_QWORD *)(v326 + 16) = v3;
  String.utf8CString.getter();
  REMeshModelDefinitionSetName();
  swift_release();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v380[0] = (uint64_t)v4;
  specialized MutableCollection<>.sort(by:)(v380, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  if (v1)
    goto LABEL_332;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v380[0];
  v6 = *(_QWORD *)(v380[0] + 16);
  if (!v6)
  {
    swift_release();
    return v326;
  }
  v7 = 0;
  v336 = v380[0] + 32;
  v322 = *MEMORY[0x24BE26320];
  v321 = *MEMORY[0x24BE26318];
  v344 = *MEMORY[0x24BE26280];
  v316 = *MEMORY[0x24BE262B8];
  v317 = *MEMORY[0x24BE262C0];
  v315 = *MEMORY[0x24BE262B0];
  v318 = *MEMORY[0x24BE26338];
  v319 = *MEMORY[0x24BE26270];
  v320 = *MEMORY[0x24BE26328];
  v323 = *MEMORY[0x24BE262F8];
  v333 = *MEMORY[0x24BE26308];
  v355 = -1;
  v330 = v380[0];
  v328 = *(_QWORD *)(v380[0] + 16);
  while (1)
  {
    if (v7 >= *(_QWORD *)(v5 + 16))
      goto LABEL_319;
    v8 = (__int128 *)(v336 + (v7 << 6));
    v10 = v8[1];
    v9 = v8[2];
    v11 = *v8;
    *(_OWORD *)&v391[9] = *(__int128 *)((char *)v8 + 41);
    *(_OWORD *)v391 = v9;
    v389 = v11;
    v390 = v10;
    v12 = v11;
    ++v355;
    v13 = *(_QWORD *)(v11 + 16);
    outlined retain of MeshResource.Part((uint64_t)&v389);
    outlined retain of MeshResource.Part((uint64_t)&v389);
    if (!v13)
      goto LABEL_4;
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
    if ((v15 & 1) == 0)
      goto LABEL_4;
    v332 = v12;
    outlined init with copy of __REAssetService(*(_QWORD *)(v12 + 56) + 40 * v14, (uint64_t)&v368);
    outlined init with take of BindableDataInternal(&v368, (uint64_t)v377);
    v16 = v378;
    v334 = v7;
    v17 = v379;
    __swift_project_boxed_opaque_existential_1(v377, v378);
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v20 = v17;
    v7 = v334;
    v5 = v330;
    v18(v380, v19, v16, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v377);
    v21 = v380[0];
    if (!v380[0])
    {
LABEL_4:
      swift_release();
      swift_bridgeObjectRelease_n();
      outlined release of MeshResource.Part((uint64_t)&v389);
      goto LABEL_5;
    }
    v22 = v380[9];
    v458 = v380[7];
    outlined release of MeshResource.Part((uint64_t)&v389);
    v6 = v328;
    v7 = v334;
    v5 = v330;
    outlined consume of MeshBuffer<SIMD3<Float>>?(v21);
    v327 = v22;
    if (v22 >= 1)
      break;
LABEL_5:
    outlined release of MeshResource.Part((uint64_t)&v389);
LABEL_6:
    if (++v7 == v6)
    {
      swift_release();
      return v326;
    }
  }
  outlined init with take of Transform?((uint64_t)&v390 + 8, (uint64_t)v452, &demangling cache variable for type metadata for String?);
  v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v376 = MEMORY[0x24BEE4AF8];
  v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v329 = specialized Dictionary.init(dictionaryLiteral:)(v23);
  v375 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v23);
  v374 = 0;
  v372 = 0u;
  v373 = 0u;
  v367[0] = v389;
  v367[1] = v390;
  v367[2] = *(_OWORD *)v391;
  *(_OWORD *)((char *)&v367[2] + 9) = *(_OWORD *)&v391[9];
  MeshResource.Part.jointInfluences.getter((uint64_t)&v368);
  outlined init with take of Transform?((uint64_t)&v368, (uint64_t)v377, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  outlined release of MeshResource.JointInfluences?((uint64_t)v377);
  outlined init with take of Transform?((uint64_t)v377, (uint64_t)v380, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  if (getEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(v380) != 1)
  {
    outlined init with take of Transform?((uint64_t)v452, (uint64_t)v453, &demangling cache variable for type metadata for String?);
    if (v454)
    {
      type metadata accessor for MeshAttributeDescriptor();
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = v322;
      MEMORY[0x220768F0C](v25, v26, v27);
      if (*(_QWORD *)((v376 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v28 = swift_allocObject();
      *(_QWORD *)(v28 + 16) = v321;
      MEMORY[0x220768F0C](v28, v29, v30);
      if (*(_QWORD *)((v376 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  v346 = v24;
  outlined retain of MeshResource.Part((uint64_t)&v389);
  v31 = specialized _NativeDictionary.mapValues<A>(_:)(v332);
  outlined release of MeshResource.Part((uint64_t)&v389);
  v32 = 0;
  v358 = v31 + 64;
  v33 = 1 << *(_BYTE *)(v31 + 32);
  if (v33 < 64)
    v34 = ~(-1 << v33);
  else
    v34 = -1;
  v35 = v34 & *(_QWORD *)(v31 + 64);
  v36 = (unint64_t)(v33 + 63) >> 6;
  v352 = v36 - 1;
  v458 = v36;
  v354 = v36 - 5;
  while (1)
  {
    if (v35)
    {
      v37 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v38 = v37 | (v32 << 6);
LABEL_26:
      v39 = *(_QWORD *)(v31 + 56);
      v40 = *(_QWORD *)(v31 + 48) + 24 * v38;
      v41 = *(_QWORD *)v40;
      v42 = *(_QWORD *)(v40 + 8);
      v43 = *(_BYTE *)(v40 + 16);
      LOBYTE(v40) = *(_BYTE *)(v40 + 17);
      *(_QWORD *)&v367[0] = v41;
      *((_QWORD *)&v367[0] + 1) = v42;
      LOBYTE(v367[1]) = v43;
      BYTE1(v367[1]) = v40;
      outlined init with copy of AnyMeshBuffer(v39 + 40 * v38, (uint64_t)&v367[1] + 8);
      swift_bridgeObjectRetain();
      goto LABEL_33;
    }
    v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
      goto LABEL_320;
    }
    if (v44 >= v458)
    {
      v46 = v32;
    }
    else
    {
      v45 = *(_QWORD *)(v358 + 8 * v44);
      if (v45)
        goto LABEL_30;
      v46 = v32 + 1;
      if (v32 + 2 < v458)
      {
        v45 = *(_QWORD *)(v358 + 8 * (v32 + 2));
        if (v45)
        {
          v44 = v32 + 2;
LABEL_30:
          v35 = (v45 - 1) & v45;
          v38 = __clz(__rbit64(v45)) + (v44 << 6);
          v32 = v44;
          goto LABEL_26;
        }
        v46 = v32 + 2;
        if (v32 + 3 < v458)
        {
          v45 = *(_QWORD *)(v358 + 8 * (v32 + 3));
          if (v45)
          {
            v44 = v32 + 3;
            goto LABEL_30;
          }
          v44 = v32 + 4;
          v46 = v32 + 3;
          if (v32 + 4 < v458)
          {
            v45 = *(_QWORD *)(v358 + 8 * v44);
            if (v45)
              goto LABEL_30;
            while (v354 != v32)
            {
              v45 = *(_QWORD *)(v31 + 104 + 8 * v32++);
              if (v45)
              {
                v44 = v32 + 4;
                goto LABEL_30;
              }
            }
            v46 = v352;
          }
        }
      }
    }
    v35 = 0;
    v32 = v46;
    memset(v367, 0, sizeof(v367));
LABEL_33:
    outlined init with take of Transform?((uint64_t)v367, (uint64_t)&v368, &demangling cache variable for type metadata for (key: MeshBuffers.Identifier, value: AnyMeshBuffer)?);
    v47 = *((_QWORD *)&v368 + 1);
    if (!*((_QWORD *)&v368 + 1))
      break;
    v48 = v368;
    v49 = BYTE1(v369[0]);
    v367[0] = *(_OWORD *)((char *)v369 + 8);
    v367[1] = *(_OWORD *)((char *)&v369[1] + 8);
    *(_QWORD *)&v367[2] = *((_QWORD *)&v369[2] + 1);
    if (one-time initialization token for triangleIndices != -1)
      swift_once();
    if (v48 == static MeshBuffers.Identifier.triangleIndices && *(_QWORD *)algn_2551A1378 == v47
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v372, &demangling cache variable for type metadata for AnyMeshBuffer?);
      v372 = v367[0];
      v373 = v367[1];
      v374 = *(_QWORD *)&v367[2];
      continue;
    }
    if (one-time initialization token for jointInfluences != -1)
      swift_once();
    if (v48 == static MeshBuffers.Identifier.jointInfluences && unk_2551A1390 == v47
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_49;
    }
    if (one-time initialization token for jointInfluenceEndIndices != -1)
      swift_once();
    if (v48 == static MeshBuffers.Identifier.jointInfluenceEndIndices && *(_QWORD *)algn_2551A13A8 == v47
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_49:
      swift_bridgeObjectRelease();
LABEL_50:
      outlined destroy of AnyMeshBuffer((uint64_t)v367);
      continue;
    }
    v50 = *((_QWORD *)&v367[1] + 1);
    v51 = *(_QWORD *)&v367[2];
    __swift_project_boxed_opaque_existential_1(v367, *((uint64_t *)&v367[1] + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 24))(&v364, v50, v51);
    if ((_BYTE)v364)
    {
      type metadata accessor for OS_os_log();
      swift_bridgeObjectRetain();
      v52 = static OS_os_log.default.getter();
      v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc();
        v55 = swift_slowAlloc();
        *(_QWORD *)&v364 = v55;
        *(_DWORD *)v54 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v54 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, (uint64_t *)&v364);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_21B9AA000, v52, v53, "Skipping non-vertex rate attribute '%s'", (uint8_t *)v54, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v55, -1, -1);
        MEMORY[0x220772F44](v54, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      goto LABEL_50;
    }
    v56 = *((_QWORD *)&v367[1] + 1);
    v57 = *(_QWORD *)&v367[2];
    __swift_project_boxed_opaque_existential_1(v367, *((uint64_t *)&v367[1] + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v57 + 32))(&v364, v56, v57);
    MeshBuffers.ElementType.genericAttributeDescriptor.getter();
    if (!v58)
      goto LABEL_323;
    v59 = *((_QWORD *)&v367[1] + 1);
    v60 = *(_QWORD *)&v367[2];
    __swift_project_boxed_opaque_existential_1(v367, *((uint64_t *)&v367[1] + 1));
    v61 = *(uint64_t (**)(uint64_t, uint64_t))(v60 + 48);
    swift_bridgeObjectRetain();
    v62 = v61(v59, v60);
    if (v63 >> 60 == 15)
    {
      specialized Dictionary._Variant.removeValue(forKey:)(v48, v47, &v364);
      swift_bridgeObjectRelease();
      outlined consume of Data?(v364, *((unint64_t *)&v364 + 1));
    }
    else
    {
      v64 = v62;
      v65 = v63;
      v66 = v375;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v364 = v66;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v65, v48, v47, isUniquelyReferenced_nonNull_native);
      v375 = v364;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v68 = v376;
    v69 = v376 >> 62;
    if (v376 >> 62)
    {
      swift_bridgeObjectRetain();
      v348 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v348 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRetain();
    v70 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v364 = v329;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v47, v348, v70);
    v329 = v364;
    swift_bridgeObjectRelease();
    if (v69)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v71 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v71 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v72 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v364 = v346;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v48, v47, v72);
    v346 = v364;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v49)
    {
      type metadata accessor for MeshAttributeDescriptor();
      v73 = swift_allocObject();
      *(_QWORD *)(v73 + 16) = v344;
      MEMORY[0x220768F0C](v73, v74, v75);
      if (*(_QWORD *)((v376 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    else
    {
      v76 = swift_retain();
      MEMORY[0x220768F0C](v76);
      if (*(_QWORD *)((v376 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    outlined destroy of AnyMeshBuffer((uint64_t)v367);
  }
  swift_release();
  v77 = v376;
  if (*((_QWORD *)&v373 + 1))
  {
    outlined init with copy of AnyMeshBuffer((uint64_t)&v372, (uint64_t)&v368);
    v78 = *((_QWORD *)&v369[0] + 1);
    v79 = *(_QWORD *)&v369[1];
    __swift_project_boxed_opaque_existential_1(&v368, *((uint64_t *)&v369[0] + 1));
    v80 = *(void (**)(uint64_t, uint64_t))(v79 + 16);
    swift_bridgeObjectRetain();
    v80(v78, v79);
    outlined destroy of AnyMeshBuffer((uint64_t)&v368);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v81 = v346;
  if (v77 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v82)
      goto LABEL_103;
LABEL_90:
    *(_QWORD *)&v368 = MEMORY[0x24BEE4AF8];
    v83 = (unint64_t)&v368;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82 & ~(v82 >> 63), 0);
    if (v82 < 0)
      goto LABEL_326;
    v84 = v368;
    if ((v77 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v82; ++i)
      {
        v86 = *(_QWORD *)(MEMORY[0x220769770](i, v77) + 16);
        swift_unknownObjectRelease();
        *(_QWORD *)&v368 = v84;
        v88 = *(_QWORD *)(v84 + 16);
        v87 = *(_QWORD *)(v84 + 24);
        if (v88 >= v87 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
          v84 = v368;
        }
        *(_QWORD *)(v84 + 16) = v88 + 1;
        *(_QWORD *)(v84 + 8 * v88 + 32) = v86;
      }
    }
    else
    {
      v89 = 0;
      v90 = *(_QWORD *)(v368 + 16);
      do
      {
        v91 = *(_QWORD *)(*(_QWORD *)(v77 + 8 * v89 + 32) + 16);
        *(_QWORD *)&v368 = v84;
        v92 = *(_QWORD *)(v84 + 24);
        if (v90 >= v92 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v90 + 1, 1);
          v84 = v368;
        }
        ++v89;
        *(_QWORD *)(v84 + 16) = v90 + 1;
        *(_QWORD *)(v84 + 8 * v90++ + 32) = v91;
      }
      while (v82 != v89);
    }
    swift_bridgeObjectRelease();
    v81 = v346;
  }
  else
  {
    v82 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v82)
      goto LABEL_90;
LABEL_103:
    swift_bridgeObjectRelease();
    v84 = MEMORY[0x24BEE4AF8];
  }
  closure #2 in MeshDefinition.init(attributes:vertexCount:indexCount:customNames:)(v84 + 32, v329, (uint64_t *)&v368);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v93 = v368;
  type metadata accessor for MeshDefinition();
  v345 = swift_allocObject();
  *(_QWORD *)(v345 + 16) = v93;
  if (!*((_QWORD *)&v373 + 1))
    goto LABEL_119;
  outlined init with copy of AnyMeshBuffer((uint64_t)&v372, (uint64_t)&v364);
  outlined init with take of BindableDataInternal(&v364, (uint64_t)&v368);
  outlined init with take of BindableDataInternal(&v368, (uint64_t)v367);
  v94 = *((_QWORD *)&v367[1] + 1);
  v95 = *(_QWORD *)&v367[2];
  __swift_project_boxed_opaque_existential_1(v367, *((uint64_t *)&v367[1] + 1));
  v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 48))(v94, v95);
  if (v97 >> 60 != 15)
  {
    v104 = v96;
    v105 = v97;
    isa = Data._bridgeToObjectiveC()().super.isa;
    REMeshDefinitionSetIndicesWithData();

    outlined consume of Data?(v104, v105);
    goto LABEL_118;
  }
  v98 = *((_QWORD *)&v367[1] + 1);
  v99 = *(_QWORD *)&v367[2];
  __swift_project_boxed_opaque_existential_1(v367, *((uint64_t *)&v367[1] + 1));
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v99 + 56))(&v368, MEMORY[0x24BEE44F0], v98, v99);
  v100 = (uint64_t (*)(uint64_t))v368;
  if ((_QWORD)v368)
  {
    v443[0] = v368;
    v443[1] = v369[0];
    v443[2] = v369[1];
    v443[3] = v369[2];
    v444 = v370 & 0x1FF;
    v445 = *((_QWORD *)&v370 + 1);
    LODWORD(v458) = v371;
    v446 = v371;
    swift_retain();
    swift_retain();
    swift_retain();
    v101 = swift_retain();
    v102 = v100(v101);
    if (v102)
    {
      v103 = v102;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v103 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v443);
      outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v100);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v100);
    v113 = specialized Data.init<A>(buffer:)(v103 + 32, *(_QWORD *)(v103 + 16));
    v115 = v114;
    v116 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v113, v115);
    REMeshDefinitionSetIndicesWithDataUInt32();
    swift_bridgeObjectRelease();

    v117 = (uint64_t)v100;
    goto LABEL_117;
  }
  v107 = *((_QWORD *)&v367[1] + 1);
  v108 = *(_QWORD *)&v367[2];
  __swift_project_boxed_opaque_existential_1(v367, *((uint64_t *)&v367[1] + 1));
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v108 + 56))(&v368, MEMORY[0x24BEE4478], v107, v108);
  v109 = (uint64_t (*)(uint64_t))v368;
  if (!(_QWORD)v368)
  {
LABEL_320:
    outlined release of MeshResource.Part((uint64_t)&v389);
    swift_release();
    swift_bridgeObjectRelease();
    v308 = *((_QWORD *)&v367[1] + 1);
    v309 = *(_QWORD *)&v367[2];
    __swift_project_boxed_opaque_existential_1(v367, *((uint64_t *)&v367[1] + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v309 + 8))(&v368, v308, v309);
    v310 = v368;
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *v311 = v310;
    swift_willThrow();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v367);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v372, &demangling cache variable for type metadata for AnyMeshBuffer?);
    swift_bridgeObjectRelease();
    goto LABEL_321;
  }
  v447[0] = v368;
  v447[1] = v369[0];
  v447[2] = v369[1];
  v447[3] = v369[2];
  v448 = v370 & 0x1FF;
  v449 = *((_QWORD *)&v370 + 1);
  v458 = v370;
  v450 = v371;
  swift_retain();
  swift_retain();
  swift_retain();
  v110 = swift_retain();
  v111 = v109(v110);
  if (v111)
  {
    v112 = v111;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v112 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v447);
    outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v109);
  }
  outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v109);
  v118 = specialized Data.init<A>(buffer:)(v112 + 32, *(_QWORD *)(v112 + 16));
  v120 = v119;
  v121 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v118, v120);
  REMeshDefinitionSetIndicesWithDataUInt16();
  swift_bridgeObjectRelease();

  v117 = (uint64_t)v109;
LABEL_117:
  outlined consume of MeshBuffer<SIMD3<Float>>?(v117);
  v81 = v346;
LABEL_118:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v367);
LABEL_119:
  outlined retain of MeshResource.Part((uint64_t)&v389);
  v122 = specialized _NativeDictionary.mapValues<A>(_:)(v332);
  outlined release of MeshResource.Part((uint64_t)&v389);
  v123 = 0;
  v335 = v122 + 64;
  v124 = 1 << *(_BYTE *)(v122 + 32);
  if (v124 < 64)
    v125 = ~(-1 << v124);
  else
    v125 = -1;
  v126 = v125 & *(_QWORD *)(v122 + 64);
  v347 = (unint64_t)(v124 + 63) >> 6;
  v324 = v122 + 104;
  v331 = v122;
  while (1)
  {
    if (v126)
    {
      v458 = (v126 - 1) & v126;
      v127 = __clz(__rbit64(v126)) | (v123 << 6);
LABEL_126:
      v128 = *(_QWORD *)(v122 + 56);
      v129 = *(_QWORD *)(v122 + 48) + 24 * v127;
      v130 = *(_QWORD *)v129;
      v131 = *(_QWORD *)(v129 + 8);
      v132 = *(_BYTE *)(v129 + 16);
      LOBYTE(v129) = *(_BYTE *)(v129 + 17);
      *(_QWORD *)&v368 = v130;
      *((_QWORD *)&v368 + 1) = v131;
      LOBYTE(v369[0]) = v132;
      BYTE1(v369[0]) = v129;
      outlined init with copy of AnyMeshBuffer(v128 + 40 * v127, (uint64_t)v369 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_136;
    }
    v133 = v123 + 1;
    if (__OFADD__(v123, 1))
      goto LABEL_318;
    if (v133 < v347)
    {
      v134 = *(_QWORD *)(v335 + 8 * v133);
      if (v134)
        goto LABEL_130;
      if (v123 + 2 >= v347)
      {
        ++v123;
      }
      else
      {
        v134 = *(_QWORD *)(v335 + 8 * (v123 + 2));
        if (v134)
        {
          v133 = v123 + 2;
LABEL_130:
          v458 = (v134 - 1) & v134;
          v127 = __clz(__rbit64(v134)) + (v133 << 6);
          v123 = v133;
          goto LABEL_126;
        }
        if (v123 + 3 >= v347)
        {
          v123 += 2;
        }
        else
        {
          v134 = *(_QWORD *)(v335 + 8 * (v123 + 3));
          if (v134)
          {
            v133 = v123 + 3;
            goto LABEL_130;
          }
          v133 = v123 + 4;
          if (v123 + 4 >= v347)
          {
            v123 += 3;
          }
          else
          {
            v134 = *(_QWORD *)(v335 + 8 * v133);
            if (v134)
              goto LABEL_130;
            while (v347 - 5 != v123)
            {
              v134 = *(_QWORD *)(v324 + 8 * v123++);
              if (v134)
              {
                v133 = v123 + 4;
                goto LABEL_130;
              }
            }
            v123 = v347 - 1;
          }
        }
      }
    }
    v458 = 0;
    v368 = 0u;
    memset(v369, 0, sizeof(v369));
LABEL_136:
    outlined init with take of Transform?((uint64_t)&v368, (uint64_t)v367, &demangling cache variable for type metadata for (key: MeshBuffers.Identifier, value: AnyMeshBuffer)?);
    v135 = *((_QWORD *)&v367[0] + 1);
    if (!*((_QWORD *)&v367[0] + 1))
    {
      swift_release();
      outlined retain of MeshResource.Part((uint64_t)&v389);
      specialized MeshResource.Part.subscript.getter(0xD00000000000001FLL, 0x800000021BE81900, 0, (uint64_t)&v368);
      outlined release of MeshResource.Part((uint64_t)&v389);
      v276 = (uint64_t (*)(uint64_t))v368;
      if (!(_QWORD)v368)
      {
        v281 = v325;
        goto LABEL_296;
      }
      v277 = *((_QWORD *)&v369[1] + 1);
      v48 = *(_QWORD *)&v369[2];
      v435[0] = v368;
      v435[1] = v369[0];
      v458 = *(_QWORD *)&v369[1];
      v435[2] = v369[1];
      v435[3] = v369[2];
      v436 = v370 & 0x1FF;
      v437 = *((_QWORD *)&v370 + 1);
      v438 = v371;
      outlined init with take of Transform?((uint64_t)v452, (uint64_t)v455, &demangling cache variable for type metadata for String?);
      if (!v455[1])
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v276);
LABEL_295:
        v281 = v325;
LABEL_296:
        v296 = *(_QWORD *)(v281 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v297 = specialized _copyCollectionToContiguousArray<A>(_:)(v281);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v368 = v297;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v368, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v298 = v368;
        swift_bridgeObjectRelease();
        v299 = *(_QWORD *)(v298 + 16);
        if (v299)
        {
          v300 = 0;
          v301 = v298 + 32;
          v302 = v296 - 1;
          v303 = 0.0;
          v304 = INFINITY;
          do
          {
            outlined init with copy of MeshResource._Proto_Level_v1(v301, (uint64_t)&v368);
            outlined init with copy of __REAssetService((uint64_t)v369, (uint64_t)v367);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshResource._Proto_LevelAssemblyData_v1);
            type metadata accessor for MeshResource._Proto_SerialLevelAssemblyData_v1();
            if (swift_dynamicCast()
              && (v305 = *(unsigned int *)(v364 + 16), swift_release(), v355 < v305))
            {
              outlined init with copy of __REAssetService((uint64_t)&v369[2] + 8, (uint64_t)v367);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshResource._Proto_LevelStrategyData_v1);
              type metadata accessor for MeshResource._Proto_ScreenAreaLevelStrategyData_v1();
              if (swift_dynamicCast())
              {
                v303 = *(float *)(v364 + 16);
                swift_release();
              }
              else
              {
                v303 = 0.0;
              }
              outlined init with copy of __REAssetService((uint64_t)&v369[2] + 8, (uint64_t)v367);
              outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v368);
              type metadata accessor for MeshResource._Proto_ViewDepthLevelStrategyData_v1();
              if (swift_dynamicCast())
              {
                v304 = *(float *)(v364 + 16);
                swift_release();
              }
              else
              {
                v304 = INFINITY;
              }
              v300 = v302;
            }
            else
            {
              outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v368);
            }
            --v302;
            v301 += 96;
            --v299;
          }
          while (v299);
          swift_release();
          v6 = v328;
          if ((v300 & 0x8000000000000000) != 0 || HIDWORD(v300))
            goto LABEL_331;
        }
        else
        {
          swift_release();
          v300 = 0;
          v303 = 0.0;
          v304 = INFINITY;
          v6 = v328;
        }
        v306 = *(_QWORD *)&v391[16];
        MEMORY[0x22076E8E8](*(_QWORD *)(v326 + 16), v300, v303, v304);
        MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:name:)(v345, v306, v300);
        swift_setDeallocating();
        RERelease();
        swift_deallocClassInstance();
        outlined release of MeshResource.Part((uint64_t)&v389);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v372, &demangling cache variable for type metadata for AnyMeshBuffer?);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v330;
        v7 = v334;
        goto LABEL_6;
      }
      v357 = (uint64_t)v276;
      v350 = v277;
      outlined retain of MeshResource.Part((uint64_t)&v389);
      outlined retain of String?((uint64_t)v452);
      specialized MeshResource.Part.subscript.getter(0xD000000000000023, 0x800000021BE81920, 0, (uint64_t)&v368);
      v278 = outlined release of MeshResource.Part((uint64_t)&v389);
      v279 = v368;
      if ((_QWORD)v368)
      {
        v439[0] = v368;
        v439[1] = v369[0];
        v439[2] = v369[1];
        v439[3] = v369[2];
        v440 = v370 & 0x1FF;
        v441 = *((_QWORD *)&v370 + 1);
        v442 = v371;
        v280 = ((uint64_t (*)(uint64_t))v368)(v278);
        if (v280)
        {
          v337 = v280;
        }
        else
        {
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v337 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v439);
          outlined consume of MeshBuffer<SIMD3<Float>>?(v279);
        }
        outlined consume of MeshBuffer<SIMD3<Float>>?(v279);
LABEL_291:
        type metadata accessor for MeshAttributeDescriptor();
        *(_QWORD *)(swift_allocObject() + 16) = v322;
        swift_retain();
        swift_retain();
        swift_retain();
        v287 = swift_retain();
        v288 = v276(v287);
        if (v288)
        {
          v289 = v288;
        }
        else
        {
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v435);
          v289 = v290;
          outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v276);
        }
        outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v276);
        v291 = MeshAttributeDescriptor.makeData(jointInfluences:)(v289);
        v293 = v292;
        v294 = Data._bridgeToObjectiveC()().super.isa;
        REMeshDefinitionSetAttributeWithData();

        outlined consume of Data._Representation(v291, v293);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_deallocClassInstance();
        v295 = swift_allocObject();
        *(_QWORD *)(v295 + 16) = v321;
        MeshDefinition.setAttribute(_:skinInfluenceEndIndices:)(v295, v337);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_deallocClassInstance();
        String.utf8CString.getter();
        REMeshDefinitionSetSkeletonName();
        swift_release();
        outlined consume of MeshBuffer<SIMD3<Float>>?(v357);
        outlined release of IKRig.Joint?((uint64_t)v452);
        goto LABEL_295;
      }
      outlined init with take of Transform?((uint64_t)&v391[8], (uint64_t)v451, &demangling cache variable for type metadata for Int32?);
      outlined init with take of Transform?((uint64_t)v451, (uint64_t)&v456, &demangling cache variable for type metadata for Int32?);
      v281 = v325;
      v47 = v350;
      if ((v457 & 1) != 0)
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v276);
        outlined release of IKRig.Joint?((uint64_t)v452);
        goto LABEL_296;
      }
      v282 = v456;
      v283 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      v285 = 0;
      v286 = 0;
      *(_QWORD *)(v283 + 16) = v327;
      *(_QWORD *)&v368 = v283;
      while (!__OFADD__(v285, v282))
      {
        *(_DWORD *)(v283 + 32 + 4 * v286) = v285 + v282;
        v285 += v282;
        if (v327 == ++v286)
        {
          *(_QWORD *)(v283 + 16) = v327;
          destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v283, v284);
          v337 = v368;
          goto LABEL_291;
        }
      }
      __break(1u);
LABEL_323:
      outlined release of MeshResource.Part((uint64_t)&v389);
      swift_release();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
      swift_allocError();
      *v312 = v48;
      v312[1] = v47;
      swift_willThrow();
      swift_release();
      swift_release();
      outlined destroy of AnyMeshBuffer((uint64_t)v367);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v372, &demangling cache variable for type metadata for AnyMeshBuffer?);
      swift_bridgeObjectRelease();
LABEL_321:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v326;
    }
    v136 = *(_QWORD *)&v367[0];
    v137 = BYTE1(v367[1]);
    v366 = *((_QWORD *)&v367[3] + 1);
    v364 = *(_OWORD *)((char *)&v367[1] + 8);
    v365 = *(_OWORD *)((char *)&v367[2] + 8);
    if (!*(_QWORD *)(v81 + 16)
      || (swift_bridgeObjectRetain(),
          v356 = v123,
          specialized __RawDictionaryStorage.find<A>(_:)(v136, v135),
          v139 = v138,
          swift_bridgeObjectRelease(),
          (v139 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      outlined destroy of AnyMeshBuffer((uint64_t)&v364);
      v126 = v458;
      continue;
    }
    v140 = v375;
    if (*(_QWORD *)(v375 + 16))
      break;
LABEL_151:
    if (v137)
    {
      v149 = *((_QWORD *)&v365 + 1);
      v150 = v366;
      __swift_project_boxed_opaque_existential_1(&v364, *((uint64_t *)&v365 + 1));
      v151 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v150 + 56);
      v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v151(&v368, v152, v149, v150);
      v83 = *((_QWORD *)&v368 + 1);
      v153 = (uint64_t (*)(uint64_t))v368;
      v154 = *((_QWORD *)&v369[0] + 1);
      v353 = *(_QWORD *)&v369[0];
      v155 = v369[1];
      v156 = v369[2];
      v349 = *((_QWORD *)&v370 + 1);
      v351 = v370;
      v157 = v371;
      type metadata accessor for MeshAttributeDescriptor();
      *(_QWORD *)(swift_allocObject() + 16) = v344;
      if (!v153)
        goto LABEL_327;
      v381[0] = v153;
      v381[1] = v83;
      v381[2] = v353;
      v381[3] = v154;
      v382 = v155;
      v383 = v156;
      v384 = v351 & 0x1FF;
      v385 = v349;
      v386 = v157;
      swift_retain();
      swift_retain();
      swift_retain();
      v158 = swift_retain();
      v159 = v153(v158);
      if (v159)
      {
        v160 = v159;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v160 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v381);
        outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v153);
      }
      outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v153);
      *(_QWORD *)(swift_allocObject() + 16) = v344;
      v166 = MEMORY[0x22076E630](v344, v160 + 32, *(_QWORD *)(v160 + 16));
      *(_QWORD *)&v368 = specialized Data.init(count:)(v166);
      *((_QWORD *)&v368 + 1) = v167;
      swift_bridgeObjectRetain();
      _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_n((uint64_t)&v368);
      v168 = v368;
      swift_release();
      v169 = Data._bridgeToObjectiveC()().super.isa;
      String.utf8CString.getter();
      REMeshDefinitionSetCustomAttributeWithData();

      swift_release();
      outlined consume of Data._Representation(v168, *((unint64_t *)&v168 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_deallocClassInstance();
      v170 = (uint64_t)v153;
      goto LABEL_164;
    }
    if (one-time initialization token for positions != -1)
      swift_once();
    if (static MeshBuffers.Identifier.positions == v136 && unk_2551A1300 == v135
      || (v161 = _stringCompareWithSmolCheck(_:_:expecting:)(), v162 = v136, (v161 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      *(_QWORD *)(swift_allocObject() + 16) = v333;
      outlined retain of MeshResource.Part((uint64_t)&v389);
      specialized MeshBufferContainer.positions.getter((uint64_t)&v368);
      v163 = outlined release of MeshResource.Part((uint64_t)&v389);
      v387[2] = v369[1];
      v387[3] = v369[2];
      v387[4] = v370;
      v388 = v371;
      v387[0] = v368;
      v387[1] = v369[0];
      v164 = ((uint64_t (*)(uint64_t))v368)(v163);
      if (v164)
      {
        v165 = v164;
      }
      else
      {
        outlined retain of MeshBuffer<SIMD3<Float>>((uint64_t)v387);
        v165 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v387);
        outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v387);
      }
      outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v387);
      *(_QWORD *)(swift_allocObject() + 16) = v333;
      v171 = MEMORY[0x22076E69C](v333, v165 + 32, *(_QWORD *)(v165 + 16));
      v360 = specialized Data.init(count:)(v171);
      v361 = v172;
      swift_bridgeObjectRetain();
      _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_n((uint64_t)&v360);
      v173 = v360;
      v174 = v361;
      swift_release();
      v175 = Data._bridgeToObjectiveC()().super.isa;
      REMeshDefinitionSetAttributeWithData();

      outlined consume of Data._Representation(v173, v174);
      swift_release();
LABEL_194:
      swift_bridgeObjectRelease();
      outlined destroy of AnyMeshBuffer((uint64_t)&v364);
LABEL_195:
      v81 = v346;
LABEL_196:
      v123 = v356;
      v126 = v458;
      continue;
    }
    if (one-time initialization token for normals != -1)
    {
      swift_once();
      v162 = v136;
    }
    if (static MeshBuffers.Identifier.normals == v162 && *(_QWORD *)algn_2551A1318 == v135
      || (v176 = _stringCompareWithSmolCheck(_:_:expecting:)(), v177 = v136, (v176 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      v178 = swift_allocObject();
      *(_QWORD *)(v178 + 16) = v323;
      if (*(_QWORD *)(v332 + 16))
      {
        outlined retain of MeshResource.Part((uint64_t)&v389);
        v179 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F4E786574726576, 0xEC0000006C616D72, 0);
        if ((v180 & 1) != 0)
        {
          outlined init with copy of __REAssetService(*(_QWORD *)(v332 + 56) + 40 * v179, (uint64_t)v359);
          outlined init with take of BindableDataInternal(v359, (uint64_t)&v360);
          v181 = v362;
          v182 = v363;
          __swift_project_boxed_opaque_existential_1(&v360, v362);
          v183 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v182 + 56);
          v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          v183(&v368, v184, v181, v182);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v360);
          v185 = outlined release of MeshResource.Part((uint64_t)&v389);
          v186 = v368;
          if ((_QWORD)v368)
          {
            v392[0] = v368;
            v392[1] = v369[0];
            v392[2] = v369[1];
            v392[3] = v369[2];
            v393 = v370 & 0x1FF;
            v394 = *((_QWORD *)&v370 + 1);
            v395 = v371;
            v187 = ((uint64_t (*)(uint64_t))v368)(v185);
            if (v187)
            {
              v188 = v187;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v188 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v392);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v186);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v186);
            v122 = v331;
LABEL_192:
            v202 = *(_QWORD *)(v178 + 16);
            *(_QWORD *)(swift_allocObject() + 16) = v202;
            v203 = specialized Array.count.getter(v188);
            v204 = MEMORY[0x22076E690](v202, v188 + 32, v203, 0, 0);
            *(_QWORD *)&v368 = specialized Data.init(count:)(v204);
            *((_QWORD *)&v368 + 1) = v205;
            swift_bridgeObjectRetain();
LABEL_193:
            _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_n((uint64_t)&v368);
            v206 = v368;
            swift_release();
            v207 = Data._bridgeToObjectiveC()().super.isa;
            REMeshDefinitionSetAttributeWithData();

            outlined consume of Data._Representation(v206, *((unint64_t *)&v206 + 1));
            swift_setDeallocating();
            MeshAttributeDescriptor.__deallocating_deinit();
            goto LABEL_194;
          }
        }
        else
        {
          outlined release of MeshResource.Part((uint64_t)&v389);
        }
      }
      v188 = specialized static Array._allocateUninitialized(_:)(0);
      goto LABEL_192;
    }
    if (one-time initialization token for tangents != -1)
    {
      swift_once();
      v177 = v136;
    }
    if (static MeshBuffers.Identifier.tangents == v177 && unk_2551A1330 == v135
      || (v189 = _stringCompareWithSmolCheck(_:_:expecting:)(), v190 = v136, (v189 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      v191 = swift_allocObject();
      *(_QWORD *)(v191 + 16) = v320;
      if (*(_QWORD *)(v332 + 16))
      {
        outlined retain of MeshResource.Part((uint64_t)&v389);
        v192 = specialized __RawDictionaryStorage.find<A>(_:)(0x6154786574726576, 0xED0000746E65676ELL, 0);
        if ((v193 & 1) != 0)
        {
          outlined init with copy of __REAssetService(*(_QWORD *)(v332 + 56) + 40 * v192, (uint64_t)v359);
          outlined init with take of BindableDataInternal(v359, (uint64_t)&v360);
          v194 = v362;
          v195 = v363;
          __swift_project_boxed_opaque_existential_1(&v360, v362);
          v196 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v195 + 56);
          v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          v196(&v368, v197, v194, v195);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v360);
          v198 = outlined release of MeshResource.Part((uint64_t)&v389);
          v199 = v368;
          if ((_QWORD)v368)
          {
            v396[0] = v368;
            v396[1] = v369[0];
            v396[2] = v369[1];
            v396[3] = v369[2];
            v397 = v370 & 0x1FF;
            v398 = *((_QWORD *)&v370 + 1);
            v399 = v371;
            v200 = ((uint64_t (*)(uint64_t))v368)(v198);
            if (v200)
            {
              v201 = v200;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v201 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v396);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v199);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v199);
            v122 = v331;
            goto LABEL_215;
          }
        }
        else
        {
          outlined release of MeshResource.Part((uint64_t)&v389);
        }
      }
      v201 = specialized static Array._allocateUninitialized(_:)(0);
LABEL_215:
      v221 = *(_QWORD *)(v191 + 16);
      *(_QWORD *)(swift_allocObject() + 16) = v221;
      v222 = specialized Array.count.getter(v201);
      v223 = MEMORY[0x22076E6B4](v221, v201 + 32, v222, 0, 0);
      *(_QWORD *)&v368 = specialized Data.init(count:)(v223);
      *((_QWORD *)&v368 + 1) = v224;
      swift_bridgeObjectRetain();
      goto LABEL_193;
    }
    if (one-time initialization token for bitangents != -1)
    {
      swift_once();
      v190 = v136;
    }
    if (static MeshBuffers.Identifier.bitangents == v190 && *(_QWORD *)algn_2551A1348 == v135
      || (v208 = _stringCompareWithSmolCheck(_:_:expecting:)(), v209 = v136, (v208 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      v210 = swift_allocObject();
      *(_QWORD *)(v210 + 16) = v319;
      if (*(_QWORD *)(v332 + 16))
      {
        outlined retain of MeshResource.Part((uint64_t)&v389);
        v211 = specialized __RawDictionaryStorage.find<A>(_:)(0x6942786574726576, 0xEF746E65676E6174, 0);
        if ((v212 & 1) != 0)
        {
          outlined init with copy of __REAssetService(*(_QWORD *)(v332 + 56) + 40 * v211, (uint64_t)v359);
          outlined init with take of BindableDataInternal(v359, (uint64_t)&v360);
          v213 = v362;
          v214 = v363;
          __swift_project_boxed_opaque_existential_1(&v360, v362);
          v215 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v214 + 56);
          v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          v215(&v368, v216, v213, v214);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v360);
          v217 = outlined release of MeshResource.Part((uint64_t)&v389);
          v218 = v368;
          if ((_QWORD)v368)
          {
            v400[0] = v368;
            v400[1] = v369[0];
            v400[2] = v369[1];
            v400[3] = v369[2];
            v401 = v370 & 0x1FF;
            v402 = *((_QWORD *)&v370 + 1);
            v403 = v371;
            v219 = ((uint64_t (*)(uint64_t))v368)(v217);
            if (v219)
            {
              v220 = v219;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v220 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v400);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v218);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v218);
            v81 = v346;
            v122 = v331;
LABEL_231:
            MeshDefinition.setAttribute(_:bitangents:)(v210, v220);
LABEL_232:
            swift_setDeallocating();
            MeshAttributeDescriptor.__deallocating_deinit();
LABEL_233:
            swift_bridgeObjectRelease();
            outlined destroy of AnyMeshBuffer((uint64_t)&v364);
            goto LABEL_196;
          }
        }
        else
        {
          outlined release of MeshResource.Part((uint64_t)&v389);
        }
      }
      v220 = specialized static Array._allocateUninitialized(_:)(0);
      goto LABEL_231;
    }
    if (one-time initialization token for textureCoordinates != -1)
    {
      swift_once();
      v209 = v136;
    }
    if (static MeshBuffers.Identifier.textureCoordinates == v209 && unk_2551A1360 == v135
      || (v225 = _stringCompareWithSmolCheck(_:_:expecting:)(), v226 = v136, (v225 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      v227 = swift_allocObject();
      *(_QWORD *)(v227 + 16) = v318;
      if (*(_QWORD *)(v332 + 16))
      {
        outlined retain of MeshResource.Part((uint64_t)&v389);
        v228 = specialized __RawDictionaryStorage.find<A>(_:)(0x5655786574726576, 0xE800000000000000, 0);
        if ((v229 & 1) != 0)
        {
          outlined init with copy of __REAssetService(*(_QWORD *)(v332 + 56) + 40 * v228, (uint64_t)v359);
          outlined init with take of BindableDataInternal(v359, (uint64_t)&v360);
          v230 = v362;
          v231 = v363;
          __swift_project_boxed_opaque_existential_1(&v360, v362);
          v232 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v231 + 56);
          v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
          v232(&v368, v233, v230, v231);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v360);
          v234 = outlined release of MeshResource.Part((uint64_t)&v389);
          v235 = v368;
          if ((_QWORD)v368)
          {
            v404[0] = v368;
            v404[1] = v369[0];
            v404[2] = v369[1];
            v404[3] = v369[2];
            v405 = v370 & 0x1FF;
            v406 = *((_QWORD *)&v370 + 1);
            v407 = v371;
            v236 = ((uint64_t (*)(uint64_t))v368)(v234);
            if (v236)
            {
              v237 = v236;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v237 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v404);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v235);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v235);
            v81 = v346;
            v122 = v331;
            goto LABEL_250;
          }
        }
        else
        {
          outlined release of MeshResource.Part((uint64_t)&v389);
        }
      }
      v237 = specialized static Array._allocateUninitialized(_:)(0);
LABEL_250:
      MeshDefinition.setAttribute(_:uvs:)(v227, v237);
      goto LABEL_232;
    }
    if (one-time initialization token for jointInfluences != -1)
    {
      swift_once();
      v226 = v136;
    }
    v123 = v356;
    if (static MeshBuffers.Identifier.jointInfluences != v226 || unk_2551A1390 != v135)
    {
      v238 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v239 = v136;
      if ((v238 & 1) == 0)
      {
        if (one-time initialization token for jointInfluenceEndIndices != -1)
        {
          swift_once();
          v239 = v136;
        }
        if ((static MeshBuffers.Identifier.jointInfluenceEndIndices != v239 || *(_QWORD *)algn_2551A13A8 != v135)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v240 = *((_QWORD *)&v365 + 1);
          v241 = v366;
          __swift_project_boxed_opaque_existential_1(&v364, *((uint64_t *)&v365 + 1));
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v241 + 32))(&v360, v240, v241);
          switch(v360)
          {
            case 0xAu:
              v253 = *((_QWORD *)&v365 + 1);
              v254 = v366;
              __swift_project_boxed_opaque_existential_1(&v364, *((uint64_t *)&v365 + 1));
              v255 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v254 + 56);
              v256 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
              v255(&v368, v256, v253, v254);
              v257 = v368;
              v258 = *((_QWORD *)&v369[0] + 1);
              v83 = *(_QWORD *)&v369[0];
              v259 = *((_QWORD *)&v369[1] + 1);
              v260 = v369[2];
              v261 = v370;
              v339 = *(_QWORD *)&v369[1];
              v342 = *((_QWORD *)&v370 + 1);
              v262 = v371;
              type metadata accessor for MeshAttributeDescriptor();
              *(_QWORD *)(swift_allocObject() + 16) = v317;
              if (!(_QWORD)v257)
                goto LABEL_329;
              v426 = v257;
              v427 = v83;
              v428 = v258;
              v429 = v339;
              v430 = v259;
              v431 = v260;
              v432 = v261 & 0x1FF;
              v433 = v342;
              v434 = v262;
              swift_retain();
              swift_retain();
              swift_retain();
              v263 = swift_retain();
              if (!((uint64_t (*)(uint64_t))v257)(v263))
              {
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v426);
                outlined consume of MeshBuffer<SIMD3<Float>>?(v257);
              }
              v275 = v257;
              outlined consume of MeshBuffer<SIMD3<Float>>?(v257);
              MeshDefinition.setAttribute(_:custom:name:)();
              break;
            case 9u:
              v264 = *((_QWORD *)&v365 + 1);
              v265 = v366;
              __swift_project_boxed_opaque_existential_1(&v364, *((uint64_t *)&v365 + 1));
              v266 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v265 + 56);
              v267 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
              v266(&v368, v267, v264, v265);
              v268 = v368;
              v269 = *((_QWORD *)&v369[0] + 1);
              v83 = *(_QWORD *)&v369[0];
              v270 = *((_QWORD *)&v369[1] + 1);
              v271 = v369[2];
              v272 = v370;
              v340 = *(_QWORD *)&v369[1];
              v343 = *((_QWORD *)&v370 + 1);
              v273 = v371;
              type metadata accessor for MeshAttributeDescriptor();
              *(_QWORD *)(swift_allocObject() + 16) = v316;
              if (!(_QWORD)v268)
                goto LABEL_330;
              v417 = v268;
              v418 = v83;
              v419 = v269;
              v420 = v340;
              v421 = v270;
              v422 = v271;
              v423 = v272 & 0x1FF;
              v424 = v343;
              v425 = v273;
              swift_retain();
              swift_retain();
              swift_retain();
              v274 = swift_retain();
              if (!((uint64_t (*)(uint64_t))v268)(v274))
              {
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v417);
                outlined consume of MeshBuffer<SIMD3<Float>>?(v268);
              }
              v275 = v268;
              outlined consume of MeshBuffer<SIMD3<Float>>?(v268);
              MeshDefinition.setAttribute(_:custom:name:)();
              break;
            case 8u:
              v242 = *((_QWORD *)&v365 + 1);
              v243 = v366;
              __swift_project_boxed_opaque_existential_1(&v364, *((uint64_t *)&v365 + 1));
              v244 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v243 + 56);
              v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
              v244(&v368, v245, v242, v243);
              v246 = v368;
              v247 = *((_QWORD *)&v369[0] + 1);
              v83 = *(_QWORD *)&v369[0];
              v248 = *((_QWORD *)&v369[1] + 1);
              v249 = v369[2];
              v250 = v370;
              v338 = *(_QWORD *)&v369[1];
              v341 = *((_QWORD *)&v370 + 1);
              v251 = v371;
              type metadata accessor for MeshAttributeDescriptor();
              *(_QWORD *)(swift_allocObject() + 16) = v315;
              if (!(_QWORD)v246)
                goto LABEL_328;
              v408 = v246;
              v409 = v83;
              v410 = v247;
              v411 = v338;
              v412 = v248;
              v413 = v249;
              v414 = v250 & 0x1FF;
              v415 = v341;
              v416 = v251;
              swift_retain();
              swift_retain();
              swift_retain();
              v252 = swift_retain();
              if (!((uint64_t (*)(uint64_t))v246)(v252))
              {
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v408);
                outlined consume of MeshBuffer<SIMD3<Float>>?(v246);
              }
              v275 = v246;
              outlined consume of MeshBuffer<SIMD3<Float>>?(v246);
              MeshDefinition.setAttribute(_:custom:name:)();
              break;
            default:
              goto LABEL_233;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          MeshAttributeDescriptor.__deallocating_deinit();
          v170 = v275;
LABEL_164:
          outlined consume of MeshBuffer<SIMD3<Float>>?(v170);
          outlined destroy of AnyMeshBuffer((uint64_t)&v364);
          v81 = v346;
          v122 = v331;
          goto LABEL_196;
        }
      }
    }
    outlined destroy of AnyMeshBuffer((uint64_t)&v364);
    swift_bridgeObjectRelease();
    v126 = v458;
  }
  swift_bridgeObjectRetain();
  v141 = specialized __RawDictionaryStorage.find<A>(_:)(v136, v135);
  if ((v142 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_151;
  }
  v143 = (uint64_t *)(*(_QWORD *)(v140 + 56) + 16 * v141);
  v145 = *v143;
  v144 = v143[1];
  outlined copy of Data._Representation(*v143, v144);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v81 + 16))
    goto LABEL_150;
  swift_bridgeObjectRetain();
  v146 = specialized __RawDictionaryStorage.find<A>(_:)(v136, v135);
  if ((v147 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_150:
    outlined consume of Data._Representation(v145, v144);
    goto LABEL_151;
  }
  v83 = *(_QWORD *)(*(_QWORD *)(v81 + 56) + 8 * v146);
  swift_bridgeObjectRelease();
  if ((v376 & 0xC000000000000001) != 0)
  {
    MEMORY[0x220769770](v83);
LABEL_147:
    v148 = Data._bridgeToObjectiveC()().super.isa;
    String.utf8CString.getter();
    REMeshDefinitionSetCustomAttributeWithData();

    swift_release();
    outlined consume of Data._Representation(v145, v144);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AnyMeshBuffer((uint64_t)&v364);
    goto LABEL_195;
  }
  if ((v83 & 0x8000000000000000) == 0)
  {
    if (v83 >= *(_QWORD *)((v376 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_325;
    swift_retain();
    goto LABEL_147;
  }
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
  v313 = swift_release();
  __break(1u);
  *(_QWORD *)(v313 + 16) = v83;
  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v313, v314);
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_331:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_332:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t AnyMeshBuffer.customMirror.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[40];

  v1 = (_QWORD *)v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of AnyMeshBuffer(v0, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v9 + 32) = 25705;
  *(_QWORD *)(v9 + 40) = 0xE200000000000000;
  *(_QWORD *)(v9 + 72) = &type metadata for MeshBuffers.Identifier;
  v10 = *(_QWORD *)(v0 + 24);
  v11 = *(_QWORD *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  *(_QWORD *)(v9 + 80) = 0x746E756F63;
  *(_QWORD *)(v9 + 88) = 0xE500000000000000;
  v12 = *(_QWORD *)(v0 + 24);
  v13 = *(_QWORD *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  v15 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v9 + 96) = v14;
  *(_QWORD *)(v9 + 120) = v15;
  *(_QWORD *)(v9 + 128) = 1702125938;
  *(_QWORD *)(v9 + 136) = 0xE400000000000000;
  *(_QWORD *)(v9 + 168) = &type metadata for MeshBuffers.Rate;
  v16 = *(_QWORD *)(v0 + 24);
  v17 = *(_QWORD *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
  *(_QWORD *)(v9 + 176) = 0x54746E656D656C65;
  *(_QWORD *)(v9 + 184) = 0xEB00000000657079;
  *(_QWORD *)(v9 + 216) = &type metadata for MeshBuffers.ElementType;
  v18 = *(_QWORD *)(v0 + 24);
  v19 = *(_QWORD *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t __deallocating_deinit in BufferInstaller #1 in static MeshResource.Part.unpack(coreAsset:modelIndex:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_21BC0A458@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  LOWORD(v4) = a1;
  BYTE2(v4) = BYTE2(a1);
  HIBYTE(v4) = BYTE3(a1);
  v5 = BYTE4(a1);
  v6 = BYTE5(a1);
  v7 = BYTE6(a1);
  REMeshAssetGetModelPartBufferAttributeData();
  result = swift_release();
  *v2 = v1;
  v2[1] = v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 48);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  Swift::Int v14;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  _OWORD *v20;
  __int128 *v21;
  Swift::Int v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  Swift::Int v95;
  uint64_t v96;
  char *__dst;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v2 = a1[1];
  result = _minimumMergeRunLength(_:)(v2);
  if (result >= v2)
  {
    if (v2 < 0)
      goto LABEL_148;
    if (v2)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    return result;
  }
  if (v2 >= 0)
    v4 = v2;
  else
    v4 = v2 + 1;
  if (v2 < -1)
    goto LABEL_156;
  v95 = result;
  v107 = v1;
  if (v2 < 2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v2 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v9 = (char *)MEMORY[0x24BEE4AF8];
      v10 = a1;
LABEL_114:
      v85 = v9;
      v94 = v7;
      if (v11 >= 2)
      {
        v86 = *v10;
        do
        {
          v87 = v11 - 2;
          if (v11 < 2)
            goto LABEL_143;
          if (!v86)
            goto LABEL_155;
          v88 = v85;
          v89 = *(_QWORD *)&v85[16 * v87 + 32];
          v90 = *(_QWORD *)&v85[16 * v11 + 24];
          v91 = v107;
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v86 + 96 * v89), (char *)(v86 + 96 * *(_QWORD *)&v85[16 * v11 + 16]), v86 + 96 * v90, __dst);
          v107 = v91;
          if (v91)
            break;
          if (v90 < v89)
            goto LABEL_144;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_145;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v89;
          *((_QWORD *)v92 + 1) = v90;
          v93 = *((_QWORD *)v88 + 2);
          if (v11 > v93)
            goto LABEL_146;
          memmove(&v88[16 * v11 + 16], &v88[16 * v11 + 32], 16 * (v93 - v11));
          v85 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v11 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v5 = v4 >> 1;
    v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v6 + 16) = v5;
    v94 = v6;
    __dst = (char *)(v6 + 32);
  }
  v8 = 0;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v10 = a1;
  while (1)
  {
    v12 = v8++;
    if (v8 < v2)
    {
      v13 = *v10;
      v14 = v12;
      outlined init with copy of MeshResource._Proto_Level_v1(*v10 + 96 * v8, (uint64_t)&v101);
      v96 = v13;
      outlined init with copy of MeshResource._Proto_Level_v1(v13 + 96 * v12, (uint64_t)&v99);
      if (v99 == (_QWORD)v101 && v100 == *((_QWORD *)&v101 + 1))
        v16 = 0;
      else
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v99);
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v101);
      v8 = v12 + 2;
      if (v12 + 2 < v2)
      {
        v17 = v96 + 96 * v12 + 96;
        while (1)
        {
          outlined init with copy of MeshResource._Proto_Level_v1(v17 + 96, (uint64_t)&v101);
          outlined init with copy of MeshResource._Proto_Level_v1(v17, (uint64_t)&v99);
          v18 = v99 == (_QWORD)v101 && v100 == *((_QWORD *)&v101 + 1);
          v19 = v18 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v99);
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v101);
          if (((v16 ^ v19) & 1) != 0)
            break;
          ++v8;
          v17 += 96;
          if (v2 == v8)
          {
            v8 = v2;
            break;
          }
        }
      }
      if ((v16 & 1) != 0)
      {
        if (v8 < v12)
          goto LABEL_149;
        if (v12 < v8)
        {
          v20 = (_OWORD *)(v96 + 96 * v8 - 96);
          v21 = (__int128 *)(v96 + 96 * v12);
          v22 = v8;
          do
          {
            if (v14 != --v22)
            {
              if (!v96)
                goto LABEL_154;
              v103 = v21[2];
              v104 = v21[3];
              v105 = v21[4];
              v106 = v21[5];
              v101 = *v21;
              v102 = v21[1];
              memmove(v21, v20, 0x60uLL);
              v20[2] = v103;
              v20[3] = v104;
              v20[4] = v105;
              v20[5] = v106;
              *v20 = v101;
              v20[1] = v102;
            }
            ++v14;
            v20 -= 6;
            v21 += 6;
          }
          while (v14 < v22);
        }
      }
    }
    if (v8 >= v2)
      goto LABEL_63;
    if (__OFSUB__(v8, v12))
      goto LABEL_147;
    if (v8 - v12 >= v95)
      goto LABEL_63;
    if (__OFADD__(v12, v95))
      goto LABEL_150;
    if (v12 + v95 < v2)
      v2 = v12 + v95;
    if (v2 < v12)
      break;
    if (v8 != v2)
    {
      v23 = 96 * v8;
      do
      {
        v24 = v12;
        v25 = v23;
        while (1)
        {
          v26 = *v10 + v25;
          outlined init with copy of MeshResource._Proto_Level_v1(v26, (uint64_t)&v101);
          outlined init with copy of MeshResource._Proto_Level_v1(v26 - 96, (uint64_t)&v99);
          if (v99 == (_QWORD)v101 && v100 == *((_QWORD *)&v101 + 1))
            break;
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v99);
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v101);
          if ((v28 & 1) == 0)
            goto LABEL_52;
          if (!*v10)
            goto LABEL_152;
          v29 = (__int128 *)(*v10 + v25);
          v103 = v29[2];
          v104 = v29[3];
          v105 = v29[4];
          v106 = v29[5];
          v101 = *v29;
          v102 = v29[1];
          v30 = *(v29 - 3);
          v29[2] = *(v29 - 4);
          v29[3] = v30;
          v31 = *(v29 - 1);
          v29[4] = *(v29 - 2);
          v29[5] = v31;
          v32 = *(v29 - 5);
          *v29 = *(v29 - 6);
          v29[1] = v32;
          *(v29 - 5) = v102;
          *(v29 - 6) = v101;
          *(v29 - 1) = v106;
          *(v29 - 2) = v105;
          *(v29 - 3) = v104;
          *(v29 - 4) = v103;
          v25 -= 96;
          if (v8 == ++v24)
            goto LABEL_52;
        }
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v99);
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v101);
LABEL_52:
        ++v8;
        v23 += 96;
      }
      while (v8 != v2);
      v8 = v2;
    }
LABEL_63:
    if (v8 < v12)
      goto LABEL_142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v34 = *((_QWORD *)v9 + 2);
    v33 = *((_QWORD *)v9 + 3);
    v11 = v34 + 1;
    if (v34 >= v33 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v11;
    v35 = v9 + 32;
    v36 = &v9[16 * v34 + 32];
    *(_QWORD *)v36 = v12;
    *((_QWORD *)v36 + 1) = v8;
    if (v34)
    {
      v10 = a1;
      while (1)
      {
        v37 = v11 - 1;
        if (v11 >= 4)
        {
          v42 = &v35[16 * v11];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_131;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_132;
          v49 = v11 - 2;
          v50 = &v35[16 * v11 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_134;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_137;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_141;
            v65 = v40 < v75;
            goto LABEL_101;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v66 = *((_QWORD *)v9 + 4);
            v67 = *((_QWORD *)v9 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_95;
          }
          v39 = *((_QWORD *)v9 + 4);
          v38 = *((_QWORD *)v9 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_133;
        v49 = v11 - 2;
        v55 = &v35[16 * v11 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_136;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_139;
        if (__OFADD__(v59, v64))
          goto LABEL_140;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_101:
          if (v65)
            v37 = v49;
          goto LABEL_103;
        }
LABEL_95:
        if ((v60 & 1) != 0)
          goto LABEL_135;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_138;
        if (v71 < v59)
          goto LABEL_15;
LABEL_103:
        v76 = v37 - 1;
        if (v37 - 1 >= v11)
        {
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        v77 = *v10;
        if (!*v10)
          goto LABEL_153;
        v78 = v9;
        v79 = &v35[16 * v76];
        v80 = *(_QWORD *)v79;
        v81 = &v35[16 * v37];
        v82 = *((_QWORD *)v81 + 1);
        v83 = v107;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v77 + 96 * *(_QWORD *)v79), (char *)(v77 + 96 * *(_QWORD *)v81), v77 + 96 * v82, __dst);
        v107 = v83;
        if (v83)
          goto LABEL_111;
        if (v82 < v80)
          goto LABEL_128;
        if (v37 > *((_QWORD *)v78 + 2))
          goto LABEL_129;
        *(_QWORD *)v79 = v80;
        *(_QWORD *)&v35[16 * v76 + 8] = v82;
        v84 = *((_QWORD *)v78 + 2);
        if (v37 >= v84)
          goto LABEL_130;
        v9 = v78;
        v11 = v84 - 1;
        memmove(&v35[16 * v37], v81 + 16, 16 * (v84 - 1 - v37));
        *((_QWORD *)v78 + 2) = v84 - 1;
        v65 = v84 > 2;
        v10 = a1;
        if (!v65)
          goto LABEL_15;
      }
    }
    v11 = 1;
    v10 = a1;
LABEL_15:
    v2 = v10[1];
    if (v8 >= v2)
    {
      v7 = v94;
      goto LABEL_114;
    }
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  Swift::Int v21;
  _QWORD *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  Swift::Int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  Swift::Int v119;
  Swift::Int v120;
  uint64_t v121;
  char *__dst;
  uint64_t v123;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_156;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_164;
  v119 = result;
  v120 = v3;
  v123 = v1;
  v116 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_122:
      v108 = v11;
      v118 = v8;
      if (v12 >= 2)
      {
        v109 = *v116;
        do
        {
          v110 = v12 - 2;
          if (v12 < 2)
            goto LABEL_151;
          if (!v109)
            goto LABEL_163;
          v111 = v108;
          v112 = *(_QWORD *)&v108[16 * v110 + 32];
          v113 = *(_QWORD *)&v108[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v109 + (v112 << 6)), (char *)(v109 + (*(_QWORD *)&v108[16 * v12 + 16] << 6)), v109 + (v113 << 6), __dst);
          if (v123)
            break;
          if (v113 < v112)
            goto LABEL_152;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v111 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v111);
          if (v110 >= *((_QWORD *)v111 + 2))
            goto LABEL_153;
          v114 = &v111[16 * v110 + 32];
          *(_QWORD *)v114 = v112;
          *((_QWORD *)v114 + 1) = v113;
          v115 = *((_QWORD *)v111 + 2);
          if (v12 > v115)
            goto LABEL_154;
          memmove(&v111[16 * v12 + 16], &v111[16 * v12 + 32], 16 * (v115 - v12));
          v108 = v111;
          *((_QWORD *)v111 + 2) = v115 - 1;
          v12 = v115 - 1;
        }
        while (v115 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v118 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v118 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v120;
    v118 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v117 = *a1 + 16;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v121 = v10;
  while (2)
  {
    v13 = v9++;
    if (v9 >= v3)
    {
LABEL_23:
      if (v9 < v3)
        goto LABEL_52;
      goto LABEL_71;
    }
    v14 = v10 + (v9 << 6);
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 16);
    v17 = v10 + (v13 << 6);
    if (v15 == *(_QWORD *)(v17 + 8) && v16 == *(_QWORD *)(v17 + 16))
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_51;
      v20 = 0;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v20 = v19;
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
      {
        v9 = v13 + 2;
        if ((v19 & 1) == 0)
          goto LABEL_23;
LABEL_40:
        if (v21 < v13)
          break;
        goto LABEL_41;
      }
    }
    v22 = (_QWORD *)(v117 + (v21 << 6));
    while (1)
    {
      v24 = v10 + (v9 << 6);
      if (*(v22 - 1) != *(_QWORD *)(v24 + 8) || *v22 != *(_QWORD *)(v24 + 16))
      {
        if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
          goto LABEL_39;
        goto LABEL_29;
      }
      if ((v20 & 1) != 0)
        break;
LABEL_29:
      v23 = v21 + 1;
      v22 += 8;
      v9 = v21;
      v21 = v23;
      if (v23 >= v120)
      {
        v21 = v23;
LABEL_39:
        v3 = v120;
        v9 = v21;
        if ((v20 & 1) == 0)
          goto LABEL_23;
        goto LABEL_40;
      }
    }
    v3 = v120;
    if (v21 >= v13)
    {
LABEL_41:
      if (v13 < v21)
      {
        v26 = (v21 << 6) - 64;
        v27 = v13 << 6;
        v28 = v21;
        v29 = v13;
        do
        {
          if (v29 != --v28)
          {
            if (!v10)
              goto LABEL_162;
            v34 = (__int128 *)(v10 + v27);
            v35 = (__int128 *)(v10 + v26);
            v36 = *(_QWORD *)(v10 + v27);
            v37 = *(_QWORD *)(v10 + v27 + 8);
            v38 = *(_QWORD *)(v10 + v27 + 16);
            v39 = *(_OWORD *)(v10 + v27 + 24);
            v40 = *(_DWORD *)(v10 + v27 + 40);
            v41 = *(_BYTE *)(v10 + v27 + 44);
            v42 = *(_QWORD *)(v10 + v27 + 48);
            v43 = *(_BYTE *)(v10 + v27 + 56);
            if (v27 != v26 || v34 >= v35 + 4)
            {
              v30 = *v35;
              v31 = v35[1];
              v32 = v35[3];
              v34[2] = v35[2];
              v34[3] = v32;
              *v34 = v30;
              v34[1] = v31;
            }
            v33 = v10 + v26;
            *(_QWORD *)v33 = v36;
            *(_QWORD *)(v33 + 8) = v37;
            *(_QWORD *)(v33 + 16) = v38;
            *(_OWORD *)(v33 + 24) = v39;
            *(_DWORD *)(v33 + 40) = v40;
            *(_BYTE *)(v33 + 44) = v41;
            *(_QWORD *)(v33 + 48) = v42;
            *(_BYTE *)(v33 + 56) = v43;
          }
          ++v29;
          v26 -= 64;
          v27 += 64;
        }
        while (v29 < v28);
      }
LABEL_51:
      v9 = v21;
      if (v21 < v3)
      {
LABEL_52:
        if (__OFSUB__(v9, v13))
          goto LABEL_155;
        if (v9 - v13 < v119)
        {
          if (__OFADD__(v13, v119))
            goto LABEL_157;
          if (v13 + v119 < v3)
            v3 = v13 + v119;
          if (v3 < v13)
          {
LABEL_158:
            __break(1u);
            break;
          }
          if (v9 != v3)
          {
            v44 = v10 + (v9 << 6);
            do
            {
              v45 = v44;
              v46 = v13;
              do
              {
                v47 = *(_QWORD *)(v45 + 8) == *(_QWORD *)(v45 - 56) && *(_QWORD *)(v45 + 16) == *(_QWORD *)(v45 - 48);
                if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  break;
                if (!v10)
                  goto LABEL_160;
                v48 = *(_QWORD *)v45;
                v49 = *(_QWORD *)(v45 + 8);
                v50 = *(_QWORD *)(v45 + 16);
                v51 = *(_DWORD *)(v45 + 40);
                v52 = *(_BYTE *)(v45 + 44);
                v53 = *(_QWORD *)(v45 + 48);
                v54 = *(_BYTE *)(v45 + 56);
                v55 = *(_OWORD *)(v45 + 24);
                v56 = *(_OWORD *)(v45 - 48);
                *(_OWORD *)v45 = *(_OWORD *)(v45 - 64);
                *(_OWORD *)(v45 + 16) = v56;
                v57 = *(_OWORD *)(v45 - 16);
                *(_OWORD *)(v45 + 32) = *(_OWORD *)(v45 - 32);
                *(_OWORD *)(v45 + 48) = v57;
                *(_QWORD *)(v45 - 56) = v49;
                *(_QWORD *)(v45 - 48) = v50;
                *(_OWORD *)(v45 - 40) = v55;
                *(_DWORD *)(v45 - 24) = v51;
                *(_BYTE *)(v45 - 20) = v52;
                *(_QWORD *)(v45 - 16) = v53;
                *(_BYTE *)(v45 - 8) = v54;
                ++v46;
                *(_QWORD *)(v45 - 64) = v48;
                v45 -= 64;
              }
              while (v9 != v46);
              ++v9;
              v44 += 64;
            }
            while (v9 != v3);
            v9 = v3;
          }
        }
      }
LABEL_71:
      if (v9 < v13)
        goto LABEL_150;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v59 = *((_QWORD *)v11 + 2);
      v58 = *((_QWORD *)v11 + 3);
      v12 = v59 + 1;
      if (v59 >= v58 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v12;
      v60 = v11 + 32;
      v61 = &v11[16 * v59 + 32];
      *(_QWORD *)v61 = v13;
      *((_QWORD *)v61 + 1) = v9;
      if (v59)
      {
        v10 = v121;
        while (1)
        {
          v62 = v12 - 1;
          if (v12 >= 4)
          {
            v67 = &v60[16 * v12];
            v68 = *((_QWORD *)v67 - 8);
            v69 = *((_QWORD *)v67 - 7);
            v73 = __OFSUB__(v69, v68);
            v70 = v69 - v68;
            if (v73)
              goto LABEL_139;
            v72 = *((_QWORD *)v67 - 6);
            v71 = *((_QWORD *)v67 - 5);
            v73 = __OFSUB__(v71, v72);
            v65 = v71 - v72;
            v66 = v73;
            if (v73)
              goto LABEL_140;
            v74 = v12 - 2;
            v75 = &v60[16 * v12 - 32];
            v77 = *(_QWORD *)v75;
            v76 = *((_QWORD *)v75 + 1);
            v73 = __OFSUB__(v76, v77);
            v78 = v76 - v77;
            if (v73)
              goto LABEL_142;
            v73 = __OFADD__(v65, v78);
            v79 = v65 + v78;
            if (v73)
              goto LABEL_145;
            if (v79 >= v70)
            {
              v97 = &v60[16 * v62];
              v99 = *(_QWORD *)v97;
              v98 = *((_QWORD *)v97 + 1);
              v73 = __OFSUB__(v98, v99);
              v100 = v98 - v99;
              if (v73)
                goto LABEL_149;
              v90 = v65 < v100;
              goto LABEL_109;
            }
          }
          else
          {
            if (v12 != 3)
            {
              v91 = *((_QWORD *)v11 + 4);
              v92 = *((_QWORD *)v11 + 5);
              v73 = __OFSUB__(v92, v91);
              v84 = v92 - v91;
              v85 = v73;
              goto LABEL_103;
            }
            v64 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v73 = __OFSUB__(v63, v64);
            v65 = v63 - v64;
            v66 = v73;
          }
          if ((v66 & 1) != 0)
            goto LABEL_141;
          v74 = v12 - 2;
          v80 = &v60[16 * v12 - 32];
          v82 = *(_QWORD *)v80;
          v81 = *((_QWORD *)v80 + 1);
          v83 = __OFSUB__(v81, v82);
          v84 = v81 - v82;
          v85 = v83;
          if (v83)
            goto LABEL_144;
          v86 = &v60[16 * v62];
          v88 = *(_QWORD *)v86;
          v87 = *((_QWORD *)v86 + 1);
          v73 = __OFSUB__(v87, v88);
          v89 = v87 - v88;
          if (v73)
            goto LABEL_147;
          if (__OFADD__(v84, v89))
            goto LABEL_148;
          if (v84 + v89 >= v65)
          {
            v90 = v65 < v89;
LABEL_109:
            if (v90)
              v62 = v74;
            goto LABEL_111;
          }
LABEL_103:
          if ((v85 & 1) != 0)
            goto LABEL_143;
          v93 = &v60[16 * v62];
          v95 = *(_QWORD *)v93;
          v94 = *((_QWORD *)v93 + 1);
          v73 = __OFSUB__(v94, v95);
          v96 = v94 - v95;
          if (v73)
            goto LABEL_146;
          if (v96 < v84)
            goto LABEL_15;
LABEL_111:
          v101 = v62 - 1;
          if (v62 - 1 >= v12)
          {
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
            goto LABEL_158;
          }
          if (!v10)
            goto LABEL_161;
          v102 = v10;
          v103 = &v60[16 * v101];
          v104 = *(_QWORD *)v103;
          v105 = &v60[16 * v62];
          v106 = *((_QWORD *)v105 + 1);
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v102 + (*(_QWORD *)v103 << 6)), (char *)(v102 + (*(_QWORD *)v105 << 6)), v102 + (v106 << 6), __dst);
          if (v123)
            goto LABEL_119;
          if (v106 < v104)
            goto LABEL_136;
          if (v62 > *((_QWORD *)v11 + 2))
            goto LABEL_137;
          *(_QWORD *)v103 = v104;
          *(_QWORD *)&v60[16 * v101 + 8] = v106;
          v107 = *((_QWORD *)v11 + 2);
          if (v62 >= v107)
            goto LABEL_138;
          v12 = v107 - 1;
          memmove(&v60[16 * v62], v105 + 16, 16 * (v107 - 1 - v62));
          *((_QWORD *)v11 + 2) = v107 - 1;
          v90 = v107 > 2;
          v10 = v121;
          if (!v90)
            goto LABEL_15;
        }
      }
      v12 = 1;
      v10 = v121;
LABEL_15:
      v3 = v120;
      if (v9 >= v120)
      {
        v8 = v118;
        goto LABEL_122;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  Swift::Int v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  float v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  __int128 *v97;
  float v98;
  _OWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  char v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  Swift::Int v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  Swift::Int v125;
  Swift::Int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  float *v131;
  uint64_t v132;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v92 = (__int128 *)*a1;
      v93 = -1;
      v94 = 1;
      v95 = (__int128 *)*a1;
      do
      {
        v96 = v93;
        v97 = v95;
        do
        {
          v98 = *((float *)v97 + 36);
          if (v98 >= *((float *)v97 + 12))
            break;
          if (!v92)
            goto LABEL_142;
          v99 = v97 + 6;
          v100 = *((_QWORD *)v97 + 12);
          v101 = v97[7];
          v102 = v97[8];
          v103 = *((_BYTE *)v97 + 168);
          v104 = *((_QWORD *)v97 + 22);
          v105 = *(__int128 *)((char *)v97 + 152);
          v106 = v97[3];
          v97[8] = v97[2];
          v97[9] = v106;
          v107 = v97[5];
          v97[10] = v97[4];
          v97[11] = v107;
          v108 = *v97;
          v109 = v97[1];
          *(_QWORD *)v97 = v100;
          v97[1] = v101;
          v97[2] = v102;
          *((float *)v97 + 12) = v98;
          *(__int128 *)((char *)v97 + 56) = v105;
          *((_BYTE *)v97 + 72) = v103;
          *((_QWORD *)v97 + 10) = v104;
          v97 -= 6;
          *v99 = v108;
          v99[1] = v109;
        }
        while (!__CFADD__(v96++, 1));
        ++v94;
        v95 += 6;
        --v93;
      }
      while (v94 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_147;
  v125 = result;
  v121 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v131 = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_104:
      v111 = v11;
      v124 = v8;
      if (v12 >= 2)
      {
        v112 = *v121;
        do
        {
          v113 = v12 - 2;
          if (v12 < 2)
            goto LABEL_133;
          if (!v112)
            goto LABEL_146;
          v114 = v111;
          v115 = *(_QWORD *)&v111[16 * v113 + 32];
          v116 = *(_QWORD *)&v111[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v112 + 96 * v115), (float *)(v112 + 96 * *(_QWORD *)&v111[16 * v12 + 16]), v112 + 96 * v116, v131);
          if (v1)
            break;
          if (v116 < v115)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
          if (v113 >= *((_QWORD *)v114 + 2))
            goto LABEL_135;
          v117 = &v114[16 * v113 + 32];
          *(_QWORD *)v117 = v115;
          *((_QWORD *)v117 + 1) = v116;
          v118 = *((_QWORD *)v114 + 2);
          if (v12 > v118)
            goto LABEL_136;
          memmove(&v114[16 * v12 + 16], &v114[16 * v12 + 32], 16 * (v118 - v12));
          v111 = v114;
          *((_QWORD *)v114 + 2) = v118 - 1;
          v12 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_94:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v124 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v124 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v124 = v7;
    v131 = (float *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v122 = *a1 + 144;
  v123 = *a1 + 48;
  v120 = *a1 - 96;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v126 = v3;
  v132 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(float *)(v123 + 96 * v9);
      v15 = *(float *)(v123 + 96 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = (float *)(v122 + 96 * v13);
        while (v14 < v15 != v16[24] >= *v16)
        {
          ++v9;
          v16 += 24;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_139;
        if (v13 < v9)
        {
          v17 = 96 * v9;
          v18 = 96 * v13;
          v19 = v9;
          v119 = v13;
          do
          {
            if (v13 != --v19)
            {
              if (!v10)
                goto LABEL_145;
              v20 = v11;
              v21 = v10 + v17;
              v22 = *(_QWORD *)(v10 + v18);
              v128 = *(_OWORD *)(v10 + v18 + 32);
              v129 = *(_OWORD *)(v10 + v18 + 16);
              v23 = *(_DWORD *)(v10 + v18 + 48);
              v24 = *(_BYTE *)(v10 + v18 + 72);
              v130 = *(_QWORD *)(v10 + v18 + 80);
              v127 = *(_OWORD *)(v10 + v18 + 56);
              memmove((void *)(v10 + v18), (const void *)(v10 + v17 - 96), 0x60uLL);
              v10 = v132;
              *(_QWORD *)(v21 - 96) = v22;
              *(_OWORD *)(v21 - 80) = v129;
              *(_OWORD *)(v21 - 64) = v128;
              *(_DWORD *)(v21 - 48) = v23;
              *(_OWORD *)(v21 - 40) = v127;
              *(_BYTE *)(v21 - 24) = v24;
              *(_QWORD *)(v21 - 16) = v130;
              v11 = v20;
            }
            ++v13;
            v17 -= 96;
            v18 += 96;
          }
          while (v13 < v19);
          v3 = v126;
          v13 = v119;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_137;
    if (v9 - v13 >= v125)
      goto LABEL_47;
    v25 = v13 + v125;
    if (__OFADD__(v13, v125))
      goto LABEL_140;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v13)
      break;
    if (v9 != v25)
    {
      v26 = v120 + 96 * v9;
      do
      {
        v27 = v13;
        v28 = v26;
        do
        {
          v29 = *(float *)(v28 + 144);
          if (v29 >= *(float *)(v28 + 48))
            break;
          if (!v10)
            goto LABEL_143;
          v30 = (_OWORD *)(v28 + 96);
          v31 = *(_QWORD *)(v28 + 96);
          v32 = *(_OWORD *)(v28 + 112);
          v33 = *(_OWORD *)(v28 + 128);
          v34 = *(_BYTE *)(v28 + 168);
          v35 = *(_QWORD *)(v28 + 176);
          v36 = *(_OWORD *)(v28 + 152);
          v37 = *(_OWORD *)(v28 + 48);
          *(_OWORD *)(v28 + 128) = *(_OWORD *)(v28 + 32);
          *(_OWORD *)(v28 + 144) = v37;
          v38 = *(_OWORD *)(v28 + 80);
          *(_OWORD *)(v28 + 160) = *(_OWORD *)(v28 + 64);
          *(_OWORD *)(v28 + 176) = v38;
          v39 = *(_OWORD *)v28;
          v40 = *(_OWORD *)(v28 + 16);
          *(_QWORD *)v28 = v31;
          *(_OWORD *)(v28 + 16) = v32;
          *(_OWORD *)(v28 + 32) = v33;
          *(float *)(v28 + 48) = v29;
          *(_OWORD *)(v28 + 56) = v36;
          *(_BYTE *)(v28 + 72) = v34;
          *(_QWORD *)(v28 + 80) = v35;
          v28 -= 96;
          ++v27;
          *v30 = v39;
          v30[1] = v40;
        }
        while (v9 != v27);
        ++v9;
        v26 += 96;
      }
      while (v9 != v25);
      v9 = v25;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_132;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v42 = *((_QWORD *)v11 + 2);
    v41 = *((_QWORD *)v11 + 3);
    v12 = v42 + 1;
    v10 = v132;
    if (v42 >= v41 >> 1)
    {
      v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v11);
      v10 = v132;
      v11 = v91;
    }
    *((_QWORD *)v11 + 2) = v12;
    v43 = v11 + 32;
    v44 = &v11[16 * v42 + 32];
    *(_QWORD *)v44 = v13;
    *((_QWORD *)v44 + 1) = v9;
    if (v42)
    {
      while (1)
      {
        v45 = v12 - 1;
        if (v12 >= 4)
        {
          v50 = &v43[16 * v12];
          v51 = *((_QWORD *)v50 - 8);
          v52 = *((_QWORD *)v50 - 7);
          v56 = __OFSUB__(v52, v51);
          v53 = v52 - v51;
          if (v56)
            goto LABEL_121;
          v55 = *((_QWORD *)v50 - 6);
          v54 = *((_QWORD *)v50 - 5);
          v56 = __OFSUB__(v54, v55);
          v48 = v54 - v55;
          v49 = v56;
          if (v56)
            goto LABEL_122;
          v57 = v12 - 2;
          v58 = &v43[16 * v12 - 32];
          v60 = *(_QWORD *)v58;
          v59 = *((_QWORD *)v58 + 1);
          v56 = __OFSUB__(v59, v60);
          v61 = v59 - v60;
          if (v56)
            goto LABEL_124;
          v56 = __OFADD__(v48, v61);
          v62 = v48 + v61;
          if (v56)
            goto LABEL_127;
          if (v62 >= v53)
          {
            v80 = &v43[16 * v45];
            v82 = *(_QWORD *)v80;
            v81 = *((_QWORD *)v80 + 1);
            v56 = __OFSUB__(v81, v82);
            v83 = v81 - v82;
            if (v56)
              goto LABEL_131;
            v73 = v48 < v83;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v74 = *((_QWORD *)v11 + 4);
            v75 = *((_QWORD *)v11 + 5);
            v56 = __OFSUB__(v75, v74);
            v67 = v75 - v74;
            v68 = v56;
            goto LABEL_78;
          }
          v47 = *((_QWORD *)v11 + 4);
          v46 = *((_QWORD *)v11 + 5);
          v56 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          v49 = v56;
        }
        if ((v49 & 1) != 0)
          goto LABEL_123;
        v57 = v12 - 2;
        v63 = &v43[16 * v12 - 32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v66 = __OFSUB__(v64, v65);
        v67 = v64 - v65;
        v68 = v66;
        if (v66)
          goto LABEL_126;
        v69 = &v43[16 * v45];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v56 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v56)
          goto LABEL_129;
        if (__OFADD__(v67, v72))
          goto LABEL_130;
        if (v67 + v72 >= v48)
        {
          v73 = v48 < v72;
LABEL_84:
          if (v73)
            v45 = v57;
          goto LABEL_86;
        }
LABEL_78:
        if ((v68 & 1) != 0)
          goto LABEL_125;
        v76 = &v43[16 * v45];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v56 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v56)
          goto LABEL_128;
        if (v79 < v67)
          goto LABEL_15;
LABEL_86:
        v84 = v45 - 1;
        if (v45 - 1 >= v12)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v10)
          goto LABEL_144;
        v85 = v11;
        v86 = &v43[16 * v84];
        v87 = *(_QWORD *)v86;
        v88 = &v43[16 * v45];
        v89 = *((_QWORD *)v88 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v10 + 96 * *(_QWORD *)v86), (float *)(v10 + 96 * *(_QWORD *)v88), v10 + 96 * v89, v131);
        if (v1)
          goto LABEL_94;
        if (v89 < v87)
          goto LABEL_118;
        if (v45 > *((_QWORD *)v85 + 2))
          goto LABEL_119;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v43[16 * v84 + 8] = v89;
        v90 = *((_QWORD *)v85 + 2);
        if (v45 >= v90)
          goto LABEL_120;
        v11 = v85;
        v12 = v90 - 1;
        memmove(&v43[16 * v45], v88 + 16, 16 * (v90 - 1 - v45));
        *((_QWORD *)v85 + 2) = v90 - 1;
        v10 = v132;
        if (v90 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v126;
    if (v9 >= v126)
    {
      v8 = v124;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[12];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a3 != a2)
  {
    v5 = a3;
    v7 = result;
    v8 = 96 * a3;
LABEL_6:
    v9 = v7;
    v10 = v8;
    while (1)
    {
      v11 = *a4 + v10;
      outlined init with copy of MeshResource._Proto_Level_v1(v11, (uint64_t)&v19);
      outlined init with copy of MeshResource._Proto_Level_v1(v11 - 96, (uint64_t)v18);
      if (v18[0] == (_QWORD)v19 && v18[1] == *((_QWORD *)&v19 + 1))
      {
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v18);
        result = outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v19);
LABEL_5:
        ++v5;
        v8 += 96;
        if (v5 == a2)
          return result;
        goto LABEL_6;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v18);
      result = outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v19);
      if ((v13 & 1) == 0)
        goto LABEL_5;
      if (!*a4)
        break;
      v14 = (__int128 *)(*a4 + v10);
      v21 = v14[2];
      v22 = v14[3];
      v23 = v14[4];
      v24 = v14[5];
      v19 = *v14;
      v20 = v14[1];
      v15 = *(v14 - 3);
      v14[2] = *(v14 - 4);
      v14[3] = v15;
      v16 = *(v14 - 1);
      v14[4] = *(v14 - 2);
      v14[5] = v16;
      v17 = *(v14 - 5);
      *v14 = *(v14 - 6);
      v14[1] = v17;
      *(v14 - 5) = v20;
      *(v14 - 6) = v19;
      *(v14 - 1) = v24;
      *(v14 - 2) = v23;
      *(v14 - 3) = v22;
      *(v14 - 4) = v21;
      v10 -= 96;
      if (v5 == ++v9)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = (uint64_t *)(*a4 + (a3 << 6));
LABEL_5:
    v9 = v8;
    v10 = v6;
    while (1)
    {
      result = v9[1];
      v11 = result == *(v9 - 7) && v9[2] == *(v9 - 6);
      if (v11 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v12 = *v9;
      v13 = v9[1];
      v14 = v9[2];
      v15 = *((_DWORD *)v9 + 10);
      v16 = *((_BYTE *)v9 + 44);
      v17 = v9[6];
      v18 = *((_BYTE *)v9 + 56);
      v19 = *(_OWORD *)(v9 + 3);
      v20 = *((_OWORD *)v9 - 3);
      *(_OWORD *)v9 = *((_OWORD *)v9 - 4);
      *((_OWORD *)v9 + 1) = v20;
      v21 = *((_OWORD *)v9 - 1);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v9 - 2);
      *((_OWORD *)v9 + 3) = v21;
      *(v9 - 7) = v13;
      *(v9 - 6) = v14;
      *(_OWORD *)(v9 - 5) = v19;
      *((_DWORD *)v9 - 6) = v15;
      *((_BYTE *)v9 - 20) = v16;
      *(v9 - 2) = v17;
      *((_BYTE *)v9 - 8) = v18;
      ++v10;
      *(v9 - 8) = v12;
      v9 -= 8;
      if (v4 == v10)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _BYTE v33[40];
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MeshBuffers.Identifier, AnyMeshBuffer>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = 0;
  v34 = a1;
  v4 = *(_QWORD *)(a1 + 64);
  v27 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  v28 = (unint64_t)(v5 + 63) >> 6;
  v29 = (_QWORD *)result;
  v30 = result + 64;
  if ((v6 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v9 = v3;
  for (i = v8 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = *(_QWORD *)(v34 + 48) + 24 * i;
    v17 = *(_QWORD *)v15;
    v16 = *(_QWORD *)(v15 + 8);
    v18 = *(_BYTE *)(v15 + 16);
    v19 = *(_BYTE *)(v15 + 17);
    outlined init with copy of __REAssetService(*(_QWORD *)(v34 + 56) + 40 * i, (uint64_t)v33);
    outlined init with copy of __REAssetService((uint64_t)v33, (uint64_t)v31);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    result = (uint64_t)v29;
    *(_QWORD *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v20 = v29[6] + 24 * i;
    *(_QWORD *)v20 = v17;
    *(_QWORD *)(v20 + 8) = v16;
    *(_BYTE *)(v20 + 16) = v18;
    *(_BYTE *)(v20 + 17) = v19;
    v21 = v29[7] + 40 * i;
    v22 = v31[0];
    v23 = v31[1];
    *(_QWORD *)(v21 + 32) = v32;
    *(_OWORD *)v21 = v22;
    *(_OWORD *)(v21 + 16) = v23;
    v24 = v29[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v29[2] = v26;
    v3 = v9;
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v11 >= v28)
      return result;
    v12 = *(_QWORD *)(v27 + 8 * v11);
    v13 = v3 + 1;
    if (!v12)
    {
      v13 = v3 + 2;
      if (v3 + 2 >= v28)
        return result;
      v12 = *(_QWORD *)(v27 + 8 * v13);
      if (!v12)
      {
        v13 = v3 + 3;
        if (v3 + 3 >= v28)
          return result;
        v12 = *(_QWORD *)(v27 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v7 = (v12 - 1) & v12;
    v9 = v13;
  }
  v14 = v3 + 4;
  if (v3 + 4 >= v28)
    return result;
  v12 = *(_QWORD *)(v27 + 8 * v14);
  if (v12)
  {
    v13 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v28)
      return result;
    v12 = *(_QWORD *)(v27 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a1)
    return 0;
  v4 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = 0;
  swift_bridgeObjectRetain();
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (a1)
    return 0;
  v5 = *a2;
  v4 = a2[1];
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return 1;
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  if (a1)
    return 0;
  swift_retain();
  v5 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(a3);
  *(_QWORD *)(swift_allocObject() + 16) = v5;
  return 1;
}

uint64_t specialized closure #1 in ConversionBuffer.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = (*(uint64_t (**)(void))(a2 + 48))();
  if (!v9)
    return 0;
  v10 = v8;
  v11 = v9;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v11;
  v12[3] = a3;
  v12[4] = a4;
  swift_retain();
  return v10;
}

uint64_t specialized closure #1 in MeshBuffer.init<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t ModelPartBufferAttributeCount;
  uint64_t v7;

  v5 = *a1;
  ModelPartBufferAttributeCount = REMeshAssetGetModelPartBufferAttributeCount();
  swift_retain();
  v7 = a3(ModelPartBufferAttributeCount, v5, 0, ModelPartBufferAttributeCount, a2);
  swift_release();
  return v7;
}

unint64_t specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MeshBuffers.Identifier.BufferName.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t ModelPartBufferAttributeData;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v6 + 16) = a1;
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
    }
    ModelPartBufferAttributeData = REMeshAssetGetModelPartBufferAttributeData();
    if (ModelPartBufferAttributeData <= a1)
    {
      *(_QWORD *)(v6 + 16) = ModelPartBufferAttributeData;
      return v6;
    }
    __break(1u);
  }
  swift_release();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t ModelPartBufferAttributeData;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v2 + 16) = a1;
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
    }
    ModelPartBufferAttributeData = REMeshAssetGetModelPartBufferAttributeData();
    if (ModelPartBufferAttributeData <= a1)
    {
      *(_QWORD *)(v2 + 16) = ModelPartBufferAttributeData;
      return v2;
    }
    __break(1u);
  }
  swift_release();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SequenceBuffer.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = v8;
  v15 = v9;
  v16 = v10;
  v17 = v11;
  Sequence.count(where:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  return AnySequence.init<A>(_:)();
}

uint64_t sub_21BC0C780()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in MeshBuffer.init<A>(_:)()
{
  return 0;
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return partial apply for specialized closure #3 in MeshBuffer.init<A>(_:)();
}

uint64_t partial apply for specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Int8>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<UInt8>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Int16>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<UInt16>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Int32>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<UInt32>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Float>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Double>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<SIMD2<Float>>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<SIMD3<Float>>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<SIMD4<Float>>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<MeshJointInfluence>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, (uint64_t)&type metadata for MeshJointInfluence, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[MeshJointInfluence]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD4<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, &demangling cache variable for type metadata for SIMD3<Float>, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD3<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, (uint64_t)&type metadata for FloatVector3Packed, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[FloatVector3Packed]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, &demangling cache variable for type metadata for SIMD2<Float>, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD2<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x24BEE13C8], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Double]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x24BEE14E8], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Float]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x24BEE3F88], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int32]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x24BEE3F30], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int16]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x24BEE3E50], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int8]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x24BEE44F0], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt32]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x24BEE4478], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt16]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x24BEE4260], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt8]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<MeshJointInfluence>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[MeshJointInfluence]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<SIMD4<Float>>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD4<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<SIMD3<Float>>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<SIMD2<Float>>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD2<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Double>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Double]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Float>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Float]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<UInt32>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt32]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Int32>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int32]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<UInt16>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt16]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Int16>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int16]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<UInt8>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt8]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Int8>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int8]>>);
}

uint64_t lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffers.Semantic<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of AnyMeshBuffer(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyMeshBuffer(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t outlined copy of MeshDescriptor.Materials(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of MeshDescriptor.Materials(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of MeshDescriptor.Primitives?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return outlined copy of MeshDescriptor.Primitives(a1, a2, a3);
  return a1;
}

uint64_t outlined copy of MeshDescriptor.Primitives(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 < 2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of MeshDescriptor.Primitives?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return outlined consume of MeshDescriptor.Primitives(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of MeshDescriptor.Primitives(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 < 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized MeshDescriptor.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  char v21;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v6;
  v16 = v6[1];
  v17 = v7;
  v8 = v6[2];
  v14 = v6[3];
  v15 = v8;
  v9 = *((_QWORD *)v6 + 8);
  v10 = *((_QWORD *)v6 + 9);
  v11 = *((_BYTE *)v6 + 80);
  (*(void (**)(char *))(v12 + 16))(v5);
  v18[0] = v17;
  v18[1] = v16;
  v18[2] = v15;
  v18[3] = v14;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  return MeshBufferDictionary.subscript.setter((uint64_t)v18, (uint64_t)v5, a3);
}

uint64_t outlined copy of MeshDescriptor.Skinning?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of MeshDescriptor(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v2, v3);
  outlined copy of MeshDescriptor.Primitives?(v4, v5, v7);
  outlined copy of MeshDescriptor.Skinning?(v9, v6);
  return a1;
}

uint64_t outlined release of MeshDescriptor(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MeshDescriptor.Materials(v2, v3);
  outlined consume of MeshDescriptor.Primitives?(v4, v5, v7);
  outlined consume of StateMachineGraph?(v9, v6);
  return a1;
}

uint64_t outlined init with take of MeshDescriptor.Materials(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier;
  if (!lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffers.Identifier, &type metadata for MeshBuffers.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier;
  if (!lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffers.Identifier, &type metadata for MeshBuffers.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshBuffers.Rate and conformance MeshBuffers.Rate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshBuffers.Rate and conformance MeshBuffers.Rate;
  if (!lazy protocol witness table cache variable for type MeshBuffers.Rate and conformance MeshBuffers.Rate)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffers.Rate, &type metadata for MeshBuffers.Rate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshBuffers.Rate and conformance MeshBuffers.Rate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshBuffers.ElementType and conformance MeshBuffers.ElementType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshBuffers.ElementType and conformance MeshBuffers.ElementType;
  if (!lazy protocol witness table cache variable for type MeshBuffers.ElementType and conformance MeshBuffers.ElementType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffers.ElementType, &type metadata for MeshBuffers.ElementType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshBuffers.ElementType and conformance MeshBuffers.ElementType);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for MeshBuffers.Semantic<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshBuffers.Semantic<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MeshBuffer<A>()
{
  JUMPOUT(0x220772E3CLL);
}

int *sub_21BC0CE6C@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t *sub_21BC0CE78(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;

  v2 = *result;
  if (*result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

float sub_21BC0CEA4@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 4);
  *a2 = result;
  return result;
}

float sub_21BC0CEB0(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(float *)(a2 + 4) = *a1;
  return result;
}

uint64_t sub_21BC0CEC4()
{
  return 16;
}

__n128 sub_21BC0CED0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_21BC0CEDC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for MeshBufferContainer.normals : <A>A(a1, a2, (void (*)(_OWORD *__return_ptr, _QWORD, _QWORD))MeshBufferContainer.normals.getter, a3);
}

uint64_t sub_21BC0CEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MeshBufferContainer.normals : <A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))MeshBufferContainer.normals.setter);
}

uint64_t sub_21BC0CF14()
{
  return 16;
}

__n128 sub_21BC0CF20(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_21BC0CF2C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for MeshBufferContainer.normals : <A>A(a1, a2, (void (*)(_OWORD *__return_ptr, _QWORD, _QWORD))MeshBufferContainer.tangents.getter, a3);
}

uint64_t sub_21BC0CF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MeshBufferContainer.normals : <A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))MeshBufferContainer.tangents.setter);
}

uint64_t sub_21BC0CF64()
{
  return 16;
}

__n128 sub_21BC0CF70(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_21BC0CF7C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for MeshBufferContainer.normals : <A>A(a1, a2, (void (*)(_OWORD *__return_ptr, _QWORD, _QWORD))MeshBufferContainer.bitangents.getter, a3);
}

uint64_t sub_21BC0CF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MeshBufferContainer.normals : <A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))MeshBufferContainer.bitangents.setter);
}

uint64_t sub_21BC0CFB4()
{
  return 16;
}

__n128 sub_21BC0CFC0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_21BC0CFCC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for MeshBufferContainer.normals : <A>A(a1, a2, (void (*)(_OWORD *__return_ptr, _QWORD, _QWORD))MeshBufferContainer.textureCoordinates.getter, a3);
}

uint64_t sub_21BC0CFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MeshBufferContainer.normals : <A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))MeshBufferContainer.textureCoordinates.setter);
}

uint64_t sub_21BC0D004()
{
  return 16;
}

__n128 sub_21BC0D010(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BC0D024()
{
  return 16;
}

__n128 sub_21BC0D030(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for MeshJointInfluence()
{
  return &type metadata for MeshJointInfluence;
}

ValueMetadata *type metadata accessor for MeshBuffers()
{
  return &type metadata for MeshBuffers;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for MeshBuffers.Identifier()
{
  return &type metadata for MeshBuffers.Identifier;
}

uint64_t storeEnumTagSinglePayload for MeshBuffers.Rate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BC0D0E0 + 4 * byte_21BE65429[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BC0D114 + 4 * byte_21BE65424[v4]))();
}

uint64_t sub_21BC0D114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC0D11C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC0D124);
  return result;
}

uint64_t sub_21BC0D130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC0D138);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BC0D13C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC0D144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshBuffers.Rate()
{
  return &type metadata for MeshBuffers.Rate;
}

uint64_t storeEnumTagSinglePayload for MeshBuffers.ElementType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_21BC0D1AC + 4 * byte_21BE65433[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_21BC0D1E0 + 4 * byte_21BE6542E[v4]))();
}

uint64_t sub_21BC0D1E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC0D1E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC0D1F0);
  return result;
}

uint64_t sub_21BC0D1FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC0D204);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_21BC0D208(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC0D210(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshBuffers.ElementType()
{
  return &type metadata for MeshBuffers.ElementType;
}

uint64_t dispatch thunk of MeshBufferSemantic.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t initializeBufferWithCopyOfBuffer for MeshBuffers.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshBuffers.Identifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for MeshBuffers.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBuffers.Identifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBuffers.Identifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for MeshBuffers.Semantic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MeshBuffers.Semantic);
}

uint64_t initializeWithCopy for MeshBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v3;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MeshBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for MeshBuffer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t type metadata accessor for MeshBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MeshBuffer);
}

uint64_t destroy for MeshBuffer.Iterator()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MeshBuffer.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for MeshBuffer.Iterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MeshBuffer.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBuffer.Iterator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBuffer.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t initializeWithCopy for AnyMeshBuffer(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyMeshBuffer(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t assignWithTake for AnyMeshBuffer(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyMeshBuffer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyMeshBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyMeshBuffer()
{
  return &type metadata for AnyMeshBuffer;
}

uint64_t dispatch thunk of MeshBufferContainer.buffers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MeshBufferContainer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of MeshBufferContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of MeshBufferContainer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

ValueMetadata *type metadata accessor for MeshSkeleton()
{
  return &type metadata for MeshSkeleton;
}

uint64_t destroy for MeshDescriptor(uint64_t a1)
{
  int v2;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MeshDescriptor.Materials(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 != 255)
    outlined consume of MeshDescriptor.Primitives(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v2);
  result = *(_QWORD *)(a1 + 72);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for MeshDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  v7 = *(unsigned __int8 *)(a2 + 56);
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v10 = *(_QWORD *)(a2 + 72);
    if (v10)
      goto LABEL_3;
LABEL_5:
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    return a1;
  }
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  outlined copy of MeshDescriptor.Primitives(v8, v9, *(_BYTE *)(a2 + 56));
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v7;
  v10 = *(_QWORD *)(a2 + 72);
  if (!v10)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 32);
  outlined copy of MeshDescriptor.Materials(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  outlined consume of MeshDescriptor.Materials(v6, v7);
  v8 = (__int128 *)(a1 + 40);
  v9 = (__int128 *)(a2 + 40);
  v10 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v10 == 255)
    {
      v19 = *v9;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *v8 = v19;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 40);
      v17 = *(_QWORD *)(a2 + 48);
      outlined copy of MeshDescriptor.Primitives(v16, v17, *(_BYTE *)(a2 + 56));
      *(_QWORD *)(a1 + 40) = v16;
      *(_QWORD *)(a1 + 48) = v17;
      *(_BYTE *)(a1 + 56) = v10;
    }
  }
  else if (v10 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 40);
    v18 = *(_BYTE *)(a2 + 56);
    *v8 = *v9;
    *(_BYTE *)(a1 + 56) = v18;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    outlined copy of MeshDescriptor.Primitives(v11, v12, *(_BYTE *)(a2 + 56));
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    v15 = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v10;
    outlined consume of MeshDescriptor.Primitives(v13, v14, v15);
  }
  v20 = (_OWORD *)(a1 + 64);
  v21 = (_OWORD *)(a2 + 64);
  v22 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v22)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    }
    else
    {
      outlined destroy of MeshDescriptor.Skinning(a1 + 64);
      v23 = *(_QWORD *)(a2 + 96);
      v24 = *(_OWORD *)(a2 + 80);
      *v20 = *v21;
      *(_OWORD *)(a1 + 80) = v24;
      *(_QWORD *)(a1 + 96) = v23;
    }
  }
  else if (v22)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = *v21;
    v26 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *v20 = v25;
    *(_OWORD *)(a1 + 80) = v26;
  }
  return a1;
}

uint64_t outlined destroy of MeshDescriptor.Primitives(uint64_t a1)
{
  outlined consume of MeshDescriptor.Primitives(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined destroy of MeshDescriptor.Skinning(uint64_t a1)
{
  destroy for MeshSkeleton(a1, &type metadata for MeshDescriptor.Skinning);
  return a1;
}

uint64_t assignWithTake for MeshDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v5;
  outlined consume of MeshDescriptor.Materials(v6, v7);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 != 255)
  {
    v10 = *(unsigned __int8 *)(a2 + 56);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *v8;
      *(_BYTE *)(a1 + 56) = v10;
      outlined consume of MeshDescriptor.Primitives(v11, v12, v9);
      goto LABEL_6;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_6:
  if (!*(_QWORD *)(a1 + 72))
  {
LABEL_10:
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    return a1;
  }
  v13 = *(_QWORD *)(a2 + 72);
  if (!v13)
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 64);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

ValueMetadata *type metadata accessor for MeshDescriptor()
{
  return &type metadata for MeshDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for MeshDescriptor.Materials(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of MeshDescriptor.Materials(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for MeshDescriptor.Materials(uint64_t a1)
{
  return outlined consume of MeshDescriptor.Materials(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for MeshDescriptor.Materials(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of MeshDescriptor.Materials(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of MeshDescriptor.Materials(v5, v6);
  return a1;
}

uint64_t assignWithTake for MeshDescriptor.Materials(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of MeshDescriptor.Materials(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MeshDescriptor.Materials()
{
  return &type metadata for MeshDescriptor.Materials;
}

uint64_t destroy for MeshDescriptor.Primitives(uint64_t a1)
{
  return outlined consume of MeshDescriptor.Primitives(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MeshDescriptor.Primitives(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MeshDescriptor.Primitives(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MeshDescriptor.Primitives(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MeshDescriptor.Primitives(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of MeshDescriptor.Primitives(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MeshDescriptor.Primitives(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of MeshDescriptor.Primitives(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MeshDescriptor.Primitives()
{
  return &type metadata for MeshDescriptor.Primitives;
}

_QWORD *initializeWithCopy for MeshDescriptor.Skinning(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MeshDescriptor.Skinning(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for MeshDescriptor.Skinning(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshDescriptor.Skinning(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshDescriptor.Skinning(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshDescriptor.Skinning()
{
  return &type metadata for MeshDescriptor.Skinning;
}

unint64_t destroy for GeomMeshError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GeomMeshError(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for GeomMeshError(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t assignWithTake for GeomMeshError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeomMeshError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GeomMeshError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for GeomMeshError(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GeomMeshError()
{
  return &type metadata for GeomMeshError;
}

uint64_t type metadata completion function for MeshPartBuffer()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MeshPartBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MeshPartBuffer);
}

uint64_t type metadata accessor for BufferInstaller #1 in static MeshResource.Part.unpack(coreAsset:modelIndex:)()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for BufferDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BufferDescriptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for BufferDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for BufferDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 21))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BufferDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 21) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BufferDescriptor()
{
  return &type metadata for BufferDescriptor;
}

ValueMetadata *type metadata accessor for MeshBufferLocation()
{
  return &type metadata for MeshBufferLocation;
}

uint64_t destroy for MeshBuffer()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MeshBuffer.Closures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for MeshBuffer.Closures(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for MeshBuffer.Closures(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBuffer.Closures(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBuffer.Closures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for MeshBuffer.Closures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MeshBuffer.Closures);
}

ValueMetadata *type metadata accessor for MeshBufferDictionary()
{
  return &type metadata for MeshBufferDictionary;
}

uint64_t destroy for MeshBufferDictionary.BufferEntry()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MeshBufferDictionary.BufferEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  v4 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v4;
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MeshBufferDictionary.BufferEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for MeshBufferDictionary.BufferEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBufferDictionary.BufferEntry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 121))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBufferDictionary.BufferEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 121) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for MeshBufferDictionary.BufferEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MeshBufferDictionary.BufferEntry);
}

uint64_t partial apply for specialized closure #1 in ConversionBuffer.init(_:_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in ConversionBuffer.init(_:_:)(a1, v1 + 16, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), &demangling cache variable for type metadata for _IteratorBox<ConversionBuffer<UInt32, MeshBuffer<UInt16>>.ConvertingIterator<UInt16>>);
}

{
  uint64_t v1;

  return specialized closure #1 in ConversionBuffer.init(_:_:)(a1, v1 + 16, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), &demangling cache variable for type metadata for _IteratorBox<ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>.ConvertingIterator<FloatVector3Packed>>);
}

uint64_t sub_21BC0EC54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined retain of MeshResource.Part(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of MeshResource.Part(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of MeshResource.JointInfluences?(uint64_t a1)
{
  outlined consume of MeshResource.JointInfluences?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_BYTE *)(a1 + 168));
  return a1;
}

uint64_t outlined consume of MeshResource.JointInfluences?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return outlined consume of MeshResource.JointInfluences.InfluenceRate(a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
  }
  return result;
}

uint64_t outlined consume of MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result;

  if (a11 < 0)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of MeshResource._Proto_Level_v1(uint64_t a1)
{
  destroy for MeshResource._Proto_Level_v1(a1);
  return a1;
}

uint64_t sub_21BC0EEFC()
{
  return swift_deallocObject();
}

void _s17RealityFoundation23MeshAttributeDescriptorC8makeData8tangents0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0()
{
  implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(tangents:)();
}

uint64_t sub_21BC0EF14()
{
  return swift_deallocObject();
}

void _s17RealityFoundation23MeshAttributeDescriptorC8makeData7normals0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0()
{
  implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(normals:)();
}

uint64_t outlined retain of MeshBuffer<SIMD3<Float>>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of MeshBuffer<SIMD3<Float>>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_21BC0EFD4()
{
  return swift_deallocObject();
}

void _s17RealityFoundation23MeshAttributeDescriptorC8makeData9positions0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0()
{
  implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(positions:)();
}

uint64_t sub_21BC0EFEC()
{
  return swift_deallocObject();
}

void _s17RealityFoundation23MeshAttributeDescriptorC8makeData17blendShapeOffsets0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0()
{
  implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(blendShapeOffsets:)();
}

unint64_t lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshResourceError and conformance MeshResourceError;
  if (!lazy protocol witness table cache variable for type MeshResourceError and conformance MeshResourceError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshResourceError, &type metadata for MeshResourceError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshResourceError and conformance MeshResourceError);
  }
  return result;
}

uint64_t specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t), uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v20;

  if (!a1)
    return 2;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = a7[3];
  v15 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(&v20, v14, v15);
  if ((a2 & 0x8000000000000000) != 0 || HIDWORD(a2) || HIDWORD(v13))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v16 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v17 = a4(a6, v16 + 32, a8, a2, a1, v13, a3 + 32);
    swift_release();
    return v17 & 1;
  }
  return result;
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(unint64_t a1, const __CFData *a2, unint64_t a3)
{
  uint64_t v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  char *v9;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v6 + 16) = a1;
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
    }
    BytePtr = CFDataGetBytePtr(a2);
    if (BytePtr)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_17;
      v8 = BytePtr;
      v9 = (char *)(v6 + 32);
      if ((unint64_t)v8 < v6 + 32 + 8 * a3 && v9 < (char *)&v8[8 * a3])
        goto LABEL_17;
      memcpy(v9, v8, 8 * a3);
      if (a1 >= a3)
      {
        *(_QWORD *)(v6 + 16) = a3;
        return v6;
      }
      __break(1u);
    }
    __break(1u);
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  char *v9;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v6 + 16) = a1;
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
    }
    BytePtr = CFDataGetBytePtr(a2);
    if (BytePtr)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_17;
      v8 = BytePtr;
      v9 = (char *)(v6 + 32);
      if ((unint64_t)v8 < v6 + 32 + 4 * a3 && v9 < (char *)&v8[4 * a3])
        goto LABEL_17;
      memcpy(v9, v8, 4 * a3);
      if (a1 >= a3)
      {
        *(_QWORD *)(v6 + 16) = a3;
        return v6;
      }
      __break(1u);
    }
    __break(1u);
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  char *v9;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v6 + 16) = a1;
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
    }
    BytePtr = CFDataGetBytePtr(a2);
    if (BytePtr)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_17;
      v8 = BytePtr;
      v9 = (char *)(v6 + 32);
      if ((unint64_t)v8 < v6 + 32 + 16 * a3 && v9 < (char *)&v8[16 * a3])
        goto LABEL_17;
      memcpy(v9, v8, 16 * a3);
      if (a1 >= a3)
      {
        *(_QWORD *)(v6 + 16) = a3;
        return v6;
      }
      __break(1u);
    }
    __break(1u);
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized static MeshResource.Part.unpack(coreAsset:modelIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t ModelPartCount;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ModelPartBufferCount;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned __int8 ModelPartBufferAttributeRate;
  unsigned __int8 ModelPartBufferAttributeType;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int ModelPartMaterial;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  char *v82;
  const __CFData *v83;
  const __CFData *v84;
  CFIndex v85;
  const __CFData *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char *v98;
  char v99;
  char *v100;
  char v101;
  __int128 v102;
  int ModelPartSkinUniformInfluenceCount;
  uint64_t v104;
  const __CFData *v105;
  const __CFData *v106;
  CFIndex v107;
  const __CFData *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  const char *v120;
  char v121;
  char v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t BlendShapeDefinitionCountForPart;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  const __CFData *v134;
  const __CFData *v135;
  CFIndex v136;
  const __CFData *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  __int16 v150;
  int64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  __n128 v156;
  uint64_t v157;
  _OWORD *v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  int v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  uint64_t v190;
  _QWORD *v191;
  int64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  _OWORD v205[6];
  _OWORD v206[2];
  unint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;
  unsigned __int8 v215;
  _QWORD v216[3];
  uint64_t v217;
  _UNKNOWN **v218;
  uint64_t v219;
  Swift::String v220;

  v219 = *MEMORY[0x24BDAC8D0];
  v194 = a2;
  ModelPartCount = REMeshAssetGetModelPartCount();
  if (ModelPartCount < 0)
    goto LABEL_104;
  v4 = ModelPartCount;
  if (!ModelPartCount)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = 0;
  v190 = 0;
  v185 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v186 = 0x800000021BE8BB20;
  v180 = 0x800000021BE81920;
  v181 = "ertexUV";
  v179 = 0x800000021BE81900;
  v188 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v193 = a1;
  v182 = "skinnedAnimationJointInfluences";
  v183 = ModelPartCount;
  do
  {
    if (v5 == v4)
      goto LABEL_101;
    REMeshAssetGetModelPartName();
    v6 = String.init(cString:)();
    v8 = v7;
    v196 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    ModelPartBufferCount = REMeshAssetGetModelPartBufferCount();
    if (ModelPartBufferCount < 0)
      goto LABEL_102;
    *(_QWORD *)&v199 = v6;
    *(_QWORD *)&v200 = v8;
    v195 = v5;
    if (ModelPartBufferCount)
    {
      v10 = ModelPartBufferCount;
      v11 = 0;
      v201 = ModelPartBufferCount;
      while (v10 != v11)
      {
        REMeshAssetGetModelPartBufferName();
        v13 = String.init(cString:)();
        v15 = v14;
        ModelPartBufferAttributeRate = REMeshAssetGetModelPartBufferAttributeRate();
        ModelPartBufferAttributeType = REMeshAssetGetModelPartBufferAttributeType();
        swift_bridgeObjectRetain();
        BufferDescriptor.init(bufferName:reRate:reType:)(v13, (unint64_t)v15, ModelPartBufferAttributeRate, ModelPartBufferAttributeType, (uint64_t)&v207);
        v18 = v208;
        if ((_QWORD)v208)
        {
          v19 = v207;
          v20 = BYTE12(v208);
          v21 = DWORD2(v208);
          swift_bridgeObjectRelease();
          v22 = v196;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v207 = v22;
          v25 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
          v26 = *(_QWORD *)(v22 + 16);
          v27 = (v24 & 1) == 0;
          v28 = v26 + v27;
          if (__OFADD__(v26, v27))
            goto LABEL_98;
          v29 = v24;
          if (*(_QWORD *)(v22 + 24) >= v28)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
            v30 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
            if ((v29 & 1) != (v31 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              JUMPOUT(0x21BC12B7CLL);
            }
            v25 = v30;
          }
          v45 = v21 | (v20 << 32);
          v46 = (v45 >> 16) & 0xFFFFFF;
          v47 = v45 & 1;
          v48 = BYTE1(v45) & 1;
          BYTE4(v21) = BYTE4(v45) & 1;
          v49 = (_QWORD *)v207;
          v196 = v207;
          if ((v29 & 1) != 0)
          {
            v12 = *(_QWORD *)(v207 + 56) + 24 * v25;
            swift_bridgeObjectRelease();
            *(_QWORD *)v12 = v19;
            *(_QWORD *)(v12 + 8) = v18;
            *(_BYTE *)(v12 + 16) = v47;
            *(_BYTE *)(v12 + 17) = v48;
            *(_BYTE *)(v12 + 18) = v46;
            *(_BYTE *)(v12 + 19) = BYTE3(v21);
            *(_BYTE *)(v12 + 20) = BYTE4(v21);
          }
          else
          {
            *(_QWORD *)(v207 + 8 * (v25 >> 6) + 64) |= 1 << v25;
            *(_QWORD *)(v49[6] + 8 * v25) = v11;
            v50 = v49[7] + 24 * v25;
            *(_QWORD *)v50 = v19;
            *(_QWORD *)(v50 + 8) = v18;
            *(_BYTE *)(v50 + 16) = v47;
            *(_BYTE *)(v50 + 17) = v48;
            *(_BYTE *)(v50 + 18) = v46;
            *(_BYTE *)(v50 + 19) = BYTE3(v21);
            *(_BYTE *)(v50 + 20) = BYTE4(v21);
            v51 = v49[2];
            v52 = __OFADD__(v51, 1);
            v53 = v51 + 1;
            if (v52)
              goto LABEL_99;
            v49[2] = v53;
          }
          swift_bridgeObjectRelease();
          v10 = v201;
        }
        else
        {
          v207 = 0;
          *(_QWORD *)&v208 = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          v207 = 0xD000000000000010;
          *(_QWORD *)&v208 = v186;
          v216[0] = v11;
          v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          v33._countAndFlagsBits = 8250;
          v33._object = (void *)0xE200000000000000;
          String.append(_:)(v33);
          v34._countAndFlagsBits = v13;
          v34._object = v15;
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          v35._countAndFlagsBits = 8236;
          v35._object = (void *)0xE200000000000000;
          String.append(_:)(v35);
          LOBYTE(v216[0]) = ModelPartBufferAttributeRate;
          v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          v37._countAndFlagsBits = 8236;
          v37._object = (void *)0xE200000000000000;
          String.append(_:)(v37);
          LOBYTE(v216[0]) = ModelPartBufferAttributeType;
          v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v38);
          swift_bridgeObjectRelease();
          v39 = v207;
          v40 = v208;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v188 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v188[2] + 1, 1, v188);
          v42 = v188[2];
          v41 = v188[3];
          if (v42 >= v41 >> 1)
            v188 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v188);
          v43 = v188;
          v188[2] = v42 + 1;
          v44 = &v43[2 * v42];
          v44[4] = v39;
          v44[5] = v40;
        }
        if (v10 == ++v11)
          goto LABEL_27;
      }
      __break(1u);
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
    }
LABEL_27:
    v204 = 0;
    v55 = v193;
    v54 = v194;
    v56 = v195;
    ModelPartMaterial = REMeshAssetGetModelPartMaterial();
    v58 = v204;
    type metadata accessor for BufferInstaller #1 in static MeshResource.Part.unpack(coreAsset:modelIndex:)();
    v59 = (_QWORD *)swift_allocObject();
    v60 = v59;
    v59[14] = 0;
    v59[15] = 0;
    *(_QWORD *)((char *)v59 + 125) = 0;
    v59[10] = v55;
    v59[11] = v54;
    if (!ModelPartMaterial)
      v58 = 0;
    v59[12] = v56;
    v59[13] = -1;
    v59[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v197 = v60 + 2;
    v61 = v200;
    v60[3] = v199;
    v60[4] = v61;
    v60[5] = 0;
    v60[6] = 0;
    *((_DWORD *)v60 + 14) = 0;
    *((_BYTE *)v60 + 60) = 1;
    v60[8] = v58;
    v201 = (uint64_t)v60;
    *((_BYTE *)v60 + 72) = 0;
    if ((ModelPartMaterial & 1) == 0)
    {
      swift_beginAccess();
      *(_BYTE *)(v201 + 72) = 0;
    }
    v184 = v195 + 1;
    v62 = *(_QWORD *)(v196 + 64);
    v191 = (_QWORD *)(v196 + 64);
    v63 = 1 << *(_BYTE *)(v196 + 32);
    if (v63 < 64)
      v64 = ~(-1 << v63);
    else
      v64 = -1;
    v65 = v64 & v62;
    v192 = (unint64_t)(v63 + 63) >> 6;
    swift_bridgeObjectRetain();
    v66 = 0;
    if (v65)
    {
      v67 = __clz(__rbit64(v65));
      *(_QWORD *)&v199 = (v65 - 1) & v65;
      v68 = v196;
      goto LABEL_46;
    }
    v66 = 1;
    v68 = v196;
    if (v192 > 1)
    {
      v69 = v191[1];
      if (v69)
        goto LABEL_45;
      v70 = 2;
      if (v192 > 2)
      {
        v69 = v191[2];
        if (v69)
          goto LABEL_44;
        v70 = 3;
        if (v192 > 3)
        {
          v69 = v191[3];
          if (v69)
            goto LABEL_44;
          v70 = 4;
          if (v192 > 4)
          {
            v69 = v191[4];
            if (!v69)
            {
              while (1)
              {
                v66 = v70 + 1;
                if (__OFADD__(v70, 1))
                  goto LABEL_100;
                if (v66 >= v192)
                  goto LABEL_53;
                v69 = v191[v66];
                ++v70;
                if (v69)
                  goto LABEL_45;
              }
            }
LABEL_44:
            v66 = v70;
LABEL_45:
            *(_QWORD *)&v199 = (v69 - 1) & v69;
            v67 = __clz(__rbit64(v69)) + (v66 << 6);
LABEL_46:
            v71 = *(_QWORD *)(*(_QWORD *)(v68 + 48) + 8 * v67);
            v72 = *(_QWORD *)(v68 + 56) + 24 * v67;
            v73 = *(_QWORD *)v72;
            v74 = *(_QWORD *)(v72 + 8);
            v75 = *(unsigned __int8 *)(v72 + 16);
            v76 = *(unsigned __int8 *)(v72 + 17);
            v77 = *(unsigned __int8 *)(v72 + 18);
            v78 = *(unsigned __int8 *)(v72 + 19);
            v79 = *(unsigned __int8 *)(v72 + 20);
            v80 = 256;
            if (!v76)
              v80 = 0;
            LODWORD(v198) = v77;
            v81 = v201;
            *(_QWORD *)(v201 + 104) = v71;
            *(_QWORD *)(v81 + 112) = v73;
            *(_QWORD *)(v81 + 120) = v74;
            *(_BYTE *)(v81 + 132) = v79 != 0;
            *(_DWORD *)(v81 + 128) = v80 | v75 | (v77 << 16) | ((_DWORD)v78 << 24);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRelease();
            v82 = (char *)&loc_21BC0FF04 + dword_21BC12B7C[v78];
            *(_QWORD *)&v200 = v66;
            __asm { BR              X8 }
          }
        }
      }
    }
LABEL_53:
    swift_release();
    v83 = (const __CFData *)REMeshAssetCopyModelPartSkinInfluences();
    if (v83)
    {
      v84 = v83;
      v85 = CFDataGetLength(v83) / 8;
      v86 = v84;
      v87 = v85;
      v88 = v85;
      v89 = v190;
      v90 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v87, v86, v88);
      v190 = v89;
      v192 = (int64_t)v86;

      specialized MeshBuffer.init<A>(_:)(v90, (uint64_t)&v207);
      v199 = v209;
      v200 = v208;
      v198 = v210;
      v189 = (uint64_t *)v207;
      v91 = v211;
      v92 = v212;
      v93 = v213;
      v94 = v214;
      LODWORD(v191) = v215;
      swift_beginAccess();
      v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<MeshJointInfluence>);
      v218 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      v95 = swift_allocObject();
      v216[0] = v95;
      v96 = one-time initialization token for triangleIndices;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if (v96 != -1)
        swift_once();
      if (static MeshBuffers.Identifier.triangleIndices == 0xD00000000000001FLL && *(_QWORD *)algn_2551A1378 == v179)
      {
        v97 = 2;
        v98 = v181;
        v99 = (char)v191;
      }
      else
      {
        v100 = v181;
        v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v98 = v100;
        v99 = (char)v191;
        if ((v101 & 1) != 0)
          v97 = 2;
        else
          v97 = (char)v191;
      }
      *(_QWORD *)(v95 + 16) = 0xD00000000000001FLL;
      *(_QWORD *)(v95 + 24) = (unint64_t)v98 | 0x8000000000000000;
      *(_WORD *)(v95 + 32) = 0;
      *(_QWORD *)(v95 + 40) = v94;
      *(_BYTE *)(v95 + 48) = v97;
      *(_BYTE *)(v95 + 49) = v92;
      *(_BYTE *)(v95 + 50) = v93;
      *(_QWORD *)(v95 + 56) = v189;
      v102 = v199;
      *(_OWORD *)(v95 + 64) = v200;
      *(_OWORD *)(v95 + 80) = v102;
      *(_OWORD *)(v95 + 96) = v198;
      *(_QWORD *)(v95 + 112) = v91;
      *(_BYTE *)(v95 + 120) = v92;
      *(_BYTE *)(v95 + 121) = v93;
      *(_QWORD *)(v95 + 128) = v94;
      *(_BYTE *)(v95 + 136) = v99;
      specialized Dictionary.subscript.setter((uint64_t)v216, 0xD00000000000001FLL, (unint64_t)v98 | 0x8000000000000000, 0);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_endAccess();
      ModelPartSkinUniformInfluenceCount = REMeshAssetGetModelPartSkinUniformInfluenceCount();

      if (ModelPartSkinUniformInfluenceCount)
      {
        v104 = v201;
        *(_DWORD *)(v201 + 56) = ModelPartSkinUniformInfluenceCount;
        *(_BYTE *)(v104 + 60) = 0;
      }
    }
    v105 = (const __CFData *)REMeshAssetCopyModelPartSkinInfluenceEndIndices();
    if (v105)
    {
      v106 = v105;
      v107 = CFDataGetLength(v105) / 4;
      v108 = v106;
      v109 = v107;
      v110 = v107;
      v111 = v190;
      v112 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v109, v108, v110);
      v190 = v111;
      v192 = (int64_t)v108;

      specialized MeshBuffer.init<A>(_:)(v112, (uint64_t)&v207);
      v199 = v209;
      v200 = v208;
      v198 = v210;
      v189 = (uint64_t *)v207;
      v113 = v211;
      v114 = v212;
      v115 = v213;
      v116 = v214;
      LODWORD(v191) = v215;
      swift_beginAccess();
      v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int32>);
      v218 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      v117 = swift_allocObject();
      v216[0] = v117;
      v118 = one-time initialization token for triangleIndices;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if (v118 != -1)
        swift_once();
      if (static MeshBuffers.Identifier.triangleIndices == 0xD000000000000023 && *(_QWORD *)algn_2551A1378 == v180)
      {
        v119 = 2;
        v120 = v182;
        v121 = (char)v191;
      }
      else
      {
        v120 = v182;
        v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v121 = (char)v191;
        if ((v122 & 1) != 0)
          v119 = 2;
        else
          v119 = (char)v191;
      }
      *(_QWORD *)(v117 + 16) = 0xD000000000000023;
      *(_QWORD *)(v117 + 24) = (unint64_t)v120 | 0x8000000000000000;
      *(_WORD *)(v117 + 32) = 0;
      *(_QWORD *)(v117 + 40) = v116;
      *(_BYTE *)(v117 + 48) = v119;
      *(_BYTE *)(v117 + 49) = v114;
      *(_BYTE *)(v117 + 50) = v115;
      *(_QWORD *)(v117 + 56) = v189;
      v123 = v199;
      *(_OWORD *)(v117 + 64) = v200;
      *(_OWORD *)(v117 + 80) = v123;
      *(_OWORD *)(v117 + 96) = v198;
      *(_QWORD *)(v117 + 112) = v113;
      *(_BYTE *)(v117 + 120) = v114;
      *(_BYTE *)(v117 + 121) = v115;
      *(_QWORD *)(v117 + 128) = v116;
      *(_BYTE *)(v117 + 136) = v121;
      specialized Dictionary.subscript.setter((uint64_t)v216, 0xD000000000000023, (unint64_t)v120 | 0x8000000000000000, 0);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_endAccess();

    }
    v202 = -1;
    if (REMeshAssetGetModelPartSkeletonIndex())
    {
      REMeshAssetGetSkeletonName();
      v124 = String.init(cString:)();
      v126 = v125;
      swift_beginAccess();
      v127 = v201;
      *(_QWORD *)(v201 + 40) = v124;
      *(_QWORD *)(v127 + 48) = v126;
      swift_bridgeObjectRelease();
    }
    BlendShapeDefinitionCountForPart = REMeshAssetGetBlendShapeDefinitionCountForPart();
    if (BlendShapeDefinitionCountForPart < 0)
      goto LABEL_103;
    v129 = BlendShapeDefinitionCountForPart;
    if (BlendShapeDefinitionCountForPart)
    {
      v130 = 0;
      v187 = BlendShapeDefinitionCountForPart;
      do
      {
        REMeshAssetGetBlendShapeDefinitionNameForPart();
        v131 = String.init(cString:)();
        v133 = v132;
        v134 = (const __CFData *)(id)REMeshAssetGetBlendShapeOffsetsForPart();
        if (v134)
        {
          v135 = v134;
          v136 = CFDataGetLength(v134) / 16;
          v137 = v135;
          v138 = v136;
          v139 = v136;
          v140 = v190;
          v141 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v138, v137, v139);
          v190 = v140;
          *(_QWORD *)&v199 = v137;

          v192 = *(_QWORD *)(v141 + 16);
          v142 = (_QWORD *)swift_allocObject();
          v142[2] = v141;
          v143 = swift_allocObject();
          *(_QWORD *)(v143 + 16) = v141;
          v144 = swift_allocObject();
          *(_QWORD *)(v144 + 16) = v141;
          v145 = swift_allocObject();
          *(_QWORD *)(v145 + 16) = v141;
          swift_beginAccess();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          v220._countAndFlagsBits = v131;
          v220._object = v133;
          LODWORD(v191) = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v220);
          *(_QWORD *)&v209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
          *((_QWORD *)&v209 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          v146 = swift_allocObject();
          v207 = v146;
          v147 = one-time initialization token for triangleIndices;
          swift_bridgeObjectRetain();
          swift_retain();
          *(_QWORD *)&v200 = v143;
          swift_retain();
          swift_retain();
          *(_QWORD *)&v198 = v145;
          swift_retain();
          if (v147 != -1)
            swift_once();
          if (v131 == static MeshBuffers.Identifier.triangleIndices && v133 == *(void **)algn_2551A1378
            || (v148 = _stringCompareWithSmolCheck(_:_:expecting:)(), v149 = 0, (v148 & 1) != 0))
          {
            v149 = 2;
          }
          v150 = v191 == 8;
          *(_QWORD *)(v146 + 16) = v131;
          *(_QWORD *)(v146 + 24) = v133;
          *(_BYTE *)(v146 + 32) = 0;
          *(_BYTE *)(v146 + 33) = v150;
          v151 = v192;
          *(_QWORD *)(v146 + 40) = v192;
          *(_BYTE *)(v146 + 48) = v149;
          *(_WORD *)(v146 + 49) = 9;
          *(_QWORD *)(v146 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(_QWORD *)(v146 + 64) = v142;
          v152 = v200;
          *(_QWORD *)(v146 + 72) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
          *(_QWORD *)(v146 + 80) = v152;
          *(_QWORD *)(v146 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(_QWORD *)(v146 + 96) = v144;
          v153 = v198;
          *(_QWORD *)(v146 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(_QWORD *)(v146 + 112) = v153;
          *(_WORD *)(v146 + 120) = 9;
          *(_QWORD *)(v146 + 128) = v151;
          *(_BYTE *)(v146 + 136) = 0;
          outlined init with take of BindableDataInternal((__int128 *)&v207, (uint64_t)v216);
          v192 = (int64_t)v142;
          v154 = v197;
          LODWORD(v191) = swift_isUniquelyReferenced_nonNull_native();
          v203 = *v154;
          *v154 = 0x8000000000000000;
          v155 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v216, v217);
          v189 = &v178;
          v156 = MEMORY[0x24BDAC7A8](v155);
          v158 = (_OWORD *)((char *)&v178 - ((v157 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v159 + 16))(v158, v156);
          v160 = v158[5];
          v205[4] = v158[4];
          v205[5] = v160;
          v206[0] = v158[6];
          *(_OWORD *)((char *)v206 + 9) = *(_OWORD *)((char *)v158 + 105);
          v161 = v158[1];
          v205[0] = *v158;
          v205[1] = v161;
          v162 = v158[3];
          v205[2] = v158[2];
          v205[3] = v162;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v205, v131, (uint64_t)v133, v150 << 8, (char)v191, &v203);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
          *v154 = v203;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_bridgeObjectRelease();

          v129 = v187;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        ++v130;
      }
      while (v129 != v130);
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v163 = *(_QWORD *)(v201 + 16);
    v164 = *(_QWORD *)(v201 + 24);
    v165 = *(_QWORD *)(v201 + 32);
    v166 = *(_QWORD *)(v201 + 40);
    v167 = *(_QWORD *)(v201 + 48);
    v168 = *(_DWORD *)(v201 + 56);
    v169 = *(_BYTE *)(v201 + 60);
    v170 = *(_QWORD *)(v201 + 64);
    v171 = *(unsigned __int8 *)(v201 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v172 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v200 = v170;
    LODWORD(v199) = v171;
    if ((v172 & 1) == 0)
      v185 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v185[2] + 1, 1, v185);
    v174 = v185[2];
    v173 = v185[3];
    if (v174 >= v173 >> 1)
      v185 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v173 > 1), v174 + 1, 1, v185);
    v175 = v185;
    v185[2] = v174 + 1;
    v176 = &v175[8 * v174];
    v176[4] = v163;
    v176[5] = v164;
    v176[6] = v165;
    v176[7] = v166;
    v176[8] = v167;
    *((_DWORD *)v176 + 18) = v168;
    *((_BYTE *)v176 + 76) = v169;
    v176[10] = v200;
    *((_BYTE *)v176 + 88) = v199;
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocClassInstance();
    v4 = v183;
    v5 = v184;
  }
  while (v184 != v183);
  swift_bridgeObjectRelease();
  return v185;
}

uint64_t partial apply for specialized closure #1 in MeshBuffer.init<A>(_:)()
{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&type metadata for MeshJointInfluence, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&demangling cache variable for type metadata for SIMD4<Float>, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&demangling cache variable for type metadata for SIMD3<Float>, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&type metadata for FloatVector3Packed, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&demangling cache variable for type metadata for SIMD2<Float>, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x24BEE13C8], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x24BEE14E8], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x24BEE3F88], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x24BEE3F30], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x24BEE3E50], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x24BEE44F0], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x24BEE4478], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x24BEE4260], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  return specialized closure #1 in MeshBuffer.init<A>(_:)();
}

{
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BC13118()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in MeshBuffer.init<A>(_:)()
{
  return protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t objectdestroy_211Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of MeshBuffer<SIMD3<Float>>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of MeshBuffer<SIMD3<Float>>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t objectdestroy_169Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_488Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for IndexingBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexingBuffer);
}

uint64_t type metadata accessor for IndexingBuffer.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexingBuffer.Iterator);
}

uint64_t type metadata instantiation function for ConversionBuffer()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for ConversionBuffer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ConversionBuffer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for ConversionBuffer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

void type metadata accessor for ConversionBuffer()
{
  JUMPOUT(0x220772DB8);
}

uint64_t destroy for ConversionBuffer.ConvertingIterator()
{
  swift_release();
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for ConversionBuffer.ConvertingIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ConversionBuffer.ConvertingIterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConversionBuffer.ConvertingIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

void type metadata accessor for ConversionBuffer.ConvertingIterator()
{
  JUMPOUT(0x220772DB8);
}

uint64_t getEnumTagSinglePayload for FloatVector3Packed(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FloatVector3Packed(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FloatVector3Packed()
{
  return &type metadata for FloatVector3Packed;
}

uint64_t static RealityFusionSession.sharedSession.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static RealityFusionSession.sharedSession.setter(void *a1)
{
  swift_beginAccess();
  static RealityFusionSession.sharedSession = a1;
  return swift_release();
}

uint64_t (*static RealityFusionSession.sharedSession.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

void key path setter for RealityFusionSession.serviceManager : RealityFusionSession(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;
  v5 = v2;

}

void *RealityFusionSession.serviceManager.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void RealityFusionSession.serviceManager.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t RealityFusionSession.sharedCount.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 24);
}

uint64_t RealityFusionSession.sharedCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  id v5;
  void *v6;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  if (!a1)
  {
    swift_beginAccess();
    v4 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v4[2])
      {
        v5 = (id)RFServiceManagerGetAnchorManagementService();
        if (v5)
        {
          v6 = v5;
          specialized static __ServiceLocator.shared.getter();
          swift_beginAccess();
          RFAnchorManagementServiceCleanupWithServiceLocator();

        }
      }
    }
    RFServiceManagerCleanUp();
    static RealityFusionSession.sharedSession = 0;
    return swift_release();
  }
  return result;
}

void (*RealityFusionSession.sharedCount.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  swift_beginAccess();
  return RealityFusionSession.sharedCount.modify;
}

void RealityFusionSession.sharedCount.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  void *v6;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0 && !*(_QWORD *)(v3[9] + 24))
  {
    swift_beginAccess();
    v4 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v4[2])
      {
        v5 = (id)RFServiceManagerGetAnchorManagementService();
        if (v5)
        {
          v6 = v5;
          specialized static __ServiceLocator.shared.getter();
          swift_beginAccess();
          RFAnchorManagementServiceCleanupWithServiceLocator();

        }
      }
    }
    RFServiceManagerCleanUp();
    static RealityFusionSession.sharedSession = 0;
    swift_release();
  }
  free(v3);
}

uint64_t RealityFusionSession.__allocating_init(_:)()
{
  uint64_t v0;

  swift_allocObject();
  v0 = specialized RealityFusionSession.init(_:)();
  swift_release();
  return v0;
}

uint64_t RealityFusionSession.init(_:)()
{
  uint64_t v0;

  v0 = specialized RealityFusionSession.init(_:)();
  swift_release();
  return v0;
}

uint64_t RealityFusionSession.__allocating_init(_:arSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  type metadata accessor for RealityFusionSession();
  swift_allocObject();
  v3 = specialized RealityFusionSession.init(_:)();
  swift_retain();
  RealityFusionSession.configure(with:)(a2);
  swift_release();
  swift_release();
  outlined destroy of __AnyARKitObject(a2);
  return v3;
}

uint64_t static RealityFusionSession.destroyRealityFusionSession()()
{
  uint64_t result;
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;

  result = swift_beginAccess();
  v1 = static RealityFusionSession.sharedSession;
  if (static RealityFusionSession.sharedSession)
  {
    result = swift_beginAccess();
    v2 = v1[3];
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      v1[3] = v4;
      if (!v4)
      {
        v5 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession && (swift_beginAccess(), v5[2]))
        {
          swift_retain();
          v6 = (id)RFServiceManagerGetAnchorManagementService();
          if (v6)
          {
            v7 = v6;
            specialized static __ServiceLocator.shared.getter();
            swift_beginAccess();
            RFAnchorManagementServiceCleanupWithServiceLocator();

          }
        }
        else
        {
          swift_retain();
        }
        RFServiceManagerCleanUp();
        static RealityFusionSession.sharedSession = 0;
        swift_release();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t RealityFusionSession.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t RealityFusionSession.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void RealityFusionSession.configure(with:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t aBlock;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t *);
  void *v24;
  uint64_t (*v25)(_OWORD *);
  uint64_t v26;
  void *v27;

  outlined init with copy of Any(a1, (uint64_t)&aBlock);
  type metadata accessor for ARSession();
  swift_dynamicCast();
  v2 = v27;
  v3 = (id *)(v1 + 16);
  swift_beginAccess();
  v4 = *(void **)(v1 + 16);
  if (!v4)
    goto LABEL_11;
  v5 = v4;
  v6 = (id)RFServiceManagerGetARKitDataProvider();
  if (!v6)
    goto LABEL_5;
  v7 = v6;
  v8 = (id)RFARKitDataProviderGetARSession();
  v9 = static NSObject.== infix(_:_:)();

  if ((v9 & 1) != 0)
  {

LABEL_5:
    v10 = (id)RFARKitDataProviderCreate();
    RFServiceManagerSetARKitDataProvider();
    goto LABEL_7;
  }
  v10 = v2;
  RFARKitDataProviderSetARSession();

LABEL_7:
  if (*v3)
  {
    v11 = *v3;
    v12 = (id)RFServiceManagerGetEnvironmentProbePlacementService();
    if (v12)
    {
      v13 = v12;
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v2;
      v25 = partial apply for closure #1 in RealityFusionSession.configure(with:);
      v26 = v14;
      v15 = MEMORY[0x24BDAC760];
      aBlock = MEMORY[0x24BDAC760];
      v22 = 1107296256;
      v23 = thunk for @escaping @callee_guaranteed (@unowned RFEnvProbeData) -> ();
      v24 = &block_descriptor_18;
      v16 = _Block_copy(&aBlock);
      v17 = v2;
      swift_release();
      RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback();
      _Block_release(v16);
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = v17;
      v25 = partial apply for closure #2 in RealityFusionSession.configure(with:);
      v26 = v18;
      aBlock = v15;
      v22 = 1107296256;
      v23 = thunk for @escaping @callee_guaranteed (@unowned RFEnvProbeData) -> ();
      v24 = &block_descriptor_6_1;
      v19 = _Block_copy(&aBlock);
      v20 = v17;
      swift_release();
      RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback();

      _Block_release(v19);
      v2 = v13;
    }

  }
LABEL_11:

}

uint64_t thunk for @escaping @callee_guaranteed (@unowned RFEnvProbeData) -> ()(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (*v7)(uint64_t *);
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *((_OWORD *)a2 + 1);
  v3 = *((_OWORD *)a2 + 2);
  v4 = *((_OWORD *)a2 + 3);
  v5 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 5);
  v9 = *a2;
  v10 = v2;
  v11 = v3;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v7 = *(void (**)(uint64_t *))(a1 + 32);
  swift_retain();
  v7(&v9);
  return swift_release();
}

uint64_t closure #1 in RealityFusionSession.configure(with:)(_OWORD *a1, void *a2, SEL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  id v15;
  Class isa;
  id v17;
  void (*v18)(char *, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - v11;
  UUID.init(uuid:)();
  UUID.uuid.getter();
  UUID.init(uuid:)();
  v13 = a1[5];
  v23 = a1[4];
  v24 = v13;
  v14 = a1[3];
  v21 = a1[2];
  v22 = v14;
  v20 = a1[1];
  v15 = objc_allocWithZone(MEMORY[0x24BDB14A0]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v15, sel_initWithIdentifier_transform_extent_, isa, *(double *)&v20, *(double *)&v21, *(double *)&v22, *(double *)&v23, *(double *)&v24);

  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v9, v6);
  objc_msgSend(a2, *a3, v17);

  return ((uint64_t (*)(char *, uint64_t))v18)(v12, v6);
}

uint64_t specialized RealityFusionSession.init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v1 = RFServiceManagerCreate();
  swift_beginAccess();
  v2 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 16) = v1;

  v3 = *(void **)(v0 + 16);
  if (v3)
  {
    v4 = v3;
    v5 = (void *)RFMeshReconstructionServiceCreate();
    RFServiceManagerSetMeshReconstructionService();
    v6 = (void *)RFAnchorManagementServiceCreate();
    RFServiceManagerSetAnchorManagementService();
    v7 = (void *)RFLoggingServiceCreate();
    RFServiceManagerSetLoggingService();
    v8 = (void *)RFEnvironmentProbePlacementServiceCreate();
    RFServiceManagerSetEnvironmentProbePlacementService();
    v9 = (void *)RFAtmospherePlacementServiceCreate();
    RFServiceManagerSetAtmospherePlacementService();
    v10 = (void *)RFAnchorDataProviderCreate();
    RFServiceManagerSetAnchorDataProvider();

  }
  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = 1;
  swift_beginAccess();
  static RealityFusionSession.sharedSession = (_UNKNOWN *)v0;
  swift_retain();
  swift_release();
  return v0;
}

uint64_t specialized static RealityFusionSession.createRealityFusionSession(arSession:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  _BYTE v11[24];
  uint64_t v12;

  swift_beginAccess();
  v2 = static RealityFusionSession.sharedSession;
  if (!static RealityFusionSession.sharedSession)
  {
    v7 = *(_QWORD *)(a1 + 24);
    specialized static __ServiceLocator.shared.getter();
    if (v7)
    {
      result = outlined init with copy of __AnyARKitObject?(a1, (uint64_t)v11);
      if (!v12)
        goto LABEL_17;
      type metadata accessor for RealityFusionSession();
      swift_allocObject();
      swift_retain();
      v2 = (_QWORD *)specialized RealityFusionSession.init(_:)();
      swift_retain();
      RealityFusionSession.configure(with:)((uint64_t)v11);
      swift_release();
      swift_release();
      outlined destroy of __AnyARKitObject((uint64_t)v11);
    }
    else
    {
      type metadata accessor for RealityFusionSession();
      swift_allocObject();
      return specialized RealityFusionSession.init(_:)();
    }
    return (uint64_t)v2;
  }
  result = swift_beginAccess();
  v4 = v2[3];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (!v5)
  {
    v2[3] = v6;
    if (v6)
    {
      swift_retain();
    }
    else
    {
      v8 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession && (swift_beginAccess(), v8[2]))
      {
        swift_retain();
        v9 = (id)RFServiceManagerGetAnchorManagementService();
        if (v9)
        {
          v10 = v9;
          specialized static __ServiceLocator.shared.getter();
          swift_beginAccess();
          RFAnchorManagementServiceCleanupWithServiceLocator();

        }
      }
      else
      {
        swift_retain();
      }
      RFServiceManagerCleanUp();
      static RealityFusionSession.sharedSession = 0;
      swift_release();
    }
    return (uint64_t)v2;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RealityFusionSession()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for ARSession()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ARSession;
  if (!lazy cache variable for type metadata for ARSession)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARSession);
  }
  return result;
}

uint64_t sub_21BC149DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RealityFusionSession.configure(with:)(_OWORD *a1)
{
  uint64_t v1;

  return closure #1 in RealityFusionSession.configure(with:)(a1, *(void **)(v1 + 16), (SEL *)&selRef_addAnchor_);
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in RealityFusionSession.configure(with:)(_OWORD *a1)
{
  uint64_t v1;

  return closure #1 in RealityFusionSession.configure(with:)(a1, *(void **)(v1 + 16), (SEL *)&selRef_removeAnchor_);
}

id sub_21BC14A58@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 16);
  *a2 = v4;
  return v4;
}

uint64_t sub_21BC14AA0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return result;
}

uint64_t sub_21BC14AE4(uint64_t *a1)
{
  return RealityFusionSession.sharedCount.setter(*a1);
}

uint64_t method lookup function for RealityFusionSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of RealityFusionSession.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t outlined init with copy of __AnyARKitObject?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for __AnyARKitObject?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Array<A>.hasLookAtInteractions.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  int v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  int64_t v101;
  int v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t result;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v2 = 0;
  v3 = type metadata accessor for __RKEntityActionSpecification(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v179 = (char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v180 = (char *)&v137 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v174 = (char *)&v137 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v137 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v169 = (uint64_t)&v137 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v137 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v160 = (char *)&v137 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v165 = (uint64_t)&v137 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v137 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v158 = (uint64_t)&v137 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v137 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v151 = (uint64_t)&v137 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v137 - v33;
  v145 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v35 = *(_QWORD *)(v145 - 8);
  MEMORY[0x24BDAC7A8](v145);
  v147 = (uint64_t)&v137 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(a1 + 16);
  if (!v37)
    goto LABEL_112;
  v150 = v29;
  v189 = MEMORY[0x24BEE4AF8];
  v141 = v37;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
  v38 = 0;
  v144 = a1 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
  v143 = *(_QWORD *)(v35 + 72);
  v183 = xmmword_21BE411F0;
  v39 = (uint64_t)v179;
  v157 = v24;
  v138 = v4;
  v175 = v12;
  v173 = v17;
  v137 = v34;
LABEL_3:
  v146 = v38;
  v40 = v147;
  outlined init with copy of __RKEntityActionSpecification(v144 + v143 * v38, v147, type metadata accessor for __RKEntityInteractionSpecification);
  v41 = v40 + *(int *)(v145 + 20);
  outlined init with copy of __RKEntityActionSpecification(v41, (uint64_t)v34, type metadata accessor for __RKEntityActionSpecification);
  if (swift_getEnumCaseMultiPayload() != 6)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v34, type metadata accessor for __RKEntityActionSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v126 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v127 = swift_allocObject();
    *(_OWORD *)(v127 + 16) = v183;
    v153 = v127;
    outlined init with copy of __RKEntityActionSpecification(v41, v127 + v126, type metadata accessor for __RKEntityActionSpecification);
    goto LABEL_107;
  }
  v42 = *((_QWORD *)v34 + 1);
  v43 = (uint64_t)v150;
  v148 = *(_QWORD *)(v42 + 16);
  if (!v148)
  {
    swift_bridgeObjectRelease();
    v153 = MEMORY[0x24BEE4AF8];
    goto LABEL_107;
  }
  v140 = v2;
  v44 = *(unsigned __int8 *)(v4 + 80);
  v45 = (v44 + 32) & ~v44;
  v149 = v42 + v45;
  v46 = *(_QWORD *)(v4 + 72);
  v184 = v45;
  v181 = v44 | 7;
  v182 = v46 + v45;
  v139 = v42;
  swift_bridgeObjectRetain();
  v47 = 0;
  v153 = MEMORY[0x24BEE4AF8];
  v48 = (uint64_t)v180;
  v49 = (uint64_t)v174;
  v50 = (uint64_t)v160;
  while (1)
  {
    v152 = v47;
    v51 = v151;
    outlined init with copy of __RKEntityActionSpecification(v149 + v46 * v47, v151, type metadata accessor for __RKEntityActionSpecification);
    outlined init with copy of __RKEntityActionSpecification(v51, v43, type metadata accessor for __RKEntityActionSpecification);
    if (swift_getEnumCaseMultiPayload() == 6)
      break;
    outlined destroy of __RKEntityActionSpecification(v43, type metadata accessor for __RKEntityActionSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v111 = swift_allocObject();
    *(_OWORD *)(v111 + 16) = v183;
    outlined init with copy of __RKEntityActionSpecification(v51, v111 + v184, type metadata accessor for __RKEntityActionSpecification);
    v112 = v51;
LABEL_87:
    outlined destroy of __RKEntityActionSpecification(v112, type metadata accessor for __RKEntityActionSpecification);
    v113 = *(_QWORD *)(v153 + 16);
    v178 = *(_QWORD *)(v111 + 16);
    v114 = v113 + v178;
    if (__OFADD__(v113, v178))
      goto LABEL_121;
    v161 = v111;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v116 = v153;
    if (!isUniquelyReferenced_nonNull_native || v114 > *(_QWORD *)(v153 + 24) >> 1)
    {
      if (v113 <= v114)
        v117 = v114;
      else
        v117 = v113;
      v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v117, 1, v153);
    }
    v49 = (uint64_t)v174;
    v118 = v152;
    v119 = v178;
    v120 = *(_QWORD *)(v161 + 16);
    v153 = v116;
    if (v120)
    {
      v121 = *(_QWORD *)(v116 + 16);
      if ((*(_QWORD *)(v116 + 24) >> 1) - v121 < v178)
        goto LABEL_123;
      v122 = v116 + v184 + v121 * v46;
      if (v161 + v184 < v122 + v178 * v46 && v122 < v161 + v184 + v178 * v46)
        goto LABEL_125;
      swift_arrayInitWithCopy();
      if (v119)
      {
        v124 = *(_QWORD *)(v153 + 16);
        v95 = __OFADD__(v124, v119);
        v125 = v124 + v119;
        if (v95)
          goto LABEL_124;
        *(_QWORD *)(v153 + 16) = v125;
      }
    }
    else if (v178)
    {
      goto LABEL_122;
    }
    v47 = v118 + 1;
    swift_bridgeObjectRelease();
    v43 = (uint64_t)v150;
    if (v47 == v148)
    {
      swift_bridgeObjectRelease_n();
      v2 = v140;
      v4 = v138;
      v34 = v137;
LABEL_107:
      outlined destroy of __RKEntityActionSpecification(v147, type metadata accessor for __RKEntityInteractionSpecification);
      v128 = v189;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v128 + 16) + 1, 1);
        v128 = v189;
      }
      v129 = v141;
      v130 = v146;
      v132 = *(_QWORD *)(v128 + 16);
      v131 = *(_QWORD *)(v128 + 24);
      if (v132 >= v131 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v131 > 1, v132 + 1, 1);
        v130 = v146;
        v129 = v141;
        v128 = v189;
      }
      v38 = v130 + 1;
      *(_QWORD *)(v128 + 16) = v132 + 1;
      *(_QWORD *)(v128 + 8 * v132 + 32) = v153;
      if (v38 == v129)
      {
LABEL_112:
        v133 = swift_bridgeObjectRetain();
        specialized Sequence.filter(_:)(v133);
        v135 = *(_QWORD *)(v134 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v135 != 0;
      }
      goto LABEL_3;
    }
  }
  v52 = *(_QWORD *)(v43 + 8);
  v156 = *(_QWORD *)(v52 + 16);
  v53 = (uint64_t)v157;
  if (!v156)
  {
    swift_bridgeObjectRelease();
    v111 = MEMORY[0x24BEE4AF8];
    v112 = v151;
    goto LABEL_87;
  }
  v155 = v52 + v184;
  v142 = v52;
  swift_bridgeObjectRetain();
  v54 = 0;
  v161 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v159 = v54;
    v55 = v155 + v54 * v46;
    v56 = v158;
    v57 = type metadata accessor for __RKEntityActionSpecification;
    outlined init with copy of __RKEntityActionSpecification(v55, v158, type metadata accessor for __RKEntityActionSpecification);
    outlined init with copy of __RKEntityActionSpecification(v56, v53, type metadata accessor for __RKEntityActionSpecification);
    if (swift_getEnumCaseMultiPayload() != 6)
    {
      outlined destroy of __RKEntityActionSpecification(v53, type metadata accessor for __RKEntityActionSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v97 = swift_allocObject();
      *(_OWORD *)(v97 + 16) = v183;
      outlined init with copy of __RKEntityActionSpecification(v56, v97 + v184, type metadata accessor for __RKEntityActionSpecification);
      v98 = v56;
      goto LABEL_67;
    }
    v58 = *(_QWORD *)(v53 + 8);
    v164 = *(_QWORD *)(v58 + 16);
    if (v164)
      break;
    swift_bridgeObjectRelease();
    v97 = MEMORY[0x24BEE4AF8];
    v98 = v158;
LABEL_67:
    outlined destroy of __RKEntityActionSpecification(v98, type metadata accessor for __RKEntityActionSpecification);
    v99 = *(_QWORD *)(v97 + 16);
    v100 = *(_QWORD *)(v161 + 16);
    v101 = v100 + v99;
    if (__OFADD__(v100, v99))
      goto LABEL_117;
    v102 = swift_isUniquelyReferenced_nonNull_native();
    v103 = v161;
    if (!v102 || v101 > *(_QWORD *)(v161 + 24) >> 1)
    {
      if (v100 <= v101)
        v104 = v100 + v99;
      else
        v104 = v100;
      v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v102, v104, 1, v161);
    }
    v49 = (uint64_t)v174;
    v105 = *(_QWORD *)(v97 + 16);
    v161 = v103;
    if (v105)
    {
      v106 = *(_QWORD *)(v103 + 16);
      if ((*(_QWORD *)(v103 + 24) >> 1) - v106 < v99)
        goto LABEL_119;
      v107 = v103 + v184 + v106 * v46;
      if (v97 + v184 < v107 + v99 * v46 && v107 < v97 + v184 + v99 * v46)
        goto LABEL_125;
      swift_arrayInitWithCopy();
      v53 = (uint64_t)v157;
      if (v99)
      {
        v109 = *(_QWORD *)(v161 + 16);
        v95 = __OFADD__(v109, v99);
        v110 = v109 + v99;
        if (v95)
          goto LABEL_120;
        *(_QWORD *)(v161 + 16) = v110;
      }
    }
    else
    {
      v53 = (uint64_t)v157;
      if (v99)
        goto LABEL_118;
    }
    v54 = v159 + 1;
    swift_bridgeObjectRelease();
    if (v54 == v156)
    {
      swift_bridgeObjectRelease_n();
      v112 = v151;
      v111 = v161;
      goto LABEL_87;
    }
  }
  v163 = v58 + v184;
  v154 = v58;
  swift_bridgeObjectRetain();
  v59 = 0;
  v167 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v166 = v59;
    v60 = v163 + v59 * v46;
    v61 = v165;
    outlined init with copy of __RKEntityActionSpecification(v60, v165, type metadata accessor for __RKEntityActionSpecification);
    outlined init with copy of __RKEntityActionSpecification(v61, v50, type metadata accessor for __RKEntityActionSpecification);
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      v62 = *(_QWORD *)(v50 + 8);
      v63 = MEMORY[0x24BEE4AF8];
      v188 = MEMORY[0x24BEE4AF8];
      v171 = *(_QWORD *)(v62 + 16);
      if (v171)
      {
        v170 = v62 + v184;
        v162 = v62;
        swift_bridgeObjectRetain();
        v64 = 0;
        v57 = type metadata accessor for __RKEntityActionSpecification;
        do
        {
          v172 = v64;
          v66 = (uint64_t)v173;
          outlined init with copy of __RKEntityActionSpecification(v170 + v64 * v46, (uint64_t)v173, v57);
          v67 = v169;
          outlined init with copy of __RKEntityActionSpecification(v66, v169, v57);
          v68 = v57;
          if (swift_getEnumCaseMultiPayload() == 6)
          {
            v69 = *(_QWORD *)(v67 + 8);
            v65 = MEMORY[0x24BEE4AF8];
            v187 = MEMORY[0x24BEE4AF8];
            v70 = *(_QWORD *)(v69 + 16);
            if (v70)
            {
              v178 = v69 + v184;
              v168 = v69;
              swift_bridgeObjectRetain();
              v71 = 0;
              v176 = v70;
              do
              {
                outlined init with copy of __RKEntityActionSpecification(v178 + v71 * v46, (uint64_t)v12, v68);
                outlined init with copy of __RKEntityActionSpecification((uint64_t)v12, v49, v68);
                if (swift_getEnumCaseMultiPayload() == 6)
                {
                  v73 = *(_QWORD *)(v49 + 8);
                  v72 = MEMORY[0x24BEE4AF8];
                  v186 = MEMORY[0x24BEE4AF8];
                  v74 = *(_QWORD *)(v73 + 16);
                  if (v74)
                  {
                    v75 = v73 + v184;
                    v177 = v73;
                    swift_bridgeObjectRetain();
                    v76 = 0;
                    do
                    {
                      outlined init with copy of __RKEntityActionSpecification(v75 + v76 * v46, v48, v68);
                      outlined init with copy of __RKEntityActionSpecification(v48, v39, v68);
                      if (swift_getEnumCaseMultiPayload() == 6)
                      {
                        v78 = v3;
                        v79 = *(_QWORD *)(v39 + 8);
                        v77 = MEMORY[0x24BEE4AF8];
                        v185 = MEMORY[0x24BEE4AF8];
                        v80 = *(_QWORD *)(v79 + 16);
                        swift_bridgeObjectRetain();
                        if (v80)
                        {
                          v81 = v79 + v184;
                          do
                          {
                            v82 = __RKEntityActionSpecification.flattened.getter();
                            specialized Array.append<A>(contentsOf:)(v82);
                            v81 += v46;
                            --v80;
                          }
                          while (v80);
                          v77 = v185;
                          v68 = type metadata accessor for __RKEntityActionSpecification;
                        }
                        swift_bridgeObjectRelease_n();
                        v3 = v78;
                        v39 = (uint64_t)v179;
                        v48 = (uint64_t)v180;
                      }
                      else
                      {
                        outlined destroy of __RKEntityActionSpecification(v39, v68);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
                        v77 = swift_allocObject();
                        *(_OWORD *)(v77 + 16) = v183;
                        outlined init with copy of __RKEntityActionSpecification(v48, v77 + v184, v68);
                      }
                      ++v76;
                      outlined destroy of __RKEntityActionSpecification(v48, v68);
                      specialized Array.append<A>(contentsOf:)(v77);
                      v68 = type metadata accessor for __RKEntityActionSpecification;
                    }
                    while (v76 != v74);
                    swift_bridgeObjectRelease_n();
                    v72 = v186;
                    v49 = (uint64_t)v174;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                  v12 = v175;
                  v70 = v176;
                }
                else
                {
                  outlined destroy of __RKEntityActionSpecification(v49, v68);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
                  v72 = swift_allocObject();
                  *(_OWORD *)(v72 + 16) = v183;
                  outlined init with copy of __RKEntityActionSpecification((uint64_t)v12, v72 + v184, v68);
                }
                ++v71;
                outlined destroy of __RKEntityActionSpecification((uint64_t)v12, v68);
                specialized Array.append<A>(contentsOf:)(v72);
                v68 = type metadata accessor for __RKEntityActionSpecification;
              }
              while (v71 != v70);
              swift_bridgeObjectRelease_n();
              v65 = v187;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            outlined destroy of __RKEntityActionSpecification(v67, v57);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
            v65 = swift_allocObject();
            *(_OWORD *)(v65 + 16) = v183;
            outlined init with copy of __RKEntityActionSpecification((uint64_t)v173, v65 + v184, v57);
          }
          v64 = v172 + 1;
          outlined destroy of __RKEntityActionSpecification((uint64_t)v173, v68);
          v57 = v68;
          specialized Array.append<A>(contentsOf:)(v65);
        }
        while (v64 != v171);
        swift_bridgeObjectRelease_n();
        v63 = v188;
        v50 = (uint64_t)v160;
        v83 = v165;
      }
      else
      {
        swift_bridgeObjectRelease();
        v83 = v165;
        v57 = type metadata accessor for __RKEntityActionSpecification;
      }
    }
    else
    {
      outlined destroy of __RKEntityActionSpecification(v50, type metadata accessor for __RKEntityActionSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = v183;
      outlined init with copy of __RKEntityActionSpecification(v61, v63 + v184, type metadata accessor for __RKEntityActionSpecification);
      v83 = v61;
    }
    outlined destroy of __RKEntityActionSpecification(v83, v57);
    v84 = *(_QWORD *)(v63 + 16);
    v85 = *(_QWORD *)(v167 + 16);
    v86 = v85 + v84;
    if (__OFADD__(v85, v84))
      break;
    v87 = swift_isUniquelyReferenced_nonNull_native();
    v88 = v167;
    if (!v87 || v86 > *(_QWORD *)(v167 + 24) >> 1)
    {
      if (v85 <= v86)
        v89 = v85 + v84;
      else
        v89 = v85;
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v87, v89, 1, v167);
    }
    v49 = (uint64_t)v174;
    v90 = *(_QWORD *)(v63 + 16);
    v167 = v88;
    if (v90)
    {
      v91 = *(_QWORD *)(v88 + 16);
      if ((*(_QWORD *)(v88 + 24) >> 1) - v91 < v84)
        goto LABEL_115;
      v92 = v88 + v184 + v91 * v46;
      if (v63 + v184 < v92 + v84 * v46 && v92 < v63 + v184 + v84 * v46)
        goto LABEL_125;
      swift_arrayInitWithCopy();
      if (v84)
      {
        v94 = *(_QWORD *)(v167 + 16);
        v95 = __OFADD__(v94, v84);
        v96 = v94 + v84;
        if (v95)
          goto LABEL_116;
        *(_QWORD *)(v167 + 16) = v96;
      }
    }
    else if (v84)
    {
      goto LABEL_114;
    }
    v59 = v166 + 1;
    swift_bridgeObjectRelease();
    v57 = type metadata accessor for __RKEntityActionSpecification;
    if (v59 == v164)
    {
      swift_bridgeObjectRelease_n();
      v98 = v158;
      v97 = v167;
      goto LABEL_67;
    }
  }
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Array<A>.hasProximityTriggers.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  int v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  int64_t v101;
  int v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t result;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v2 = 0;
  v3 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v178 = (char *)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v179 = (char *)&v136 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v173 = (char *)&v136 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v136 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v168 = (uint64_t *)((char *)&v136 - v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v136 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v159 = (char *)&v136 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v164 = (uint64_t)&v136 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v136 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v157 = (uint64_t)&v136 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v136 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v150 = (uint64_t)&v136 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v136 - v33;
  v35 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v145 = (uint64_t)&v136 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(a1 + 16);
  if (!v38)
    goto LABEL_112;
  v148 = v29;
  v188 = MEMORY[0x24BEE4AF8];
  v141 = v38;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
  v39 = 0;
  v144 = a1 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  v143 = *(_QWORD *)(v36 + 72);
  v182 = xmmword_21BE411F0;
  v40 = (uint64_t *)v178;
  v156 = v24;
  v138 = v4;
  v174 = v12;
  v172 = v17;
  v137 = v34;
LABEL_3:
  v146 = v39;
  v41 = v145;
  outlined init with copy of __RKEntityActionSpecification(v144 + v143 * v39, v145, type metadata accessor for __RKEntityInteractionSpecification);
  outlined init with copy of __RKEntityActionSpecification(v41, (uint64_t)v34, type metadata accessor for __RKEntityTriggerSpecification);
  if (swift_getEnumCaseMultiPayload() != 5)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v34, type metadata accessor for __RKEntityTriggerSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    v125 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v126 = swift_allocObject();
    *(_OWORD *)(v126 + 16) = v182;
    v152 = v126;
    outlined init with copy of __RKEntityActionSpecification(v41, v126 + v125, type metadata accessor for __RKEntityTriggerSpecification);
    goto LABEL_107;
  }
  v42 = *(_QWORD *)v34;
  v147 = *(_QWORD *)(*(_QWORD *)v34 + 16);
  if (!v147)
  {
    swift_bridgeObjectRelease();
    v152 = MEMORY[0x24BEE4AF8];
    goto LABEL_107;
  }
  v140 = v2;
  v43 = *(unsigned __int8 *)(v4 + 80);
  v44 = (v43 + 32) & ~v43;
  v149 = v42 + v44;
  v45 = *(_QWORD *)(v4 + 72);
  v183 = v44;
  v180 = v43 | 7;
  v181 = v45 + v44;
  v139 = v42;
  swift_bridgeObjectRetain();
  v46 = 0;
  v152 = MEMORY[0x24BEE4AF8];
  v47 = (uint64_t)v179;
  v48 = (uint64_t *)v173;
  v49 = (uint64_t *)v159;
  while (1)
  {
    v151 = v46;
    v50 = v150;
    outlined init with copy of __RKEntityActionSpecification(v149 + v45 * v46, v150, type metadata accessor for __RKEntityTriggerSpecification);
    v51 = (uint64_t)v148;
    outlined init with copy of __RKEntityActionSpecification(v50, (uint64_t)v148, type metadata accessor for __RKEntityTriggerSpecification);
    if (swift_getEnumCaseMultiPayload() == 5)
      break;
    outlined destroy of __RKEntityActionSpecification(v51, type metadata accessor for __RKEntityTriggerSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    v111 = swift_allocObject();
    *(_OWORD *)(v111 + 16) = v182;
    outlined init with copy of __RKEntityActionSpecification(v50, v111 + v183, type metadata accessor for __RKEntityTriggerSpecification);
    v112 = v50;
LABEL_87:
    outlined destroy of __RKEntityActionSpecification(v112, type metadata accessor for __RKEntityTriggerSpecification);
    v113 = *(_QWORD *)(v152 + 16);
    v177 = *(_QWORD *)(v111 + 16);
    v114 = v113 + v177;
    if (__OFADD__(v113, v177))
      goto LABEL_121;
    v160 = v111;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v116 = v152;
    if (!isUniquelyReferenced_nonNull_native || v114 > *(_QWORD *)(v152 + 24) >> 1)
    {
      if (v113 <= v114)
        v117 = v114;
      else
        v117 = v113;
      v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v117, 1, v152);
    }
    v48 = (uint64_t *)v173;
    v118 = v177;
    v119 = *(_QWORD *)(v160 + 16);
    v152 = v116;
    if (v119)
    {
      v120 = *(_QWORD *)(v116 + 16);
      if ((*(_QWORD *)(v116 + 24) >> 1) - v120 < v177)
        goto LABEL_123;
      v121 = v116 + v183 + v120 * v45;
      if (v160 + v183 < v121 + v177 * v45 && v121 < v160 + v183 + v177 * v45)
        goto LABEL_125;
      swift_arrayInitWithCopy();
      if (v118)
      {
        v123 = *(_QWORD *)(v152 + 16);
        v95 = __OFADD__(v123, v118);
        v124 = v123 + v118;
        if (v95)
          goto LABEL_124;
        *(_QWORD *)(v152 + 16) = v124;
      }
    }
    else if (v177)
    {
      goto LABEL_122;
    }
    v46 = v151 + 1;
    swift_bridgeObjectRelease();
    if (v46 == v147)
    {
      swift_bridgeObjectRelease_n();
      v2 = v140;
      v4 = v138;
      v34 = v137;
      v41 = v145;
LABEL_107:
      outlined destroy of __RKEntityActionSpecification(v41, type metadata accessor for __RKEntityInteractionSpecification);
      v127 = v188;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v127 + 16) + 1, 1);
        v127 = v188;
      }
      v128 = v141;
      v129 = v146;
      v131 = *(_QWORD *)(v127 + 16);
      v130 = *(_QWORD *)(v127 + 24);
      if (v131 >= v130 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v130 > 1, v131 + 1, 1);
        v129 = v146;
        v128 = v141;
        v127 = v188;
      }
      v39 = v129 + 1;
      *(_QWORD *)(v127 + 16) = v131 + 1;
      *(_QWORD *)(v127 + 8 * v131 + 32) = v152;
      if (v39 == v128)
      {
LABEL_112:
        v132 = swift_bridgeObjectRetain();
        specialized Sequence.filter(_:)(v132);
        v134 = *(_QWORD *)(v133 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v134 != 0;
      }
      goto LABEL_3;
    }
  }
  v52 = *(_QWORD *)v51;
  v155 = *(_QWORD *)(*(_QWORD *)v51 + 16);
  v53 = (uint64_t)v156;
  if (!v155)
  {
    swift_bridgeObjectRelease();
    v111 = MEMORY[0x24BEE4AF8];
    v112 = v150;
    goto LABEL_87;
  }
  v154 = v52 + v183;
  v142 = v52;
  swift_bridgeObjectRetain();
  v54 = 0;
  v160 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v158 = v54;
    v55 = v154 + v54 * v45;
    v56 = v157;
    v57 = type metadata accessor for __RKEntityTriggerSpecification;
    outlined init with copy of __RKEntityActionSpecification(v55, v157, type metadata accessor for __RKEntityTriggerSpecification);
    outlined init with copy of __RKEntityActionSpecification(v56, v53, type metadata accessor for __RKEntityTriggerSpecification);
    if (swift_getEnumCaseMultiPayload() != 5)
    {
      outlined destroy of __RKEntityActionSpecification(v53, type metadata accessor for __RKEntityTriggerSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
      v97 = swift_allocObject();
      *(_OWORD *)(v97 + 16) = v182;
      outlined init with copy of __RKEntityActionSpecification(v56, v97 + v183, type metadata accessor for __RKEntityTriggerSpecification);
      v98 = v56;
      goto LABEL_67;
    }
    v58 = *(_QWORD *)v53;
    v163 = *(_QWORD *)(*(_QWORD *)v53 + 16);
    if (v163)
      break;
    swift_bridgeObjectRelease();
    v97 = MEMORY[0x24BEE4AF8];
    v98 = v157;
LABEL_67:
    outlined destroy of __RKEntityActionSpecification(v98, type metadata accessor for __RKEntityTriggerSpecification);
    v99 = *(_QWORD *)(v97 + 16);
    v100 = *(_QWORD *)(v160 + 16);
    v101 = v100 + v99;
    if (__OFADD__(v100, v99))
      goto LABEL_117;
    v102 = swift_isUniquelyReferenced_nonNull_native();
    v103 = v160;
    if (!v102 || v101 > *(_QWORD *)(v160 + 24) >> 1)
    {
      if (v100 <= v101)
        v104 = v100 + v99;
      else
        v104 = v100;
      v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v102, v104, 1, v160);
    }
    v48 = (uint64_t *)v173;
    v105 = *(_QWORD *)(v97 + 16);
    v160 = v103;
    if (v105)
    {
      v106 = *(_QWORD *)(v103 + 16);
      if ((*(_QWORD *)(v103 + 24) >> 1) - v106 < v99)
        goto LABEL_119;
      v107 = v103 + v183 + v106 * v45;
      if (v97 + v183 < v107 + v99 * v45 && v107 < v97 + v183 + v99 * v45)
        goto LABEL_125;
      swift_arrayInitWithCopy();
      v53 = (uint64_t)v156;
      if (v99)
      {
        v109 = *(_QWORD *)(v160 + 16);
        v95 = __OFADD__(v109, v99);
        v110 = v109 + v99;
        if (v95)
          goto LABEL_120;
        *(_QWORD *)(v160 + 16) = v110;
      }
    }
    else
    {
      v53 = (uint64_t)v156;
      if (v99)
        goto LABEL_118;
    }
    v54 = v158 + 1;
    swift_bridgeObjectRelease();
    if (v54 == v155)
    {
      swift_bridgeObjectRelease_n();
      v112 = v150;
      v111 = v160;
      goto LABEL_87;
    }
  }
  v162 = v58 + v183;
  v153 = v58;
  swift_bridgeObjectRetain();
  v59 = 0;
  v166 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v165 = v59;
    v60 = v162 + v59 * v45;
    v61 = v164;
    outlined init with copy of __RKEntityActionSpecification(v60, v164, type metadata accessor for __RKEntityTriggerSpecification);
    outlined init with copy of __RKEntityActionSpecification(v61, (uint64_t)v49, type metadata accessor for __RKEntityTriggerSpecification);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      v62 = *v49;
      v63 = MEMORY[0x24BEE4AF8];
      v187 = MEMORY[0x24BEE4AF8];
      v170 = *(_QWORD *)(v62 + 16);
      if (v170)
      {
        v169 = v62 + v183;
        v161 = v62;
        swift_bridgeObjectRetain();
        v64 = 0;
        v57 = type metadata accessor for __RKEntityTriggerSpecification;
        do
        {
          v171 = v64;
          v66 = (uint64_t)v172;
          outlined init with copy of __RKEntityActionSpecification(v169 + v64 * v45, (uint64_t)v172, v57);
          v67 = v168;
          outlined init with copy of __RKEntityActionSpecification(v66, (uint64_t)v168, v57);
          v68 = v57;
          if (swift_getEnumCaseMultiPayload() == 5)
          {
            v69 = *v67;
            v65 = MEMORY[0x24BEE4AF8];
            v186 = MEMORY[0x24BEE4AF8];
            v70 = *(_QWORD *)(v69 + 16);
            if (v70)
            {
              v177 = v69 + v183;
              v167 = v69;
              swift_bridgeObjectRetain();
              v71 = 0;
              v175 = v70;
              do
              {
                outlined init with copy of __RKEntityActionSpecification(v177 + v71 * v45, (uint64_t)v12, v68);
                outlined init with copy of __RKEntityActionSpecification((uint64_t)v12, (uint64_t)v48, v68);
                if (swift_getEnumCaseMultiPayload() == 5)
                {
                  v73 = *v48;
                  v72 = MEMORY[0x24BEE4AF8];
                  v185 = MEMORY[0x24BEE4AF8];
                  v74 = *(_QWORD *)(v73 + 16);
                  if (v74)
                  {
                    v75 = v73 + v183;
                    v176 = v73;
                    swift_bridgeObjectRetain();
                    v76 = 0;
                    do
                    {
                      outlined init with copy of __RKEntityActionSpecification(v75 + v76 * v45, v47, v68);
                      outlined init with copy of __RKEntityActionSpecification(v47, (uint64_t)v40, v68);
                      if (swift_getEnumCaseMultiPayload() == 5)
                      {
                        v78 = v3;
                        v79 = *v40;
                        v77 = MEMORY[0x24BEE4AF8];
                        v184 = MEMORY[0x24BEE4AF8];
                        v80 = *(_QWORD *)(v79 + 16);
                        swift_bridgeObjectRetain();
                        if (v80)
                        {
                          v81 = v79 + v183;
                          do
                          {
                            v82 = __RKEntityTriggerSpecification.flattened.getter();
                            specialized Array.append<A>(contentsOf:)(v82);
                            v81 += v45;
                            --v80;
                          }
                          while (v80);
                          v77 = v184;
                          v68 = type metadata accessor for __RKEntityTriggerSpecification;
                        }
                        swift_bridgeObjectRelease_n();
                        v3 = v78;
                        v40 = (uint64_t *)v178;
                        v47 = (uint64_t)v179;
                      }
                      else
                      {
                        outlined destroy of __RKEntityActionSpecification((uint64_t)v40, v68);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
                        v77 = swift_allocObject();
                        *(_OWORD *)(v77 + 16) = v182;
                        outlined init with copy of __RKEntityActionSpecification(v47, v77 + v183, v68);
                      }
                      ++v76;
                      outlined destroy of __RKEntityActionSpecification(v47, v68);
                      specialized Array.append<A>(contentsOf:)(v77);
                      v68 = type metadata accessor for __RKEntityTriggerSpecification;
                    }
                    while (v76 != v74);
                    swift_bridgeObjectRelease_n();
                    v72 = v185;
                    v48 = (uint64_t *)v173;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                  v12 = v174;
                  v70 = v175;
                }
                else
                {
                  outlined destroy of __RKEntityActionSpecification((uint64_t)v48, v68);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
                  v72 = swift_allocObject();
                  *(_OWORD *)(v72 + 16) = v182;
                  outlined init with copy of __RKEntityActionSpecification((uint64_t)v12, v72 + v183, v68);
                }
                ++v71;
                outlined destroy of __RKEntityActionSpecification((uint64_t)v12, v68);
                specialized Array.append<A>(contentsOf:)(v72);
                v68 = type metadata accessor for __RKEntityTriggerSpecification;
              }
              while (v71 != v70);
              swift_bridgeObjectRelease_n();
              v65 = v186;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            outlined destroy of __RKEntityActionSpecification((uint64_t)v67, v57);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
            v65 = swift_allocObject();
            *(_OWORD *)(v65 + 16) = v182;
            outlined init with copy of __RKEntityActionSpecification((uint64_t)v172, v65 + v183, v57);
          }
          v64 = v171 + 1;
          outlined destroy of __RKEntityActionSpecification((uint64_t)v172, v68);
          v57 = v68;
          specialized Array.append<A>(contentsOf:)(v65);
        }
        while (v64 != v170);
        swift_bridgeObjectRelease_n();
        v63 = v187;
        v49 = (uint64_t *)v159;
        v83 = v164;
      }
      else
      {
        swift_bridgeObjectRelease();
        v83 = v164;
        v57 = type metadata accessor for __RKEntityTriggerSpecification;
      }
    }
    else
    {
      outlined destroy of __RKEntityActionSpecification((uint64_t)v49, type metadata accessor for __RKEntityTriggerSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
      v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = v182;
      outlined init with copy of __RKEntityActionSpecification(v61, v63 + v183, type metadata accessor for __RKEntityTriggerSpecification);
      v83 = v61;
    }
    outlined destroy of __RKEntityActionSpecification(v83, v57);
    v84 = *(_QWORD *)(v63 + 16);
    v85 = *(_QWORD *)(v166 + 16);
    v86 = v85 + v84;
    if (__OFADD__(v85, v84))
      break;
    v87 = swift_isUniquelyReferenced_nonNull_native();
    v88 = v166;
    if (!v87 || v86 > *(_QWORD *)(v166 + 24) >> 1)
    {
      if (v85 <= v86)
        v89 = v85 + v84;
      else
        v89 = v85;
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v87, v89, 1, v166);
    }
    v48 = (uint64_t *)v173;
    v90 = *(_QWORD *)(v63 + 16);
    v166 = v88;
    if (v90)
    {
      v91 = *(_QWORD *)(v88 + 16);
      if ((*(_QWORD *)(v88 + 24) >> 1) - v91 < v84)
        goto LABEL_115;
      v92 = v88 + v183 + v91 * v45;
      if (v63 + v183 < v92 + v84 * v45 && v92 < v63 + v183 + v84 * v45)
        goto LABEL_125;
      swift_arrayInitWithCopy();
      if (v84)
      {
        v94 = *(_QWORD *)(v166 + 16);
        v95 = __OFADD__(v94, v84);
        v96 = v94 + v84;
        if (v95)
          goto LABEL_116;
        *(_QWORD *)(v166 + 16) = v96;
      }
    }
    else if (v84)
    {
      goto LABEL_114;
    }
    v59 = v165 + 1;
    swift_bridgeObjectRelease();
    v57 = type metadata accessor for __RKEntityTriggerSpecification;
    if (v59 == v163)
    {
      swift_bridgeObjectRelease_n();
      v98 = v157;
      v97 = v166;
      goto LABEL_67;
    }
  }
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __RKEntityActionSpecification.flattened.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for __RKEntityActionSpecification(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - v6;
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v18 - v6, v8);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    v9 = *((_QWORD *)v7 + 1);
    v19 = MEMORY[0x24BEE4AF8];
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = v9 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v12 = *(_QWORD *)(v2 + 72);
      swift_bridgeObjectRetain();
      do
      {
        v13 = outlined init with copy of __RKEntityActionSpecification(v11, (uint64_t)v4, type metadata accessor for __RKEntityActionSpecification);
        v14 = __RKEntityActionSpecification.flattened.getter(v13);
        outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for __RKEntityActionSpecification);
        specialized Array.append<A>(contentsOf:)(v14);
        v11 += v12;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease_n();
      return v19;
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v7, type metadata accessor for __RKEntityActionSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v16 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_21BE411F0;
    outlined init with copy of __RKEntityActionSpecification(v0, v15 + v16, type metadata accessor for __RKEntityActionSpecification);
  }
  return v15;
}

uint64_t __RKEntityTriggerSpecification.flattened.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v18 - v6);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v18 - v6, v8);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    v9 = *v7;
    v19 = MEMORY[0x24BEE4AF8];
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = v9 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v12 = *(_QWORD *)(v2 + 72);
      swift_bridgeObjectRetain();
      do
      {
        v13 = outlined init with copy of __RKEntityActionSpecification(v11, (uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
        v14 = __RKEntityTriggerSpecification.flattened.getter(v13);
        outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
        specialized Array.append<A>(contentsOf:)(v14);
        v11 += v12;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease_n();
      return v19;
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v7, type metadata accessor for __RKEntityTriggerSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    v16 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_21BE411F0;
    outlined init with copy of __RKEntityActionSpecification(v0, v15 + v16, type metadata accessor for __RKEntityTriggerSpecification);
  }
  return v15;
}

void specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionSpecification?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v32 - v7;
  v9 = type metadata accessor for __RKEntityActionSpecification(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v38 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v37 = (uint64_t)&v32 - v13;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v36 = (uint64_t)&v32 - v16;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v42 = MEMORY[0x24BEE4AF8];
  v39 = v8;
  v40 = v1;
  v35 = v20;
  while (1)
  {
    if (v18)
    {
      v21 = *(_QWORD *)(v18 + 16);
      if (v17 != v21)
        goto LABEL_14;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v5, 1, 1, v9, v15);
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
    }
    v22 = *(_QWORD *)(a1 + 16);
    if (v19 == v22)
    {
LABEL_23:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v8, 1, 1, v9, v15);
      swift_bridgeObjectRelease();
LABEL_24:
      swift_bridgeObjectRelease();
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
      return;
    }
    if (v19 >= v22)
      break;
    while (1)
    {
      v18 = *(_QWORD *)(a1 + 32 + 8 * v19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v18)
        break;
LABEL_10:
      ++v19;
      v23 = *(_QWORD *)(a1 + 16);
      if (v19 == v23)
        goto LABEL_23;
      if (v19 >= v23)
        goto LABEL_26;
    }
    v21 = *(_QWORD *)(v18 + 16);
    if (!v21)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
      goto LABEL_10;
    }
    v17 = 0;
    ++v19;
LABEL_14:
    if (v17 >= v21)
      goto LABEL_27;
    v34 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v33 = *(_QWORD *)(v10 + 72);
    v24 = v17;
    outlined init with copy of __RKEntityActionSpecification(v18 + v34 + v33 * v17, (uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
    outlined init with take of Transform?((uint64_t)v5, (uint64_t)v8, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    v41 = v24 + 1;
    v25 = v36;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v8, v36, type metadata accessor for __RKEntityActionSpecification);
    v26 = v37;
    outlined init with copy of __RKEntityActionSpecification(v25, v37, type metadata accessor for __RKEntityActionSpecification);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined destroy of __RKEntityActionSpecification(v26, type metadata accessor for __RKEntityActionSpecification);
    if (EnumCaseMultiPayload == 17)
    {
      outlined init with take of __RKEntityActionSpecification(v25, v38, type metadata accessor for __RKEntityActionSpecification);
      v28 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v28 = v42;
      }
      v9 = v35;
      v30 = *(_QWORD *)(v28 + 16);
      v29 = *(_QWORD *)(v28 + 24);
      v31 = v30 + 1;
      if (v30 >= v29 >> 1)
      {
        v32 = v30 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v31 = v32;
        v28 = v42;
      }
      *(_QWORD *)(v28 + 16) = v31;
      outlined init with take of __RKEntityActionSpecification(v38, v28 + v34 + v30 * v33, type metadata accessor for __RKEntityActionSpecification);
      v8 = v39;
      v17 = v41;
    }
    else
    {
      outlined destroy of __RKEntityActionSpecification(v25, type metadata accessor for __RKEntityActionSpecification);
      v8 = v39;
      v9 = v35;
      v17 = v41;
    }
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v32 - v7;
  v9 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v36 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v38 = (uint64_t)&v32 - v13;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v37 = (uint64_t)&v32 - v16;
  v17 = 0;
  v42 = MEMORY[0x24BEE4AF8];
  v39 = v8;
  v40 = v1;
LABEL_4:
  v19 = *(_QWORD *)(a1 + 16);
  if (v17 == v19)
  {
LABEL_23:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v8, 1, 1, v9, v15);
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
    return;
  }
  if (v17 >= v19)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  while (1)
  {
    v20 = *(_QWORD *)(a1 + 32 + 8 * v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v20)
      break;
LABEL_9:
    ++v17;
    v21 = *(_QWORD *)(a1 + 16);
    if (v17 == v21)
      goto LABEL_23;
    if (v17 >= v21)
      goto LABEL_26;
  }
  v18 = *(_QWORD *)(v20 + 16);
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
    goto LABEL_9;
  }
  v22 = 0;
  ++v17;
  while (v22 < v18)
  {
    v35 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v34 = *(_QWORD *)(v10 + 72);
    v23 = v22;
    outlined init with copy of __RKEntityActionSpecification(v20 + v35 + v34 * v22, (uint64_t)v5, type metadata accessor for __RKEntityTriggerSpecification);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
    outlined init with take of Transform?((uint64_t)v5, (uint64_t)v8, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    v41 = v23 + 1;
    v24 = (uint64_t)v8;
    v25 = v37;
    outlined init with take of __RKEntityActionSpecification(v24, v37, type metadata accessor for __RKEntityTriggerSpecification);
    v26 = v38;
    outlined init with copy of __RKEntityActionSpecification(v25, v38, type metadata accessor for __RKEntityTriggerSpecification);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of __RKEntityActionSpecification(v26, type metadata accessor for __RKEntityTriggerSpecification);
      outlined destroy of __RKEntityActionSpecification(v25, type metadata accessor for __RKEntityTriggerSpecification);
    }
    else
    {
      v27 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
      outlined init with take of __RKEntityActionSpecification(v25, v36, type metadata accessor for __RKEntityTriggerSpecification);
      v28 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v28 = v42;
      }
      v30 = *(_QWORD *)(v28 + 16);
      v29 = *(_QWORD *)(v28 + 24);
      v31 = v30 + 1;
      if (v30 >= v29 >> 1)
      {
        v33 = v30 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v31 = v33;
        v28 = v42;
      }
      *(_QWORD *)(v28 + 16) = v31;
      outlined init with take of __RKEntityActionSpecification(v36, v28 + v35 + v30 * v34, type metadata accessor for __RKEntityTriggerSpecification);
    }
    v8 = v39;
    v22 = v41;
    v18 = *(_QWORD *)(v20 + 16);
    if (v41 == v18)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
      goto LABEL_4;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t Scene.hasLookAtOrProximityInteractions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Object;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, _QWORD);
  void *v31;
  char v32;
  os_log_type_t v33;
  uint64_t v34;
  void *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(uint64_t, _QWORD);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  Swift::String v74;
  uint64_t v75;

  v1 = type metadata accessor for Data.Deallocator();
  v69 = *(_QWORD *)(v1 - 8);
  v70 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v60 - v5;
  v72 = 91;
  v73 = 0xE100000000000000;
  v74._countAndFlagsBits = 0;
  v74._object = (void *)0xE000000000000000;
  v75 = v0;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v74);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8285;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_release();
  v11 = (const char *)v72;
  v10 = v73;
  v12 = Scene.__interactionService.getter();
  type metadata accessor for __RKEntityInteractionManager();
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    v72 = (uint64_t)v11;
    v73 = v10;
    v33 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v33, &v72);
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_beginAccess();
  if (!static __RKEntityInteractionsComponent.registration)
  {
    v72 = (uint64_t)v11;
    v73 = v10;
    v36 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v36, &v72);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
  v67 = v3;
  v63 = v11;
  v64 = v12;
  v65 = v10;
  v13 = closure #1 in __RKEntityInteractionManager.entitiesWithInteractionSpecifications()();
  v14 = v13;
  v15 = MEMORY[0x24BEE4AF8];
  v75 = MEMORY[0x24BEE4AF8];
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v16 = result;
  }
  else
  {
    v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v18 = &lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v35 = 0;
    v34 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_69;
    goto LABEL_37;
  }
  if (v16 < 1)
  {
    __break(1u);
    __break(1u);
    return result;
  }
  v66 = v6;
  v19 = 0;
  v68 = 0;
  LODWORD(v62) = *MEMORY[0x24BDCDB98];
  v20 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v14 & 0xC000000000000001) != 0)
    {
      MEMORY[0x220769770](v19, v14);
      if (!static __RKEntityInteractionsComponent.registration)
        goto LABEL_18;
    }
    else
    {
      swift_retain();
      if (!static __RKEntityInteractionsComponent.registration)
        goto LABEL_18;
    }
    if (!REEntityGetCustomComponent() || (Object = RECustomComponentGetObject()) == 0)
    {
LABEL_18:
      v23 = v20;
      goto LABEL_29;
    }
    v22 = *(_QWORD *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)&v72);
    if (v22)
    {
      v23 = v22;
    }
    else
    {
      v24 = v72;
      if (v72)
      {
        v25 = strlen((const char *)v72);
        (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v66, v62, v70);
        v26 = Data.Deallocator._deallocator.getter();
        if (v25)
        {
          v61 = v26;
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_retain();
          v27 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
          v25 = specialized Data._Representation.init(_:count:)(v27, v25);
          v29 = v28;
          swift_release();
        }
        else
        {
          v30 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter();
          v30(v24, 0);
          swift_release();
          swift_release();
          v29 = 0xC000000000000000;
        }
        (*(void (**)(char *, uint64_t))(v69 + 8))(v66, v70);
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
        lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
        v31 = v68;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        if (v31)
        {
          swift_release();
          outlined consume of Data._Representation(v25, v29);

          v68 = 0;
          v23 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          v68 = 0;
          swift_release();
          outlined consume of Data._Representation(v25, v29);
          v23 = v71;
        }
        v18 = &lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey;
      }
      else
      {
        v23 = MEMORY[0x24BEE4AF8];
      }
    }
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)&v72);
    v20 = MEMORY[0x24BEE4AF8];
LABEL_29:
    v32 = Array<A>.hasLookAtInteractions.getter(v23);
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
    ++v19;
  }
  while (v16 != v19);
  swift_bridgeObjectRelease();
  v34 = v75;
  v35 = v68;
  v15 = MEMORY[0x24BEE4AF8];
  if (v75 < 0)
  {
LABEL_69:
    swift_bridgeObjectRetain();
    v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_39;
  }
LABEL_37:
  if ((v34 & 0x4000000000000000) != 0)
    goto LABEL_69;
  v37 = *(_QWORD *)(v34 + 16);
LABEL_39:
  swift_release();
  v75 = v15;
  if (v16)
  {
    v61 = v37;
    v68 = v35;
    LODWORD(v66) = *MEMORY[0x24BDCDB98];
    swift_bridgeObjectRetain();
    v38 = 0;
    v39 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        MEMORY[0x220769770](v38, v14);
        if (!v18[79])
          goto LABEL_52;
      }
      else
      {
        swift_retain();
        if (!v18[79])
          goto LABEL_52;
      }
      if (REEntityGetCustomComponent())
      {
        v40 = RECustomComponentGetObject();
        if (v40)
        {
          v41 = *(_QWORD *)(v40 + 16);
          outlined init with copy of __RKEntityInteractionsComponent(v40, (uint64_t)&v72);
          if (v41)
          {
            v42 = v41;
          }
          else
          {
            v44 = v72;
            if (v72)
            {
              v45 = strlen((const char *)v72);
              (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v67, v66, v70);
              v46 = Data.Deallocator._deallocator.getter();
              if (v45)
              {
                v62 = v46;
                type metadata accessor for __DataStorage();
                swift_allocObject();
                swift_retain();
                v47 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                v45 = specialized Data._Representation.init(_:count:)(v47, v45);
                v49 = v48;
                swift_release();
              }
              else
              {
                v50 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter();
                v50(v44, 0);
                swift_release();
                swift_release();
                v49 = 0xC000000000000000;
              }
              (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v70);
              type metadata accessor for JSONDecoder();
              swift_allocObject();
              JSONDecoder.init()();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
              lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
              v51 = v68;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)();
              if (v51)
              {
                swift_release();
                outlined consume of Data._Representation(v45, v49);

                v68 = 0;
                v39 = MEMORY[0x24BEE4AF8];
                v42 = MEMORY[0x24BEE4AF8];
                v18 = &lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey;
              }
              else
              {
                v68 = 0;
                swift_release();
                outlined consume of Data._Representation(v45, v49);
                v42 = v71;
                v18 = &lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey;
                v39 = MEMORY[0x24BEE4AF8];
              }
            }
            else
            {
              v39 = MEMORY[0x24BEE4AF8];
              v42 = MEMORY[0x24BEE4AF8];
            }
          }
          swift_bridgeObjectRetain();
          outlined destroy of __RKEntityInteractionsComponent((uint64_t)&v72);
          goto LABEL_53;
        }
      }
LABEL_52:
      v42 = v39;
LABEL_53:
      v43 = Array<A>.hasProximityTriggers.getter(v42);
      swift_bridgeObjectRelease();
      if ((v43 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
      if (v16 == ++v38)
      {
        swift_bridgeObjectRelease();
        v15 = v75;
        v37 = v61;
        break;
      }
    }
  }
  if (v15 < 0 || (v15 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    v52 = *(_QWORD *)(v15 + 16);
  }
  v53 = swift_release();
  MEMORY[0x24BDAC7A8](v53);
  *(&v60 - 2) = v14;
  *((_BYTE *)&v60 - 8) = v37 != 0;
  *((_BYTE *)&v60 - 7) = v54;
  v55 = v63;
  v56 = v65;
  v72 = (uint64_t)v63;
  v73 = v65;
  v57 = static os_log_type_t.info.getter();
  v58 = specialized InteractionsLogger.log(_:_:)(v57, &v72, partial apply for implicit closure #4 in Scene.hasLookAtOrProximityInteractions.getter, &v60 - 4);
  MEMORY[0x24BDAC7A8](v58);
  *(&v60 - 2) = v14;
  v72 = (uint64_t)v55;
  v73 = v56;
  v59 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v59, &v72, partial apply for implicit closure #5 in Scene.hasLookAtOrProximityInteractions.getter, &v60 - 4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return (v37 | v52) != 0;
}

uint64_t implicit closure #4 in Scene.hasLookAtOrProximityInteractions.getter(unint64_t a1, char a2, char a3)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;

  _StringGuts.grow(_:)(91);
  v6._countAndFlagsBits = 0x2064656B63656843;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD000000000000035;
  v8._object = (void *)0x800000021BE8BBE0;
  String.append(_:)(v8);
  if ((a2 & 1) != 0)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x800000021BE8BC20;
  v12._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v12);
  if ((a3 & 1) != 0)
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if ((a3 & 1) != 0)
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t implicit closure #5 in Scene.hasLookAtOrProximityInteractions.getter(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t Object;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(const char *, _QWORD);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  _QWORD v36[2];
  unsigned int v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  const char *v45[6];
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v2 = type metadata accessor for Data.Deallocator();
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = 0;
  v48 = 0xE000000000000000;
  v5._countAndFlagsBits = 0x203A7363657053;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v46 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if ((v6 & 0x8000000000000000) == 0)
    {
      v38 = v4;
      v7 = v46;
      v43 = a1 & 0xC000000000000001;
      swift_beginAccess();
      v9 = 0;
      v37 = *MEMORY[0x24BDCDB98];
      v42 = a1;
      v10 = v6;
      while (1)
      {
        if (v43)
          MEMORY[0x220769770](v9, a1);
        else
          swift_retain();
        if (static __RKEntityInteractionsComponent.registration)
        {
          if (REEntityGetCustomComponent())
          {
            Object = RECustomComponentGetObject();
            if (Object)
              break;
          }
        }
        v13 = MEMORY[0x24BEE4AF8];
LABEL_24:
        v24 = type metadata accessor for __RKEntityInteractionSpecification(0);
        v25 = MEMORY[0x220768F48](v13, v24);
        v27 = v26;
        swift_release();
        swift_bridgeObjectRelease();
        v46 = v7;
        v29 = *(_QWORD *)(v7 + 16);
        v28 = *(_QWORD *)(v7 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v7 = v46;
        }
        ++v9;
        *(_QWORD *)(v7 + 16) = v29 + 1;
        v30 = v7 + 16 * v29;
        *(_QWORD *)(v30 + 32) = v25;
        *(_QWORD *)(v30 + 40) = v27;
        a1 = v42;
        if (v10 == v9)
          goto LABEL_27;
      }
      v12 = *(_QWORD *)(Object + 16);
      outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v45);
      if (v12)
      {
        v13 = v12;
      }
      else
      {
        v14 = v45[0];
        if (v45[0])
        {
          v39 = 0;
          v15 = strlen(v45[0]);
          v16 = v38;
          (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v38, v37, v41);
          v17 = Data.Deallocator._deallocator.getter();
          if (v15)
          {
            v36[1] = v17;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            swift_retain();
            v18 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
            v19 = specialized Data._Representation.init(_:count:)(v18, v15);
            v21 = v20;
            swift_release();
          }
          else
          {
            v22 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
            v22(v14, 0);
            swift_release();
            swift_release();
            v19 = 0;
            v21 = 0xC000000000000000;
          }
          (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v41);
          type metadata accessor for JSONDecoder();
          swift_allocObject();
          JSONDecoder.init()();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
          lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
          v23 = v39;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          if (!v23)
          {
            swift_release();
            outlined consume of Data._Representation(v19, v21);
            v13 = v44;
            goto LABEL_23;
          }
          swift_release();
          outlined consume of Data._Representation(v19, v21);

        }
        v13 = MEMORY[0x24BEE4AF8];
      }
LABEL_23:
      swift_bridgeObjectRetain();
      outlined destroy of __RKEntityInteractionsComponent((uint64_t)v45);
      goto LABEL_24;
    }
    __break(1u);
  }
  else
  {
LABEL_27:
    v45[0] = (const char *)v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v31 = BidirectionalCollection<>.joined(separator:)();
    v33 = v32;
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    String.append(_:)(v35);
    return v47;
  }
  return result;
}

uint64_t partial apply for implicit closure #4 in Scene.hasLookAtOrProximityInteractions.getter()
{
  uint64_t v0;

  return implicit closure #4 in Scene.hasLookAtOrProximityInteractions.getter(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25));
}

uint64_t partial apply for implicit closure #5 in Scene.hasLookAtOrProximityInteractions.getter()
{
  uint64_t v0;

  return implicit closure #5 in Scene.hasLookAtOrProximityInteractions.getter(*(_QWORD *)(v0 + 16));
}

uint64_t ResourceUsageHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceUsageHelper()
{
  return objc_opt_self();
}

char *specialized static ResourceUsageHelper.memoryUsage(in:)(char a1)
{
  uint64_t v2;
  mach_error_t v3;
  char *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  mach_msg_type_number_t v14;
  integer_t v15[36];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v2);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  v14 = 93;
  v3 = task_info(*MEMORY[0x24BDAEC58], 0x16u, v15, &v14);
  if (!v3)
    return (char *)((unint64_t)v16 / qword_21BE65E78[a1]);
  result = mach_error_string(v3);
  if (result)
  {
    static String.Encoding.ascii.getter();
    v5 = String.init(cString:encoding:)();
    if (v6)
      v7 = v5;
    else
      v7 = 0x206E776F6E6B6E55;
    if (v6)
      v8 = v6;
    else
      v8 = 0xED0000726F727245;
    if (one-time initialization token for logger != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    swift_bridgeObjectRetain();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v31[0] = v13;
      *(_DWORD *)v12 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v10, v11, "Error with task_info(): %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v13, -1, -1);
      MEMORY[0x220772F44](v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for SharedCacheStorage()
{
  return swift_initClassMetadata2();
}

uint64_t SharedCacheStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SharedCacheStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedCacheStorage);
}

uint64_t type metadata completion function for ShaderCacheLoader()
{
  return swift_initClassMetadata2();
}

uint64_t ShaderCacheLoader.deinit()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ShaderCacheLoader.__deallocating_deinit()
{
  ShaderCacheLoader.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for ShaderCacheLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShaderCacheLoader);
}

uint64_t type metadata completion function for ShaderCache()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance ShaderCacheLoader<A>()
{
  return protocol witness for Actor.unownedExecutor.getter in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader();
}

uint64_t ShaderCache.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ShaderCache.__deallocating_deinit()
{
  ShaderCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ShaderCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShaderCache);
}

ValueMetadata *type metadata accessor for ShaderCacheError()
{
  return &type metadata for ShaderCacheError;
}

uint64_t Entity.playAudio(configuration:_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  v5 = a1[1];
  v6 = a1[2];
  v10[0] = *a1;
  v10[1] = v5;
  v10[2] = v6;
  type metadata accessor for AudioGeneratorController();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  specialized AudioGeneratorController.init(generatorRenderHandler:configuration:entity:)(a2, a3, (int *)v10);
  v8 = v7;
  swift_release();
  swift_release();
  AudioGeneratorController.play()();
  return v8;
}

uint64_t Entity.prepareAudio(configuration:_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  v5 = a1[1];
  v6 = a1[2];
  v10[0] = *a1;
  v10[1] = v5;
  v10[2] = v6;
  type metadata accessor for AudioGeneratorController();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  specialized AudioGeneratorController.init(generatorRenderHandler:configuration:entity:)(a2, a3, (int *)v10);
  v8 = v7;
  swift_release();
  swift_release();
  return v8;
}

uint64_t __RKEmphasisBlinkAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisBlinkAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisBlinkAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKEmphasisBlinkAnimation.createBlinkAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  int v9;
  float v10;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  _OWORD *v23;
  uint64_t result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29[8];
  const char *v30;
  char v31;
  char v32;
  float v33;
  int v34;
  float v35;
  Swift::OpaquePointer v36;

  if (*a8)
  {
    if (*a8 == 1)
    {
      v36._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 168, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for playfulBlinkAnimationData == -1)
        goto LABEL_8;
    }
    else
    {
      v36._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 226, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for wildBlinkAnimationData == -1)
        goto LABEL_8;
    }
LABEL_18:
    swift_once();
    goto LABEL_8;
  }
  v36._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 133, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for basicBlinkAnimationData != -1)
    goto LABEL_18;
LABEL_8:
  v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v36);
  swift_bridgeObjectRelease();
  rawValue = v36._rawValue;
  if (!*((_QWORD *)v36._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v18 = rawValue[2];
  if (!v18)
  {
    __break(1u);
    goto LABEL_17;
  }
  v8 = v32;
  v10 = (float)v18;
  v9 = v34;
  v19 = (__int128 *)&rawValue[6 * v18];
  v27 = *v19;
  v28 = *(v19 - 1);
  v26 = v19[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
  v21 = rawValue[2];
  v20 = rawValue[3];
  v22 = a5 / v10;
  if (v21 >= v20 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, rawValue);
  rawValue[2] = v21 + 1;
  v23 = &rawValue[6 * v21];
  v23[2] = v28;
  v23[3] = v27;
  v23[4] = v26;
  v36._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v29, (float32x2_t **)&v36);
  v29[0] = 1;
  v30 = "Transform.transform";
  v31 = 1;
  v32 = v8;
  v33 = v22;
  v34 = v9;
  v35 = a5;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v25 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Material.parameters.setter(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  ValueMetadata *v31;
  _UNKNOWN **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;

  v2 = a1;
  v3 = *(_QWORD *)v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  swift_retain();
  v7 = v6(v4, v5);
  swift_release();
  swift_release();
  v9 = v2[3];
  v8 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v9);
  if (v3 == v7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v33, v9, v8);
    v21 = v33;
    v22 = v34;
    v24 = v35;
    v23 = v36;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 8) = v21;
    *(_BYTE *)(v1 + 16) = v22;
    *(_QWORD *)(v1 + 24) = v24;
    *(_QWORD *)(v1 + 32) = v23;
  }
  else
  {
    v10 = Material.allKeys.getter(v9, v8);
    v11 = specialized Sequence.compactMap<A>(_:)(v10);
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v26 = v2;
      v13 = (uint64_t *)(v11 + 40);
      v29 = v1;
      do
      {
        v28 = v12;
        v15 = *(v13 - 1);
        v16 = *v13;
        v17 = v2[3];
        __swift_project_boxed_opaque_existential_1(v2, v17);
        swift_bridgeObjectRetain();
        Material.subscript.getter(v15, v16, v17, (uint64_t)&v33);
        v18 = 255;
        v19 = 1;
        switch(v41)
        {
          case 0u:
            v19 = 0;
            v18 = 1;
            break;
          case 1u:
            v19 = 0;
            v18 = 0;
            break;
          case 2u:
            v19 = 0;
            v18 = 2;
            break;
          case 3u:
          case 6u:
          case 0xCu:
          case 0x10u:
            v19 = 0;
            goto LABEL_8;
          case 4u:
          case 5u:
          case 7u:
          case 0xDu:
          case 0xEu:
          case 0x11u:
          case 0x12u:
            v19 = 0;
            goto LABEL_8;
          case 8u:
            v19 = 0;
LABEL_8:
            v18 = v41;
            break;
          case 9u:
            v19 = 0;
            v18 = 9;
            break;
          case 0xAu:
            v19 = 0;
            v18 = 10;
            break;
          case 0xBu:
            v19 = 0;
            v18 = 11;
            break;
          case 0xFu:
            v19 = 0;
            v18 = 15;
            break;
          default:
            break;
        }
        v31 = &type metadata for CustomMaterial;
        v32 = &protocol witness table for CustomMaterial;
        v20 = v19;
        v30[0] = swift_allocObject();
        outlined init with copy of CustomMaterial(v29, v30[0] + 16);
        if ((v20 & 1) == 0)
          __asm { BR              X9 }
        v14 = v31;
        v27 = (uint64_t)v32;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, (uint64_t)v31);
        v33 = 0;
        v34 = 0;
        v13 += 2;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 19;
        Material.subscript.setter((uint64_t)&v33, v15, v16, (uint64_t)v14, v27);
        specialized Material.parameters.setter(v30);
        v12 = v28 - 1;
        v2 = v26;
      }
      while (v28 != 1);
    }
    swift_bridgeObjectRelease();
  }
  return outlined destroy of MaterialParameters((uint64_t)v2);
}

{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t *v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD v44[5];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;

  v2 = a1;
  v3 = *v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  swift_retain();
  v7 = v6(v4, v5);
  swift_release();
  swift_release();
  v8 = v2[3];
  v9 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v8);
  if (v3 == v7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 16))(&v45, v8, v9);
    v31 = v45;
    v32 = v46;
    v33 = v47;
    v34 = v48;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1[1] = v31;
    *((_BYTE *)v1 + 16) = v32;
    v1[3] = v33;
    v1[4] = v34;
  }
  else
  {
    v37 = v1;
    v10 = Material.allKeys.getter(v8, v9);
    v11 = specialized Sequence.compactMap<A>(_:)(v10);
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v43 = (uint64_t *)(v11 + 40);
      v13 = v1;
      v36 = v2;
      do
      {
        v42 = v12;
        v15 = *(v43 - 1);
        v16 = *v43;
        v17 = v2[3];
        __swift_project_boxed_opaque_existential_1(v2, v17);
        swift_bridgeObjectRetain();
        v40 = v16;
        v41 = v15;
        Material.subscript.getter(v15, v16, v17, (uint64_t)&v45);
        v18 = 255;
        v19 = 1;
        switch(v53)
        {
          case 0u:
            v19 = 0;
            v18 = 1;
            break;
          case 1u:
            v19 = 0;
            v18 = 0;
            break;
          case 2u:
            v19 = 0;
            v18 = 2;
            break;
          case 3u:
          case 6u:
          case 0xCu:
          case 0x10u:
            v19 = 0;
            goto LABEL_8;
          case 4u:
          case 5u:
          case 7u:
          case 0xDu:
          case 0xEu:
          case 0x11u:
          case 0x12u:
            v19 = 0;
            goto LABEL_8;
          case 8u:
            v19 = 0;
LABEL_8:
            v18 = v53;
            break;
          case 9u:
            v19 = 0;
            v18 = 9;
            break;
          case 0xAu:
            v19 = 0;
            v18 = 10;
            break;
          case 0xBu:
            v19 = 0;
            v18 = 11;
            break;
          case 0xFu:
            v19 = 0;
            v18 = 15;
            break;
          default:
            break;
        }
        v38 = v18;
        v20 = *v13;
        v21 = v13[1];
        v39 = *((_BYTE *)v13 + 16);
        v22 = v13[3];
        v23 = (void *)v13[4];
        v24 = v13[5];
        v25 = *((_BYTE *)v13 + 48);
        v26 = v13;
        v27 = *((_BYTE *)v13 + 49);
        v28 = v26[7];
        v29 = *((_BYTE *)v26 + 64);
        v44[3] = &type metadata for ShaderGraphMaterial;
        v44[4] = &protocol witness table for ShaderGraphMaterial;
        v30 = swift_allocObject();
        v44[0] = v30;
        *(_QWORD *)(v30 + 16) = v20;
        *(_QWORD *)(v30 + 24) = v21;
        *(_BYTE *)(v30 + 32) = v39;
        *(_QWORD *)(v30 + 40) = v22;
        *(_QWORD *)(v30 + 48) = v23;
        *(_QWORD *)(v30 + 56) = v24;
        *(_BYTE *)(v30 + 64) = v25;
        *(_BYTE *)(v30 + 65) = v27;
        *(_QWORD *)(v30 + 72) = v28;
        *(_BYTE *)(v30 + 80) = v29;
        if ((v19 & 1) == 0)
          __asm { BR              X9 }
        v43 += 2;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v44, (uint64_t)&type metadata for ShaderGraphMaterial);
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v53 = 19;
        swift_bridgeObjectRetain();
        v14 = v23;
        swift_retain();
        swift_bridgeObjectRetain();
        Material.subscript.setter((uint64_t)&v45, v41, v40, (uint64_t)&type metadata for ShaderGraphMaterial, (uint64_t)&protocol witness table for ShaderGraphMaterial);
        v13 = v37;
        specialized Material.parameters.setter(v44);
        v12 = v42 - 1;
        v2 = v36;
      }
      while (v42 != 1);
    }
    swift_bridgeObjectRelease();
  }
  return outlined destroy of MaterialParameters((uint64_t)v2);
}

BOOL static CustomMaterial.CustomParameterError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CustomMaterial.CustomParameterError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t CustomMaterial.customParameters.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  a1[3] = (uint64_t)&type metadata for CustomMaterial;
  a1[4] = (uint64_t)&protocol witness table for CustomMaterial;
  v3 = swift_allocObject();
  *a1 = v3;
  return outlined init with copy of CustomMaterial(v1, v3 + 16);
}

uint64_t sub_21BC19C38()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(_QWORD *)(v0 + 80) - 1) >= 2)
    swift_release();
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(v0 + 96), *(void **)(v0 + 104), *(_BYTE *)(v0 + 112));
  if (*(_QWORD *)(v0 + 144))
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  if (*(_QWORD *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if ((unint64_t)(*(_QWORD *)(v0 + 304) - 1) >= 3)
    swift_release();
  return swift_deallocObject();
}

uint64_t key path setter for CustomMaterial.customParameters : CustomMaterial(uint64_t a1)
{
  _QWORD v2[5];
  _BYTE v3[40];

  outlined init with copy of UniformParameters(a1, (uint64_t)v3);
  outlined init with copy of MaterialParameters((uint64_t)v3, (uint64_t)v2);
  specialized Material.parameters.setter(v2);
  return outlined destroy of UniformParameters((uint64_t)v3);
}

uint64_t CustomMaterial.customParameters.setter(uint64_t a1)
{
  _QWORD v3[5];

  outlined init with copy of MaterialParameters(a1, (uint64_t)v3);
  specialized Material.parameters.setter(v3);
  return outlined destroy of UniformParameters(a1);
}

uint64_t outlined destroy of UniformParameters(uint64_t a1)
{
  destroy for AnyMeshBuffer();
  return a1;
}

void (*CustomMaterial.customParameters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  v3[3] = &type metadata for CustomMaterial;
  v3[4] = &protocol witness table for CustomMaterial;
  v4 = swift_allocObject();
  *v3 = v4;
  outlined init with copy of CustomMaterial(v1, v4 + 16);
  return CustomMaterial.customParameters.modify;
}

void CustomMaterial.customParameters.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*a1;
  v3 = (_QWORD *)(*a1 + 40);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of UniformParameters(*a1, (uint64_t)v3);
    outlined init with copy of MaterialParameters((uint64_t)v3, (uint64_t)(v2 + 10));
    specialized Material.parameters.setter(v2 + 10);
    outlined destroy of UniformParameters((uint64_t)v3);
  }
  else
  {
    outlined init with copy of MaterialParameters(*a1, (uint64_t)v3);
    specialized Material.parameters.setter(v3);
  }
  outlined destroy of UniformParameters((uint64_t)v2);
  free(v2);
}

uint64_t outlined init with copy of UniformParameters(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyMeshBuffer(a2, a1);
  return a2;
}

uint64_t CustomMaterial.getCustomParameter(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _OWORD v6[4];
  unsigned __int8 v7;
  _OWORD v8[4];
  unsigned __int8 v9;
  _QWORD v10[5];

  strcpy((char *)v8, "customParams.");
  HIWORD(v8[0]) = -4864;
  String.append(_:)(*(Swift::String *)&a1);
  v10[3] = &type metadata for CustomMaterial;
  v10[4] = &protocol witness table for CustomMaterial;
  v10[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v3, v10[0] + 16);
  __swift_project_boxed_opaque_existential_1(v10, (uint64_t)&type metadata for CustomMaterial);
  Material.subscript.getter(*(uint64_t *)&v8[0], *((uint64_t *)&v8[0] + 1), (uint64_t)&type metadata for CustomMaterial, (uint64_t)v8);
  if (v9 == 255)
  {
    swift_bridgeObjectRelease();
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 64) = -1;
  }
  else
  {
    v6[0] = v8[0];
    v6[1] = v8[1];
    v6[2] = v8[2];
    v6[3] = v8[3];
    v7 = v9;
    MaterialParameters.Value.init(_:)((uint64_t)v6);
    swift_bridgeObjectRelease();
  }
  return outlined destroy of MaterialParameters((uint64_t)v10);
}

void CustomMaterial.setCustomParameter(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int ParameterType;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[3];
  ValueMetadata *v45;
  _UNKNOWN **v46;
  uint64_t v47;

  v4 = *(void **)a3;
  v30 = *(_QWORD *)(a3 + 8);
  v47 = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(a3 + 40);
  v28 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a3 + 48);
  v6 = *(_QWORD *)(a3 + 56);
  v8 = *(unsigned __int8 *)(a3 + 64);
  strcpy((char *)&v32, "customParams.");
  HIWORD(v32) = -4864;
  String.append(_:)(*(Swift::String *)&a1);
  v9 = v32;
  if (v8 == 255)
  {
    v45 = &type metadata for CustomMaterial;
    v46 = &protocol witness table for CustomMaterial;
    v44[0] = swift_allocObject();
    outlined init with copy of CustomMaterial(v3, v44[0] + 16);
    *(_QWORD *)&v38 = v4;
    *((_QWORD *)&v38 + 1) = v30;
    *(_QWORD *)&v39 = v47;
    *((_QWORD *)&v39 + 1) = v26;
    *(_QWORD *)&v40 = v28;
    *((_QWORD *)&v40 + 1) = v5;
    v41 = v7;
    v42 = v6;
    v43 = -1;
    __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v38, (uint64_t)&v32);
    v29 = v33;
    v31 = v32;
    v27 = v34;
    v16 = v35;
    v17 = v36;
    v18 = v37;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v44, (uint64_t)&type metadata for CustomMaterial);
    v38 = v31;
    v39 = v29;
    v40 = v27;
    v41 = v16;
    v42 = v17;
    v43 = v18;
    Material.subscript.setter((uint64_t)&v38, v9, *((uint64_t *)&v9 + 1), (uint64_t)&type metadata for CustomMaterial, (uint64_t)&protocol witness table for CustomMaterial);
    specialized Material.parameters.setter(v44);
  }
  else
  {
    outlined init with copy of CustomMaterial(v3, (uint64_t)&v32);
    swift_beginAccess();
    String.utf8CString.getter();
    v10 = v47;
    v25 = v5;
    outlined copy of MaterialParameters.Value(v4, v30, v47, v26, v28, v5, v7, v6, v8);
    ParameterType = REMaterialAssetGetParameterType();
    swift_release();
    if (ParameterType)
    {
      *(_QWORD *)&v38 = v4;
      *((_QWORD *)&v38 + 1) = v30;
      *(_QWORD *)&v39 = v10;
      *((_QWORD *)&v39 + 1) = v26;
      *(_QWORD *)&v40 = v28;
      *((_QWORD *)&v40 + 1) = v5;
      v41 = v7;
      v42 = v6;
      v43 = v8;
      if (ParameterType == MaterialParameters.Value.getMaterialParameterType()())
      {
        outlined destroy of CustomMaterial((uint64_t)&v32);
        v45 = &type metadata for CustomMaterial;
        v46 = &protocol witness table for CustomMaterial;
        v44[0] = swift_allocObject();
        outlined init with copy of CustomMaterial(v3, v44[0] + 16);
        *(_QWORD *)&v38 = v4;
        *((_QWORD *)&v38 + 1) = v30;
        *(_QWORD *)&v39 = v10;
        *((_QWORD *)&v39 + 1) = v26;
        *(_QWORD *)&v40 = v28;
        *((_QWORD *)&v40 + 1) = v5;
        v41 = v7;
        v42 = v6;
        v43 = v8;
        __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v38, (uint64_t)&v32);
        v23 = v33;
        v24 = v32;
        v22 = v34;
        v13 = v35;
        v12 = v36;
        v14 = v37;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v44, (uint64_t)&type metadata for CustomMaterial);
        v38 = v24;
        v39 = v23;
        v40 = v22;
        v41 = v13;
        v42 = v12;
        v43 = v14;
        v15 = v47;
        outlined copy of MaterialParameters.Value(v4, v30, v47, v26, v28, v25, v7, v6, v8);
        Material.subscript.setter((uint64_t)&v38, v9, *((uint64_t *)&v9 + 1), (uint64_t)&type metadata for CustomMaterial, (uint64_t)&protocol witness table for CustomMaterial);
        specialized Material.parameters.setter(v44);
        outlined consume of MaterialParameters.Value?(v4, v30, v15, v26, v28, v25, v7, v6, v8);
        return;
      }
      v19 = v30;
      v20 = 0;
    }
    else
    {
      v19 = v30;
      v20 = 1;
    }
    lazy protocol witness table accessor for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError();
    swift_allocError();
    *v21 = v20;
    swift_willThrow();
    outlined destroy of CustomMaterial((uint64_t)&v32);
    swift_bridgeObjectRelease();
    outlined consume of MaterialParameters.Value?(v4, v19, v47, v26, v28, v5, v7, v6, v8);
  }
}

void CustomMaterial.CustomUniformsState.withSharedBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  char v11;
  id v12;

  if (*(_BYTE *)(v3 + 16))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v7 = *(void **)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 2;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v8 = v7;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      v7 = (void *)REDirectParameterBufferCopy();

    }
    v9 = *(void **)v3;
    v10 = *(void **)(v3 + 8);
    v11 = *(_BYTE *)(v3 + 16);
    v12 = v7;
    specialized CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(v12, a1, a2, a3);

    outlined consume of CustomMaterial.CustomUniformsState(v9, v10, v11);
    *(_QWORD *)v3 = v12;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 0;
  }
}

void CustomMaterial.CustomUniformsState.withUniqueGeometryBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  char v12;
  id v13;

  if (*(_BYTE *)(v3 + 16) == 1)
  {
    v7 = *(void **)v3;
    v8 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 2;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v9 = v7;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      v7 = (void *)REDirectParameterBufferCopy();

    }
    v10 = *(void **)v3;
    v11 = *(void **)(v3 + 8);
    v12 = *(_BYTE *)(v3 + 16);
    v13 = v7;
    specialized CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(v13, a1, a2, a3);

    outlined consume of CustomMaterial.CustomUniformsState(v10, v11, v12);
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v8;
    *(_BYTE *)(v3 + 16) = 1;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void CustomMaterial.CustomUniformsState.withUniqueSurfaceBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  char v12;
  id v13;

  if (*(_BYTE *)(v3 + 16) == 1)
  {
    v8 = *(void **)v3;
    v7 = *(void **)(v3 + 8);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 2;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v9 = v7;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      v7 = (void *)REDirectParameterBufferCopy();

    }
    v10 = *(void **)v3;
    v11 = *(void **)(v3 + 8);
    v12 = *(_BYTE *)(v3 + 16);
    v13 = v7;
    specialized CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(v13, a1, a2, a3);

    outlined consume of CustomMaterial.CustomUniformsState(v10, v11, v12);
    *(_QWORD *)v3 = v8;
    *(_QWORD *)(v3 + 8) = v13;
    *(_BYTE *)(v3 + 16) = 1;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

Swift::Void __swiftcall CustomMaterial.CustomUniformsState.convertToSharedWithSize(size:)(Swift::Int size)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;

  v3 = *(void **)v1;
  v4 = *(void **)(v1 + 8);
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    outlined consume of CustomMaterial.CustomUniformsState(*(void **)v1, *(void **)(v1 + 8), 1);
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    *(_QWORD *)v1 = REDirectParameterBufferCreateWithSize();
  }
  else
  {
    if (*(_BYTE *)(v1 + 16))
      return;
    outlined copy of CustomMaterial.CustomUniformsState(*(id *)v1, *(void **)(v1 + 8), 0);
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    if (REDirectParameterBufferGetSize() >= size)
    {

      return;
    }
    outlined consume of CustomMaterial.CustomUniformsState(v3, v4, 0);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 16) = 2;
    if (swift_isUniquelyReferenced_nonNull())
    {
      v5 = v3;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      REDirectParameterBufferResize();

      *(_QWORD *)v1 = v3;
    }
    else
    {
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      v6 = REDirectParameterBufferCreateWithSize();

      *(_QWORD *)v1 = v6;
    }
  }
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 0;
}

Swift::Void __swiftcall CustomMaterial.CustomUniformsState.convertToUniqueWithGeomSize(size:)(Swift::Int size)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  Swift::Int v6;

  v3 = *(void **)v1;
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    v4 = *(void **)(v1 + 8);
    outlined copy of CustomMaterial.CustomUniformsState(*(id *)v1, v4, 1);
    v5 = v3;
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    v6 = REDirectParameterBufferGetSize();

    if (v6 >= size)
    {

      return;
    }
    outlined consume of CustomMaterial.CustomUniformsState(v3, v4, 1);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 16) = 2;
    if (swift_isUniquelyReferenced_nonNull())
    {
      v5 = v5;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      REDirectParameterBufferResize();
    }
    else
    {
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      v3 = (void *)REDirectParameterBufferCreateWithSize();
    }

    *(_QWORD *)v1 = v3;
    *(_QWORD *)(v1 + 8) = v4;
  }
  else
  {
    if (*(_BYTE *)(v1 + 16))
      return;
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    *(_QWORD *)v1 = REDirectParameterBufferCreateWithSize();
    *(_QWORD *)(v1 + 8) = v3;
  }
  *(_BYTE *)(v1 + 16) = 1;
}

Swift::Void __swiftcall CustomMaterial.CustomUniformsState.convertToUniqueWithSurfSize(size:)(Swift::Int size)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  Swift::Int v7;

  v3 = *(id *)v1;
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    v5 = *(void **)(v1 + 8);
    outlined copy of CustomMaterial.CustomUniformsState(*(id *)v1, v5, 1);
    v6 = v5;
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    v7 = REDirectParameterBufferGetSize();

    if (v7 >= size)
    {

      return;
    }
    outlined consume of CustomMaterial.CustomUniformsState(v3, v5, 1);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 16) = 2;
    if (swift_isUniquelyReferenced_nonNull())
    {
      v6 = v6;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      REDirectParameterBufferResize();
    }
    else
    {
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      v5 = (void *)REDirectParameterBufferCreateWithSize();
    }

    *(_QWORD *)v1 = v3;
    *(_QWORD *)(v1 + 8) = v5;
  }
  else
  {
    if (*(_BYTE *)(v1 + 16))
      return;
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    v4 = REDirectParameterBufferCreateWithSize();
    *(_QWORD *)v1 = v3;
    *(_QWORD *)(v1 + 8) = v4;
  }
  *(_BYTE *)(v1 + 16) = 1;
}

uint64_t CustomMaterial.ResourceStorage.subscript.getter()
{
  char v0;
  uint64_t TextureAssetAtOffset;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v0 & 1) != 0 || (TextureAssetAtOffset = REDirectParameterBufferGetTextureAssetAtOffset()) == 0)
  {
    v4 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4, (uint64_t)v6);
    v3 = closure #1 in static TextureResource.builtinTexture(named:)(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    v2 = TextureAssetAtOffset;
    type metadata accessor for TextureResource();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  return v3;
}

uint64_t CustomMaterial.ResourceStorage.subscript.setter()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  id v6;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;

  v1 = type metadata accessor for Logger();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v5 & 1) != 0)
  {
    Logger.init()();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_21B9AA000, v8, v9, "Attempted to assign texture to invalid key path", v10, 2u);
      MEMORY[0x220772F44](v10, -1, -1);
    }
    swift_release();
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v6 = *v0;
    REDirectParameterBufferSetTextureAssetAtOffset();

    swift_release();
    return swift_release();
  }
}

uint64_t (*CustomMaterial.ResourceStorage.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = CustomMaterial.ResourceStorage.subscript.getter();
  return CustomMaterial.ResourceStorage.subscript.modify;
}

uint64_t CustomMaterial.ResourceStorage.subscript.modify(uint64_t a1, char a2)
{
  swift_retain();
  if ((a2 & 1) == 0)
    return CustomMaterial.ResourceStorage.subscript.setter();
  swift_retain();
  CustomMaterial.ResourceStorage.subscript.setter();
  return swift_release();
}

void CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64);
  if (*a2 == 1)
  {
    CustomMaterial.CustomUniformsState.convertToUniqueWithSurfSize(size:)(v9);
    MEMORY[0x24BDAC7A8](v10);
    v13 = a5;
    v14 = a1;
    v15 = a3;
    v16 = a4;
    CustomMaterial.CustomUniformsState.withUniqueSurfaceBytes<A>(_:)((uint64_t)partial apply for closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:), (uint64_t)v12, a5);
  }
  else
  {
    CustomMaterial.CustomUniformsState.convertToUniqueWithGeomSize(size:)(v9);
    MEMORY[0x24BDAC7A8](v11);
    v13 = a5;
    v14 = a1;
    v15 = a3;
    v16 = a4;
    CustomMaterial.CustomUniformsState.withUniqueGeometryBytes<A>(_:)((uint64_t)partial apply for closure #2 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:), (uint64_t)v12, a5);
  }
}

void CustomMaterial.withMutableUniforms<A>(ofType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v8[6];

  CustomMaterial.CustomUniformsState.convertToSharedWithSize(size:)(*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  CustomMaterial.CustomUniformsState.withSharedBytes<A>(_:)((uint64_t)partial apply for closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:_:), (uint64_t)v8, a4);
}

uint64_t closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t (*a5)(uint64_t, id *), uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  Swift::String v13;

  if (a1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a7 - 8) + 72);
    if (v9)
    {
      if (a2 - a1 != 0x8000000000000000 || v9 != -1)
      {
        v10 = (a2 - a1) / v9;
        goto LABEL_7;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
  v10 = 0;
LABEL_7:
  v11 = MEMORY[0x220769494](a1, v10, a7);
  if (v11)
    return a5(v11, a3);
LABEL_11:

  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.CustomParameterError, &type metadata for CustomMaterial.CustomParameterError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.CustomParameterError, &type metadata for CustomMaterial.CustomParameterError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError);
  }
  return result;
}

uint64_t partial apply for closure #2 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v3;

  return closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(a1, a2, a3, *(_QWORD *)(v3 + 24), *(uint64_t (**)(uint64_t, id *))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 16));
}

uint64_t partial apply for closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v3;

  return closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(a1, a2, a3, *(_QWORD *)(v3 + 24), *(uint64_t (**)(uint64_t, id *))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 16));
}

uint64_t partial apply for closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:_:)(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v3;

  return closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(a1, a2, a3, *(_QWORD *)(v3 + 24), *(uint64_t (**)(uint64_t, id *))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type CustomShaderStage and conformance CustomShaderStage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomShaderStage and conformance CustomShaderStage;
  if (!lazy protocol witness table cache variable for type CustomShaderStage and conformance CustomShaderStage)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomShaderStage, &type metadata for CustomShaderStage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomShaderStage and conformance CustomShaderStage);
  }
  return result;
}

uint64_t sub_21BC1B2EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  a2[3] = (uint64_t)&type metadata for CustomMaterial;
  a2[4] = (uint64_t)&protocol witness table for CustomMaterial;
  v4 = swift_allocObject();
  *a2 = v4;
  return outlined init with copy of CustomMaterial(a1, v4 + 16);
}

ValueMetadata *type metadata accessor for CustomMaterial.CustomParameterError()
{
  return &type metadata for CustomMaterial.CustomParameterError;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.ResourceStorage(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.ResourceStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CustomMaterial.ResourceStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomMaterial.ResourceStorage);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.CustomParameterError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC1B438 + 4 * byte_21BE66159[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC1B46C + 4 * byte_21BE66154[v4]))();
}

uint64_t sub_21BC1B46C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC1B474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC1B47CLL);
  return result;
}

uint64_t sub_21BC1B488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC1B490);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC1B494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC1B49C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomShaderStage()
{
  return &type metadata for CustomShaderStage;
}

void destroy for CustomMaterial.CustomUniformsState(uint64_t a1)
{
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.CustomUniformsState(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CustomMaterial.CustomUniformsState(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.CustomUniformsState(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CustomMaterial.CustomUniformsState(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of CustomMaterial.CustomUniformsState(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.CustomUniformsState(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of CustomMaterial.CustomUniformsState(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for CustomMaterial.CustomUniformsState()
{
  return &type metadata for CustomMaterial.CustomUniformsState;
}

uint64_t sub_21BC1B5BC()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void specialized CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v14[6];
  void *v15;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v8 = (id)REDirectParameterBufferGetDirectBuffer();
  DRBufferSetBytesUsed();
  v15 = a1;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a4;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = &v15;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:);
  *(_QWORD *)(v10 + 24) = v9;
  v14[4] = partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v14[5] = v10;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v14[3] = &block_descriptor_19;
  v11 = _Block_copy(v14);
  v12 = a1;
  swift_retain();
  swift_release();
  DRBufferUpdate();

  _Block_release(v11);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = v15;
    swift_release();

  }
}

uint64_t sub_21BC1B77C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 24))(result, result + a2, *(_QWORD *)(v2 + 40));
  __break(1u);
  return result;
}

uint64_t sub_21BC1B7C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ()(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t __RKLightTrigger.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t __RKLightTrigger.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKLightTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKLightTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKLightTrigger()
{
  return objc_opt_self();
}

double TextComponent.size.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void TextComponent.size.setter(double a1, double a2)
{
  double *v2;

  if (a1 > 2048.0)
    a1 = 2048.0;
  if (a2 > 2048.0)
    a2 = 2048.0;
  *v2 = a1;
  v2[1] = a2;
}

int8x16_t (*TextComponent.size.modify(uint64_t a1))(uint64_t a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return TextComponent.size.modify;
}

int8x16_t TextComponent.size.modify(uint64_t a1)
{
  float64x2_t v1;
  int8x16_t result;

  v1 = (float64x2_t)vdupq_n_s64(0x40A0000000000000uLL);
  result = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)a1, v1), (int8x16_t)v1, *(int8x16_t *)a1);
  *(int8x16_t *)*(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t TextComponent.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for TextComponent() + 20);
  return outlined init with copy of AttributedString?(v3, a1);
}

uint64_t type metadata accessor for TextComponent()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TextComponent;
  if (!type metadata singleton initialization cache for TextComponent)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of AttributedString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TextComponent.text.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for TextComponent() + 20);
  return outlined assign with take of AttributedString?(a1, v3);
}

uint64_t outlined assign with take of AttributedString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*TextComponent.text.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TextComponent();
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void *TextComponent.backgroundColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for TextComponent() + 24));
  v2 = v1;
  return v1;
}

void TextComponent.backgroundColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for TextComponent() + 24);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*TextComponent.backgroundColor.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TextComponent();
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float TextComponent.cornerRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for TextComponent() + 28));
}

uint64_t TextComponent.cornerRadius.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TextComponent();
  *(float *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*TextComponent.cornerRadius.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TextComponent();
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float TextComponent.coreEdgeInsets.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for TextComponent() + 32));
}

uint64_t TextComponent.coreEdgeInsets.setter(float a1, float a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t result;
  float *v10;

  result = type metadata accessor for TextComponent();
  v10 = (float *)(v4 + *(int *)(result + 32));
  *v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  return result;
}

uint64_t (*TextComponent.coreEdgeInsets.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TextComponent();
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextComponent.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v2 = (int *)type metadata accessor for TextComponent();
  *a1 = 0;
  a1[1] = 0;
  v3 = (char *)a1 + v2[5];
  v4 = type metadata accessor for AttributedString();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_QWORD *)((char *)a1 + v2[6]) = 0;
  *(_DWORD *)((char *)a1 + v2[7]) = 0;
  v6 = (_QWORD *)((char *)a1 + v2[8]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t static TextComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  __n128 v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v15;
  char *v16;
  double v17;
  double v18;
  id v19;
  id v20;
  int v21;
  float v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v3 = type metadata accessor for AttributedString();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for TextComponent();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (double *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *a1;
  *v10 = 0.0;
  v10[1] = 0.0;
  v13 = (uint64_t)v10 + *(int *)(v12 + 20);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
  v14(v13, 1, 1, v3, v8);
  v15 = v7[6];
  *(double *)((char *)v10 + v15) = 0.0;
  v30 = v7[7];
  *(_DWORD *)((char *)v10 + v30) = 0;
  v16 = (char *)v10 + v7[8];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  RETextComponentGetSize();
  if (v17 > 2048.0)
    v17 = 2048.0;
  if (v18 > 2048.0)
    v18 = 2048.0;
  *v10 = v17;
  v10[1] = v18;
  v19 = (id)RETextComponentGetAttributedString();
  AttributedString.init(_:)();
  outlined destroy of BodyTrackingComponent?(v13, &demangling cache variable for type metadata for AttributedString?);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v13, v6, v3);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14)(v13, 0, 1, v3);
  v20 = (id)RETextComponentGetBackgroundColor();

  *(_QWORD *)((char *)v10 + v15) = v20;
  RETextComponentGetCornerRadius();
  *(_DWORD *)((char *)v10 + v30) = v21;
  v22 = MEMORY[0x2207706AC](v11);
  v24 = v23;
  v26 = v25;
  v28 = v27;

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(float *)v16 = v22;
  *((_DWORD *)v16 + 1) = v24;
  *((_DWORD *)v16 + 2) = v26;
  *((_DWORD *)v16 + 3) = v28;
  outlined init with copy of TextComponent((uint64_t)v10, v31);
  return outlined destroy of TextComponent((uint64_t)v10);
}

uint64_t outlined init with copy of TextComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextComponent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TextComponent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TextComponent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TextComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  CGColorRef GenericGray;
  id v18;
  uint64_t v19;
  void *v20;
  __int128 aBlock;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];

  v2 = v1;
  v4 = type metadata accessor for TextComponent();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  RETextComponentSetSize();
  outlined init with copy of AttributedString?(v2 + *(int *)(v4 + 20), (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    AttributedString.init(stringLiteral:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for AttributedString?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  }
  type metadata accessor for NSAttributedString();
  v15 = (void *)NSAttributedString.init(_:)();
  MEMORY[0x2207706C4](v14, v15);
  v16 = *(void **)(v2 + *(int *)(v4 + 24));
  if (v16)
  {
    GenericGray = *(CGColorRef *)(v2 + *(int *)(v4 + 24));
  }
  else
  {
    GenericGray = CGColorCreateGenericGray(1.0, 0.0);
    v16 = 0;
  }
  v18 = v16;
  MEMORY[0x2207706D0](v14, GenericGray);

  RETextComponentSetCornerRadius();
  RETextComponentSetEdgeInsets();
  outlined init with copy of TextComponent(v2, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextComponentRender);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of BindableDataInternal(&aBlock, (uint64_t)v26);
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    swift_getDynamicType();
    v24 = (*(uint64_t (**)(void))(v26[4] + 8))();
    v25 = v19;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v23 = thunk for @escaping @callee_guaranteed (@guaranteed CGContextRef, @guaranteed CFAttributedStringRef, @unowned CGRect, @guaranteed CGColorRef, @unowned CGSize) -> ();
    *((_QWORD *)&v23 + 1) = &block_descriptor_20;
    v20 = _Block_copy(&aBlock);
    swift_release();
    RETextComponentSetRenderBlock();
    _Block_release(v20);

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    v24 = 0;
    aBlock = 0u;
    v23 = 0u;

    return outlined destroy of BodyTrackingComponent?((uint64_t)&aBlock, &demangling cache variable for type metadata for TextComponentRender?);
  }
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CGContextRef, @guaranteed CFAttributedStringRef, @unowned CGRect, @guaranteed CGColorRef, @unowned CGSize) -> ()(uint64_t a1, void *a2, void *a3, void *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  void (*v19)(id, id, id, double, double, double, double, double, double);
  id v20;
  id v21;
  id v22;

  v19 = *(void (**)(id, id, id, double, double, double, double, double, double))(a1 + 32);
  swift_retain();
  v22 = a2;
  v20 = a3;
  v21 = a4;
  v19(v22, v20, v21, a5, a6, a7, a8, a9, a10);
  swift_release();

}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

void static TextComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2027;
}

void protocol witness for static Component.__coreComponentType.getter in conformance TextComponent(_DWORD *a1@<X8>)
{
  *a1 = 2027;
}

__n128 sub_21BC1C2E0@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

int8x16_t sub_21BC1C2EC(float64x2_t *a1, int8x16_t *a2)
{
  float64x2_t v2;
  int8x16_t result;

  v2 = (float64x2_t)vdupq_n_s64(0x40A0000000000000uLL);
  result = vbslq_s8((int8x16_t)vcgtq_f64(*a1, v2), (int8x16_t)v2, *(int8x16_t *)a1);
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of static TextComponentRender.renderBlock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for TextComponent(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for AttributedString();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v16;
    *(_DWORD *)((char *)v4 + v15) = *(_DWORD *)((char *)a2 + v15);
    *(_OWORD *)((char *)v4 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
    v17 = v16;
  }
  return v4;
}

void destroy for TextComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

}

_OWORD *initializeWithCopy for TextComponent(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = *(void **)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v14;
  *(_DWORD *)((char *)a1 + v13) = *(_DWORD *)((char *)a2 + v13);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  v15 = v14;
  return a1;
}

_QWORD *assignWithCopy for TextComponent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[6];
  v16 = *(void **)((char *)a1 + v15);
  v17 = *(void **)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  v18 = v17;

  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  v19 = a3[8];
  v20 = (_DWORD *)((char *)a1 + v19);
  v21 = (_DWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  v20[3] = v21[3];
  return a1;
}

_OWORD *initializeWithTake for TextComponent(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_DWORD *)((char *)a1 + v12) = *(_DWORD *)((char *)a2 + v12);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *assignWithTake for TextComponent(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[6];
  v16 = *(void **)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);

  v17 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextComponent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BC1C93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for TextComponent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BC1C9D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

void type metadata completion function for TextComponent()
{
  unint64_t v0;

  type metadata accessor for AttributedString?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for AttributedString?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AttributedString?)
  {
    type metadata accessor for AttributedString();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?);
  }
}

Swift::Void __swiftcall AudioGeneratorController.play()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = v0;
  swift_beginAccess();
  if (swift_weakLoadStrong() && (v2 = specialized HasHierarchy.parent.getter(), swift_release(), swift_release(), v2))
  {
    if (*(_QWORD *)(v0 + 72))
    {
LABEL_4:
      REAudioPlayerComponentPlayToken();
      RENetworkMarkComponentDirty();
      return;
    }
  }
  else
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    v3 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    if (*(_QWORD *)(v1 + 72))
      goto LABEL_4;
  }
  static os_log_type_t.error.getter();
  type metadata accessor for OS_os_log();
  v4 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

}

uint64_t AudioGeneratorController.entity.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t AudioGeneratorController.configuration.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v1[7];
  v2 = v1[8];
  *a1 = v1[6];
  a1[1] = v3;
  a1[2] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutablePointer<ObjCBool>, @unowned UnsafePointer<AudioTimeStamp>, @unowned UInt32, @unowned UnsafeMutablePointer<AudioBufferList>) -> (@unowned Int32)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v10 = v9(a2, a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t AudioGeneratorController.deinit()
{
  uint64_t v0;

  MEMORY[0x22076B990](*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 72));
  RENetworkMarkComponentDirty();
  swift_weakDestroy();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioGeneratorController.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x22076B990](*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 72));
  RENetworkMarkComponentDirty();
  swift_weakDestroy();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double AudioGeneratorController.gain.getter()
{
  float v0;

  REAudioPlayerComponentGetDecibelGainForToken();
  return v0;
}

uint64_t key path setter for AudioGeneratorController.gain : AudioGeneratorController(double *a1)
{
  double v1;
  float v2;
  double v3;
  uint64_t result;

  v1 = *a1;
  REAudioPlayerComponentGetDecibelGainForToken();
  v3 = v2;
  result = REAudioPlayerComponentSetDecibelGainForToken();
  if (v1 != v3)
    return RENetworkMarkComponentDirty();
  return result;
}

uint64_t AudioGeneratorController.gain.setter(double a1)
{
  float v2;
  double v3;
  uint64_t result;

  REAudioPlayerComponentGetDecibelGainForToken();
  v3 = v2;
  result = REAudioPlayerComponentSetDecibelGainForToken();
  if (v3 != a1)
    return RENetworkMarkComponentDirty();
  return result;
}

uint64_t (*AudioGeneratorController.gain.modify(uint64_t a1))(double *a1)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = v3;
  REAudioPlayerComponentGetDecibelGainForToken();
  *(double *)a1 = v4;
  return AudioGeneratorController.gain.modify;
}

uint64_t AudioGeneratorController.gain.modify(double *a1)
{
  double v1;
  float v2;
  double v3;
  uint64_t result;

  v1 = *a1;
  REAudioPlayerComponentGetDecibelGainForToken();
  v3 = v2;
  result = REAudioPlayerComponentSetDecibelGainForToken();
  if (v1 != v3)
    return RENetworkMarkComponentDirty();
  return result;
}

uint64_t AudioGeneratorController.isPlaying.getter()
{
  uint64_t v0;

  return MEMORY[0x22076B8AC](*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 72));
}

Swift::Void __swiftcall AudioGeneratorController.stop()()
{
  uint64_t v0;

  MEMORY[0x22076B990](*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 72));
  RENetworkMarkComponentDirty();
}

uint64_t sub_21BC1CFA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_21BC1CFF4()
{
  swift_beginAccess();
  return swift_weakAssign();
}

double sub_21BC1D040@<D0>(double *a1@<X8>)
{
  float v2;
  double result;

  REAudioPlayerComponentGetDecibelGainForToken();
  result = v2;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for AudioGeneratorController()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudioGeneratorController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioGeneratorController.entity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

void specialized AudioGeneratorController.init(generatorRenderHandler:configuration:entity:)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v8 = *a3;
  v7 = a3[1];
  v10 = *((_QWORD *)a3 + 1);
  v9 = *((_QWORD *)a3 + 2);
  swift_weakInit();
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  *(_DWORD *)(v4 + 48) = v8;
  *(_DWORD *)(v4 + 52) = v7;
  *(_QWORD *)(v4 + 56) = v10;
  *(_QWORD *)(v4 + 64) = v9;
  swift_beginAccess();
  swift_weakAssign();
  swift_bridgeObjectRetain();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  *(_QWORD *)(v4 + 24) = REEntityGetOrAddComponentByClass();
  RERetain();
  REAudioGeneratorBlockConfigurationCreate();
  REAudioGeneratorBlockConfigurationSetLayoutTag();
  if (v9)
  {
    v11 = (void *)MEMORY[0x220768C3C](v10, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  REAudioGeneratorBlockConfigurationSetMixGroupName();

  v12 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)v18);
  v13 = v19;
  v14 = v20;
  __swift_project_boxed_opaque_existential_1(v18, (uint64_t)v19);
  (*(void (**)(void *, uint64_t))(v14 + 32))(v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  v15 = *(_QWORD *)(v4 + 40);
  v20 = *(_QWORD *)(v4 + 32);
  v21 = v15;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutablePointer<ObjCBool>, @unowned UnsafePointer<AudioTimeStamp>, @unowned UInt32, @unowned UnsafeMutablePointer<AudioBufferList>) -> (@unowned Int32);
  v19 = &block_descriptor_21;
  v16 = _Block_copy(v18);
  swift_retain();
  swift_release();
  v17 = REAudioGeneratorAssetCreateWithRenderBlock();
  _Block_release(v16);
  *(_QWORD *)(v4 + 80) = v17;
  if (v17)
  {
    *(_QWORD *)(v4 + 72) = REAudioPlayerComponentPrepareAsset();
    RENetworkMarkComponentDirty();
  }
  else
  {
    __break(1u);
  }
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t Scene.subscribe<A>(to:on:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, ValueMetadata *a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, 0, 0, 0, a2, a6, a3, a4, a5);
}

uint64_t Scene.subscribe<A>(to:on:componentType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, ValueMetadata *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  return Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, a2, a3, 0, a4, a8, a5, a6, a7);
}

uint64_t Scene.publisher<A>(for:on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2, 0, 0, 0, a3, a5, a4);
}

double PhysicsSimulationEvents.WillSimulate.deltaTime.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double PhysicsSimulationEvents.DidSimulate.deltaTime.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double SceneEvents.Update.deltaTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t SceneEvents.AnchoredStateChanged.isAnchored.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SceneEvents.AnchoredStateChanged.anchor.getter()
{
  return swift_retain();
}

uint64_t SceneEvents.DidReparentEntity.child.getter()
{
  return swift_retain();
}

uint64_t SceneEvents.DidReparentEntity.previousParent.getter()
{
  return swift_retain();
}

float AnimationEvents.SkeletalPoseUpdateComplete.deltaTime.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t AudioEvents.PlaybackBegan.playbackController.getter()
{
  return swift_retain();
}

uint64_t AudioEvents.PlaybackCompleted.playbackController.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AudioEvents.PlaybackCompleted.playbackController.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 Contact.point.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

__n128 Contact.normal.getter()
{
  __n128 *v0;

  return v0[1];
}

float Contact.impulse.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

__n128 Contact.impulseDirection.getter()
{
  __n128 *v0;

  return v0[3];
}

float Contact.penetrationDistance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 64);
}

uint64_t CollisionEvents.Began.entityA.getter()
{
  return swift_retain();
}

uint64_t CollisionEvents.Began.entityB.getter()
{
  return swift_retain();
}

__n128 CollisionEvents.Began.position.getter()
{
  __n128 *v0;

  return v0[1];
}

float CollisionEvents.Began.impulse.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

uint64_t CollisionEvents.Ended.entityB.getter()
{
  return swift_retain();
}

float CollisionEvents.Began.penetrationDistance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 64);
}

__n128 CollisionEvents.Began.impulseDirection.getter()
{
  __n128 *v0;

  return v0[3];
}

uint64_t CollisionEvents.Began.contacts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SynchronizationEvents.OwnershipRequest.entity.getter()
{
  return swift_retain();
}

uint64_t SynchronizationEvents.OwnershipRequest.requester.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of __REAssetService(v1 + 8, a1);
}

uint64_t SynchronizationEvents.OwnershipRequest.accept.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_retain();
  return v1;
}

BOOL static SynchronizationEvents.OwnershipResponse.Response.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SynchronizationEvents.OwnershipResponse.Response.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SynchronizationEvents.OwnershipResponse.Response.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t SynchronizationEvents.OwnershipResponse.entity.getter()
{
  return swift_retain();
}

uint64_t SynchronizationEvents.OwnershipResponse.previousOwner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SynchronizationPeerID?(v1 + 8, a1);
}

void SynchronizationEvents.OwnershipResponse.response.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

uint64_t SynchronizationEvents.OwnershipChanged.entity.getter()
{
  return swift_retain();
}

uint64_t SynchronizationEvents.OwnershipChanged.newOwner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SynchronizationPeerID?(v1 + 8, a1);
}

uint64_t ComponentEvents.WillRemove.entity.getter()
{
  return swift_retain();
}

uint64_t ComponentEvents.WillRemove.componentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void VideoPlayerEvents.ViewingModeDidChange.currentViewingMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void VideoPlayerEvents.ViewingModeDidChange.previousViewingMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

double VideoPlayerEvents.VideoSizeDidChange.screenMeshSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double VideoPlayerEvents.VideoSizeDidChange.videoDimension.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

RealityFoundation::VideoPlayerEvents::MediaTypeDidChange::MediaType_optional __swiftcall VideoPlayerEvents.MediaTypeDidChange.MediaType.init(rawValue:)(RealityFoundation::VideoPlayerEvents::MediaTypeDidChange::MediaType_optional rawValue)
{
  char *v1;
  char v2;

  if (rawValue.value == RealityFoundation_VideoPlayerEvents_MediaTypeDidChange_MediaType_mono)
    v2 = 1;
  else
    v2 = 2;
  if (rawValue.value == RealityFoundation_VideoPlayerEvents_MediaTypeDidChange_MediaType_invalid)
    v2 = 0;
  *v1 = v2;
  return rawValue;
}

uint64_t VideoPlayerEvents.MediaTypeDidChange.MediaType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

_BYTE *protocol witness for RawRepresentable.init(rawValue:) in conformance VideoPlayerEvents.MediaTypeDidChange.MediaType@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void VideoPlayerEvents.MediaTypeDidChange.newType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void VideoPlayerEvents.MediaTypeDidChange.previousType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t VideoPlayerEvents.VideoReceiverEndpointDidChanged.videoReceiverEndpoint.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t VideoPlayerEvents.VideoReceiverEndpointDidChanged.videoReceiverEndpointHash.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t VideoPlayerEvents.VideoReceiverEndpointDidChanged.videoReceiverEndpointType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Scene.publisher<A>(for:on:componentType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  return Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2, a3, a4, 0, a5, a7, a6);
}

uint64_t Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, ValueMetadata *a8, uint64_t a9)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  if (a8 == &type metadata for SynchronizationEvents.OwnershipRequest)
  {
    Scene.eventService.getter((uint64_t)v28);
    v17 = v29;
    v18 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    type metadata accessor for REOwnershipRequestEvent(0);
    EventService.publisher<A>(for:on:)(v19, a1, v17, v19, v18);
    v20 = swift_allocObject();
    swift_weakInit();
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = &type metadata for SynchronizationEvents.OwnershipRequest;
    v21[3] = a9;
    v21[4] = v20;
    v21[5] = a5;
    v21[6] = a7;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipRequestEvent>);
    lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipRequestEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipRequestEvent>);
    v25 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    if (a8 == &type metadata for SceneEvents.Update || a8 == &type metadata for SceneEvents.Render)
    {
      Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)a8, a1, a2, a3, 0, (uint64_t)a8, v28, a9);
      v13 = swift_allocObject();
      swift_weakInit();
      v14 = (_QWORD *)swift_allocObject();
      v14[2] = a8;
      v14[3] = a9;
      v14[4] = v13;
      v14[5] = a5;
      v14[6] = a7;
      v16 = type metadata accessor for Scene.Publisher(0, (uint64_t)a8, a9, v15);
      swift_retain();
      swift_retain();
      MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.Publisher<A>, v16);
      v25 = Publisher<>.sink(receiveValue:)();
      swift_release();
    }
    else
    {
      Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)a8, a1, a2, a3, a4, (uint64_t)a8, v28, a9);
      v22 = (_QWORD *)swift_allocObject();
      v22[2] = a8;
      v22[3] = a9;
      v22[4] = a5;
      v22[5] = a7;
      v24 = type metadata accessor for Scene.Publisher(0, (uint64_t)a8, a9, v23);
      swift_retain();
      MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.Publisher<A>, v24);
      v25 = Publisher<>.sink(receiveValue:)();
    }
    swift_release();
    swift_release();
  }
  result = type metadata accessor for AnyCancellable();
  v27 = MEMORY[0x24BDB9B58];
  a6[3] = result;
  a6[4] = v27;
  *a6 = v25;
  return result;
}

uint64_t outlined init with copy of SynchronizationPeerID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  void (*v18)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;
  _BYTE *v27;
  __int128 v28[4];
  __int128 v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  _BYTE v33[40];

  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v11;
  v12 = v11[1];
  v27 = (_BYTE *)v11[2];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = result;
    swift_beginAccess();
    if (!*(_QWORD *)(v15 + 216))
      return swift_release();
    v26 = a4;
    v25 = a3;
    v16 = *(_QWORD *)(v15 + 224);
    ObjectType = swift_getObjectType();
    *(_QWORD *)&v28[0] = v12;
    v18 = *(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v16 + 32);
    swift_unknownObjectRetain();
    v18(&v29, v28, ObjectType, v16);
    if (!v30)
    {
      swift_release();
      swift_unknownObjectRelease();
      return outlined destroy of BodyTrackingComponent?((uint64_t)&v29, &demangling cache variable for type metadata for SynchronizationPeerID?);
    }
    outlined init with take of BindableDataInternal(&v29, (uint64_t)v33);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MutableBox<Bool>);
    result = swift_allocObject();
    *(_BYTE *)(result + 16) = 0;
    if (v13)
    {
      v19 = result;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v20 = swift_dynamicCastClassUnconditional();
        goto LABEL_7;
      }
      result = REEntityIsBeingDestroyed();
      if ((result & 1) == 0)
      {
        v22 = specialized static Entity.entityInfoType(_:)();
        if (v22)
        {
          v21 = (*(uint64_t (**)(void))(v22 + 232))();
          v23 = *(_QWORD *)(v21 + 16);
          swift_retain();
          MEMORY[0x22076D160](v23, 0);
          *(_QWORD *)(v21 + 16) = v13;
          MEMORY[0x22076D160](v13, v21);
          swift_release();
LABEL_13:
          outlined init with copy of __REAssetService((uint64_t)v33, (uint64_t)v28);
          *(_QWORD *)&v29 = v21;
          outlined init with take of BindableDataInternal(v28, (uint64_t)&v29 + 8);
          v31 = partial apply for closure #1 in closure #1 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:);
          v32 = v19;
          outlined init with copy of SynchronizationEvents.OwnershipRequest((uint64_t)&v29, (uint64_t)v28);
          swift_retain();
          swift_dynamicCast();
          v25(v10);
          result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a5);
          if (v27)
          {
            *v27 = *(_BYTE *)(v19 + 16);
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            outlined destroy of SynchronizationEvents.OwnershipRequest((uint64_t)&v29);
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
          }
LABEL_19:
          __break(1u);
          return result;
        }
        v20 = makeEntity(for:)(v13);
LABEL_7:
        v21 = v20;
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

uint64_t closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (RESceneIsFromActiveRealityRendererSceneGroup())
      a3(a1);
    return swift_release();
  }
  return result;
}

uint64_t Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, _QWORD *a7@<X8>, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  void *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  void *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  void *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  __int128 v340;
  uint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  __int128 v354;
  uint64_t v355;
  char *v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  __int128 v361;
  uint64_t v362;
  char *v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  char *v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  char *v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  uint64_t v458;
  uint64_t v459;
  char *v460;
  uint64_t v461;
  uint64_t v462;
  char *v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  uint64_t v478;
  __int128 v479;
  uint64_t v480;
  __int128 v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;

  v473 = a6;
  v441 = a4;
  v440 = a3;
  v471 = a2;
  v474 = a7;
  *(_QWORD *)&v475 = a1;
  v439 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent>, VideoPlayerEvents.VideoReceiverEndpointDidChanged>);
  v438 = *(_QWORD *)(v439 - 8);
  MEMORY[0x24BDAC7A8](v439);
  v437 = (char *)&v373 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v436 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent>, VideoPlayerEvents.ViewingModeDidChange>);
  v435 = *(_QWORD *)(v436 - 8);
  MEMORY[0x24BDAC7A8](v436);
  v434 = (char *)&v373 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v433 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent>, VideoPlayerEvents.VideoSizeDidChange>);
  v432 = *(_QWORD *)(v433 - 8);
  MEMORY[0x24BDAC7A8](v433);
  v431 = (char *)&v373 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v430 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>, VideoPlayerEvents.ContentTypeDidChange>);
  v429 = *(_QWORD *)(v430 - 8);
  MEMORY[0x24BDAC7A8](v430);
  v428 = (char *)&v373 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v426 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>, VideoPlayerEvents.MediaTypeDidChange>);
  v424 = *(_QWORD *)(v426 - 8);
  MEMORY[0x24BDAC7A8](v426);
  v422 = (char *)&v373 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v427 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentDidChangeEvent>, ComponentEvents.DidChange>);
  v425 = *(_QWORD *)(v427 - 8);
  MEMORY[0x24BDAC7A8](v427);
  v423 = (char *)&v373 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v421 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentWillRemoveEvent>, ComponentEvents.WillRemove>);
  v420 = *(_QWORD *)(v421 - 8);
  MEMORY[0x24BDAC7A8](v421);
  v419 = (char *)&v373 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v418 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentWillDeactivateEvent>, ComponentEvents.WillDeactivate>);
  v417 = *(_QWORD *)(v418 - 8);
  MEMORY[0x24BDAC7A8](v418);
  v416 = (char *)&v373 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v415 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentDidActivateEvent>, ComponentEvents.DidActivate>);
  v414 = *(_QWORD *)(v415 - 8);
  MEMORY[0x24BDAC7A8](v415);
  v413 = (char *)&v373 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v412 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentDidAddEvent>, ComponentEvents.DidAdd>);
  v411 = *(_QWORD *)(v412 - 8);
  MEMORY[0x24BDAC7A8](v412);
  v410 = (char *)&v373 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v404 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAudioPlayerDidCompleteEvent>, AudioEvents.PlaybackCompleted>);
  v402 = *(_QWORD *)(v404 - 8);
  MEMORY[0x24BDAC7A8](v404);
  v401 = (char *)&v373 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v409 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REOwnershipChangedEvent>, SynchronizationEvents.OwnershipChanged>);
  v408 = *(_QWORD *)(v409 - 8);
  MEMORY[0x24BDAC7A8](v409);
  v407 = (char *)&v373 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v406 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REOwnershipResponseEvent>, SynchronizationEvents.OwnershipResponse>);
  v405 = *(_QWORD *)(v406 - 8);
  MEMORY[0x24BDAC7A8](v406);
  v403 = (char *)&v373 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v400 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REOwnershipRequestEvent>, SynchronizationEvents.OwnershipRequest>);
  v399 = *(_QWORD *)(v400 - 8);
  MEMORY[0x24BDAC7A8](v400);
  v398 = (char *)&v373 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v397 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REMotionStateDidChangeEvent>, MotionStateEvents.DidChange>);
  v396 = *(_QWORD *)(v397 - 8);
  MEMORY[0x24BDAC7A8](v397);
  v395 = (char *)&v373 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v394 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEntityPhysicsDidSimulateEvent>, PhysicsSimulationEvents.DidSimulate>);
  v393 = *(_QWORD *)(v394 - 8);
  MEMORY[0x24BDAC7A8](v394);
  v392 = (char *)&v373 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v391 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEntityPhysicsWillSimulateEvent>, PhysicsSimulationEvents.WillSimulate>);
  v390 = *(_QWORD *)(v391 - 8);
  MEMORY[0x24BDAC7A8](v391);
  v389 = (char *)&v373 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v388 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStopEvent>, CollisionEvents.Ended>);
  v387 = *(_QWORD *)(v388 - 8);
  MEMORY[0x24BDAC7A8](v388);
  v386 = (char *)&v373 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v385 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RECollisionDidUpdateEventEx>, CollisionEvents.Updated>);
  v384 = *(_QWORD *)(v385 - 8);
  MEMORY[0x24BDAC7A8](v385);
  v383 = (char *)&v373 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v382 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStartEventEx>, CollisionEvents.Began>);
  v381 = *(_QWORD *)(v382 - 8);
  MEMORY[0x24BDAC7A8](v382);
  v380 = (char *)&v373 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v379 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasStartedEvent>, AnimationEvents.PlaybackStarted>);
  v377 = *(_QWORD *)(v379 - 8);
  MEMORY[0x24BDAC7A8](v379);
  v375 = (char *)&v373 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v378 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasTerminatedEvent>, AnimationEvents.PlaybackTerminated>);
  v376 = *(_QWORD *)(v378 - 8);
  MEMORY[0x24BDAC7A8](v378);
  v374 = (char *)&v373 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v444 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasLoopedEvent>, AnimationEvents.PlaybackLooped>);
  v443 = *(_QWORD *)(v444 - 8);
  MEMORY[0x24BDAC7A8](v444);
  v442 = (char *)&v373 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v447 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasCompletedEvent>, AnimationEvents.PlaybackCompleted>);
  v446 = *(_QWORD *)(v447 - 8);
  MEMORY[0x24BDAC7A8](v447);
  v445 = (char *)&v373 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v450 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent>, AnimationEvents.SkeletalPoseUpdateComplete>);
  v449 = *(_QWORD *)(v450 - 8);
  MEMORY[0x24BDAC7A8](v450);
  v448 = (char *)&v373 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v453 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidReparentEvent>, SceneEvents.DidReparentEntity>);
  v452 = *(_QWORD *)(v453 - 8);
  MEMORY[0x24BDAC7A8](v453);
  v451 = (char *)&v373 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v456 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityWillRemoveEvent>, SceneEvents.WillRemoveEntity>);
  v455 = *(_QWORD *)(v456 - 8);
  MEMORY[0x24BDAC7A8](v456);
  v454 = (char *)&v373 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v459 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityWillDeactivateEvent>, SceneEvents.WillDeactivateEntity>);
  v458 = *(_QWORD *)(v459 - 8);
  MEMORY[0x24BDAC7A8](v459);
  v457 = (char *)&v373 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v462 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidActivateEvent>, SceneEvents.DidActivateEntity>);
  v461 = *(_QWORD *)(v462 - 8);
  MEMORY[0x24BDAC7A8](v462);
  v460 = (char *)&v373 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v465 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidAddEvent>, SceneEvents.DidAddEntity>);
  v464 = *(_QWORD *)(v465 - 8);
  MEMORY[0x24BDAC7A8](v465);
  v463 = (char *)&v373 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v468 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneAnchoredStateChangedEvent>, SceneEvents.AnchoredStateChanged>);
  v467 = *(_QWORD *)(v468 - 8);
  MEMORY[0x24BDAC7A8](v468);
  v466 = (char *)&v373 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoRenderEvent>, SceneEvents.Render>);
  v469 = *(_QWORD *)(v40 - 8);
  v470 = v40;
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v373 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, SceneEvents.Update>);
  v44 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)&v373 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, EngineUpdateEvent>);
  v48 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v50 = (char *)&v373 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
    a5 = *(_QWORD *)(a5 + 16);
  v51 = v475;
  if (swift_conformsToProtocol2())
    v52 = v51;
  else
    v52 = 0;
  if (v52)
  {
    Scene.eventService.getter((uint64_t)&v481);
    v53 = v483;
    v54 = v484;
    __swift_project_boxed_opaque_existential_1(&v481, v483);
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    v478 = 0;
    v476 = 0u;
    v477 = 0u;
    EventService.publisher<A>(for:on:)(v55, (uint64_t)&v476, v53, v55, v54);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v476, &demangling cache variable for type metadata for EventSource?);
    v475 = v479;
    v56 = v480;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
    v481 = v475;
    v482 = v56;
    v57 = swift_allocObject();
    v58 = v473;
    *(_QWORD *)(v57 + 16) = v473;
    *(_QWORD *)(v57 + 24) = a8;
    v59 = partial apply for closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
  }
  else
  {
    v373 = a8;
    if (swift_conformsToProtocol2())
      v60 = v51;
    else
      v60 = 0;
    if (v60)
    {
      Scene.eventService.getter((uint64_t)&v481);
      v61 = v483;
      v62 = v484;
      __swift_project_boxed_opaque_existential_1(&v481, v483);
      v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      v478 = 0;
      v476 = 0u;
      v477 = 0u;
      EventService.publisher<A>(for:on:)(v55, (uint64_t)&v476, v61, v55, v62);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v476, &demangling cache variable for type metadata for EventSource?);
      v475 = v479;
      v63 = v480;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
      v481 = v475;
      v482 = v63;
      v57 = swift_allocObject();
      v58 = v473;
      v64 = v373;
      *(_QWORD *)(v57 + 16) = v473;
      *(_QWORD *)(v57 + 24) = v64;
      v59 = partial apply for closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
    }
    else
    {
      if (swift_conformsToProtocol2())
        v65 = v51;
      else
        v65 = 0;
      if (v65)
      {
        Scene.eventService.getter((uint64_t)&v481);
        v66 = v483;
        v67 = v484;
        __swift_project_boxed_opaque_existential_1(&v481, v483);
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        v478 = 0;
        v476 = 0u;
        v477 = 0u;
        EventService.publisher<A>(for:on:)(v55, (uint64_t)&v476, v66, v55, v67);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v476, &demangling cache variable for type metadata for EventSource?);
        v475 = v479;
        v68 = v480;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
        v481 = v475;
        v482 = v68;
        v57 = swift_allocObject();
        v58 = v473;
        v69 = v373;
        *(_QWORD *)(v57 + 16) = v473;
        *(_QWORD *)(v57 + 24) = v69;
        v59 = partial apply for closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
      }
      else
      {
        if (swift_conformsToProtocol2())
          v70 = v51;
        else
          v70 = 0;
        if (v70)
        {
          Scene.eventService.getter((uint64_t)&v481);
          v71 = v483;
          v72 = v484;
          __swift_project_boxed_opaque_existential_1(&v481, v483);
          v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          v478 = 0;
          v476 = 0u;
          v477 = 0u;
          EventService.publisher<A>(for:on:)(v55, (uint64_t)&v476, v71, v55, v72);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v476, &demangling cache variable for type metadata for EventSource?);
          v475 = v479;
          v73 = v480;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
          v481 = v475;
          v482 = v73;
          v57 = swift_allocObject();
          v58 = v473;
          v74 = v373;
          *(_QWORD *)(v57 + 16) = v473;
          *(_QWORD *)(v57 + 24) = v74;
          v59 = partial apply for closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
        }
        else
        {
          if (swift_conformsToProtocol2())
            v75 = v51;
          else
            v75 = 0;
          if (!v75)
          {
            if (swift_dynamicCastMetatype())
            {
              Scene.engineEventService.getter((uint64_t *)&v481);
              v81 = v483;
              v82 = v484;
              __swift_project_boxed_opaque_existential_1(&v481, v483);
              type metadata accessor for REEngineDoUpdateEvent(0);
              EventService.publisher<A>(for:on:)(v83, v471, v81, v83, v82);
              v84 = v476;
              v85 = v477;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
              swift_allocObject();
              swift_weakInit();
              v481 = v84;
              v482 = v85;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoUpdateEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, EngineUpdateEvent>>);
              v86 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v48 + 16))(&v86[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v86 + 16)], v50, v47);
              swift_release();
              (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
              swift_release();
              *(_QWORD *)&v481 = v86;
              v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<EngineUpdateEvent>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.engineEventService.getter((uint64_t *)&v481);
              v88 = v483;
              v89 = v484;
              __swift_project_boxed_opaque_existential_1(&v481, v483);
              type metadata accessor for REEngineDoUpdateEvent(0);
              EventService.publisher<A>(for:on:)(v90, v471, v88, v90, v89);
              v91 = v476;
              v92 = v477;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
              swift_allocObject();
              swift_weakInit();
              v481 = v91;
              v482 = v92;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoUpdateEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, SceneEvents.Update>>);
              v93 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v44 + 16))(&v93[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v93 + 16)], v46, v43);
              swift_release();
              (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
              swift_release();
              *(_QWORD *)&v481 = v93;
              v87 = &demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Update>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.engineEventService.getter((uint64_t *)&v481);
              v94 = v483;
              v95 = v484;
              __swift_project_boxed_opaque_existential_1(&v481, v483);
              type metadata accessor for REEngineDoRenderEvent(0);
              EventService.publisher<A>(for:on:)(v96, v471, v94, v96, v95);
              v97 = v476;
              v98 = v477;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
              swift_allocObject();
              swift_weakInit();
              v481 = v97;
              v482 = v98;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoRenderEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoRenderEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoRenderEvent>);
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoRenderEvent>, SceneEvents.Render>>);
              v99 = (char *)swift_allocObject();
              v101 = v469;
              v100 = v470;
              (*(void (**)(char *, char *, uint64_t))(v469 + 16))(&v99[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v99 + 16)], v42, v470);
              swift_release();
              (*(void (**)(char *, uint64_t))(v101 + 8))(v42, v100);
              swift_release();
              *(_QWORD *)&v481 = v99;
              v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Render>;
            }
            else if (swift_dynamicCastMetatype())
            {
              v102 = a5;
              Scene.eventService.getter((uint64_t)&v481);
              v103 = v483;
              v104 = v484;
              __swift_project_boxed_opaque_existential_1(&v481, v483);
              type metadata accessor for RESceneAnchoredStateChangedEvent(0);
              EventService.publisher<A>(for:on:)(v105, v471, v103, v105, v104);
              v106 = v476;
              v107 = v477;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
              *(_QWORD *)(swift_allocObject() + 16) = v102;
              v481 = v106;
              v482 = v107;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneAnchoredStateChangedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneAnchoredStateChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneAnchoredStateChangedEvent>);
              v108 = v466;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneAnchoredStateChangedEvent>, SceneEvents.AnchoredStateChanged>>);
              v109 = (char *)swift_allocObject();
              v110 = v467;
              v111 = v468;
              (*(void (**)(char *, char *, uint64_t))(v467 + 16))(&v109[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v109 + 16)], v108, v468);
              swift_release();
              (*(void (**)(char *, uint64_t))(v110 + 8))(v108, v111);
              swift_release();
              *(_QWORD *)&v481 = v109;
              v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.AnchoredStateChanged>;
            }
            else
            {
              v112 = a5;
              if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v113 = v483;
                v114 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for RESceneEntityDidAddEvent(0);
                EventService.publisher<A>(for:on:)(v115, v471, v113, v115, v114);
                v116 = v476;
                v117 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                *(_QWORD *)(swift_allocObject() + 16) = v112;
                v481 = v116;
                v482 = v117;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidAddEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityDidAddEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidAddEvent>);
                v118 = v463;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidAddEvent>, SceneEvents.DidAddEntity>>);
                v119 = (char *)swift_allocObject();
                v120 = v464;
                v121 = v465;
                (*(void (**)(char *, char *, uint64_t))(v464 + 16))(&v119[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v119 + 16)], v118, v465);
                swift_release();
                (*(void (**)(char *, uint64_t))(v120 + 8))(v118, v121);
                swift_release();
                *(_QWORD *)&v481 = v119;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.DidAddEntity>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v122 = v483;
                v123 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for RESceneEntityDidActivateEvent(0);
                EventService.publisher<A>(for:on:)(v124, v471, v122, v124, v123);
                v125 = v476;
                v126 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                *(_QWORD *)(swift_allocObject() + 16) = v112;
                v481 = v125;
                v482 = v126;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidActivateEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityDidActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidActivateEvent>);
                v127 = v460;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidActivateEvent>, SceneEvents.DidActivateEntity>>);
                v128 = (char *)swift_allocObject();
                v129 = v461;
                v130 = v462;
                (*(void (**)(char *, char *, uint64_t))(v461 + 16))(&v128[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v128 + 16)], v127, v462);
                swift_release();
                (*(void (**)(char *, uint64_t))(v129 + 8))(v127, v130);
                swift_release();
                *(_QWORD *)&v481 = v128;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.DidActivateEntity>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v131 = v483;
                v132 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for RESceneEntityWillDeactivateEvent(0);
                EventService.publisher<A>(for:on:)(v133, v471, v131, v133, v132);
                v134 = v476;
                v135 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                *(_QWORD *)(swift_allocObject() + 16) = v112;
                v481 = v134;
                v482 = v135;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityWillDeactivateEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityWillDeactivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityWillDeactivateEvent>);
                v136 = v457;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityWillDeactivateEvent>, SceneEvents.WillDeactivateEntity>>);
                v137 = (char *)swift_allocObject();
                v138 = v458;
                v139 = v459;
                (*(void (**)(char *, char *, uint64_t))(v458 + 16))(&v137[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v137 + 16)], v136, v459);
                swift_release();
                (*(void (**)(char *, uint64_t))(v138 + 8))(v136, v139);
                swift_release();
                *(_QWORD *)&v481 = v137;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.WillDeactivateEntity>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v140 = v483;
                v141 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for RESceneEntityWillRemoveEvent(0);
                EventService.publisher<A>(for:on:)(v142, v471, v140, v142, v141);
                v143 = v476;
                v144 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                *(_QWORD *)(swift_allocObject() + 16) = v112;
                v481 = v143;
                v482 = v144;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityWillRemoveEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityWillRemoveEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityWillRemoveEvent>);
                v145 = v454;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityWillRemoveEvent>, SceneEvents.WillRemoveEntity>>);
                v146 = (char *)swift_allocObject();
                v147 = v455;
                v148 = v456;
                (*(void (**)(char *, char *, uint64_t))(v455 + 16))(&v146[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v146 + 16)], v145, v456);
                swift_release();
                (*(void (**)(char *, uint64_t))(v147 + 8))(v145, v148);
                swift_release();
                *(_QWORD *)&v481 = v146;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.WillRemoveEntity>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v149 = v483;
                v150 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for RESceneEntityDidReparentEvent(0);
                EventService.publisher<A>(for:on:)(v151, v471, v149, v151, v150);
                v152 = v476;
                v153 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                *(_QWORD *)(swift_allocObject() + 16) = v112;
                v481 = v152;
                v482 = v153;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidReparentEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityDidReparentEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidReparentEvent>);
                v154 = v451;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidReparentEvent>, SceneEvents.DidReparentEntity>>);
                v155 = (char *)swift_allocObject();
                v156 = v452;
                v157 = v453;
                (*(void (**)(char *, char *, uint64_t))(v452 + 16))(&v155[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v155 + 16)], v154, v453);
                swift_release();
                (*(void (**)(char *, uint64_t))(v156 + 8))(v154, v157);
                swift_release();
                *(_QWORD *)&v481 = v155;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.DidReparentEntity>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v158 = v483;
                v159 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REAnimationSkeletalPoseUpdateCompleteEvent(0);
                EventService.publisher<A>(for:on:)(v160, v471, v158, v160, v159);
                v161 = v476;
                v162 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v161;
                v482 = v162;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent>);
                v163 = v448;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent>, AnimationEvents.SkeletalPoseUpdateComplete>>);
                v164 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v449 + 32))(&v164[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v164 + 16)], v163, v450);
                swift_release();
                *(_QWORD *)&v481 = v164;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.SkeletalPoseUpdateComplete>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v165 = v483;
                v166 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REAnimationHasCompletedEvent(0);
                EventService.publisher<A>(for:on:)(v167, v471, v165, v167, v166);
                v168 = v476;
                v169 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                *(_QWORD *)(swift_allocObject() + 16) = v112;
                v481 = v168;
                v482 = v169;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasCompletedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasCompletedEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasCompletedEvent>);
                v170 = v445;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasCompletedEvent>, AnimationEvents.PlaybackCompleted>>);
                v171 = (char *)swift_allocObject();
                v172 = v446;
                v173 = v447;
                (*(void (**)(char *, char *, uint64_t))(v446 + 16))(&v171[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v171 + 16)], v170, v447);
                swift_release();
                (*(void (**)(char *, uint64_t))(v172 + 8))(v170, v173);
                swift_release();
                *(_QWORD *)&v481 = v171;
                v87 = &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v174 = v483;
                v175 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REAnimationHasLoopedEvent(0);
                EventService.publisher<A>(for:on:)(v176, v471, v174, v176, v175);
                v177 = v476;
                v178 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                *(_QWORD *)(swift_allocObject() + 16) = v112;
                v481 = v177;
                v482 = v178;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasLoopedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasLoopedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasLoopedEvent>);
                v179 = v442;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasLoopedEvent>, AnimationEvents.PlaybackLooped>>);
                v180 = (char *)swift_allocObject();
                v181 = v443;
                v182 = v444;
                (*(void (**)(char *, char *, uint64_t))(v443 + 16))(&v180[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v180 + 16)], v179, v444);
                swift_release();
                (*(void (**)(char *, uint64_t))(v181 + 8))(v179, v182);
                swift_release();
                *(_QWORD *)&v481 = v180;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackLooped>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v183 = v483;
                v184 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REAnimationHasTerminatedEvent(0);
                EventService.publisher<A>(for:on:)(v185, v471, v183, v185, v184);
                v186 = v476;
                v187 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                *(_QWORD *)(swift_allocObject() + 16) = v112;
                v481 = v186;
                v482 = v187;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasTerminatedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasTerminatedEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasTerminatedEvent>);
                v188 = v374;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasTerminatedEvent>, AnimationEvents.PlaybackTerminated>>);
                v189 = (char *)swift_allocObject();
                v190 = v376;
                v191 = v378;
                (*(void (**)(char *, char *, uint64_t))(v376 + 16))(&v189[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v189 + 16)], v188, v378);
                swift_release();
                (*(void (**)(char *, uint64_t))(v190 + 8))(v188, v191);
                swift_release();
                *(_QWORD *)&v481 = v189;
                v87 = &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v192 = v483;
                v193 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REAnimationHasStartedEvent(0);
                EventService.publisher<A>(for:on:)(v194, v471, v192, v194, v193);
                v195 = v476;
                v196 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v195;
                v482 = v196;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasStartedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasStartedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasStartedEvent>);
                v197 = v375;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasStartedEvent>, AnimationEvents.PlaybackStarted>>);
                v198 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v377 + 32))(&v198[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v198 + 16)], v197, v379);
                swift_release();
                *(_QWORD *)&v481 = v198;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackStarted>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v199 = v483;
                v200 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for RECollisionDidStartEventEx(0);
                EventService.publisher<A>(for:on:)(v201, v471, v199, v201, v200);
                v202 = v476;
                v203 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v202;
                v482 = v203;
                swift_retain();
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStartEventEx>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RECollisionDidStartEventEx> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStartEventEx>);
                v204 = v380;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStartEventEx>, CollisionEvents.Began>>);
                v205 = (char *)swift_allocObject();
                v206 = v381;
                v207 = v382;
                (*(void (**)(char *, char *, uint64_t))(v381 + 16))(&v205[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v205 + 16)], v204, v382);
                swift_release();
                (*(void (**)(char *, uint64_t))(v206 + 8))(v204, v207);
                swift_release();
                *(_QWORD *)&v481 = v205;
                v87 = &demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Began>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v208 = v483;
                v209 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for RECollisionDidUpdateEventEx(0);
                EventService.publisher<A>(for:on:)(v210, v471, v208, v210, v209);
                v211 = v476;
                v212 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v211;
                v482 = v212;
                swift_retain();
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidUpdateEventEx>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RECollisionDidUpdateEventEx> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidUpdateEventEx>);
                v213 = v383;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RECollisionDidUpdateEventEx>, CollisionEvents.Updated>>);
                v214 = (char *)swift_allocObject();
                v215 = v384;
                v216 = v385;
                (*(void (**)(char *, char *, uint64_t))(v384 + 16))(&v214[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v214 + 16)], v213, v385);
                swift_release();
                (*(void (**)(char *, uint64_t))(v215 + 8))(v213, v216);
                swift_release();
                *(_QWORD *)&v481 = v214;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Updated>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v217 = v483;
                v218 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for RECollisionDidStopEvent(0);
                EventService.publisher<A>(for:on:)(v219, v471, v217, v219, v218);
                v220 = v476;
                v221 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v220;
                v482 = v221;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStopEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RECollisionDidStopEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStopEvent>);
                v222 = v386;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStopEvent>, CollisionEvents.Ended>>);
                v223 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v387 + 32))(&v223[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v223 + 16)], v222, v388);
                swift_release();
                *(_QWORD *)&v481 = v223;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Ended>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v224 = v483;
                v225 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REEntityPhysicsWillSimulateEvent(0);
                EventService.publisher<A>(for:on:)(v226, v471, v224, v226, v225);
                v227 = v476;
                v228 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v227;
                v482 = v228;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REEntityPhysicsWillSimulateEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEntityPhysicsWillSimulateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REEntityPhysicsWillSimulateEvent>);
                v229 = v389;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEntityPhysicsWillSimulateEvent>, PhysicsSimulationEvents.WillSimulate>>);
                v230 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v390 + 32))(&v230[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v230 + 16)], v229, v391);
                swift_release();
                *(_QWORD *)&v481 = v230;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<PhysicsSimulationEvents.WillSimulate>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v231 = v483;
                v232 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REEntityPhysicsDidSimulateEvent(0);
                EventService.publisher<A>(for:on:)(v233, v471, v231, v233, v232);
                v234 = v476;
                v235 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v234;
                v482 = v235;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REEntityPhysicsDidSimulateEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEntityPhysicsDidSimulateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REEntityPhysicsDidSimulateEvent>);
                v236 = v392;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEntityPhysicsDidSimulateEvent>, PhysicsSimulationEvents.DidSimulate>>);
                v237 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v393 + 32))(&v237[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v237 + 16)], v236, v394);
                swift_release();
                *(_QWORD *)&v481 = v237;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<PhysicsSimulationEvents.DidSimulate>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v238 = v483;
                v239 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REMotionStateDidChangeEvent(0);
                EventService.publisher<A>(for:on:)(v240, v471, v238, v240, v239);
                v241 = v476;
                v242 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v241;
                v482 = v242;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REMotionStateDidChangeEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REMotionStateDidChangeEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REMotionStateDidChangeEvent>);
                v243 = v395;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REMotionStateDidChangeEvent>, MotionStateEvents.DidChange>>);
                v244 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v396 + 32))(&v244[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v244 + 16)], v243, v397);
                swift_release();
                *(_QWORD *)&v481 = v244;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<MotionStateEvents.DidChange>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v245 = v483;
                v246 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REOwnershipRequestEvent(0);
                EventService.publisher<A>(for:on:)(v247, v471, v245, v247, v246);
                v248 = v476;
                v249 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                static os_log_type_t.info.getter();
                type metadata accessor for OS_os_log();
                v250 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                swift_allocObject();
                swift_weakInit();
                v481 = v248;
                v482 = v249;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipRequestEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipRequestEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipRequestEvent>);
                v251 = v398;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REOwnershipRequestEvent>, SynchronizationEvents.OwnershipRequest>>);
                v252 = (char *)swift_allocObject();
                v253 = v399;
                v254 = v400;
                (*(void (**)(char *, char *, uint64_t))(v399 + 16))(&v252[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v252 + 16)], v251, v400);
                swift_release();
                (*(void (**)(char *, uint64_t))(v253 + 8))(v251, v254);
                swift_release();
                *(_QWORD *)&v481 = v252;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipRequest>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v255 = v483;
                v256 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REOwnershipResponseEvent(0);
                EventService.publisher<A>(for:on:)(v257, v471, v255, v257, v256);
                v258 = v476;
                v259 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                static os_log_type_t.info.getter();
                type metadata accessor for OS_os_log();
                v260 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                swift_allocObject();
                swift_weakInit();
                v481 = v258;
                v482 = v259;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipResponseEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipResponseEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipResponseEvent>);
                v261 = v403;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REOwnershipResponseEvent>, SynchronizationEvents.OwnershipResponse>>);
                v262 = (char *)swift_allocObject();
                v263 = v405;
                v264 = v406;
                (*(void (**)(char *, char *, uint64_t))(v405 + 16))(&v262[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v262 + 16)], v261, v406);
                swift_release();
                (*(void (**)(char *, uint64_t))(v263 + 8))(v261, v264);
                swift_release();
                *(_QWORD *)&v481 = v262;
                v87 = &demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipResponse>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v265 = v483;
                v266 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REOwnershipChangedEvent(0);
                EventService.publisher<A>(for:on:)(v267, v471, v265, v267, v266);
                v268 = v476;
                v269 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                static os_log_type_t.info.getter();
                type metadata accessor for OS_os_log();
                v270 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                swift_allocObject();
                swift_weakInit();
                v481 = v268;
                v482 = v269;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipChangedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipChangedEvent>);
                v271 = v407;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REOwnershipChangedEvent>, SynchronizationEvents.OwnershipChanged>>);
                v272 = (char *)swift_allocObject();
                v273 = v408;
                v274 = v409;
                (*(void (**)(char *, char *, uint64_t))(v408 + 16))(&v272[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v272 + 16)], v271, v409);
                swift_release();
                (*(void (**)(char *, uint64_t))(v273 + 8))(v271, v274);
                swift_release();
                *(_QWORD *)&v481 = v272;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipChanged>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v275 = v483;
                v276 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REAudioPlayerDidCompleteEvent(0);
                EventService.publisher<A>(for:on:)(v277, v471, v275, v277, v276);
                v278 = v476;
                v279 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v278;
                v482 = v279;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REAudioPlayerDidCompleteEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAudioPlayerDidCompleteEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REAudioPlayerDidCompleteEvent>);
                v280 = v401;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAudioPlayerDidCompleteEvent>, AudioEvents.PlaybackCompleted>>);
                v281 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v402 + 32))(&v281[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v281 + 16)], v280, v404);
                swift_release();
                *(_QWORD *)&v481 = v281;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<AudioEvents.PlaybackCompleted>;
              }
              else if (swift_dynamicCastMetatype())
              {
                v282 = v472;
                Scene.eventService.getter((uint64_t)&v481);
                v283 = v483;
                v284 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REComponentDidAddEvent(0);
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v284 + 8))(&v476, v285, v471, v440, v441, v285, v283, v284);
                v286 = v476;
                v287 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v288 = swift_allocObject();
                *(_QWORD *)(v288 + 16) = v282;
                *(_QWORD *)(v288 + 24) = a5;
                v481 = v286;
                v482 = v287;
                swift_retain();
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidAddEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentDidAddEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidAddEvent>);
                v289 = v410;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentDidAddEvent>, ComponentEvents.DidAdd>>);
                v290 = (char *)swift_allocObject();
                v291 = v411;
                v292 = v412;
                (*(void (**)(char *, char *, uint64_t))(v411 + 16))(&v290[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v290 + 16)], v289, v412);
                swift_release();
                (*(void (**)(char *, uint64_t))(v291 + 8))(v289, v292);
                swift_release();
                *(_QWORD *)&v481 = v290;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.DidAdd>;
              }
              else if (swift_dynamicCastMetatype())
              {
                v293 = v472;
                Scene.eventService.getter((uint64_t)&v481);
                v294 = v483;
                v295 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REComponentDidActivateEvent(0);
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v295 + 8))(&v476, v296, v471, v440, v441, v296, v294, v295);
                v297 = v476;
                v298 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v299 = swift_allocObject();
                *(_QWORD *)(v299 + 16) = v293;
                *(_QWORD *)(v299 + 24) = a5;
                v481 = v297;
                v482 = v298;
                swift_retain();
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidActivateEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentDidActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidActivateEvent>);
                v300 = v413;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentDidActivateEvent>, ComponentEvents.DidActivate>>);
                v301 = (char *)swift_allocObject();
                v302 = v414;
                v303 = v415;
                (*(void (**)(char *, char *, uint64_t))(v414 + 16))(&v301[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v301 + 16)], v300, v415);
                swift_release();
                (*(void (**)(char *, uint64_t))(v302 + 8))(v300, v303);
                swift_release();
                *(_QWORD *)&v481 = v301;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.DidActivate>;
              }
              else if (swift_dynamicCastMetatype())
              {
                v304 = v472;
                Scene.eventService.getter((uint64_t)&v481);
                v305 = v483;
                v306 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REComponentWillDeactivateEvent(0);
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v306 + 8))(&v476, v307, v471, v440, v441, v307, v305, v306);
                v308 = v476;
                v309 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v310 = swift_allocObject();
                *(_QWORD *)(v310 + 16) = v304;
                *(_QWORD *)(v310 + 24) = a5;
                v481 = v308;
                v482 = v309;
                swift_retain();
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillDeactivateEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>((unint64_t *)&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentWillDeactivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillDeactivateEvent>);
                v311 = v416;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentWillDeactivateEvent>, ComponentEvents.WillDeactivate>>);
                v312 = (char *)swift_allocObject();
                v313 = v417;
                v314 = v418;
                (*(void (**)(char *, char *, uint64_t))(v417 + 16))(&v312[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v312 + 16)], v311, v418);
                swift_release();
                (*(void (**)(char *, uint64_t))(v313 + 8))(v311, v314);
                swift_release();
                *(_QWORD *)&v481 = v312;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.WillDeactivate>;
              }
              else if (swift_dynamicCastMetatype())
              {
                v315 = v472;
                Scene.eventService.getter((uint64_t)&v481);
                v316 = v483;
                v317 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REComponentWillRemoveEvent(0);
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v317 + 8))(&v476, v318, v471, v440, v441, v318, v316, v317);
                v319 = v476;
                v320 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v321 = swift_allocObject();
                *(_QWORD *)(v321 + 16) = v315;
                *(_QWORD *)(v321 + 24) = a5;
                v481 = v319;
                v482 = v320;
                swift_retain();
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillRemoveEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentWillRemoveEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillRemoveEvent>);
                v322 = v419;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentWillRemoveEvent>, ComponentEvents.WillRemove>>);
                v323 = (char *)swift_allocObject();
                v324 = v420;
                v325 = v421;
                (*(void (**)(char *, char *, uint64_t))(v420 + 16))(&v323[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v323 + 16)], v322, v421);
                swift_release();
                (*(void (**)(char *, uint64_t))(v324 + 8))(v322, v325);
                swift_release();
                *(_QWORD *)&v481 = v323;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.WillRemove>;
              }
              else if (swift_dynamicCastMetatype())
              {
                v326 = v472;
                Scene.eventService.getter((uint64_t)&v481);
                v327 = v483;
                v328 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REComponentDidChangeEvent(0);
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v328 + 8))(&v476, v329, v471, v440, v441, v329, v327, v328);
                v330 = v476;
                v331 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v332 = swift_allocObject();
                *(_QWORD *)(v332 + 16) = v326;
                *(_QWORD *)(v332 + 24) = a5;
                v481 = v330;
                v482 = v331;
                swift_retain();
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidChangeEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentDidChangeEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidChangeEvent>);
                v333 = v423;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentDidChangeEvent>, ComponentEvents.DidChange>>);
                v334 = (char *)swift_allocObject();
                v335 = v425;
                v336 = v427;
                (*(void (**)(char *, char *, uint64_t))(v425 + 16))(&v334[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v334 + 16)], v333, v427);
                swift_release();
                (*(void (**)(char *, uint64_t))(v335 + 8))(v333, v336);
                swift_release();
                *(_QWORD *)&v481 = v334;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.DidChange>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v337 = v483;
                v338 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REVideoPlayerContentTypeChangedEvent(0);
                EventService.publisher<A>(for:on:)(v339, v471, v337, v339, v338);
                v340 = v476;
                v341 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v340;
                v482 = v341;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>);
                v342 = v422;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>, VideoPlayerEvents.MediaTypeDidChange>>);
                v343 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v424 + 32))(&v343[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v343 + 16)], v342, v426);
                swift_release();
                *(_QWORD *)&v481 = v343;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.MediaTypeDidChange>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v344 = v483;
                v345 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REVideoPlayerContentTypeChangedEvent(0);
                EventService.publisher<A>(for:on:)(v346, v471, v344, v346, v345);
                v347 = v476;
                v348 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v347;
                v482 = v348;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>);
                v349 = v428;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>, VideoPlayerEvents.ContentTypeDidChange>>);
                v350 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v429 + 32))(&v350[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v350 + 16)], v349, v430);
                swift_release();
                *(_QWORD *)&v481 = v350;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.ContentTypeDidChange>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v351 = v483;
                v352 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REVideoPlayerVideoSizeChangedEvent(0);
                EventService.publisher<A>(for:on:)(v353, v471, v351, v353, v352);
                v354 = v476;
                v355 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v354;
                v482 = v355;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent>);
                v356 = v431;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent>, VideoPlayerEvents.VideoSizeDidChange>>);
                v357 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v432 + 32))(&v357[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v357 + 16)], v356, v433);
                swift_release();
                *(_QWORD *)&v481 = v357;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.VideoSizeDidChange>;
              }
              else if (swift_dynamicCastMetatype())
              {
                Scene.eventService.getter((uint64_t)&v481);
                v358 = v483;
                v359 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REVideoPlayerViewingModeChangedEvent(0);
                EventService.publisher<A>(for:on:)(v360, v471, v358, v360, v359);
                v361 = v476;
                v362 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v361;
                v482 = v362;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent>);
                v363 = v434;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent>, VideoPlayerEvents.ViewingModeDidChange>>);
                v364 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v435 + 32))(&v364[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v364 + 16)], v363, v436);
                swift_release();
                *(_QWORD *)&v481 = v364;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.ViewingModeDidChange>;
              }
              else
              {
                if (!swift_dynamicCastMetatype())
                {
                  result = _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  return result;
                }
                Scene.eventService.getter((uint64_t)&v481);
                v365 = v483;
                v366 = v484;
                __swift_project_boxed_opaque_existential_1(&v481, v483);
                type metadata accessor for REVideoPlayerVideoReceiverEndpointChangedEvent(0);
                EventService.publisher<A>(for:on:)(v367, v471, v365, v367, v366);
                v368 = v476;
                v369 = v477;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
                v481 = v368;
                v482 = v369;
                swift_retain();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent>);
                lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent>);
                v370 = v437;
                Publisher.compactMap<A>(_:)();
                swift_release();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent>, VideoPlayerEvents.VideoReceiverEndpointDidChanged>>);
                v371 = (char *)swift_allocObject();
                (*(void (**)(char *, char *, uint64_t))(v438 + 32))(&v371[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v371 + 16)], v370, v439);
                swift_release();
                *(_QWORD *)&v481 = v371;
                v87 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.VideoReceiverEndpointDidChanged>;
              }
            }
            __swift_instantiateConcreteTypeFromMangledName(v87);
            type metadata accessor for Scene.Publisher(0, v473, v373, v372);
            return swift_dynamicCast();
          }
          Scene.eventService.getter((uint64_t)&v481);
          v76 = v483;
          v77 = v484;
          __swift_project_boxed_opaque_existential_1(&v481, v483);
          v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
          v478 = 0;
          v476 = 0u;
          v477 = 0u;
          EventService.publisher<A>(for:on:)(v55, (uint64_t)&v476, v76, v55, v77);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v476, &demangling cache variable for type metadata for EventSource?);
          v475 = v479;
          v78 = v480;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v481);
          v481 = v475;
          v482 = v78;
          v57 = swift_allocObject();
          v58 = v473;
          v79 = v373;
          *(_QWORD *)(v57 + 16) = v473;
          *(_QWORD *)(v57 + 24) = v79;
          v59 = partial apply for closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
        }
      }
    }
  }
  result = Scene.Publisher.init<A>(corePublisher:transform:)(&v481, (uint64_t)v59, v57, v58, v55, (uint64_t *)&v476);
  *v474 = v476;
  return result;
}

uint64_t Scene.publisher<A>(for:on:componentType:rootEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  return Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2, a3, a4, a5, a6, a8, a7);
}

uint64_t Scene.Publisher.init<A>(corePublisher:transform:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;

  v18 = a2;
  v19 = a6;
  v7 = type metadata accessor for Scene.CorePublisher(255, a5, a3, a4);
  MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.CorePublisher<A>, v7);
  v8 = type metadata accessor for Publishers.CompactMap();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - v13;
  v15 = *((_QWORD *)a1 + 2);
  v20 = *a1;
  v21 = v15;
  Publisher.compactMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
  MEMORY[0x220772E3C](MEMORY[0x24BDB94C8], v8);
  v16 = AnyPublisher.init<A>(_:)();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  *v19 = v16;
  return result;
}

uint64_t closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  int v7;
  _BYTE v9[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, v7 ^ 1u, 1, a2);
}

uint64_t closure #6 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  v5 = result;
  if (result)
    result = swift_release();
  else
    v3 = 0;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

uint64_t closure #7 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v3;
  uint64_t result;
  double v5;

  v3 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  v5 = v3;
  if (!result)
    v5 = 0.0;
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = v5;
  return result;
}

uint64_t closure #8 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

void closure #9 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)a1;
  v4 = *(unsigned __int8 *)(a1 + 8);
  if ((REEntityIsNonHiddenAndInHierarchy() & 1) == 0)
    goto LABEL_20;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v5 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  if ((REEntityIsBeingDestroyed() & 1) == 0)
  {
    v7 = specialized static Entity.entityInfoType(_:)();
    if (v7)
    {
      v6 = (*(uint64_t (**)(void))(v7 + 232))();
      v8 = *(_QWORD *)(v6 + 16);
      swift_retain();
      MEMORY[0x22076D160](v8, 0);
      *(_QWORD *)(v6 + 16) = v3;
      MEMORY[0x22076D160](v3, v6);
      swift_release();
LABEL_8:
      v9 = swift_conformsToProtocol2();
      if (v9)
        v10 = v9;
      else
        v10 = 0;
      if (v9)
        v11 = v6;
      else
        v11 = 0;
      if (v11)
      {
        *a2 = v4;
        a2[1] = v11;
        a2[2] = v10;
        return;
      }
      if (one-time initialization token for ecsCoreLogger == -1)
        goto LABEL_17;
      goto LABEL_23;
    }
    v5 = makeEntity(for:)(v3);
LABEL_4:
    v6 = v5;
    goto LABEL_8;
  }
  __break(1u);
LABEL_23:
  swift_once();
LABEL_17:
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)ecsCoreLogger);
  swift_retain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v19 = v16;
    *(_DWORD *)v15 = 136315394;
    REEntityGetName();
    v17 = String.init(cString:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    REEntityGetLocalId();
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_21B9AA000, v13, v14, "AnchoredStateChanged event was not delivered because '%s' (%llx) does not conform to HasAnchoring", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v16, -1, -1);
    MEMORY[0x220772F44](v15, -1, -1);
    swift_release();

  }
  else
  {

    swift_release_n();
  }
LABEL_20:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t closure #10 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  result = REEntityIsNonHiddenAndInHierarchy();
  if (!(_DWORD)result)
  {
    v5 = 0;
    goto LABEL_6;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    result = swift_dynamicCastClassUnconditional();
LABEL_4:
    v5 = result;
LABEL_6:
    *a2 = v5;
    return result;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v6 = specialized static Entity.entityInfoType(_:)();
    if (v6)
    {
      v5 = (*(uint64_t (**)(void))(v6 + 232))();
      v7 = *(_QWORD *)(v5 + 16);
      swift_retain();
      MEMORY[0x22076D160](v7, 0);
      *(_QWORD *)(v5 + 16) = v3;
      MEMORY[0x22076D160](v3, v5);
      result = swift_release();
      goto LABEL_6;
    }
    result = makeEntity(for:)(v3);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t closure #14 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v3 = a1[1];
  result = REEntityIsNonHiddenAndInHierarchy();
  if ((result & 1) == 0)
    goto LABEL_12;
  if (v4)
  {
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v6 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
      {
        __break(1u);
        goto LABEL_23;
      }
      v8 = specialized static Entity.entityInfoType(_:)();
      if (v8)
      {
        v7 = (*(uint64_t (**)(void))(v8 + 232))();
        v9 = *(_QWORD *)(v7 + 16);
        swift_retain();
        MEMORY[0x22076D160](v9, 0);
        *(_QWORD *)(v7 + 16) = v4;
        MEMORY[0x22076D160](v4, v7);
        swift_release();
LABEL_10:
        if (REIsEntityHidden())
        {
          result = swift_release();
LABEL_12:
          *a2 = 0;
          a2[1] = 0;
          return result;
        }
        goto LABEL_13;
      }
      v6 = makeEntity(for:)(v4);
    }
    v7 = v6;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_13:
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    result = swift_dynamicCastClassUnconditional();
    goto LABEL_15;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v11 = specialized static Entity.entityInfoType(_:)();
    if (v11)
    {
      v10 = (*(uint64_t (**)(void))(v11 + 232))();
      v12 = *(_QWORD *)(v10 + 16);
      swift_retain();
      MEMORY[0x22076D160](v12, 0);
      *(_QWORD *)(v10 + 16) = v3;
      MEMORY[0x22076D160](v3, v10);
      result = swift_release();
      goto LABEL_19;
    }
    result = makeEntity(for:)(v3);
LABEL_15:
    v10 = result;
LABEL_19:
    *a2 = v10;
    a2[1] = v7;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t *closure #16 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  if (*result)
  {
    v4 = result[1];
    result = (uint64_t *)REEntityIsNonHiddenAndInHierarchy();
    if (!(_DWORD)result)
    {
      v5 = 0;
LABEL_11:
      *a2 = v5;
      return result;
    }
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_10:
      type metadata accessor for AnimationPlaybackController();
      v5 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v5 + 16) = v4;
      swift_beginAccess();
      swift_weakAssign();
      result = (uint64_t *)swift_release();
      goto LABEL_11;
    }
    result = (uint64_t *)REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      v6 = specialized static Entity.entityInfoType(_:)();
      if (v6)
      {
        v7 = (*(uint64_t (**)(void))(v6 + 232))();
        v8 = *(_QWORD *)(v7 + 16);
        swift_retain();
        MEMORY[0x22076D160](v8, 0);
        *(_QWORD *)(v7 + 16) = v2;
        MEMORY[0x22076D160](v2, v7);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v2);
      }
      goto LABEL_10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *closure #19 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  if (*result)
  {
    v4 = result[1];
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_8:
      type metadata accessor for AnimationPlaybackController();
      v8 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v8 + 16) = v4;
      swift_beginAccess();
      swift_weakAssign();
      result = (uint64_t *)swift_release();
      *a2 = v8;
      return result;
    }
    result = (uint64_t *)REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      v5 = specialized static Entity.entityInfoType(_:)();
      if (v5)
      {
        v6 = (*(uint64_t (**)(void))(v5 + 232))();
        v7 = *(_QWORD *)(v6 + 16);
        swift_retain();
        MEMORY[0x22076D160](v7, 0);
        *(_QWORD *)(v6 + 16) = v2;
        MEMORY[0x22076D160](v2, v6);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v2);
      }
      goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #20 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t SceneNullable;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  char v24;
  char v25;
  _QWORD *v26;
  float32x4_t v27;
  __int128 v28;
  float32x4_t v29;
  float32x4_t v30;
  unint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  __int128 v35;
  float v36;
  float32x4_t v37;
  __int128 v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x2_t v43;
  uint64_t v44;
  int v45;

  if (!*(_QWORD *)result)
    goto LABEL_42;
  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  result = RECollisionObjectGetUserData();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  v5 = result;
  if (!result)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (!v3)
  {
LABEL_43:
    __break(1u);
    return result;
  }
  result = RECollisionObjectGetUserData();
  if (result < 0)
    goto LABEL_38;
  v6 = result;
  if (!result)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v7 = swift_dynamicCastClassUnconditional();
LABEL_9:
    v8 = v7;
    goto LABEL_13;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) != 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v9 = specialized static Entity.entityInfoType(_:)();
  if (!v9)
  {
    v7 = makeEntity(for:)(v5);
    goto LABEL_9;
  }
  v8 = (*(uint64_t (**)(void))(v9 + 232))();
  v10 = *(_QWORD *)(v8 + 16);
  swift_retain();
  MEMORY[0x22076D160](v10, 0);
  *(_QWORD *)(v8 + 16) = v5;
  MEMORY[0x22076D160](v5, v8);
  swift_release();
LABEL_13:
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v11 = swift_dynamicCastClassUnconditional();
    goto LABEL_15;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) != 0)
    goto LABEL_41;
  v13 = specialized static Entity.entityInfoType(_:)();
  if (v13)
  {
    v12 = (*(uint64_t (**)(void))(v13 + 232))();
    v14 = *(_QWORD *)(v12 + 16);
    swift_retain();
    MEMORY[0x22076D160](v14, 0);
    *(_QWORD *)(v12 + 16) = v6;
    MEMORY[0x22076D160](v6, v12);
    swift_release();
    goto LABEL_19;
  }
  v11 = makeEntity(for:)(v6);
LABEL_15:
  v12 = v11;
LABEL_19:
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
    goto LABEL_25;
  v16 = SceneNullable;
  v17 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v17)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v16);
  }
  v18 = Scene.physicsOrigin.getter();
  swift_release();
  swift_release();
  if (v18)
  {
    v37 = *(float32x4_t *)&zmmword_21BE41220[48];
    v40 = *(float32x4_t *)&zmmword_21BE41220[32];
    v39 = *(float32x4_t *)&zmmword_21BE41220[16];
    v42 = *(float32x4_t *)zmmword_21BE41220;
  }
  else
  {
LABEL_25:
    v19 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    *(double *)v20.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v19, 0);
    v40 = v21;
    v42 = v20;
    v37 = v23;
    v39 = v22;
    swift_release();
  }
  swift_retain();
  if (!REEntityGetComponent())
  {
    swift_release();
    goto LABEL_30;
  }
  CollisionComponent.init(_:)((uint64_t)&v44);
  v24 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  if ((v24 & 4) == 0)
  {
LABEL_30:
    v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_31;
  }
  v25 = REContactSetNeedsSwap();
  v26 = specialized Scene.copyContacts(from:swapContacts:sceneFromPhysics:)(v42, v39, v40, v37, v4, v25);
LABEL_31:
  REContactSetGetAveragePosition();
  *(float32x2_t *)&v28 = simd_float4x4.transform(position:)(v27, v42, v39, v40, v37);
  v38 = v28;
  REContactSetGetTotalImpulse();
  v41 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v42, v29.f32[0]), v39, *(float32x2_t *)v29.f32, 1), v40, v29, 2);
  v30 = vmulq_f32(v41, v41);
  v31 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u64[0];
  *(float *)&v31 = sqrtf(*(float *)&v31);
  v32 = vmulq_f32(v42, v42);
  v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1);
  if (*(float *)&v31 <= 0.00000011921)
    *(float *)&v31 = 0.00000011921;
  v43 = (int32x2_t)v31;
  v34 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, v33)).f32[0]);
  result = REContactSetGetMaxPenetrationDepth();
  *(float32x2_t *)&v35 = vdiv_f32(*(float32x2_t *)v41.f32, (float32x2_t)vdup_lane_s32(v43, 0));
  *((float *)&v35 + 2) = v41.f32[2] / *(float *)v43.i32;
  HIDWORD(v35) = 0;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v12;
  *(_OWORD *)(a2 + 16) = v38;
  *(_QWORD *)(a2 + 32) = v43.u32[0];
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 48) = v35;
  *(_QWORD *)(a2 + 64) = COERCE_UNSIGNED_INT(v34 * v36);
  *(_QWORD *)(a2 + 72) = v26;
  return result;
}

uint64_t closure #22 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = *a1;
  if (!result)
    goto LABEL_28;
  v5 = a1[1];
  result = RECollisionObjectGetUserData();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v5)
  {
    result = RECollisionObjectGetUserData();
    if ((result & 0x8000000000000000) == 0)
    {
      v7 = result;
      if (result)
      {
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v8 = swift_dynamicCastClassUnconditional();
          goto LABEL_9;
        }
        result = REEntityIsBeingDestroyed();
        if ((result & 1) == 0)
        {
          v10 = specialized static Entity.entityInfoType(_:)();
          if (v10)
          {
            v9 = (*(uint64_t (**)(void))(v10 + 232))();
            v11 = *(_QWORD *)(v9 + 16);
            swift_retain();
            MEMORY[0x22076D160](v11, 0);
            *(_QWORD *)(v9 + 16) = v6;
            MEMORY[0x22076D160](v6, v9);
            swift_release();
            goto LABEL_13;
          }
          v8 = makeEntity(for:)(v6);
LABEL_9:
          v9 = v8;
LABEL_13:
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            result = swift_dynamicCastClassUnconditional();
            goto LABEL_15;
          }
          result = REEntityIsBeingDestroyed();
          if ((result & 1) == 0)
          {
            v13 = specialized static Entity.entityInfoType(_:)();
            if (v13)
            {
              v12 = (*(uint64_t (**)(void))(v13 + 232))();
              v14 = *(_QWORD *)(v12 + 16);
              swift_retain();
              MEMORY[0x22076D160](v14, 0);
              *(_QWORD *)(v12 + 16) = v7;
              MEMORY[0x22076D160](v7, v12);
              result = swift_release();
              goto LABEL_19;
            }
            result = makeEntity(for:)(v7);
LABEL_15:
            v12 = result;
LABEL_19:
            *a2 = v9;
            a2[1] = v12;
            return result;
          }
          goto LABEL_27;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t closure #23 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = *(float *)result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      result = swift_dynamicCastClassUnconditional();
      goto LABEL_4;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      v6 = specialized static Entity.entityInfoType(_:)();
      if (v6)
      {
        v5 = (*(uint64_t (**)(void))(v6 + 232))();
        v7 = *(_QWORD *)(v5 + 16);
        swift_retain();
        MEMORY[0x22076D160](v7, 0);
        *(_QWORD *)(v5 + 16) = v2;
        MEMORY[0x22076D160](v2, v5);
        result = swift_release();
        goto LABEL_8;
      }
      result = makeEntity(for:)(v2);
LABEL_4:
      v5 = result;
LABEL_8:
      *(double *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v5;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #25 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *(_QWORD *)a1;
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = *(_BYTE *)(a1 + 8);
  result = RERigidBodyGetEntity();
  if (result)
  {
    v6 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      result = swift_dynamicCastClassUnconditional();
      goto LABEL_5;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      v8 = specialized static Entity.entityInfoType(_:)();
      if (v8)
      {
        v7 = (*(uint64_t (**)(void))(v8 + 232))();
        v9 = *(_QWORD *)(v7 + 16);
        swift_retain();
        MEMORY[0x22076D160](v9, 0);
        *(_QWORD *)(v7 + 16) = v6;
        MEMORY[0x22076D160](v6, v7);
        result = swift_release();
        goto LABEL_9;
      }
      result = makeEntity(for:)(v6);
LABEL_5:
      v7 = result;
LABEL_9:
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = v5;
      return result;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18[2];

  v3 = *a1;
  v4 = a1[1];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    goto LABEL_8;
  v6 = result;
  swift_beginAccess();
  if (!*(_QWORD *)(v6 + 216))
  {
    result = swift_release();
LABEL_8:
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v7 = *(_QWORD *)(v6 + 224);
  ObjectType = swift_getObjectType();
  v15 = v4;
  v9 = *(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t))(v7 + 32);
  swift_unknownObjectRetain();
  v9(&v16, &v15, ObjectType, v7);
  if (!v17)
  {
LABEL_17:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for SynchronizationPeerID?);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined init with take of BindableDataInternal(&v16, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MutableBox<Bool>);
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = 0;
  if (!v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = v10;
  if (!(id)REEntityGetSwiftObject())
  {
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      v13 = specialized static Entity.entityInfoType(_:)();
      if (v13)
      {
        v12 = (*(uint64_t (**)(void))(v13 + 232))();
        v14 = *(_QWORD *)(v12 + 16);
        swift_retain();
        MEMORY[0x22076D160](v14, 0);
        *(_QWORD *)(v12 + 16) = v3;
        MEMORY[0x22076D160](v3, v12);
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        v12 = makeEntity(for:)(v3);
        swift_release();
        swift_unknownObjectRelease();
      }
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for Entity();
  v12 = swift_dynamicCastClassUnconditional();
LABEL_13:
  outlined init with take of BindableDataInternal(v18, (uint64_t)&v16);
  *(_QWORD *)a2 = v12;
  result = outlined init with take of BindableDataInternal(&v16, a2 + 8);
  *(_QWORD *)(a2 + 48) = partial apply for closure #1 in closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
  *(_QWORD *)(a2 + 56) = v11;
  return result;
}

uint64_t closure #27 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t);
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    goto LABEL_7;
  v7 = result;
  swift_beginAccess();
  if (!*(_QWORD *)(v7 + 216))
  {
    result = swift_release();
LABEL_7:
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v8 = *(_QWORD *)(v7 + 224);
  ObjectType = swift_getObjectType();
  v16 = v4;
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(v8 + 32);
  swift_unknownObjectRetain();
  v10(v17, &v16, ObjectType, v8);
  if (!v5)
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    v11 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    v12 = 0;
LABEL_9:

    if (v3)
      goto LABEL_10;
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v5 == 1)
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    v11 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    v12 = 1;
    goto LABEL_9;
  }
  v12 = 1;
  if (!v3)
    goto LABEL_16;
LABEL_10:
  if (!(id)REEntityGetSwiftObject())
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v14 = specialized static Entity.entityInfoType(_:)();
    if (v14)
    {
      v13 = (*(uint64_t (**)(uint64_t))(v14 + 232))(v14);
      v15 = *(_QWORD *)(v13 + 16);
      swift_retain();
      MEMORY[0x22076D160](v15, 0);
      *(_QWORD *)(v13 + 16) = v3;
      MEMORY[0x22076D160](v3, v13);
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      goto LABEL_18;
    }
LABEL_17:
    v13 = makeEntity(for:)(v3);
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for Entity();
  v13 = swift_dynamicCastClassUnconditional();
LABEL_18:
  *(_QWORD *)a2 = v13;
  result = outlined init with take of SynchronizationPeerID?((uint64_t)v17, a2 + 8);
  *(_BYTE *)(a2 + 48) = v12;
  return result;
}

uint64_t closure #28 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD *(*v9)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v3 = *a1;
  v4 = a1[1];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    goto LABEL_7;
  v6 = result;
  swift_beginAccess();
  if (!*(_QWORD *)(v6 + 216))
  {
    result = swift_release();
LABEL_7:
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    return result;
  }
  v7 = *(_QWORD *)(v6 + 224);
  ObjectType = swift_getObjectType();
  v13 = v4;
  v9 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(v7 + 32);
  swift_unknownObjectRetain();
  result = (uint64_t)v9(v14, &v13, ObjectType, v7);
  if (!v3)
    goto LABEL_15;
  if (!(id)REEntityGetSwiftObject())
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      v11 = specialized static Entity.entityInfoType(_:)();
      if (v11)
      {
        v10 = (*(uint64_t (**)(uint64_t))(v11 + 232))(v11);
        v12 = *(_QWORD *)(v10 + 16);
        swift_retain();
        MEMORY[0x22076D160](v12, 0);
        *(_QWORD *)(v10 + 16) = v3;
        MEMORY[0x22076D160](v3, v10);
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        v10 = makeEntity(for:)(v3);
        swift_release();
        swift_unknownObjectRelease();
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for Entity();
  v10 = swift_dynamicCastClassUnconditional();
LABEL_12:
  *(_QWORD *)a2 = v10;
  return outlined init with take of SynchronizationPeerID?((uint64_t)v14, (uint64_t)a2 + 8);
}

void closure #29 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = specialized static AudioPlaybackController.audioPlaybackControllerForToken(token:)(*a1);
  if (!v3)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v4 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

  }
  *a2 = v3;
}

uint64_t closure #30 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)a1;
  result = specialized Scene.getPublicComponentType(_:)(*(_QWORD *)(a1 + 8));
  if (!result || (v6 = result, v7 = v5, result = REEntityIsNonHiddenAndInHierarchy(), !(_DWORD)result))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    result = swift_dynamicCastClassUnconditional();
    goto LABEL_5;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v9 = specialized static Entity.entityInfoType(_:)();
    if (v9)
    {
      v8 = (*(uint64_t (**)(void))(v9 + 232))();
      v10 = *(_QWORD *)(v8 + 16);
      swift_retain();
      MEMORY[0x22076D160](v10, 0);
      *(_QWORD *)(v8 + 16) = v3;
      MEMORY[0x22076D160](v3, v8);
      result = swift_release();
      goto LABEL_10;
    }
    result = makeEntity(for:)(v3);
LABEL_5:
    v8 = result;
LABEL_10:
    *a2 = v8;
    a2[1] = v6;
    a2[2] = v7;
    return result;
  }
  __break(1u);
  return result;
}

unsigned __int8 *closure #35 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  unsigned int v2;
  int v3;

  v2 = result[1];
  if (v2 > 1)
  {
    __break(1u);
  }
  else
  {
    v3 = *result;
    if (!*result)
    {
LABEL_5:
      *a2 = v3 | (v2 != 0);
      return result;
    }
    if (v3 == 1)
    {
      LOWORD(v3) = 256;
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

__n128 closure #37 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = 0;
  return result;
}

_BYTE *closure #38 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(_BYTE *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = (2 * (result[1] != 1)) | ((*result != 1) << 9);
  return result;
}

__n128 closure #39 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  return result;
}

uint64_t Scene.Publisher.receive<A>(subscriber:)()
{
  uint64_t v0;

  v0 = type metadata accessor for AnyPublisher();
  MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v0);
  return Publisher.subscribe<A>(_:)();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Scene.Publisher<A>()
{
  return Scene.Publisher.receive<A>(subscriber:)();
}

uint64_t Scene.CorePublisher.init(dispatcher:sourceObject:componentType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = a2;
  a4[1] = a3;
  a4[2] = result;
  return result;
}

uint64_t Scene.CorePublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  v13 = type metadata accessor for Scene.CorePublisher.Inner(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v22 - v16;
  v22[1] = *(_QWORD *)(v3 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a3, v15);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v17, v8, a3);
  v20 = type metadata accessor for REEventDispatcher(0, v10, v18, v19);
  swift_retain();
  MEMORY[0x220772E3C](&protocol conformance descriptor for REEventDispatcher<A>, v20);
  MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.CorePublisher<A>.Inner<A1>, v13);
  Publisher.subscribe<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release();
}

uint64_t type metadata accessor for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Scene.CorePublisher.Inner);
}

unint64_t lazy protocol witness table accessor for type SynchronizationEvents.OwnershipResponse.Response and conformance SynchronizationEvents.OwnershipResponse.Response()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SynchronizationEvents.OwnershipResponse.Response and conformance SynchronizationEvents.OwnershipResponse.Response;
  if (!lazy protocol witness table cache variable for type SynchronizationEvents.OwnershipResponse.Response and conformance SynchronizationEvents.OwnershipResponse.Response)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SynchronizationEvents.OwnershipResponse.Response, &type metadata for SynchronizationEvents.OwnershipResponse.Response);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SynchronizationEvents.OwnershipResponse.Response and conformance SynchronizationEvents.OwnershipResponse.Response);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoPlayerEvents.ContentTypeDidChange.ContentType and conformance VideoPlayerEvents.ContentTypeDidChange.ContentType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VideoPlayerEvents.ContentTypeDidChange.ContentType and conformance VideoPlayerEvents.ContentTypeDidChange.ContentType;
  if (!lazy protocol witness table cache variable for type VideoPlayerEvents.ContentTypeDidChange.ContentType and conformance VideoPlayerEvents.ContentTypeDidChange.ContentType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VideoPlayerEvents.ContentTypeDidChange.ContentType, &type metadata for VideoPlayerEvents.ContentTypeDidChange.ContentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlayerEvents.ContentTypeDidChange.ContentType and conformance VideoPlayerEvents.ContentTypeDidChange.ContentType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoPlayerEvents.MediaTypeDidChange.MediaType and conformance VideoPlayerEvents.MediaTypeDidChange.MediaType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VideoPlayerEvents.MediaTypeDidChange.MediaType and conformance VideoPlayerEvents.MediaTypeDidChange.MediaType;
  if (!lazy protocol witness table cache variable for type VideoPlayerEvents.MediaTypeDidChange.MediaType and conformance VideoPlayerEvents.MediaTypeDidChange.MediaType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VideoPlayerEvents.MediaTypeDidChange.MediaType, &type metadata for VideoPlayerEvents.MediaTypeDidChange.MediaType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlayerEvents.MediaTypeDidChange.MediaType and conformance VideoPlayerEvents.MediaTypeDidChange.MediaType);
  }
  return result;
}

uint64_t Scene.CorePublisher.Inner.combineIdentifier.getter()
{
  return dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter();
}

uint64_t Scene.CorePublisher.Inner.receive(subscription:)()
{
  return dispatch thunk of Subscriber.receive(subscription:)();
}

uint64_t Scene.CorePublisher.Inner.receive(_:)()
{
  return dispatch thunk of Subscriber.receive(_:)();
}

uint64_t Scene.CorePublisher.Inner.receive(completion:)()
{
  return dispatch thunk of Subscriber.receive(completion:)();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Scene.CorePublisher<A>.Inner<A1>()
{
  return Scene.CorePublisher.Inner.receive(completion:)();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Scene.CorePublisher<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Scene.CorePublisher.receive<A>(subscriber:)(a1, a4, a2);
}

ValueMetadata *type metadata accessor for PhysicsSimulationEvents()
{
  return &type metadata for PhysicsSimulationEvents;
}

ValueMetadata *type metadata accessor for PhysicsSimulationEvents.WillSimulate()
{
  return &type metadata for PhysicsSimulationEvents.WillSimulate;
}

_QWORD *assignWithCopy for PhysicsSimulationEvents.WillSimulate(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for PhysicsSimulationEvents.DidSimulate(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PhysicsSimulationEvents.DidSimulate()
{
  return &type metadata for PhysicsSimulationEvents.DidSimulate;
}

ValueMetadata *type metadata accessor for SceneEvents()
{
  return &type metadata for SceneEvents;
}

_QWORD *initializeBufferWithCopyOfBuffer for SceneEvents.Update(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SceneEvents.Update(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for SceneEvents.Update(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SceneEvents.Update()
{
  return &type metadata for SceneEvents.Update;
}

uint64_t initializeBufferWithCopyOfBuffer for SceneEvents.AnchoredStateChanged(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SceneEvents.AnchoredStateChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = v3;
  return a1;
}

uint64_t assignWithTake for SceneEvents.AnchoredStateChanged(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for SceneEvents.AnchoredStateChanged()
{
  return &type metadata for SceneEvents.AnchoredStateChanged;
}

ValueMetadata *type metadata accessor for SceneEvents.Render()
{
  return &type metadata for SceneEvents.Render;
}

ValueMetadata *type metadata accessor for SceneEvents.DidAddEntity()
{
  return &type metadata for SceneEvents.DidAddEntity;
}

ValueMetadata *type metadata accessor for SceneEvents.DidActivateEntity()
{
  return &type metadata for SceneEvents.DidActivateEntity;
}

ValueMetadata *type metadata accessor for SceneEvents.WillDeactivateEntity()
{
  return &type metadata for SceneEvents.WillDeactivateEntity;
}

ValueMetadata *type metadata accessor for SceneEvents.WillRemoveEntity()
{
  return &type metadata for SceneEvents.WillRemoveEntity;
}

_QWORD *assignWithCopy for SceneEvents.DidReparentEntity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SceneEvents.DidReparentEntity()
{
  return &type metadata for SceneEvents.DidReparentEntity;
}

ValueMetadata *type metadata accessor for AnimationEvents()
{
  return &type metadata for AnimationEvents;
}

ValueMetadata *type metadata accessor for AnimationEvents.PlaybackCompleted()
{
  return &type metadata for AnimationEvents.PlaybackCompleted;
}

ValueMetadata *type metadata accessor for AnimationEvents.PlaybackLooped()
{
  return &type metadata for AnimationEvents.PlaybackLooped;
}

ValueMetadata *type metadata accessor for AnimationEvents.PlaybackTerminated()
{
  return &type metadata for AnimationEvents.PlaybackTerminated;
}

ValueMetadata *type metadata accessor for AnimationEvents.PlaybackStarted()
{
  return &type metadata for AnimationEvents.PlaybackStarted;
}

ValueMetadata *type metadata accessor for AnimationEvents.SkeletalPoseUpdateComplete()
{
  return &type metadata for AnimationEvents.SkeletalPoseUpdateComplete;
}

ValueMetadata *type metadata accessor for AudioEvents()
{
  return &type metadata for AudioEvents;
}

ValueMetadata *type metadata accessor for AudioEvents.PlaybackBegan()
{
  return &type metadata for AudioEvents.PlaybackBegan;
}

ValueMetadata *type metadata accessor for AudioEvents.PlaybackCompleted()
{
  return &type metadata for AudioEvents.PlaybackCompleted;
}

__n128 __swift_memcpy68_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Contact(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 68))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Contact(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 68) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Contact()
{
  return &type metadata for Contact;
}

ValueMetadata *type metadata accessor for CollisionEvents()
{
  return &type metadata for CollisionEvents;
}

__n128 __swift_memcpy80_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CollisionEvents.Began()
{
  return &type metadata for CollisionEvents.Began;
}

uint64_t destroy for CollisionEvents.Began()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CollisionEvents.Began(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CollisionEvents.Began(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CollisionEvents.Began(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CollisionEvents.Began(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollisionEvents.Began(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CollisionEvents.Updated()
{
  return &type metadata for CollisionEvents.Updated;
}

ValueMetadata *type metadata accessor for CollisionEvents.Ended()
{
  return &type metadata for CollisionEvents.Ended;
}

ValueMetadata *type metadata accessor for SynchronizationEvents()
{
  return &type metadata for SynchronizationEvents;
}

uint64_t destroy for SynchronizationEvents.OwnershipRequest(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return swift_release();
}

uint64_t initializeWithCopy for SynchronizationEvents.OwnershipRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SynchronizationEvents.OwnershipRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SynchronizationEvents.OwnershipRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SynchronizationEvents.OwnershipRequest()
{
  return &type metadata for SynchronizationEvents.OwnershipRequest;
}

uint64_t initializeWithCopy for SynchronizationEvents.OwnershipResponse(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = a2 + 8;
  v6 = *(_QWORD *)(a2 + 32);
  swift_retain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v5 + 32);
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for SynchronizationEvents.OwnershipResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for SynchronizationEvents.OwnershipResponse(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SynchronizationEvents.OwnershipResponse(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SynchronizationEvents.OwnershipResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationEvents.OwnershipResponse()
{
  return &type metadata for SynchronizationEvents.OwnershipResponse;
}

ValueMetadata *type metadata accessor for SynchronizationEvents.OwnershipResponse.Response()
{
  return &type metadata for SynchronizationEvents.OwnershipResponse.Response;
}

uint64_t destroy for SynchronizationEvents.OwnershipResponse(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 32))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return result;
}

uint64_t initializeWithCopy for SynchronizationEvents.OwnershipChanged(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = a2 + 1;
  v6 = a2[4];
  swift_retain();
  if (v6)
  {
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    v8 = *((_OWORD *)v5 + 1);
    *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 40) = v5[4];
  }
  return a1;
}

uint64_t assignWithCopy for SynchronizationEvents.OwnershipChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for SynchronizationEvents.OwnershipChanged(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SynchronizationEvents.OwnershipChanged(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SynchronizationEvents.OwnershipChanged(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationEvents.OwnershipChanged()
{
  return &type metadata for SynchronizationEvents.OwnershipChanged;
}

ValueMetadata *type metadata accessor for ComponentEvents()
{
  return &type metadata for ComponentEvents;
}

ValueMetadata *type metadata accessor for ComponentEvents.DidAdd()
{
  return &type metadata for ComponentEvents.DidAdd;
}

ValueMetadata *type metadata accessor for ComponentEvents.DidActivate()
{
  return &type metadata for ComponentEvents.DidActivate;
}

ValueMetadata *type metadata accessor for ComponentEvents.WillDeactivate()
{
  return &type metadata for ComponentEvents.WillDeactivate;
}

uint64_t initializeBufferWithCopyOfBuffer for ComponentEvents.WillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithTake for ComponentEvents.WillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for ComponentEvents.WillRemove()
{
  return &type metadata for ComponentEvents.WillRemove;
}

uint64_t assignWithCopy for ComponentEvents.DidAdd(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for ComponentEvents.DidChange()
{
  return &type metadata for ComponentEvents.DidChange;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents()
{
  return &type metadata for VideoPlayerEvents;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ContentTypeDidChange()
{
  return &type metadata for VideoPlayerEvents.ContentTypeDidChange;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ContentTypeDidChange.ContentType()
{
  return &type metadata for VideoPlayerEvents.ContentTypeDidChange.ContentType;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ViewingModeDidChange()
{
  return &type metadata for VideoPlayerEvents.ViewingModeDidChange;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ImmersiveViewingModeDidChange()
{
  return &type metadata for VideoPlayerEvents.ImmersiveViewingModeDidChange;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ImmersiveViewingModeWillTransition()
{
  return &type metadata for VideoPlayerEvents.ImmersiveViewingModeWillTransition;
}

uint64_t getEnumTagSinglePayload for VideoPlayerEvents.ViewingModeDidChange(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  if (*(unsigned __int8 *)a1 <= 2u)
    v6 = 2;
  else
    v6 = *(unsigned __int8 *)a1;
  v7 = v6 - 3;
  if (*(unsigned __int8 *)a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoPlayerEvents.ViewingModeDidChange(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BC24C58 + 4 * byte_21BE664A5[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_21BC24C8C + 4 * byte_21BE664A0[v4]))();
}

uint64_t sub_21BC24C8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BC24C94(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21BC24C9CLL);
  return result;
}

uint64_t sub_21BC24CA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21BC24CB0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BC24CB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BC24CBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ImmersiveViewingModeDidTransition()
{
  return &type metadata for VideoPlayerEvents.ImmersiveViewingModeDidTransition;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.VideoSizeDidChange()
{
  return &type metadata for VideoPlayerEvents.VideoSizeDidChange;
}

uint64_t getEnumTagSinglePayload for VideoPlayerEvents.ContentTypeDidChange(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoPlayerEvents.ContentTypeDidChange(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC24DC8 + 4 * byte_21BE664AF[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_21BC24DFC + 4 * byte_21BE664AA[v4]))();
}

uint64_t sub_21BC24DFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BC24E04(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21BC24E0CLL);
  return result;
}

uint64_t sub_21BC24E18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21BC24E20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC24E24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BC24E2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.MediaTypeDidChange()
{
  return &type metadata for VideoPlayerEvents.MediaTypeDidChange;
}

uint64_t storeEnumTagSinglePayload for SynchronizationEvents.OwnershipResponse.Response(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC24E94 + 4 * byte_21BE664B9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC24EC8 + 4 * byte_21BE664B4[v4]))();
}

uint64_t sub_21BC24EC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC24ED0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC24ED8);
  return result;
}

uint64_t sub_21BC24EE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC24EECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC24EF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC24EF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.MediaTypeDidChange.MediaType()
{
  return &type metadata for VideoPlayerEvents.MediaTypeDidChange.MediaType;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.VideoReceiverEndpointDidChanged()
{
  return &type metadata for VideoPlayerEvents.VideoReceiverEndpointDidChanged;
}

uint64_t type metadata accessor for Scene.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Scene.Publisher);
}

_QWORD *assignWithCopy for Scene.CorePublisher(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Scene.CorePublisher(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Scene.CorePublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Scene.CorePublisher);
}

uint64_t type metadata completion function for Scene.CorePublisher.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Scene.CorePublisher.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
}

uint64_t initializeWithCopy for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for Scene.CorePublisher.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21BC25218 + 4 * byte_21BE664BE[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Scene.CorePublisher.Inner(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void base witness table accessor for CustomCombineIdentifierConvertible in Scene.CorePublisher<A>.Inner<A1>()
{
  JUMPOUT(0x220772E3CLL);
}

_QWORD *specialized Scene.copyContacts(from:swapContacts:sceneFromPhysics:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  float32x4_t v10;
  float v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  __int128 v15;
  __int128 v16;
  float32x2_t v17;
  float32x4_t v18;
  float v19;
  float32x2_t v20;
  float32x4_t v21;
  float v22;
  __int128 v23;
  __int128 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x2_t v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  __int128 v39;
  float32x4_t v40;
  _QWORD *v41;
  _QWORD *v42;
  float32x4_t v43;
  int v44;
  int v45;
  __int32 v46;
  __int32 v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v52;
  int32x2_t v53;
  __int32 v54;
  float32x4_t v58;
  __int128 v59;
  simd_float3x3 v60;
  simd_float3x3 v61;

  v7 = REContactSetCount();
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    if (v7)
    {
      v60.columns[0] = (simd_float3)a1;
      v60.columns[0].i32[3] = 0;
      v10 = vmulq_f32(a1, a1);
      v11 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
      v60.columns[2] = (simd_float3)a3;
      v60.columns[2].i32[3] = 0;
      v60.columns[1] = (simd_float3)a2;
      v60.columns[1].i32[3] = 0;
      v61 = __invert_f3(v60);
      v12 = 0;
      v13 = vzip1q_s32((int32x4_t)v61.columns[0], (int32x4_t)v61.columns[1]);
      v13.i32[2] = v61.columns[2].i32[0];
      v50 = (float32x4_t)v13;
      v14 = vtrn2q_s32((int32x4_t)v61.columns[0], (int32x4_t)v61.columns[1]);
      v14.i32[2] = v61.columns[2].i32[1];
      v61.columns[0] = (simd_float3)vzip2q_s32((int32x4_t)v61.columns[0], (int32x4_t)v61.columns[1]);
      v61.columns[0].i32[2] = v61.columns[2].i32[2];
      v48 = (float32x4_t)v61.columns[0];
      v49 = (float32x4_t)v14;
      do
      {
        if ((a6 & 1) != 0)
        {
          REContactSetGetPositionBWorld();
          v16 = v15;
          HIDWORD(v16) = v44;
          v59 = v16;
          REContactSetGetNormal();
          *(float32x2_t *)v18.f32 = vsub_f32(0, v17);
          v18.f32[2] = 0.0 - v19;
          v18.i32[3] = 0;
          v58 = v18;
          REContactSetGetImpulse();
          *(float32x2_t *)v21.f32 = vsub_f32(0, v20);
          v21.f32[2] = 0.0 - v22;
          v21.i32[3] = 0;
          v52 = v21;
          v44 = HIDWORD(v59);
        }
        else
        {
          REContactSetGetPositionAWorld();
          v24 = v23;
          HIDWORD(v24) = v45;
          v59 = v24;
          REContactSetGetNormal();
          v26 = v25;
          v26.i32[3] = v46;
          v58 = v26;
          REContactSetGetImpulse();
          v28 = v27;
          v28.i32[3] = v47;
          v52 = v28;
          v46 = v58.i32[3];
          v45 = HIDWORD(v59);
        }
        REContactSetGetPenetrationDepth();
        v31 = v30;
        v32 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, v52.f32[0]), a2, *(float32x2_t *)v52.f32, 1), a3, v52, 2);
        v33 = vmulq_f32(v32, v32);
        v34 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]);
        if (v34 > 0.00000011921)
          *(float *)v29.i32 = v34;
        else
          *(float *)v29.i32 = 0.00000011921;
        v36 = v9[2];
        v35 = v9[3];
        if (v36 >= v35 >> 1)
        {
          v53 = v29;
          v43 = v32;
          v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v9);
          v32 = v43;
          v29 = v53;
          v9 = v42;
        }
        v37 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a1, *(float *)&v59 + (float)(v31 * v58.f32[0])), a2, *((float *)&v59 + 1) + vmuls_lane_f32(v31, *(float32x2_t *)v58.f32, 1)), a3, *((float *)&v59 + 2) + vmuls_lane_f32(v31, v58, 2)), a4);
        v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 3);
        *(float32x2_t *)&v39 = vdiv_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.f32);
        *((_QWORD *)&v39 + 1) = vdivq_f32(v37, v38).u32[2];
        *(float32x2_t *)v37.f32 = vdiv_f32(*(float32x2_t *)v32.f32, (float32x2_t)vdup_lane_s32(v29, 0));
        v37.f32[2] = v32.f32[2] / *(float *)v29.i32;
        ++v12;
        v37.i32[3] = 0;
        v40 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v58.f32[0]), v49, *(float32x2_t *)v58.f32, 1), v48, v58, 2);
        v40.i32[3] = v54;
        v9[2] = v36 + 1;
        v41 = &v9[10 * v36];
        *((_OWORD *)v41 + 2) = v39;
        *((float32x4_t *)v41 + 3) = v40;
        *((_DWORD *)v41 + 16) = v29.i32[0];
        *((float32x4_t *)v41 + 5) = v37;
        *((float *)v41 + 24) = v11 * v31;
      }
      while (v7 != v12);
    }
    return v9;
  }
  return result;
}

uint64_t specialized Scene.getPublicComponentType(_:)(Swift::UInt a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _BYTE v17[40];

  v2 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  swift_beginAccess();
  v3 = *(_QWORD *)(v16 + 16);
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v4 + 56) + 80 * v5;
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(unsigned __int8 *)(v7 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      if (v9 == 2)
        return v8;
      return 0;
    }
  }
  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  swift_beginAccess();
  v10 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v12 & 1) == 0))
  {
    swift_endAccess();
    swift_release();
    return 0;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v11);
  swift_endAccess();
  swift_release();
  v8 = 0;
  if (swift_conformsToProtocol2())
    v14 = v13;
  else
    v14 = 0;
  if (!v14)
    return v13;
  return v8;
}

uint64_t sub_21BC25958()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #33 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #30 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_21BC25994()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #28 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #28 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t partial apply for closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t partial apply for closure #21 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #20 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_21BC259E0()
{
  return swift_deallocObject();
}

uint64_t sub_21BC259F0()
{
  return swift_deallocObject();
}

uint64_t *partial apply for closure #17 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #16 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_21BC25A18()
{
  return swift_deallocObject();
}

uint64_t sub_21BC25A28()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #14 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #14 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_21BC25A40()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #13 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #10 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_21BC25A68()
{
  return swift_deallocObject();
}

uint64_t sub_21BC25A78()
{
  return swift_deallocObject();
}

uint64_t sub_21BC25A88()
{
  return swift_deallocObject();
}

uint64_t sub_21BC25A98()
{
  return swift_deallocObject();
}

void partial apply for closure #9 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  closure #9 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t _s10RealityKit5SceneC0A10FoundationE9publisher3for2on13componentType10rootEntity8matchingAC9PublisherVy_xGxm_AA11EventSource_pSgAA9Component_pXpSgAA0K0CSgSSSgtAA0N0RzlFAA0C6EventsO6RenderVSgSo010REEngineDorN0VcfU6_TA_0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.CorePublisher<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #6 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #6 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_21BC25B40()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(_QWORD *)(v2 + 16), (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

uint64_t sub_21BC25B70()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(_QWORD *)(v2 + 16), (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

uint64_t sub_21BC25BA0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(_QWORD *)(v2 + 16), &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

uint64_t sub_21BC25BD0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(_QWORD *)(v2 + 16), (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

uint64_t sub_21BC25C00()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(_QWORD *)(v2 + 16), &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

void partial apply for closure #1 in closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 16) = 1;
}

uint64_t outlined init with take of SynchronizationPeerID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BC25C84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t partial apply for closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(_QWORD *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t objectdestroy_68Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(_QWORD *)(v1 + 32), *(void (**)(char *))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

uint64_t outlined init with copy of SynchronizationEvents.OwnershipRequest(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SynchronizationEvents.OwnershipRequest(a2, a1);
  return a2;
}

uint64_t outlined destroy of SynchronizationEvents.OwnershipRequest(uint64_t a1)
{
  destroy for SynchronizationEvents.OwnershipRequest(a1);
  return a1;
}

ValueMetadata *type metadata accessor for MotionStateEvents()
{
  return &type metadata for MotionStateEvents;
}

uint64_t initializeBufferWithCopyOfBuffer for MotionStateEvents.DidChange(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MotionStateEvents.DidChange(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for MotionStateEvents.DidChange(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MotionStateEvents.DidChange(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MotionStateEvents.DidChange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MotionStateEvents.DidChange()
{
  return &type metadata for MotionStateEvents.DidChange;
}

uint64_t static __REAssetBundle.__init(url:assetService:materialDefinition:with:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X3>, uint64_t *a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ServiceLocatorForLegacyAPIWorkaround;
  _BYTE v12[8];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[25];
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *a3;
  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v18 = 1;
  v19 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v12[0] = v7;
  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, a2, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)v12, a4);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v12);
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  return specialized Sequence.compactMap<A>(_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  if (a3 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v7 = i - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x220769770](i - 4, a3);
          v9 = i - 3;
          if (__OFADD__(v7, 1))
            goto LABEL_17;
        }
        else
        {
          v8 = *(_QWORD *)(a3 + 8 * i);
          swift_retain();
          v9 = i - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        v14 = v8;
        a1(&v13, &v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return swift_bridgeObjectRelease();
        }
        v10 = swift_release();
        if (v13)
        {
          MEMORY[0x220768F0C](v10);
          if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v9 == v5)
        {
          swift_bridgeObjectRelease();
          return v15;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *(*v8)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 == a4)
  {
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = a3;
    if (a4 >= a3)
    {
      v8 = (_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))result;
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (v7 < a4)
      {
        v13 = v7;
        result = (uint64_t)v8(&v12, &v13);
        if (v4)
        {
          swift_bridgeObjectRelease();
          return (uint64_t)v5;
        }
        v9 = v12;
        if (v12)
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
            v5 = (_QWORD *)result;
          }
          v11 = v5[2];
          v10 = v5[3];
          if (v11 >= v10 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
            v5 = (_QWORD *)result;
          }
          v5[2] = v11 + 1;
          v5[v11 + 4] = v9;
        }
        if (a4 == ++v7)
          return (uint64_t)v5;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(void (*a1)(__int128 *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  _QWORD *v13;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v19 = *(_QWORD *)(a3 + 8 * v6 + 32);
    a1(&v17, &v19);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    if ((_QWORD)v17)
    {
      v16 = v17;
      v9 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v11 = v7[2];
      v10 = v7[3];
      v12 = v16;
      if (v11 >= v10 >> 1)
      {
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
        v12 = v16;
        v7 = v13;
      }
      v7[2] = v11 + 1;
      v8 = &v7[3 * v11];
      *((_OWORD *)v8 + 2) = v12;
      v8[6] = v9;
    }
    ++v6;
  }
  while (v4 != v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t __REAssetBundle.sceneAsset(for:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(v1 + 56);
  if ((v3 & 0xC000000000000001) != 0)
  {
    v23 = 0;
    v4 = 0;
    v5 = 0;
    v6 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(v3 + 32);
    v4 = ~v7;
    v23 = v3 + 64;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v5 = v9 & *(_QWORD *)(v3 + 64);
    v6 = v3;
  }
  result = swift_bridgeObjectRetain();
  v11 = 0;
  v22 = (unint64_t)(v4 + 64) >> 6;
  if ((v6 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (__CocoaDictionary.Iterator.next()())
  {
    type metadata accessor for __REAsset();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v24;
    swift_unknownObjectRelease();
    type metadata accessor for RESceneDescriptor();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v13 = v24;
    swift_unknownObjectRelease();
    v14 = v11;
    v15 = v5;
    if (v24)
    {
      do
      {
        v21 = MEMORY[0x22076FAD0](*(_QWORD *)(v13 + 16), *(_QWORD *)(a1 + 16));
        swift_release();
        if (v21)
          break;
        result = swift_release();
        v11 = v14;
        v5 = v15;
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_8;
LABEL_11:
        if (v5)
        {
          v15 = (v5 - 1) & v5;
          v16 = __clz(__rbit64(v5)) | (v11 << 6);
          v14 = v11;
        }
        else
        {
          v17 = v11 + 1;
          if (__OFADD__(v11, 1))
          {
            __break(1u);
            return result;
          }
          if (v17 >= v22)
            goto LABEL_31;
          v18 = *(_QWORD *)(v23 + 8 * v17);
          v14 = v11 + 1;
          if (!v18)
          {
            v14 = v11 + 2;
            if (v11 + 2 >= v22)
              goto LABEL_31;
            v18 = *(_QWORD *)(v23 + 8 * v14);
            if (!v18)
            {
              v14 = v11 + 3;
              if (v11 + 3 >= v22)
                goto LABEL_31;
              v18 = *(_QWORD *)(v23 + 8 * v14);
              if (!v18)
              {
                v14 = v11 + 4;
                if (v11 + 4 >= v22)
                  goto LABEL_31;
                v18 = *(_QWORD *)(v23 + 8 * v14);
                if (!v18)
                {
                  v19 = v11 + 5;
                  while (v22 != v19)
                  {
                    v18 = *(_QWORD *)(v23 + 8 * v19++);
                    if (v18)
                    {
                      v14 = v19 - 1;
                      goto LABEL_26;
                    }
                  }
                  goto LABEL_31;
                }
              }
            }
          }
LABEL_26:
          v15 = (v18 - 1) & v18;
          v16 = __clz(__rbit64(v18)) + (v14 << 6);
        }
        v20 = 8 * v16;
        v12 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v20);
        v13 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v20);
        swift_retain();
        swift_retain();
      }
      while (v12);
    }
  }
  else
  {
LABEL_31:
    v12 = 0;
  }
  outlined consume of [String : AnimationResource].Iterator._Variant();
  return v12;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  _QWORD v16[3];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[2] = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  outlined init with copy of (Int, URL)(a1 + *(int *)(v5 + 24), (uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  String.utf8CString.getter();
  String.utf8CString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v8 = RESceneDescriptorCreateFromParams();
  swift_release();
  swift_release();
  swift_release();
  v9 = *(_QWORD *)(a1 + *(int *)(v5 + 28));
  if (v9 && (v10 = *(_QWORD *)(v9 + 16)) != 0)
  {
    result = swift_bridgeObjectRetain();
    v12 = v9 + 48;
    while (1)
    {
      v13 = *(_QWORD *)(v12 - 16);
      if (v13 < (uint64_t)0xFFFFFFFF80000000)
        break;
      if (v13 > 0x7FFFFFFF)
        goto LABEL_13;
      v12 += 24;
      String.utf8CString.getter();
      RESceneDescriptorAddSceneCompatibilityVariant();
      result = swift_release();
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_11:
    type metadata accessor for RESceneDescriptor();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v8;
    v15 = __REAssetBundle.sceneAsset(for:)(inited);
    swift_setDeallocating();
    RERelease();
    return v15;
  }
  return result;
}

uint64_t __REAssetBundle.init(bundle:entryName:serviceLocator:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19[24];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[136];
  void *v24;

  v24 = a3;
  v18 = a2;
  v17 = a6;
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __REAssetBundle.LoadOptions(a5, (uint64_t)v23);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a4 + 120, (uint64_t)v20);
  v13 = v21;
  v14 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  v19[0] = v23[0];
  __REAssetService.dispatchPredicate(for:)(v19, v13, v14, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  result = outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v23);
  if ((v13 & 1) != 0)
  {
    outlined init with copy of __REAssetService(a4 + 120, (uint64_t)v20);
    swift_beginAccess();
    static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)(a1, v18, v24, v20, *(_QWORD *)(a4 + 16), a5, v17);

    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of __REAssetBundle.LoadOptions(a5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __REAssetBundle.mainSceneAsset.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v2 = result;
    if (!result)
      goto LABEL_6;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = MEMORY[0x220769770](0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t __REAssetBundle.__mainSceneAsset.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v2 = result;
    if (!result)
      goto LABEL_6;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = MEMORY[0x220769770](0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

double __REAssetBundle.LoadOptions.init(queueOptions:)@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  double result;

  v2 = *a1;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 81) = 0u;
  *(_WORD *)(a2 + 97) = 1;
  *(_BYTE *)(a2 + 99) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)a2 = v2;
  return result;
}

uint64_t __REAssetBundle.init(url:serviceLocator:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 v17[24];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[136];

  v16 = a4;
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __REAssetBundle.LoadOptions(a3, (uint64_t)v21);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a2 + 120, (uint64_t)v18);
  v11 = v19;
  v12 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  v17[0] = v21[0];
  __REAssetService.dispatchPredicate(for:)(v17, v11, v12, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  result = outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v21);
  if ((v11 & 1) != 0)
  {
    outlined init with copy of __REAssetService(a2 + 120, (uint64_t)v18);
    swift_beginAccess();
    static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, v18, *(_QWORD *)(a2 + 16), a3, v16);
    swift_release();
    outlined destroy of __REAssetBundle.LoadOptions(a3);
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t static __REAssetBundle.__sdkBundleID.getter()
{
  return 0xD000000000000014;
}

uint64_t static __REAssetBundle.__sdkBundleVersionKey.getter()
{
  return 0x656C646E75424643;
}

uint64_t one-time initialization function for __sdkBundleVersion()
{
  uint64_t result;
  uint64_t v1;

  result = specialized static __REAssetBundle.frameworkVersion(key:)(0x656C646E75424643, 0xEF6E6F6973726556);
  static __REAssetBundle.__sdkBundleVersion = result;
  *(_QWORD *)algn_2551A2C08 = v1;
  return result;
}

uint64_t static __REAssetBundle.__sdkBundleVersion.getter()
{
  uint64_t v0;

  if (one-time initialization token for __sdkBundleVersion != -1)
    swift_once();
  v0 = static __REAssetBundle.__sdkBundleVersion;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static __REAssetBundle.__sdkBundleVersionInvalid.getter()
{
  return 12589;
}

uint64_t static __REAssetBundle.platform()()
{
  return 5459817;
}

uint64_t static __REAssetBundle.__platform.getter()
{
  return 5459817;
}

uint64_t static __REAssetBundle.__fileExtension.getter()
{
  return 0x7974696C616572;
}

uint64_t one-time initialization function for minimumWritingFormatVersion()
{
  uint64_t result;

  result = RERealityFileWriterGetDefaultVersion();
  static __REAssetBundle.minimumWritingFormatVersion = result;
  return result;
}

uint64_t one-time initialization function for maximumReadingFormatVersion()
{
  uint64_t result;

  result = RERealityFileWriterGetMaxVersion();
  static __REAssetBundle.maximumReadingFormatVersion = result;
  return result;
}

uint64_t static __REAssetBundle.fileExtension.getter()
{
  return 0x7974696C616572;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.Header.VersionInfo.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x6C506E696769726FLL;
  if (*v0)
    return v1;
  else
    return 25705;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.Header.VersionInfo.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __REAssetBundle.Header.VersionInfo.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.Header.VersionInfo.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.Header.VersionInfo.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __REAssetBundle.Header.VersionInfo.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.Header.VersionInfo.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v11[3] = v1[3];
  v11[4] = v7;
  v8 = v1[4];
  v11[1] = v1[5];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  v9 = v11[5];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v9)
  {
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __REAssetBundle.Header.VersionInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.Header.VersionInfo.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v27 = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v12 = v11;
    v24 = v9;
    v26 = 1;
    swift_bridgeObjectRetain();
    v13 = KeyedDecodingContainer.decode(_:forKey:)();
    v15 = v14;
    v22 = v13;
    v25 = 2;
    swift_bridgeObjectRetain();
    v23 = v15;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v18 = v17;
    v19 = v16;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v20 = v23;
    *a2 = v24;
    a2[1] = v12;
    a2[2] = v22;
    a2[3] = v20;
    a2[4] = v19;
    a2[5] = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.Header.VersionInfo@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return __REAssetBundle.Header.VersionInfo.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.Header.VersionInfo(_QWORD *a1)
{
  return __REAssetBundle.Header.VersionInfo.encode(to:)(a1);
}

uint64_t __REAssetBundle.Header.versionInfo.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 __REAssetBundle.Header.versionInfo.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)v1 = v6;
  *(__n128 *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*__REAssetBundle.Header.versionInfo.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.Header.minVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t __REAssetBundle.Header.minVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*__REAssetBundle.Header.minVersion.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.Header.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x69737265566E696DLL;
  else
    return 0x496E6F6973726576;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.Header.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __REAssetBundle.Header.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.Header.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.Header.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __REAssetBundle.Header.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.Header.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v13 = v1[1];
  v14 = v7;
  v9 = *((_QWORD *)v1 + 4);
  v8 = *((_QWORD *)v1 + 5);
  v12[1] = *((_QWORD *)v1 + 6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = v14;
  v17 = v13;
  v18 = v9;
  v19 = v8;
  v20 = 0;
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo();
  v10 = v15;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __REAssetBundle.Header.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.Header.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for minimumWritingFormatVersion != -1)
    swift_once();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v25 = 0;
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v20;
  v10 = v22;
  v16 = v21;
  v17 = v19;
  v11 = v24;
  v15 = v23;
  LOBYTE(v19) = 1;
  swift_bridgeObjectRetain();
  v18 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v18;
  *a2 = v17;
  a2[1] = v13;
  a2[2] = v16;
  a2[3] = v10;
  a2[4] = v15;
  a2[5] = v11;
  a2[6] = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.Header@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return __REAssetBundle.Header.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.Header(_QWORD *a1)
{
  return __REAssetBundle.Header.encode(to:)(a1);
}

uint64_t __REAssetBundle.sceneAssets.getter()
{
  return swift_bridgeObjectRetain();
}

RealityKit::__REAssetIdentifier_optional __swiftcall __REAssetBundle.mainSceneIdentifier()()
{
  _QWORD *v0;
  RealityKit::__REAssetIdentifier_optional result;

  *v0 = 0;
  v0[1] = 0;
  return result;
}

uint64_t static __REAssetBundle.QueueOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v2 & 1) == 0) ^ v4;
  return v3 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __REAssetBundle.QueueOptions(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v2 & 1) == 0) ^ v4;
  return v3 & 1;
}

uint64_t __REAssetBundle.ExportOptions.AssetRemapping.rawAssetPath.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __REAssetBundle.ExportOptions.AssetRemapping.replacementName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

RealityKit::__REAssetBundle::ExportOptions::AssetRemapping __swiftcall __REAssetBundle.ExportOptions.AssetRemapping.init(rawAssetPath:replacement:)(Swift::String rawAssetPath, Swift::String replacement)
{
  Swift::String *v2;
  RealityKit::__REAssetBundle::ExportOptions::AssetRemapping result;

  *v2 = rawAssetPath;
  v2[1] = replacement;
  result.replacementName = replacement;
  result.rawAssetPath = rawAssetPath;
  return result;
}

void __REAssetBundle.ExportOptions.queueOptions.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *__REAssetBundle.ExportOptions.queueOptions.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.queueOptions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.compressionLevel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t __REAssetBundle.ExportOptions.compressionLevel.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.compressionLevel.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void *__REAssetBundle.ExportOptions.progress.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void __REAssetBundle.ExportOptions.progress.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

uint64_t (*__REAssetBundle.ExportOptions.progress.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.generateIdentifier.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t __REAssetBundle.ExportOptions.generateIdentifier.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.generateIdentifier.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.deduplicateAssets.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t __REAssetBundle.ExportOptions.deduplicateAssets.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.deduplicateAssets.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __REAssetBundle.ExportOptions.__envelopeVersion.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 35);
  *a1 = *(_BYTE *)(v1 + 34);
  a1[1] = v2;
}

_BYTE *__REAssetBundle.ExportOptions.__envelopeVersion.setter(_BYTE *result)
{
  uint64_t v1;
  char v2;

  v2 = result[1];
  *(_BYTE *)(v1 + 34) = *result;
  *(_BYTE *)(v1 + 35) = v2;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.__envelopeVersion.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.deploymentTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  int v6;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_BYTE *)(v1 + 68);
  v6 = *(_DWORD *)(v1 + 64);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 28) = v5;
  *(_DWORD *)(a1 + 24) = v6;
  return outlined copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v2, v3);
}

__n128 __REAssetBundle.ExportOptions.deploymentTarget.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int32 v3;
  uint64_t v4;
  unsigned __int8 v5;
  __n128 result;
  __n128 v7;

  v7 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u32[2];
  v4 = v1 + 64;
  v5 = a1[1].n128_u8[12];
  outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(*(_QWORD *)(v4 - 24), *(_QWORD *)(v4 - 16));
  result = v7;
  *(__n128 *)(v4 - 24) = v7;
  *(_QWORD *)(v4 - 8) = v2;
  *(_BYTE *)(v4 + 4) = v5;
  *(_DWORD *)v4 = v3;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.deploymentTarget.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.versionOverride.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t __REAssetBundle.ExportOptions.versionOverride.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.versionOverride.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.restrictToSeed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t __REAssetBundle.ExportOptions.restrictToSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.restrictToSeed.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.configurationSetNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.ExportOptions.configurationSetNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.configurationSetNames.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.defaultConfigurationNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.ExportOptions.defaultConfigurationNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.defaultConfigurationNames.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.sceneNamesToConfigurationSpecifications.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.ExportOptions.sceneNamesToConfigurationSpecifications.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.sceneNamesToConfigurationSpecifications.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.remapSingleFile.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __REAssetBundle.ExportOptions.remapSingleFile.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v2 + 112));
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.remapSingleFile.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t key path getter for __REAssetBundle.ExportOptions.remapMultipleFiles : __REAssetBundle.ExportOptions@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t *@<X8>);

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@owned [__REAssetBundle.ExportOptions.AssetRemapping]?);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
}

uint64_t key path setter for __REAssetBundle.ExportOptions.remapMultipleFiles : __REAssetBundle.ExportOptions(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@out [__REAssetBundle.ExportOptions.AssetRemapping]?);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 128);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
  *(_QWORD *)(a2 + 128) = v6;
  *(_QWORD *)(a2 + 136) = v5;
  return result;
}

uint64_t __REAssetBundle.ExportOptions.remapMultipleFiles.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __REAssetBundle.ExportOptions.remapMultipleFiles.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v2 + 128));
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.remapMultipleFiles.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.assetsRemapping.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.ExportOptions.assetsRemapping.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 144) = a1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.assetsRemapping.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.makeSnapshotOfDynamicTextures.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t __REAssetBundle.ExportOptions.makeSnapshotOfDynamicTextures.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 152) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.makeSnapshotOfDynamicTextures.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double __REAssetBundle.ExportOptions.init(queueOptions:)@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_BYTE *)a2 = *a1;
  *(_QWORD *)(a2 + 8) = 1;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 16777217;
  *(_OWORD *)(a2 + 40) = xmmword_21BE66FF0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 68) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_WORD *)(a2 + 80) = 1;
  result = 0.0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_BYTE *)(a2 + 152) = 1;
  return result;
}

void __REAssetBundle.LoadOptions.queueOptions.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *__REAssetBundle.LoadOptions.queueOptions.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.queueOptions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.materialDefinition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 __REAssetBundle.LoadOptions.materialDefinition.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *(__n128 *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.materialDefinition.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.downsamplingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of (Int, URL)(v1 + 32, a1, &demangling cache variable for type metadata for __DownsamplingStrategy?);
}

uint64_t __REAssetBundle.LoadOptions.downsamplingStrategy.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Material?(a1, v1 + 32, &demangling cache variable for type metadata for __DownsamplingStrategy?);
}

uint64_t (*__REAssetBundle.LoadOptions.downsamplingStrategy.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.performanceReport.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t __REAssetBundle.LoadOptions.performanceReport.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.performanceReport.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.aliasName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __REAssetBundle.LoadOptions.aliasName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.aliasName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.loadDedupeFile.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t __REAssetBundle.LoadOptions.loadDedupeFile.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.loadDedupeFile.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.reapplyTextureCompression.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 97);
}

uint64_t __REAssetBundle.LoadOptions.reapplyTextureCompression.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 97) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.reapplyTextureCompression.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.waitForResourceSharingClients.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 98);
}

uint64_t __REAssetBundle.LoadOptions.waitForResourceSharingClients.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 98) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.waitForResourceSharingClients.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.loadOnResourceSharingClients.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 99);
}

uint64_t __REAssetBundle.LoadOptions.loadOnResourceSharingClients.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 99) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.loadOnResourceSharingClients.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.contentRequest.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of __REAssetBundle.LoadOptions.ContentRequest(v2, v3);
}

uint64_t __REAssetBundle.LoadOptions.contentRequest.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = outlined consume of __REAssetBundle.LoadOptions.ContentRequest(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
  *(_QWORD *)(v1 + 104) = v2;
  *(_QWORD *)(v1 + 112) = v3;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.contentRequest.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.__MaterialDefinitionOverride.init(materialDefinition:serviceLocator:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  char v13;

  v11[1] = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x656D614E656C6966;
  else
    return 0x6E6F6973726576;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = specialized __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant(_QWORD *a1)
{
  uint64_t *v1;

  return __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BC282F4 + 4 * byte_21BE67000[*v0]))(0x656D614E656C6966, 0xE800000000000000);
}

uint64_t sub_21BC282F4()
{
  return 0x6D614E656E656373;
}

uint64_t sub_21BC28310()
{
  return 0x656449656E656373;
}

unint64_t sub_21BC28334()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __REAssetBundle.AssetMap.SceneDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.AssetMap.SceneDescriptor.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
    v13 = 2;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 28));
    v11[15] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant]);
    lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A], &demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant], (uint64_t (*)(void))lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __REAssetBundle.AssetMap.SceneDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v27 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.AssetMap.SceneDescriptor.CodingKeys>);
  v6 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (uint64_t)v11 + *(int *)(v12 + 24);
  v14 = type metadata accessor for UUID();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v31 = v13;
  v15(v13, 1, 1, v14);
  v16 = *(int *)(v9 + 28);
  v29 = a1;
  v30 = v16;
  *(uint64_t *)((char *)v11 + v16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys();
  v17 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    v20 = v31;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for UUID?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v18 = v6;
    v37 = 0;
    v19 = v28;
    *v11 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[1] = v21;
    v36 = 1;
    v11[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v11[3] = v22;
    v35 = 2;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of Material?((uint64_t)v5, v31, &demangling cache variable for type metadata for UUID?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant]);
    v34 = 3;
    lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A], &demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant], (uint64_t (*)(void))lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v19);
    v23 = v33;
    v24 = v30;
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v11 + v24) = v23;
    outlined init with copy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v11, v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    return outlined destroy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v11);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.AssetMap.SceneDescriptor@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __REAssetBundle.AssetMap.SceneDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.AssetMap.SceneDescriptor(_QWORD *a1)
{
  return __REAssetBundle.AssetMap.SceneDescriptor.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x656D614E656C6966;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __REAssetBundle.AssetMap.AssetDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.AssetMap.AssetDescriptor.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v10 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = v8;
  v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v12 = v10;
    v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int], MEMORY[0x24BEE1770], MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __REAssetBundle.AssetMap.AssetDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.AssetMap.AssetDescriptor.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v13 = 0;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    v13 = 1;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int], MEMORY[0x24BEE1798], MEMORY[0x24BEE12D0]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v10;
    a2[1] = v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.AssetMap.AssetDescriptor@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return __REAssetBundle.AssetMap.AssetDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.AssetMap.AssetDescriptor(_QWORD *a1)
{
  return __REAssetBundle.AssetMap.AssetDescriptor.encode(to:)(a1);
}

uint64_t __REAssetBundle.AssetMap.scenes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.AssetMap.scenes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*__REAssetBundle.AssetMap.scenes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.AssetMap.assets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.AssetMap.assets.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*__REAssetBundle.AssetMap.assets.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.AssetMap.certifiedFreeOfChangeSceneActions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t __REAssetBundle.AssetMap.certifiedFreeOfChangeSceneActions.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*__REAssetBundle.AssetMap.certifiedFreeOfChangeSceneActions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.AssetMap.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x737465737361;
  if (*v0 != 1)
    v1 = 0xD000000000000021;
  if (*v0)
    return v1;
  else
    return 0x73656E656373;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.AssetMap.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __REAssetBundle.AssetMap.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.AssetMap.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.AssetMap.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __REAssetBundle.AssetMap.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _DWORD v10[4];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.AssetMap.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v11 = v1[1];
  v10[3] = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v8;
  v12 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor]);
  lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A], &lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor and conformance __REAssetBundle.AssetMap.SceneDescriptor, (uint64_t)&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v13 = v11;
    v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.AssetDescriptor]);
    lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.AssetDescriptor] and conformance <A> [A], &demangling cache variable for type metadata for [__REAssetBundle.AssetMap.AssetDescriptor], (uint64_t (*)(void))lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __REAssetBundle.AssetMap.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.AssetMap.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor]);
    v14 = 0;
    lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A], &lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor and conformance __REAssetBundle.AssetMap.SceneDescriptor, (uint64_t)&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.AssetDescriptor]);
    v14 = 1;
    lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.AssetDescriptor] and conformance <A> [A], &demangling cache variable for type metadata for [__REAssetBundle.AssetMap.AssetDescriptor], (uint64_t (*)(void))lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor, MEMORY[0x24BEE12D0]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v11 = v15;
    LOBYTE(v15) = 2;
    swift_bridgeObjectRetain();
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.AssetMap@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __REAssetBundle.AssetMap.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.AssetMap(_QWORD *a1)
{
  return __REAssetBundle.AssetMap.encode(to:)(a1);
}

uint64_t static __REAssetBundle.__init(sceneAssets:assetService:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  Swift::Int v3;
  unint64_t v4;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = swift_bridgeObjectRetain();
  return __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v4, (uint64_t)v6, v3, 0, a2);
}

uint64_t __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, Swift::Int a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t *v40;
  Swift::Int v41;
  unint64_t v42;

  v6 = a2;
  v8 = a5;
  if (a4)
  {
    v9 = a4;
    goto LABEL_12;
  }
  if (one-time initialization token for __sdkBundleVersion != -1)
    swift_once();
  __REAssetBundle.ExportOptions.PlatformOS.init(rawValue:)(5459817, 0xE300000000000000, &v41);
  switch(v42)
  {
    case 5uLL:
      break;
    default:
      outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v41, v42);
      break;
  }
  if (one-time initialization token for minimumWritingFormatVersion != -1)
    swift_once();
  if (static __REAssetBundle.minimumWritingFormatVersion < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_57;
  }
  if (static __REAssetBundle.minimumWritingFormatVersion > 0x7FFFFFFF)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    type metadata accessor for __REAsset();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x21BC29974);
  }
  String.utf8CString.getter();
  v9 = RERealityFileHeaderCreateFromVersionInfo();
  swift_release();
  v8 = a5;
  v6 = a2;
LABEL_12:
  type metadata accessor for RERealityFileHeader();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  *v8 = v12;
  v8[1] = a1;
  outlined init with copy of __REAssetService(v6, (uint64_t)(v8 + 2));
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
  }
  v39 = v6;
  v40 = v8;
  if (a1 >> 62)
    goto LABEL_53;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v13 != v14 && v14)
  {
    while (1)
    {
      if (v14 < 1)
        goto LABEL_58;
      v15 = 0;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v17 = MEMORY[0x220769770](v15, a1);
          v18 = a3 & 0xC000000000000001;
          if ((a3 & 0xC000000000000001) != 0)
            goto LABEL_25;
        }
        else
        {
          v17 = *(_QWORD *)(a1 + 8 * v15 + 32);
          swift_retain();
          v18 = a3 & 0xC000000000000001;
          if ((a3 & 0xC000000000000001) != 0)
          {
LABEL_25:
            swift_retain();
            if (!__CocoaDictionary.lookup(_:)())
            {
              swift_release();
              goto LABEL_34;
            }
            type metadata accessor for RESceneDescriptor();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v19 = v41;
            swift_unknownObjectRelease();
            swift_release();
            goto LABEL_31;
          }
        }
        if (!*(_QWORD *)(a3 + 16))
          goto LABEL_34;
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
        if ((v21 & 1) == 0)
          goto LABEL_34;
        v19 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v20);
        swift_retain();
LABEL_31:
        swift_release();
        if (v19)
        {
          swift_release();
          goto LABEL_22;
        }
LABEL_34:
        v22 = RESceneDescriptorCreateFromParams();
        type metadata accessor for RESceneDescriptor();
        v23 = swift_allocObject();
        *(_QWORD *)(v23 + 16) = v22;
        if (v18)
        {
          if (a3 < 0)
            v13 = a3;
          else
            v13 = a3 & 0xFFFFFFFFFFFFFF8;
          swift_retain();
          v24 = __CocoaSet.count.getter();
          if (__OFADD__(v24, 1))
            goto LABEL_51;
          a3 = specialized _NativeDictionary.init(_:capacity:)(v13, v24 + 1);
        }
        else
        {
          swift_retain();
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v41 = a3;
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
        v27 = *(_QWORD *)(a3 + 16);
        v28 = (v26 & 1) == 0;
        v29 = v27 + v28;
        if (__OFADD__(v27, v28))
          break;
        v30 = v26;
        if (*(_QWORD *)(a3 + 24) >= v29)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
          v31 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
          if ((v30 & 1) != (v32 & 1))
            goto LABEL_59;
          v13 = v31;
        }
        a3 = v41;
        v33 = 8 * v13;
        if ((v30 & 1) != 0)
        {
          v16 = *(_QWORD *)(v41 + 56);
          swift_release();
          *(_QWORD *)(v16 + v33) = v23;
        }
        else
        {
          *(_QWORD *)(v41 + 8 * (v13 >> 6) + 64) |= 1 << v13;
          *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v13) = v17;
          *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v13) = v23;
          v34 = *(_QWORD *)(a3 + 16);
          v35 = __OFADD__(v34, 1);
          v36 = v34 + 1;
          if (v35)
            goto LABEL_52;
          *(_QWORD *)(a3 + 16) = v36;
          swift_retain();
        }
        swift_release_n();
        swift_bridgeObjectRelease();
LABEL_22:
        if (v14 == ++v15)
          goto LABEL_55;
      }
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      swift_bridgeObjectRetain();
      v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13 != v37)
      {
        swift_bridgeObjectRetain();
        v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14)
          continue;
      }
      break;
    }
  }
LABEL_55:
  __swift_destroy_boxed_opaque_existential_1(v39);
  result = swift_bridgeObjectRelease();
  v40[7] = a3;
  return result;
}

uint64_t static __REAssetBundle.__init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t result;
  int64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[6];

  v60 = a2;
  v61 = a4;
  v62 = a1;
  v5 = &demangling cache variable for type metadata for UUID?;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  v65 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v73 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor)?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (int64_t *)((char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v16 = (int64_t *)((char *)&v59 - v15);
  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v18 = *(_QWORD *)(a3 + 64);
  v63 = a3 + 64;
  v19 = 1 << *(_BYTE *)(a3 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v72 = v20 & v18;
  v64 = (unint64_t)(v19 + 63) >> 6;
  v59 = v64 - 1;
  v66 = a3;
  swift_bridgeObjectRetain();
  v70 = v8;
  v71 = 0;
  v68 = v13;
  v69 = v9;
  v67 = v16;
  while (1)
  {
    if (v72)
    {
      v22 = __clz(__rbit64(v72));
      v72 &= v72 - 1;
      v23 = v22 | (v71 << 6);
LABEL_8:
      v24 = *(_QWORD *)(v66 + 56);
      *v13 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 8 * v23);
      v25 = v24 + *(_QWORD *)(v65 + 72) * v23;
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor));
      outlined init with copy of __REAssetBundle.AssetMap.SceneDescriptor(v25, (uint64_t)v13 + *(int *)(v26 + 48));
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v13, 0, 1, v26);
      swift_retain();
      goto LABEL_27;
    }
    v27 = v71 + 1;
    if (__OFADD__(v71, 1))
      goto LABEL_61;
    if (v27 < v64)
    {
      v28 = *(_QWORD *)(v63 + 8 * v27);
      if (v28)
        goto LABEL_12;
      v29 = v71 + 2;
      ++v71;
      if (v27 + 1 < v64)
      {
        v28 = *(_QWORD *)(v63 + 8 * v29);
        if (v28)
          goto LABEL_15;
        v71 = v27 + 1;
        if (v27 + 2 < v64)
        {
          v28 = *(_QWORD *)(v63 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_12;
          }
          v29 = v27 + 3;
          v71 = v27 + 2;
          if (v27 + 3 < v64)
            break;
        }
      }
    }
LABEL_26:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 1, 1, v30);
    v72 = 0;
LABEL_27:
    outlined init with take of (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor)?((uint64_t)v13, (uint64_t)v16);
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor));
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v16, 1, v31) == 1)
    {
      swift_release();
      outlined init with copy of __REAssetService(v60, (uint64_t)v75);
      v57 = swift_bridgeObjectRetain();
      return __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v57, (uint64_t)v75, v17, 0, v61);
    }
    v74 = *v16;
    v32 = (uint64_t)v16 + *(int *)(v31 + 48);
    v33 = v73;
    outlined init with take of __REAssetBundle.AssetMap.SceneDescriptor(v32, v73);
    outlined init with copy of (Int, URL)(v33 + *(int *)(v9 + 24), (uint64_t)v8, v5);
    v34 = type metadata accessor for UUID();
    v35 = v5;
    v36 = *(_QWORD *)(v34 - 8);
    LODWORD(v33) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v8, 1, v34);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((_DWORD)v33 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, v35);
    }
    else
    {
      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v34);
    }
    v5 = v35;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v37 = RESceneDescriptorCreateFromParams();
    swift_release();
    swift_release();
    swift_release();
    v9 = v69;
    v8 = v70;
    v38 = *(_QWORD *)(v73 + *(int *)(v69 + 28));
    if (v38)
    {
      v39 = *(_QWORD *)(v38 + 16);
      if (v39)
      {
        swift_bridgeObjectRetain();
        v40 = v38 + 48;
        while (1)
        {
          v41 = *(_QWORD *)(v40 - 16);
          if (v41 < (uint64_t)0xFFFFFFFF80000000)
            break;
          if (v41 > 0x7FFFFFFF)
            goto LABEL_57;
          v40 += 24;
          String.utf8CString.getter();
          RESceneDescriptorAddSceneCompatibilityVariant();
          swift_release();
          if (!--v39)
          {
            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
    }
LABEL_38:
    type metadata accessor for RESceneDescriptor();
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = v37;
    if ((v17 & 0xC000000000000001) != 0)
    {
      if (v17 >= 0)
        v17 &= 0xFFFFFFFFFFFFFF8uLL;
      swift_retain();
      v43 = __CocoaSet.count.getter();
      if (__OFADD__(v43, 1))
        goto LABEL_59;
      v17 = specialized _NativeDictionary.init(_:capacity:)(v17, v43 + 1);
    }
    else
    {
      swift_retain();
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v75[0] = v17;
    v46 = specialized __RawDictionaryStorage.find<A>(_:)();
    v47 = *(_QWORD *)(v17 + 16);
    v48 = (v45 & 1) == 0;
    v49 = v47 + v48;
    if (__OFADD__(v47, v48))
      goto LABEL_58;
    v50 = v45;
    if (*(_QWORD *)(v17 + 24) >= v49)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v17 = v75[0];
        if ((v45 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v17 = v75[0];
        if ((v50 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
      v51 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v50 & 1) != (v52 & 1))
        goto LABEL_63;
      v46 = v51;
      v17 = v75[0];
      if ((v50 & 1) != 0)
      {
LABEL_4:
        v21 = *(_QWORD *)(v17 + 56);
        swift_release();
        *(_QWORD *)(v21 + 8 * v46) = v42;
        goto LABEL_5;
      }
    }
    *(_QWORD *)(v17 + 8 * (v46 >> 6) + 64) |= 1 << v46;
    v53 = 8 * v46;
    *(_QWORD *)(*(_QWORD *)(v17 + 48) + v53) = v74;
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + v53) = v42;
    v54 = *(_QWORD *)(v17 + 16);
    v55 = __OFADD__(v54, 1);
    v56 = v54 + 1;
    if (v55)
      goto LABEL_60;
    *(_QWORD *)(v17 + 16) = v56;
    swift_retain();
LABEL_5:
    swift_release_n();
    swift_bridgeObjectRelease();
    outlined destroy of __REAssetBundle.AssetMap.SceneDescriptor(v73);
    v16 = v67;
    v13 = v68;
  }
  v28 = *(_QWORD *)(v63 + 8 * v29);
  if (v28)
  {
LABEL_15:
    v27 = v29;
LABEL_12:
    v71 = v27;
    v72 = (v28 - 1) & v28;
    v23 = __clz(__rbit64(v28)) + (v27 << 6);
    goto LABEL_8;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v64)
    {
      v71 = v59;
      goto LABEL_26;
    }
    v28 = *(_QWORD *)(v63 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_12;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  type metadata accessor for __REAsset();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t __REAssetBundle.init(url:assetService:with:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ServiceLocatorForLegacyAPIWorkaround;
  uint64_t v11;
  _BYTE v13[8];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[25];
  __int16 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *a3;
  memset(v18, 0, sizeof(v18));
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v19 = 1;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v13[0] = v7;
  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, a2, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)v13, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v13);
}

void static __REAssetBundle.__init(url:assetService:_:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t ServiceLocatorForLegacyAPIWorkaround;

  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, a2, ServiceLocatorForLegacyAPIWorkaround, a3, a4);
}

uint64_t static __REAssetBundle.__init(url:serviceLocator:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD v10[5];

  v8 = a2 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v10);
  swift_beginAccess();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, v10, *(_QWORD *)(a2 + 16), a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t static __REAssetBundle.__init(bundle:entryName:assetService:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t ServiceLocatorForLegacyAPIWorkaround;

  v13 = a4[3];
  v12 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v13);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v13, v12);
  ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  return static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)(a1, a2, a3, a4, ServiceLocatorForLegacyAPIWorkaround, a5, a6);
}

uint64_t static __REAssetBundle.__init(bundle:entryName:serviceLocator:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD v14[5];

  v12 = a4 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)v14);
  swift_beginAccess();
  static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)(a1, a2, a3, v14, *(_QWORD *)(a4 + 16), a5, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t __REAssetBundle.init(url:assetService:downsamplingStrategy:with:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t ServiceLocatorForLegacyAPIWorkaround;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  _QWORD v25[2];
  _OWORD v26[4];
  unsigned __int8 v27[8];
  __int128 v28;
  _BYTE v29[73];
  __int16 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v25[0] = a5;
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (_QWORD *)((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *a4;
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v35);
  v13 = v36;
  v14 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  v27[0] = v12;
  __REAssetService.dispatchPredicate(for:)(v27, v13, v14, v11);
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v13 & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    memset(v29, 0, sizeof(v29));
    v28 = 0u;
    v30 = 1;
    v31 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v27[0] = v12;
    outlined assign with copy of __DownsamplingStrategy?(a3, (uint64_t)&v29[8]);
    v16 = a2[3];
    v17 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
    v19 = v38;
    v20 = v25[1];
    static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(v38, a2, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)v27, (uint64_t *)v26);
    outlined destroy of BodyTrackingComponent?(a3, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    v21 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
    if (!v20)
    {
      v22 = v26[1];
      v23 = (_OWORD *)v25[0];
      *(_OWORD *)v25[0] = v26[0];
      v23[1] = v22;
      v24 = v26[3];
      v23[2] = v26[2];
      v23[3] = v24;
    }
    return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __REAssetService.dispatchPredicate(for:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  id v6;
  uint64_t v7;
  unsigned int *v8;

  v5 = *a1;
  __REAssetService.asManager.getter(a2, a3);
  v6 = (id)REAssetManagerGetEngineQueue();
  swift_release();
  *a4 = v6;
  v7 = type metadata accessor for DispatchPredicate();
  v8 = (unsigned int *)MEMORY[0x24BEE5610];
  if (v5 != 2)
    v8 = (unsigned int *)MEMORY[0x24BEE5608];
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(a4, *v8, v7);
}

uint64_t static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];
  __int128 v36[3];

  v28 = a4;
  v29 = a5;
  v25 = a2;
  v26 = a1;
  v30 = type metadata accessor for DispatchWorkItemFlags();
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = type metadata accessor for DispatchQoS.QoSClass();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BEE5490], v13);
  v27 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  outlined init with copy of __REAssetService(v25, (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v10);
  v17 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v18 = swift_allocObject();
  outlined init with take of BindableDataInternal(v36, v18 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v19 = (_QWORD *)(v18 + ((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  v20 = v29;
  *v19 = v28;
  v19[1] = v20;
  aBlock[4] = partial apply for closure #1 in static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_22;
  v21 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v34 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v22 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v23 = (void *)v27;
  MEMORY[0x2207693A4](0, v9, v6, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  return swift_release();
}

uint64_t closure #1 in static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:)(_QWORD *a1, uint64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t ServiceLocatorForLegacyAPIWorkaround;
  _BYTE v10[80];
  uint64_t v11[8];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[25];
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v18 = 1;
  v19 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  LOBYTE(v12) = 1;
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a2, a1, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)&v12, v11);
  outlined init with copy of __REAssetBundle((uint64_t)v11, (uint64_t)v10);
  v10[64] = 0;
  a3(v10);
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Result<__REAssetBundle, Error>);
  outlined destroy of __REAssetBundle((uint64_t)v11);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v12);
}

uint64_t static __REAssetBundle.load(url:serviceLocator:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v30 = a3;
  v31 = a4;
  v29 = a2;
  v27 = a1;
  v32 = type metadata accessor for DispatchWorkItemFlags();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BEE5490], v13);
  v28 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v27, v9);
  v17 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v19 + v17, v12, v9);
  v20 = v30;
  *(_QWORD *)(v19 + v18) = v29;
  v21 = (_QWORD *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  v22 = v31;
  *v21 = v20;
  v21[1] = v22;
  aBlock[4] = partial apply for closure #1 in static __REAssetBundle.load(url:serviceLocator:completionHandler:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6_2;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v36 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v24 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v25 = (void *)v28;
  MEMORY[0x2207693A4](0, v8, v5, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
  return swift_release();
}

uint64_t closure #1 in static __REAssetBundle.load(url:serviceLocator:completionHandler:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v12[128];
  uint64_t v13[8];
  char v14[8];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[25];
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  memset(v19, 0, sizeof(v19));
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v20 = 1;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v14[0] = 1;
  (*(void (**)(_BYTE *, uint64_t))(v9 + 16))(v8, a1);
  outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)v14, (uint64_t)v12);
  swift_retain();
  __REAssetBundle.init(url:serviceLocator:_:)((uint64_t)v8, a2, (uint64_t)v12, v13);
  outlined init with copy of __REAssetBundle((uint64_t)v13, (uint64_t)v12);
  v12[64] = 0;
  a3(v12);
  outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for Result<__REAssetBundle, Error>);
  outlined destroy of __REAssetBundle((uint64_t)v13);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v14);
}

uint64_t static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];
  __int128 v35[3];

  v28 = a5;
  v29 = a6;
  v26 = a4;
  v27 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v32 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v30 = *(_QWORD *)(v11 - 8);
  v31 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BEE5490], v14);
  v18 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  outlined init with copy of __REAssetService(v26, (uint64_t)v35);
  v19 = (_QWORD *)swift_allocObject();
  outlined init with take of BindableDataInternal(v35, (uint64_t)(v19 + 2));
  v20 = v27;
  v19[7] = a1;
  v19[8] = v20;
  v21 = v28;
  v22 = v29;
  v19[9] = a3;
  v19[10] = v21;
  v19[11] = v22;
  aBlock[4] = partial apply for closure #1 in static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_12_1;
  v23 = _Block_copy(aBlock);
  v24 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v33 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v13, v10, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
  return swift_release();
}

uint64_t closure #1 in static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:)(_QWORD *a1, void *a2, uint64_t a3, void *a4, void (*a5)(_BYTE *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t ServiceLocatorForLegacyAPIWorkaround;
  _BYTE v14[80];
  uint64_t v15[8];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[25];
  __int16 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v21, 0, sizeof(v21));
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v22 = 1;
  v23 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  LOBYTE(v16) = 1;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)(a2, a3, a4, a1, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)&v16, v15);
  outlined init with copy of __REAssetBundle((uint64_t)v15, (uint64_t)v14);
  v14[64] = 0;
  a5(v14);
  outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for Result<__REAssetBundle, Error>);
  outlined destroy of __REAssetBundle((uint64_t)v15);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v16);
}

uint64_t static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v28 = a5;
  v29 = a6;
  v26 = a2;
  v27 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v32 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v30 = *(_QWORD *)(v11 - 8);
  v31 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BEE5490], v14);
  v18 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v19 = (_QWORD *)swift_allocObject();
  v20 = v26;
  v21 = v27;
  v19[2] = a1;
  v19[3] = v20;
  v19[4] = a3;
  v19[5] = v21;
  v22 = v29;
  v19[6] = v28;
  v19[7] = v22;
  aBlock[4] = partial apply for closure #1 in static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_18_2;
  v23 = _Block_copy(aBlock);
  v24 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v33 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v13, v10, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
  return swift_release();
}

uint64_t closure #1 in static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(_BYTE *))
{
  id v10;
  _BYTE v12[128];
  uint64_t v13[8];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[25];
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  memset(v19, 0, sizeof(v19));
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v20 = 1;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  LOBYTE(v14) = 1;
  outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)&v14, (uint64_t)v12);
  v10 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  __REAssetBundle.init(bundle:entryName:serviceLocator:_:)(v10, a2, a3, a4, (uint64_t)v12, v13);
  outlined init with copy of __REAssetBundle((uint64_t)v13, (uint64_t)v12);
  v12[64] = 0;
  a5(v12);
  outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for Result<__REAssetBundle, Error>);
  outlined destroy of __REAssetBundle((uint64_t)v13);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v14);
}

unint64_t __REAssetBundle.sceneDescriptors.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t SceneCompatibilityVariantCount;
  uint64_t v29;
  uint64_t v30;
  int Version;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58[16];
  uint64_t v59;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v1);
  v47 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  v52 = *(_QWORD *)(v3 - 8);
  v53 = (char *)v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (_QWORD *)((char *)v45 - v7);
  v9 = *(_QWORD *)(v0 + 8);
  v59 = v0;
  swift_bridgeObjectRetain();
  v10 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in __REAssetBundle.getSceneDescriptors(), (uint64_t)v58, v9);
  swift_bridgeObjectRelease();
  if (v10 >> 62)
    goto LABEL_38;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v11)
  {
    v12 = 0;
    v51 = v10 & 0xC000000000000001;
    v45[1] = v10 + 32;
    v46 = v10 & 0xFFFFFFFFFFFFFF8;
    v13 = MEMORY[0x24BEE4AF8];
    v49 = v5;
    v50 = v10;
    v48 = v11;
    while (v51)
    {
      v14 = MEMORY[0x220769770](v12, v10);
      v15 = __OFADD__(v12, 1);
      v16 = v12 + 1;
      if (v15)
        goto LABEL_35;
LABEL_10:
      v55 = v13;
      v56 = v16;
      v54 = v14;
      RERealityFileAssetDescriptorGetFilename();
      v17 = String.init(cString:)();
      v19 = v18;
      v5 = v53;
      v20 = (uint64_t)v8 + *((int *)v53 + 6);
      v21 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
      *v8 = v17;
      v8[1] = v19;
      v8[2] = 0;
      v8[3] = 0xE000000000000000;
      v22 = *((int *)v5 + 7);
      *(uint64_t *)((char *)v8 + v22) = 0;
      if (RESceneDescriptorGetSceneName())
      {
        v8[2] = String.init(cString:)();
        v8[3] = v23;
      }
      RESceneDescriptorGetSceneIdentifier();
      v24 = String.init(cString:)();
      v26 = HIBYTE(v25) & 0xF;
      if ((v25 & 0x2000000000000000) == 0)
        v26 = v24 & 0xFFFFFFFFFFFFLL;
      if (v26)
      {
        String.init(cString:)(*(Swift::String *)&v24);
        v27 = (uint64_t)v47;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        outlined assign with take of Material?(v27, v20, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      SceneCompatibilityVariantCount = RESceneDescriptorGetSceneCompatibilityVariantCount();
      if (SceneCompatibilityVariantCount < 0)
        goto LABEL_36;
      v29 = SceneCompatibilityVariantCount;
      if (SceneCompatibilityVariantCount)
      {
        v30 = 0;
        v57 = SceneCompatibilityVariantCount;
        do
        {
          if (RESceneDescriptorGetSceneCompatibilityVariantAtIndex())
          {
            Version = RESceneCompatibilityVariantGetVersion();
            RESceneCompatibilityVariantGetFileName();
            v32 = String.init(cString:)();
            v34 = v33;
            v35 = *(_QWORD **)((char *)v8 + v22);
            if (v35)
            {
              v5 = (char *)v32;
              v36 = v22;
              v37 = v8;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
              v39 = v35[2];
              v38 = v35[3];
              if (v39 >= v38 >> 1)
                v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v35);
              v35[2] = v39 + 1;
              v40 = &v35[3 * v39];
              v40[4] = Version;
              v40[5] = v5;
              v40[6] = v34;
              v8 = v37;
              v22 = v36;
              *(uint64_t *)((char *)v8 + v36) = (uint64_t)v35;
              v29 = v57;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          ++v30;
        }
        while (v29 != v30);
      }
      v41 = (uint64_t)v49;
      outlined init with copy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v8, (uint64_t)v49);
      v13 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
      v10 = v50;
      v43 = *(_QWORD *)(v13 + 16);
      v42 = *(_QWORD *)(v13 + 24);
      if (v43 >= v42 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v13);
      *(_QWORD *)(v13 + 16) = v43 + 1;
      outlined init with take of __REAssetBundle.AssetMap.SceneDescriptor(v41, v13+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v43);
      swift_release();
      outlined destroy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v8);
      v12 = v56;
      if (v56 == v48)
        goto LABEL_40;
    }
    if (v12 >= *(_QWORD *)(v46 + 16))
      goto LABEL_37;
    v14 = swift_retain();
    v15 = __OFADD__(v12, 1);
    v16 = v12 + 1;
    if (!v15)
      goto LABEL_10;
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v13 = MEMORY[0x24BEE4AF8];
LABEL_40:
  swift_bridgeObjectRelease();
  return v13;
}

Swift::String __swiftcall String.init(cString:)(Swift::String cString)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;
  uint64_t v7;
  void *v8;

  if (((uint64_t)cString._object & 0x1000000000000000) == 0
    && (((uint64_t)cString._object & 0x2000000000000000) != 0
     || (cString._countAndFlagsBits & 0x1000000000000000) != 0))
  {
    v1 = String.init(cString:)();
    v3 = v2;
    swift_bridgeObjectRelease();
  }
  else
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    v1 = v7;
    v3 = v8;
  }
  v4 = v1;
  v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t closure #1 in __REAssetBundle.getSceneDescriptors()@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = swift_retain();
  v5 = specialized Dictionary.subscript.getter(v4, v3);
  result = swift_release();
  if (!v5)
  {
    static os_log_type_t.debug.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v7 = (void *)static OS_os_log.default.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_21BE411F0;
    type metadata accessor for __REAsset();
    _print_unlocked<A, B>(_:_:)();
    *(_QWORD *)(v8 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0xE000000000000000;
    os_log(_:dso:log:_:_:)();

    result = swift_bridgeObjectRelease();
  }
  *a2 = v5;
  return result;
}

void static __REAssetBundle.temporaryURL.getter(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  id v26;
  NSURL *v27;
  void *v28;
  void *v29;
  unsigned __int8 v30;
  id v31;
  Swift::String v32;
  id v33;
  void *v34;
  _QWORD v35[2];
  id v36[2];

  v36[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)objc_opt_self();
  v10 = objc_msgSend(v9, sel_defaultManager);
  v36[0] = 0;
  v11 = objc_msgSend(v10, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 1, v36);

  v12 = v36[0];
  if (v11)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
    {
      v14(a1, v8, v2);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = v36[0];
    v16 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  v17 = objc_msgSend(v9, sel_defaultManager);
  v18 = objc_msgSend(v17, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
LABEL_6:
  v19 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v20 = objc_msgSend(v19, sel_bundleIdentifier);

  if (v20)
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    v24._countAndFlagsBits = v21;
    v24._object = v23;
    URL.appendPathComponent(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x800000021BE8C1A0;
    v25._countAndFlagsBits = 0xD00000000000001BLL;
    URL.appendPathComponent(_:)(v25);
    v26 = objc_msgSend(v9, sel_defaultManager);
    URL._bridgeToObjectiveC()(v27);
    v29 = v28;
    v36[0] = 0;
    v30 = objc_msgSend(v26, sel_removeItemAtURL_error_, v28, v36);

    if ((v30 & 1) != 0)
    {
      v31 = v36[0];
    }
    else
    {
      v35[0] = v36[0];
      v33 = v36[0];
      v34 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    v32._object = (void *)0x800000021BE8C1A0;
    v32._countAndFlagsBits = 0xD00000000000001BLL;
    URL.appendPathComponent(_:)(v32);
  }
}

uint64_t __REAssetBundle.write(to:)(uint64_t a1)
{
  __int128 v2;
  char v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v19 = 0;
  v18 = 1;
  v17 = 1;
  LOBYTE(v2) = 2;
  *((_QWORD *)&v2 + 1) = 1;
  v3 = 0;
  v4 = 0;
  v5 = 16777217;
  v6 = xmmword_21BE66FF0;
  v7 = 0;
  v9 = 0;
  v8 = 0;
  v10 = 0;
  v11 = 1;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 1;
  return __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, &v2);
}

uint64_t __REAssetBundle.__write(to:fromEngineQueue:)(uint64_t a1, char a2)
{
  char v2;
  __int128 v4;
  char v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v21 = 0;
  v20 = 1;
  v19 = 1;
  if ((a2 & 1) != 0)
    v2 = 2;
  else
    v2 = 0;
  LOBYTE(v4) = v2;
  *((_QWORD *)&v4 + 1) = 1;
  v5 = 0;
  v6 = 0;
  v7 = 16777217;
  v8 = xmmword_21BE66FF0;
  v9 = 0;
  v11 = 0;
  v10 = 0;
  v12 = 0;
  v13 = 1;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 1;
  return __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, &v4);
}

uint64_t __REAssetBundle.__write(to:with:)(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v7[8];
  _OWORD v8[2];

  v2 = a2[7];
  v7[6] = a2[6];
  v7[7] = v2;
  v8[0] = a2[8];
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 137);
  v3 = a2[3];
  v7[2] = a2[2];
  v7[3] = v3;
  v4 = a2[5];
  v7[4] = a2[4];
  v7[5] = v4;
  v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  return __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, v7);
}

uint64_t __REAssetBundle.write(to:with:)(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v7[8];
  _OWORD v8[2];

  v2 = a2[7];
  v7[6] = a2[6];
  v7[7] = v2;
  v8[0] = a2[8];
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 137);
  v3 = a2[3];
  v7[2] = a2[2];
  v7[3] = v3;
  v4 = a2[5];
  v7[4] = a2[4];
  v7[5] = v4;
  v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  return __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, v7);
}

uint64_t __REAssetBundle.__write(to:with:compressionLevel:progress:)(uint64_t a1, _BYTE *a2, uint64_t a3, char a4, void *a5)
{
  id v6;
  __int128 v8[8];
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  _BYTE v12[24];
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[73];

  LOBYTE(v10) = *a2;
  *((_QWORD *)&v10 + 1) = a3;
  LOBYTE(v11) = a4 & 1;
  *((_QWORD *)&v11 + 1) = a5;
  *(_DWORD *)v12 = 16777217;
  *(_OWORD *)&v12[8] = xmmword_21BE66FF0;
  v13 = 0;
  BYTE4(v14) = 0;
  LODWORD(v14) = 0;
  v15 = 0;
  *(_WORD *)v16 = 1;
  memset(&v16[8], 0, 64);
  v16[72] = 1;
  v8[6] = *(_OWORD *)&v16[16];
  v8[7] = *(_OWORD *)&v16[32];
  v9[0] = *(_OWORD *)&v16[48];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)&v16[57];
  v8[2] = *(_OWORD *)v12;
  v8[3] = 5uLL;
  v8[4] = v14;
  v8[5] = *(_OWORD *)v16;
  v8[0] = v10;
  v8[1] = v11;
  v6 = a5;
  __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, v8);
  return outlined release of __REAssetBundle.ExportOptions((uint64_t)&v10);
}

uint64_t __REAssetBundle.__write(to:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];
  _OWORD v36[4];

  v28 = a2;
  v29 = a3;
  v26 = a1;
  v30 = type metadata accessor for DispatchWorkItemFlags();
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = type metadata accessor for DispatchQoS.QoSClass();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BEE5490], v11);
  v27 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  outlined init with copy of __REAssetBundle(v25[1], (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  v17 = v36[1];
  *((_OWORD *)v16 + 1) = v36[0];
  *((_OWORD *)v16 + 2) = v17;
  v18 = v36[3];
  *((_OWORD *)v16 + 3) = v36[2];
  *((_OWORD *)v16 + 4) = v18;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v19 = &v16[(v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  v20 = v29;
  *(_QWORD *)v19 = v28;
  *((_QWORD *)v19 + 1) = v20;
  aBlock[4] = partial apply for closure #1 in __REAssetBundle.__write(to:completionHandler:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_24_0;
  v21 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v34 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v22 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v23 = (void *)v27;
  MEMORY[0x2207693A4](0, v7, v4, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
  return swift_release();
}

uint64_t closure #1 in __REAssetBundle.__write(to:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  __int128 v5;
  char v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v22 = 0;
  v21 = 1;
  v20 = 1;
  LOBYTE(v5) = 1;
  *((_QWORD *)&v5 + 1) = 1;
  v6 = 0;
  v7 = 0;
  v8 = 16777217;
  v9 = xmmword_21BE66FF0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  v13 = 0;
  v14 = 1;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 1;
  __REAssetBundle.writeWithCPlusPlus(to:with:)(a2, &v5);
  return a3(0);
}

void __RealityFileError.debugDescription.getter()
{
  __asm { BR              X10 }
}

unint64_t sub_21BC2CB08()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0xD000000000000013;
  v1._object = (void *)0x800000021BE8C300;
  String.append(_:)(v1);
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  if (one-time initialization token for maximumReadingFormatVersion != -1)
    swift_once();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 10542;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 0xD00000000000001DLL;
  v4._object = (void *)0x800000021BE8C320;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t LocalizedRealityFileError.errorDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(84);
  v0._object = (void *)0x800000021BE8C550;
  v0._countAndFlagsBits = 0xD000000000000051;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance LocalizedRealityFileError()
{
  return LocalizedRealityFileError.errorDescription.getter();
}

unint64_t SerializationError.description.getter(uint64_t a1, void *a2, char a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v11;

  if (!a3)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v11 = 0xD000000000000011;
    v8._countAndFlagsBits = a1;
    v8._object = a2;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 0xD000000000000014;
    v9._object = (void *)0x800000021BE8C490;
    String.append(_:)(v9);
    return v11;
  }
  if (a3 == 1)
  {
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = a1;
    v6._object = a2;
    String.append(_:)(v6);
    v11 = 0xD000000000000068;
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 8250;
    v7._object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  return 0xD00000000000002FLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SerializationError()
{
  uint64_t v0;

  return SerializationError.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t __Archiving.Operation.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x22077265C](*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

void __Archiving.Operation.archive(to:)()
{
  void *v0;
  void *v1;
  char v2;
  _BYTE *v3;

  URL._bridgeToObjectiveC()((NSURL *)*MEMORY[0x24BDAC8D0]);
  v1 = v0;
  v2 = _REArchiveOperationArchiveToURL();

  if ((v2 & 1) == 0)
  {
    lazy protocol witness table accessor for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError();
    swift_allocError();
    *v3 = 1;
    swift_willThrow();
  }
}

void __Archiving.Operation.unarchive(to:withReport:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSURL *v3;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD v14[2];

  v3 = (NSURL *)*MEMORY[0x24BDAC8D0];
  v14[1] = *MEMORY[0x24BDAC8D0];
  v14[0] = 0;
  if (a2)
  {
    v5 = *(_QWORD *)(v2 + 16);
    URL._bridgeToObjectiveC()(v3);
    v7 = v6;
    v8 = MEMORY[0x2207726A4](v5, v6, a2, v14);
  }
  else
  {
    URL._bridgeToObjectiveC()(v3);
    v7 = v9;
    v8 = _REArchiveOperationUnarchiveToURL();
  }
  v10 = v8;

  if ((v10 & 1) == 0)
  {
    v11 = v14[0];
    if (v14[0])
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      swift_allocError();
      *v12 = v11;
    }
    else
    {
      lazy protocol witness table accessor for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError();
      swift_allocError();
      *v13 = 0;
    }
    swift_willThrow();
  }
}

uint64_t static __Archiving.archivePackage(source:destination:envelopeVersion:compressionLevel:progress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t inited;
  NSURL *v16;
  void *v17;
  void *v18;
  id *v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD v23[6];

  v23[0] = a2;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_BYTE *)(a3 + 1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v11);
  type metadata accessor for __Archiving.Operation();
  inited = swift_initStackObject();
  URL._bridgeToObjectiveC()(v16);
  v18 = v17;
  v19 = (id *)_REArchiveOperationCreateWithURL();

  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  *(_QWORD *)(inited + 16) = v19;
  _REArchiveOperationSetArchiveCompressionLevel();
  _REArchiveOperationSetStreamCompression();
  if ((v14 & 1) != 0)
  {
    REArchiveGetDefaultEnvelopeVersion();
    if ((_REArchiveOperationSetEnvelopeVersion() & 1) == 0)
    {
LABEL_3:
      lazy protocol witness table accessor for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError();
      swift_allocError();
      *v20 = 1;
      swift_willThrow();
      return swift_release();
    }
  }
  else if ((_REArchiveOperationSetEnvelopeVersion() & 1) == 0)
  {
    goto LABEL_3;
  }
  if (a6)
    objc_storeStrong(v19, a6);
  v21 = v23[5];
  __Archiving.Operation.archive(to:)();
  if (v21)
    return swift_release();
  swift_setDeallocating();
  return MEMORY[0x22077265C](v19);
}

uint64_t static __Archiving.unarchivePackage(source:destination:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t inited;
  NSURL *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  type metadata accessor for __Archiving.Operation();
  inited = swift_initStackObject();
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  v13 = _REArchiveOperationCreateWithURL();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *(_QWORD *)(inited + 16) = v13;
  _REArchiveOperationSetStreamCompression();
  __Archiving.Operation.unarchive(to:withReport:)(a2, 0);
  swift_setDeallocating();
  return MEMORY[0x22077265C](v13);
}

uint64_t static __Archiving.unarchivePackage(source:destination:withReport:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t inited;
  NSURL *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v8);
  type metadata accessor for __Archiving.Operation();
  inited = swift_initStackObject();
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v15 = _REArchiveOperationCreateWithURL();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  *(_QWORD *)(inited + 16) = v15;
  _REArchiveOperationSetStreamCompression();
  __Archiving.Operation.unarchive(to:withReport:)(a2, a3);
  swift_setDeallocating();
  return MEMORY[0x22077265C](v15);
}

BOOL static __Archiving.ArchivingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __Archiving.ArchivingError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int __Archiving.ArchivingError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t __REAssetManager.waitForLoadRequest(_:with:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t RequestCopyError;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *a2;
  if (v7 == 2)
  {
    if (!REAssetLoadRequestGetState())
      REAssetLoadRequestWaitForCompletion();
  }
  else if ((v7 & 1) != 0)
  {
    *v6 = (id)REAssetManagerGetEngineQueue();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5608], v3);
    v10 = _dispatchPreconditionTest(_:)();
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
    if ((v10 & 1) == 0)
    {
      __break(1u);
      return result;
    }
    if (!REAssetLoadRequestGetState())
      REAssetLoadRequestWaitForCompletionFromOtherQueue();
  }
  else if (REAssetLoadRequestGetState() != 1)
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_QWORD *)v8 = 0xD00000000000001ALL;
    *(_QWORD *)(v8 + 8) = 0x800000021BE8C510;
    v9 = 1;
LABEL_14:
    *(_BYTE *)(v8 + 16) = v9;
    return swift_willThrow();
  }
  result = REAssetLoadRequestGetState();
  if ((_DWORD)result == 1)
    return result;
  RequestCopyError = REAssetLoadRequestCopyError();
  if (!RequestCopyError)
  {
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_QWORD *)v8 = 0xD00000000000001BLL;
    *(_QWORD *)(v8 + 8) = 0x800000021BE8C530;
    v9 = 3;
    goto LABEL_14;
  }
  v13 = RequestCopyError;
  type metadata accessor for CFErrorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
  swift_allocError();
  *v14 = v13;
  return swift_willThrow();
}

double __REAssetService.asManager.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = (*(uint64_t (**)(void))(a2 + 32))();
  type metadata accessor for __REAssetManager();
  v3 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_BYTE *)(v3 + 80) = 2;
  *(_WORD *)(v3 + 96) = 514;
  *(_QWORD *)(v3 + 88) = v2;
  return result;
}

void __REAssetService.performOnEngineQueue<A>(with:_:)(unsigned __int8 *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  char *v24;
  int v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  id v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  id v38;
  uint64_t v39;
  char v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;

  v46 = a2;
  v8 = v7;
  v42 = a5;
  v44 = a7;
  v45 = a3;
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v42 - v22;
  v25 = *a1;
  if (v25 == 2)
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
    v43 = v21;
    v26((char *)&v42 - v22, v8, a4, v23);
    __REAssetService.asManager.getter(a4, a6);
    v27 = (id)REAssetManagerGetEngineQueue();
    swift_release();
    *v15 = v27;
    v28 = v43;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE5610], v43);
    v29 = _dispatchPreconditionTest(_:)();
    (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v28);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v24, a4);
    if ((v29 & 1) != 0)
    {
      v46(v30);
      return;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if ((v25 & 1) == 0)
  {
    v31 = objc_msgSend((id)objc_opt_self(), sel_callStackSymbols, v42);
    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v47 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
    v33 = BidirectionalCollection<>.joined(separator:)();
    v35 = v34;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_QWORD *)v36 = v33;
    *(_QWORD *)(v36 + 8) = v35;
    *(_BYTE *)(v36 + 16) = 1;
    swift_willThrow();
    return;
  }
  v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v43 = v21;
  v37(v19, v8, a4, v23);
  __REAssetService.asManager.getter(a4, a6);
  v38 = (id)REAssetManagerGetEngineQueue();
  swift_release();
  *v15 = v38;
  v39 = v43;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE5608], v43);
  v40 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v39);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a4);
  if ((v40 & 1) == 0)
    goto LABEL_10;
  __REAssetService.asManager.getter(a4, a6);
  v41 = (id)REAssetManagerGetEngineQueue();
  swift_release();
  OS_dispatch_queue.sync<A>(execute:)();

}

uint64_t implicit closure #1 in String.init(cString:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = String.init(cString:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaSet.count.getter();
  if (!__OFADD__(result, 1))
  {
    *v3 = specialized _NativeDictionary.init(_:capacity:)(v7, result + 1);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v10;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Int specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
    v2 = static _DictionaryStorage.convert(_:capacity:)();
    v17 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      type metadata accessor for __REAsset();
      do
      {
        swift_dynamicCast();
        type metadata accessor for RESceneDescriptor();
        swift_dynamicCast();
        v2 = v17;
        v10 = *(_QWORD *)(v17 + 16);
        if (*(_QWORD *)(v17 + 24) <= v10)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v10 + 1, 1);
          v2 = v17;
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(_QWORD *)(v16 + 16));
        result = Hasher._finalize()();
        v4 = v2 + 64;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 64 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 64 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v11 = 0;
          v12 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v12 && (v11 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v13 = v7 == v12;
            if (v7 == v12)
              v7 = 0;
            v11 |= v13;
            v14 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v14 == -1);
          v8 = __clz(__rbit64(~v14)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        v9 = 8 * v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v9) = v16;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v9) = v15;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaDictionary.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B00];
  }
  return v2;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x220769770](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return destroy for __RealityCoordinateSpaceContext;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x220769770](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return destroy for __ImageBasedLightComponent;
  }
  __break(1u);
  return result;
}

uint64_t specialized static __REAssetBundle.AssetMap.SceneDescriptor.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _BYTE *v27;
  void (*v28)(_BYTE *, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _BYTE v32[4];
  int v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v32[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v32[-v15];
  MEMORY[0x24BDAC7A8](v17);
  v19 = &v32[-v18];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v20 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3]
      || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v22 & 1) != 0))
    {
      v36 = v13;
      v34 = v7;
      v23 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
      outlined init with copy of (Int, URL)((uint64_t)a1 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      v35 = v23;
      outlined init with copy of (Int, URL)((uint64_t)a2 + *(int *)(v23 + 24), (uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
      outlined init with copy of (Int, URL)((uint64_t)v19, (uint64_t)v10, &demangling cache variable for type metadata for UUID?);
      outlined init with copy of (Int, URL)((uint64_t)v16, v24, &demangling cache variable for type metadata for UUID?);
      v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v25((uint64_t)v10, 1, v4) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
        outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
        if (v25(v24, 1, v4) == 1)
        {
          outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
          goto LABEL_16;
        }
      }
      else
      {
        v26 = (uint64_t)v36;
        outlined init with copy of (Int, URL)((uint64_t)v10, (uint64_t)v36, &demangling cache variable for type metadata for UUID?);
        if (v25(v24, 1, v4) != 1)
        {
          v27 = v34;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v34, v24, v4);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
          v33 = dispatch thunk of static Equatable.== infix(_:_:)();
          v28 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
          v28(v27, v4);
          outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
          outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
          v28(v36, v4);
          outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
          if ((v33 & 1) != 0)
          {
LABEL_16:
            v29 = *(int *)(v35 + 28);
            v30 = *(_QWORD **)((char *)a1 + v29);
            v31 = *(_QWORD **)((char *)a2 + v29);
            if (v30)
            {
              if (v31 && (specialized static Array<A>.== infix(_:_:)(v30, v31) & 1) != 0)
                return 1;
            }
            else if (!v31)
            {
              return 1;
            }
          }
          return 0;
        }
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
        outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v26, v4);
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
      return 0;
    }
  }
  return result;
}

uint64_t specialized __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t specialized __REAssetBundle.Header.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x496E6F6973726576 && a2 == 0xEB000000006F666ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69737265566E696DLL && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized __REAssetBundle.Header.VersionInfo.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021BE8C370
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C506E696769726FLL && a2 == 0xEE006D726F667461)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D614E656C6966 && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000021BE8C3B0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized __REAssetBundle.AssetMap.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73656E656373 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737465737361 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x800000021BE8C3D0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D614E656E656373 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656449656E656373 && a2 == 0xEF7265696669746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000021BE8C390)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized static __REAssetBundle.frameworkVersion(key:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  if (one-time initialization token for realityFoundation != -1)
    swift_once();
  v4 = objc_msgSend((id)static NSBundle.realityFoundation, sel_infoDictionary);
  if (!v4)
    return 12589;
  v5 = v4;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v6 + 16))
  {
    v13 = 0u;
    v14 = 0u;
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    v13 = 0u;
    v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_15:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 12589;
  }
  if ((swift_dynamicCast() & 1) == 0)
    return 12589;
  result = v11;
  v10 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v10 = v11 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return 12589;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.VersionInfo.CodingKeys, &unk_24DFBD848);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.VersionInfo.CodingKeys, &unk_24DFBD848);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.VersionInfo.CodingKeys, &unk_24DFBD848);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.VersionInfo.CodingKeys, &unk_24DFBD848);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.CodingKeys, &unk_24DFBD7B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.CodingKeys, &unk_24DFBD7B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.CodingKeys, &unk_24DFBD7B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.CodingKeys, &unk_24DFBD7B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.VersionInfo, &type metadata for __REAssetBundle.Header.VersionInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.Header.VersionInfo, &type metadata for __REAssetBundle.Header.VersionInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo);
  }
  return result;
}

uint64_t outlined copy of __REAssetBundle.ExportOptions.DeploymentTarget?(uint64_t a1, unint64_t a2)
{
  if (a2 != 5)
    return outlined copy of __REAssetBundle.ExportOptions.PlatformOS(a1, a2);
  return a1;
}

uint64_t outlined copy of __REAssetBundle.ExportOptions.PlatformOS(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 5)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(uint64_t a1, unint64_t a2)
{
  if (a2 != 5)
    return outlined consume of __REAssetBundle.ExportOptions.PlatformOS(a1, a2);
  return a1;
}

uint64_t outlined consume of __REAssetBundle.ExportOptions.PlatformOS(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 5)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys, &unk_24DFBD728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys, &unk_24DFBD728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys, &unk_24DFBD728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys, &unk_24DFBD728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for __REAssetBundle.AssetMap.SceneDescriptor;
  if (!type metadata singleton initialization cache for __REAssetBundle.AssetMap.SceneDescriptor)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant, &type metadata for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant, &type metadata for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant);
  }
  return result;
}

uint64_t outlined init with copy of __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys, &unk_24DFBD618);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys, &unk_24DFBD618);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys, &unk_24DFBD618);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys, &unk_24DFBD618);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x220772E3C](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.CodingKeys, &unk_24DFBD588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.CodingKeys, &unk_24DFBD588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.CodingKeys, &unk_24DFBD588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.CodingKeys, &unk_24DFBD588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor]);
    v10 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(a2, (uint64_t (*)(uint64_t))type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor, a3);
    result = MEMORY[0x220772E3C](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.AssetDescriptor, &type metadata for __REAssetBundle.AssetMap.AssetDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.AssetDescriptor, &type metadata for __REAssetBundle.AssetMap.AssetDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor);
  }
  return result;
}

uint64_t outlined init with take of (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of __DownsamplingStrategy?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __DownsamplingStrategy?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BC2F508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:)((_QWORD *)(v0 + 16), v0 + v2, *(void (**)(_BYTE *))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t sub_21BC2F5FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __REAssetBundle.load(url:serviceLocator:completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static __REAssetBundle.load(url:serviceLocator:completionHandler:)(v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(_BYTE *))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_21BC2F6DC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:)()
{
  uint64_t v0;

  return closure #1 in static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:)((_QWORD *)(v0 + 16), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64), *(void **)(v0 + 72), *(void (**)(_BYTE *))(v0 + 80));
}

uint64_t sub_21BC2F72C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:)()
{
  uint64_t v0;

  return closure #1 in static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(_BYTE *))(v0 + 48));
}

uint64_t outlined release of __REAssetBundle.ExportOptions(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 128);

  outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21BC2F840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __REAssetBundle.__write(to:completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in __REAssetBundle.__write(to:completionHandler:)(v0 + 16, v0 + v2, *(uint64_t (**)(_QWORD))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t type metadata accessor for __Archiving.Operation()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError;
  if (!lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __Archiving.ArchivingError, &type metadata for __Archiving.ArchivingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError;
  if (!lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __Archiving.ArchivingError, &type metadata for __Archiving.ArchivingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError);
  }
  return result;
}

uint64_t sub_21BC2F9E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
    v3 = *(_QWORD *)(a1 + 120);
  else
    v3 = 0;
  *a2 = v2;
  a2[1] = v3;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v2);
}

uint64_t sub_21BC2F9F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (*a1)
    v4 = a1[1];
  else
    v4 = 0;
  v5 = *(_QWORD *)(a2 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(*a1);
  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
  *(_QWORD *)(a2 + 112) = v3;
  *(_QWORD *)(a2 + 120) = v4;
  return result;
}

uint64_t destroy for __REAssetBundle(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __REAssetBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 16;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  swift_bridgeObjectRetain();
  v8(a1 + 16, v5, v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for __REAssetBundle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for __REAssetBundle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle()
{
  return &type metadata for __REAssetBundle;
}

_QWORD *initializeWithCopy for __REAssetBundle.Header(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for __REAssetBundle.Header(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

_QWORD *assignWithTake for __REAssetBundle.Header(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.Header(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.Header(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.Header()
{
  return &type metadata for __REAssetBundle.Header;
}

uint64_t destroy for __REAssetBundle.Header()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for __REAssetBundle.Header.VersionInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for __REAssetBundle.Header.VersionInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for __REAssetBundle.Header.VersionInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.Header.VersionInfo()
{
  return &type metadata for __REAssetBundle.Header.VersionInfo;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.QueueOptions(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21BC2FFC0 + 4 * byte_21BE6700F[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.QueueOptions(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BC30078 + 4 * byte_21BE67019[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BC300AC + 4 * byte_21BE67014[v5]))();
}

uint64_t sub_21BC300AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC300B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC300BCLL);
  return result;
}

uint64_t sub_21BC300C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC300D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BC300D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC300DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.QueueOptions()
{
  return &type metadata for __REAssetBundle.QueueOptions;
}

uint64_t destroy for __REAssetBundle.ExportOptions(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 48) >= 6uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 112))
    swift_release();
  if (*(_QWORD *)(a1 + 128))
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __REAssetBundle.ExportOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = (_OWORD *)(a1 + 40);
  v6 = (_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = v4;
  if (v7 == 5)
  {
    *v5 = *v6;
    *(_OWORD *)((char *)v5 + 13) = *(_OWORD *)((char *)v6 + 13);
  }
  else
  {
    if (v7 >= 5)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)v6;
      *(_QWORD *)(a1 + 48) = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      *v5 = *v6;
    }
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  }
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    v11 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  v12 = *(_QWORD *)(a2 + 128);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 136) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __REAssetBundle.ExportOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  __int128 *v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a1 + 24);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = v6;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
  v8 = (__int128 *)(a1 + 40);
  v9 = (__int128 *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a2 + 48);
  if (v10 == 5)
  {
    if (v11 == 5)
    {
      v12 = *v9;
      *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
      *v8 = v12;
      goto LABEL_19;
    }
    if (v11 >= 5)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
    }
    else
    {
      *v8 = *v9;
    }
    v14 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v14;
    goto LABEL_18;
  }
  if (v11 == 5)
  {
    outlined destroy of __REAssetBundle.ExportOptions.DeploymentTarget(a1 + 40);
    v13 = *(_OWORD *)(a2 + 53);
    *v8 = *v9;
    *(_OWORD *)(a1 + 53) = v13;
    goto LABEL_19;
  }
  if (v10 >= 5)
  {
    if (v11 >= 5)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of String(a1 + 40);
    goto LABEL_15;
  }
  if (v11 < 5)
  {
LABEL_15:
    *v8 = *v9;
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
LABEL_17:
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
LABEL_18:
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
LABEL_19:
  v15 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v16)
    {
      v17 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v16;
      *(_QWORD *)(a1 + 120) = v17;
      swift_retain();
      swift_release();
      goto LABEL_26;
    }
    swift_release();
  }
  else if (v16)
  {
    v18 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v16;
    *(_QWORD *)(a1 + 120) = v18;
    swift_retain();
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_26:
  v19 = *(_QWORD *)(a2 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
    if (v19)
    {
      v21 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v19;
      *(_QWORD *)(a1 + 136) = v21;
      swift_retain();
      goto LABEL_33;
    }
LABEL_32:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_33;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v20;
  swift_retain();
  swift_release();
LABEL_33:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE0D00] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1)
{
  destroy for __REAssetBundle.ExportOptions.DeploymentTarget(a1);
  return a1;
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for __REAssetBundle.ExportOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
  v5 = (_OWORD *)(a1 + 40);
  v6 = (_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 == 5)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 48);
  if (v8 == 5)
  {
    outlined destroy of __REAssetBundle.ExportOptions.DeploymentTarget(a1 + 40);
LABEL_4:
    *v5 = *v6;
    *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
    goto LABEL_11;
  }
  if (v7 >= 5)
  {
    if (v8 >= 5)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)v6;
      *(_QWORD *)(a1 + 48) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    outlined destroy of String(a1 + 40);
  }
  *v5 = *v6;
LABEL_10:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
LABEL_11:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v9;
      *(_QWORD *)(a1 + 120) = v10;
      swift_release();
      goto LABEL_18;
    }
    swift_release();
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v11;
    goto LABEL_18;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_18:
  v12 = *(_QWORD *)(a2 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
    if (v12)
    {
      v14 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v12;
      *(_QWORD *)(a1 + 136) = v14;
      goto LABEL_25;
    }
LABEL_24:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_25;
  }
  if (!v12)
  {
    swift_release();
    goto LABEL_24;
  }
  v13 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v13;
  swift_release();
LABEL_25:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.ExportOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.ExportOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 153) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions()
{
  return &type metadata for __REAssetBundle.ExportOptions;
}

_QWORD *initializeWithCopy for __REAssetBundle.ExportOptions.AssetRemapping(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for __REAssetBundle.ExportOptions.AssetRemapping(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for __REAssetBundle.ExportOptions.AssetRemapping(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions.AssetRemapping()
{
  return &type metadata for __REAssetBundle.ExportOptions.AssetRemapping;
}

uint64_t destroy for __REAssetBundle.LoadOptions(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 112) >= 2uLL)
    swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for __REAssetBundle.LoadOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  unint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = a2 + 32;
  v6 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 32, v5, v6);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v5 + 32);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v9 = (_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  if (v10 >= 2)
  {
    *(_QWORD *)(a1 + 104) = *v9;
    *(_QWORD *)(a1 + 112) = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v9;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for __REAssetBundle.LoadOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
    goto LABEL_8;
  }
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
LABEL_8:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  v7 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112) >= 2uLL)
  {
    if (v7 >= 2)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined destroy of String(a1 + 104);
    goto LABEL_13;
  }
  if (v7 < 2)
  {
LABEL_13:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
LABEL_15:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for __REAssetBundle.LoadOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  v6 = (_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 112) >= 2uLL)
  {
    v7 = *(_QWORD *)(a2 + 112);
    if (v7 >= 2)
    {
      *(_QWORD *)(a1 + 104) = *v6;
      *(_QWORD *)(a1 + 112) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v6;
LABEL_8:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.LoadOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.LoadOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.LoadOptions()
{
  return &type metadata for __REAssetBundle.LoadOptions;
}

uint64_t initializeBufferWithCopyOfBuffer for __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for __REAssetBundle.LoadOptions.ContentRequest(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.LoadOptions.ContentRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.LoadOptions.ContentRequest()
{
  return &type metadata for __REAssetBundle.LoadOptions.ContentRequest;
}

_QWORD *initializeBufferWithCopyOfBuffer for __REAssetBundle.__MaterialDefinitionOverride(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for __REAssetBundle.__MaterialDefinitionOverride(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for __REAssetBundle.__MaterialDefinitionOverride(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.__MaterialDefinitionOverride()
{
  return &type metadata for __REAssetBundle.__MaterialDefinitionOverride;
}

uint64_t initializeBufferWithCopyOfBuffer for __REAssetBundle.AssetMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __REAssetBundle.AssetMap(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for __REAssetBundle.AssetMap(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.AssetMap()
{
  return &type metadata for __REAssetBundle.AssetMap;
}

uint64_t *initializeBufferWithCopyOfBuffer for __REAssetBundle.AssetMap.SceneDescriptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for __REAssetBundle.AssetMap.SceneDescriptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for __REAssetBundle.AssetMap.SceneDescriptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for __REAssetBundle.AssetMap.SceneDescriptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *assignWithTake for __REAssetBundle.AssetMap.SceneDescriptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.AssetMap.SceneDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BC318D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.AssetMap.SceneDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BC31960(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for __REAssetBundle.AssetMap.SceneDescriptor()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *assignWithCopy for __REAssetBundle.AssetMap.AssetDescriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.AssetMap.AssetDescriptor()
{
  return &type metadata for __REAssetBundle.AssetMap.AssetDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for __RealityFileError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of __RealityFileError);
}

uint64_t outlined copy of __RealityFileError(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3)
    return swift_bridgeObjectRetain();
  if (a3 == 2)
    return outlined copy of __REAssetBundle.ExportOptions.PlatformOS(result, a2);
  return result;
}

uint64_t destroy for __RealityFileError(uint64_t a1)
{
  return outlined consume of __RealityFileError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of __RealityFileError(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3)
    return swift_bridgeObjectRelease();
  if (a3 == 2)
    return outlined consume of __REAssetBundle.ExportOptions.PlatformOS(result, a2);
  return result;
}

uint64_t *assignWithCopy for __RealityFileError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of __RealityFileError, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of __RealityFileError);
}

uint64_t *assignWithTake for __RealityFileError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for BindPath.Part(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of __RealityFileError);
}

uint64_t getEnumTagSinglePayload for __RealityFileError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RealityFileError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for __RealityFileError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveInjectEnumTag for __RealityFileError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __RealityFileError()
{
  return &type metadata for __RealityFileError;
}

uint64_t getEnumTagSinglePayload for __AssetBundleEnvelopeVersion(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (v2 < 0xFF0000)
    v3 = 1;
  if (v2 >= 0x10000)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_21BC31C58 + 4 * byte_21BE6701E[v4]))();
}

uint64_t sub_21BC31C70(unsigned __int16 *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (a1[1])
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  return v1;
}

void sub_21BC31C7C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2))
    JUMPOUT(0x21BC31C84);
  JUMPOUT(0x21BC31C94);
}

uint64_t storeEnumTagSinglePayload for __AssetBundleEnvelopeVersion(_WORD *a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3)
    v5 = v5;
  else
    v5 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_21BC31D20 + 4 * byte_21BE67028[v5]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_21BC31D00 + 4 * byte_21BE67023[v5]))();
}

uint64_t sub_21BC31D00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BC31D20(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_21BC31D28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BC31D30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BC31D38(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_21BC31D40(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t getEnumTag for __AssetBundleEnvelopeVersion(unsigned __int8 *a1)
{
  if (a1[1])
    return (*a1 | (a1[1] << 8)) - 255;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for __AssetBundleEnvelopeVersion(_BYTE *result, int a2)
{
  if (a2)
  {
    *result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for __AssetBundleEnvelopeVersion()
{
  return &type metadata for __AssetBundleEnvelopeVersion;
}

ValueMetadata *type metadata accessor for __Archiving()
{
  return &type metadata for __Archiving;
}

ValueMetadata *type metadata accessor for __Archiving.ArchivingError()
{
  return &type metadata for __Archiving.ArchivingError;
}

uint64_t initializeBufferWithCopyOfBuffer for SerializationError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of SerializationError);
}

uint64_t outlined copy of SerializationError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SerializationError(uint64_t a1)
{
  return outlined consume of SerializationError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of SerializationError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t *assignWithCopy for SerializationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of SerializationError, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of SerializationError);
}

uint64_t *assignWithTake for SerializationError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for BindPath.Part(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of SerializationError);
}

ValueMetadata *type metadata accessor for SerializationError()
{
  return &type metadata for SerializationError;
}

void *type metadata accessor for __REAssetBundle.AssetMap.CodingKeys()
{
  return &unk_24DFBD588;
}

void *type metadata accessor for __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys()
{
  return &unk_24DFBD618;
}

ValueMetadata *type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant()
{
  return &type metadata for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant;
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BC31EC0 + 4 * byte_21BE67032[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BC31EF4 + 4 * byte_21BE6702D[v4]))();
}

uint64_t sub_21BC31EF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC31EFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC31F04);
  return result;
}

uint64_t sub_21BC31F10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC31F18);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BC31F1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC31F24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys()
{
  return &unk_24DFBD728;
}

void *type metadata accessor for __REAssetBundle.Header.CodingKeys()
{
  return &unk_24DFBD7B8;
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.AssetMap.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BC31F9C + 4 * byte_21BE6703C[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BC31FD0 + 4 * byte_21BE67037[v4]))();
}

uint64_t sub_21BC31FD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC31FD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC31FE0);
  return result;
}

uint64_t sub_21BC31FEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC31FF4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BC31FF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC32000(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __REAssetBundle.Header.VersionInfo.CodingKeys()
{
  return &unk_24DFBD848;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys, &unk_24DFBD9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys, &unk_24DFBD9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys, &unk_24DFBD9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys, &unk_24DFBD9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys);
  }
  return result;
}

uint64_t sub_21BC32498()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@out [__REAssetBundle.ExportOptions.AssetRemapping]?)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@owned [__REAssetBundle.ExportOptions.AssetRemapping]?)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SerializationError and conformance SerializationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SerializationError and conformance SerializationError;
  if (!lazy protocol witness table cache variable for type SerializationError and conformance SerializationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SerializationError, &type metadata for SerializationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SerializationError and conformance SerializationError);
  }
  return result;
}

uint64_t specialized static __REAssetBundle.getSceneNamesFromRealityFile(realityFile:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = RERealityFileGetAssetDescriptorCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    if (!result)
      return MEMORY[0x24BEE4AF8];
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if (RERealityFileGetAssetDescriptorAtIndex() && RERealityFileAssetDescriptorAsSceneDescriptor())
      {
        if (RESceneDescriptorGetSceneName())
        {
          v5 = String.init(cString:)();
          v7 = v6;
        }
        else
        {
          v5 = 0;
          v7 = 0xE000000000000000;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v9 = v3[2];
        v8 = v3[3];
        if (v9 >= v8 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v3);
        v3[2] = v9 + 1;
        v4 = &v3[2 * v9];
        v4[4] = v5;
        v4[5] = v7;
      }
      ++v2;
    }
    while (v1 != v2);
    return (uint64_t)v3;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalizedRealityFileError()
{
  return &type metadata for LocalizedRealityFileError;
}

uint64_t storeEnumTagSinglePayload for __Archiving.ArchivingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC326C4 + 4 * byte_21BE67046[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC326F8 + 4 * byte_21BE67041[v4]))();
}

uint64_t sub_21BC326F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC32700(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC32708);
  return result;
}

uint64_t sub_21BC32714(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC3271CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC32720(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC32728(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys()
{
  return &unk_24DFBD9B8;
}

unint64_t lazy protocol witness table accessor for type LocalizedRealityFileError and conformance LocalizedRealityFileError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedRealityFileError and conformance LocalizedRealityFileError;
  if (!lazy protocol witness table cache variable for type LocalizedRealityFileError and conformance LocalizedRealityFileError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LocalizedRealityFileError, &type metadata for LocalizedRealityFileError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedRealityFileError and conformance LocalizedRealityFileError);
  }
  return result;
}

void static ModelComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 7;
}

uint64_t ModelComponent.init(mesh:materials:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t ModelComponent.mesh.getter()
{
  return swift_retain();
}

uint64_t ModelComponent.mesh.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*ModelComponent.mesh.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ModelComponent.materials.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelComponent.materials.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ModelComponent.materials.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ModelComponent.boundsMargin.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void ModelComponent.boundsMargin.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

float (*ModelComponent.boundsMargin.modify(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 16);
  return PointLightComponent.attenuationFalloffExponent.modify;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance ModelComponent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  return static ModelComponent.__fromCore(_:borrowStrongReference:)(&v3, 0, a2);
}

uint64_t static ModelComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  return static ModelComponent.__fromCore(_:borrowStrongReference:)(&v3, 0, a2);
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ModelComponent(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  __int128 v6;
  int v7;

  v2 = *a1;
  v3 = *((_DWORD *)v1 + 4);
  v6 = *v1;
  v7 = v3;
  v5 = v2;
  return ModelComponent.__toCore(_:returnStrongReference:)(&v5, 0);
}

uint64_t ModelComponent.__toCore(_:)(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  __int128 v6;
  int v7;

  v2 = *a1;
  v3 = *((_DWORD *)v1 + 4);
  v6 = *v1;
  v7 = v3;
  v5 = v2;
  return ModelComponent.__toCore(_:returnStrongReference:)(&v5, 0);
}

void protocol witness for static Component.__coreComponentType.getter in conformance ModelComponent(_DWORD *a1@<X8>)
{
  *a1 = 7;
}

uint64_t static ModelComponent.__fromCore(_:borrowStrongReference:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t Mesh;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaterialCount;
  _QWORD *v8;
  uint64_t v9;
  Swift::Int v10;
  BOOL v11;
  int v12;
  void **p_getEnumTagSinglePayload;
  _UNKNOWN **v14;
  uint64_t MaterialAtIndex;
  uint64_t v16;
  uint64_t Shared;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int TriangleFillModeAtIndex;
  uint64_t v31;
  char WritesDepthAtIndex;
  int CullModeAtIndex;
  uint64_t v34;
  id v35;
  uint64_t Default;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int ParametersTypeForID;
  ValueMetadata *v52;
  uint64_t v53;
  uint64_t PbrParametersByID;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t UnlitParametersByID;
  unint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  id v65;
  char v66;
  _QWORD *v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t result;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t VideoAsset;
  unint64_t v97;
  id v98;
  uint64_t v99;
  int v100;
  int ReadsDepthAtIndex;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t MaterialAsset;
  Swift::OpaquePointer v111;
  unsigned __int8 v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  ValueMetadata *v121;
  _UNKNOWN **v122;
  uint64_t v123;

  v108 = a2;
  v91 = a3;
  v123 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  Mesh = REMeshComponentGetMesh();
  if (Mesh)
  {
    v5 = Mesh;
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      v92 = swift_dynamicCastClass();
      if (v92)
        goto LABEL_7;
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    RERetain();
    v92 = v6;
    REAssetSetSwiftObject();
  }
  else
  {
    type metadata accessor for MeshResource();
    v92 = swift_allocObject();
    *(_QWORD *)(v92 + 16) = 0;
  }
LABEL_7:
  MaterialCount = REMeshComponentGetMaterialCount();
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, MaterialCount & ~(MaterialCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  v114 = v8;
  REComponentGetEntity();
  REMaterialParameterBlockArrayComponentGetComponentType();
  v9 = REEntityGetOrAddComponentByClass();
  REMaterialRenderStateArrayComponentGetComponentType();
  v111._rawValue = (void *)REEntityGetOrAddComponentByClass();
  v109 = v9;
  if (REMaterialParameterBlockArrayComponentSize() != MaterialCount)
    REMaterialParameterBlockArrayComponentResize();
  if (REMaterialRenderStateArrayComponentSize() != MaterialCount)
    REMaterialRenderStateArrayComponentResize();
  REDirectMaterialParametersArrayComponentGetComponentType();
  v95 = REEntityGetOrAddComponentByClass();
  if (!REEntityGetComponent())
  {
    MaterialAsset = 0;
    VideoAsset = 0;
    if ((MaterialCount & 0x8000000000000000) == 0)
      goto LABEL_13;
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
  }
  VideoAsset = REVideoComponentGetVideoAsset();
  MaterialAsset = REVideoComponentGetMaterialAsset();
  if (MaterialCount < 0)
    goto LABEL_112;
LABEL_13:
  if (!MaterialCount)
  {
LABEL_110:
    v87 = v91;
    *v91 = v92;
    v87[1] = (uint64_t)v8;
    *((_DWORD *)v87 + 4) = 0;
    result = REMeshComponentGetBoundsMargin();
    *((_DWORD *)v87 + 4) = v89;
    return result;
  }
  v10 = 0;
  if (VideoAsset)
    v11 = MaterialAsset == 0;
  else
    v11 = 1;
  v12 = !v11;
  v105 = v12;
  v94 = MEMORY[0x24BEE4AD8] + 8;
  v93 = (void *)0x800000021BE869B0;
  p_getEnumTagSinglePayload = (void **)(&value witness table for BodyTrackingComponent + 48);
  v107 = v3;
  v106 = MaterialCount;
  while (1)
  {
    if (MaterialCount == v10)
      goto LABEL_113;
    MaterialAtIndex = REMeshComponentGetMaterialAtIndex();
    if (!MaterialAtIndex)
      goto LABEL_23;
    v16 = MaterialAtIndex;
    if (!REMeshComponentGetMaterialParametersIDAtIndex())
    {
      v21 = MaterialAsset;
      v22 = v105;
      if (v16 != MaterialAsset)
        v22 = 0;
      if (v22 == 1)
      {
        type metadata accessor for __VideoResource();
        *(_QWORD *)&v120 = VideoAsset;
        v23 = static __VideoResource.__fromCore(_:)((uint64_t *)&v120);
        v121 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
        *(_QWORD *)&v120 = v21;
        outlined init with copy of Any((uint64_t)&v120, (uint64_t)&v115);
        swift_dynamicCast();
        v24 = v113;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
        swift_retain();
        specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, v93);
        v25 = (void *)REMaterialParameterBlockValueCreate();
        type metadata accessor for VideoPlaybackController();
        swift_allocObject();
        v26 = swift_retain();
        v27 = VideoPlaybackController.init(fromCore:)(v26);
        v28 = specialized static LoadableResource.fromCore(assetRef:)(v24);
        if (!v28)
          goto LABEL_120;
        v29 = v28;
        swift_release();
        *(_QWORD *)&v120 = 0;
        TriangleFillModeAtIndex = REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex();
        v31 = v120;
        if (!TriangleFillModeAtIndex)
          v31 = 0;
        v99 = v31;
        LOBYTE(v113) = 1;
        WritesDepthAtIndex = REMaterialRenderStateArrayComponentGetWritesDepthAtIndex();
        v102 = v113;
        v112 = 1;
        ReadsDepthAtIndex = REMaterialRenderStateArrayComponentGetReadsDepthAtIndex();
        v100 = v112;
        v115 = 2;
        CullModeAtIndex = REMaterialRenderStateArrayComponentGetCullModeAtIndex();
        if (CullModeAtIndex)
          v34 = v115;
        else
          v34 = 0;
        if ((v108 & 1) != 0)
        {
          v35 = (id)REMaterialParameterBlockArrayComponentBorrowBlockValueAtIndex();
          if (!v35)
            goto LABEL_120;
        }
        else
        {
          v35 = (id)REMaterialParameterBlockArrayComponentGetBlockValueAtIndex();
          if (!v35)
            goto LABEL_120;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v67 = v114;
        swift_retain();
        swift_bridgeObjectRetain();
        v98 = v35;
        swift_retain();
        swift_retain();
        v68 = WritesDepthAtIndex;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
        v104 = v27;
        v70 = v67[2];
        v69 = v67[3];
        v103 = v34;
        v97 = v70 + 1;
        if (v70 >= v69 >> 1)
          v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v69 > 1), v70 + 1, 1, v67);
        v71 = v68 ^ 1 | v102;
        v72 = ReadsDepthAtIndex ^ 1 | v100;
        v73 = CullModeAtIndex ^ 1;
        v121 = &type metadata for VideoMaterial;
        v122 = &protocol witness table for VideoMaterial;
        v74 = swift_allocObject();
        *(_QWORD *)&v120 = v74;
        *(_QWORD *)(v74 + 16) = v29;
        *(_QWORD *)(v74 + 24) = MEMORY[0x24BEE4AF8];
        *(_BYTE *)(v74 + 32) = 0;
        v75 = v98;
        *(_QWORD *)(v74 + 40) = 0;
        *(_QWORD *)(v74 + 48) = v75;
        v76 = v104;
        *(_QWORD *)(v74 + 56) = v23;
        *(_QWORD *)(v74 + 64) = v76;
        *(_QWORD *)(v74 + 72) = v99;
        *(_BYTE *)(v74 + 80) = v71 & 1;
        *(_BYTE *)(v74 + 81) = v72 & 1;
        *(_QWORD *)(v74 + 88) = v103;
        *(_BYTE *)(v74 + 96) = v73;
        v67[2] = v97;
        outlined init with take of BindableDataInternal(&v120, (uint64_t)&v67[5 * v70 + 4]);
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release_n();
        v114 = v67;
      }
      else
      {
        v61 = v95;
        if ((v108 & 1) != 0)
        {
          v62 = (id)REMaterialParameterBlockArrayComponentBorrowBlockValueAtIndex();
          if (!v62)
            goto LABEL_120;
        }
        else
        {
          v62 = (id)REMaterialParameterBlockArrayComponentGetBlockValueAtIndex();
          if (!v62)
            goto LABEL_120;
        }
        if ((MEMORY[0x22076C89C](v61, v10, 0) & 1) != 0)
        {
          v63 = (id)REDirectMaterialParametersArrayComponentGetData();
          if (!v63)
            v63 = (id)REDirectParameterBufferCreate();
          v64 = v63;
          v65 = 0;
          v66 = 0;
        }
        else
        {
          v64 = (id)REDirectMaterialParametersArrayComponentGetData();
          if (!v64)
            v64 = (id)REDirectParameterBufferCreate();
          v65 = (id)REDirectMaterialParametersArrayComponentGetData();
          if (!v65)
            v65 = (id)REDirectParameterBufferCreate();
          v66 = 1;
        }
        type metadata accessor for __MaterialResource();
        v115 = MEMORY[0x24BEE4AF8];
        v116 = 0;
        v117 = 0;
        v118 = (uint64_t)v62;
        static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v16, &v115, (uint64_t)v64, (uint64_t)v65, v66, (uint64_t *)&v120);
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, (uint64_t)v121);
        Material.syncMaterialRenderStateFromCore(coreComponent:index:)(v111, v10);
        outlined init with copy of __REAssetService((uint64_t)&v120, (uint64_t)&v115);
        v77 = v114;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
          v114 = v77;
        }
        v79 = v77[2];
        v78 = v77[3];
        if (v79 >= v78 >> 1)
          v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v78 > 1), v79 + 1, 1, v77);
        v80 = v118;
        v81 = v119;
        v82 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v115, v118);
        v83 = MEMORY[0x24BDAC7A8](v82);
        v85 = (char *)&v90 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v86 + 16))(v85, v83);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, (uint64_t)v85, (uint64_t *)&v114, v80, v81);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
        outlined consume of CustomMaterial.CustomUniformsState?(v64, v65, v66);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
      }
      MaterialCount = v106;
      p_getEnumTagSinglePayload = (void **)(&value witness table for BodyTrackingComponent + 48);
      goto LABEL_23;
    }
    type metadata accessor for __ServiceLocator();
    Shared = REEngineGetShared();
    if (Shared)
    {
      v18 = Shared;
      if (one-time initialization token for lock != -1)
        swift_once();
      os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      v19 = p_getEnumTagSinglePayload[408];
      if (!v19 || v19[3] != v18)
      {
        type metadata accessor for __Engine();
        swift_allocObject();
        p_getEnumTagSinglePayload[408] = __Engine.init(coreEngine:)(v18);
        swift_release();
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      v20 = p_getEnumTagSinglePayload[408];
      if (v20)
        goto LABEL_65;
    }
    else
    {
      p_getEnumTagSinglePayload[408] = 0;
      swift_release();
      v20 = p_getEnumTagSinglePayload[408];
      if (v20)
        goto LABEL_65;
    }
    Default = REEngineConfigurationCreateDefault();
    type metadata accessor for EngineConfiguration();
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = Default;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v38 = REEngineConfigurationClone();
      v39 = swift_allocObject();
      *(_QWORD *)(v39 + 16) = v38;
      swift_release_n();
      v37 = v39;
    }
    REEngineConfigurationSetClockMode();
    if (one-time initialization token for defaultServices != -1)
      swift_once();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v40 = REEngineConfigurationClone();
      v41 = swift_allocObject();
      *(_QWORD *)(v41 + 16) = v40;
      swift_release_n();
      v37 = v41;
    }
    REEngineConfigurationSetServicesToCreate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v42 = REEngineConfigurationClone();
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = v42;
      swift_release_n();
      v37 = v43;
    }
    REEngineConfigurationSetServicesToUpdate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v44 = REEngineConfigurationClone();
      v45 = swift_allocObject();
      *(_QWORD *)(v45 + 16) = v44;
      swift_release_n();
      v37 = v45;
    }
    REEngineConfigurationSetStartupOptions();
    if (one-time initialization token for defaultRenderFlags != -1)
      swift_once();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v46 = REEngineConfigurationClone();
      v47 = swift_allocObject();
      *(_QWORD *)(v47 + 16) = v46;
      swift_release_n();
      v37 = v47;
    }
    REEngineConfigurationSetRenderFlags();
    v48 = static __ServiceLocator.__sharedEngine.getter();
    swift_release();
    if (!v48)
    {
      *(_QWORD *)&v120 = v37;
      v49 = specialized static __Engine.makeSharedEngine(_:)((uint64_t *)&v120);
      REEngineSetShared();
      static __ServiceLocator.sharedEngine = v49;
      swift_release();
      static __ServiceLocator.createdSharedEngine = 1;
    }
    swift_release();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
    p_getEnumTagSinglePayload = &value witness table for BodyTrackingComponent.getEnumTagSinglePayload;
    v20 = static __ServiceLocator.sharedEngine;
    if (!static __ServiceLocator.sharedEngine)
      goto LABEL_115;
LABEL_65:
    swift_beginAccess();
    v50 = v20[5];
    if (!v50)
      goto LABEL_114;
    swift_beginAccess();
    if (!MEMORY[0x22076FDAC](*(_QWORD *)(v50 + 16)))
      goto LABEL_23;
    ParametersTypeForID = REMaterialParametersServiceGetParametersTypeForID();
    if (ParametersTypeForID == 2)
    {
      v52 = (ValueMetadata *)type metadata accessor for PhysicallyBasedMaterialResource();
      v53 = swift_allocObject();
      if (one-time initialization token for materialParametersService != -1)
        swift_once();
      PbrParametersByID = REMaterialParametersServiceFindPbrParametersByID();
      if (!PbrParametersByID)
        break;
      *(_QWORD *)(v53 + 16) = PbrParametersByID;
      RERetain();
      v55 = v114;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
      v57 = v55[2];
      v56 = v55[3];
      v58 = v57 + 1;
      if (v57 >= v56 >> 1)
        v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v57 + 1, 1, v55);
      v14 = &protocol witness table for PhysicallyBasedMaterialResource;
      goto LABEL_22;
    }
    if (ParametersTypeForID != 1)
      goto LABEL_120;
    v52 = (ValueMetadata *)type metadata accessor for UnlitMaterialResource();
    v53 = swift_allocObject();
    if (one-time initialization token for materialParametersService != -1)
      swift_once();
    UnlitParametersByID = REMaterialParametersServiceFindUnlitParametersByID();
    if (!UnlitParametersByID)
      break;
    *(_QWORD *)(v53 + 16) = UnlitParametersByID;
    RERetain();
    v55 = v114;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
    v57 = v55[2];
    v60 = v55[3];
    v58 = v57 + 1;
    if (v57 >= v60 >> 1)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v57 + 1, 1, v55);
    v14 = &protocol witness table for UnlitMaterialResource;
LABEL_22:
    v121 = v52;
    v122 = v14;
    *(_QWORD *)&v120 = v53;
    v55[2] = v58;
    outlined init with take of BindableDataInternal(&v120, (uint64_t)&v55[5 * v57 + 4]);
    swift_release();
    v114 = v55;
LABEL_23:
    if (MaterialCount == ++v10)
    {
      v8 = v114;
      goto LABEL_110;
    }
  }
  swift_deallocPartialClassInstance();
LABEL_120:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ModelComponent.__toCore(_:returnStrongReference:)(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t Entity;
  id v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  ValueMetadata *v20;
  _UNKNOWN **v21;
  ValueMetadata *v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int16 v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  char v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t Strong;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t j;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t Mesh;
  uint64_t v58;
  BOOL v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t BlendShapeGroupCount;
  float v65;
  float v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t ComponentByClass;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __int128 *v77;
  Swift::Int v78;
  int v79;
  uint64_t MaterialAtIndex;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  ValueMetadata *v92;
  _UNKNOWN **v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unint64_t v97;
  void (*v98)(uint64_t *, _QWORD);
  uint64_t v99;
  uint64_t v100;
  ValueMetadata *v101;
  __int128 *v102;
  unint64_t v103;
  ValueMetadata *v104;
  char v105;
  uint64_t v106;
  __int128 *v107;
  ValueMetadata *v108;
  void *v109;
  int v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  __int128 *v126;
  uint64_t v127;
  __int128 *v128;
  __int128 v129;
  Swift::OpaquePointer v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  __int128 v137[21];
  _OWORD v138[21];
  uint64_t v139;
  __int128 v140;
  ValueMetadata *v141;
  _UNKNOWN **v142;
  _BYTE v143[48];

  LODWORD(v127) = a2;
  v4 = type metadata accessor for Logger();
  v122 = *(_QWORD *)(v4 - 8);
  v123 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v124 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v128 = *(__int128 **)v2;
  v135 = *(_QWORD *)(v2 + 8);
  v7 = *(float *)(v2 + 16);
  Entity = REComponentGetEntity();
  v9 = (id)REEntityGetSwiftObject();
  v121 = Entity;
  if (v9)
  {
    type metadata accessor for Entity();
    v10 = swift_dynamicCastClassUnconditional();
LABEL_3:
    v120 = v10;
    goto LABEL_7;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) != 0)
  {
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  v12 = specialized static Entity.entityInfoType(_:)();
  if (!v12)
  {
    v10 = makeEntity(for:)(Entity);
    goto LABEL_3;
  }
  v13 = (*(uint64_t (**)(void))(v12 + 232))();
  v14 = *(_QWORD *)(v13 + 16);
  swift_retain();
  MEMORY[0x22076D160](v14, 0);
  *(_QWORD *)(v13 + 16) = Entity;
  MEMORY[0x22076D160](Entity, v13);
  v120 = v13;
  swift_release();
LABEL_7:
  v132 = v6;
  v15 = *(_QWORD *)(v135 + 16);
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v136 = v15;
  if (v15)
  {
    v17 = v135 + 32;
    swift_bridgeObjectRetain();
    LODWORD(v134) = 0;
    do
    {
      outlined init with copy of __REAssetService(v17, (uint64_t)v137);
      outlined init with copy of __REAssetService((uint64_t)v137, (uint64_t)&v139);
      if ((v134 & 1) != 0)
      {
        LODWORD(v134) = 1;
      }
      else
      {
        v19 = v16;
        v20 = v141;
        v21 = v142;
        __swift_project_boxed_opaque_existential_1(&v139, (uint64_t)v141);
        v22 = v20;
        v16 = v19;
        LODWORD(v134) = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v21[18])(v22, v21);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
      outlined init with copy of __REAssetService((uint64_t)v137, (uint64_t)v143);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
      if ((swift_dynamicCast() & 1) == 0)
        memset(v138, 0, 81);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
      if (*(_QWORD *)&v138[0])
      {
        v133 = v138[0];
        v23 = v138[1];
        v24 = *((_QWORD *)&v138[1] + 1);
        v129 = v138[2];
        v25 = v138[3];
        v26 = v138[4];
        v131 = *((_QWORD *)&v138[4] + 1);
        LODWORD(v130._rawValue) = LOBYTE(v138[5]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        v28 = v16[2];
        v27 = v16[3];
        v29 = v16;
        v30 = v133;
        if (v28 >= v27 >> 1)
        {
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v16);
          v30 = v133;
          v29 = v31;
        }
        v29[2] = v28 + 1;
        v16 = v29;
        v18 = &v29[11 * v28];
        *((_OWORD *)v18 + 2) = v30;
        *((_BYTE *)v18 + 48) = v23 & 1;
        v18[7] = v24;
        *((_OWORD *)v18 + 4) = v129;
        *((_OWORD *)v18 + 5) = v25;
        *((_BYTE *)v18 + 96) = v26 & 1;
        *((_BYTE *)v18 + 97) = HIBYTE(v26) & 1;
        v18[13] = v131;
        *((_BYTE *)v18 + 112) = (uint64_t)v130._rawValue & 1;
      }
      v17 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    if (!v16[2])
    {
      swift_bridgeObjectRelease();
      if ((v134 & 1) != 0)
        goto LABEL_57;
      goto LABEL_38;
    }
LABEL_25:
    v33 = v16[4];
    v32 = v16[5];
    LODWORD(v134) = *((unsigned __int8 *)v16 + 48);
    v35 = v16[7];
    v34 = (void *)v16[8];
    v37 = v16[9];
    v36 = (void *)v16[10];
    *(_QWORD *)&v133 = v16[11];
    LODWORD(v131) = *((unsigned __int8 *)v16 + 96);
    v38 = *((_BYTE *)v16 + 97);
    v130._rawValue = (void *)v16[13];
    v39 = *((_BYTE *)v16 + 112);
    swift_bridgeObjectRetain();
    v40 = v34;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v141 = &type metadata for VideoMaterial;
    v142 = &protocol witness table for VideoMaterial;
    v41 = swift_allocObject();
    v139 = v41;
    *(_QWORD *)(v41 + 16) = v33;
    *(_QWORD *)(v41 + 24) = v32;
    *(_BYTE *)(v41 + 32) = v134;
    *(_QWORD *)(v41 + 40) = v35;
    *(_QWORD *)(v41 + 48) = v40;
    *(_QWORD *)(v41 + 56) = v37;
    *(_QWORD *)(v41 + 64) = v36;
    *(_QWORD *)(v41 + 72) = v133;
    *(_BYTE *)(v41 + 80) = v131;
    *(_BYTE *)(v41 + 81) = v38;
    *(Swift::OpaquePointer *)(v41 + 88) = v130;
    *(_BYTE *)(v41 + 96) = v39;
    *(_QWORD *)&v137[0] = v37;
    outlined init with copy of __REAssetService((uint64_t)&v139, (uint64_t)v137 + 8);
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of ModelComponent.__toCore(_:returnStrongReference:));
    v43 = v42;
    v134 = v33;
    swift_retain();
    *(_QWORD *)&v133 = v32;
    swift_bridgeObjectRetain();
    v126 = (__int128 *)v35;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v129 = v40;
    swift_retain_n();
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
    *(_QWORD *)&v137[3] = v43;
    v138[0] = v137[0];
    v138[1] = v137[1];
    v138[2] = v137[2];
    *(_QWORD *)&v138[3] = v43;
    v44 = v120;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v138);
    outlined destroy of BodyTrackingComponent?((uint64_t)v138, &demangling cache variable for type metadata for VideoComponent?);
    swift_release();
    __VideoResource.addEntity(_:)(v44);
    v130._rawValue = v36;
    v45 = (uint64_t *)(v37 + 24);
    swift_beginAccess();
    v131 = v37;
    v46 = *(_QWORD *)(v37 + 24);
    *(_QWORD *)&v138[0] = MEMORY[0x24BEE4AF8];
    if (v46 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v47 = result;
      if (result)
        goto LABEL_27;
    }
    else
    {
      v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v47)
      {
LABEL_27:
        if (v47 < 1)
        {
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        for (i = 0; i != v47; ++i)
        {
          if ((v46 & 0xC000000000000001) != 0)
            MEMORY[0x220769770](i, v46);
          else
            swift_retain();
          Strong = swift_weakLoadStrong();
          swift_release();
          if (Strong)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        v50 = *(_QWORD *)&v138[0];
LABEL_42:
        *v45 = v50;
        swift_bridgeObjectRelease();
        v51 = *v45;
        if ((unint64_t)*v45 >> 62)
        {
          swift_bridgeObjectRetain();
          result = _CocoaArrayWrapper.endIndex.getter();
          v52 = result;
          if (result)
            goto LABEL_44;
        }
        else
        {
          v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
          result = swift_bridgeObjectRetain();
          if (v52)
          {
LABEL_44:
            if (v52 < 1)
            {
LABEL_148:
              __break(1u);
              goto LABEL_149;
            }
            for (j = 0; j != v52; ++j)
            {
              if ((v51 & 0xC000000000000001) != 0)
                MEMORY[0x220769770](j, v51);
              else
                swift_retain();
              if (swift_weakLoadStrong())
              {
                REVideoComponentGetComponentType();
                if (REEntityGetComponentByClass())
                {
                  REVideoComponentSetDesiredViewingMode();
                  RENetworkMarkComponentDirty();
                }
                swift_release();
              }
              swift_release();
            }
          }
        }
        swift_bridgeObjectRelease();
        v54 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v54, (uint64_t)v138);
        v55 = *((_QWORD *)&v138[1] + 1);
        v56 = *(_QWORD *)&v138[2];
        __swift_project_boxed_opaque_existential_1(v138, *((uint64_t *)&v138[1] + 1));
        (*(void (**)(uint64_t, uint64_t))(v56 + 32))(v55, v56);
        REAssetManagerPreloadVideoAssetOnce();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
        goto LABEL_57;
      }
    }
    swift_bridgeObjectRelease();
    v50 = MEMORY[0x24BEE4AF8];
    goto LABEL_42;
  }
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_25;
  swift_bridgeObjectRelease();
LABEL_38:
  memset(v138, 0, 56);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v138);
  outlined destroy of BodyTrackingComponent?((uint64_t)v138, &demangling cache variable for type metadata for VideoComponent?);
  swift_release();
LABEL_57:
  Mesh = REMeshComponentGetMesh();
  v58 = *((_QWORD *)v128 + 2);
  if (v58)
  {
    REMeshComponentSetMesh();
    if (Mesh)
      v59 = Mesh == v58;
    else
      v59 = 0;
    v60 = v59;
    if (REMeshAssetGetTotalSkeletonCount() >= 1)
    {
      REMeshDeformationComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      RESkeletalPoseComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      RERigComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
    }
    REMeshDeformationComponentGetComponentType();
    if (!REEntityGetComponentByClass())
    {
      result = REMeshAssetGetModelCount();
      if (result < 0)
      {
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
        return result;
      }
      v61 = result;
      if (result)
      {
        if (REMeshAssetGetBlendShapeGroupCount() > 0)
        {
LABEL_73:
          REMeshDeformationComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
        }
        else
        {
          v62 = 1;
          while (v61 != v62)
          {
            v63 = v62 + 1;
            BlendShapeGroupCount = REMeshAssetGetBlendShapeGroupCount();
            v62 = v63;
            if (BlendShapeGroupCount > 0)
              goto LABEL_73;
          }
        }
      }
    }
  }
  else
  {
    REMeshComponentSetMesh();
    v60 = Mesh == 0;
  }
  REMeshComponentGetBoundsMargin();
  v66 = v65;
  REMeshComponentSetBoundsMargin();
  v67 = v66 != v7 || !v60;
  REMaterialParameterBlockArrayComponentGetComponentType();
  v131 = REEntityGetOrAddComponentByClass();
  v68 = REMaterialParameterBlockArrayComponentSize();
  v69 = *(_QWORD *)(v135 + 16);
  if (v68 != v69)
    REMaterialParameterBlockArrayComponentResize();
  if (v69 < REMeshComponentGetMaterialCount())
  {
    REMeshComponentRemoveAllMaterials();
    v67 = 1;
  }
  LODWORD(v133) = v67;
  *(_QWORD *)&v129 = REMeshComponentGetMaterialCount();
  REMaterialRenderStateArrayComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  REMaterialRenderStateArrayComponentGetComponentType();
  v130._rawValue = (void *)REEntityGetOrAddComponentByClass();
  v71 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v71, (uint64_t)v137);
  if (!*((_QWORD *)&v137[1] + 1))
    goto LABEL_151;
  v72 = ComponentByClass == 0;
  outlined init with take of BindableDataInternal(v137, (uint64_t)v138);
  v73 = *((_QWORD *)&v138[1] + 1);
  v74 = *(_QWORD *)&v138[2];
  __swift_project_boxed_opaque_existential_1(v138, *((uint64_t *)&v138[1] + 1));
  (*(void (**)(uint64_t, uint64_t))(v74 + 24))(v73, v74);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
  v134 = v135 + 32;
  v125 = (uint64_t)v137 + 8;
  v126 = &v140;
  v128 = (_OWORD *)((char *)v138 + 8);
  result = swift_bridgeObjectRetain();
  v75 = 0;
  v76 = v136;
  while (1)
  {
    if (v75 == v76)
    {
      v75 = v76;
      memset(v137, 0, 48);
      goto LABEL_91;
    }
    if (v75 >= *(_QWORD *)(v135 + 16))
    {
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
    v77 = v126;
    outlined init with copy of __REAssetService(v134 + 40 * v75, (uint64_t)v126);
    *(_QWORD *)&v137[0] = v75;
    outlined init with take of BindableDataInternal(v77, v125);
    ++v75;
LABEL_91:
    outlined init with take of (offset: Int, element: Material)?((uint64_t)v137, (uint64_t)v138);
    if (!*(_QWORD *)&v138[2])
      break;
    v78 = *(_QWORD *)&v138[0];
    outlined init with take of BindableDataInternal(v128, (uint64_t)v137);
    if (v78 >= (uint64_t)v129)
    {
      v86 = *((_QWORD *)&v137[1] + 1);
      v87 = *(_QWORD *)&v137[2];
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 136))(v86, v87);
      v89 = *((_QWORD *)&v137[1] + 1);
      v90 = *(_QWORD *)&v137[2];
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v90);
      swift_beginAccess();
      swift_release();
      if (v88)
        REMeshComponentAddMaterialWithParameters();
      else
        REMeshComponentAddMaterial();
      LODWORD(v133) = 1;
    }
    else
    {
      v79 = v72;
      MaterialAtIndex = REMeshComponentGetMaterialAtIndex();
      v82 = *((_QWORD *)&v137[1] + 1);
      v81 = *(_QWORD *)&v137[2];
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 136))(v82, v81);
      v85 = *((_QWORD *)&v137[1] + 1);
      v84 = *(_QWORD *)&v137[2];
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v85, v84);
      if (v83)
      {
        swift_beginAccess();
        swift_release();
        REMeshComponentSetMaterialWithParametersAtIndex();
        LODWORD(v133) = 1;
        v76 = v136;
        v72 = v79;
      }
      else
      {
        swift_beginAccess();
        swift_release();
        REMeshComponentSetMaterialAtIndex();
        outlined init with copy of __REAssetService((uint64_t)v137, (uint64_t)&v139);
        if ((v133 & 1) != 0)
        {
          v91 = 1;
        }
        else
        {
          v92 = v141;
          v93 = v142;
          __swift_project_boxed_opaque_existential_1(&v139, (uint64_t)v141);
          v94 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v93[1])(v92, v93);
          swift_beginAccess();
          v95 = *(_QWORD *)(v94 + 16);
          swift_release();
          if (MaterialAtIndex)
            v96 = MaterialAtIndex == v95;
          else
            v96 = 0;
          v91 = !v96;
        }
        LODWORD(v133) = v91;
        v76 = v136;
        v72 = v79;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
      }
    }
    __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
    v72 |= Material.syncMaterialRenderStateToCore(_:index:)(v130, v78);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
  }
  LODWORD(v128) = v72;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRetain();
  v97 = 0;
  while (1)
  {
    if (v97 == v76)
    {
      v97 = v76;
      memset(v137, 0, 48);
    }
    else
    {
      if (v97 >= *(_QWORD *)(v135 + 16))
        goto LABEL_145;
      outlined init with copy of __REAssetService(v134 + 40 * v97, (uint64_t)&v140);
      *(_QWORD *)&v137[0] = v97;
      outlined init with take of BindableDataInternal(&v140, (uint64_t)v137 + 8);
      ++v97;
    }
    outlined init with take of (offset: Int, element: Material)?((uint64_t)v137, (uint64_t)v138);
    if (!*(_QWORD *)&v138[2])
      break;
    outlined init with take of BindableDataInternal((_OWORD *)((char *)v138 + 8), (uint64_t)v137);
    v99 = *((_QWORD *)&v137[1] + 1);
    v100 = *(_QWORD *)&v137[2];
    if ((v127 & 1) != 0)
    {
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v100 + 16))(&v139, v99, v100);
      v101 = v141;
      REMaterialParameterBlockArrayComponentReturnBlockValueAtIndex();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v137, *((uint64_t *)&v137[1] + 1));
      v98 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v100 + 32))(&v139, v99, v100);
      REMaterialParameterBlockArrayComponentSetBlockValueAtIndex();
      v98(&v139, 0);
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
    v76 = v136;
  }
  swift_bridgeObjectRelease();
  REDirectMaterialParametersArrayComponentGetComponentType();
  *(_QWORD *)&v129 = REEntityGetOrAddComponentByClass();
  v126 = (__int128 *)((char *)v137 + 8);
  v127 = (uint64_t)v138 + 8;
  v102 = &v140;
  result = swift_bridgeObjectRetain();
  v103 = 0;
  v104 = &type metadata for CustomMaterial;
  v105 = (char)v128;
  if (v76)
    goto LABEL_134;
  while (2)
  {
    v103 = v76;
    memset(v138, 0, 48);
LABEL_138:
    outlined init with take of (offset: Int, element: Material)?((uint64_t)v138, (uint64_t)&v139);
    if (v142)
    {
      v106 = v139;
      outlined init with take of BindableDataInternal(v102, (uint64_t)v143);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
      if (!swift_dynamicCast())
      {
        memset(v137, 0, 330);
        outlined destroy of BodyTrackingComponent?((uint64_t)v137, &demangling cache variable for type metadata for CustomMaterial?);
        result = MEMORY[0x22076C878](v129, 3, v106);
        if (v103 == v76)
          continue;
        goto LABEL_134;
      }
      v107 = v102;
      v108 = v104;
      memcpy(v138, v137, 0x14AuLL);
      v109 = (void *)*((_QWORD *)&v138[5] + 1);
      v110 = LOBYTE(v138[6]);
      v111 = *(void **)&v138[5];
      swift_beginAccess();
      if (v110)
      {
        if (v110 == 1)
        {
          outlined copy of CustomMaterial.CustomUniformsState(v111, v109, 1);
          v112 = v111;
          v113 = v109;
          if ((REMaterialAssetHasGeometryModifierCustomParamsName() & 1) != 0)
            REDirectMaterialParametersArrayComponentSetData();
          else
            MEMORY[0x22076C878](v129, 1, v106);
          if (REMaterialAssetHasSurfaceShaderCustomParamsName())
            REDirectMaterialParametersArrayComponentSetData();
          else
            MEMORY[0x22076C878](v129, 2, v106);

          outlined consume of CustomMaterial.CustomUniformsState(v111, v109, 1);
          v105 = (char)v128;
LABEL_133:
          v104 = v108;
          v102 = v107;
          result = outlined destroy of CustomMaterial((uint64_t)v138);
          v76 = v136;
          if (v103 == v136)
            continue;
LABEL_134:
          if (v103 >= *(_QWORD *)(v135 + 16))
            goto LABEL_146;
          v118 = v126;
          outlined init with copy of __REAssetService(v134 + 40 * v103, (uint64_t)v126);
          *(_QWORD *)&v138[0] = v103;
          outlined init with take of BindableDataInternal(v118, v127);
          ++v103;
          goto LABEL_138;
        }
        Logger.init()();
        v115 = Logger.logObject.getter();
        v116 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v115, v116))
        {
          v117 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v117 = 0;
          _os_log_impl(&dword_21B9AA000, v115, v116, "Custom Uniforms buffer was invalid! This should not happen.", v117, 2u);
          MEMORY[0x220772F44](v117, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v123);
      }
      else
      {
        v114 = v111;
        REMaterialAssetHasGeometryModifierCustomParamsName();
        REMaterialAssetHasSurfaceShaderCustomParamsName();
        REDirectMaterialParametersArrayComponentSetData();
        outlined consume of CustomMaterial.CustomUniformsState(v111, v109, 0);
      }
      v105 = (char)v128;
      goto LABEL_133;
    }
    break;
  }
  swift_bridgeObjectRelease();
  if ((v133 & 1) != 0)
    RENetworkMarkComponentDirty();
  if ((v105 & 1) != 0)
    RENetworkMarkComponentDirty();
  RENetworkMarkComponentDirty();
  RENetworkMarkComponentDirty();
  return swift_release();
}

uint64_t ModelComponent.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0[1];
  v10 = *((_DWORD *)v0 + 4);
  v17 = *v0;
  v9 = v17;
  v18 = v8;
  v19 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v11 + 32) = 1752393069;
  *(_QWORD *)(v11 + 40) = 0xE400000000000000;
  v12 = type metadata accessor for MeshResource();
  *(_QWORD *)(v11 + 48) = v9;
  *(_QWORD *)(v11 + 72) = v12;
  *(_QWORD *)(v11 + 80) = 0x6C6169726574616DLL;
  *(_QWORD *)(v11 + 88) = 0xE900000000000073;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Material]);
  *(_QWORD *)(v11 + 96) = v8;
  *(_QWORD *)(v11 + 120) = v13;
  strcpy((char *)(v11 + 128), "boundsMargin");
  *(_BYTE *)(v11 + 141) = 0;
  *(_WORD *)(v11 + 142) = -5120;
  *(_QWORD *)(v11 + 168) = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v11 + 144) = v10;
  v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void outlined consume of CustomMaterial.CustomUniformsState?(void *a1, void *a2, char a3)
{
  if (a3 != -1)
    outlined consume of CustomMaterial.CustomUniformsState(a1, a2, a3);
}

uint64_t sub_21BC34F50()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of (offset: Int, element: Material)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Material)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

float sub_21BC34FE4@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 16);
  *a2 = result;
  return result;
}

float sub_21BC34FF0(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(float *)(a2 + 16) = *a1;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModelComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ModelComponent(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ModelComponent()
{
  return &type metadata for ModelComponent;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s6UInt32Vs5NeverOTg506_sSis6d12VIgyd_SiABs5e184OIegnrzr_TR0166_s10RealityKit12MeshResourceC0A10FoundationE8SkeletonV2id10jointNames15inverseBindPose09localRestL013parentIndicesAFSS_SaySSGSaySo13simd_float4x4aGSayAA9TransformVGSgu21I43GSgtKcfc0H13IndexToA11L_ys0V0VSiFTf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (unint64_t *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if ((v6 & 0x8000000000000000) != 0)
      {
        LODWORD(v5) = -1;
      }
      else if (HIDWORD(v5))
      {
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit9TransformVG_So5RESRTas5NeverOTg504_s10d142Kit12MeshResourceC0A10FoundationE8SkeletonV2id10jointNames15inverseBindPose09localRestL013parentIndicesAFSS_SaySSGSaySo13simd_float4x4aGSayAA9f4VGSgZ74SiGSgtKcfcSo5RESRTaAQcfu2_33_00c2e038d769be1530659e2383c6619cAqWTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v14;
    v4 = (__int128 *)(a1 + 64);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v15 = result;
      v9 = *(_QWORD *)(result + 16);
      v8 = *(_QWORD *)(result + 24);
      if (v9 >= v8 >> 1)
      {
        v12 = *(v4 - 1);
        v13 = *(v4 - 2);
        v11 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v7 = v11;
        v6 = v12;
        v5 = v13;
        result = v15;
      }
      *(_QWORD *)(result + 16) = v9 + 1;
      v10 = (_OWORD *)(result + 48 * v9);
      v10[2] = v5;
      v10[3] = v6;
      v10[4] = v7;
      v4 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_SSs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i36V04makeF3Defs13OpaquePointerVyFSSAF5J53Vcfu_32ff38342fabfe801430b9473eed3cf0a7AKSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v4 += 18;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_s6UInt32Vs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i2V5j3Vs6k11VIgnd_AhJs5l27OIegnrzr_TR04_s10a5Kit12cd5O84A10e2E8f46V04makeF3Defs13OpaquePointerVyF19parentIndexAsh11L_ys0N0VAF5G2VFTf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v8;
    v4 = (_BYTE *)(a1 + 56);
    do
    {
      if ((*v4 & 1) != 0)
      {
        LODWORD(v5) = -1;
      }
      else
      {
        v5 = *((_QWORD *)v4 - 1);
        if ((v5 & 0x8000000000000000) != 0 || HIDWORD(v5))
        {
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_DWORD *)(result + 4 * v7 + 32) = v5;
      v4 += 144;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_So13simd_float4x4as5NeverOTg504_s10d5Kit12fg5C0A10h2E8i52V04makeF3Defs13OpaquePointerVyFSo13simd_float4x4aAF5J54Vcfu0_33_0726f9e9ce90d24234b92dbbc5354476AmKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v16;
    v4 = (__int128 *)(a1 + 112);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      v17 = result;
      v10 = *(_QWORD *)(result + 16);
      v9 = *(_QWORD *)(result + 24);
      if (v10 >= v9 >> 1)
      {
        v14 = *(v4 - 2);
        v15 = *(v4 - 3);
        v12 = *v4;
        v13 = *(v4 - 1);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v8 = v12;
        v7 = v13;
        v6 = v14;
        v5 = v15;
        result = v17;
      }
      *(_QWORD *)(result + 16) = v10 + 1;
      v11 = (_OWORD *)(result + (v10 << 6));
      v11[2] = v5;
      v11[3] = v6;
      v11[4] = v7;
      v11[5] = v8;
      v4 += 9;
      --v2;
    }
    while (v2);
  }
  return result;
}

_BYTE *MeshResource._Proto_LevelOptions_v1.init(levelStrategy:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t specialized MeshBufferDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  _UNKNOWN **v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;

  outlined init with take of Transform?(a1, (uint64_t)&v23, &demangling cache variable for type metadata for MeshBuffer<MeshJointInfluence>?);
  v8 = v23;
  if (v23)
  {
    v17 = v25;
    v18 = v24;
    v16 = v26;
    v15 = v27;
    v9 = v28;
    v10 = v29;
    v11 = v30;
    v19 = v31;
    *((_QWORD *)&v21 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<MeshJointInfluence>);
    v22 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v12 = swift_allocObject();
    *(_QWORD *)&v20 = v12;
    swift_bridgeObjectRetain_n();
    outlined retain of MeshBuffer<MeshJointInfluence>?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of MeshBuffer<SIMD3<Float>>?);
    if (one-time initialization token for triangleIndices != -1)
      swift_once();
    v13 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != a2 || *(_QWORD *)algn_2551A1378 != a3)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        v13 = 2;
      else
        v13 = v19;
    }
    *(_QWORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 24) = a3;
    *(_BYTE *)(v12 + 32) = a4 & 1;
    *(_BYTE *)(v12 + 33) = HIBYTE(a4) & 1;
    *(_QWORD *)(v12 + 40) = v11;
    *(_BYTE *)(v12 + 48) = v13;
    *(_BYTE *)(v12 + 49) = v9;
    *(_BYTE *)(v12 + 50) = v10;
    *(_QWORD *)(v12 + 56) = v8;
    *(_OWORD *)(v12 + 64) = v18;
    *(_OWORD *)(v12 + 80) = v17;
    *(_OWORD *)(v12 + 96) = v16;
    *(_QWORD *)(v12 + 112) = v15;
    *(_BYTE *)(v12 + 120) = v9;
    *(_BYTE *)(v12 + 121) = v10;
    *(_QWORD *)(v12 + 128) = v11;
    *(_BYTE *)(v12 + 136) = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v20, a2, a3, a4 & 0x101);
    outlined retain of MeshBuffer<MeshJointInfluence>?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of MeshBuffer<SIMD3<Float>>?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    return specialized Dictionary.subscript.setter((uint64_t)&v20, a2, a3, a4 & 0x101);
  }
}

double MeshResource.Part.triangleIndices.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9[2];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = *v1;
  if (*(_QWORD *)(v3 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6972547865646E69, 0xEE0073656C676E61, 0), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v9);
    outlined init with take of BindableDataInternal(v9, (uint64_t)v10);
    v6 = v11;
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 56))(MEMORY[0x24BEE44F0], v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t MeshResource.Part.buffers.getter()
{
  uint64_t *v0;

  return specialized _NativeDictionary.mapValues<A>(_:)(*v0);
}

uint64_t MeshResource.Part.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized MeshResource.Part.subscript.setter(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t MeshResource.Part.skeletonID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;

  v10 = a4;
  v11 = a3;
  v12 = a2;
  v54 = a1;
  *(_QWORD *)&v55 = a2;
  *((_QWORD *)&v55 + 1) = MEMORY[0x24BEE4AF8];
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(a4 + 16);
  swift_bridgeObjectRetain();
  if (v15 != v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)logger);
    swift_bridgeObjectRetain();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v56 = v34;
      *(_DWORD *)v33 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v12, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v31, v32, "Expected all joint arrays for skeleton '%s' to have the same count", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v34, -1, -1);
      MEMORY[0x220772F44](v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *v41 = xmmword_21BE67DE0;
    swift_willThrow();
LABEL_25:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v48 = v7;
  v49 = a1;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0, MEMORY[0x24BEE4AF8]);
  *((_QWORD *)&v55 + 1) = result;
  v18 = *(_QWORD *)(v11 + 16);
  if (!v18)
  {
LABEL_15:
    v35 = MEMORY[0x24BEE4AF8];
    if (a6)
      v36 = a6;
    else
      v36 = MEMORY[0x24BEE4AF8];
    v37 = v10;
    v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s6UInt32Vs5NeverOTg506_sSis6d12VIgyd_SiABs5e184OIegnrzr_TR0166_s10RealityKit12MeshResourceC0A10FoundationE8SkeletonV2id10jointNames15inverseBindPose09localRestL013parentIndicesAFSS_SaySSGSaySo13simd_float4x4aGSayAA9TransformVGSgu21I43GSgtKcfc0H13IndexToA11L_ys0V0VSiFTf3nnnpf_nTf1cn_n(v36);
    swift_bridgeObjectRelease();
    if (a5)
      v39 = a5;
    else
      v39 = v35;
    v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit9TransformVG_So5RESRTas5NeverOTg504_s10d142Kit12MeshResourceC0A10FoundationE8SkeletonV2id10jointNames15inverseBindPose09localRestL013parentIndicesAFSS_SaySSGSaySo13simd_float4x4aGSayAA9f4VGSgZ74SiGSgtKcfcSo5RESRTaAQcfu2_33_00c2e038d769be1530659e2383c6619cAqWTf3nnnpk_nTf1cn_n(v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized static MeshResource.Skeleton.withValidatedSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:_:)(v49, v12, v11, v38, v37, v40, v11, (uint64_t)&v54);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    if (!v48)
    {
      *(_QWORD *)a7 = v54;
      *(_OWORD *)(a7 + 8) = v55;
      return result;
    }
    goto LABEL_25;
  }
  if (v18 <= *(_QWORD *)(v10 + 16))
  {
    v19 = (_QWORD *)result;
    v43 = a5;
    v46 = a7;
    v47 = v12;
    v44 = v10;
    v45 = v11;
    v20 = (uint64_t *)(v11 + 40);
    v21 = (__int128 *)(v10 + 80);
    do
    {
      v22 = *(v20 - 1);
      v23 = *v20;
      v52 = *(v21 - 2);
      v53 = *(v21 - 3);
      v50 = *v21;
      v51 = *(v21 - 1);
      v24 = one-time initialization token for identity;
      swift_bridgeObjectRetain();
      if (v24 != -1)
        swift_once();
      v25 = static simd_quatf.identity;
      v27 = v19[2];
      v26 = v19[3];
      if (v27 >= v26 >> 1)
      {
        v42 = static simd_quatf.identity;
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v19);
        v25 = v42;
        v19 = v29;
      }
      v19[2] = v27 + 1;
      v28 = &v19[18 * v27];
      v28[4] = v22;
      v28[5] = v23;
      v28[6] = 0;
      *((_BYTE *)v28 + 56) = 1;
      *((_OWORD *)v28 + 4) = v53;
      *((_OWORD *)v28 + 5) = v52;
      *((_OWORD *)v28 + 6) = v51;
      *((_OWORD *)v28 + 7) = v50;
      *((_OWORD *)v28 + 8) = xmmword_21BE41210;
      *((_OWORD *)v28 + 9) = v25;
      v28[20] = 0;
      v28[21] = 0;
      v20 += 2;
      v21 += 4;
      --v18;
    }
    while (v18);
    *((_QWORD *)&v55 + 1) = v19;
    a7 = v46;
    v12 = v47;
    v10 = v44;
    v11 = v45;
    a5 = v43;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t MeshResource.Part.jointInfluences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[4];
  __int128 v49[2];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  v3 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v4 = *((unsigned int *)v1 + 10);
    v5 = *((_BYTE *)v1 + 44);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001FLL, 0x800000021BE81900, 0);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v6, (uint64_t)v49);
      outlined init with take of BindableDataInternal(v49, (uint64_t)&v35);
      v8 = v37;
      __swift_project_boxed_opaque_existential_1(&v35, v37);
      (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, _QWORD, _QWORD))(*((_QWORD *)&v8 + 1) + 56))(&v50, &type metadata for MeshJointInfluence, v8, *((_QWORD *)&v8 + 1));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v50;
      if (v50)
      {
        v11 = *((_QWORD *)&v51 + 1);
        v10 = v51;
        v13 = *((_QWORD *)&v52 + 1);
        v12 = v52;
        v15 = *((_QWORD *)&v53 + 1);
        v14 = v53;
        v16 = v54;
        v17 = v56;
        v18 = v57;
        v19 = BYTE1(v55) & 1;
        if (*(_QWORD *)(v3 + 16))
        {
          v28 = BYTE1(v55) & 1;
          v29 = v51;
          v30 = v52;
          v31 = v57;
          v32 = v56;
          v33 = v53;
          v34 = v54;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v20 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000023, 0x800000021BE81920, 0);
          if ((v21 & 1) != 0)
          {
            outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v20, (uint64_t)v49);
            outlined init with take of BindableDataInternal(v49, (uint64_t)&v35);
            v27 = v4;
            v23 = *((_QWORD *)&v37 + 1);
            v22 = v37;
            __swift_project_boxed_opaque_existential_1(&v35, v37);
            v24 = *(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(v23 + 56);
            v25 = v23;
            v4 = v27;
            v24(&v50, MEMORY[0x24BEE3F88], v22, v25);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v15 = *((_QWORD *)&v33 + 1);
            v16 = v34;
            v17 = v32;
            v14 = v33;
            v18 = v31;
            v13 = *((_QWORD *)&v30 + 1);
            v12 = v30;
            v11 = *((_QWORD *)&v29 + 1);
            v10 = v29;
            v19 = v28;
            if (v50)
            {
              v35 = v9;
              v36 = v29;
              v37 = v30;
              v38 = v33;
              v39 = v34;
              v40 = BYTE8(v8);
              v41 = v28;
              v42 = v32;
              v43 = v31;
              v44 = v50;
              v45 = v51;
              v46 = v52;
              v47 = v53;
              v48[0] = v54;
              v48[1] = v55 & 0x1FF;
              v48[2] = v56;
              LOBYTE(v48[3]) = v57 | 0x80;
LABEL_15:
              destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(&v35, v10);
              return outlined init with take of Transform?((uint64_t)&v35, a1, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v15 = *((_QWORD *)&v33 + 1);
            v16 = v34;
            v17 = v32;
            v14 = v33;
            v18 = v31;
            v13 = *((_QWORD *)&v30 + 1);
            v12 = v30;
            v11 = *((_QWORD *)&v29 + 1);
            v10 = v29;
            v19 = v28;
          }
        }
        if ((v5 & 1) == 0)
        {
          v35 = v9;
          *(_QWORD *)&v36 = v10;
          *((_QWORD *)&v36 + 1) = v11;
          *(_QWORD *)&v37 = v12;
          *((_QWORD *)&v37 + 1) = v13;
          *(_QWORD *)&v38 = v14;
          *((_QWORD *)&v38 + 1) = v15;
          v39 = v16;
          v40 = BYTE8(v8);
          v41 = v19;
          v42 = v17;
          v43 = v18;
          v44 = v4;
          v45 = 0u;
          v46 = 0u;
          v47 = 0u;
          memset(v48, 0, 25);
          goto LABEL_15;
        }
        outlined consume of MeshBuffer<SIMD3<Float>>?(v9);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  _s10RealityKit12MeshResourceC0A10FoundationE15JointInfluencesVSgWOi0_(&v35);
  return outlined init with take of Transform?((uint64_t)&v35, a1, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
}

uint64_t MeshResource.Part.skeletonID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

double specialized MeshResource.Part.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  return specialized MeshResource.Part.subscript.getter(a1, a2, a3, (uint64_t)&type metadata for MeshJointInfluence, a4);
}

{
  return specialized MeshResource.Part.subscript.getter(a1, a2, a3, MEMORY[0x24BEE3F88], a4);
}

double specialized MeshResource.Part.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  __int16 v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v7 = *v5;
  if (*(_QWORD *)(v7 + 16))
  {
    v11 = a3 & 0x101;
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, v11);
    if ((v13 & 1) != 0)
    {
      outlined init with copy of __REAssetService(*(_QWORD *)(v7 + 56) + 40 * v12, (uint64_t)&v17);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v18 + 1))
      {
        outlined init with take of BindableDataInternal(&v17, (uint64_t)v20);
        v14 = v21;
        v15 = v22;
        __swift_project_boxed_opaque_existential_1(v20, v21);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 56))(a4, v14, v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        return result;
      }
    }
    else
    {
      v19 = 0;
      v17 = 0u;
      v18 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v17, &demangling cache variable for type metadata for MeshBufferErased?);
  *(_BYTE *)(a5 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  return result;
}

double MeshResource.Part.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return MeshBufferDictionary.subscript.getter(*v3, a1, a2, a3);
}

uint64_t MeshResource._Proto_ScreenAreaLevelStrategyData_v1.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 2139095040;
  return result;
}

unint64_t MeshResource.Part.init(id:materialIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 16) = a2;
  *(_DWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 44) = 1;
  *(_QWORD *)(a4 + 48) = a3;
  *(_BYTE *)(a4 + 56) = 0;
  return result;
}

uint64_t MeshModelCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MeshModelCollection.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t result;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (_QWORD *)specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_27:
    result = swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v5;
    return result;
  }
  v7 = (uint64_t *)(a1 + 72);
  while (1)
  {
    v38 = v3;
    v11 = *(v7 - 5);
    v10 = *(v7 - 4);
    v12 = *(v7 - 3);
    v13 = *(v7 - 2);
    v14 = *v7;
    v41 = *(v7 - 1);
    v15 = v5[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v16 = v11;
    swift_bridgeObjectRetain_n();
    v40 = v14;
    swift_bridgeObjectRetain_n();
    v39 = v11;
    if (v15)
    {
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(v5[7] + 8 * v17);
        v3 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_26;
        }
        else
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v38);
          if ((v19 & 0x8000000000000000) != 0)
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        if (v19 >= v3[2])
          goto LABEL_30;
        v9 = &v3[6 * v19 + 9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(v9 - 5) = v39;
        *(v9 - 4) = v10;
        *(v9 - 3) = v12;
        *(v9 - 2) = v13;
        *(v9 - 1) = v41;
        goto LABEL_4;
      }
    }
    v20 = v38[2];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v10);
    v24 = v5[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      break;
    v27 = v22;
    if (v5[3] >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v10);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_31;
      v23 = v28;
    }
    v3 = v38;
    if ((v27 & 1) != 0)
    {
      *(_QWORD *)(v5[7] + 8 * v23) = v20;
    }
    else
    {
      v5[(v23 >> 6) + 8] |= 1 << v23;
      v30 = (uint64_t *)(v5[6] + 16 * v23);
      *v30 = v39;
      v30[1] = v10;
      *(_QWORD *)(v5[7] + 8 * v23) = v20;
      v31 = v5[2];
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (v32)
        goto LABEL_29;
      v5[2] = v33;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
    v35 = v3[2];
    v34 = v3[3];
    if (v35 >= v34 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v3);
    v3[2] = v35 + 1;
    v8 = &v3[6 * v35];
    v8[4] = v39;
    v8[5] = v10;
    v8[6] = v12;
    v8[7] = v13;
    v8[8] = v41;
    v9 = v8 + 9;
LABEL_4:
    v7 += 6;
    *v9 = v40;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!--v6)
      goto LABEL_27;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD v33[6];
  _BYTE v34[8];
  uint64_t v35;

  v4 = v3;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v33, &demangling cache variable for type metadata for MeshResource.Model?);
  v8 = v33[0];
  v7 = v33[1];
  v10 = v33[2];
  v9 = v33[3];
  v12 = v33[4];
  v11 = v33[5];
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v34, &demangling cache variable for type metadata for MeshResource.Model?);
  if (v35)
  {
    v30 = v8;
    v13 = v3[1];
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v14 || (v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v16 & 1) == 0))
    {
      v21 = *(_QWORD *)(*v4 + 16);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v32 = v4[1];
      v4[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, a2, a3, isUniquelyReferenced_nonNull_native);
      v4[1] = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = (_QWORD *)*v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v24 = v18[2];
      v23 = v18[3];
      if (v24 >= v23 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v18);
      v18[2] = v24 + 1;
      v25 = &v18[6 * v24];
      v25[4] = v30;
      v25[5] = v7;
      v25[6] = v10;
      v25[7] = v9;
      v25[8] = v12;
      v25[9] = v11;
      goto LABEL_14;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v15);
    v18 = (_QWORD *)*v4;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v18 = (_QWORD *)result;
    }
    if ((v17 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v17 < v18[2])
    {
      v20 = &v18[6 * v17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20[4] = v30;
      v20[5] = v7;
      v20[6] = v10;
      v20[7] = v9;
      v20[8] = v12;
      v20[9] = v11;
LABEL_14:
      swift_bridgeObjectRelease();
      outlined release of MeshResource.Model?(a1);
      result = (uint64_t)outlined release of MeshResource.Model?(a1);
      *v4 = v18;
      return result;
    }
    __break(1u);
  }
  else
  {
    v26 = v3[1];
    if (*(_QWORD *)(v26 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v28 & 1) != 0))
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      specialized Array.remove(at:)(v29, (uint64_t)&v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[7];
  char v36;
  _QWORD v37[9];

  v4 = v3;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v35, &demangling cache variable for type metadata for MeshResource.Part?);
  v8 = v35[0];
  v9 = v35[2];
  v31 = v35[1];
  v32 = v35[3];
  v10 = v35[4];
  v11 = v35[5];
  v33 = v35[6];
  v12 = v36;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v37, &demangling cache variable for type metadata for MeshResource.Part?);
  if (v37[0])
  {
    v30 = v12 & 1;
    v13 = v3[1];
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v14 || (v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v16 & 1) == 0))
    {
      v21 = *(_QWORD *)(*v4 + 16);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = v4[1];
      v4[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, a2, a3, isUniquelyReferenced_nonNull_native);
      v4[1] = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = (_QWORD *)*v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v24 = v18[2];
      v23 = v18[3];
      if (v24 >= v23 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v18);
      v18[2] = v24 + 1;
      v25 = &v18[8 * v24];
      v25[4] = v8;
      v25[5] = v31;
      v25[6] = v9;
      v25[7] = v32;
      v25[8] = v10;
      *((_DWORD *)v25 + 18) = v11;
      *((_BYTE *)v25 + 76) = BYTE4(v11) & 1;
      v25[10] = v33;
      *((_BYTE *)v25 + 88) = v30;
      goto LABEL_13;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v15);
    v18 = (_QWORD *)*v4;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((v17 & 0x8000000000000000) == 0)
        goto LABEL_6;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v18 = (_QWORD *)result;
      if ((v17 & 0x8000000000000000) == 0)
      {
LABEL_6:
        if (v17 < v18[2])
        {
          v20 = &v18[8 * v17];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v20[4] = v8;
          v20[5] = v31;
          v20[6] = v9;
          v20[7] = v32;
          v20[8] = v10;
          *((_DWORD *)v20 + 18) = v11;
          *((_BYTE *)v20 + 76) = BYTE4(v11) & 1;
          v20[10] = v33;
          *((_BYTE *)v20 + 88) = v30;
LABEL_13:
          swift_bridgeObjectRelease();
          outlined release of MeshResource.Part?(a1);
          result = (uint64_t)outlined release of MeshResource.Part?(a1);
          *v4 = v18;
          return result;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v26 = v3[1];
  if (*(_QWORD *)(v26 + 16))
  {
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      specialized Array.remove(at:)(v29, (uint64_t)&v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[12];
  char v42;
  _BYTE v43[8];
  uint64_t v44;

  v4 = v3;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v41, &demangling cache variable for type metadata for MeshResource.Instance?);
  v9 = v41[0];
  v8 = v41[1];
  v10 = v41[3];
  v32 = v41[2];
  v33 = v41[5];
  v34 = v41[7];
  v35 = v41[4];
  v11 = v41[10];
  v36 = v41[9];
  v37 = v41[6];
  v38 = v41[11];
  v39 = v41[8];
  v12 = v42;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v43, &demangling cache variable for type metadata for MeshResource.Instance?);
  if (v44)
  {
    v31 = v12 & 1;
    v13 = v3[1];
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v14 || (v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v16 & 1) == 0))
    {
      v21 = *(_QWORD *)(*v4 + 16);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v40 = v4[1];
      v4[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, a2, a3, isUniquelyReferenced_nonNull_native);
      v4[1] = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = (_QWORD *)*v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v24 = v18[2];
      v23 = v18[3];
      if (v24 >= v23 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v18);
      v18[2] = v24 + 1;
      v25 = &v18[14 * v24];
      v25[4] = v9;
      v25[5] = v8;
      v25[6] = v32;
      v25[7] = v10;
      v25[8] = v35;
      v25[9] = v33;
      v25[10] = v37;
      v25[11] = v34;
      v25[12] = v39;
      v25[13] = v36;
      v25[14] = v11;
      v25[15] = v38;
      *((_BYTE *)v25 + 128) = v31;
      goto LABEL_13;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v15);
    v18 = (_QWORD *)*v4;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((v17 & 0x8000000000000000) == 0)
        goto LABEL_6;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v18 = (_QWORD *)result;
      if ((v17 & 0x8000000000000000) == 0)
      {
LABEL_6:
        v30 = v11;
        if (v17 < v18[2])
        {
          v20 = &v18[14 * v17];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v20[4] = v9;
          v20[5] = v8;
          v20[6] = v32;
          v20[7] = v10;
          v20[8] = v35;
          v20[9] = v33;
          v20[10] = v37;
          v20[11] = v34;
          v20[12] = v39;
          v20[13] = v36;
          v20[14] = v30;
          v20[15] = v38;
          *((_BYTE *)v20 + 128) = v31;
LABEL_13:
          swift_bridgeObjectRelease();
          outlined release of MeshResource.Instance?(a1);
          result = (uint64_t)outlined release of MeshResource.Instance?(a1);
          *v4 = v18;
          return result;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v26 = v3[1];
  if (*(_QWORD *)(v26 + 16))
  {
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      specialized Array.remove(at:)(v29, (uint64_t)&v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized OrderedIdentifiableCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[6];

  v4 = v3;
  outlined init with copy of (Int, URL)(a1, (uint64_t)&v28, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
  if (*((_QWORD *)&v28 + 1))
  {
    v34[2] = v30;
    v34[3] = v31;
    v34[4] = v32;
    v34[5] = v33;
    v34[0] = v28;
    v34[1] = v29;
    v8 = v3[1];
    if (!*(_QWORD *)(v8 + 16) || (v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v10 & 1) == 0))
    {
      v15 = *(_QWORD *)(*v4 + 16);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v28 = v4[1];
      v4[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, a2, a3, isUniquelyReferenced_nonNull_native);
      v4[1] = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v34, (uint64_t)&v28);
      v14 = (_QWORD *)*v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v18 = v14[2];
      v17 = v14[3];
      if (v18 >= v17 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v14);
      v14[2] = v18 + 1;
      v19 = &v14[12 * v18];
      v20 = v29;
      v19[2] = v28;
      v19[3] = v20;
      v21 = v30;
      v22 = v31;
      v23 = v33;
      v19[6] = v32;
      v19[7] = v23;
      v19[4] = v21;
      v19[5] = v22;
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    v12 = (_QWORD *)*v4;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v4 = (uint64_t)v12;
    if ((result & 1) != 0)
    {
      if ((v11 & 0x8000000000000000) == 0)
        goto LABEL_6;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      v12 = (_QWORD *)result;
      *v4 = result;
      if ((v11 & 0x8000000000000000) == 0)
      {
LABEL_6:
        if (v11 < v12[2])
        {
          outlined assign with copy of MeshResource._Proto_Level_v1(v34, &v12[12 * v11 + 4]);
          v14 = (_QWORD *)*v4;
LABEL_13:
          swift_bridgeObjectRelease();
          *v4 = (uint64_t)v14;
LABEL_14:
          outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
          return outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v34);
        }
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v28, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
  v24 = v3[1];
  if (*(_QWORD *)(v24 + 16))
  {
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v26 & 1) != 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      specialized Array.remove(at:)(v27, v34);
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
}

uint64_t specialized OrderedIdentifiableCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;

  v6 = v5;
  if (a2)
  {
    v12 = v5[1];
    v13 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v13 || (v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5), (v15 & 1) == 0))
    {
      v20 = *(_QWORD *)(*v6 + 16);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v29 = v6[1];
      v6[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, a4, a5, isUniquelyReferenced_nonNull_native);
      v6[1] = v29;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = (_QWORD *)*v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v23 = v17[2];
      v22 = v17[3];
      if (v23 >= v22 >> 1)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v17);
      v17[2] = v23 + 1;
      v24 = &v17[3 * v23];
      v24[4] = a1;
      v24[5] = a2;
      v24[6] = a3;
      goto LABEL_13;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v14);
    v17 = (_QWORD *)*v6;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((v16 & 0x8000000000000000) == 0)
        goto LABEL_6;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      v17 = (_QWORD *)result;
      if ((v16 & 0x8000000000000000) == 0)
      {
LABEL_6:
        if (v16 < v17[2])
        {
          v19 = &v17[3 * v16];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v19[4] = a1;
          v19[5] = a2;
          v19[6] = a3;
LABEL_13:
          swift_bridgeObjectRelease();
          outlined consume of NotificationAction?(a1, a2);
          result = outlined consume of NotificationAction?(a1, a2);
          *v6 = v17;
          return result;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v25 = v5[1];
  if (!*(_QWORD *)(v25 + 16))
    return swift_bridgeObjectRelease();
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v27 & 1) == 0)
    return swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
  specialized Dictionary._Variant.removeValue(forKey:)(a4, a5);
  specialized Array.remove(at:)(v28, (uint64_t)&v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MeshModelCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  v6 = v3[1];
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_7;
  v8 = result;
  v9 = *v4;
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v10 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_7:
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(_QWORD *)(v9 + 16))
  {
    v12 = (_QWORD *)(v9 + 48 * v11);
    v13 = v12[5];
    v14 = v12[6];
    v15 = v12[7];
    v16 = v12[8];
    v17 = v12[9];
    *(_QWORD *)a3 = v12[4];
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v14;
    *(_QWORD *)(a3 + 24) = v15;
    *(_QWORD *)(a3 + 32) = v16;
    *(_QWORD *)(a3 + 40) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t MeshModelCollection.insert(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15[6];

  v2 = v1;
  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = v1[1];
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_7;
  v10 = *v2;
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v15[0] = v4;
    v15[1] = v3;
    v15[2] = v5;
    v15[3] = v6;
    v15[4] = v7;
    v15[5] = v8;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v15, v4, v3);
    return 1;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * result);
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v14 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    if (v13 < v14)
      return 0;
  }
  __break(1u);
  return result;
}

uint64_t MeshModelCollection.update(_:)@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v5, *(uint64_t *)&v5[0], *((uint64_t *)&v5[0] + 1), a2);
  swift_bridgeObjectRelease();
  return outlined release of MeshResource.Model((uint64_t)v5);
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v5 = v4;
  v10 = v4[1];
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_9;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0)
    goto LABEL_9;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v38 = v5[1];
  v5[1] = 0x8000000000000000;
  v15 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, a2, a3, isUniquelyReferenced_nonNull_native);
  LOBYTE(v13) = v16;
  v5[1] = v38;
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    v17 = (_QWORD *)*v5;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((v15 & 0x8000000000000000) == 0)
        goto LABEL_6;
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  else
  {
LABEL_9:
    v24 = *(_QWORD *)(*v5 + 16);
    swift_bridgeObjectRetain();
    v25 = swift_isUniquelyReferenced_nonNull_native();
    v39 = v5[1];
    v5[1] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, a2, a3, v25);
    v5[1] = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = *v5;
    outlined retain of MeshResource.Model((uint64_t)a1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
    v27 = *(_QWORD *)(v15 + 16);
    v26 = *(_QWORD *)(v15 + 24);
    v17 = (_QWORD *)(v27 + 1);
    if (v27 >= v26 >> 1)
      v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, (_QWORD *)v15);
    *(_QWORD *)(v15 + 16) = v17;
    v28 = (_OWORD *)(v15 + 32 + 48 * v27);
    v29 = *a1;
    v30 = a1[2];
    v28[1] = a1[1];
    v28[2] = v30;
    *v28 = v29;
    *v5 = v15;
    v31 = *(_QWORD *)(v15 + 16);
    if (v31)
    {
      v32 = v15 + 32 + 48 * v31;
      v23 = (_QWORD *)(v32 - 48);
      v20 = v32 - 32;
      v19 = v32 - 16;
      goto LABEL_15;
    }
    __break(1u);
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  v17 = (_QWORD *)result;
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_18;
LABEL_6:
  if (v15 >= v17[2])
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v19 = (uint64_t)&v17[6 * v15 + 8];
  v20 = (uint64_t)&v17[6 * v15 + 6];
  outlined retain of MeshResource.Model((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v21 = *a1;
  v22 = a1[1];
  *(_OWORD *)v19 = a1[2];
  *(_OWORD *)v20 = v22;
  *(_OWORD *)(v19 - 32) = v21;
  *v5 = (unint64_t)v17;
  if (v15 < v17[2])
  {
    v23 = &v17[6 * v15 + 4];
LABEL_15:
    v34 = *(_QWORD *)v20;
    v33 = *(_QWORD *)(v20 + 8);
    v35 = v23[1];
    v36 = *(_QWORD *)v19;
    v37 = *(_QWORD *)(v19 + 8);
    *a4 = *v23;
    a4[1] = v35;
    a4[2] = v34;
    a4[3] = v33;
    a4[4] = v36;
    a4[5] = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  char v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;

  v5 = v4;
  v6 = (_QWORD *)a3;
  v7 = a2;
  v10 = v4[1];
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_9;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0)
    goto LABEL_9;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v41 = v5[1];
  v5[1] = 0x8000000000000000;
  v15 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, v7, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  LOBYTE(v13) = v16;
  v5[1] = v41;
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    goto LABEL_9;
  v6 = (_QWORD *)*v5;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_17;
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
  }
  else
  {
    while (v15 < v6[2])
    {
      v18 = &v6[8 * v15];
      v20 = v18[4];
      v19 = (uint64_t)(v18 + 4);
      v7 = v20;
      outlined retain of MeshResource.Part((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = *a1;
      v22 = a1[1];
      v23 = a1[2];
      *(_OWORD *)(v19 + 41) = *(__int128 *)((char *)a1 + 41);
      *(_OWORD *)(v19 + 16) = v22;
      *(_OWORD *)(v19 + 32) = v23;
      *(_OWORD *)v19 = v21;
      *v5 = (unint64_t)v6;
      if (v15 < v6[2])
        goto LABEL_15;
      __break(1u);
LABEL_9:
      v24 = *(_QWORD *)(*v5 + 16);
      swift_bridgeObjectRetain();
      v25 = swift_isUniquelyReferenced_nonNull_native();
      v42 = v5[1];
      v5[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v7, (uint64_t)v6, v25);
      v5[1] = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = *v5;
      outlined retain of MeshResource.Part((uint64_t)a1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
      v27 = *(_QWORD *)(v15 + 16);
      v26 = *(_QWORD *)(v15 + 24);
      v6 = (_QWORD *)(v27 + 1);
      if (v27 >= v26 >> 1)
        v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, (_QWORD *)v15);
      *(_QWORD *)(v15 + 16) = v6;
      v28 = (_OWORD *)(v15 + 32 + (v27 << 6));
      v29 = *a1;
      v30 = a1[1];
      v31 = a1[2];
      *(_OWORD *)((char *)v28 + 41) = *(__int128 *)((char *)a1 + 41);
      v28[1] = v30;
      v28[2] = v31;
      *v28 = v29;
      *v5 = v15;
      v32 = *(_QWORD *)(v15 + 16);
      if (v32)
      {
        v19 = v15 + 32 + (v32 << 6) - 64;
LABEL_15:
        v33 = *(_QWORD *)(v19 + 48);
        v34 = *(_BYTE *)(v19 + 44);
        v35 = *(_DWORD *)(v19 + 40);
        v37 = *(_QWORD *)(v19 + 24);
        v36 = *(_QWORD *)(v19 + 32);
        v38 = *(_QWORD *)(v19 + 8);
        v39 = *(_QWORD *)(v19 + 16);
        v40 = *(_BYTE *)(v19 + 56);
        *(_QWORD *)a4 = *(_QWORD *)v19;
        *(_QWORD *)(a4 + 8) = v38;
        *(_QWORD *)(a4 + 16) = v39;
        *(_QWORD *)(a4 + 24) = v37;
        *(_QWORD *)(a4 + 32) = v36;
        *(_DWORD *)(a4 + 40) = v35;
        *(_BYTE *)(a4 + 44) = v34;
        *(_QWORD *)(a4 + 48) = v33;
        *(_BYTE *)(a4 + 56) = v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return swift_bridgeObjectRetain();
      }
      __break(1u);
LABEL_17:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      v6 = (_QWORD *)result;
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[6];

  v5 = v4;
  v10 = v4[1];
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_9;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0)
    goto LABEL_9;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v28[0] = v5[1];
  v5[1] = 0x8000000000000000;
  v15 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, a2, a3, isUniquelyReferenced_nonNull_native);
  LOBYTE(v13) = v16;
  v5[1] = *(_QWORD *)&v28[0];
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    v17 = *v5;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v5 = v17;
    if ((result & 1) != 0)
    {
      if ((v15 & 0x8000000000000000) == 0)
        goto LABEL_6;
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
LABEL_9:
    v19 = *(_QWORD *)(*v5 + 16);
    swift_bridgeObjectRetain();
    v20 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v28[0] = v5[1];
    v5[1] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, a2, a3, v20);
    v5[1] = *(_QWORD *)&v28[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)a1, (uint64_t)v28);
    v15 = *v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
    v17 = *(_QWORD *)(v15 + 16);
    v21 = *(_QWORD *)(v15 + 24);
    a1 = (_QWORD *)(v17 + 1);
    if (v17 >= v21 >> 1)
      v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v17 + 1, 1, (_QWORD *)v15);
    *(_QWORD *)(v15 + 16) = a1;
    v22 = (_OWORD *)(v15 + 32 + 96 * v17);
    v23 = v28[1];
    *v22 = v28[0];
    v22[1] = v23;
    v24 = v28[2];
    v25 = v28[3];
    v26 = v28[5];
    v22[4] = v28[4];
    v22[5] = v26;
    v22[2] = v24;
    v22[3] = v25;
    *v5 = v15;
    v27 = *(_QWORD *)(v15 + 16);
    if (v27)
      return outlined init with copy of MeshResource._Proto_Level_v1(v15 + 32 + 96 * v27 - 96, a4);
    __break(1u);
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v17);
  v17 = result;
  *v5 = result;
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_17;
LABEL_6:
  if (v15 < *(_QWORD *)(v17 + 16))
  {
    result = (uint64_t)outlined assign with copy of MeshResource._Proto_Level_v1(a1, (_QWORD *)(v17 + 96 * v15 + 32));
    if (v15 < *(_QWORD *)(*v5 + 16))
      return outlined init with copy of MeshResource._Proto_Level_v1(*v5 + 96 * v15 + 32, a4);
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;

  v5 = v4;
  v10 = v4[1];
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_9;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0)
    goto LABEL_9;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v46 = v5[1];
  v5[1] = 0x8000000000000000;
  v15 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, a2, a3, isUniquelyReferenced_nonNull_native);
  LOBYTE(v13) = v16;
  v5[1] = v46;
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    v17 = (_QWORD *)*v5;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((v15 & 0x8000000000000000) == 0)
        goto LABEL_6;
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  else
  {
LABEL_9:
    v26 = *(_QWORD *)(*v5 + 16);
    swift_bridgeObjectRetain();
    v27 = swift_isUniquelyReferenced_nonNull_native();
    v47 = v5[1];
    v5[1] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, a2, a3, v27);
    v5[1] = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = *v5;
    outlined retain of IKRig.Constraint(a1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
    v29 = *(_QWORD *)(v15 + 16);
    v28 = *(_QWORD *)(v15 + 24);
    v17 = (_QWORD *)(v29 + 1);
    if (v29 >= v28 >> 1)
      v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, (_QWORD *)v15);
    *(_QWORD *)(v15 + 16) = v17;
    v30 = v15 + 32 + 112 * v29;
    v31 = *(_OWORD *)a1;
    v32 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)v30 = v31;
    v33 = *(_OWORD *)(a1 + 48);
    v34 = *(_OWORD *)(a1 + 64);
    v35 = *(_OWORD *)(a1 + 80);
    *(_BYTE *)(v30 + 96) = *(_BYTE *)(a1 + 96);
    *(_OWORD *)(v30 + 64) = v34;
    *(_OWORD *)(v30 + 80) = v35;
    *(_OWORD *)(v30 + 48) = v33;
    *v5 = v15;
    v36 = *(_QWORD *)(v15 + 16);
    if (v36)
    {
      v25 = v15 + 32 + 112 * v36 - 112;
      goto LABEL_15;
    }
    __break(1u);
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  v17 = (_QWORD *)result;
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_18;
LABEL_6:
  if (v15 >= v17[2])
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v19 = &v17[14 * v15];
  outlined retain of IKRig.Constraint(a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v20 = *(_OWORD *)a1;
  v21 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v19 + 3) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v19 + 4) = v21;
  *((_OWORD *)v19 + 2) = v20;
  v22 = *(_OWORD *)(a1 + 48);
  v23 = *(_OWORD *)(a1 + 64);
  v24 = *(_OWORD *)(a1 + 80);
  *((_BYTE *)v19 + 128) = *(_BYTE *)(a1 + 96);
  *((_OWORD *)v19 + 6) = v23;
  *((_OWORD *)v19 + 7) = v24;
  *((_OWORD *)v19 + 5) = v22;
  *v5 = (unint64_t)v17;
  if (v15 < v17[2])
  {
    v25 = (uint64_t)(v19 + 4);
LABEL_15:
    v38 = *(_OWORD *)(v25 + 64);
    v37 = *(_OWORD *)(v25 + 80);
    v40 = *(_OWORD *)(v25 + 32);
    v39 = *(_OWORD *)(v25 + 48);
    v41 = *(_QWORD *)(v25 + 16);
    v42 = *(_QWORD *)(v25 + 24);
    v44 = *(_QWORD *)v25;
    v43 = *(_QWORD *)(v25 + 8);
    v45 = *(_BYTE *)(v25 + 96);
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v43;
    *(_QWORD *)(a4 + 16) = v41;
    *(_QWORD *)(a4 + 24) = v42;
    *(_OWORD *)(a4 + 32) = v40;
    *(_OWORD *)(a4 + 48) = v39;
    *(_OWORD *)(a4 + 64) = v38;
    *(_OWORD *)(a4 + 80) = v37;
    *(_BYTE *)(a4 + 96) = v45;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t *v6;
  unint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  char v20;
  uint64_t result;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v7 = v6;
  v8 = (_QWORD *)a5;
  v9 = (_QWORD *)a4;
  v14 = v6[1];
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_9;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v16 & 1) == 0)
    goto LABEL_9;
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v33 = v7[1];
  v7[1] = 0x8000000000000000;
  v19 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v17, (uint64_t)v9, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  LOBYTE(v17) = v20;
  v7[1] = v33;
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
    goto LABEL_9;
  v8 = (_QWORD *)*v7;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_17;
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
  }
  else
  {
    while (v19 < v8[2])
    {
      v9 = &v8[3 * v19];
      v22 = v9 + 6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9[4] = a1;
      v23 = v9 + 4;
      v9[5] = a2;
      v9[6] = a3;
      *v7 = (unint64_t)v8;
      if (v19 < v8[2])
        goto LABEL_15;
      __break(1u);
LABEL_9:
      v24 = *(_QWORD *)(*v7 + 16);
      swift_bridgeObjectRetain();
      v25 = swift_isUniquelyReferenced_nonNull_native();
      v34 = v7[1];
      v7[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, (uint64_t)v9, (uint64_t)v8, v25);
      v7[1] = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = *v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
      v27 = *(_QWORD *)(v19 + 16);
      v26 = *(_QWORD *)(v19 + 24);
      v8 = (_QWORD *)(v27 + 1);
      if (v27 >= v26 >> 1)
        v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, (_QWORD *)v19);
      *(_QWORD *)(v19 + 16) = v8;
      v28 = (_QWORD *)(v19 + 32 + 24 * v27);
      *v28 = a1;
      v28[1] = a2;
      v28[2] = a3;
      *v7 = v19;
      v29 = *(_QWORD *)(v19 + 16);
      if (v29)
      {
        v30 = v19 + 32 + 24 * v29;
        v23 = (_QWORD *)(v30 - 24);
        v22 = (uint64_t *)(v30 - 8);
LABEL_15:
        v31 = v23[1];
        v32 = *v22;
        *a6 = *v23;
        a6[1] = v31;
        a6[2] = v32;
        swift_bridgeObjectRetain();
        return swift_bridgeObjectRetain();
      }
      __break(1u);
LABEL_17:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      v8 = (_QWORD *)result;
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t MeshModelCollection.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = v4[1];
    v20 = v12;
    v4[1] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v12 = v20;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    v4[1] = v12;
    result = swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(_QWORD *)(*v4 + 16))
    {
      v14 = (_QWORD *)(*v4 + 48 * v13);
      v15 = v14[5];
      v16 = v14[6];
      v17 = v14[7];
      v18 = v14[8];
      v19 = v14[9];
      *a3 = v14[4];
      a3[1] = v15;
      a3[2] = v16;
      a3[3] = v17;
      a3[4] = v18;
      a3[5] = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.remove(at:)(v13, (uint64_t)&v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  else
  {
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t MeshModelCollection.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = (_QWORD *)(*v1 + 48 * v2);
    v5 = v4[5];
    v6 = v4[6];
    v7 = v4[7];
    v8 = v4[8];
    v9 = v4[9];
    *(_QWORD *)a1 = v4[4];
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MeshModelCollection.Iterator@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = (_QWORD *)(*v1 + 48 * v2);
    v5 = v4[5];
    v6 = v4[6];
    v7 = v4[7];
    v8 = v4[8];
    v9 = v4[9];
    *(_QWORD *)a1 = v4[4];
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshModelCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MeshModelCollection(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MeshModelCollection.startIndex.getter()
{
  return 0;
}

unint64_t MeshModelCollection.subscript.getter@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = (_QWORD *)(*(_QWORD *)v2 + 48 * result);
    v4 = v3[5];
    v5 = v3[6];
    v6 = v3[7];
    v7 = v3[8];
    v8 = v3[9];
    *a2 = v3[4];
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
    a2[4] = v7;
    a2[5] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MeshModelCollection(void (***a1)(void **a1), unint64_t *a2))()
{
  void (**v4)(void **);

  v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = MeshModelCollection.subscript.read(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void (*MeshModelCollection.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t v2;
  void (*result)(void **);
  void (*v6)(void **);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = (void (*)(void **))malloc(0x30uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = result;
    v7 = (_QWORD *)(*(_QWORD *)v2 + 48 * a2);
    v8 = v7[5];
    v9 = v7[6];
    v10 = v7[7];
    v11 = v7[8];
    v12 = v7[9];
    *(_QWORD *)v6 = v7[4];
    *((_QWORD *)v6 + 1) = v8;
    *((_QWORD *)v6 + 2) = v9;
    *((_QWORD *)v6 + 3) = v10;
    *((_QWORD *)v6 + 4) = v11;
    *((_QWORD *)v6 + 5) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MeshModelCollection.subscript.read;
  }
  __break(1u);
  return result;
}

void MeshModelCollection.subscript.read(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

double MeshModelCollection.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  MeshModelCollection.init(_:)(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MeshModelCollection@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  MeshModelCollection.init(_:)(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t MeshModelCollection.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource.Model], &lazy protocol witness table cache variable for type [MeshResource.Model] and conformance [A], (unint64_t *)&type metadata for MeshModelCollection, a1);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource.Model], &lazy protocol witness table cache variable for type [MeshResource.Model] and conformance [A], a2);
}

uint64_t MeshPartCollection.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

BOOL MeshPartCollection.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t MeshPartCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MeshPartCollection.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;

  v3 = (_QWORD *)specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_27:
    result = swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v5;
    return result;
  }
  v7 = a1 + 48;
  while (1)
  {
    v11 = *(_QWORD *)(v7 - 16);
    v10 = *(_QWORD *)(v7 - 8);
    v12 = *(_QWORD *)v7;
    v46 = *(_QWORD *)(v7 + 8);
    v13 = *(_QWORD *)(v7 + 16);
    v47 = *(_DWORD *)(v7 + 24);
    v48 = *(_BYTE *)(v7 + 28);
    v14 = *(_QWORD *)(v7 + 32);
    v44 = *(_BYTE *)(v7 + 40);
    v15 = v5[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v45 = v14;
    v49 = v10;
    if (!v15)
      break;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12);
    if ((v17 & 1) == 0)
      break;
    v18 = *(_QWORD *)(v5[7] + 8 * v16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_26;
    }
    else
    {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      if ((v18 & 0x8000000000000000) != 0)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    if (v18 >= v3[2])
      goto LABEL_30;
    v9 = (uint64_t)&v3[8 * v18 + 4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)v9 = v11;
LABEL_4:
    *(_QWORD *)(v9 + 8) = v49;
    *(_QWORD *)(v9 + 16) = v12;
    *(_QWORD *)(v9 + 24) = v46;
    *(_QWORD *)(v9 + 32) = v13;
    *(_DWORD *)(v9 + 40) = v47;
    v7 += 64;
    *(_BYTE *)(v9 + 44) = v19;
    *(_QWORD *)(v9 + 48) = v45;
    *(_BYTE *)(v9 + 56) = v44;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!--v6)
      goto LABEL_27;
  }
  v42 = v3;
  v43 = v6;
  v20 = v11;
  v21 = v3[2];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12);
  v25 = v5[2];
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (!__OFADD__(v25, v26))
  {
    v28 = v23;
    if (v5[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
      v29 = v10;
      if ((v28 & 1) == 0)
      {
LABEL_15:
        v5[(v24 >> 6) + 8] |= 1 << v24;
        v32 = (uint64_t *)(v5[6] + 16 * v24);
        *v32 = v29;
        v32[1] = v12;
        *(_QWORD *)(v5[7] + 8 * v24) = v21;
        v33 = v5[2];
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        if (v34)
          goto LABEL_29;
        v5[2] = v35;
        swift_bridgeObjectRetain();
        goto LABEL_21;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      v29 = v10;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12);
      if ((v28 & 1) != (v31 & 1))
        goto LABEL_31;
      v24 = v30;
      if ((v28 & 1) == 0)
        goto LABEL_15;
    }
    *(_QWORD *)(v5[7] + 8 * v24) = v21;
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v36 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v3 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
    v6 = v43;
    v19 = v48;
    v38 = v3[2];
    v37 = v3[3];
    v39 = v38 + 1;
    if (v38 >= v37 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v3);
    v8 = &v3[8 * v38];
    v8[4] = v36;
    v9 = (uint64_t)(v8 + 4);
    v3[2] = v39;
    goto LABEL_4;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MeshPartCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;

  v4 = v3;
  v6 = v3[1];
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_7;
  v8 = result;
  v9 = *v4;
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v10 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_7:
    *(_OWORD *)(a3 + 41) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(_QWORD *)(v9 + 16))
  {
    v12 = v9 + (v11 << 6);
    v14 = *(_QWORD *)(v12 + 32);
    v13 = *(_QWORD *)(v12 + 40);
    v16 = *(_QWORD *)(v12 + 48);
    v15 = *(_QWORD *)(v12 + 56);
    v17 = *(_QWORD *)(v12 + 64);
    v18 = *(_DWORD *)(v12 + 72);
    v19 = *(_BYTE *)(v12 + 76);
    v20 = *(_QWORD *)(v12 + 80);
    LOBYTE(v12) = *(_BYTE *)(v12 + 88);
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 24) = v15;
    *(_QWORD *)(a3 + 32) = v17;
    *(_DWORD *)(a3 + 40) = v18;
    *(_BYTE *)(a3 + 44) = v19;
    *(_QWORD *)(a3 + 48) = v20;
    *(_BYTE *)(a3 + 56) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t MeshPartCollection.insert(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[7];
  char v21;

  v2 = v1;
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 40);
  v9 = *(unsigned __int8 *)(a1 + 44);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_BYTE *)(a1 + 56);
  v12 = v1[1];
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_7:
    v17 = 0x100000000;
    if (!v9)
      v17 = 0;
    v20[0] = v4;
    v20[1] = v3;
    v20[2] = v5;
    v20[3] = v6;
    v20[4] = v7;
    v20[5] = v17 | v8;
    v20[6] = v10;
    v21 = v11;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v20, v3, v5);
    return 1;
  }
  v18 = *v2;
  v19 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v7 = v19;
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * result);
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v16 = *(_QWORD *)(v18 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease();
    if (v15 < v16)
      return 0;
  }
  __break(1u);
  return result;
}

uint64_t MeshPartCollection.update(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  __int128 v6[2];
  _OWORD v7[2];

  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v7[0] = a1[2];
  *(_OWORD *)((char *)v7 + 9) = *(__int128 *)((char *)a1 + 41);
  v4 = v3;
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v6, *((uint64_t *)&v6[0] + 1), v4, a2);
  swift_bridgeObjectRelease();
  return outlined release of MeshResource.Part((uint64_t)v6);
}

uint64_t MeshPartCollection.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = v4[1];
    v23 = v12;
    v4[1] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v12 = v23;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    v4[1] = v12;
    result = swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(_QWORD *)(*v4 + 16))
    {
      v14 = *v4 + (v13 << 6);
      v16 = *(_QWORD *)(v14 + 32);
      v15 = *(_QWORD *)(v14 + 40);
      v18 = *(_QWORD *)(v14 + 48);
      v17 = *(_QWORD *)(v14 + 56);
      v19 = *(_QWORD *)(v14 + 64);
      v20 = *(_DWORD *)(v14 + 72);
      v21 = *(_BYTE *)(v14 + 76);
      v22 = *(_QWORD *)(v14 + 80);
      LOBYTE(v14) = *(_BYTE *)(v14 + 88);
      *(_QWORD *)a3 = v16;
      *(_QWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 16) = v18;
      *(_QWORD *)(a3 + 24) = v17;
      *(_QWORD *)(a3 + 32) = v19;
      *(_DWORD *)(a3 + 40) = v20;
      *(_BYTE *)(a3 + 44) = v21;
      *(_QWORD *)(a3 + 48) = v22;
      *(_BYTE *)(a3 + 56) = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.remove(at:)(v13, (uint64_t)&v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  else
  {
    *(_OWORD *)(a3 + 41) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t MeshPartCollection.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 41) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + (v2 << 6);
    v6 = *(_QWORD *)(v4 + 32);
    v5 = *(_QWORD *)(v4 + 40);
    v8 = *(_QWORD *)(v4 + 48);
    v7 = *(_QWORD *)(v4 + 56);
    v9 = *(_QWORD *)(v4 + 64);
    v10 = *(_DWORD *)(v4 + 72);
    v11 = *(_BYTE *)(v4 + 76);
    v12 = *(_QWORD *)(v4 + 80);
    LOBYTE(v4) = *(_BYTE *)(v4 + 88);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 44) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = v4;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MeshPartCollection.Iterator@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 41) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + (v2 << 6);
    v6 = *(_QWORD *)(v4 + 32);
    v5 = *(_QWORD *)(v4 + 40);
    v8 = *(_QWORD *)(v4 + 48);
    v7 = *(_QWORD *)(v4 + 56);
    v9 = *(_QWORD *)(v4 + 64);
    v10 = *(_DWORD *)(v4 + 72);
    v11 = *(_BYTE *)(v4 + 76);
    v12 = *(_QWORD *)(v4 + 80);
    LOBYTE(v4) = *(_BYTE *)(v4 + 88);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 44) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = v4;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t MeshPartCollection.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = 0;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshPartCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MeshPartCollection(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MeshPartCollection.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall MeshPartCollection.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

unint64_t MeshPartCollection.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = *(_QWORD *)v2 + (result << 6);
    v5 = *(_QWORD *)(v3 + 32);
    v4 = *(_QWORD *)(v3 + 40);
    v7 = *(_QWORD *)(v3 + 48);
    v6 = *(_QWORD *)(v3 + 56);
    v8 = *(_QWORD *)(v3 + 64);
    v9 = *(_DWORD *)(v3 + 72);
    v10 = *(_BYTE *)(v3 + 76);
    v11 = *(_QWORD *)(v3 + 80);
    LOBYTE(v3) = *(_BYTE *)(v3 + 88);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v8;
    *(_DWORD *)(a2 + 40) = v9;
    *(_BYTE *)(a2 + 44) = v10;
    *(_QWORD *)(a2 + 48) = v11;
    *(_BYTE *)(a2 + 56) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MeshPartCollection(void (***a1)(void **a1), unint64_t *a2))()
{
  void (**v4)(void **);

  v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = MeshPartCollection.subscript.read(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void (*MeshPartCollection.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t v2;
  void (*result)(void **);
  void (*v6)(void **);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;

  result = (void (*)(void **))malloc(0x39uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = result;
    v7 = *(_QWORD *)v2 + (a2 << 6);
    v9 = *(_QWORD *)(v7 + 32);
    v8 = *(_QWORD *)(v7 + 40);
    v11 = *(_QWORD *)(v7 + 48);
    v10 = *(_QWORD *)(v7 + 56);
    v12 = *(_QWORD *)(v7 + 64);
    v13 = *(_DWORD *)(v7 + 72);
    v14 = *(_BYTE *)(v7 + 76);
    v15 = *(_QWORD *)(v7 + 80);
    LOBYTE(v7) = *(_BYTE *)(v7 + 88);
    *(_QWORD *)v6 = v9;
    *((_QWORD *)v6 + 1) = v8;
    *((_QWORD *)v6 + 2) = v11;
    *((_QWORD *)v6 + 3) = v10;
    *((_QWORD *)v6 + 4) = v12;
    *((_DWORD *)v6 + 10) = v13;
    *((_BYTE *)v6 + 44) = v14;
    *((_QWORD *)v6 + 6) = v15;
    *((_BYTE *)v6 + 56) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MeshPartCollection.subscript.read;
  }
  __break(1u);
  return result;
}

void MeshPartCollection.subscript.read(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

double MeshPartCollection.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  MeshPartCollection.init(_:)(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MeshPartCollection@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  MeshPartCollection.init(_:)(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t MeshPartCollection.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource.Part], &lazy protocol witness table cache variable for type [MeshResource.Part] and conformance [A], (unint64_t *)&type metadata for MeshPartCollection, a1);
}

uint64_t MeshModelCollection.customMirror.getter@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v19[6];

  v19[1] = a4;
  v19[2] = a3;
  v19[0] = a2;
  v6 = type metadata accessor for Mirror.AncestorRepresentation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v4;
  v13 = v4[1];
  v19[4] = v14;
  v19[5] = v13;
  v19[3] = v14;
  v15 = *MEMORY[0x24BEE4368];
  v16 = type metadata accessor for Mirror.DisplayStyle();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v12, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE43C0], v6);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(a1);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v19[0], a1, MEMORY[0x24BEE12E0]);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshPartCollection@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource.Part], &lazy protocol witness table cache variable for type [MeshResource.Part] and conformance [A], a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X2>, unint64_t *a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v19[6];

  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a1;
  v6 = type metadata accessor for Mirror.AncestorRepresentation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v4;
  v13 = v4[1];
  v19[4] = v14;
  v19[5] = v13;
  v19[3] = v14;
  v15 = *MEMORY[0x24BEE4368];
  v16 = type metadata accessor for Mirror.DisplayStyle();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v12, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE43C0], v6);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(a2);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v19[0], a2, MEMORY[0x24BEE12E0]);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t _Proto_MeshLevelCollection_v1.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _Proto_MeshLevelCollection_v1.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[6];
  _OWORD v13[6];
  uint64_t v14;
  uint64_t v15;

  v4 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v14 = v4;
  v15 = v5;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = a1 + 32;
    do
    {
      outlined init with copy of MeshResource._Proto_Level_v1(v7, (uint64_t)v13);
      v8 = v13[0];
      v12[2] = v13[2];
      v12[3] = v13[3];
      v12[4] = v13[4];
      v12[5] = v13[5];
      v12[0] = v13[0];
      v12[1] = v13[1];
      swift_bridgeObjectRetain();
      specialized OrderedIdentifiableCollection.subscript.setter((uint64_t)v12, v8, *((uint64_t *)&v8 + 1));
      v7 += 96;
      --v6;
    }
    while (v6);
    result = swift_bridgeObjectRelease();
    v10 = v14;
    v11 = v15;
  }
  else
  {
    v10 = v4;
    v11 = v5;
    result = swift_bridgeObjectRelease();
  }
  *a2 = v10;
  a2[1] = v11;
  return result;
}

unint64_t _Proto_MeshLevelCollection_v1.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  unint64_t v12;

  v8 = *v3;
  v7 = v3[1];
  v9 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (!v9 || (result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v11 & 1) == 0))
  {
    a3[4] = 0u;
    a3[5] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
    return swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * result);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(_QWORD *)(v8 + 16))
  {
    outlined init with copy of MeshResource._Proto_Level_v1(v8 + 96 * v12 + 32, (uint64_t)a3);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t _Proto_MeshLevelCollection_v1.insert(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[6];

  v4 = *a1;
  v3 = a1[1];
  v6 = *v1;
  v5 = v1[1];
  v7 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  if (v7)
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * result);
      if ((v10 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v10 < *(_QWORD *)(v6 + 16))
      {
        outlined init with copy of MeshResource._Proto_Level_v1(v6 + 96 * v10 + 32, (uint64_t)v13);
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v13[0] + 1))
        {
          outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)a1);
          return 0;
        }
        goto LABEL_8;
      }
      __break(1u);
      return result;
    }
  }
  memset(v13, 0, sizeof(v13));
  swift_bridgeObjectRelease();
LABEL_8:
  outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
  v11 = *a1;
  v12 = a1[1];
  outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)a1, (uint64_t)v13);
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.subscript.setter((uint64_t)v13, v11, v12);
  outlined destroy of MeshResource._Proto_Level_v1((uint64_t)a1);
  return 1;
}

uint64_t _Proto_MeshLevelCollection_v1.update(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(a1, v4, v5, a2);
  outlined destroy of MeshResource._Proto_Level_v1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t _Proto_MeshLevelCollection_v1.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  _OWORD v14[6];

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = v4[1];
    *(_QWORD *)&v14[0] = v12;
    v4[1] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v12 = *(_QWORD *)&v14[0];
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    v4[1] = v12;
    result = swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(_QWORD *)(*v4 + 16))
    {
      outlined init with copy of MeshResource._Proto_Level_v1(*v4 + 96 * v13 + 32, (uint64_t)a3);
      specialized Array.remove(at:)(v13, v14);
      return outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v14);
    }
    __break(1u);
  }
  else
  {
    a3[4] = 0u;
    a3[5] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t _Proto_MeshLevelCollection_v1.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    result = outlined init with copy of MeshResource._Proto_Level_v1(*v1 + 96 * v2 + 32, (uint64_t)a1);
    v1[1] = v2 + 1;
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _Proto_MeshLevelCollection_v1.Iterator@<X0>(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    result = outlined init with copy of MeshResource._Proto_Level_v1(*v1 + 96 * v2 + 32, (uint64_t)a1);
    v1[1] = v2 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Proto_MeshLevelCollection_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _Proto_MeshLevelCollection_v1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t _Proto_MeshLevelCollection_v1.startIndex.getter()
{
  return 0;
}

unint64_t _Proto_MeshLevelCollection_v1.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    return outlined init with copy of MeshResource._Proto_Level_v1(*(_QWORD *)v2 + 96 * result + 32, a2);
  }
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _Proto_MeshLevelCollection_v1(void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  uint64_t v2;
  void (*result)(uint64_t *);
  unint64_t v6;

  result = (void (*)(uint64_t *))malloc(0x60uLL);
  *a1 = result;
  v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v6 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    outlined init with copy of MeshResource._Proto_Level_v1(*(_QWORD *)v2 + 96 * v6 + 32, (uint64_t)result);
    return protocol witness for Collection.subscript.read in conformance _Proto_MeshLevelCollection_v1;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance _Proto_MeshLevelCollection_v1(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of MeshResource._Proto_Level_v1(*a1);
  free(v1);
}

double _Proto_MeshLevelCollection_v1.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  _Proto_MeshLevelCollection_v1.init(_:)(a1, (uint64_t *)&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance _Proto_MeshLevelCollection_v1@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  _Proto_MeshLevelCollection_v1.init(_:)(a1, (uint64_t *)&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t _Proto_MeshLevelCollection_v1.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource._Proto_Level_v1], &lazy protocol witness table cache variable for type [MeshResource._Proto_Level_v1] and conformance [A], (unint64_t *)&type metadata for _Proto_MeshLevelCollection_v1, a1);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _Proto_MeshLevelCollection_v1@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource._Proto_Level_v1], &lazy protocol witness table cache variable for type [MeshResource._Proto_Level_v1] and conformance [A], a2);
}

uint64_t MeshInstanceCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MeshInstanceCollection.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v3 = (_QWORD *)specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_27:
    result = swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v5;
    return result;
  }
  v7 = (__int128 *)(a1 + 64);
  while (1)
  {
    v11 = *((_QWORD *)v7 - 4);
    v10 = *((_QWORD *)v7 - 3);
    v13 = *((_QWORD *)v7 - 2);
    v12 = *((_QWORD *)v7 - 1);
    v46 = *v7;
    v47 = v7[1];
    v43 = v7[3];
    v44 = v7[2];
    v14 = *((_BYTE *)v7 + 64);
    v15 = v5[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v45 = v13;
    if (v15)
    {
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(v5[7] + 8 * v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v18 & 0x8000000000000000) != 0)
            goto LABEL_26;
        }
        else
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          if ((v18 & 0x8000000000000000) != 0)
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        if (v18 >= v3[2])
          goto LABEL_30;
        v19 = &v3[14 * v18];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19[4] = v11;
        v9 = v19 + 4;
        v19[5] = v10;
        v19[6] = v13;
        v19[7] = v12;
        goto LABEL_4;
      }
    }
    v20 = v6;
    v21 = v12;
    v22 = v14;
    v42 = v3;
    v23 = v3[2];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v48 = v11;
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    v27 = v5[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (v5[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v10);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_31;
      v26 = v31;
    }
    v14 = v22;
    v33 = v21;
    if ((v30 & 1) != 0)
    {
      *(_QWORD *)(v5[7] + 8 * v26) = v23;
      v6 = v20;
    }
    else
    {
      v5[(v26 >> 6) + 8] |= 1 << v26;
      v34 = (uint64_t *)(v5[6] + 16 * v26);
      *v34 = v48;
      v34[1] = v10;
      *(_QWORD *)(v5[7] + 8 * v26) = v23;
      v35 = v5[2];
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
        goto LABEL_29;
      v6 = v20;
      v5[2] = v37;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v3 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
    v39 = v3[2];
    v38 = v3[3];
    if (v39 >= v38 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v3);
    v8 = &v3[14 * v39];
    v8[4] = v48;
    v8[5] = v10;
    v9 = v8 + 4;
    v3[2] = v39 + 1;
    v9[2] = v45;
    v9[3] = v33;
LABEL_4:
    *((_OWORD *)v9 + 2) = v46;
    *((_OWORD *)v9 + 3) = v47;
    v7 += 7;
    *((_OWORD *)v9 + 4) = v44;
    *((_OWORD *)v9 + 5) = v43;
    *((_BYTE *)v9 + 96) = v14;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!--v6)
      goto LABEL_27;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MeshInstanceCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = v3;
  v6 = v3[1];
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_7;
  v8 = result;
  v9 = *v4;
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v10 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_7:
    *(_BYTE *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(_QWORD *)(v9 + 16))
  {
    v12 = v9 + 112 * v11;
    v14 = *(_QWORD *)(v12 + 32);
    v13 = *(_QWORD *)(v12 + 40);
    v15 = *(_QWORD *)(v12 + 48);
    v16 = *(_QWORD *)(v12 + 56);
    v17 = *(_OWORD *)(v12 + 64);
    v18 = *(_OWORD *)(v12 + 80);
    v19 = *(_OWORD *)(v12 + 96);
    v20 = *(_OWORD *)(v12 + 112);
    LOBYTE(v12) = *(_BYTE *)(v12 + 128);
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 24) = v16;
    *(_OWORD *)(a3 + 32) = v17;
    *(_OWORD *)(a3 + 48) = v18;
    *(_OWORD *)(a3 + 64) = v19;
    *(_OWORD *)(a3 + 80) = v20;
    *(_BYTE *)(a3 + 96) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t MeshInstanceCollection.insert(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[12];
  char v28;

  v2 = v1;
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v15 = *(_BYTE *)(a1 + 96);
  v16 = v1[1];
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_7;
  v22 = *(_BYTE *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 88);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 40);
  v21 = *v2;
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v9 = v25;
    v7 = v26;
    v13 = v23;
    v11 = v24;
    v15 = v22;
LABEL_7:
    v27[0] = v4;
    v27[1] = v3;
    v27[2] = v6;
    v27[3] = v5;
    v27[4] = v8;
    v27[5] = v7;
    v27[6] = v10;
    v27[7] = v9;
    v27[8] = v12;
    v27[9] = v11;
    v27[10] = v14;
    v27[11] = v13;
    v28 = v15;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v27, v4, v3);
    return 1;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * result);
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v20 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    if (v19 < v20)
      return 0;
  }
  __break(1u);
  return result;
}

uint64_t MeshInstanceCollection.update(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[6];
  char v8;

  v3 = *(_OWORD *)(a1 + 80);
  v7[4] = *(_OWORD *)(a1 + 64);
  v7[5] = v3;
  v8 = *(_BYTE *)(a1 + 96);
  v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v5;
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)((uint64_t)v7, *(uint64_t *)&v7[0], *((uint64_t *)&v7[0] + 1), a2);
  swift_bridgeObjectRelease();
  return outlined release of IKRig.Constraint((uint64_t)v7);
}

uint64_t MeshInstanceCollection.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = v4[1];
    v23 = v12;
    v4[1] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v12 = v23;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    v4[1] = v12;
    result = swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(_QWORD *)(*v4 + 16))
    {
      v14 = *v4 + 112 * v13;
      v16 = *(_QWORD *)(v14 + 32);
      v15 = *(_QWORD *)(v14 + 40);
      v17 = *(_QWORD *)(v14 + 48);
      v18 = *(_QWORD *)(v14 + 56);
      v19 = *(_OWORD *)(v14 + 64);
      v20 = *(_OWORD *)(v14 + 80);
      v21 = *(_OWORD *)(v14 + 96);
      v22 = *(_OWORD *)(v14 + 112);
      LOBYTE(v14) = *(_BYTE *)(v14 + 128);
      *(_QWORD *)a3 = v16;
      *(_QWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 16) = v17;
      *(_QWORD *)(a3 + 24) = v18;
      *(_OWORD *)(a3 + 32) = v19;
      *(_OWORD *)(a3 + 48) = v20;
      *(_OWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 80) = v22;
      *(_BYTE *)(a3 + 96) = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.remove(at:)(v13, (uint64_t)&v23);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  else
  {
    *(_BYTE *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t MeshInstanceCollection.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + 112 * v2;
    v6 = *(_QWORD *)(v4 + 32);
    v5 = *(_QWORD *)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 48);
    v8 = *(_QWORD *)(v4 + 56);
    v9 = *(_OWORD *)(v4 + 64);
    v10 = *(_OWORD *)(v4 + 80);
    v11 = *(_OWORD *)(v4 + 96);
    v12 = *(_OWORD *)(v4 + 112);
    LOBYTE(v4) = *(_BYTE *)(v4 + 128);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 96) = v4;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MeshInstanceCollection.Iterator@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + 112 * v2;
    v6 = *(_QWORD *)(v4 + 32);
    v5 = *(_QWORD *)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 48);
    v8 = *(_QWORD *)(v4 + 56);
    v9 = *(_OWORD *)(v4 + 64);
    v10 = *(_OWORD *)(v4 + 80);
    v11 = *(_OWORD *)(v4 + 96);
    v12 = *(_OWORD *)(v4 + 112);
    LOBYTE(v4) = *(_BYTE *)(v4 + 128);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 96) = v4;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshInstanceCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MeshInstanceCollection(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MeshInstanceCollection.startIndex.getter()
{
  return 0;
}

unint64_t MeshInstanceCollection.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = *(_QWORD *)v2 + 112 * result;
    v5 = *(_QWORD *)(v3 + 32);
    v4 = *(_QWORD *)(v3 + 40);
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(_QWORD *)(v3 + 56);
    v8 = *(_OWORD *)(v3 + 64);
    v9 = *(_OWORD *)(v3 + 80);
    v10 = *(_OWORD *)(v3 + 96);
    v11 = *(_OWORD *)(v3 + 112);
    LOBYTE(v3) = *(_BYTE *)(v3 + 128);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
    *(_OWORD *)(a2 + 32) = v8;
    *(_OWORD *)(a2 + 48) = v9;
    *(_OWORD *)(a2 + 64) = v10;
    *(_OWORD *)(a2 + 80) = v11;
    *(_BYTE *)(a2 + 96) = v3;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MeshInstanceCollection(void (***a1)(void **a1), unint64_t *a2))()
{
  void (**v4)(void **);

  v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = MeshInstanceCollection.subscript.read(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void (*MeshInstanceCollection.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t v2;
  void (*result)(void **);
  void (*v6)(void **);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  result = (void (*)(void **))malloc(0x61uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = result;
    v7 = *(_QWORD *)v2 + 112 * a2;
    v9 = *(_QWORD *)(v7 + 32);
    v8 = *(_QWORD *)(v7 + 40);
    v10 = *(_QWORD *)(v7 + 48);
    v11 = *(_QWORD *)(v7 + 56);
    v12 = *(_OWORD *)(v7 + 64);
    v13 = *(_OWORD *)(v7 + 80);
    v14 = *(_OWORD *)(v7 + 96);
    v15 = *(_OWORD *)(v7 + 112);
    LOBYTE(v7) = *(_BYTE *)(v7 + 128);
    *(_QWORD *)v6 = v9;
    *((_QWORD *)v6 + 1) = v8;
    *((_QWORD *)v6 + 2) = v10;
    *((_QWORD *)v6 + 3) = v11;
    *((_OWORD *)v6 + 2) = v12;
    *((_OWORD *)v6 + 3) = v13;
    *((_OWORD *)v6 + 4) = v14;
    *((_OWORD *)v6 + 5) = v15;
    *((_BYTE *)v6 + 96) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MeshInstanceCollection.subscript.read;
  }
  __break(1u);
  return result;
}

void MeshInstanceCollection.subscript.read(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

double MeshInstanceCollection.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  MeshInstanceCollection.init(_:)(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MeshInstanceCollection@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  MeshInstanceCollection.init(_:)(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t MeshInstanceCollection.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource.Instance], &lazy protocol witness table cache variable for type [MeshResource.Instance] and conformance [A], (unint64_t *)&type metadata for MeshInstanceCollection, a1);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshInstanceCollection@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource.Instance], &lazy protocol witness table cache variable for type [MeshResource.Instance] and conformance [A], a2);
}

uint64_t MeshSkeletonCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MeshSkeletonCollection.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v41;

  v3 = (_QWORD *)specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_28:
    result = swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v5;
    return result;
  }
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v11 = *(v7 - 2);
    v10 = *(v7 - 1);
    v12 = *v7;
    v13 = v5[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    if (v13)
    {
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if ((v15 & 1) != 0)
      {
        v16 = *(_QWORD *)(v5[7] + 8 * v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_27;
        }
        else
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          if ((v16 & 0x8000000000000000) != 0)
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
        }
        if (v16 >= v3[2])
          goto LABEL_31;
        v9 = &v3[3 * v16 + 6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(v9 - 2) = v11;
        *(v9 - 1) = v10;
        goto LABEL_4;
      }
    }
    v41 = v6;
    v17 = v12;
    v18 = v3;
    v19 = v3[2];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = v11;
    v22 = isUniquelyReferenced_nonNull_native;
    v23 = v21;
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v10);
    v26 = v5[2];
    v27 = (v24 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      break;
    v29 = v24;
    if (v5[3] >= v28)
    {
      if ((v22 & 1) == 0)
        specialized _NativeDictionary.copy()();
      v30 = v23;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v22);
      v30 = v23;
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v10);
      if ((v29 & 1) != (v32 & 1))
        goto LABEL_32;
      v25 = v31;
    }
    v3 = v18;
    v12 = v17;
    if ((v29 & 1) != 0)
    {
      *(_QWORD *)(v5[7] + 8 * v25) = v19;
      v6 = v41;
    }
    else
    {
      v5[(v25 >> 6) + 8] |= 1 << v25;
      v33 = (uint64_t *)(v5[6] + 16 * v25);
      *v33 = v30;
      v33[1] = v10;
      *(_QWORD *)(v5[7] + 8 * v25) = v19;
      v34 = v5[2];
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      v6 = v41;
      if (v35)
        goto LABEL_30;
      v5[2] = v36;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v38 = v3[2];
    v37 = v3[3];
    if (v38 >= v37 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v3);
    v3[2] = v38 + 1;
    v8 = &v3[3 * v38];
    v8[4] = v30;
    v8[5] = v10;
    v9 = v8 + 6;
LABEL_4:
    *v9 = v12;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v7 += 3;
    if (!--v6)
      goto LABEL_28;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MeshSkeletonCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v3;
  v6 = v3[1];
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_7;
  v8 = result;
  v9 = *v4;
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v10 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
LABEL_7:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(_QWORD *)(v9 + 16))
  {
    v12 = (_QWORD *)(v9 + 24 * v11);
    v13 = v12[5];
    v14 = v12[6];
    *a3 = v12[4];
    a3[1] = v13;
    a3[2] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t MeshSkeletonCollection.insert(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  unint64_t v10;
  unint64_t v11;

  v2 = v1;
  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = v1[1];
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_7;
  v7 = *v2;
  swift_bridgeObjectRetain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v4, v3, v5, v4, v3);
    return 1;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    if (v10 < v11)
      return 0;
  }
  __break(1u);
  return result;
}

uint64_t MeshSkeletonCollection.update(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v3, v4, v5, v3, v4, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t MeshSkeletonCollection.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = v4[1];
    v17 = v12;
    v4[1] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v12 = v17;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    v4[1] = v12;
    result = swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(_QWORD *)(*v4 + 16))
    {
      v14 = (_QWORD *)(*v4 + 24 * v13);
      v15 = v14[5];
      v16 = v14[6];
      *a3 = v14[4];
      a3[1] = v15;
      a3[2] = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.remove(at:)(v13, (uint64_t)&v17);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t MeshModelCollection.removeAll()()
{
  _QWORD *v0;
  uint64_t result;

  swift_bridgeObjectRelease();
  *v0 = MEMORY[0x24BEE4AF8];
  result = swift_bridgeObjectRelease();
  v0[1] = MEMORY[0x24BEE4B00];
  return result;
}

uint64_t MeshSkeletonCollection.Iterator.next()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = (_QWORD *)(*v1 + 24 * v2);
    v5 = v4[5];
    v6 = v4[6];
    *a1 = v4[4];
    a1[1] = v5;
    a1[2] = v6;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MeshSkeletonCollection.Iterator@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = (_QWORD *)(*v1 + 24 * v2);
    v5 = v4[5];
    v6 = v4[6];
    *a1 = v4[4];
    a1[1] = v5;
    a1[2] = v6;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshSkeletonCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MeshSkeletonCollection(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MeshSkeletonCollection.startIndex.getter()
{
  return 0;
}

unint64_t MeshSkeletonCollection.subscript.getter@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = (_QWORD *)(*(_QWORD *)v2 + 24 * result);
    v4 = v3[5];
    v5 = v3[6];
    *a2 = v3[4];
    a2[1] = v4;
    a2[2] = v5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MeshSkeletonCollection(uint64_t (**a1)(), unint64_t *a2))()
{
  uint64_t (*v4)();

  v4 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 4) = MeshSkeletonCollection.subscript.read(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*MeshSkeletonCollection.subscript.read(uint64_t (*result)(), unint64_t a2))()
{
  uint64_t v2;
  uint64_t (*v3)();
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v3 = result;
    v4 = (_QWORD *)(*(_QWORD *)v2 + 24 * a2);
    v5 = v4[5];
    v6 = v4[6];
    *(_QWORD *)v3 = v4[4];
    *((_QWORD *)v3 + 1) = v5;
    *((_QWORD *)v3 + 2) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MeshSkeletonCollection.subscript.read;
  }
  __break(1u);
  return result;
}

uint64_t MeshSkeletonCollection.subscript.read()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double MeshSkeletonCollection.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  MeshSkeletonCollection.init(_:)(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MeshSkeletonCollection@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  MeshSkeletonCollection.init(_:)(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t MeshSkeletonCollection.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource.Skeleton], &lazy protocol witness table cache variable for type [MeshResource.Skeleton] and conformance [A], (unint64_t *)&type metadata for MeshSkeletonCollection, a1);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshSkeletonCollection@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource.Skeleton], &lazy protocol witness table cache variable for type [MeshResource.Skeleton] and conformance [A], a2);
}

uint64_t MeshResource.Part.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Part.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*MeshResource.Part.id.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Part.materialIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t MeshResource.Part.materialIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  *(_BYTE *)(v1 + 56) = 0;
  return result;
}

uint64_t (*MeshResource.Part.materialIndex.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return MeshResource.Part.materialIndex.modify;
}

uint64_t MeshResource.Part.materialIndex.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    *(_BYTE *)(*(_QWORD *)result + 56) = 0;
  return result;
}

double key path getter for MeshResource.Part.triangleIndices : MeshResource.Part@<D0>(uint64_t a1@<X8>)
{
  char v2;
  __int128 v3;
  __int128 v4;
  double result;
  _OWORD v6[4];
  __int128 v7;
  char v8;

  MeshResource.Part.triangleIndices.getter((uint64_t)v6);
  v2 = v8;
  v3 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v3;
  v4 = v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(_OWORD *)(a1 + 48) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 80) = v2;
  return result;
}

uint64_t key path setter for MeshResource.Part.triangleIndices : MeshResource.Part(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12[10];
  char v13;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  v12[0] = *(_QWORD *)a1;
  v12[1] = v1;
  v12[2] = v2;
  v12[3] = v3;
  v12[4] = v4;
  v12[5] = v5;
  v12[6] = v6;
  v12[7] = v7;
  v12[8] = v8;
  v12[9] = v9;
  v13 = v10;
  outlined copy of MeshBuffer<SIMD3<Float>>?(v12[0]);
  return MeshResource.Part.triangleIndices.setter((uint64_t)v12);
}

uint64_t MeshResource.Part.triangleIndices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _UNKNOWN **v18;

  if (*(_QWORD *)a1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)a1;
    v2 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 48);
    v6 = *(_BYTE *)(a1 + 80);
    *((_QWORD *)&v17 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt32>);
    v18 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v7 = swift_allocObject();
    *(_QWORD *)&v16 = v7;
    v8 = one-time initialization token for triangleIndices;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v8 != -1)
      swift_once();
    v9 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != 0x6972547865646E69
      || *(_QWORD *)algn_2551A1378 != 0xEE0073656C676E61)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        v9 = 2;
      else
        v9 = v6;
    }
    strcpy((char *)(v7 + 16), "indexTriangles");
    *(_BYTE *)(v7 + 31) = -18;
    *(_WORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v11;
    *(_BYTE *)(v7 + 48) = v9;
    *(_BYTE *)(v7 + 49) = v4;
    *(_BYTE *)(v7 + 50) = BYTE1(v4) & 1;
    *(_QWORD *)(v7 + 56) = v15;
    *(_QWORD *)(v7 + 64) = v1;
    *(_QWORD *)(v7 + 72) = v14;
    *(_QWORD *)(v7 + 80) = v2;
    *(_QWORD *)(v7 + 88) = v13;
    *(_QWORD *)(v7 + 96) = v3;
    *(_QWORD *)(v7 + 104) = v12;
    *(_QWORD *)(v7 + 112) = v5;
    *(_BYTE *)(v7 + 120) = v4;
    *(_BYTE *)(v7 + 121) = BYTE1(v4) & 1;
    *(_QWORD *)(v7 + 128) = v11;
    *(_BYTE *)(v7 + 136) = v6;
    specialized Dictionary.subscript.setter((uint64_t)&v16, 0x6972547865646E69, 0xEE0073656C676E61, 0);
    return outlined consume of MeshBuffer<SIMD3<Float>>?(v15);
  }
  else
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    return specialized Dictionary.subscript.setter((uint64_t)&v16, 0x6972547865646E69, 0xEE0073656C676E61, 0);
  }
}

void (*MeshResource.Part.triangleIndices.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0xB0uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 21) = v1;
  v4 = *v1;
  if (*(_QWORD *)(v4 + 16)
    && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(0x6972547865646E69, 0xEE0073656C676E61, 0), (v6 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)v3 + 128);
    outlined init with take of BindableDataInternal((__int128 *)v3 + 8, (uint64_t)v3 + 88);
    v7 = *((_QWORD *)v3 + 14);
    v8 = *((_QWORD *)v3 + 15);
    __swift_project_boxed_opaque_existential_1((_QWORD *)v3 + 11, v7);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v8 + 56))(MEMORY[0x24BEE44F0], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3 + 88);
  }
  else
  {
    *((_BYTE *)v3 + 80) = 0;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  return MeshResource.Part.triangleIndices.modify;
}

void MeshResource.Part.triangleIndices.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[10];
  char v16;

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  v11 = v3[7];
  v12 = v3[8];
  v13 = v3[9];
  v14 = *((_BYTE *)v3 + 80);
  v15[0] = v4;
  v15[1] = v5;
  v15[2] = v6;
  v15[3] = v7;
  v15[4] = v8;
  v15[5] = v9;
  v15[6] = v10;
  v15[7] = v11;
  v15[8] = v12;
  v15[9] = v13;
  v16 = v14;
  if ((a2 & 1) != 0)
  {
    outlined copy of MeshBuffer<SIMD3<Float>>?(v4);
    MeshResource.Part.triangleIndices.setter((uint64_t)v15);
    outlined consume of MeshBuffer<SIMD3<Float>>?(*v3);
  }
  else
  {
    MeshResource.Part.triangleIndices.setter((uint64_t)v15);
  }
  free(v3);
}

double key path getter for MeshResource.Part.subscript<A>(_:) : <A>MeshResource.PartA@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v4;
  __int128 v5;
  __int128 v6;
  double result;
  _OWORD v8[4];
  __int128 v9;
  char v10;

  MeshResource.Part.subscript.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), (uint64_t)v8);
  v4 = v10;
  v5 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v5;
  v6 = v8[3];
  *(_OWORD *)(a3 + 32) = v8[2];
  *(_OWORD *)(a3 + 48) = v6;
  result = *(double *)&v9;
  *(_OWORD *)(a3 + 64) = v9;
  *(_BYTE *)(a3 + 80) = v4;
  return result;
}

uint64_t key path setter for MeshResource.Part.subscript<A>(_:) : <A>MeshResource.PartA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17[10];
  char v18;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 80);
  v17[0] = *(_QWORD *)a1;
  v17[1] = v6;
  v17[2] = v7;
  v17[3] = v8;
  v17[4] = v9;
  v17[5] = v10;
  v17[6] = v11;
  v17[7] = v12;
  v17[8] = v13;
  v17[9] = v14;
  v18 = v15;
  outlined copy of MeshBuffer<SIMD3<Float>>?(v17[0]);
  return specialized MeshResource.Part.subscript.setter((uint64_t)v17, a3, v5);
}

void (*MeshResource.Part.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = malloc(0x80uLL);
  *a1 = v8;
  v8[11] = a3;
  v8[12] = a4;
  v9 = *(_QWORD *)(a3 - 8);
  v8[13] = v4;
  v8[14] = v9;
  v8[15] = malloc(*(_QWORD *)(v9 + 64));
  (*(void (**)(void))(v9 + 16))();
  MeshBufferDictionary.subscript.getter(*v4, a3, a4, (uint64_t)v8);
  return MeshResource.Part.subscript.modify;
}

void MeshResource.Part.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[10];
  char v19;

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  v11 = v3[7];
  v12 = v3[8];
  v13 = v3[9];
  v14 = *((_BYTE *)v3 + 80);
  v16 = v3[14];
  v15 = (void *)v3[15];
  v17 = v3[11];
  v18[0] = v4;
  v18[1] = v5;
  v18[2] = v6;
  v18[3] = v7;
  v18[4] = v8;
  v18[5] = v9;
  v18[6] = v10;
  v18[7] = v11;
  v18[8] = v12;
  v18[9] = v13;
  v19 = v14;
  if ((a2 & 1) != 0)
  {
    outlined copy of MeshBuffer<SIMD3<Float>>?(v4);
    specialized MeshResource.Part.subscript.setter((uint64_t)v18, (uint64_t)v15, v17);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v15, v17);
    outlined consume of MeshBuffer<SIMD3<Float>>?(*v3);
  }
  else
  {
    specialized MeshResource.Part.subscript.setter((uint64_t)v18, (uint64_t)v15, v17);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v15, v17);
  }
  free(v15);
  free(v3);
}

uint64_t protocol witness for MeshBufferContainer.buffers.getter in conformance MeshResource.Part()
{
  uint64_t *v0;

  return specialized _NativeDictionary.mapValues<A>(_:)(*v0);
}

uint64_t protocol witness for MeshBufferContainer.subscript.setter in conformance MeshResource.Part(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized MeshResource.Part.subscript.setter(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t (*protocol witness for MeshBufferContainer.subscript.modify in conformance MeshResource.Part(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MeshResource.Part.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for Identifiable.id.getter in conformance MeshResource.Part@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshResource.Model.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Model.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource.Model.id.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*MeshResource.Model.parts.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*MeshResource.Model.levels.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Model.init(id:parts:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;
  __n128 v8;
  __n128 v9;

  MeshPartCollection.init(_:)(a3, &v9);
  v8 = v9;
  _Proto_MeshLevelCollection_v1.init(_:)(MEMORY[0x24BEE4AF8], (uint64_t *)&v9);
  result = v9;
  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  a4[1] = v8;
  a4[2] = result;
  return result;
}

uint64_t MeshResource.Model.init(id:descriptors:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  type metadata accessor for MeshResource();
  v7 = swift_bridgeObjectRetain();
  v8 = MeshResource.init(from:)(v7);
  swift_bridgeObjectRelease();
  if (v3)
    return swift_bridgeObjectRelease();
  v17 = a1;
  MeshResource.Contents.init(_:)(*(_QWORD *)(v8 + 16), (uint64_t *)&v16);
  v10 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (v10[2])
  {
    v11 = v10[6];
    v12 = v10[7];
    v13 = v10[8];
    v15 = v10[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a3 = v17;
    a3[1] = a2;
    a3[2] = v11;
    a3[3] = v12;
    a3[4] = v13;
    a3[5] = v15;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *v14 = xmmword_21BE67DE0;
    swift_willThrow();
    return swift_release();
  }
  return result;
}

uint64_t static MeshResource.generate(from:)()
{
  uint64_t v0;

  type metadata accessor for MeshResource();
  v0 = swift_bridgeObjectRetain();
  return MeshResource.init(from:)(v0);
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 128) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Mutable;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[4];

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  Mutable = REAssetServiceMeshAssetCreateMutable();
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_4;
  type metadata accessor for MeshResource();
  v5 = swift_dynamicCastClass();
  if (!v5)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = Mutable;
    RERetain();
    REAssetSetSwiftObject();
  }
  *(_QWORD *)(v0 + 136) = v5;
  v9 = *(_OWORD *)(v0 + 96);
  v10 = *(_OWORD *)(v0 + 80);
  v8 = *(_OWORD *)(v0 + 112);
  RERelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v11[0] = v10;
  v11[1] = v9;
  v11[2] = v8;
  MeshResource.replace(with:)((uint64_t)v11);
  *(_QWORD *)&v10 = (char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                  + async function pointer to specialized RequestLoadable.awaitForResourceSharing();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v6;
  *v6 = v0;
  v6[1] = static MeshResource.generate(from:);
  return ((uint64_t (__cdecl *)())v10)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 152) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 136));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  __int16 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0[13];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v31 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v31;
    v4 = v1 + 64;
    while (1)
    {
      v25 = v3;
      v26 = v2;
      v5 = *(_QWORD *)(v4 - 24);
      v7 = *(_QWORD *)(v4 - 16);
      v6 = *(_QWORD *)(v4 - 8);
      v8 = *(_BYTE *)v4;
      v9 = *(_QWORD *)(v4 + 8);
      v10 = *(_BYTE *)(v4 + 24);
      v11 = *(_QWORD *)(v4 + 32);
      v12 = *(_QWORD *)(v4 + 40);
      v13 = *(_QWORD *)(v4 + 56);
      v28 = *(_QWORD *)(v4 + 16);
      v29 = *(_QWORD *)(v4 + 48);
      v14 = *(_QWORD *)(v4 + 64);
      v35 = *(_QWORD *)(v4 - 32);
      v36 = v5;
      v37 = v7;
      v38 = v6;
      v39 = v8;
      v40 = v9;
      v41 = v28;
      v42 = v10;
      v43 = v11;
      v44 = v12;
      v45 = v29;
      v46 = v13;
      v47 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = v6;
      v15 = v6;
      v16 = v8;
      outlined copy of MeshDescriptor.Materials(v15, v8);
      outlined copy of MeshDescriptor.Primitives?(v9, v28, v10);
      outlined copy of MeshDescriptor.Skinning?(v11, v12);
      MeshDescriptor.makeGeomMesh()((uint64_t)v32);
      v17 = v32[0];
      if ((v34 & 1) != 0)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MeshDescriptor.Materials(v30, v8);
      outlined consume of MeshDescriptor.Primitives?(v9, v28, v10);
      outlined consume of StateMachineGraph?(v11, v12);
      v3 = v25;
      v19 = *(_QWORD *)(v25 + 16);
      v18 = *(_QWORD *)(v25 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v3 = v25;
      }
      v4 += 104;
      *(_QWORD *)(v3 + 16) = v19 + 1;
      *(_QWORD *)(v3 + 8 * v19 + 32) = v17;
      v2 = v26 - 1;
      if (v26 == 1)
      {
        v0 = (_QWORD *)v24;
        goto LABEL_9;
      }
    }
    v20 = v32[1];
    v21 = v33;
    v27 = v33;
    *(_QWORD *)(v24 + 80) = v32[0];
    *(_QWORD *)(v24 + 88) = v20;
    *(_WORD *)(v24 + 96) = v21;
    lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
    swift_willThrowTypedImpl();
    swift_allocError();
    *(_QWORD *)v22 = v17;
    *(_QWORD *)(v22 + 8) = v20;
    *(_WORD *)(v22 + 16) = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v30, v16);
    outlined consume of MeshDescriptor.Primitives?(v9, v28, v10);
    outlined consume of StateMachineGraph?(v11, v12);
    swift_release();
    return (*(uint64_t (**)(void))(v24 + 8))();
  }
  else
  {
LABEL_9:
    v0[14] = v3;
    v0[15] = REMeshCompileOptionsCreate();
    type metadata accessor for MainActor();
    v0[16] = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  v4 = REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (!v4)
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    v0[18] = swift_allocError();
    *v6 = xmmword_21BE56B70;
    swift_willThrow();
    return swift_task_switch();
  }
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_5;
  type metadata accessor for MeshResource();
  v5 = swift_dynamicCastClass();
  if (!v5)
  {
    swift_unknownObjectRelease();
LABEL_5:
    type metadata accessor for MeshResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    RERetain();
    REAssetSetSwiftObject();
  }
  v0[17] = v5;
  RERelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v1; ++i)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v5 = (uint64_t (*)(void))((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                         + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v3;
  *v3 = v0;
  v3[1] = static MeshResource.generate(from:);
  return v5();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  RERelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  RERelease();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136));
}

{
  uint64_t v0;

  swift_release();
  RERelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  type metadata accessor for MeshResource();
  swift_retain();
  return MeshResource.init(from:)();
}

uint64_t MeshResource.contents.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return MeshResource.Contents.init(_:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance MeshResource.Model@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshResource.Instance.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Instance.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource.Instance.id.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Instance.model.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Instance.model.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MeshResource.Instance.model.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Instance.transform.getter()
{
  __n128 *v0;

  return v0[2];
}

void MeshResource.Instance.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
}

uint64_t (*MeshResource.Instance.transform.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MeshResource.Instance.levelOptions.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 96);
}

_BYTE *MeshResource.Instance.levelOptions.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = *result;
  return result;
}

uint64_t (*MeshResource.Instance.levelOptions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Instance.init(id:model:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v25[10];
  _BYTE v26[80];

  outlined init with take of Transform?(a5, (uint64_t)v25, &demangling cache variable for type metadata for simd_float4x4?);
  v9 = v25[0];
  v8 = v25[1];
  v11 = v25[2];
  v10 = v25[3];
  v12 = v25[4];
  v13 = v25[5];
  v14 = v25[6];
  v20 = v25[7];
  result = outlined init with take of Transform?(a5, (uint64_t)v26, &demangling cache variable for type metadata for simd_float4x4?);
  if ((v26[64] & 1) != 0)
  {
    v16 = *(_OWORD *)&zmmword_21BE41220[48];
    v17 = *(_OWORD *)&zmmword_21BE41220[32];
    v18 = *(_OWORD *)&zmmword_21BE41220[16];
    v19 = *(_OWORD *)zmmword_21BE41220;
  }
  else
  {
    *(_QWORD *)&v19 = v9;
    *((_QWORD *)&v19 + 1) = v8;
    *(_QWORD *)&v18 = v11;
    *((_QWORD *)&v18 + 1) = v10;
    *(_QWORD *)&v17 = v12;
    *((_QWORD *)&v17 + 1) = v13;
    *(_QWORD *)&v16 = v14;
    *((_QWORD *)&v16 + 1) = v20;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_OWORD *)(a6 + 32) = v19;
  *(_OWORD *)(a6 + 48) = v18;
  *(_OWORD *)(a6 + 64) = v17;
  *(_OWORD *)(a6 + 80) = v16;
  *(_BYTE *)(a6 + 96) = 1;
  return result;
}

uint64_t MeshResource.Contents.models.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 MeshResource.Contents.models.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*MeshResource.Contents.models.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Model.parts.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 MeshResource.Model.parts.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*MeshResource.Contents.instances.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Contents.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a1[1] = v3;
  a1[2] = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(v2);
  a1[3] = v4;
  result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(v2);
  a1[4] = result;
  a1[5] = v6;
  return result;
}

uint64_t MeshResource.Contents.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t ModelCount;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  char isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t InstanceCount;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unsigned int InstanceModelIndex;
  unint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t TotalSkeletonCount;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128[7];

  v3 = MEMORY[0x24BEE4AF8];
  v4 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = v5;
  v122 = v4;
  v123 = v5;
  v7 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(v3);
  v9 = v8;
  v124 = (_QWORD *)v7;
  v125 = v8;
  result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(v3);
  v126 = result;
  v127 = v11;
  if (!a1)
  {
    v96 = result;
    v97 = v11;
    goto LABEL_77;
  }
  v12 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  ModelCount = REMeshAssetGetModelCount();
  if (ModelCount < 0)
    goto LABEL_87;
  if (ModelCount)
  {
    v14 = 0;
    v114 = ModelCount;
    while (1)
    {
      REMeshAssetGetModelName();
      v16 = String.init(cString:)();
      v18 = v17;
      v19 = specialized static MeshResource.Part.unpack(coreAsset:modelIndex:)(a1, v14);
      swift_bridgeObjectRetain();
      MeshPartCollection.init(_:)((uint64_t)v19, &v119);
      v21 = (uint64_t)v119;
      v20 = v120;
      v22 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v24 = v23;
      v25 = v123;
      if (!*(_QWORD *)(v123 + 16))
        goto LABEL_14;
      v116 = v12;
      v26 = a1;
      v27 = v122;
      swift_bridgeObjectRetain();
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
      if ((v29 & 1) == 0)
        break;
      v30 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v28);
      if ((v30 & 0x8000000000000000) != 0)
        goto LABEL_80;
      v31 = *(_QWORD *)(v27 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v32 = v30 >= v31;
      a1 = v26;
      v12 = v116;
      if (v32)
        goto LABEL_81;
LABEL_15:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v119 = v12;
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      v36 = v12[2];
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
      {
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_92:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v39 = v34;
      if (v12[3] >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v12 = v119;
          if ((v34 & 1) != 0)
            goto LABEL_5;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v12 = v119;
          if ((v39 & 1) != 0)
            goto LABEL_5;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
        v40 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_91;
        v35 = v40;
        v12 = v119;
        if ((v39 & 1) != 0)
        {
LABEL_5:
          v15 = (uint64_t *)(v12[7] + 16 * v35);
          swift_bridgeObjectRelease();
          *v15 = v16;
          v15[1] = v18;
          goto LABEL_6;
        }
      }
      v12[(v35 >> 6) + 8] |= 1 << v35;
      *(_QWORD *)(v12[6] + 8 * v35) = v14;
      v42 = (uint64_t *)(v12[7] + 16 * v35);
      *v42 = v16;
      v42[1] = v18;
      v43 = v12[2];
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_79;
      v12[2] = v45;
LABEL_6:
      ++v14;
      swift_bridgeObjectRelease();
      if (v114 == v14)
        goto LABEL_26;
    }
    swift_bridgeObjectRelease();
    a1 = v26;
    v12 = v116;
LABEL_14:
    v128[0] = v16;
    v128[1] = v18;
    v128[2] = v21;
    v128[3] = v20;
    v128[4] = v22;
    v128[5] = v24;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v128, v16, v18);
    goto LABEL_15;
  }
LABEL_26:
  InstanceCount = REMeshAssetGetInstanceCount();
  if (InstanceCount < 0)
    goto LABEL_88;
  v47 = InstanceCount;
  if (!InstanceCount)
    goto LABEL_64;
  v48 = 0;
  v108 = InstanceCount;
  while (1)
  {
    REMeshAssetGetInstanceName();
    v49 = String.init(cString:)();
    v51 = v50;
    REMeshAssetGetInstanceTransform();
    v111 = v52;
    v112 = v53;
    v113 = v54;
    v115 = v55;
    InstanceModelIndex = REMeshAssetGetInstanceModelIndex();
    if (!v12[2] || (v57 = specialized __RawDictionaryStorage.find<A>(_:)(InstanceModelIndex), (v58 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    v59 = (uint64_t *)(v12[7] + 16 * v57);
    v60 = v59[1];
    v110 = *v59;
    v62 = v124;
    v61 = v125;
    v63 = v125[2];
    swift_bridgeObjectRetain();
    if (!v63)
      goto LABEL_44;
    swift_bridgeObjectRetain();
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v51);
    if ((v65 & 1) == 0)
      break;
    v66 = *(_QWORD *)(v61[7] + 8 * v64);
    if ((v66 & 0x8000000000000000) != 0)
      goto LABEL_84;
    v67 = v62[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v66 >= v67)
      goto LABEL_85;
LABEL_30:
    if (v47 == ++v48)
      goto LABEL_64;
  }
  swift_bridgeObjectRelease();
  if (!v61[2])
  {
LABEL_44:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    goto LABEL_45;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v68 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v51);
  if ((v69 & 1) == 0)
  {
LABEL_45:
    v109 = v60;
    v73 = v62;
    v118 = v62[2];
    swift_bridgeObjectRetain();
    v74 = swift_isUniquelyReferenced_nonNull_native();
    v75 = v49;
    v76 = v74;
    v119 = v61;
    v77 = v75;
    v79 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v51);
    v80 = v61[2];
    v81 = (v78 & 1) == 0;
    v82 = v80 + v81;
    if (__OFADD__(v80, v81))
      goto LABEL_83;
    v83 = v78;
    if (v61[3] >= v82)
    {
      if ((v76 & 1) == 0)
        specialized _NativeDictionary.copy()();
      v84 = v77;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v82, v76);
      v84 = v77;
      v85 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v51);
      if ((v83 & 1) != (v86 & 1))
        goto LABEL_92;
      v79 = v85;
    }
    v62 = v73;
    v87 = v119;
    if ((v83 & 1) != 0)
    {
      *(_QWORD *)(v119[7] + 8 * v79) = v118;
    }
    else
    {
      v119[(v79 >> 6) + 8] |= 1 << v79;
      v88 = (uint64_t *)(v87[6] + 16 * v79);
      *v88 = v84;
      v88[1] = v51;
      *(_QWORD *)(v87[7] + 8 * v79) = v118;
      v89 = v87[2];
      v44 = __OFADD__(v89, 1);
      v90 = v89 + 1;
      if (v44)
        goto LABEL_86;
      v87[2] = v90;
      swift_bridgeObjectRetain();
    }
    v125 = v87;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47 = v108;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
    v92 = v62[2];
    v91 = v62[3];
    if (v92 >= v91 >> 1)
      v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v91 > 1), v92 + 1, 1, v62);
    v62[2] = v92 + 1;
    v93 = &v62[14 * v92];
    v93[4] = v84;
    v93[5] = v51;
    v93[6] = v110;
    v93[7] = v109;
    *((_OWORD *)v93 + 4) = v111;
    *((_OWORD *)v93 + 5) = v112;
    *((_OWORD *)v93 + 6) = v113;
    *((_OWORD *)v93 + 7) = v115;
    *((_BYTE *)v93 + 128) = 1;
    goto LABEL_61;
  }
  v70 = *(_QWORD *)(v61[7] + 8 * v68);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v70 & 0x8000000000000000) != 0)
      goto LABEL_63;
LABEL_42:
    if (v70 >= v62[2])
      goto LABEL_90;
    v117 = v12;
    v71 = a1;
    v72 = &v62[14 * v70];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72[4] = v49;
    v72[5] = v51;
    v72[6] = v110;
    v72[7] = v60;
    *((_OWORD *)v72 + 4) = v111;
    *((_OWORD *)v72 + 5) = v112;
    *((_OWORD *)v72 + 6) = v113;
    *((_OWORD *)v72 + 7) = v115;
    *((_BYTE *)v72 + 128) = 1;
    a1 = v71;
    v12 = v117;
LABEL_61:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v124 = v62;
    goto LABEL_30;
  }
  v62 = specialized _ArrayBuffer._consumeAndCreateNew()(v62);
  if ((v70 & 0x8000000000000000) == 0)
    goto LABEL_42;
LABEL_63:
  __break(1u);
LABEL_64:
  TotalSkeletonCount = REMeshAssetGetTotalSkeletonCount();
  if (TotalSkeletonCount < 0)
    goto LABEL_89;
  v95 = TotalSkeletonCount;
  v96 = v126;
  v97 = v127;
  if (!TotalSkeletonCount)
    goto LABEL_75;
  v98 = 0;
  while (2)
  {
    static MeshResource.Skeleton.unpack(coreAsset:skeletonIndex:)((uint64_t)&v119);
    v99 = (uint64_t)v119;
    v100 = v120;
    v101 = v121;
    v119 = (_QWORD *)v96;
    v120 = v97;
    v102 = *(_QWORD *)(v97 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v102)
      goto LABEL_68;
    swift_bridgeObjectRetain();
    v103 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v100);
    if ((v104 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_68:
      swift_bridgeObjectRetain();
      specialized OrderedIdentifiableCollection.subscript.setter(v99, v100, v101, v99, v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v96 = (uint64_t)v119;
      v97 = v120;
LABEL_69:
      if (v95 == ++v98)
        goto LABEL_75;
      continue;
    }
    break;
  }
  v105 = *(_QWORD *)(*(_QWORD *)(v97 + 56) + 8 * v103);
  if ((v105 & 0x8000000000000000) != 0)
    goto LABEL_82;
  v106 = *(_QWORD *)(v96 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v105 < v106)
    goto LABEL_69;
  __break(1u);
LABEL_75:
  result = swift_bridgeObjectRelease();
  v4 = v122;
  v6 = v123;
  v7 = (uint64_t)v124;
  v9 = v125;
LABEL_77:
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = (uint64_t)v9;
  a2[4] = v96;
  a2[5] = v97;
  return result;
}

uint64_t MeshResource.Model.levels.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 MeshResource.Model.levels.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[2] = *a1;
  return result;
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MeshResource.Contents.makeDefinitions()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  Swift::tuple_OpaquePointer_OpaquePointer result;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v39 = *v0;
  v38 = v0[2];
  if (v2)
  {
    v42 = (void *)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = v1 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MeshResource.Model.combine()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v40)
        break;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 48;
      if (!--v2)
      {
        v37 = v42;
        swift_bridgeObjectRelease();
        v1 = v39;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v33 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = (void *)swift_release();
LABEL_38:
    v35 = v33;
    goto LABEL_44;
  }
  v37 = (void *)MEMORY[0x24BEE4AF8];
LABEL_7:
  v4 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRetain();
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    v41 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    v23 = *(_QWORD *)(v38 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23)
    {
      v24 = 0;
      do
      {
        if (v4[2])
        {
          v26 = *(_QWORD *)(v38 + v24 + 48);
          v25 = *(_QWORD *)(v38 + v24 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
          if ((v28 & 1) != 0)
          {
            v29 = v4;
            v30 = *(_QWORD *)(v4[7] + 8 * v27);
            swift_bridgeObjectRelease();
            if ((v30 & 0x8000000000000000) != 0 || HIDWORD(v30))
              goto LABEL_43;
            String.utf8CString.getter();
            v31 = REMeshInstanceDefinitionCreate();
            swift_release();
            type metadata accessor for MeshInstanceDefinition();
            *(_QWORD *)(swift_allocObject() + 16) = v31;
            swift_bridgeObjectRelease();
            v32 = swift_bridgeObjectRelease();
            MEMORY[0x220768F0C](v32);
            if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v4 = v29;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
          }
        }
        v24 += 112;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      v33 = (void *)v41;
    }
    else
    {
      swift_bridgeObjectRelease();
      v33 = (void *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = v37;
    goto LABEL_38;
  }
  v6 = 0;
  v7 = v1 + 72;
  while (v6 < v5)
  {
    v8 = *(_QWORD *)(v7 - 40);
    v9 = *(_QWORD *)(v7 - 32);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
    v13 = v4[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      goto LABEL_40;
    v16 = v11;
    if (v4[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v11 & 1) != 0)
          goto LABEL_9;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v16 & 1) != 0)
          goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
      if ((v16 & 1) != (v18 & 1))
        goto LABEL_42;
      v12 = v17;
      if ((v16 & 1) != 0)
      {
LABEL_9:
        *(_QWORD *)(v4[7] + 8 * v12) = v6;
        goto LABEL_10;
      }
    }
    v4[(v12 >> 6) + 8] |= 1 << v12;
    v19 = (uint64_t *)(v4[6] + 16 * v12);
    *v19 = v8;
    v19[1] = v9;
    *(_QWORD *)(v4[7] + 8 * v12) = v6;
    v20 = v4[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_41;
    v4[2] = v22;
    swift_bridgeObjectRetain();
LABEL_10:
    ++v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v39 + 16);
    v7 += 48;
    if (v6 == v5)
      goto LABEL_23;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_43:
  v34 = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_44:
  result._1._rawValue = v35;
  result._0._rawValue = v34;
  return result;
}

uint64_t MeshResource.replace(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  Swift::tuple_OpaquePointer_OpaquePointer v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t rawValue;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::OpaquePointer v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (!*(_QWORD *)(v1 + 16))
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *v14 = 0;
    v14[1] = 0;
    return swift_willThrow();
  }
  v2 = *(_QWORD *)(a1 + 32);
  if (!REAssetHandleConvertToMutable())
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *v15 = xmmword_21BE67DF0;
    return swift_willThrow();
  }
  v4 = MeshResource.Contents.makeDefinitions()();
  result = (uint64_t)v4._0._rawValue;
  if (v5)
    return result;
  if ((unint64_t)v4._0._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)(((uint64_t)v4._0._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x24BEE4AF8];
  v32 = v2;
  if (v6)
  {
    v33 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
      goto LABEL_48;
    }
    v8 = 0;
    v7 = v33;
    rawValue = (unint64_t)v4._1._rawValue;
    do
    {
      if (((unint64_t)v4._0._rawValue & 0xC000000000000001) != 0)
        v10 = MEMORY[0x220769770](v8, v4._0._rawValue);
      else
        v10 = swift_retain();
      v11 = *(_QWORD *)(v10 + 16);
      swift_release();
      v13 = *(_QWORD *)(v33 + 16);
      v12 = *(_QWORD *)(v33 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        rawValue = (unint64_t)v4._1._rawValue;
      }
      ++v8;
      *(_QWORD *)(v33 + 16) = v13 + 1;
      *(_QWORD *)(v33 + 8 * v13 + 32) = v11;
    }
    while (v6 != v8);
    v2 = v32;
  }
  else
  {
    rawValue = (unint64_t)v4._1._rawValue;
  }
  if (rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = *(_QWORD *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v17 = MEMORY[0x24BEE4AF8];
  if (!v16)
    goto LABEL_33;
  v34 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18 = 0;
  v17 = v34;
  v19 = v4._1._rawValue;
  do
  {
    if (((unint64_t)v4._1._rawValue & 0xC000000000000001) != 0)
      v20 = MEMORY[0x220769770](v18, v19);
    else
      v20 = swift_retain();
    v21 = *(_QWORD *)(v20 + 16);
    swift_release();
    v23 = *(_QWORD *)(v34 + 16);
    v22 = *(_QWORD *)(v34 + 24);
    if (v23 >= v22 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v19 = v4._1._rawValue;
    }
    ++v18;
    *(_QWORD *)(v34 + 16) = v23 + 1;
    *(_QWORD *)(v34 + 8 * v23 + 32) = v21;
  }
  while (v16 != v18);
  v2 = v32;
LABEL_33:
  v24 = *(_QWORD *)(v2 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  if (v24)
  {
    v35 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    v25 = v35;
    v26 = v2 + 40;
    do
    {
      v27._rawValue = MeshResource.Skeleton.makeSkeletonDef()()._rawValue;
      v29 = *(_QWORD *)(v35 + 16);
      v28 = *(_QWORD *)(v35 + 24);
      if (v29 >= v28 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      v26 += 24;
      *(_QWORD *)(v35 + 16) = v29 + 1;
      *(Swift::OpaquePointer *)(v35 + 8 * v29 + 32) = v27;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (HIDWORD(*(_QWORD *)(v7 + 16)) || HIDWORD(*(_QWORD *)(v17 + 16)) || HIDWORD(*(_QWORD *)(v25 + 16)))
    goto LABEL_49;
  v30 = v25 + 32;
  REMeshAssetReplaceAllWithSkinnedModels();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  for (i = *(_QWORD *)(v25 + 16); i; --i)
  {
    v30 += 8;
    RERelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::OpaquePointer __swiftcall MeshResource.Skeleton.makeSkeletonDef()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = swift_bridgeObjectRetain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_SSs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i36V04makeF3Defs13OpaquePointerVyFSSAF5J53Vcfu_32ff38342fabfe801430b9473eed3cf0a7AKSSTf3nnnpk_nTf1cn_n(v4);
  swift_bridgeObjectRelease();
  v6 = swift_bridgeObjectRetain();
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_s6UInt32Vs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i2V5j3Vs6k11VIgnd_AhJs5l27OIegnrzr_TR04_s10a5Kit12cd5O84A10e2E8f46V04makeF3Defs13OpaquePointerVyF19parentIndexAsh11L_ys0N0VAF5G2VFTf3nnnpf_nTf1cn_n(v6);
  swift_bridgeObjectRelease();
  v8 = swift_bridgeObjectRetain();
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_So13simd_float4x4as5NeverOTg504_s10d5Kit12fg5C0A10h2E8i52V04makeF3Defs13OpaquePointerVyFSo13simd_float4x4aAF5J54Vcfu0_33_0726f9e9ce90d24234b92dbbc5354476AmKTf3nnnpk_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v3 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v27 = v2;
    v28 = MEMORY[0x24BEE4AF8];
    v12 = v1;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = v28;
    v13 = *(_QWORD *)(v28 + 16);
    v14 = 48 * v13;
    v15 = (__int128 *)(v3 + 160);
    do
    {
      v16 = *(v15 - 2);
      v17 = *(v15 - 1);
      v18 = *v15;
      v19 = *(_QWORD *)(v28 + 24);
      v20 = v13 + 1;
      if (v13 >= v19 >> 1)
      {
        v25 = *(v15 - 1);
        v26 = *(v15 - 2);
        v24 = *v15;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v13 + 1, 1);
        v18 = v24;
        v17 = v25;
        v16 = v26;
      }
      *(_QWORD *)(v28 + 16) = v20;
      v21 = (_OWORD *)(v28 + v14);
      v21[2] = v16;
      v21[3] = v17;
      v21[4] = v18;
      v14 += 48;
      v15 += 9;
      v13 = v20;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v1 = v12;
    v2 = v27;
  }
  v22 = specialized static MeshResource.Skeleton.makeSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:)(v1, v2, v5, v7, v9, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (Swift::OpaquePointer)v22;
}

uint64_t MeshResource.replace(with:)(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 16) = v1;
  v3 = a1[1];
  *(_OWORD *)(v2 + 24) = *a1;
  *(_OWORD *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 56) = a1[2];
  return swift_task_switch();
}

uint64_t MeshResource.replace(with:)()
{
  uint64_t v0;
  Swift::tuple_OpaquePointer_OpaquePointer v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = MeshResource.Contents.makeDefinitions()();
  *(Swift::tuple_OpaquePointer_OpaquePointer *)(v0 + 72) = v1;
  if (v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  if ((unint64_t)v1._0._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)(((uint64_t)v1._0._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v18 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
    {
      __break(1u);
      goto LABEL_32;
    }
    v6 = 0;
    v5 = v18;
    do
    {
      if (((unint64_t)v1._0._rawValue & 0xC000000000000001) != 0)
        v7 = MEMORY[0x220769770](v6, v1._0._rawValue);
      else
        v7 = swift_retain();
      v8 = *(_QWORD *)(v7 + 16);
      swift_release();
      v10 = *(_QWORD *)(v18 + 16);
      v9 = *(_QWORD *)(v18 + 24);
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      ++v6;
      *(_QWORD *)(v18 + 16) = v10 + 1;
      *(_QWORD *)(v18 + 8 * v10 + 32) = v8;
    }
    while (v4 != v6);
  }
  if ((unint64_t)v1._1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)(((uint64_t)v1._1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v19 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
    if ((v11 & 0x8000000000000000) == 0)
    {
      v13 = 0;
      v12 = v19;
      do
      {
        if (((unint64_t)v1._1._rawValue & 0xC000000000000001) != 0)
          v14 = MEMORY[0x220769770](v13, v1._1._rawValue);
        else
          v14 = swift_retain();
        v15 = *(_QWORD *)(v14 + 16);
        swift_release();
        v17 = *(_QWORD *)(v19 + 16);
        v16 = *(_QWORD *)(v19 + 24);
        if (v17 >= v16 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        ++v13;
        *(_QWORD *)(v19 + 16) = v17 + 1;
        *(_QWORD *)(v19 + 8 * v17 + 32) = v15;
      }
      while (v11 != v13);
      goto LABEL_25;
    }
LABEL_32:
    __break(1u);
    return result;
  }
LABEL_25:
  if (HIDWORD(*(_QWORD *)(v5 + 16)) || HIDWORD(*(_QWORD *)(v12 + 16)))
    return _assertionFailure(_:_:file:line:flags:)();
  *(_QWORD *)(v0 + 88) = REMeshResourceDefinitionCreate();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 96) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _OWORD *v4;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  if (!*(_QWORD *)(v1 + 16))
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    v2 = swift_allocError();
    *v3 = 0;
    v3[1] = 0;
LABEL_6:
    *(_QWORD *)(v0 + 104) = v2;
    swift_willThrow();
    return swift_task_switch();
  }
  if ((REAssetHandleConvertToMutable() & 1) == 0)
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    v2 = swift_allocError();
    *v4 = xmmword_21BE67DF0;
    goto LABEL_6;
  }
  REMeshAssetReplaceAllWithResource();
  return swift_task_switch();
}

{
  uint64_t v0;

  RERelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  RERelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v6);
  v3 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (*(_QWORD *)(v1 + 16))
    return REMeshAssetReplaceAllWithDirectMesh();
  __break(1u);
  return result;
}

uint64_t MeshResource.replaceAsync(with:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = a1[1];
  v24 = *a1;
  v25 = v7;
  v26 = a1[2];
  v8 = specialized static __ServiceLocator.shared.getter();
  v9 = *(void **)(*(_QWORD *)(v8 + 168) + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(v8 + 24);
  swift_unownedRetainStrong();
  v11 = *(void **)(v10 + 32);
  swift_retain();
  v12 = v9;
  v13 = v11;
  swift_release();
  *v6 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5610], v3);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v13 & 1) != 0)
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v12;
    v17 = v25;
    *(_OWORD *)(v16 + 24) = v24;
    *(_OWORD *)(v16 + 40) = v17;
    *(_OWORD *)(v16 + 56) = v26;
    *(_QWORD *)(v16 + 72) = v1;
    *(_QWORD *)(v16 + 80) = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<MeshResource>);
    v18 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<MeshResource, Error>?>);
    v19 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v20 = swift_allocObject();
    *(_DWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v19 + 16) = v20;
    *(_QWORD *)(v19 + 24) = 0;
    *(_BYTE *)(v19 + 32) = -1;
    *(_QWORD *)(v18 + 16) = v19;
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = partial apply for closure #1 in MeshResource.replaceAsync(with:);
    v21[3] = v16;
    v21[4] = v19;
    v21[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<MeshResource, Error>);
    swift_allocObject();
    outlined retain of MeshResource.Contents((uint64_t)&v24);
    swift_retain();
    swift_retain();
    v22 = Future.init(_:)();
    swift_release();
    *(_QWORD *)(v18 + 24) = v22;
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in MeshResource.replaceAsync(with:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v25 = a3;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v24 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  v18 = swift_allocObject();
  v19 = a4[1];
  *(_OWORD *)(v18 + 16) = *a4;
  *(_OWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 48) = a4[2];
  *(_QWORD *)(v18 + 64) = a5;
  *(_QWORD *)(v18 + 72) = a6;
  *(_QWORD *)(v18 + 80) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(_QWORD *)(v18 + 88) = v17;
  aBlock[4] = partial apply for closure #1 in closure #1 in MeshResource.replaceAsync(with:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_72_0;
  v20 = _Block_copy(aBlock);
  swift_retain();
  outlined retain of MeshResource.Contents((uint64_t)a4);
  swift_retain();
  v21 = a6;
  static DispatchQoS.unspecified.getter();
  v26 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v16, v13, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v23);
  return swift_release();
}

uint64_t closure #1 in closure #1 in MeshResource.replaceAsync(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::tuple_OpaquePointer_OpaquePointer v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[8];

  v43 = a4;
  v44 = a5;
  v48 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v45 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject();
  v14 = MeshResource.Contents.makeDefinitions()();
  if (v13)
  {
    v15 = 0;
    *(_QWORD *)(v12 + 16) = v13;
    *(_BYTE *)(v12 + 24) = 1;
    v16 = v12;
LABEL_30:
    v31 = MEMORY[0x24BEE4AF8];
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = v15;
    v32[3] = a2;
    v33 = v43;
    v34 = v44;
    v32[4] = v16;
    v32[5] = v33;
    v32[6] = v34;
    aBlock[4] = partial apply for specialized closure #3 in closure #1 in closure #1 in MeshResource.replaceAsync(with:);
    aBlock[5] = v32;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_81;
    v35 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    v36 = v45;
    static DispatchQoS.unspecified.getter();
    v49 = v31;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v36, v9, v35);
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
    swift_release();
    return swift_release();
  }
  v38 = a2;
  v39 = v12;
  if ((unint64_t)v14._0._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = *(_QWORD *)(((uint64_t)v14._0._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = MEMORY[0x24BEE4AF8];
  v41 = v7;
  v42 = v6;
  v40 = v9;
  if (v17)
  {
    aBlock[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 & ~(v17 >> 63), 0);
    if (v17 < 0)
    {
      __break(1u);
      goto LABEL_34;
    }
    v19 = 0;
    v18 = aBlock[0];
    do
    {
      if (((unint64_t)v14._0._rawValue & 0xC000000000000001) != 0)
        v20 = MEMORY[0x220769770](v19, v14._0._rawValue);
      else
        v20 = swift_retain();
      v21 = *(_QWORD *)(v20 + 16);
      swift_release();
      aBlock[0] = v18;
      v23 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v18 = aBlock[0];
      }
      ++v19;
      *(_QWORD *)(v18 + 16) = v23 + 1;
      *(_QWORD *)(v18 + 8 * v23 + 32) = v21;
    }
    while (v17 != v19);
    v7 = v41;
    v6 = v42;
    v9 = v40;
  }
  if ((unint64_t)v14._1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = *(_QWORD *)(((uint64_t)v14._1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v25 = MEMORY[0x24BEE4AF8];
  if (!v24)
    goto LABEL_27;
  aBlock[0] = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 & ~(v24 >> 63), 0);
  if (v24 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v26 = 0;
  v25 = aBlock[0];
  do
  {
    if (((unint64_t)v14._1._rawValue & 0xC000000000000001) != 0)
      v27 = MEMORY[0x220769770](v26, v14._1._rawValue);
    else
      v27 = swift_retain();
    v28 = *(_QWORD *)(v27 + 16);
    swift_release();
    aBlock[0] = v25;
    v30 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    if (v30 >= v29 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      v25 = aBlock[0];
    }
    ++v26;
    *(_QWORD *)(v25 + 16) = v30 + 1;
    *(_QWORD *)(v25 + 8 * v30 + 32) = v28;
  }
  while (v24 != v26);
  v7 = v41;
  v6 = v42;
  v9 = v40;
LABEL_27:
  if (!HIDWORD(*(_QWORD *)(v18 + 16)) && !HIDWORD(*(_QWORD *)(v25 + 16)))
  {
    v15 = REMeshResourceDefinitionCreate();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v38;
    v16 = v39;
    *(_QWORD *)(v39 + 16) = v38;
    *(_BYTE *)(v16 + 24) = 0;
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_35:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized closure #3 in closure #1 in closure #1 in MeshResource.replaceAsync(with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  void *v9;
  char v10;
  void *v11;
  uint64_t v12;

  if (a1)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      if ((REAssetHandleConvertToMutable() & 1) != 0)
      {
        REMeshAssetReplaceAllWithResource();
LABEL_8:
        RERelease();
        goto LABEL_9;
      }
      lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
      v6 = swift_allocError();
      *v8 = xmmword_21BE67DF0;
    }
    else
    {
      lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
      v6 = swift_allocError();
      *v7 = 0;
      v7[1] = 0;
    }
    swift_willThrow();
    swift_beginAccess();
    v9 = *(void **)(a3 + 16);
    v10 = *(_BYTE *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = v6;
    *(_BYTE *)(a3 + 24) = 1;
    outlined consume of Result<MeshResource, Error>(v9, v10);
    goto LABEL_8;
  }
LABEL_9:
  swift_beginAccess();
  v11 = *(void **)(a3 + 16);
  v12 = *(unsigned __int8 *)(a3 + 24);
  outlined copy of Result<ModelEntity, Error>(v11, v12);
  a4(v11, v12);
  outlined consume of Result<MeshResource, Error>(v11, v12);
}

uint64_t static MeshResource.generate(from:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Mutable;
  uint64_t v6;
  uint64_t inited;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v10 = a1[1];
  v11 = *a1;
  v9 = a1[2];
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v12);
  v3 = *((_QWORD *)&v13 + 1);
  v4 = v14;
  __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  Mutable = REAssetServiceMeshAssetCreateMutable();
  if ((id)REAssetGetSwiftObject())
  {
    type metadata accessor for MeshResource();
    v6 = swift_dynamicCastClass();
    if (v6)
      goto LABEL_5;
    swift_unknownObjectRelease();
  }
  type metadata accessor for MeshResource();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = Mutable;
  RERetain();
  REAssetSetSwiftObject();
LABEL_5:
  RERelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  v12 = v11;
  v13 = v10;
  v14 = v9;
  MeshResource.replace(with:)((uint64_t)&v12);
  if (v1)
  {
    swift_release();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = type metadata accessor for MeshResource();
    *(_QWORD *)(inited + 64) = &protocol witness table for MeshResource;
    *(_QWORD *)(inited + 32) = v6;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v6;
}

uint64_t MeshResource.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 792) = v1;
  *(_QWORD *)(v2 + 840) = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 888) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 904) = v3;
  *(_QWORD *)(v2 + 920) = *(_QWORD *)(a1 + 40);
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v33 = v1;
    v57 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v57;
    v6 = a1 + 64;
    while (1)
    {
      v34 = v4;
      v35 = v5;
      v7 = *(_QWORD *)(v6 - 24);
      v8 = *(_QWORD *)(v6 - 16);
      v9 = *(_QWORD *)(v6 - 8);
      v10 = *(_BYTE *)v6;
      v11 = *(_QWORD *)(v6 + 8);
      v12 = *(_BYTE *)(v6 + 24);
      v13 = *(_QWORD *)(v6 + 32);
      v14 = *(_QWORD *)(v6 + 40);
      v15 = *(_QWORD *)(v6 + 56);
      v38 = *(_QWORD *)(v6 + 16);
      v39 = *(_QWORD *)(v6 + 48);
      v16 = *(_QWORD *)(v6 + 64);
      v44 = *(_QWORD *)(v6 - 32);
      v45 = v7;
      v46 = v8;
      v47 = v9;
      LOBYTE(v48) = v10;
      v49 = v11;
      v50 = v38;
      v51 = v12;
      v52 = v13;
      v53 = v14;
      v54 = v39;
      v55 = v15;
      v56 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36 = v10;
      outlined copy of MeshDescriptor.Materials(v9, v10);
      v37 = v11;
      v17 = v11;
      i = v38;
      outlined copy of MeshDescriptor.Primitives?(v17, v38, v12);
      outlined copy of MeshDescriptor.Skinning?(v13, v14);
      MeshDescriptor.makeGeomMesh()((uint64_t)&v40);
      v19 = v40;
      if ((v43 & 1) != 0)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MeshDescriptor.Materials(v9, v36);
      outlined consume of MeshDescriptor.Primitives?(v37, v38, v12);
      outlined consume of StateMachineGraph?(v13, v14);
      v5 = v35;
      v57 = v35;
      v21 = *(_QWORD *)(v35 + 16);
      v20 = *(_QWORD *)(v35 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v5 = v57;
      }
      v6 += 104;
      *(_QWORD *)(v5 + 16) = v21 + 1;
      *(_QWORD *)(v5 + 8 * v21 + 32) = v19;
      v4 = v34 - 1;
      if (v34 == 1)
      {
        swift_bridgeObjectRelease();
        v2 = v33;
        goto LABEL_10;
      }
    }
    v22 = v41;
    v23 = v42;
    v44 = v40;
    v45 = v41;
    LOWORD(v46) = v42;
    lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
    swift_willThrowTypedImpl();
    swift_allocError();
    *(_QWORD *)v24 = v19;
    *(_QWORD *)(v24 + 8) = v22;
    *(_WORD *)(v24 + 16) = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v9, v36);
    outlined consume of MeshDescriptor.Primitives?(v37, v38, v12);
    outlined consume of StateMachineGraph?(v13, v14);
    swift_bridgeObjectRelease();
    swift_release();
    return i;
  }
  swift_bridgeObjectRelease();
  v5 = MEMORY[0x24BEE4AF8];
LABEL_10:
  REMeshCompileOptionsCreate();
  v25 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v25, (uint64_t)&v44);
  v26 = v47;
  i = v48;
  __swift_project_boxed_opaque_existential_1(&v44, v47);
  (*(void (**)(uint64_t, uint64_t))(i + 32))(v26, i);
  v27 = REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  v28 = *(_QWORD *)(v5 + 16);
  if (v28)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v28; ++i)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (!v27)
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *v32 = xmmword_21BE56B70;
    swift_willThrow();
    RERelease();
    return i;
  }
  v29 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (!v29)
  {
    i = (*(uint64_t (**)(uint64_t))(v2 + 120))(v27);
    v44 = i;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v31)
    {
      swift_release();
      RERelease();
      RERelease();
      swift_release();
    }
    else
    {
      RERelease();
      swift_release();
      RERelease();
    }
    return i;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[11] = a1;
  v2[12] = v1;
  type metadata accessor for MainActor();
  v2[13] = static MainActor.shared.getter();
  v2[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[15] = v3;
  return swift_task_switch();
}

uint64_t MeshResource.init(from:)()
{
  swift_asyncLet_begin();
  return swift_asyncLet_get();
}

{
  return swift_task_switch();
}

{
  _QWORD *v0;

  v0[116] = (*(uint64_t (**)(_QWORD))(v0[99] + 120))(v0[93]);
  swift_retain();
  return swift_asyncLet_get();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  RERelease();
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 936) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 920);
  v2 = *(_QWORD *)(v0 + 840);
  v6 = *(_OWORD *)(v0 + 904);
  v7 = *(_OWORD *)(v0 + 888);
  swift_release();
  v8 = v2;
  v9 = v7;
  v10 = v6;
  v11 = v1;
  MeshResource.replace(with:)((uint64_t)&v8);
  *(_QWORD *)(v0 + 944) = 0;
  v3 = *(_QWORD *)(v0 + 928);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 696) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 952) = v4;
  *v4 = v0;
  v4[1] = MeshResource.init(from:);
  return RequestLoadable.awaitForResourceSharing()(*(_QWORD *)(v0 + 792), (uint64_t)&protocol witness table for MeshResource);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 960) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 928));
}

{
  swift_release();
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  __int16 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0[14];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v31 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v31;
    v4 = v1 + 64;
    while (1)
    {
      v25 = v3;
      v27 = v2;
      v5 = *(_QWORD *)(v4 - 24);
      v6 = *(_QWORD *)(v4 - 16);
      v7 = *(_QWORD *)(v4 - 8);
      v8 = *(_BYTE *)v4;
      v9 = *(_QWORD *)(v4 + 8);
      v10 = *(_BYTE *)(v4 + 24);
      v11 = *(_QWORD *)(v4 + 32);
      v12 = *(_QWORD *)(v4 + 40);
      v13 = *(_QWORD *)(v4 + 56);
      v28 = *(_QWORD *)(v4 + 16);
      v29 = *(_QWORD *)(v4 + 48);
      v14 = *(_QWORD *)(v4 + 64);
      v35 = *(_QWORD *)(v4 - 32);
      v36 = v5;
      v37 = v6;
      v38 = v7;
      v39 = v8;
      v40 = v9;
      v41 = v28;
      v42 = v10;
      v43 = v11;
      v44 = v12;
      v45 = v29;
      v46 = v13;
      v47 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = v7;
      v15 = v7;
      v16 = v8;
      outlined copy of MeshDescriptor.Materials(v15, v8);
      outlined copy of MeshDescriptor.Primitives?(v9, v28, v10);
      outlined copy of MeshDescriptor.Skinning?(v11, v12);
      MeshDescriptor.makeGeomMesh()((uint64_t)v32);
      v17 = v32[0];
      if ((v34 & 1) != 0)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MeshDescriptor.Materials(v30, v8);
      outlined consume of MeshDescriptor.Primitives?(v9, v28, v10);
      outlined consume of StateMachineGraph?(v11, v12);
      v3 = v25;
      v19 = *(_QWORD *)(v25 + 16);
      v18 = *(_QWORD *)(v25 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v3 = v25;
      }
      v4 += 104;
      *(_QWORD *)(v3 + 16) = v19 + 1;
      *(_QWORD *)(v3 + 8 * v19 + 32) = v17;
      v2 = v27 - 1;
      if (v27 == 1)
      {
        v0 = (_QWORD *)v24;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    v20 = v32[1];
    v21 = v33;
    v26 = v33;
    *(_QWORD *)(v24 + 80) = v32[0];
    *(_QWORD *)(v24 + 88) = v20;
    *(_WORD *)(v24 + 96) = v21;
    lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
    swift_willThrowTypedImpl();
    swift_allocError();
    *(_QWORD *)v22 = v17;
    *(_QWORD *)(v22 + 8) = v20;
    *(_WORD *)(v22 + 16) = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v30, v16);
    outlined consume of MeshDescriptor.Primitives?(v9, v28, v10);
    outlined consume of StateMachineGraph?(v11, v12);
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v24 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x24BEE4AF8];
LABEL_10:
    v0[16] = v3;
    v0[17] = REMeshCompileOptionsCreate();
    type metadata accessor for MainActor();
    v0[18] = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  v0[19] = REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t i;

  if (*(_QWORD *)(v0 + 152))
  {
    v1 = (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 120) + 120))();
    *(_QWORD *)(v0 + 160) = v1;
    *(_QWORD *)(v0 + 104) = v1;
    swift_retain();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v2;
    *v2 = v0;
    v2[1] = MeshResource.init(from:);
    return RequestLoadable.awaitForResourceSharing()(*(_QWORD *)(v0 + 120), (uint64_t)&protocol witness table for MeshResource);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)logger);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_21B9AA000, v5, v6, "Could not create MeshResources with descriptors.", v7, 2u);
      MEMORY[0x220772F44](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 128);

    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *v9 = xmmword_21BE56B70;
    swift_willThrow();
    RERelease();
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v10; ++i)
        RERelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(v0 + 128);
  RERelease();
  RERelease();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v2; ++i)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release();
  RERelease();
  RERelease();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v2; ++i)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t MeshAssetWithDirectMesh;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[12];
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)(v0 + 2));
  v3 = v0[5];
  v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  MeshAssetWithDirectMesh = REAssetManagerCreateMeshAssetWithDirectMesh();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v6 = (*(uint64_t (**)(uint64_t))(v1 + 120))(MeshAssetWithDirectMesh);
  v0[16] = v6;
  swift_retain();
  RERelease();
  v0[10] = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v0[17] = v7;
  *v7 = v0;
  v7[1] = MeshResource.init(from:);
  return RequestLoadable.awaitForResourceSharing()(v0[12], (uint64_t)&protocol witness table for MeshResource);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

{
  uint64_t v0;

  swift_release();
  swift_release_n();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t MeshAssetWithDirectMesh;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v9);
  v3 = v10;
  v4 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  MeshAssetWithDirectMesh = REAssetManagerCreateMeshAssetWithDirectMesh();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  v6 = (*(uint64_t (**)(uint64_t))(v1 + 120))(MeshAssetWithDirectMesh);
  swift_retain();
  RERelease();
  v9[0] = v6;
  RequestLoadable.enforceResourceSharingBeforeECSCommits()();
  swift_release();
  if (v7)
    swift_release();
  swift_release();
  return v6;
}

uint64_t implicit closure #1 in MeshResource.init(from:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return swift_task_switch();
}

uint64_t implicit closure #1 in MeshResource.init(from:)()
{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 88) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Mutable;

  v1 = *(uint64_t **)(v0 + 80);
  swift_release();
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, v0 + 16);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  Mutable = REAssetServiceMeshAssetCreateMutable();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  *v1 = Mutable;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static MeshResource.generate(from:)(_OWORD *a1)
{
  _OWORD *v1;
  __int128 v2;

  v2 = a1[1];
  v1[5] = *a1;
  v1[6] = v2;
  v1[7] = a1[2];
  return swift_task_switch();
}

uint64_t static MeshResource.generateAsync(from:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Mutable;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v8 = a1[1];
  v9 = *a1;
  v7 = a1[2];
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)&v10);
  v2 = *((_QWORD *)&v11 + 1);
  v3 = v12;
  __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  Mutable = REAssetServiceMeshAssetCreateMutable();
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_4;
  type metadata accessor for MeshResource();
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    *(_QWORD *)(swift_allocObject() + 16) = Mutable;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  v10 = v9;
  v11 = v8;
  v12 = v7;
  v5 = MeshResource.replaceAsync(with:)(&v10);
  swift_release();
  return v5;
}

uint64_t static MeshResource.generate(from:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = a1;
  return swift_task_switch();
}

{
  _QWORD *v1;
  _QWORD *v3;

  v1[2] = type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  type metadata accessor for MeshResource();
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v1[4] = v3;
  *v3 = v1;
  v3[1] = static MeshResource.generate(from:);
  return MeshResource.init(from:)(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 48) = a1;
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t static MeshResource.generateAsync(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = specialized static __ServiceLocator.shared.getter();
  v7 = *(void **)(*(_QWORD *)(v6 + 168) + 16);
  swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 24);
  swift_unownedRetainStrong();
  v9 = *(void **)(v8 + 32);
  swift_retain();
  v10 = v7;
  v11 = v9;
  swift_release();
  *v5 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v11 & 1) != 0)
  {
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v10;
    v14[3] = a1;
    v14[4] = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<MeshResource>);
    v15 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<MeshResource, Error>?>);
    v16 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v17 = swift_allocObject();
    *(_DWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v16 + 16) = v17;
    *(_QWORD *)(v16 + 24) = 0;
    *(_BYTE *)(v16 + 32) = -1;
    *(_QWORD *)(v15 + 16) = v16;
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = partial apply for closure #1 in static MeshResource.generateAsync(from:);
    v18[3] = v14;
    v18[4] = v16;
    v18[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<MeshResource, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    v19 = Future.init(_:)();
    swift_release();
    *(_QWORD *)(v15 + 24) = v19;
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v23 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a4;
  v17[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v17[4] = v16;
  v17[5] = a5;
  aBlock[4] = partial apply for closure #1 in closure #1 in static MeshResource.generateAsync(from:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_23;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = a5;
  static DispatchQoS.unspecified.getter();
  v24 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v15, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int16 v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  id v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t i;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t aBlock;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  _QWORD *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v58 = v16;
    v65 = a2;
    v59 = v14;
    v60 = v13;
    v61 = v11;
    v62 = a4;
    v63 = v9;
    v64 = v8;
    v66 = a3;
    v78 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v18 = v78;
    v19 = a1 + 64;
    while (1)
    {
      v67 = v17;
      v68 = v18;
      v21 = *(_QWORD *)(v19 - 32);
      v20 = *(_QWORD *)(v19 - 24);
      v23 = *(void **)(v19 - 16);
      v22 = *(_QWORD *)(v19 - 8);
      v24 = *(_BYTE *)v19;
      v25 = *(_QWORD *)(v19 + 8);
      v70 = *(_QWORD *)(v19 + 16);
      v69 = *(unsigned __int8 *)(v19 + 24);
      v26 = *(_QWORD *)(v19 + 32);
      v27 = *(_QWORD *)(v19 + 40);
      v28 = *(_QWORD *)(v19 + 48);
      v29 = *(_QWORD *)(v19 + 56);
      v30 = *(_QWORD *)(v19 + 64);
      aBlock = v21;
      v86 = v20;
      v87 = v23;
      v88 = (void *)v22;
      LOBYTE(v89) = v24;
      v90 = (_QWORD *)v25;
      v91 = v70;
      v92 = v69;
      v93 = v26;
      v94 = v27;
      v95 = v28;
      v96 = v29;
      v97 = v30;
      v72 = v20;
      swift_bridgeObjectRetain();
      v71 = v23;
      swift_bridgeObjectRetain();
      v73 = v22;
      v31 = v22;
      v32 = v24;
      outlined copy of MeshDescriptor.Materials(v31, v24);
      v74 = v25;
      v33 = v25;
      v34 = v70;
      v35 = v69;
      outlined copy of MeshDescriptor.Primitives?(v33, v70, v69);
      v77 = v26;
      v75 = v27;
      v76 = v28;
      outlined copy of MeshDescriptor.Skinning?(v26, v27);
      MeshDescriptor.makeGeomMesh()((uint64_t)&v79);
      v36 = v79;
      if ((v82 & 1) != 0)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MeshDescriptor.Materials(v73, v32);
      outlined consume of MeshDescriptor.Primitives?(v74, v34, v35);
      outlined consume of StateMachineGraph?(v77, v75);
      v18 = v68;
      v78 = v68;
      v38 = *(_QWORD *)(v68 + 16);
      v37 = *(_QWORD *)(v68 + 24);
      if (v38 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        v18 = v78;
      }
      *(_QWORD *)(v18 + 16) = v38 + 1;
      *(_QWORD *)(v18 + 8 * v38 + 32) = v36;
      v19 += 104;
      v17 = v67 - 1;
      if (v67 == 1)
      {
        a3 = v66;
        a2 = v65;
        goto LABEL_9;
      }
    }
    v39 = v80;
    v40 = v81;
    aBlock = v79;
    v86 = v80;
    LOWORD(v87) = v81;
    lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
    swift_willThrowTypedImpl();
    v41 = (void *)swift_allocError();
    *(_QWORD *)v42 = v36;
    *(_QWORD *)(v42 + 8) = v39;
    *(_WORD *)(v42 + 16) = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v73, v32);
    outlined consume of MeshDescriptor.Primitives?(v74, v34, v35);
    outlined consume of StateMachineGraph?(v77, v75);
    swift_release();
    v43 = (_QWORD *)swift_allocObject();
    v44 = v66;
    v43[2] = v65;
    v43[3] = v44;
    v43[4] = v41;
    v89 = partial apply for closure #2 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
    v90 = v43;
    aBlock = MEMORY[0x24BDAC760];
    v86 = 1107296256;
    v87 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v88 = &block_descriptor_56;
    v45 = _Block_copy(&aBlock);
    swift_retain();
    v46 = v41;
    v47 = v58;
    static DispatchQoS.unspecified.getter();
    v79 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v48 = v61;
    v49 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v47, v48, v45);
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v60);
    return swift_release();
  }
  else
  {
LABEL_9:
    REMeshCompileOptionsCreate();
    v51 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v51, (uint64_t)&v79);
    v52 = v83;
    v53 = v84;
    __swift_project_boxed_opaque_existential_1(&v79, v83);
    (*(void (**)(uint64_t, uint64_t))(v53 + 32))(v52, v53);
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = a2;
    *(_QWORD *)(v54 + 24) = a3;
    v89 = partial apply for closure #2 in closure #1 in closure #1 in static MeshResource.generateAsync(from:);
    v90 = (_QWORD *)v54;
    aBlock = MEMORY[0x24BDAC760];
    v86 = 1107296256;
    v87 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
    v88 = &block_descriptor_62;
    v55 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError();
    _Block_release(v55);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
    v56 = *(_QWORD *)(v18 + 16);
    if (v56)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v56; ++i)
        RERelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return RERelease();
  }
}

void closure #2 in closure #1 in closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  void *v7;
  _QWORD *v8;
  _OWORD *v9;
  id v10;

  if (a1)
  {
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      v5 = swift_dynamicCastClass();
      if (v5)
      {
LABEL_6:
        a3(v5, 0);
        swift_release();
        return;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_6;
  }
  if (a2)
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
    v7 = (void *)swift_allocError();
    *v8 = a2;
  }
  else
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    v7 = (void *)swift_allocError();
    *v9 = xmmword_21BE56B70;
  }
  v10 = a2;
  a3((uint64_t)v7, 1);

}

uint64_t MeshResource.Skeleton.Joint.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Skeleton.Joint.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource.Skeleton.Joint.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Skeleton.Joint.parentIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t MeshResource.Skeleton.Joint.parentIndex.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*MeshResource.Skeleton.Joint.parentIndex.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Skeleton.Joint.inverseBindPoseMatrix.getter()
{
  __n128 *v0;

  return v0[2];
}

void MeshResource.Skeleton.Joint.inverseBindPoseMatrix.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
}

uint64_t (*MeshResource.Skeleton.Joint.inverseBindPoseMatrix.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Skeleton.Joint.restPoseTransform.getter()
{
  __n128 *v0;

  return v0[6];
}

void MeshResource.Skeleton.Joint.restPoseTransform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  __n128 *v3;

  v3[6] = a1;
  v3[7] = a2;
  v3[8] = a3;
}

uint64_t (*MeshResource.Skeleton.Joint.restPoseTransform.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t MeshResource.Skeleton.Joint.init(name:parentIndex:inverseBindPoseMatrix:restPoseTransform:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, __n128 *a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>, __n128 a8@<Q2>, __n128 a9@<Q3>, __n128 a10@<Q4>, __n128 a11@<Q5>, __n128 a12@<Q6>)
{
  a5->n128_u64[0] = result;
  a5->n128_u64[1] = a2;
  a5[1].n128_u64[0] = a3;
  a5[1].n128_u8[8] = a4 & 1;
  a5[2] = a6;
  a5[3] = a7;
  a5[4] = a8;
  a5[5] = a9;
  a5[6] = a10;
  a5[7] = a11;
  a5[8] = a12;
  return result;
}

uint64_t MeshResource.Skeleton.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Skeleton.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource.Skeleton.id.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Skeleton.joints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshResource.Skeleton.joints.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MeshResource.Skeleton.joints.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Skeleton.init(id:joints:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

__n128 MeshResource.Skeleton.init(id:jointNames:inverseBindPoseMatrices:restPoseTransforms:parentIndices:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  __n128 result;
  uint64_t v24;
  __n128 v25;

  v7 = a5;
  v8 = a4;
  v12 = a7;
  if (a6)
  {
    v14 = *(_QWORD *)(a6 + 16);
    if (v14)
    {
      v24 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      v15 = v24;
      v16 = *(_QWORD *)(v24 + 16);
      v17 = (_BYTE *)(a6 + 40);
      do
      {
        if (*v17)
          v18 = -1;
        else
          v18 = *((_QWORD *)v17 - 1);
        v24 = v15;
        v19 = *(_QWORD *)(v15 + 24);
        if (v16 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v16 + 1, 1);
          v15 = v24;
        }
        *(_QWORD *)(v15 + 16) = v16 + 1;
        *(_QWORD *)(v15 + 8 * v16 + 32) = v18;
        v17 += 16;
        ++v16;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      v7 = a5;
      v12 = a7;
      v8 = a4;
    }
    else
    {
      swift_bridgeObjectRelease();
      v15 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v15 = 0;
  }
  MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)(a1, a2, a3, v8, v7, v15, (uint64_t)&v24);
  result = v25;
  *(_QWORD *)v12 = v24;
  *(__n128 *)(v12 + 8) = result;
  return result;
}

uint64_t closure #1 in MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  unsigned int v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  char v20;
  _OWORD *v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v5 + 16) = v4;
    v6 = (unint64_t *)(v5 + 16);
    if (HIDWORD(v4))
      goto LABEL_27;
    v7 = v5;
    v8 = v5 + 32;
    RESkeletonDefinitionGetParentIndices();
    *(_QWORD *)(v7 + 16) = v4;
    type metadata accessor for RESRT(0);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v9 + 16) = v4;
  }
  else
  {
    v9 = MEMORY[0x24BEE4AF8];
    v8 = MEMORY[0x24BEE4AF8] + 32;
    RESkeletonDefinitionGetParentIndices();
    *(_QWORD *)(v9 + 16) = 0;
    v6 = (unint64_t *)(v9 + 16);
  }
  RESkeletonDefinitionGetLocalRestPoses();
  *(_QWORD *)(v9 + 16) = v4;
  v10 = *(_QWORD **)(a3 + 16);
  v11 = v10[2];
  if (!v11)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (v11 <= v4 && v11 <= *v6)
  {
    v13 = 0;
    v14 = 0;
    v15 = (__int128 *)(v9 + 64);
    while (1)
    {
      v16 = *(_DWORD *)(v8 + 4 * v14);
      if (v16 == -1)
        v17 = 0;
      else
        v17 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(a3 + 16) = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      if (v14 >= v10[2])
        break;
      v19 = &v10[v13];
      v19[6] = v17;
      *((_BYTE *)v19 + 56) = v16 == -1;
      *(_QWORD *)(a3 + 16) = v10;
      v24 = *(v15 - 1);
      v25 = *(v15 - 2);
      v23 = *v15;
      if (one-time initialization token for identity != -1)
      {
        swift_once();
        v10 = *(_QWORD **)(a3 + 16);
      }
      v20 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(a3 + 16) = v10;
      if ((v20 & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      if (v14 >= v10[2])
        goto LABEL_25;
      ++v14;
      v21 = &v10[v13];
      v21[8] = v25;
      v21[9] = v24;
      v21[10] = v23;
      *(_QWORD *)(a3 + 16) = v10;
      v13 += 18;
      v15 += 3;
      if (v11 == v14)
        goto LABEL_23;
    }
    __break(1u);
LABEL_25:
    __break(1u);
  }
  __break(1u);
LABEL_27:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*MeshResource.Part.skeletonID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return MeshResource.Part.skeletonID.modify;
}

uint64_t MeshResource.Part.skeletonID.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 24) = v4;
    *(_QWORD *)(v3 + 32) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 24) = v4;
    *(_QWORD *)(v3 + 32) = v2;
  }
  return result;
}

uint64_t key path getter for MeshResource.Part.jointInfluences : MeshResource.Part@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  _BYTE v9[176];
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  char v14;
  uint64_t v15;
  char v16;

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_DWORD *)a1 + 10);
  v5 = *((_BYTE *)a1 + 44);
  v6 = *((_QWORD *)a1 + 6);
  v7 = *((_BYTE *)a1 + 56);
  v10 = *a1;
  v11 = v3;
  v12 = *(__int128 *)((char *)a1 + 24);
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  MeshResource.Part.jointInfluences.getter((uint64_t)v9);
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  return outlined init with take of Transform?((uint64_t)&v10, a2, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
}

uint64_t key path setter for MeshResource.Part.jointInfluences : MeshResource.Part(uint64_t a1)
{
  _BYTE v2[176];
  _BYTE v3[176];

  outlined init with take of Transform?(a1, (uint64_t)v3, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  outlined init with take of Transform?((uint64_t)v3, (uint64_t)v2, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  outlined release of MeshResource.JointInfluences?((uint64_t)v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of MeshResource.JointInfluences?);
  return MeshResource.Part.jointInfluences.setter((uint64_t)v2);
}

uint64_t MeshResource.Part.jointInfluences.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _UNKNOWN **v37;
  uint64_t v38[11];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _BYTE v58[176];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unsigned __int8 v64;
  char v65;
  uint64_t v66;
  char v67;

  outlined init with take of Transform?(a1, (uint64_t)v58, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  outlined init with take of Transform?((uint64_t)v58, (uint64_t)&v59, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  if (getEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(&v59) == 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
  }
  else
  {
    v33 = v61;
    v30 = v60;
    v31 = v62;
    v2 = v59;
    v3 = v63;
    v5 = v66;
    v6 = v67;
    v10 = 256;
    if (!v65)
      v10 = 0;
    v4 = v10 | v64;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v9 = v31;
    v8 = v33;
    v7 = v30;
  }
  v51 = v7;
  v52 = v8;
  v53 = v9;
  v50 = v2;
  v54 = v3;
  v55 = v4;
  v56 = v5;
  v57 = v6;
  specialized MeshBufferDictionary.subscript.setter((uint64_t)&v50, 0xD00000000000001FLL, 0x800000021BE81900, 0);
  outlined init with take of Transform?((uint64_t)v58, (uint64_t)v38, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  if (getEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(v38) == 1)
  {
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    result = specialized Dictionary.subscript.setter((uint64_t)&v35, 0xD000000000000023, 0x800000021BE81920, 0);
  }
  else
  {
    v12 = v39;
    v13 = v40;
    v14 = v41;
    v15 = v43;
    v16 = v44;
    v17 = v45;
    v19 = v47;
    v18 = v48;
    v20 = v49;
    v32 = v42;
    v34 = v46;
    outlined copy of MeshResource.JointInfluences.InfluenceRate(v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49);
    outlined release of MeshResource.JointInfluences?((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of MeshResource.JointInfluences?);
    if ((v20 & 0x80000000) == 0)
    {
      v37 = 0;
      v35 = 0u;
      v36 = 0u;
      result = specialized Dictionary.subscript.setter((uint64_t)&v35, 0xD000000000000023, 0x800000021BE81920, 0);
      *(_DWORD *)(v1 + 40) = v12;
      *(_BYTE *)(v1 + 44) = 0;
      return result;
    }
    v29 = v20 & 0x7F;
    *((_QWORD *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int32>);
    v37 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v21 = swift_allocObject();
    v22 = v14;
    v23 = v21;
    *(_QWORD *)&v35 = v21;
    v27 = v20;
    v26 = v20;
    v28 = v13;
    v24 = v22;
    outlined copy of MeshResource.JointInfluences.InfluenceRate(v12, v13, v22, v32, v15, v16, v17, v34, v19, v18, v26);
    if (one-time initialization token for triangleIndices != -1)
      swift_once();
    v25 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != 0xD000000000000023
      || *(_QWORD *)algn_2551A1378 != 0x800000021BE81920)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        v25 = 2;
      else
        v25 = v29;
    }
    *(_QWORD *)(v23 + 16) = 0xD000000000000023;
    *(_QWORD *)(v23 + 24) = 0x800000021BE81920;
    *(_WORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = v18;
    *(_BYTE *)(v23 + 48) = v25;
    *(_BYTE *)(v23 + 49) = v19;
    *(_BYTE *)(v23 + 50) = BYTE1(v19) & 1;
    *(_QWORD *)(v23 + 56) = v12;
    *(_QWORD *)(v23 + 64) = v28;
    *(_QWORD *)(v23 + 72) = v24;
    *(_QWORD *)(v23 + 80) = v32;
    *(_QWORD *)(v23 + 88) = v15;
    *(_QWORD *)(v23 + 96) = v16;
    *(_QWORD *)(v23 + 104) = v17;
    *(_QWORD *)(v23 + 112) = v34;
    *(_BYTE *)(v23 + 120) = v19;
    *(_BYTE *)(v23 + 121) = BYTE1(v19) & 1;
    *(_QWORD *)(v23 + 128) = v18;
    *(_BYTE *)(v23 + 136) = v29;
    specialized Dictionary.subscript.setter((uint64_t)&v35, 0xD000000000000023, 0x800000021BE81920, 0);
    result = outlined consume of MeshResource.JointInfluences.InfluenceRate(v12, v28, v24, v32, v15, v16, v17, v34, v19, v18, v27);
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 44) = 1;
  return result;
}

void (*MeshResource.Part.jointInfluences.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x2C8uLL);
  *a1 = v3;
  v3[88] = v1;
  MeshResource.Part.jointInfluences.getter((uint64_t)v3);
  return MeshResource.Part.jointInfluences.modify;
}

void MeshResource.Part.jointInfluences.modify(uint64_t *a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)*a1;
  v3 = *a1 + 176;
  v4 = *a1 + 352;
  if ((a2 & 1) != 0)
  {
    outlined init with take of Transform?(*a1, v4, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    outlined init with take of Transform?(v4, (uint64_t)v2 + 528, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    outlined release of MeshResource.JointInfluences?(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of MeshResource.JointInfluences?);
    MeshResource.Part.jointInfluences.setter((uint64_t)v2 + 528);
    outlined init with take of Transform?((uint64_t)v2, v3, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    outlined release of MeshResource.JointInfluences?(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of MeshResource.JointInfluences?);
  }
  else
  {
    outlined init with take of Transform?(*a1, v3, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    outlined init with take of Transform?(v3, v4, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    MeshResource.Part.jointInfluences.setter(v4);
  }
  free(v2);
}

uint64_t MeshResource.JointInfluences.influences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_BYTE *)(v1 + 64);
  v4 = *(_BYTE *)(v1 + 65);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 56) = v2;
  *(_BYTE *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 65) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t MeshResource.JointInfluences.init(influences:influencesPerVertex:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  __int128 v7;
  __int128 v8;

  if (a2 == (int)a2 && (a2 - 256) >= 0xFFFFFF01)
  {
    v3 = *(_BYTE *)(result + 80);
    v4 = *(_QWORD *)(result + 72);
    v5 = *(_BYTE *)(result + 65);
    v6 = *(_BYTE *)(result + 64);
    v7 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    v8 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 48) = v8;
    *(_BYTE *)(a3 + 64) = v6;
    *(_BYTE *)(a3 + 65) = v5;
    *(_QWORD *)(a3 + 72) = v4;
    *(_BYTE *)(a3 + 80) = v3;
    *(_QWORD *)(a3 + 88) = a2;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 153) = 0u;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 MeshResource.JointInfluences.init(influences:influencesPerVertex:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];
  unsigned __int8 v21;
  char v22;
  uint64_t v23;
  char v24;

  v5 = *(_BYTE *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 65);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(*(_QWORD *)(a2 + 16), a2, *(_QWORD *)(a2 + 16));
  swift_bridgeObjectRelease();
  specialized MeshBuffer.init<A>(_:)(v9, (uint64_t)v20);
  v10 = v23;
  v11 = v24;
  v12 = 256;
  if (!v22)
    v12 = 0;
  v13 = v12 | v21;
  result = (__n128)v20[0];
  v15 = v20[1];
  v16 = v20[2];
  v17 = v20[3];
  v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v18;
  v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v19;
  *(_BYTE *)(a3 + 64) = v5;
  *(_BYTE *)(a3 + 65) = v6;
  *(_QWORD *)(a3 + 72) = v7;
  *(_BYTE *)(a3 + 80) = v8;
  *(__n128 *)(a3 + 88) = result;
  *(_OWORD *)(a3 + 104) = v15;
  *(_OWORD *)(a3 + 120) = v16;
  *(_OWORD *)(a3 + 136) = v17;
  *(_QWORD *)(a3 + 152) = v13;
  *(_QWORD *)(a3 + 160) = v10;
  *(_BYTE *)(a3 + 168) = v11 | 0x80;
  return result;
}

uint64_t key path setter for MeshResource.Contents.skeletons : MeshResource.Contents(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v4;
  return result;
}

uint64_t (*MeshResource.Contents.skeletons.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MeshResource.Contents.skeletons.modify;
}

uint64_t MeshResource.Contents.skeletons.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 32) = v4;
    *(_QWORD *)(v3 + 40) = v2;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 32) = v4;
    *(_QWORD *)(v3 + 40) = v2;
  }
  return result;
}

uint64_t static MeshResource.generate(from:skeletons:)(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t GeomSkeletonV2;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t j;
  _OWORD *v39;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
  {
    v22 = a2;
LABEL_10:
    v23 = *(_QWORD *)(v22 + 16);
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0, MEMORY[0x24BEE4AF8]);
    if (v23)
    {
      v47 = v3;
      swift_bridgeObjectRetain();
      v25 = (uint64_t *)(v22 + 56);
      do
      {
        v26 = *(v25 - 2);
        v27 = *(v25 - 1);
        v28 = *v25;
        v52 = *(v25 - 3);
        v53 = v26;
        v54 = v27;
        v55 = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MeshSkeleton.makeSkeletonDef()();
        GeomSkeletonV2 = RESkeletonDefinitionCreateGeomSkeletonV2();
        RERelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (GeomSkeletonV2)
        {
          v31 = v24[2];
          v30 = v24[3];
          if (v31 >= v30 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v24);
          v24[2] = v31 + 1;
          v24[v31 + 4] = GeomSkeletonV2;
        }
        v25 += 4;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      v3 = v47;
    }
    REMeshCompileOptionsCreate();
    v32 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v32, (uint64_t)&v52);
    v33 = v55;
    v34 = v56;
    __swift_project_boxed_opaque_existential_1(&v52, v55);
    (*(void (**)(uint64_t, uint64_t))(v34 + 32))(v33, v34);
    v35 = REAssetManagerMeshAssetCreateFromModelsAndSkeletonsWithOptionsNullable();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
    v36 = *(_QWORD *)(v3 + 16);
    if (v36)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v36; ++i)
        RERelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v20 = v24[2];
    if (v20)
    {
      swift_bridgeObjectRetain();
      for (j = 0; j != v20; ++j)
        RERelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (!v35)
    {
      lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
      swift_allocError();
      *v39 = xmmword_21BE56B70;
      swift_willThrow();
      RERelease();
      return v20;
    }
    REAssetHandleLoadNow();
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      v20 = swift_dynamicCastClass();
      if (v20)
      {
LABEL_31:
        RERelease();
        RERelease();
        return v20;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v35;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_31;
  }
  v65 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v65;
  v5 = a1 + 64;
  while (1)
  {
    v46 = v3;
    v6 = *(_QWORD *)(v5 - 24);
    v7 = *(_QWORD *)(v5 - 16);
    v8 = *(_QWORD *)(v5 - 8);
    v9 = *(_BYTE *)v5;
    v10 = *(_QWORD *)(v5 + 8);
    v42 = v2;
    v43 = *(_QWORD *)(v5 + 16);
    v11 = *(_BYTE *)(v5 + 24);
    v12 = *(_QWORD *)(v5 + 32);
    v13 = *(_QWORD *)(v5 + 40);
    v14 = *(_QWORD *)(v5 + 56);
    v44 = *(_QWORD *)(v5 + 48);
    v15 = *(_QWORD *)(v5 + 64);
    v52 = *(_QWORD *)(v5 - 32);
    v53 = v6;
    v54 = v7;
    v55 = v8;
    LOBYTE(v56) = v9;
    v57 = v10;
    v58 = v43;
    v59 = v11;
    v60 = v12;
    v61 = v13;
    v62 = v44;
    v63 = v14;
    v64 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = v9;
    outlined copy of MeshDescriptor.Materials(v8, v9);
    outlined copy of MeshDescriptor.Primitives?(v10, v43, v11);
    outlined copy of MeshDescriptor.Skinning?(v12, v13);
    MeshDescriptor.makeGeomMesh()((uint64_t)&v48);
    v16 = v48;
    if ((v51 & 1) != 0)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v8, v45);
    outlined consume of MeshDescriptor.Primitives?(v10, v43, v11);
    outlined consume of StateMachineGraph?(v12, v13);
    v3 = v46;
    v65 = v46;
    v18 = *(_QWORD *)(v46 + 16);
    v17 = *(_QWORD *)(v46 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      v3 = v65;
    }
    *(_QWORD *)(v3 + 16) = v18 + 1;
    *(_QWORD *)(v3 + 8 * v18 + 32) = v16;
    v5 += 104;
    v2 = v42 - 1;
    if (v42 == 1)
    {
      v22 = a2;
      goto LABEL_10;
    }
  }
  v19 = v49;
  v20 = v50;
  v52 = v48;
  v53 = v49;
  LOWORD(v54) = v50;
  lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
  swift_willThrowTypedImpl();
  swift_allocError();
  *(_QWORD *)v21 = v16;
  *(_QWORD *)(v21 + 8) = v19;
  *(_WORD *)(v21 + 16) = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MeshDescriptor.Materials(v8, v45);
  outlined consume of MeshDescriptor.Primitives?(v10, v43, v11);
  outlined consume of StateMachineGraph?(v12, v13);
  swift_release();
  return v20;
}

BOOL static MeshResource._Proto_LevelStrategy_v1.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void MeshResource._Proto_LevelStrategy_v1.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int MeshResource._Proto_LevelStrategy_v1.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.meshPartEnd.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.__allocating_init(meshPartEnd:)(int a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_DWORD *)(result + 16) = a1;
  return result;
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.init(meshPartEnd:)(int a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t MeshResource._Proto_ScreenAreaLevelStrategyData_v1.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_DWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t MeshResource._Proto_ScreenAreaLevelStrategyData_v1.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ScreenAreaLevelStrategyData_v1@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ScreenAreaLevelStrategyData_v1((void (*)(void))type metadata accessor for MeshResource._Proto_ScreenAreaLevelStrategyData_v1, a1, 0.0);
}

float MeshResource._Proto_ViewDepthLevelStrategyData_v1.maxViewDepth.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_DWORD *)(v0 + 16) = 2139095040;
  return result;
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.__allocating_init(maxViewDepth:)(float a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(float *)(result + 16) = a1;
  return result;
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.init(maxViewDepth:)(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = v1;
  *(float *)(v1 + 16) = a1;
  return result;
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ViewDepthLevelStrategyData_v1@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ScreenAreaLevelStrategyData_v1((void (*)(void))type metadata accessor for MeshResource._Proto_ViewDepthLevelStrategyData_v1, a1, INFINITY);
}

uint64_t protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ScreenAreaLevelStrategyData_v1@<X0>(void (*a1)(void)@<X2>, uint64_t *a2@<X8>, float a3@<S0>)
{
  uint64_t result;

  a1();
  result = swift_allocObject();
  *(float *)(result + 16) = a3;
  *a2 = result;
  return result;
}

uint64_t MeshResource._Proto_Level_v1.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource._Proto_Level_v1.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource._Proto_Level_v1.id.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource._Proto_Level_v1.levelAssemblyData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of __REAssetService(v1 + 16, a1);
}

uint64_t MeshResource._Proto_Level_v1.levelAssemblyData.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 16;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return outlined init with take of BindableDataInternal(a1, v3);
}

uint64_t (*MeshResource._Proto_Level_v1.levelAssemblyData.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource._Proto_Level_v1.levelStrategyData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of __REAssetService(v1 + 56, a1);
}

uint64_t MeshResource._Proto_Level_v1.levelStrategyData.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 56;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return outlined init with take of BindableDataInternal(a1, v3);
}

uint64_t (*MeshResource._Proto_Level_v1.levelStrategyData.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource._Proto_Level_v1.init(id:levelAssemblyData:levelStrategyData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  outlined init with take of BindableDataInternal(a3, (uint64_t)(a5 + 2));
  return outlined init with take of BindableDataInternal(a4, (uint64_t)(a5 + 7));
}

void MeshResource._Proto_LevelOptions_v1.levelStrategy.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *MeshResource._Proto_LevelOptions_v1.levelStrategy.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*MeshResource._Proto_LevelOptions_v1.levelStrategy.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Model.init(id:parts:levels:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  __n128 result;
  __n128 v10;
  __n128 v11;

  MeshPartCollection.init(_:)(a3, &v11);
  v10 = v11;
  _Proto_MeshLevelCollection_v1.init(_:)(a4, (uint64_t *)&v11);
  result = v11;
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = a2;
  a5[1] = v10;
  a5[2] = result;
  return result;
}

unint64_t MeshResource.Instance.init(id:model:transform:levelOptions:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 *a5@<X4>, __n128 *a6@<X8>, __n128 a7@<Q0>, __n128 a8@<Q1>, __n128 a9@<Q2>, __n128 a10@<Q3>)
{
  unsigned __int8 v10;

  v10 = *a5;
  a6->n128_u64[0] = result;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  a6[2] = a7;
  a6[3] = a8;
  a6[4] = a9;
  a6[5] = a10;
  a6[6].n128_u8[0] = v10;
  return result;
}

uint64_t MeshResource.Part.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;

  v25 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v23 = *(_QWORD *)(v2 - 8);
  v24 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v10 = v1[2];
  v9 = v1[3];
  v11 = v1[4];
  LODWORD(v6) = *((_DWORD *)v1 + 10);
  v12 = *((_BYTE *)v1 + 44);
  v13 = v1[6];
  v14 = *((_BYTE *)v1 + 56);
  v26 = *v1;
  v27 = v8;
  v28 = v10;
  v29 = v9;
  v30 = v11;
  v31 = v6;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v15 + 32) = 25705;
  *(_QWORD *)(v15 + 40) = 0xE200000000000000;
  v16 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v15 + 48) = v8;
  *(_QWORD *)(v15 + 56) = v10;
  *(_QWORD *)(v15 + 72) = v16;
  strcpy((char *)(v15 + 80), "materialIndex");
  v17 = MEMORY[0x24BEE1768];
  *(_WORD *)(v15 + 94) = -4864;
  *(_QWORD *)(v15 + 96) = v13;
  *(_QWORD *)(v15 + 120) = v17;
  *(_QWORD *)(v15 + 128) = 0x6E6F74656C656B73;
  *(_QWORD *)(v15 + 136) = 0xEA00000000004449;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v15 + 144) = v9;
  *(_QWORD *)(v15 + 152) = v11;
  *(_QWORD *)(v15 + 168) = v18;
  *(_QWORD *)(v15 + 176) = 0x73726566667562;
  *(_QWORD *)(v15 + 184) = 0xE700000000000000;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v19 = swift_bridgeObjectRetain();
  v20 = specialized _NativeDictionary.mapValues<A>(_:)(v19);
  *(_QWORD *)(v15 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MeshBuffers.Identifier : AnyMeshBuffer].Values);
  *(_QWORD *)(v15 + 192) = v20;
  v21 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 1, 1, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v4, *MEMORY[0x24BEE43C0], v24);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static MeshResource.Skeleton.Joint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  char v20;
  char v21;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  float32x4_t v32;
  float32x4_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(float32x4_t *)(a1 + 32);
  v5 = *(float32x4_t *)(a1 + 48);
  v7 = *(float32x4_t *)(a1 + 64);
  v6 = *(float32x4_t *)(a1 + 80);
  v8 = *(__n128 *)(a1 + 96);
  v9 = *(__n128 *)(a1 + 112);
  v10 = *(__n128 *)(a1 + 128);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(unsigned __int8 *)(a2 + 24);
  v13 = *(float32x4_t *)(a2 + 32);
  v14 = *(float32x4_t *)(a2 + 48);
  v15 = *(float32x4_t *)(a2 + 64);
  v16 = *(float32x4_t *)(a2 + 80);
  v17 = *(__n128 *)(a2 + 96);
  v18 = *(__n128 *)(a2 + 112);
  v19 = *(__n128 *)(a2 + 128);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v35 = *(__n128 *)(a1 + 112);
    v36 = *(__n128 *)(a1 + 96);
    v33 = *(float32x4_t *)(a1 + 64);
    v34 = *(__n128 *)(a1 + 128);
    v32 = *(float32x4_t *)(a1 + 80);
    v30 = *(__n128 *)(a2 + 112);
    v31 = *(__n128 *)(a2 + 96);
    v28 = *(float32x4_t *)(a1 + 32);
    v29 = *(__n128 *)(a2 + 128);
    v26 = *(float32x4_t *)(a2 + 64);
    v27 = *(float32x4_t *)(a1 + 48);
    v24 = *(float32x4_t *)(a2 + 32);
    v25 = *(float32x4_t *)(a2 + 80);
    v23 = *(float32x4_t *)(a2 + 48);
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v14 = v23;
    v13 = v24;
    v16 = v25;
    v15 = v26;
    v5 = v27;
    v4 = v28;
    v19 = v29;
    v18 = v30;
    v17 = v31;
    v6 = v32;
    v7 = v33;
    v10 = v34;
    v9 = v35;
    v8 = v36;
    if ((v20 & 1) == 0)
      return 0;
  }
  if ((v3 & 1) != 0)
  {
    if (!v12)
      return 0;
  }
  else
  {
    if (v2 == v11)
      v21 = v12;
    else
      v21 = 1;
    if ((v21 & 1) != 0)
      return 0;
  }
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v5, v14), (int8x16_t)vceqq_f32(v4, v13)), vandq_s8((int8x16_t)vceqq_f32(v7, v15), (int8x16_t)vceqq_f32(v6, v16)))) & 0x80000000) == 0)return 0;
  return specialized static Transform.== infix(_:_:)(v8, v9, v10, v17, v18, v19);
}

uint64_t specialized MeshResource.Part.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  char v21;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v6;
  v16 = v6[1];
  v17 = v7;
  v8 = v6[2];
  v14 = v6[3];
  v15 = v8;
  v9 = *((_QWORD *)v6 + 8);
  v10 = *((_QWORD *)v6 + 9);
  v11 = *((_BYTE *)v6 + 80);
  (*(void (**)(char *))(v12 + 16))(v5);
  v18[0] = v17;
  v18[1] = v16;
  v18[2] = v15;
  v18[3] = v14;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  return MeshBufferDictionary.subscript.setter((uint64_t)v18, (uint64_t)v5, a3);
}

double _s10RealityKit12MeshResourceC0A10FoundationE15JointInfluencesVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 153) = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t specialized static MeshResource.Skeleton.makeSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t result;

  v10 = RESkeletonDefinitionCreate();
  String.utf8CString.getter();
  RESkeletonDefinitionSetName();
  swift_release();
  v11 = *(_QWORD *)(a3 + 16);
  if (HIDWORD(v11))
    goto LABEL_10;
  RESkeletonDefinitionSetJointCount();
  if (v11)
  {
    String.utf8CString.getter();
    RESkeletonDefinitionSetJointName();
    swift_release();
    if (v11 != 1)
    {
      v12 = a3 + 56;
      for (i = 1; i != v11; ++i)
      {
        String.utf8CString.getter();
        RESkeletonDefinitionSetJointName();
        swift_release();
        v12 += 16;
      }
    }
  }
  if (HIDWORD(*(_QWORD *)(a4 + 16))
    || (RESkeletonDefinitionSetParentIndices(), HIDWORD(*(_QWORD *)(a5 + 16)))
    || (RESkeletonDefinitionSetInverseBindPoses(), HIDWORD(*(_QWORD *)(a6 + 16))))
  {
LABEL_10:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    RESkeletonDefinitionSetLocalRestPoses();
    return v10;
  }
  return result;
}

uint64_t specialized static MeshResource.Skeleton.withValidatedSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;

  v10 = specialized static MeshResource.Skeleton.makeSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:)(a1, a2, a3, a4, a5, a6);
  result = RESkeletonDefinitionValidate();
  if ((result & 1) != 0)
  {
    closure #1 in MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)(v10, a7, a8);
    return RERelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (uint64_t)v2;
  for (i = (uint64_t *)(a1 + 48); ; i += 8)
  {
    v32 = v4;
    v33 = v2;
    v7 = *(i - 2);
    v6 = *(i - 1);
    v8 = i[1];
    v30 = *i;
    v9 = i[2];
    v10 = i[3];
    v12 = i[4];
    v11 = i[5];
    v34 = v2[2];
    swift_bridgeObjectRetain_n();
    v31 = v8;
    swift_bridgeObjectRetain_n();
    v35 = v9;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    v16 = v3[2];
    v17 = (v14 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      break;
    v19 = v14;
    if (v3[3] >= v18)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v19 & 1) != (v21 & 1))
        goto LABEL_21;
      v15 = v20;
    }
    if ((v19 & 1) != 0)
    {
      *(_QWORD *)(v3[7] + 8 * v15) = v34;
    }
    else
    {
      v3[(v15 >> 6) + 8] |= 1 << v15;
      v22 = (uint64_t *)(v3[6] + 16 * v15);
      *v22 = v7;
      v22[1] = v6;
      *(_QWORD *)(v3[7] + 8 * v15) = v34;
      v23 = v3[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_20;
      v3[2] = v25;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    v27 = v2[2];
    v26 = v2[3];
    if (v27 >= v26 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v2);
    v2[2] = v27 + 1;
    v28 = &v2[6 * v27];
    v28[4] = v30;
    v28[5] = v31;
    v28[6] = v35;
    v28[7] = v10;
    v28[8] = v12;
    v28[9] = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v4 = v32 - 1;
    if (v32 == 1)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (uint64_t)v2;
  for (i = (uint64_t *)(a1 + 56); ; i += 10)
  {
    v36 = v4;
    v37 = v2;
    v7 = *(i - 3);
    v6 = *(i - 2);
    v8 = *(i - 1);
    v9 = i[1];
    v34 = i[2];
    v35 = *i;
    v10 = i[3];
    v32 = *((_BYTE *)i + 36);
    v33 = *((_DWORD *)i + 8);
    v31 = i[5];
    v30 = *((_BYTE *)i + 48);
    v11 = v2[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v29 = v8;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    v15 = v3[2];
    v16 = (v13 & 1) == 0;
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      break;
    v18 = v13;
    if (v3[3] >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v13 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v18 & 1) != 0)
          goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_22;
      v14 = v19;
      if ((v18 & 1) != 0)
      {
LABEL_10:
        *(_QWORD *)(v3[7] + 8 * v14) = v11;
        goto LABEL_14;
      }
    }
    v3[(v14 >> 6) + 8] |= 1 << v14;
    v21 = (uint64_t *)(v3[6] + 16 * v14);
    *v21 = v7;
    v21[1] = v6;
    *(_QWORD *)(v3[7] + 8 * v14) = v11;
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_21;
    v3[2] = v24;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
    v26 = v2[2];
    v25 = v2[3];
    if (v26 >= v25 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v2);
    v2[2] = v26 + 1;
    v27 = &v2[8 * v26];
    v27[4] = v29;
    v27[5] = v35;
    v27[6] = v9;
    v27[7] = v34;
    v27[8] = v10;
    *((_DWORD *)v27 + 18) = v33;
    *((_BYTE *)v27 + 76) = v32;
    v27[10] = v31;
    *((_BYTE *)v27 + 88) = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v4 = v36 - 1;
    if (v36 == 1)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[6];
  _QWORD v34[2];
  _OWORD v35[6];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (uint64_t)v2;
  v5 = a1 + 32;
  while (1)
  {
    v31 = v5;
    v32 = v4;
    outlined init with copy of (Int, URL)(v5, (uint64_t)&v36, &demangling cache variable for type metadata for (String, MeshResource._Proto_Level_v1));
    v6 = v37;
    v34[0] = v36;
    v7 = v36;
    v34[1] = v37;
    v35[2] = v40;
    v35[3] = v41;
    v35[4] = v42;
    v35[5] = v43;
    v35[0] = v38;
    v35[1] = v39;
    outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v35, (uint64_t)v33);
    v8 = v2;
    v9 = v2[2];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    v13 = v3[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    v16 = v11;
    if (v3[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v11 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v16 & 1) != 0)
          goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v16 & 1) != (v18 & 1))
        goto LABEL_22;
      v12 = v17;
      if ((v16 & 1) != 0)
      {
LABEL_10:
        *(_QWORD *)(v3[7] + 8 * v12) = v9;
        goto LABEL_14;
      }
    }
    v3[(v12 >> 6) + 8] |= 1 << v12;
    v19 = (uint64_t *)(v3[6] + 16 * v12);
    *v19 = v7;
    v19[1] = v6;
    *(_QWORD *)(v3[7] + 8 * v12) = v9;
    v20 = v3[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_21;
    v3[2] = v22;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v33);
    outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v35, (uint64_t)v33);
    swift_bridgeObjectRetain();
    v2 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v24 = v2[2];
    v23 = v2[3];
    if (v24 >= v23 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v2);
    v2[2] = v24 + 1;
    v25 = &v2[12 * v24];
    v26 = v33[1];
    v25[2] = v33[0];
    v25[3] = v26;
    v27 = v33[2];
    v28 = v33[3];
    v29 = v33[5];
    v25[6] = v33[4];
    v25[7] = v29;
    v25[4] = v27;
    v25[5] = v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for (String, MeshResource._Proto_Level_v1));
    swift_bridgeObjectRelease();
    v5 = v31 + 112;
    v4 = v32 - 1;
    if (v32 == 1)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (uint64_t)v2;
  for (i = (_BYTE *)(a1 + 144); ; i += 128)
  {
    v35 = v4;
    v7 = *((_QWORD *)i - 14);
    v6 = *((_QWORD *)i - 13);
    v8 = *((_QWORD *)i - 11);
    v9 = *((_QWORD *)i - 9);
    v29 = *((_QWORD *)i - 10);
    v30 = *((_QWORD *)i - 12);
    v33 = *((_OWORD *)i - 3);
    v34 = *((_OWORD *)i - 4);
    v31 = *((_OWORD *)i - 1);
    v32 = *((_OWORD *)i - 2);
    v28 = *i;
    v36 = v2;
    v10 = v2[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    v14 = v3[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (v3[3] >= v16)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v12 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v17 & 1) != 0)
          goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_22;
      v13 = v18;
      if ((v17 & 1) != 0)
      {
LABEL_10:
        *(_QWORD *)(v3[7] + 8 * v13) = v10;
        goto LABEL_14;
      }
    }
    v3[(v13 >> 6) + 8] |= 1 << v13;
    v20 = (uint64_t *)(v3[6] + 16 * v13);
    *v20 = v7;
    v20[1] = v6;
    *(_QWORD *)(v3[7] + 8 * v13) = v10;
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_21;
    v3[2] = v23;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = v36;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
    v25 = v2[2];
    v24 = v2[3];
    if (v25 >= v24 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
    v2[2] = v25 + 1;
    v26 = &v2[14 * v25];
    v26[4] = v30;
    v26[5] = v8;
    v26[6] = v29;
    v26[7] = v9;
    *((_OWORD *)v26 + 4) = v34;
    *((_OWORD *)v26 + 5) = v33;
    *((_OWORD *)v26 + 6) = v32;
    *((_OWORD *)v26 + 7) = v31;
    *((_BYTE *)v26 + 128) = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v4 = v35 - 1;
    if (v35 == 1)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (uint64_t)v2;
  v5 = (_OWORD *)(a1 + 56);
  while (1)
  {
    v27 = v4;
    v28 = v2;
    v7 = *((_QWORD *)v5 - 3);
    v6 = *((_QWORD *)v5 - 2);
    v26 = *((_QWORD *)v5 - 1);
    v29 = *v5;
    v8 = v2[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    v12 = v3[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
      break;
    v15 = v10;
    if (v3[3] >= v14)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v10 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v15 & 1) != 0)
          goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v15 & 1) != (v17 & 1))
        goto LABEL_22;
      v11 = v16;
      if ((v15 & 1) != 0)
      {
LABEL_10:
        *(_QWORD *)(v3[7] + 8 * v11) = v8;
        goto LABEL_14;
      }
    }
    v3[(v11 >> 6) + 8] |= 1 << v11;
    v18 = (uint64_t *)(v3[6] + 16 * v11);
    *v18 = v7;
    v18[1] = v6;
    *(_QWORD *)(v3[7] + 8 * v11) = v8;
    v19 = v3[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_21;
    v3[2] = v21;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    v23 = v2[2];
    v22 = v2[3];
    if (v23 >= v22 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v2);
    v5 = (_OWORD *)((char *)v5 + 40);
    v2[2] = v23 + 1;
    v24 = &v2[3 * v23];
    v24[4] = v26;
    *(_OWORD *)(v24 + 5) = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v4 = v27 - 1;
    if (v27 == 1)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined release of MeshResource.Model(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21BC444FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MeshResource.replaceAsync(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in MeshResource.replaceAsync(with:)(a1, a2, *(_QWORD *)(v2 + 16), (_OWORD *)(v2 + 24), *(_QWORD *)(v2 + 72), *(void **)(v2 + 80));
}

uint64_t outlined retain of MeshResource.Contents(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GeomMeshError and conformance GeomMeshError;
  if (!lazy protocol witness table cache variable for type GeomMeshError and conformance GeomMeshError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for GeomMeshError, &type metadata for GeomMeshError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeomMeshError and conformance GeomMeshError);
  }
  return result;
}

uint64_t sub_21BC44630()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static MeshResource.generateAsync(from:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t outlined copy of MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result;

  if (a11 < 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined release of MeshResource.JointInfluences?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 168);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    v4);
  return a1;
}

uint64_t outlined copy of MeshResource.JointInfluences?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return outlined copy of MeshResource.JointInfluences.InfluenceRate(a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
  }
  return result;
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  BOOL v13;

  if (a1 < 0)
    goto LABEL_16;
  if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
    {
LABEL_11:
      if (a1 >= a3)
      {
        *(_QWORD *)(result + 16) = a3;
        return result;
      }
      goto LABEL_15;
    }
  }
  else
  {
    result = MEMORY[0x24BEE4AF8];
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      goto LABEL_11;
  }
  v8 = 0;
  v9 = (_DWORD *)(result + 32);
  v10 = (uint64_t *)(a2 + 32);
  while (1)
  {
    v12 = *v10++;
    v11 = v12;
    if (v12 != (int)v12 || v11 < 0)
      break;
    v13 = __OFADD__(v8, v11);
    v8 += v11;
    if (v13)
      goto LABEL_14;
    *v9++ = v8;
    if (!--v7)
      goto LABEL_11;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshModelCollection.Iterator and conformance MeshModelCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshModelCollection.Iterator and conformance MeshModelCollection.Iterator;
  if (!lazy protocol witness table cache variable for type MeshModelCollection.Iterator and conformance MeshModelCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshModelCollection.Iterator, &type metadata for MeshModelCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshModelCollection.Iterator and conformance MeshModelCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshModelCollection and conformance MeshModelCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshModelCollection and conformance MeshModelCollection;
  if (!lazy protocol witness table cache variable for type MeshModelCollection and conformance MeshModelCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshModelCollection, &type metadata for MeshModelCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshModelCollection and conformance MeshModelCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MeshModelCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<MeshModelCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MeshModelCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MeshModelCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<MeshModelCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MeshModelCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type MeshPartCollection.Iterator and conformance MeshPartCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshPartCollection.Iterator and conformance MeshPartCollection.Iterator;
  if (!lazy protocol witness table cache variable for type MeshPartCollection.Iterator and conformance MeshPartCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshPartCollection.Iterator, &type metadata for MeshPartCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshPartCollection.Iterator and conformance MeshPartCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshPartCollection and conformance MeshPartCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshPartCollection and conformance MeshPartCollection;
  if (!lazy protocol witness table cache variable for type MeshPartCollection and conformance MeshPartCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshPartCollection, &type metadata for MeshPartCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshPartCollection and conformance MeshPartCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MeshPartCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<MeshPartCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MeshPartCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MeshPartCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<MeshPartCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MeshPartCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type _Proto_MeshLevelCollection_v1.Iterator and conformance _Proto_MeshLevelCollection_v1.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1.Iterator and conformance _Proto_MeshLevelCollection_v1.Iterator;
  if (!lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1.Iterator and conformance _Proto_MeshLevelCollection_v1.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for _Proto_MeshLevelCollection_v1.Iterator, &type metadata for _Proto_MeshLevelCollection_v1.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1.Iterator and conformance _Proto_MeshLevelCollection_v1.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _Proto_MeshLevelCollection_v1 and conformance _Proto_MeshLevelCollection_v1()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1 and conformance _Proto_MeshLevelCollection_v1;
  if (!lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1 and conformance _Proto_MeshLevelCollection_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for _Proto_MeshLevelCollection_v1, &type metadata for _Proto_MeshLevelCollection_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1 and conformance _Proto_MeshLevelCollection_v1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _Proto_MeshLevelCollection_v1()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<_Proto_MeshLevelCollection_v1> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<_Proto_MeshLevelCollection_v1>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _Proto_MeshLevelCollection_v1()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<_Proto_MeshLevelCollection_v1> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<_Proto_MeshLevelCollection_v1>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type MeshInstanceCollection.Iterator and conformance MeshInstanceCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshInstanceCollection.Iterator and conformance MeshInstanceCollection.Iterator;
  if (!lazy protocol witness table cache variable for type MeshInstanceCollection.Iterator and conformance MeshInstanceCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshInstanceCollection.Iterator, &type metadata for MeshInstanceCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshInstanceCollection.Iterator and conformance MeshInstanceCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshInstanceCollection and conformance MeshInstanceCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshInstanceCollection and conformance MeshInstanceCollection;
  if (!lazy protocol witness table cache variable for type MeshInstanceCollection and conformance MeshInstanceCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshInstanceCollection, &type metadata for MeshInstanceCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshInstanceCollection and conformance MeshInstanceCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MeshInstanceCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<MeshInstanceCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MeshInstanceCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MeshInstanceCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<MeshInstanceCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MeshInstanceCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type MeshSkeletonCollection.Iterator and conformance MeshSkeletonCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshSkeletonCollection.Iterator and conformance MeshSkeletonCollection.Iterator;
  if (!lazy protocol witness table cache variable for type MeshSkeletonCollection.Iterator and conformance MeshSkeletonCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshSkeletonCollection.Iterator, &type metadata for MeshSkeletonCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshSkeletonCollection.Iterator and conformance MeshSkeletonCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshSkeletonCollection and conformance MeshSkeletonCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshSkeletonCollection and conformance MeshSkeletonCollection;
  if (!lazy protocol witness table cache variable for type MeshSkeletonCollection and conformance MeshSkeletonCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshSkeletonCollection, &type metadata for MeshSkeletonCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshSkeletonCollection and conformance MeshSkeletonCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MeshSkeletonCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<MeshSkeletonCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MeshSkeletonCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MeshSkeletonCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<MeshSkeletonCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MeshSkeletonCollection>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in MeshResource.Part()
{
  return MEMORY[0x24BEE0D10];
}

unint64_t lazy protocol witness table accessor for type MeshResource._Proto_LevelStrategy_v1 and conformance MeshResource._Proto_LevelStrategy_v1()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshResource._Proto_LevelStrategy_v1 and conformance MeshResource._Proto_LevelStrategy_v1;
  if (!lazy protocol witness table cache variable for type MeshResource._Proto_LevelStrategy_v1 and conformance MeshResource._Proto_LevelStrategy_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshResource._Proto_LevelStrategy_v1, &type metadata for MeshResource._Proto_LevelStrategy_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshResource._Proto_LevelStrategy_v1 and conformance MeshResource._Proto_LevelStrategy_v1);
  }
  return result;
}

uint64_t sub_21BC44DFC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 48);
  return result;
}

_QWORD *sub_21BC44E08(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 48) = *result;
  *(_BYTE *)(a2 + 56) = 0;
  return result;
}

uint64_t sub_21BC44E28()
{
  return 16;
}

__n128 sub_21BC44E34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BC44E40@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BC44E4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t sub_21BC44E94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  *a2 = *(_QWORD *)(a1 + 32);
  a2[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for MeshModelCollection()
{
  return &type metadata for MeshModelCollection;
}

ValueMetadata *type metadata accessor for MeshModelCollection.Iterator()
{
  return &type metadata for MeshModelCollection.Iterator;
}

ValueMetadata *type metadata accessor for MeshPartCollection()
{
  return &type metadata for MeshPartCollection;
}

ValueMetadata *type metadata accessor for MeshPartCollection.Iterator()
{
  return &type metadata for MeshPartCollection.Iterator;
}

ValueMetadata *type metadata accessor for _Proto_MeshLevelCollection_v1()
{
  return &type metadata for _Proto_MeshLevelCollection_v1;
}

ValueMetadata *type metadata accessor for _Proto_MeshLevelCollection_v1.Iterator()
{
  return &type metadata for _Proto_MeshLevelCollection_v1.Iterator;
}

ValueMetadata *type metadata accessor for MeshInstanceCollection()
{
  return &type metadata for MeshInstanceCollection;
}

ValueMetadata *type metadata accessor for MeshInstanceCollection.Iterator()
{
  return &type metadata for MeshInstanceCollection.Iterator;
}

ValueMetadata *type metadata accessor for MeshSkeletonCollection()
{
  return &type metadata for MeshSkeletonCollection;
}

ValueMetadata *type metadata accessor for MeshSkeletonCollection.Iterator()
{
  return &type metadata for MeshSkeletonCollection.Iterator;
}

uint64_t destroy for MeshResource.Part()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MeshResource.Part(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshResource.Part(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for MeshResource.Part(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for MeshResource.Part()
{
  return &type metadata for MeshResource.Part;
}

uint64_t destroy for MeshResource.Model()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MeshResource.Model(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MeshResource.Model(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MeshResource.Model(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MeshResource.Model()
{
  return &type metadata for MeshResource.Model;
}

uint64_t initializeWithCopy for MeshResource.Instance(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshResource.Instance(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for MeshResource.Instance(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.Instance(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource.Instance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.Instance()
{
  return &type metadata for MeshResource.Instance;
}

uint64_t destroy for MeshResource.Contents()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MeshResource.Contents(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MeshResource.Contents(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MeshResource.Contents(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MeshResource.Contents()
{
  return &type metadata for MeshResource.Contents;
}

ValueMetadata *type metadata accessor for MeshResource.Skeleton()
{
  return &type metadata for MeshResource.Skeleton;
}

uint64_t initializeWithCopy for MeshResource.Skeleton.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshResource.Skeleton.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy144_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for MeshResource.Skeleton.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.Skeleton.Joint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource.Skeleton.Joint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.Skeleton.Joint()
{
  return &type metadata for MeshResource.Skeleton.Joint;
}

uint64_t destroy for MeshResource.JointInfluences(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return outlined consume of MeshResource.JointInfluences.InfluenceRate(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_BYTE *)(a1 + 168));
}

uint64_t initializeWithCopy for MeshResource.JointInfluences(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v3;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 112);
  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 136);
  v9 = *(_QWORD *)(a2 + 152);
  v13 = *(_QWORD *)(a2 + 144);
  v14 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 160);
  v11 = *(_BYTE *)(a2 + 168);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of MeshResource.JointInfluences.InfluenceRate(v15, v14, v4, v5, v6, v7, v8, v13, v9, v10, v11);
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 144) = v13;
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = v10;
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

uint64_t assignWithCopy for MeshResource.JointInfluences(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;

  v2 = a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = v2[3];
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  v6 = v2[5];
  *(_QWORD *)(a1 + 32) = v2[4];
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
  v7 = v2[7];
  *(_QWORD *)(a1 + 48) = v2[6];
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 64) = *((_BYTE *)v2 + 64);
  *(_BYTE *)(a1 + 65) = *((_BYTE *)v2 + 65);
  *(_QWORD *)(a1 + 72) = v2[9];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)v2 + 80);
  v8 = v2[11];
  v9 = v2[12];
  v10 = v2[13];
  v11 = v2[14];
  v12 = v2[15];
  v13 = v2[16];
  v14 = v2[17];
  v15 = v2[18];
  v28 = v2[19];
  v29 = v2[20];
  LOBYTE(v2) = *((_BYTE *)v2 + 168);
  outlined copy of MeshResource.JointInfluences.InfluenceRate(v8, v9, v10, v11, v12, v13, v14, v15, v28, v29, (char)v2);
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(a1 + 104);
  v19 = *(_QWORD *)(a1 + 112);
  v20 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(_QWORD *)(a1 + 136);
  v23 = *(_QWORD *)(a1 + 144);
  v24 = *(_QWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 160);
  v26 = *(_BYTE *)(a1 + 168);
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  *(_QWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 136) = v14;
  *(_QWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 152) = v28;
  *(_QWORD *)(a1 + 160) = v29;
  *(_BYTE *)(a1 + 168) = (_BYTE)v2;
  outlined consume of MeshResource.JointInfluences.InfluenceRate(v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26);
  return a1;
}

__n128 __swift_memcpy169_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for MeshResource.JointInfluences(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v4 = *(_BYTE *)(a2 + 168);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 136);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 152);
  v14 = *(_QWORD *)(a1 + 160);
  v15 = *(_BYTE *)(a1 + 168);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = v4;
  outlined consume of MeshResource.JointInfluences.InfluenceRate(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.JointInfluences(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 169))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource.JointInfluences(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 169) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.JointInfluences()
{
  return &type metadata for MeshResource.JointInfluences;
}

ValueMetadata *type metadata accessor for MeshResource._Proto_LevelStrategy_v1()
{
  return &type metadata for MeshResource._Proto_LevelStrategy_v1;
}

uint64_t type metadata accessor for MeshResource._Proto_SerialLevelAssemblyData_v1()
{
  return objc_opt_self();
}

uint64_t method lookup function for MeshResource._Proto_SerialLevelAssemblyData_v1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MeshResource._Proto_SerialLevelAssemblyData_v1.__allocating_init(meshPartEnd:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of MeshResource._Proto_LevelStrategyData_v1.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for MeshResource._Proto_ScreenAreaLevelStrategyData_v1()
{
  return objc_opt_self();
}

uint64_t method lookup function for MeshResource._Proto_ScreenAreaLevelStrategyData_v1()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for MeshResource._Proto_ViewDepthLevelStrategyData_v1()
{
  return objc_opt_self();
}

uint64_t method lookup function for MeshResource._Proto_ViewDepthLevelStrategyData_v1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MeshResource._Proto_ViewDepthLevelStrategyData_v1.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of MeshResource._Proto_ViewDepthLevelStrategyData_v1.__allocating_init(maxViewDepth:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t destroy for MeshResource._Proto_Level_v1(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
}

uint64_t initializeWithCopy for MeshResource._Proto_Level_v1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 16;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 16, v5, v7);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 56, a2 + 56);
  return a1;
}

_QWORD *assignWithCopy for MeshResource._Proto_Level_v1(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  __swift_assign_boxed_opaque_existential_1(a1 + 7, a2 + 7);
  return a1;
}

uint64_t assignWithTake for MeshResource._Proto_Level_v1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource._Proto_Level_v1(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource._Proto_Level_v1(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource._Proto_Level_v1()
{
  return &type metadata for MeshResource._Proto_Level_v1;
}

uint64_t storeEnumTagSinglePayload for MeshResource._Proto_LevelStrategy_v1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC46158 + 4 * byte_21BE67E05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC4618C + 4 * byte_21BE67E00[v4]))();
}

uint64_t sub_21BC4618C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC46194(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC4619CLL);
  return result;
}

uint64_t sub_21BC461A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC461B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC461B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC461BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshResource._Proto_LevelOptions_v1()
{
  return &type metadata for MeshResource._Proto_LevelOptions_v1;
}

uint64_t destroy for MeshResource.JointInfluences.InfluenceRate(uint64_t a1)
{
  return outlined consume of MeshResource.JointInfluences.InfluenceRate(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  outlined copy of MeshResource.JointInfluences.InfluenceRate(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  char v25;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_BYTE *)(a2 + 80);
  outlined copy of MeshResource.JointInfluences.InfluenceRate(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 80) = v25;
  outlined consume of MeshResource.JointInfluences.InfluenceRate(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_BYTE *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v3;
  outlined consume of MeshResource.JointInfluences.InfluenceRate(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 64) >> 5) & 0xFFFFFFF0 | (*(_QWORD *)(a1 + 64) >> 4);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = (32 * -a2) & 0x1FFFFFFE00 | (16 * (-a2 & 0xFLL));
      *(_QWORD *)(a1 + 72) = 0;
      *(_BYTE *)(a1 + 80) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for MeshResource.JointInfluences.InfluenceRate(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80) >> 7;
}

uint64_t destructiveProjectEnumData for MeshResource.JointInfluences.InfluenceRate(uint64_t result)
{
  *(_BYTE *)(result + 80) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for MeshResource.JointInfluences.InfluenceRate(uint64_t result, char a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 80) & 3 | (a2 << 7);
  *(_QWORD *)(result + 64) &= 0x10FuLL;
  *(_BYTE *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.JointInfluences.InfluenceRate()
{
  return &type metadata for MeshResource.JointInfluences.InfluenceRate;
}

uint64_t getEnumTagSinglePayload for MeshResourceError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MeshResourceError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResourceError()
{
  return &type metadata for MeshResourceError;
}

uint64_t outlined retain of MeshBuffer<MeshJointInfluence>?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 80);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v4);
  return a1;
}

uint64_t sub_21BC46648()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BC4666C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static MeshResource.generateAsync(from:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in static MeshResource.generateAsync(from:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t sub_21BC466C4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #2 in closure #1 in closure #1 in static MeshResource.generateAsync(from:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_21BC466F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in MeshResource.replaceAsync(with:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in MeshResource.replaceAsync(with:)((uint64_t)(v0 + 2), v0[8], v0[9], v0[10], v0[11]);
}

uint64_t sub_21BC4676C()
{
  uint64_t v0;

  outlined consume of Result<MeshResource, Error>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject();
}

void outlined consume of Result<MeshResource, Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release();
}

uint64_t sub_21BC467A0()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #3 in closure #1 in closure #1 in MeshResource.replaceAsync(with:)()
{
  uint64_t v0;

  specialized closure #3 in closure #1 in closure #1 in MeshResource.replaceAsync(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(void *, uint64_t))(v0 + 40));
}

uint64_t *outlined release of MeshResource.Instance?(uint64_t *a1)
{
  outlined consume of IKRig.Constraint?(*a1, a1[1]);
  return a1;
}

_QWORD *outlined assign with copy of MeshResource._Proto_Level_v1(_QWORD *a1, _QWORD *a2)
{
  assignWithCopy for MeshResource._Proto_Level_v1(a2, a1);
  return a2;
}

uint64_t *outlined release of MeshResource.Part?(uint64_t *a1)
{
  outlined consume of MeshResource.Part?(*a1);
  return a1;
}

uint64_t outlined consume of MeshResource.Part?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of MeshResource.Model(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *outlined release of MeshResource.Model?(uint64_t *a1)
{
  outlined consume of MeshResource.Model?(*a1, a1[1]);
  return a1;
}

uint64_t outlined consume of MeshResource.Model?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL static MaterialParameterTypes.FaceCulling.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MaterialParameterTypes.FaceCulling.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int MaterialParameterTypes.FaceCulling.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double MaterialParameterTypes.TextureCoordinateTransform.offset.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void MaterialParameterTypes.TextureCoordinateTransform.offset.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*MaterialParameterTypes.TextureCoordinateTransform.offset.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double MaterialParameterTypes.TextureCoordinateTransform.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void MaterialParameterTypes.TextureCoordinateTransform.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*MaterialParameterTypes.TextureCoordinateTransform.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float MaterialParameterTypes.TextureCoordinateTransform.rotation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void MaterialParameterTypes.TextureCoordinateTransform.rotation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*MaterialParameterTypes.TextureCoordinateTransform.rotation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MaterialParameterTypes.TextureCoordinateTransform.init(offset:scale:rotation:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, float a4@<S2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(float *)(a1 + 16) = a4;
}

BOOL static MaterialParameterTypes.TriangleFillMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void MaterialParameterTypes.TriangleFillMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

unint64_t lazy protocol witness table accessor for type MaterialParameterTypes.FaceCulling and conformance MaterialParameterTypes.FaceCulling()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialParameterTypes.FaceCulling and conformance MaterialParameterTypes.FaceCulling;
  if (!lazy protocol witness table cache variable for type MaterialParameterTypes.FaceCulling and conformance MaterialParameterTypes.FaceCulling)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MaterialParameterTypes.FaceCulling, &type metadata for MaterialParameterTypes.FaceCulling);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialParameterTypes.FaceCulling and conformance MaterialParameterTypes.FaceCulling);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialParameterTypes.TriangleFillMode and conformance MaterialParameterTypes.TriangleFillMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialParameterTypes.TriangleFillMode and conformance MaterialParameterTypes.TriangleFillMode;
  if (!lazy protocol witness table cache variable for type MaterialParameterTypes.TriangleFillMode and conformance MaterialParameterTypes.TriangleFillMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MaterialParameterTypes.TriangleFillMode, &type metadata for MaterialParameterTypes.TriangleFillMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialParameterTypes.TriangleFillMode and conformance MaterialParameterTypes.TriangleFillMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialParameterTypes.BlendMode and conformance MaterialParameterTypes.BlendMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialParameterTypes.BlendMode and conformance MaterialParameterTypes.BlendMode;
  if (!lazy protocol witness table cache variable for type MaterialParameterTypes.BlendMode and conformance MaterialParameterTypes.BlendMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MaterialParameterTypes.BlendMode, &type metadata for MaterialParameterTypes.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialParameterTypes.BlendMode and conformance MaterialParameterTypes.BlendMode);
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes()
{
  return &type metadata for MaterialParameterTypes;
}

uint64_t storeEnumTagSinglePayload for MaterialParameterTypes.FaceCulling(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BC46CD4 + 4 * byte_21BE68C35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BC46D08 + 4 * byte_21BE68C30[v4]))();
}

uint64_t sub_21BC46D08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC46D10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC46D18);
  return result;
}

uint64_t sub_21BC46D24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC46D2CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BC46D30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC46D38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes.FaceCulling()
{
  return &type metadata for MaterialParameterTypes.FaceCulling;
}

uint64_t getEnumTagSinglePayload for MaterialParameterTypes.TextureCoordinateTransform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MaterialParameterTypes.TextureCoordinateTransform(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes.TextureCoordinateTransform()
{
  return &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes.TriangleFillMode()
{
  return &type metadata for MaterialParameterTypes.TriangleFillMode;
}

uint64_t storeEnumTagSinglePayload for MaterialParameterTypes.TriangleFillMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC46E10 + 4 * byte_21BE68C3F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC46E44 + 4 * byte_21BE68C3A[v4]))();
}

uint64_t sub_21BC46E44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC46E4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC46E54);
  return result;
}

uint64_t sub_21BC46E60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC46E68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC46E6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC46E74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes.BlendMode()
{
  return &type metadata for MaterialParameterTypes.BlendMode;
}

uint64_t specialized Entity.ChildCollection.filter(recursive:_:)(char a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t Object;
  unsigned __int8 *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  NSString *v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = MEMORY[0x24BEE4AF8];
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  v2 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v2 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_46;
    v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v5 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_45;
      specialized static SceneManager.customComponentType(_:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v7 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v8 = 1;
          else
            v8 = v7 == 0;
          if (v8)
          {
            result = swift_retain();
          }
          else
          {
            v9 = *v7;
            v10 = String.init(utf8String:)();
            if (v11)
              v12 = v10;
            else
              v12 = 0;
            if (v11)
              v13 = v11;
            else
              v13 = 0xE000000000000000;
            v7 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 == 42, v12, v13);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v7;
          }
          if (!v7)
            goto LABEL_47;
          swift_retain();
          v14 = String.init(utf8String:)();
          v16 = v15;
          swift_release();
          v17 = v16 ? v14 : 0;
          v18 = v16 ? v16 : 0xE000000000000000;
          v19 = (NSString *)MEMORY[0x220768C3C](v17, v18);
          swift_bridgeObjectRelease();
          v20 = NSClassFromString(v19);

          swift_release();
          if (v20)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v21 = swift_dynamicCastMetatype();
            if (v21)
            {
              v22 = (*(uint64_t (**)(void))(v21 + 232))();
              v23 = *(_QWORD *)(v22 + 16);
              swift_retain();
              MEMORY[0x22076D160](v23, 0);
              *(_QWORD *)(v22 + 16) = v4;
              MEMORY[0x22076D160](v4, v22);
              swift_release();
              goto LABEL_36;
            }
          }
        }
      }
      v5 = makeEntity(for:)(v4);
    }
    v22 = v5;
LABEL_36:
    result = REEntityGetChildCount();
    if (v2 >= result)
      goto LABEL_44;
    v24 = swift_retain();
    MEMORY[0x220768F0C](v24);
    if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if ((a1 & 1) != 0)
    {
      v26 = v22;
      v25 = specialized Entity.ChildCollection.filter(recursive:_:)(1, &v26);
      specialized Array.append<A>(contentsOf:)(v25);
    }
    ++v2;
    swift_release();
    if (v2 >= REEntityGetChildCount())
    {
      swift_release();
      return v27;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t Entity.ChildCollection.startIndex.getter()
{
  return 0;
}

uint64_t Entity.ChildCollection.endIndex.getter()
{
  return REEntityGetChildCount();
}

uint64_t Entity.ChildCollection.subscript.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v1 = result;
  result = REEntityGetChildCount();
  if (result <= v1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = REEntityGetChild();
  if (!result)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v2 = result;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v3 = specialized static Entity.entityInfoType(_:)();
  if (!v3)
    return makeEntity(for:)(v2);
  v4 = (*(uint64_t (**)(void))(v3 + 232))();
  v5 = *(_QWORD *)(v4 + 16);
  swift_retain();
  MEMORY[0x22076D160](v5, 0);
  *(_QWORD *)(v4 + 16) = v2;
  MEMORY[0x22076D160](v2, v4);
  swift_release();
  return v4;
}

Swift::Int __swiftcall Entity.ChildCollection.index(after:)(Swift::Int after)
{
  Swift::Int v1;

  if (after < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = after;
    after = REEntityGetChildCount();
    if (after > v1)
      return v1 + 1;
  }
  __break(1u);
  return after;
}

uint64_t specialized Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Parent;
  uint64_t ChildCount;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  void *v14;
  uint64_t SceneNullable;
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  swift_retain();
  Parent = REEntityGetParent();
  if (Parent)
  {
    ChildCount = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      for (i = swift_dynamicCastClassUnconditional(); ; i = makeEntity(for:)(ChildCount))
      {
        v9 = *(_QWORD *)(i + 16);
        v10 = *(_QWORD *)(a3 + 16);
        swift_release();
        if (v9 != v10)
          break;
LABEL_18:
        v23 = swift_retain();
        ChildCount = specialized Collection<>.firstIndex(of:)(v23);
        v25 = v24;
        result = swift_release();
        if ((v25 & 1) == 0)
          goto LABEL_26;
        __break(1u);
LABEL_20:
        ;
      }
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      v19 = specialized static Entity.entityInfoType(_:)();
      if (!v19)
        goto LABEL_20;
      v20 = (*(uint64_t (**)(void))(v19 + 232))();
      MEMORY[0x22076D160](*(_QWORD *)(v20 + 16), 0);
      *(_QWORD *)(v20 + 16) = ChildCount;
      MEMORY[0x22076D160](ChildCount, v20);
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(a3 + 16);
      swift_release();
      if (v21 == v22)
        goto LABEL_18;
    }
  }
  ChildCount = REEntityGetChildCount();
  swift_retain();
  REEntitySetParent();
  if (swift_conformsToProtocol2())
    v11 = a1;
  else
    v11 = 0;
  if (v11)
  {
    swift_beginAccess();
    v12 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v12[2])
      {
        swift_retain();
        v13 = (id)RFServiceManagerGetAnchorManagementService();
        if (v13)
        {
          v14 = v13;
          SceneNullable = REEntityGetSceneNullable();
          if (SceneNullable)
          {
            v16 = SceneNullable;
            v17 = (id)RESceneGetSwiftObject();
            type metadata accessor for Scene();
            if (v17)
            {
              swift_dynamicCastClassUnconditional();
            }
            else
            {
              swift_allocObject();
              Scene.init(coreScene:)(v16);
            }
            swift_release();
            RFAnchorManagementUpdateAnchoringInScene();
          }

        }
        swift_release();
      }
    }
  }
  type metadata accessor for Entity();
  static Entity.updateInteractions(root:)(a1);
  Entity.updateSceneGravityIfNeeded()();
  result = swift_release();
LABEL_26:
  if (ChildCount < 0)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  result = REEntityGetChildCount();
  if (a2 < 0 || ChildCount >= result)
    goto LABEL_44;
  result = REEntityGetChildCount();
  if (result < a2)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (ChildCount == a2 || ChildCount + 1 == a2)
    return swift_release();
  result = REEntityGetChildCount();
  if (ChildCount >= result)
    goto LABEL_46;
  result = REEntityGetChild();
  if (result)
  {
    v26 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_40:
      REEntityInsertChild();
      swift_release();
      return swift_release();
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      v27 = specialized static Entity.entityInfoType(_:)();
      if (v27)
      {
        v28 = (*(uint64_t (**)(void))(v27 + 232))();
        v29 = *(_QWORD *)(v28 + 16);
        swift_retain();
        MEMORY[0x22076D160](v29, 0);
        *(_QWORD *)(v28 + 16) = v26;
        MEMORY[0x22076D160](v26, v28);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v26);
      }
      goto LABEL_40;
    }
    goto LABEL_48;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ChildCount;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  void *v26;
  uint64_t SceneNullable;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v39 - v12;
  v14 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, a1, a3, v11);
  v42 = v13;
  dispatch thunk of Sequence.makeIterator()();
  v43 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v40 = a2;
  v41 = AssociatedConformanceWitness;
  v16 = a2;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    v18 = v44;
    if (!v44)
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v42, v43);
    swift_getAssociatedTypeWitness();
    v19 = HasHierarchy.parent.getter();
    if (v19 && (v20 = *(_QWORD *)(v19 + 16), v21 = *(_QWORD *)(v14 + 16), swift_release(), v20 == v21))
    {
      v30 = swift_retain();
      ChildCount = specialized Collection<>.firstIndex(of:)(v30);
      v32 = v31;
      result = swift_release();
      if ((v32 & 1) != 0)
        goto LABEL_49;
    }
    else
    {
      ChildCount = REEntityGetChildCount();
      swift_retain();
      REEntitySetParent();
      if (swift_conformsToProtocol2())
        v23 = v18;
      else
        v23 = 0;
      if (v23)
      {
        swift_beginAccess();
        v24 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v24[2])
          {
            swift_retain();
            v25 = (id)RFServiceManagerGetAnchorManagementService();
            if (v25)
            {
              v26 = v25;
              SceneNullable = REEntityGetSceneNullable();
              if (SceneNullable)
              {
                v28 = SceneNullable;
                v29 = (id)RESceneGetSwiftObject();
                type metadata accessor for Scene();
                if (v29)
                {
                  swift_dynamicCastClassUnconditional();
                }
                else
                {
                  v33 = swift_allocObject();
                  *(_OWORD *)(v33 + 24) = 0u;
                  *(_OWORD *)(v33 + 40) = 0u;
                  *(_QWORD *)(v33 + 56) = 0;
                  swift_unknownObjectWeakInit();
                  *(_QWORD *)(v33 + 104) = 0;
                  *(_OWORD *)(v33 + 88) = 0u;
                  *(_OWORD *)(v33 + 72) = 0u;
                  swift_weakInit();
                  *(_OWORD *)(v33 + 216) = 0u;
                  *(_OWORD *)(v33 + 200) = 0u;
                  *(_OWORD *)(v33 + 184) = 0u;
                  *(_OWORD *)(v33 + 168) = 0u;
                  *(_OWORD *)(v33 + 152) = 0u;
                  *(_OWORD *)(v33 + 136) = 0u;
                  *(_OWORD *)(v33 + 120) = 0u;
                  RERetain();
                  *(_QWORD *)(v33 + 16) = v28;
                  RESceneSetSwiftObject();
                }
                swift_release();
                RFAnchorManagementUpdateAnchoringInScene();
              }

            }
            swift_release();
          }
        }
      }
      type metadata accessor for Entity();
      static Entity.updateInteractions(root:)(v18);
      Entity.updateSceneGravityIfNeeded()();
      result = swift_release();
    }
    if (ChildCount < 0)
      break;
    result = REEntityGetChildCount();
    if ((a2 & 0x8000000000000000) != 0 || ChildCount >= result)
      goto LABEL_44;
    result = REEntityGetChildCount();
    if (result < (uint64_t)v16)
      goto LABEL_45;
    if (v16 == ChildCount || v16 == ChildCount + 1)
    {
      result = swift_release();
      if (ChildCount >= v16)
        goto LABEL_38;
    }
    else
    {
      result = REEntityGetChildCount();
      if (ChildCount >= result)
        goto LABEL_46;
      result = REEntityGetChild();
      if (!result)
        goto LABEL_50;
      v34 = result;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
          goto LABEL_47;
        v35 = specialized static Entity.entityInfoType(_:)();
        if (v35)
        {
          v36 = (*(uint64_t (**)(void))(v35 + 232))();
          v37 = *(_QWORD *)(v36 + 16);
          swift_retain();
          MEMORY[0x22076D160](v37, 0);
          *(_QWORD *)(v36 + 16) = v34;
          MEMORY[0x22076D160](v34, v36);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
      }
      REEntityInsertChild();
      swift_release();
      result = swift_release();
      a2 = v40;
      if (ChildCount >= v16)
      {
LABEL_38:
        if (__OFADD__(v16++, 1))
          goto LABEL_48;
      }
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t Entity.ChildCollection.append<A>(contentsOf:)()
{
  return Sequence.forEach(_:)();
}

uint64_t Entity.ChildCollection.remove(_:)(uint64_t a1)
{
  return Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, 0);
}

Swift::Void __swiftcall Entity.ChildCollection.remove(at:)(Swift::Int at)
{
  uint64_t v1;

  v1 = Entity.ChildCollection.subscript.getter(at);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v1, 0);
  swift_release();
}

Swift::Void __swiftcall Entity.ChildCollection.removeAll()()
{
  Entity.ChildCollection.removeAll(preservingWorldTransforms:)(0);
}

uint64_t Entity.ChildCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2)
{
  return Entity.ChildCollection.replaceAll<A>(_:preservingWorldTransforms:)(a1, 0, a2);
}

uint64_t protocol witness for EntityCollection.append(_:) in conformance RealityRenderer.EntityCollection()
{
  uint64_t v0;

  v0 = swift_retain();
  Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(v0, 0);
  return swift_release();
}

uint64_t EntityCollection.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = a1;
  v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Entity>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type CollectionOfOne<Entity> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Entity>, MEMORY[0x24BEE28F0]);
  return v5(&v9, v6, v7, a2, a3);
}

uint64_t protocol witness for EntityCollection.insert(_:beforeIndex:) in conformance RealityRenderer.EntityCollection(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return specialized Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)(a1, a2, *v2);
}

uint64_t EntityCollection.insert(_:beforeIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a1;
  v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Entity>);
  v9 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type CollectionOfOne<Entity> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Entity>, MEMORY[0x24BEE28F0]);
  return v7(&v11, a2, v8, v9, a3, a4);
}

uint64_t protocol witness for EntityCollection.removeAll(where:) in conformance RealityRenderer.EntityCollection(uint64_t (*a1)(uint64_t))
{
  return specialized EntityCollection.removeAll(where:)(a1);
}

uint64_t specialized EntityCollection.removeAll(where:)(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  Class v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Parent;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;

  v3 = v2;
  v4 = v1;
  result = REEntityGetChildCount();
  if (result < 0)
    goto LABEL_70;
  v6 = result;
  if (result)
  {
    v7 = result;
    v46 = result;
    do
    {
      if (v6 < v7)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        return result;
      }
      --v7;
      result = REEntityGetChildCount();
      if (v7 >= result)
        goto LABEL_65;
      result = REEntityGetChild();
      if (!result)
        goto LABEL_71;
      v8 = result;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v9 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
          goto LABEL_67;
        if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
          swift_once();
        swift_beginAccess();
        if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
              (v10 & 1) == 0))
        {
          swift_endAccess();
          v11 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
          swift_beginAccess();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v48 = static SceneManager.customComponentTypeObjectIdToHandles;
          static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
          static SceneManager.customComponentTypeObjectIdToHandles = v48;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        if (REEntityGetCustomComponent())
        {
          Object = RECustomComponentGetObject();
          if (Object)
          {
            v14 = *(unsigned __int8 **)Object;
            if (*(_QWORD *)(Object + 8) || !v14)
            {
              result = swift_retain();
            }
            else
            {
              v15 = *v14;
              v16 = String.init(utf8String:)();
              if (v17)
                v18 = v16;
              else
                v18 = 0;
              if (v17)
                v19 = v17;
              else
                v19 = 0xE000000000000000;
              v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
              swift_bridgeObjectRelease();
              type metadata accessor for IntrospectionDataCleanupHelper();
              result = swift_allocObject();
              *(_QWORD *)(result + 16) = v14;
            }
            if (!v14)
              goto LABEL_73;
            swift_retain();
            v20 = String.init(utf8String:)();
            v22 = v21;
            swift_release();
            v23 = v22 ? v20 : 0;
            v24 = v22 ? v22 : 0xE000000000000000;
            v25 = (NSString *)MEMORY[0x220768C3C](v23, v24);
            swift_bridgeObjectRelease();
            v26 = NSClassFromString(v25);

            swift_release();
            v6 = v46;
            if (v26)
            {
              swift_getObjCClassMetadata();
              type metadata accessor for Entity();
              v27 = swift_dynamicCastMetatype();
              if (v27)
              {
                v28 = (*(uint64_t (**)(void))(v27 + 232))();
                v29 = *(_QWORD *)(v28 + 16);
                swift_retain();
                MEMORY[0x22076D160](v29, 0);
                *(_QWORD *)(v28 + 16) = v8;
                MEMORY[0x22076D160](v8, v28);
                swift_release();
                goto LABEL_42;
              }
            }
          }
        }
        v9 = makeEntity(for:)(v8);
      }
      v28 = v9;
LABEL_42:
      v30 = a1(v28);
      result = swift_release();
      if (v3)
        return result;
      if ((v30 & 1) != 0)
      {
        v31 = *v4;
        swift_retain();
        result = REEntityGetChildCount();
        if (v7 >= result)
          goto LABEL_66;
        result = REEntityGetChild();
        if (!result)
          goto LABEL_72;
        v32 = result;
        type metadata accessor for Entity();
        if ((id)REEntityGetSwiftObject())
        {
          v33 = swift_dynamicCastClassUnconditional();
          goto LABEL_48;
        }
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
          goto LABEL_68;
        v35 = specialized static Entity.entityInfoType(_:)();
        if (v35)
        {
          v34 = (*(uint64_t (**)(void))(v35 + 232))();
          v36 = *(_QWORD *)(v34 + 16);
          swift_retain();
          MEMORY[0x22076D160](v36, 0);
          *(_QWORD *)(v34 + 16) = v32;
          MEMORY[0x22076D160](v32, v34);
          swift_release();
        }
        else
        {
          v33 = makeEntity(for:)(v32);
LABEL_48:
          v34 = v33;
        }
        Parent = REEntityGetParent();
        if (Parent)
        {
          v38 = Parent;
          if ((id)REEntityGetSwiftObject())
          {
            v39 = swift_dynamicCastClassUnconditional();
            goto LABEL_55;
          }
          result = REEntityIsBeingDestroyed();
          if ((result & 1) != 0)
            goto LABEL_69;
          v42 = specialized static Entity.entityInfoType(_:)();
          if (v42)
          {
            v43 = (*(uint64_t (**)(void))(v42 + 232))();
            MEMORY[0x22076D160](*(_QWORD *)(v43 + 16), 0);
            *(_QWORD *)(v43 + 16) = v38;
            MEMORY[0x22076D160](v38, v43);
            v44 = *(_QWORD *)(v43 + 16);
            v45 = *(_QWORD *)(v31 + 16);
            swift_release();
            if (v44 == v45)
              goto LABEL_4;
          }
          else
          {
            v39 = makeEntity(for:)(v38);
LABEL_55:
            v40 = *(_QWORD *)(v39 + 16);
            v41 = *(_QWORD *)(v31 + 16);
            swift_release();
            if (v40 == v41)
            {
LABEL_4:
              REEntitySetParent();
              static Entity.updateInteractions(root:)(v34);
            }
          }
        }
        swift_release();
        result = swift_release();
        v6 = v46;
      }
    }
    while (v7);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  Class v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Parent;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v48;

  v3 = v2;
  v4 = v1;
  result = REEntityGetChildCount();
  if (result < 0)
    goto LABEL_70;
  v6 = result;
  if (result)
  {
    v7 = result;
    v46 = v1;
    do
    {
      if (v6 < v7)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        return result;
      }
      --v7;
      result = REEntityGetChildCount();
      if (v7 >= result)
        goto LABEL_65;
      result = REEntityGetChild();
      if (!result)
        goto LABEL_71;
      v8 = result;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v9 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
          goto LABEL_67;
        if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
          swift_once();
        swift_beginAccess();
        if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
              (v10 & 1) == 0))
        {
          swift_endAccess();
          v11 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
          swift_beginAccess();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v48 = static SceneManager.customComponentTypeObjectIdToHandles;
          static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
          static SceneManager.customComponentTypeObjectIdToHandles = v48;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        if (REEntityGetCustomComponent())
        {
          Object = RECustomComponentGetObject();
          if (Object)
          {
            v14 = *(unsigned __int8 **)Object;
            if (*(_QWORD *)(Object + 8) || !v14)
            {
              result = swift_retain();
            }
            else
            {
              v15 = *v14;
              v16 = String.init(utf8String:)();
              if (v17)
                v18 = v16;
              else
                v18 = 0;
              if (v17)
                v19 = v17;
              else
                v19 = 0xE000000000000000;
              v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
              swift_bridgeObjectRelease();
              type metadata accessor for IntrospectionDataCleanupHelper();
              result = swift_allocObject();
              *(_QWORD *)(result + 16) = v14;
            }
            if (!v14)
              goto LABEL_73;
            swift_retain();
            v20 = String.init(utf8String:)();
            v22 = v21;
            swift_release();
            v23 = v22 ? v20 : 0;
            v24 = v22 ? v22 : 0xE000000000000000;
            v25 = (NSString *)MEMORY[0x220768C3C](v23, v24);
            swift_bridgeObjectRelease();
            v26 = NSClassFromString(v25);

            swift_release();
            v4 = v46;
            if (v26)
            {
              swift_getObjCClassMetadata();
              type metadata accessor for Entity();
              v27 = swift_dynamicCastMetatype();
              if (v27)
              {
                v28 = (*(uint64_t (**)(void))(v27 + 232))();
                v29 = *(_QWORD *)(v28 + 16);
                swift_retain();
                MEMORY[0x22076D160](v29, 0);
                *(_QWORD *)(v28 + 16) = v8;
                MEMORY[0x22076D160](v8, v28);
                swift_release();
                goto LABEL_42;
              }
            }
          }
        }
        v9 = makeEntity(for:)(v8);
      }
      v28 = v9;
LABEL_42:
      v30 = a1(v28);
      result = swift_release();
      if (v3)
        return result;
      if ((v30 & 1) != 0)
      {
        v31 = *v4;
        result = REEntityGetChildCount();
        if (v7 >= result)
          goto LABEL_66;
        result = REEntityGetChild();
        if (!result)
          goto LABEL_72;
        v32 = result;
        type metadata accessor for Entity();
        if ((id)REEntityGetSwiftObject())
        {
          v33 = swift_dynamicCastClassUnconditional();
          goto LABEL_48;
        }
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
          goto LABEL_68;
        v35 = specialized static Entity.entityInfoType(_:)();
        if (v35)
        {
          v34 = (*(uint64_t (**)(void))(v35 + 232))();
          v36 = *(_QWORD *)(v34 + 16);
          swift_retain();
          MEMORY[0x22076D160](v36, 0);
          *(_QWORD *)(v34 + 16) = v32;
          MEMORY[0x22076D160](v32, v34);
          swift_release();
        }
        else
        {
          v33 = makeEntity(for:)(v32);
LABEL_48:
          v34 = v33;
        }
        Parent = REEntityGetParent();
        if (Parent)
        {
          v38 = Parent;
          if ((id)REEntityGetSwiftObject())
          {
            v39 = swift_dynamicCastClassUnconditional();
            goto LABEL_55;
          }
          result = REEntityIsBeingDestroyed();
          if ((result & 1) != 0)
            goto LABEL_69;
          v42 = specialized static Entity.entityInfoType(_:)();
          if (v42)
          {
            v43 = (*(uint64_t (**)(void))(v42 + 232))();
            MEMORY[0x22076D160](*(_QWORD *)(v43 + 16), 0);
            *(_QWORD *)(v43 + 16) = v38;
            MEMORY[0x22076D160](v38, v43);
            v44 = *(_QWORD *)(v43 + 16);
            v45 = *(_QWORD *)(v31 + 16);
            swift_release();
            if (v44 == v45)
              goto LABEL_4;
          }
          else
          {
            v39 = makeEntity(for:)(v38);
LABEL_55:
            v40 = *(_QWORD *)(v39 + 16);
            v41 = *(_QWORD *)(v31 + 16);
            swift_release();
            if (v40 == v41)
            {
LABEL_4:
              REEntitySetParent();
              static Entity.updateInteractions(root:)(v34);
            }
          }
        }
        result = swift_release();
        v4 = v46;
      }
    }
    while (v7);
  }
  return result;
}

uint64_t EntityCollection.removeAll(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(_QWORD *, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  char v14;
  _QWORD v16[4];
  uint64_t v17;

  v5 = v4;
  dispatch thunk of Collection.startIndex.getter();
  v8 = v16[0];
  result = dispatch thunk of Collection.endIndex.getter();
  v10 = v17;
  if (v17 < v16[0])
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (v17 != v16[0])
  {
    while (v8 < v10)
    {
      v17 = --v10;
      v11 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v13 = *v12;
      swift_retain();
      v11(v16, 0);
      v14 = a1(v13);
      result = swift_release();
      if (!v5)
      {
        if ((v14 & 1) != 0)
          result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(v10, a3);
        if (v8 != v10)
          continue;
      }
      return result;
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

{
  return EntityCollection.removeAll(where:)(a1, a2, a3, a4);
}

void Entity.ChildCollection.makeIterator()(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t Entity.ChildCollection.IndexingIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];

  v3 = v2;
  v4 = a1;
  v27 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v26 - v14, v3 + *(int *)(v4 + 36), AssociatedTypeWitness, v13);
  dispatch thunk of Collection.endIndex.getter();
  swift_getAssociatedConformanceWitness();
  LOBYTE(v4) = dispatch thunk of static Comparable.>= infix(_:_:)();
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, AssociatedTypeWitness);
  v16(v15, AssociatedTypeWitness);
  if ((v4 & 1) != 0)
  {
    v17 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v27, 1, 1, v17);
  }
  else
  {
    v19 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v21 = v20;
    v22 = swift_getAssociatedTypeWitness();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = v27;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v27, v21, v22);
    v19(v28, 0);
    v25 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v7, v3, v5);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v24, 0, 1, v22);
  }
}

uint64_t Entity.ChildCollection.IndexingIterator.init(_elements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v17 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v13 + 16))(a4, a1, a2, v10);
  dispatch thunk of Collection.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a2);
  v15 = type metadata accessor for Entity.ChildCollection.IndexingIterator(0, a2, a3, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4 + *(int *)(v15 + 36), v12, AssociatedTypeWitness);
}

void Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t SceneNullable;
  uint64_t v13;
  id v14;
  float32x4_t v15;
  _OWORD v16[3];
  char v17;

  v4 = *v2;
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for identity != -1)
      swift_once();
    v15 = (float32x4_t)static simd_quatf.identity;
    specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v4);
    specialized simd_float4x4.init(translation:rotation:scale:)(0.0, v15, 1.0);
    REMakeSRTFromMatrix();
    v16[0] = v5;
    v16[1] = v6;
    v16[2] = v7;
    v17 = 0;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v16);
    swift_release();
  }
  REEntitySetParent();
  if (swift_conformsToProtocol2())
    v8 = a1;
  else
    v8 = 0;
  if (v8)
  {
    swift_beginAccess();
    v9 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v9[2])
      {
        swift_retain();
        v10 = (id)RFServiceManagerGetAnchorManagementService();
        if (v10)
        {
          v11 = v10;
          SceneNullable = REEntityGetSceneNullable();
          if (SceneNullable)
          {
            v13 = SceneNullable;
            v14 = (id)RESceneGetSwiftObject();
            type metadata accessor for Scene();
            if (v14)
            {
              swift_dynamicCastClassUnconditional();
            }
            else
            {
              swift_allocObject();
              Scene.init(coreScene:)(v13);
            }
            swift_release();
            RFAnchorManagementUpdateAnchoringInScene();
          }

        }
        swift_release();
      }
    }
  }
  type metadata accessor for Entity();
  static Entity.updateInteractions(root:)(a1);
  Entity.updateSceneGravityIfNeeded()();
}

uint64_t Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  simd_float4 v19;
  simd_float4 v20;
  simd_float4 v21;
  simd_float4 v22;
  simd_float4x4 v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  __int128 v27;
  float32x4_t v28;
  simd_float4 v29;
  float32x4_t v30;
  simd_float4 v31;
  float32x4_t v32;
  simd_float4 v33;
  float32x4_t v34;
  simd_float4 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  _BYTE v41[64];
  _BYTE v42[64];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  char v47;
  uint64_t v48;
  simd_float4x4 v49;

  v48 = *MEMORY[0x24BDAC8D0];
  v5 = *v2;
  result = REEntityGetParent();
  if (result)
  {
    v7 = result;
    type metadata accessor for Entity();
    if ((id)REEntityGetSwiftObject())
    {
      v8 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_21;
      }
      v11 = specialized static Entity.entityInfoType(_:)();
      if (v11)
      {
        v12 = (*(uint64_t (**)(void))(v11 + 232))();
        MEMORY[0x22076D160](*(_QWORD *)(v12 + 16), 0);
        *(_QWORD *)(v12 + 16) = v7;
        MEMORY[0x22076D160](v7, v12);
        v13 = *(_QWORD *)(v12 + 16);
        v14 = *(_QWORD *)(v5 + 16);
        result = swift_release();
        if (v13 != v14)
          return result;
LABEL_9:
        if ((a2 & 1) == 0)
        {
          REEntitySetParent();
          return static Entity.updateInteractions(root:)(a1);
        }
        *(double *)v15.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, 0);
        v36 = v15;
        v37 = v16;
        v38 = v18;
        v40 = v17;
        REEntitySetParent();
        swift_retain();
        RETransformComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          RETransformComponentGetParentWorldMatrix4x4F();
          v33 = v20;
          v35 = v19;
          v29 = v22;
          v31 = v21;
          swift_release();
          v23.columns[1] = v33;
          v23.columns[0] = v35;
          v23.columns[3] = v29;
          v23.columns[2] = v31;
        }
        else
        {
          swift_release();
          v23 = *(simd_float4x4 *)zmmword_21BE41220;
        }
        v49 = __invert_f4(v23);
        v24 = vmulq_f32((float32x4_t)v49.columns[0], (float32x4_t)0);
        v34 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v49.columns[0], (float32x4_t)0, (float32x4_t)v49.columns[1]), (float32x4_t)0, (float32x4_t)v49.columns[2]), (float32x4_t)0, (float32x4_t)v49.columns[3]);
        v32 = vmlaq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v49.columns[1], v24), (float32x4_t)0, (float32x4_t)v49.columns[2]), (float32x4_t)0, (float32x4_t)v49.columns[3]);
        v25 = vmlaq_f32(v24, (float32x4_t)0, (float32x4_t)v49.columns[1]);
        v28 = vmlaq_f32(vaddq_f32((float32x4_t)v49.columns[2], v25), (float32x4_t)0, (float32x4_t)v49.columns[3]);
        v30 = vaddq_f32((float32x4_t)v49.columns[3], vmlaq_f32(v25, (float32x4_t)0, (float32x4_t)v49.columns[2]));
        swift_retain();
        specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v41);
        swift_release();
        outlined init with take of Transform?((uint64_t)v41, (uint64_t)v42);
        if (v42[48] != 1 || one-time initialization token for identity == -1)
        {
LABEL_17:
          v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v38.f32[0]), v32, *(float32x2_t *)v38.f32, 1), v28, v38, 2), v30, v38, 3);
          v26.i32[3] = 0;
          v39 = v26;
          v43 = 0u;
          REDecomposeMatrix();
          *(__n64 *)&v27 = simd_float4x4.scale.getter(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v36.f32[0]), v32, *(float32x2_t *)v36.f32, 1), v28, v36, 2), v30, v36, 3), (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v37.f32[0]), v32, *(float32x2_t *)v37.f32, 1), v28, v37, 2),
                                          v30,
                                          v37,
                                          3),
                             (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v40.f32[0]), v32, *(float32x2_t *)v40.f32, 1), v28, v40, 2), v30, v40, 3));
          v43 = v27;
          v44 = 0;
          v45 = 0;
          v46 = v39;
          v47 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v43);
          swift_release();
          return static Entity.updateInteractions(root:)(a1);
        }
LABEL_21:
        swift_once();
        goto LABEL_17;
      }
      v8 = makeEntity(for:)(v7);
    }
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v5 + 16);
    result = swift_release();
    if (v9 != v10)
      return result;
    goto LABEL_9;
  }
  return result;
}

uint64_t Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t result;
  char v17;
  char v18;
  uint64_t ChildCount;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  simd_float4 v23;
  simd_float4 v24;
  simd_float4 v25;
  simd_float4 v26;
  simd_float4x4 v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  float32x4_t v32;
  simd_float4 v33;
  float32x4_t v34;
  simd_float4 v35;
  float32x4_t v36;
  simd_float4 v37;
  float32x4_t v38;
  simd_float4 v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  _BYTE v45[64];
  _BYTE v46[64];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  char v51;
  uint64_t v52;
  simd_float4x4 v53;

  v52 = *MEMORY[0x24BDAC8D0];
  v7 = *v3;
  *(_QWORD *)&v47 = *v3;
  if (*(_QWORD *)(Entity.ChildCollection.subscript.getter(a1) + 16) == *(_QWORD *)(a2 + 16))
    return swift_release();
  v8 = specialized HasHierarchy.parent.getter();
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v7 + 16);
    swift_release();
    if (v9 == v10)
    {
      v11 = specialized Collection<>.firstIndex(of:)(a2);
      v18 = v17;
      result = RELinkedOnOrAfterFall2024OSVersions();
      if ((_DWORD)result)
      {
        swift_retain();
        ChildCount = REEntityGetChildCount();
        if (ChildCount < 0)
          __break(1u);
        v20 = ChildCount;
        if (ChildCount)
        {
          v21 = 0;
          v22 = ChildCount - 1;
          while (v21 < REEntityGetChildCount())
          {
            if (v20 == ++v21)
              goto LABEL_17;
          }
          __break(1u);
LABEL_32:
          swift_once();
LABEL_27:
          v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v42.f32[0]), v36, *(float32x2_t *)v42.f32, 1), v32, v42, 2), v34, v42, 3);
          v30.i32[3] = 0;
          v43 = v30;
          v47 = 0u;
          REDecomposeMatrix();
          *(__n64 *)&v31 = simd_float4x4.scale.getter(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v40.f32[0]), v36, *(float32x2_t *)v40.f32, 1), v32, v40, 2), v34, v40, 3), (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v41.f32[0]), v36, *(float32x2_t *)v41.f32, 1), v32, v41, 2),
                                          v34,
                                          v41,
                                          3),
                             (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v44.f32[0]), v36, *(float32x2_t *)v44.f32, 1), v32, v44, 2), v34, v44, 3));
          v47 = v31;
          v48 = 0;
          v49 = 0;
          v50 = v43;
          v51 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v47);
          swift_release();
          goto LABEL_28;
        }
        v22 = -1;
LABEL_17:
        result = swift_release();
        if (v22 != a1 || (v18 & 1) == 0)
        {
LABEL_19:
          v11 = 0;
          if ((a3 & 1) != 0)
            goto LABEL_5;
          goto LABEL_20;
        }
      }
      else
      {
        if ((v18 & 1) == 0)
          goto LABEL_19;
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
  v11 = 1;
  if ((a3 & 1) != 0)
  {
LABEL_5:
    *(double *)v12.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a2, 0);
    v40 = v12;
    v41 = v13;
    v42 = v15;
    v44 = v14;
    goto LABEL_21;
  }
LABEL_20:
  v42 = *(float32x4_t *)&zmmword_21BE41220[48];
  v44 = *(float32x4_t *)&zmmword_21BE41220[32];
  v41 = *(float32x4_t *)&zmmword_21BE41220[16];
  v40 = *(float32x4_t *)zmmword_21BE41220;
LABEL_21:
  REEntitySetParent();
  REEntityInsertChild();
  if ((a3 & 1) != 0)
  {
    swift_retain();
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RETransformComponentGetParentWorldMatrix4x4F();
      v37 = v24;
      v39 = v23;
      v33 = v26;
      v35 = v25;
      swift_release();
      v27.columns[1] = v37;
      v27.columns[0] = v39;
      v27.columns[3] = v33;
      v27.columns[2] = v35;
    }
    else
    {
      swift_release();
      v27 = *(simd_float4x4 *)zmmword_21BE41220;
    }
    v53 = __invert_f4(v27);
    v28 = vmulq_f32((float32x4_t)v53.columns[0], (float32x4_t)0);
    v38 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v53.columns[0], (float32x4_t)0, (float32x4_t)v53.columns[1]), (float32x4_t)0, (float32x4_t)v53.columns[2]), (float32x4_t)0, (float32x4_t)v53.columns[3]);
    v36 = vmlaq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v53.columns[1], v28), (float32x4_t)0, (float32x4_t)v53.columns[2]), (float32x4_t)0, (float32x4_t)v53.columns[3]);
    v29 = vmlaq_f32(v28, (float32x4_t)0, (float32x4_t)v53.columns[1]);
    v32 = vmlaq_f32(vaddq_f32((float32x4_t)v53.columns[2], v29), (float32x4_t)0, (float32x4_t)v53.columns[3]);
    v34 = vaddq_f32((float32x4_t)v53.columns[3], vmlaq_f32(v29, (float32x4_t)0, (float32x4_t)v53.columns[2]));
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v45);
    swift_release();
    outlined init with take of Transform?((uint64_t)v45, (uint64_t)v46);
    if (v46[48] != 1 || one-time initialization token for identity == -1)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_28:
  if (v11)
  {
    type metadata accessor for Entity();
    static Entity.updateInteractions(root:)(a2);
  }
  return swift_release();
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t Object;
  unsigned __int8 *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  NSString *v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!REEntityGetChildCount())
    return 0;
  v2 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v2 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_43;
    v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v5 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_42;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v7 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v8 = 1;
          else
            v8 = v7 == 0;
          if (v8)
          {
            result = swift_retain();
          }
          else
          {
            v9 = *v7;
            v10 = String.init(utf8String:)();
            if (v11)
              v12 = v10;
            else
              v12 = 0;
            if (v11)
              v13 = v11;
            else
              v13 = 0xE000000000000000;
            v7 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 == 42, v12, v13);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v7;
          }
          if (!v7)
            goto LABEL_44;
          swift_retain();
          v14 = String.init(utf8String:)();
          v16 = v15;
          swift_release();
          v17 = v16 ? v14 : 0;
          v18 = v16 ? v16 : 0xE000000000000000;
          v19 = (NSString *)MEMORY[0x220768C3C](v17, v18);
          swift_bridgeObjectRelease();
          v20 = NSClassFromString(v19);

          swift_release();
          if (v20)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v21 = swift_dynamicCastMetatype();
            if (v21)
            {
              v22 = (*(uint64_t (**)(void))(v21 + 232))();
              MEMORY[0x22076D160](*(_QWORD *)(v22 + 16), 0);
              *(_QWORD *)(v22 + 16) = v4;
              MEMORY[0x22076D160](v4, v22);
              v23 = *(_QWORD *)(v22 + 16);
              v24 = *(_QWORD *)(a1 + 16);
              swift_release();
              if (v23 == v24)
                return v2;
              goto LABEL_36;
            }
          }
        }
      }
      v5 = makeEntity(for:)(v4);
    }
    v25 = *(_QWORD *)(v5 + 16);
    v26 = *(_QWORD *)(a1 + 16);
    swift_release();
    if (v25 == v26)
      return v2;
LABEL_36:
    result = REEntityGetChildCount();
    if (v2 >= result)
      goto LABEL_41;
    if (++v2 == REEntityGetChildCount())
      return 0;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0;
  v9 = 0;
  v10 = a3 + 7;
  v11 = 1;
  while (1)
  {
    if (v3 == v11)
      return 0;
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2)
      break;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = v11++;
    v10 += 2;
    if ((v13 & 1) != 0)
      return result;
  }
  return v9;
}

uint64_t *key path setter for Entity.ChildCollection.subscript(_:) : Entity.ChildCollection(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  if (*a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *result;
    swift_retain();
    result = (uint64_t *)REEntityGetChildCount();
    if (v3 < (uint64_t)result)
    {
      swift_retain();
      Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(v3, v4, 0);
      swift_release();
      return (uint64_t *)swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t Entity.ChildCollection.subscript.setter(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    result = REEntityGetChildCount();
    if (result > a2)
    {
      swift_retain();
      Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(a2, v3, 0);
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t *(*Entity.ChildCollection.subscript.modify(uint64_t *a1, uint64_t a2))(uint64_t *result, char a2)
{
  uint64_t v2;

  a1[1] = a2;
  a1[2] = v2;
  *a1 = Entity.ChildCollection.subscript.getter(a2);
  return Entity.ChildCollection.subscript.modify;
}

uint64_t *Entity.ChildCollection.subscript.modify(uint64_t *result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  v3 = result[1];
  if ((a2 & 1) != 0)
  {
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      swift_retain();
      result = (uint64_t *)REEntityGetChildCount();
      if ((uint64_t)result > v3)
      {
        swift_retain();
        Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(v3, v2, 0);
        swift_release();
        swift_release();
        return (uint64_t *)swift_release();
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  if (v3 < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = (uint64_t *)REEntityGetChildCount();
  if ((uint64_t)result > v3)
  {
    swift_retain();
    Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(v3, v2, 0);
    swift_release();
    return (uint64_t *)swift_release();
  }
LABEL_12:
  __break(1u);
  return result;
}

void Entity.ChildCollection.append(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(a1, a2);
}

Swift::Void __swiftcall Entity.ChildCollection.append(contentsOf:preservingWorldTransforms:)(Swift::OpaquePointer contentsOf, Swift::Bool preservingWorldTransforms)
{
  uint64_t *v2;
  _BOOL8 v3;
  unint64_t rawValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  void *v23;
  uint64_t SceneNullable;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL8 v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *Object;
  uint64_t ServiceLocator;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  BOOL v42;
  float v43;
  float v44;
  uint64_t v45;
  char *v46;
  simd_quatf v47;
  __int128 v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  _OWORD v53[5];
  _OWORD v54[3];
  char v55;

  v3 = preservingWorldTransforms;
  rawValue = (unint64_t)contentsOf._rawValue;
  v5 = *v2;
  if ((unint64_t)contentsOf._rawValue >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)(((unint64_t)contentsOf._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = type metadata accessor for Entity();
      v8 = 0;
      v9 = rawValue & 0xC000000000000001;
      v46 = (char *)(rawValue + 32);
      v45 = v6;
      do
      {
        if (v9)
        {
          v10 = MEMORY[0x220769770](v8, rawValue);
          v11 = __OFADD__(v8++, 1);
          if (v11)
            goto LABEL_49;
        }
        else
        {
          v10 = *(_QWORD *)&v46[8 * v8];
          swift_retain();
          v11 = __OFADD__(v8++, 1);
          if (v11)
          {
LABEL_49:
            __break(1u);
            goto LABEL_50;
          }
        }
        if (v3)
        {
          if (one-time initialization token for identity != -1)
            swift_once();
          v47 = (simd_quatf)static simd_quatf.identity;
          specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v10, v5);
          *(double *)&v12 = simd_matrix4x4((float32x4_t)v47);
          v53[1] = v12;
          v53[2] = v13;
          v53[3] = v14;
          v53[4] = v15;
          simd_float4x4.scale(_:)((float32x4_t)xmmword_21BE41210);
          REMakeSRTFromMatrix();
          v17 = v16;
          HIDWORD(v17) = v49;
          HIDWORD(v18) = v50;
          v54[0] = v17;
          v54[1] = v19;
          v54[2] = v18;
          v55 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v54);
          swift_release();
        }
        REEntitySetParent();
        if (swift_conformsToProtocol2())
          v20 = v10;
        else
          v20 = 0;
        if (v20)
        {
          swift_beginAccess();
          v21 = static RealityFusionSession.sharedSession;
          if (static RealityFusionSession.sharedSession)
          {
            swift_beginAccess();
            if (v21[2])
            {
              swift_retain();
              v22 = (id)RFServiceManagerGetAnchorManagementService();
              if (v22)
              {
                v23 = v22;
                SceneNullable = REEntityGetSceneNullable();
                if (SceneNullable)
                {
                  v25 = SceneNullable;
                  v26 = v7;
                  v27 = v9;
                  v28 = v3;
                  v29 = rawValue;
                  v30 = (id)RESceneGetSwiftObject();
                  type metadata accessor for Scene();
                  if (v30)
                  {
                    swift_dynamicCastClassUnconditional();
                  }
                  else
                  {
                    v31 = swift_allocObject();
                    *(_OWORD *)(v31 + 24) = 0u;
                    *(_OWORD *)(v31 + 40) = 0u;
                    *(_QWORD *)(v31 + 56) = 0;
                    swift_unknownObjectWeakInit();
                    *(_QWORD *)(v31 + 104) = 0;
                    *(_OWORD *)(v31 + 88) = 0u;
                    *(_OWORD *)(v31 + 72) = 0u;
                    swift_weakInit();
                    *(_OWORD *)(v31 + 216) = 0u;
                    *(_OWORD *)(v31 + 200) = 0u;
                    *(_OWORD *)(v31 + 184) = 0u;
                    *(_OWORD *)(v31 + 168) = 0u;
                    *(_OWORD *)(v31 + 152) = 0u;
                    *(_OWORD *)(v31 + 136) = 0u;
                    *(_OWORD *)(v31 + 120) = 0u;
                    RERetain();
                    *(_QWORD *)(v31 + 16) = v25;
                    RESceneSetSwiftObject();
                  }
                  swift_release();
                  RFAnchorManagementUpdateAnchoringInScene();
                  rawValue = v29;
                  v3 = v28;
                  v9 = v27;
                  v7 = v26;
                  v6 = v45;
                }

              }
              swift_release();
            }
          }
        }
        static Entity.updateInteractions(root:)(v10);
        v32 = REEntityGetSceneNullable();
        if (v32)
        {
          v33 = v32;
          v34 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v34)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            v35 = swift_allocObject();
            *(_OWORD *)(v35 + 24) = 0u;
            *(_OWORD *)(v35 + 40) = 0u;
            *(_QWORD *)(v35 + 56) = 0;
            swift_unknownObjectWeakInit();
            *(_QWORD *)(v35 + 104) = 0;
            *(_OWORD *)(v35 + 88) = 0u;
            *(_OWORD *)(v35 + 72) = 0u;
            swift_weakInit();
            *(_OWORD *)(v35 + 216) = 0u;
            *(_OWORD *)(v35 + 200) = 0u;
            *(_OWORD *)(v35 + 184) = 0u;
            *(_OWORD *)(v35 + 168) = 0u;
            *(_OWORD *)(v35 + 152) = 0u;
            *(_OWORD *)(v35 + 136) = 0u;
            *(_OWORD *)(v35 + 120) = 0u;
            RERetain();
            *(_QWORD *)(v35 + 16) = v33;
            RESceneSetSwiftObject();
          }
          swift_beginAccess();
          if (static __RKScenePhysics.registration)
          {
            RESceneGetComponentsOfCustomType();
            if (v36)
            {
              Object = (__int128 *)RECustomComponentGetObject();
              if (Object)
              {
                v48 = *Object;
                if (RESceneGetECSManagerNullable())
                {
                  ServiceLocator = REECSManagerGetServiceLocator();
                  if (MEMORY[0x22076FDD0](ServiceLocator))
                  {
                    REPhysicsSimulationServiceGetDefaultGravity();
                    v41 = v39;
                    v40 = 0;
                    HIDWORD(v41) = v51;
                    v42 = 1;
                    while (1)
                    {
                      while (!v42)
                      {
                        if (v40 == 2)
                          goto LABEL_4;
                        v42 = 0;
                        ++v40;
                      }
                      v52 = v41;
                      v43 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v40 & 3)));
                      v53[0] = v48;
                      v44 = *(float *)((unint64_t)v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v40 & 3)));
                      v42 = v43 == v44;
                      if (v40 == 2)
                        break;
                      ++v40;
                    }
                    if (v43 != v44)
LABEL_4:
                      REPhysicsSimulationServiceSetDefaultGravity();
                  }
                }
              }
            }
          }
          swift_release();
        }
        swift_release();
      }
      while (v8 != v6);
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t Entity.ChildCollection.append<A>(contentsOf:preservingWorldTransforms:)()
{
  return Sequence.forEach(_:)();
}

void closure #1 in Entity.ChildCollection.append<A>(contentsOf:preservingWorldTransforms:)(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t SceneNullable;
  uint64_t v13;
  id v14;
  float32x4_t v15;
  _OWORD v16[3];
  char v17;

  v4 = *a1;
  if ((a3 & 1) != 0)
  {
    if (one-time initialization token for identity != -1)
      swift_once();
    v15 = (float32x4_t)static simd_quatf.identity;
    specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v4, a2);
    specialized simd_float4x4.init(translation:rotation:scale:)(0.0, v15, 1.0);
    REMakeSRTFromMatrix();
    v16[0] = v5;
    v16[1] = v6;
    v16[2] = v7;
    v17 = 0;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v16);
    swift_release();
  }
  REEntitySetParent();
  if (swift_conformsToProtocol2())
    v8 = v4;
  else
    v8 = 0;
  if (v8)
  {
    swift_beginAccess();
    v9 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v9[2])
      {
        swift_retain();
        v10 = (id)RFServiceManagerGetAnchorManagementService();
        if (v10)
        {
          v11 = v10;
          SceneNullable = REEntityGetSceneNullable();
          if (SceneNullable)
          {
            v13 = SceneNullable;
            v14 = (id)RESceneGetSwiftObject();
            type metadata accessor for Scene();
            if (v14)
            {
              swift_dynamicCastClassUnconditional();
            }
            else
            {
              swift_allocObject();
              Scene.init(coreScene:)(v13);
            }
            swift_release();
            RFAnchorManagementUpdateAnchoringInScene();
          }

        }
        swift_release();
      }
    }
  }
  type metadata accessor for Entity();
  static Entity.updateInteractions(root:)(v4);
  Entity.updateSceneGravityIfNeeded()();
}

uint64_t Entity.ChildCollection.append(contentsOf:preservingWorldTransforms:)(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v4 = *v2;
  v6 = *a1;
  swift_retain();
  specialized Entity.ChildCollection.forEach(recursive:using:)(0, (uint64_t)&v6, v4, a2);
  return swift_release();
}

uint64_t Entity.ChildCollection.remove(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  return Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, a2);
}

Swift::Void __swiftcall Entity.ChildCollection.remove(at:preservingWorldTransform:)(Swift::Int at, Swift::Bool preservingWorldTransform)
{
  uint64_t v3;

  v3 = Entity.ChildCollection.subscript.getter(at);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v3, preservingWorldTransform);
  swift_release();
}

Swift::Void __swiftcall Entity.ChildCollection.removeAll(keepCapacity:preservingWorldTransforms:)(Swift::Bool keepCapacity, Swift::Bool preservingWorldTransforms)
{
  uint64_t ChildCount;
  uint64_t v4;
  Swift::Bool v5;
  uint64_t v6;
  uint64_t Child;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_retain();
  ChildCount = REEntityGetChildCount();
  if (ChildCount < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  v4 = ChildCount;
  if (!ChildCount)
    goto LABEL_18;
  v5 = preservingWorldTransforms;
  while (2)
  {
    v6 = 0;
    do
    {
      if (v6 >= REEntityGetChildCount())
      {
        __break(1u);
        goto LABEL_20;
      }
      ++v6;
    }
    while (v4 != v6);
    swift_release();
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    Child = REEntityGetChild();
    if (!Child)
      goto LABEL_24;
    v8 = Child;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release();
      type metadata accessor for Entity();
      v9 = swift_dynamicCastClassUnconditional();
      goto LABEL_16;
    }
    if ((REEntityIsBeingDestroyed() & 1) != 0)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v10 = specialized static Entity.entityInfoType(_:)();
    if (v10)
    {
      v9 = (*(uint64_t (**)(void))(v10 + 232))();
      v11 = *(_QWORD *)(v9 + 16);
      swift_retain();
      MEMORY[0x22076D160](v11, 0);
      *(_QWORD *)(v9 + 16) = v8;
      MEMORY[0x22076D160](v8, v9);
      swift_release();
    }
    else
    {
      v9 = makeEntity(for:)(v8);
    }
    swift_release();
LABEL_16:
    Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v9, v5);
    swift_release();
    swift_retain();
    v12 = REEntityGetChildCount();
    if (v12 < 0)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v4 = v12;
    if (v12)
      continue;
    break;
  }
LABEL_18:
  swift_release();
}

Swift::Void __swiftcall Entity.ChildCollection.removeAll(preservingWorldTransforms:)(Swift::Bool preservingWorldTransforms)
{
  uint64_t ChildCount;
  uint64_t v3;
  Swift::Bool v4;
  uint64_t v5;
  uint64_t Child;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_retain();
  ChildCount = REEntityGetChildCount();
  if (ChildCount < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  v3 = ChildCount;
  if (!ChildCount)
    goto LABEL_18;
  v4 = preservingWorldTransforms;
  while (2)
  {
    v5 = 0;
    do
    {
      if (v5 >= REEntityGetChildCount())
      {
        __break(1u);
        goto LABEL_20;
      }
      ++v5;
    }
    while (v3 != v5);
    swift_release();
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    Child = REEntityGetChild();
    if (!Child)
      goto LABEL_24;
    v7 = Child;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release();
      type metadata accessor for Entity();
      v8 = swift_dynamicCastClassUnconditional();
      goto LABEL_16;
    }
    if ((REEntityIsBeingDestroyed() & 1) != 0)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v9 = specialized static Entity.entityInfoType(_:)();
    if (v9)
    {
      v8 = (*(uint64_t (**)(void))(v9 + 232))();
      v10 = *(_QWORD *)(v8 + 16);
      swift_retain();
      MEMORY[0x22076D160](v10, 0);
      *(_QWORD *)(v8 + 16) = v7;
      MEMORY[0x22076D160](v7, v8);
      swift_release();
    }
    else
    {
      v8 = makeEntity(for:)(v7);
    }
    swift_release();
LABEL_16:
    Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v8, v4);
    swift_release();
    swift_retain();
    v11 = REEntityGetChildCount();
    if (v11 < 0)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v3 = v11;
    if (v11)
      continue;
    break;
  }
LABEL_18:
  swift_release();
}

Swift::Void __swiftcall Entity.ChildCollection.replaceAll(_:preservingWorldTransforms:)(Swift::OpaquePointer _, Swift::Bool preservingWorldTransforms)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t ChildCount;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Child;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  void *v31;
  uint64_t SceneNullable;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *rawValue;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *Object;
  uint64_t ServiceLocator;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  BOOL v49;
  float v50;
  float v51;
  uint64_t v52;
  char *v53;
  simd_quatf v54;
  __int128 v55;
  int v56;
  int v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[3];
  char v66;

  v5 = *v2;
  swift_retain();
  ChildCount = REEntityGetChildCount();
  if (ChildCount < 0)
  {
    __break(1u);
LABEL_3:
    swift_release();
    type metadata accessor for Entity();
    v7 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  while (2)
  {
    v8 = ChildCount;
    if (ChildCount)
    {
      v9 = 0;
      do
      {
        if (v9 >= REEntityGetChildCount())
        {
          __break(1u);
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        ++v9;
      }
      while (v8 != v9);
      swift_release();
      *(_QWORD *)&v61 = v5;
      swift_retain();
      if (REEntityGetChildCount() < 1)
        goto LABEL_65;
      Child = REEntityGetChild();
      if (!Child)
        goto LABEL_71;
      v11 = Child;
      if ((id)REEntityGetSwiftObject())
        goto LABEL_3;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v12 = specialized static Entity.entityInfoType(_:)();
        if (v12)
        {
          v7 = (*(uint64_t (**)(void))(v12 + 232))();
          v13 = *(_QWORD *)(v7 + 16);
          swift_retain();
          MEMORY[0x22076D160](v13, 0);
          *(_QWORD *)(v7 + 16) = v11;
          MEMORY[0x22076D160](v11, v7);
          swift_release();
        }
        else
        {
          v7 = makeEntity(for:)(v11);
        }
        swift_release();
LABEL_4:
        Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v7, preservingWorldTransforms);
        swift_release();
        swift_retain();
        ChildCount = REEntityGetChildCount();
        if ((ChildCount & 0x8000000000000000) == 0)
          continue;
LABEL_66:
        __break(1u);
      }
      __break(1u);
    }
    else
    {
      swift_release();
      if (!((unint64_t)_._rawValue >> 62))
      {
        v14 = *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v14)
        {
LABEL_69:
          swift_bridgeObjectRelease();
          return;
        }
        goto LABEL_19;
      }
    }
    break;
  }
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14)
    goto LABEL_69;
LABEL_19:
  v15 = type metadata accessor for Entity();
  if (v14 >= 1)
  {
    v16 = v15;
    v17 = 0;
    v18 = (unint64_t)_._rawValue & 0xC000000000000001;
    v53 = (char *)_._rawValue + 32;
    v52 = v14;
    while (1)
    {
      if (v18)
      {
        v19 = MEMORY[0x220769770](v17, _._rawValue);
        if (preservingWorldTransforms)
          goto LABEL_28;
      }
      else
      {
        v19 = *(_QWORD *)&v53[8 * v17];
        swift_retain();
        if (preservingWorldTransforms)
        {
LABEL_28:
          if (one-time initialization token for identity != -1)
            swift_once();
          v54 = (simd_quatf)static simd_quatf.identity;
          specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v19, v5);
          *(double *)&v20 = simd_matrix4x4((float32x4_t)v54);
          v61 = v20;
          v62 = v21;
          v63 = v22;
          v64 = v23;
          simd_float4x4.scale(_:)((float32x4_t)xmmword_21BE41210);
          REMakeSRTFromMatrix();
          v25 = v24;
          HIDWORD(v25) = v56;
          HIDWORD(v26) = v57;
          v65[0] = v25;
          v65[1] = v27;
          v65[2] = v26;
          v66 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v65);
          swift_release();
        }
      }
      REEntitySetParent();
      if (swift_conformsToProtocol2())
        v28 = v19;
      else
        v28 = 0;
      if (v28)
      {
        swift_beginAccess();
        v29 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v29[2])
          {
            swift_retain();
            v30 = (id)RFServiceManagerGetAnchorManagementService();
            if (v30)
            {
              v31 = v30;
              SceneNullable = REEntityGetSceneNullable();
              if (SceneNullable)
              {
                v33 = SceneNullable;
                v34 = v16;
                v35 = v18;
                rawValue = _._rawValue;
                v37 = (id)RESceneGetSwiftObject();
                type metadata accessor for Scene();
                if (v37)
                {
                  swift_dynamicCastClassUnconditional();
                }
                else
                {
                  v38 = swift_allocObject();
                  *(_OWORD *)(v38 + 24) = 0u;
                  *(_OWORD *)(v38 + 40) = 0u;
                  *(_QWORD *)(v38 + 56) = 0;
                  swift_unknownObjectWeakInit();
                  *(_QWORD *)(v38 + 104) = 0;
                  *(_OWORD *)(v38 + 88) = 0u;
                  *(_OWORD *)(v38 + 72) = 0u;
                  swift_weakInit();
                  *(_OWORD *)(v38 + 216) = 0u;
                  *(_OWORD *)(v38 + 200) = 0u;
                  *(_OWORD *)(v38 + 184) = 0u;
                  *(_OWORD *)(v38 + 168) = 0u;
                  *(_OWORD *)(v38 + 152) = 0u;
                  *(_OWORD *)(v38 + 136) = 0u;
                  *(_OWORD *)(v38 + 120) = 0u;
                  RERetain();
                  *(_QWORD *)(v38 + 16) = v33;
                  RESceneSetSwiftObject();
                }
                swift_release();
                RFAnchorManagementUpdateAnchoringInScene();
                _._rawValue = rawValue;
                v18 = v35;
                v16 = v34;
                v14 = v52;
              }

            }
            swift_release();
          }
        }
      }
      static Entity.updateInteractions(root:)(v19);
      v39 = REEntityGetSceneNullable();
      if (v39)
      {
        v40 = v39;
        v41 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v41)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          v42 = swift_allocObject();
          *(_OWORD *)(v42 + 24) = 0u;
          *(_OWORD *)(v42 + 40) = 0u;
          *(_QWORD *)(v42 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(_QWORD *)(v42 + 104) = 0;
          *(_OWORD *)(v42 + 88) = 0u;
          *(_OWORD *)(v42 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v42 + 216) = 0u;
          *(_OWORD *)(v42 + 200) = 0u;
          *(_OWORD *)(v42 + 184) = 0u;
          *(_OWORD *)(v42 + 168) = 0u;
          *(_OWORD *)(v42 + 152) = 0u;
          *(_OWORD *)(v42 + 136) = 0u;
          *(_OWORD *)(v42 + 120) = 0u;
          RERetain();
          *(_QWORD *)(v42 + 16) = v40;
          RESceneSetSwiftObject();
        }
        swift_beginAccess();
        if (static __RKScenePhysics.registration)
        {
          RESceneGetComponentsOfCustomType();
          if (v43)
          {
            Object = (__int128 *)RECustomComponentGetObject();
            if (Object)
            {
              v55 = *Object;
              if (RESceneGetECSManagerNullable())
              {
                ServiceLocator = REECSManagerGetServiceLocator();
                if (MEMORY[0x22076FDD0](ServiceLocator))
                {
                  REPhysicsSimulationServiceGetDefaultGravity();
                  v48 = v46;
                  v47 = 0;
                  HIDWORD(v48) = v58;
                  v49 = 1;
                  while (1)
                  {
                    while (!v49)
                    {
                      if (v47 == 2)
                        goto LABEL_21;
                      v49 = 0;
                      ++v47;
                    }
                    v59 = v48;
                    v50 = *(float *)((unint64_t)&v59 & 0xFFFFFFFFFFFFFFF3 | (4 * (v47 & 3)));
                    v60 = v55;
                    v51 = *(float *)((unint64_t)&v60 & 0xFFFFFFFFFFFFFFF3 | (4 * (v47 & 3)));
                    v49 = v50 == v51;
                    if (v47 == 2)
                      break;
                    ++v47;
                  }
                  if (v50 != v51)
LABEL_21:
                    REPhysicsSimulationServiceSetDefaultGravity();
                }
              }
            }
          }
        }
        swift_release();
      }
      swift_release();
      if (++v17 == v14)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
}

uint64_t Entity.ChildCollection.replaceAll<A>(_:preservingWorldTransforms:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  Swift::OpaquePointer v19;

  v17 = a2;
  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  v16 = *v3;
  v19._rawValue = (void *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a3, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v18)
      break;
    v14 = swift_retain();
    MEMORY[0x220768F0C](v14);
    if (*(_QWORD *)(((unint64_t)v19._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v19._rawValue & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  v18 = v16;
  Entity.ChildCollection.replaceAll(_:preservingWorldTransforms:)(v19, v17 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Entity.ChildCollection(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3;

  v3 = Entity.ChildCollection.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance Entity.ChildCollection(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  return specialized Collection.distance(from:to:)(*a1, *a2, *v2);
}

uint64_t protocol witness for Collection.count.getter in conformance Entity.ChildCollection()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v1 = result;
    if (!result)
      return v1;
    v2 = 0;
    while (1)
    {
      result = REEntityGetChildCount();
      if (v2 >= result)
        break;
      if (v1 == ++v2)
        return v1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Entity.ChildCollection()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Entity.ChildCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t Entity.ChildCollection.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_retain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  v2 = type metadata accessor for Entity();
  v3 = MEMORY[0x220768F48](v1, v2);
  swift_release();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Entity.ChildCollection()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_retain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  v2 = type metadata accessor for Entity();
  v3 = MEMORY[0x220768F48](v1, v2);
  swift_release();
  return v3;
}

uint64_t Entity.ChildCollection.IndexingIterator.init(_elements:_position:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for Entity.ChildCollection.IndexingIterator(0, a3, a4, v9) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v10, a2, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Entity.ChildCollection.IndexingIterator<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t EntityCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EntityCollection.append<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v11;

  dispatch thunk of Collection.endIndex.getter();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, v11, a3, a5, a2, a4);
}

uint64_t EntityCollection.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  char v7;

  lazy protocol witness table accessor for type Entity and conformance Entity();
  result = Collection<>.firstIndex(of:)();
  if ((v7 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v6, a2, a3);
  return result;
}

Swift::Void __swiftcall EntityCollection.removeAll()()
{
  uint64_t v0;

  (*(void (**)(uint64_t (*)(), _QWORD))(v0 + 72))(protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError, 0);
}

uint64_t EntityCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EntityCollection.replaceAll<A>(_:)(a1, a4, a2, a5, a3);
}

{
  (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, 0, a3, a5, a2, a4);
}

uint64_t protocol witness for EntityCollection.remove(_:) in conformance Entity.ChildCollection(uint64_t a1)
{
  return Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, 0);
}

uint64_t protocol witness for EntityCollection.remove(at:) in conformance Entity.ChildCollection(uint64_t a1)
{
  uint64_t v1;

  v1 = Entity.ChildCollection.subscript.getter(a1);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v1, 0);
  return swift_release();
}

uint64_t protocol witness for EntityCollection.removeAll(where:) in conformance Entity.ChildCollection(uint64_t (*a1)(uint64_t))
{
  return specialized EntityCollection.removeAll(where:)(a1);
}

uint64_t type metadata accessor for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Entity.ChildCollection.IndexingIterator);
}

void partial apply for closure #1 in Entity.ChildCollection.append<A>(contentsOf:preservingWorldTransforms:)(uint64_t *a1)
{
  uint64_t v1;

  closure #1 in Entity.ChildCollection.append<A>(contentsOf:preservingWorldTransforms:)(a1, *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t specialized Entity.ChildCollection.forEach(recursive:using:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  void *v26;
  uint64_t SceneNullable;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *Object;
  uint64_t ServiceLocator;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  BOOL v41;
  float v42;
  float v43;
  int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  simd_quatf v48;
  __int128 v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[4];
  _OWORD v55[3];
  char v56;

  swift_retain();
  v7 = swift_retain();
  v8 = specialized _copyCollectionToContiguousArray<A>(_:)(v7);
  result = swift_release();
  if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_release();
    if (v10)
      goto LABEL_4;
LABEL_54:
    swift_release();
    return swift_release();
  }
  v10 = *(_QWORD *)(v8 + 16);
  if (!v10)
    goto LABEL_54;
LABEL_4:
  if (v10 >= 1)
  {
    v11 = v8;
    v12 = v8 & 0xC000000000000001;
    type metadata accessor for Entity();
    v13 = 0;
    v47 = v11;
    v45 = v11 + 32;
    v46 = a1;
    while (1)
    {
      if (v12)
      {
        v14 = MEMORY[0x220769770](v13, v47);
        if ((a4 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        v14 = *(_QWORD *)(v45 + 8 * v13);
        swift_retain();
        if ((a4 & 1) == 0)
          goto LABEL_14;
      }
      if (one-time initialization token for identity != -1)
        swift_once();
      v48 = (simd_quatf)static simd_quatf.identity;
      specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v14, a3);
      *(double *)&v15 = simd_matrix4x4((float32x4_t)v48);
      v54[0] = v15;
      v54[1] = v16;
      v54[2] = v17;
      v54[3] = v18;
      simd_float4x4.scale(_:)((float32x4_t)xmmword_21BE41210);
      REMakeSRTFromMatrix();
      v20 = v19;
      HIDWORD(v20) = v50;
      HIDWORD(v21) = v51;
      v55[0] = v20;
      v55[1] = v22;
      v55[2] = v21;
      v56 = 0;
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v55);
      swift_release();
LABEL_14:
      REEntitySetParent();
      if (swift_conformsToProtocol2())
        v23 = v14;
      else
        v23 = 0;
      if (v23)
      {
        swift_beginAccess();
        v24 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v24[2])
          {
            swift_retain();
            v25 = (id)RFServiceManagerGetAnchorManagementService();
            if (v25)
            {
              v26 = v25;
              SceneNullable = REEntityGetSceneNullable();
              if (SceneNullable)
              {
                v28 = SceneNullable;
                v29 = (id)RESceneGetSwiftObject();
                type metadata accessor for Scene();
                if (v29)
                {
                  swift_dynamicCastClassUnconditional();
                }
                else
                {
                  v30 = swift_allocObject();
                  *(_OWORD *)(v30 + 24) = 0u;
                  *(_OWORD *)(v30 + 40) = 0u;
                  *(_QWORD *)(v30 + 56) = 0;
                  swift_unknownObjectWeakInit();
                  *(_QWORD *)(v30 + 104) = 0;
                  *(_OWORD *)(v30 + 88) = 0u;
                  *(_OWORD *)(v30 + 72) = 0u;
                  swift_weakInit();
                  *(_OWORD *)(v30 + 216) = 0u;
                  *(_OWORD *)(v30 + 200) = 0u;
                  *(_OWORD *)(v30 + 184) = 0u;
                  *(_OWORD *)(v30 + 168) = 0u;
                  *(_OWORD *)(v30 + 152) = 0u;
                  *(_OWORD *)(v30 + 136) = 0u;
                  *(_OWORD *)(v30 + 120) = 0u;
                  RERetain();
                  *(_QWORD *)(v30 + 16) = v28;
                  RESceneSetSwiftObject();
                }
                swift_release();
                RFAnchorManagementUpdateAnchoringInScene();
                a1 = v46;
              }

            }
            swift_release();
          }
        }
      }
      static Entity.updateInteractions(root:)(v14);
      v31 = REEntityGetSceneNullable();
      if (v31)
      {
        v32 = v31;
        v33 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v33)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          v34 = swift_allocObject();
          *(_OWORD *)(v34 + 24) = 0u;
          *(_OWORD *)(v34 + 40) = 0u;
          *(_QWORD *)(v34 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(_QWORD *)(v34 + 104) = 0;
          *(_OWORD *)(v34 + 88) = 0u;
          *(_OWORD *)(v34 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v34 + 216) = 0u;
          *(_OWORD *)(v34 + 200) = 0u;
          *(_OWORD *)(v34 + 184) = 0u;
          *(_OWORD *)(v34 + 168) = 0u;
          *(_OWORD *)(v34 + 152) = 0u;
          *(_OWORD *)(v34 + 136) = 0u;
          *(_OWORD *)(v34 + 120) = 0u;
          RERetain();
          *(_QWORD *)(v34 + 16) = v32;
          RESceneSetSwiftObject();
        }
        swift_beginAccess();
        if (static __RKScenePhysics.registration)
        {
          RESceneGetComponentsOfCustomType();
          if (!v35
            || (Object = (__int128 *)RECustomComponentGetObject()) == 0
            || (v49 = *Object, !RESceneGetECSManagerNullable()))
          {
            swift_release();
            a1 = v46;
            if ((v46 & 1) != 0)
              goto LABEL_47;
            goto LABEL_6;
          }
          ServiceLocator = REECSManagerGetServiceLocator();
          a1 = v46;
          if (MEMORY[0x22076FDD0](ServiceLocator))
          {
            REPhysicsSimulationServiceGetDefaultGravity();
            v40 = v38;
            v39 = 0;
            HIDWORD(v40) = v44;
            v41 = 1;
            while (1)
            {
              while (!v41)
              {
                if (v39 == 2)
                  goto LABEL_49;
                v41 = 0;
                ++v39;
              }
              v52 = v40;
              v42 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v39 & 3)));
              v53 = v49;
              v43 = *(float *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v39 & 3)));
              v41 = v42 == v43;
              if (v39 == 2)
                break;
              ++v39;
            }
            if (v42 == v43)
              goto LABEL_50;
LABEL_49:
            REPhysicsSimulationServiceSetDefaultGravity();
LABEL_50:
            swift_release();
            if ((v46 & 1) == 0)
              goto LABEL_6;
LABEL_47:
            *(_QWORD *)&v54[0] = v14;
            swift_retain();
            specialized Entity.ChildCollection.forEach(recursive:using:)(1, v54, a3, a4 & 1);
            swift_release();
            goto LABEL_6;
          }
        }
        swift_release();
      }
      if ((a1 & 1) != 0)
        goto LABEL_47;
LABEL_6:
      swift_release();
      if (++v13 == v10)
      {
        swift_release();
        return swift_release();
      }
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection;
  if (!lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ChildCollection, &type metadata for Entity.ChildCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection;
  if (!lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ChildCollection, &type metadata for Entity.ChildCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Entity.ChildCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<Entity.ChildCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<Entity.ChildCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Entity.ChildCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<Entity.ChildCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<Entity.ChildCollection>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Entity.ChildCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>, &demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>, (uint64_t)&protocol conformance descriptor for Entity.ChildCollection.IndexingIterator<A>);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Entity.ChildCollection.IndexingIterator<A>()
{
  JUMPOUT(0x220772E3CLL);
}

unint64_t instantiation function for generic protocol witness table for Entity.ChildCollection(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21BC4C0C8@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = Entity.ChildCollection.subscript.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_21BC4C108()
{
  return 0;
}

ValueMetadata *type metadata accessor for Entity.ChildCollection()
{
  return &type metadata for Entity.ChildCollection;
}

uint64_t type metadata completion function for Entity.ChildCollection.IndexingIterator()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Entity.ChildCollection.IndexingIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t destroy for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ChildCollection.IndexingIterator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void storeEnumTagSinglePayload for Entity.ChildCollection.IndexingIterator(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t dispatch thunk of EntityCollection.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of EntityCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of EntityCollection.insert(_:beforeIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of EntityCollection.insert<A>(contentsOf:beforeIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of EntityCollection.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of EntityCollection.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of EntityCollection.removeAll()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of EntityCollection.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of EntityCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

CGColorRef HasDirectionalLight.light.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  CGColorRef result;
  int v4;
  char v5;
  CGColor *v6;
  int v7;
  char v8;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v9);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v6);
  swift_release();
  result = v6;
  if (v6)
  {
    v4 = v7;
    v5 = v8 & 1;
  }
  else
  {
    result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v5 = 0;
    v4 = 1158028115;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = v5;
  return result;
}

uint64_t key path setter for HasDirectionalLight.light : <A>A(uint64_t a1)
{
  int v1;
  char v2;
  id v3;
  void *v5;
  int v6;
  char v7;

  v1 = *(_DWORD *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 12);
  v5 = *(void **)a1;
  v6 = v1;
  v7 = v2;
  v3 = v5;
  return HasDirectionalLight.light.setter(&v5);
}

uint64_t HasDirectionalLight.light.setter(void **a1)
{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v2 = *a1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);

  swift_release();
  return v3(v5, 0);
}

void (*HasDirectionalLight.light.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  HasDirectionalLight.light.getter((uint64_t)v7);
  return HasDirectionalLight.light.modify;
}

void HasDirectionalLight.light.modify(void ***a1, char a2)
{
  id *v2;
  void *v3;
  int v4;
  char v5;
  id v6;
  void *v7;
  int v8;
  char v9;

  v2 = *a1;
  v3 = **a1;
  v4 = *((_DWORD *)*a1 + 2);
  v5 = *((_BYTE *)*a1 + 12);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  if ((a2 & 1) != 0)
  {
    v6 = v3;
    HasDirectionalLight.light.setter(&v7);

  }
  else
  {
    HasDirectionalLight.light.setter(&v7);
  }
  free(v2);
}

uint64_t HasDirectionalLight.shadow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Component;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v16);
  Component = REEntityGetComponent();
  if (Component)
  {
    v15 = Component;
    static DirectionalLightComponent.Shadow.__fromCore(_:)((uint64_t)&v10);
    result = swift_release();
    v5 = v10;
    v6 = v11;
    v7 = v12;
    v8 = v14;
    v9 = (unint64_t)v13 << 32;
  }
  else
  {
    result = swift_release();
    v9 = 0;
    v5 = 0x40A000003F800000;
    v8 = 1;
    v7 = 1084227584;
    v6 = 3;
  }
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6 | (v7 << 32);
  *(_QWORD *)(a1 + 16) = v9 | HIDWORD(v7);
  *(_BYTE *)(a1 + 24) = v8;
  return result;
}

uint64_t HasDirectionalLight.shadow.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t (*v6)(_BYTE *, _QWORD);
  _BYTE v8[32];

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2, v3, v4, v5);
  swift_release();
  return v6(v8, 0);
}

void (*HasDirectionalLight.shadow.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD **a1)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[5] = a3;
  v7[6] = v3;
  v7[4] = a2;
  HasDirectionalLight.shadow.getter((uint64_t)v7);
  return HasDirectionalLight.shadow.modify;
}

void HasDirectionalLight.shadow.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v5[3];
  char v6;

  v1 = *a1;
  v2 = (*a1)[1];
  v3 = (*a1)[2];
  v4 = *((_BYTE *)*a1 + 24);
  v5[0] = **a1;
  v5[1] = v2;
  v5[2] = v3;
  v6 = v4;
  HasDirectionalLight.shadow.setter((uint64_t)v5);
  free(v1);
}

float sub_21BC4CDF4@<S0>(uint64_t a1@<X8>)
{
  float result;
  char v3;
  uint64_t v4;
  float v5;
  char v6;

  HasDirectionalLight.light.getter((uint64_t)&v4);
  result = v5;
  v3 = v6;
  *(_QWORD *)a1 = v4;
  *(float *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 12) = v3;
  return result;
}

uint64_t sub_21BC4CE40()
{
  return 16;
}

__n128 sub_21BC4CE4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_21BC4CE58@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  double result;
  __int128 v5;
  uint64_t v6;
  char v7;

  HasDirectionalLight.shadow.getter((uint64_t)&v5);
  v2 = v6;
  v3 = v7;
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_21BC4CEA0(__int128 *a1)
{
  uint64_t v1;
  char v2;
  __int128 v4;
  uint64_t v5;
  char v6;

  v1 = *((_QWORD *)a1 + 2);
  v2 = *((_BYTE *)a1 + 24);
  v4 = *a1;
  v5 = v1;
  v6 = v2;
  return HasDirectionalLight.shadow.setter((uint64_t)&v4);
}

uint64_t sub_21BC4CEE4()
{
  return 16;
}

__n128 sub_21BC4CEF0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t static RKARSystemCore.generateDecimatedMeshes.getter()
{
  swift_beginAccess();
  return static RKARSystemCore.generateDecimatedMeshes;
}

uint64_t static RKARSystemCore.generateDecimatedMeshes.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static RKARSystemCore.generateDecimatedMeshes = a1;
  return result;
}

uint64_t (*static RKARSystemCore.generateDecimatedMeshes.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

id RKARSystemCore.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id RKARSystemCore.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKARSystemCore();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for RKARSystemCore()
{
  return objc_opt_self();
}

id RKARSystemCore.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKARSystemCore();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v10;

  v8 = result;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v10 < 0)
    {
      __break(1u);
      goto LABEL_8;
    }
  }
  else
  {
    v10 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v10 >= a2)
  {
    a5[2] = a3;
    a5[3] = a4;
    *a5 = v8;
    a5[1] = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  if (REEntityGetComponentCount() < 1)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if (Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)())
        break;
      ++v8;
    }
    while (v8 < REEntityGetComponentCount());
  }
  result = REEntityGetComponentCount();
  if (result < v8)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v8 > a1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result >= a2)
  {
    a4[1] = a2;
    a4[2] = a3;
    *a4 = a1;
    return swift_retain();
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t IKComponent.resource.getter()
{
  return swift_retain();
}

uint64_t IKComponent.resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*IKComponent.resource.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKComponent.solvers.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 IKComponent.solvers.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*IKComponent.solvers.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKComponent.init(resource:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __n128 v5;

  IKComponent.SolverCollection.init(_:)(MEMORY[0x24BEE4AF8], v5.n128_u64);
  result = v5;
  *(_QWORD *)a2 = a1;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t IKComponent.SolverCollection.init(_:)@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v4 = v25;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    v22 = a2;
    if (!v5)
      goto LABEL_16;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v22 = a2;
    if (!v5)
      goto LABEL_16;
  }
  if (v5 < 1)
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v5; ++i)
    {
      MEMORY[0x220769770](i, a1);
      REIkParametersComponentGetSolverNodeName();
      v23 = String.init(cString:)();
      v24 = v7;
      lazy protocol witness table accessor for type String and conformance String();
      v8 = StringProtocol.hash.getter();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v25 = v4;
      v10 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v4 = v25;
      }
      v11 = v4 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v8;
      *(_QWORD *)(v11 + 40) = i;
      *(_QWORD *)(v4 + 16) = v10 + 1;
    }
  }
  else
  {
    for (j = 0; j != v5; ++j)
    {
      swift_retain();
      REIkParametersComponentGetSolverNodeName();
      v23 = String.init(cString:)();
      v24 = v13;
      lazy protocol witness table accessor for type String and conformance String();
      v14 = StringProtocol.hash.getter();
      swift_release();
      swift_bridgeObjectRelease();
      v25 = v4;
      v16 = *(_QWORD *)(v4 + 16);
      v15 = *(_QWORD *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v4 = v25;
      }
      v17 = v4 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v14;
      *(_QWORD *)(v17 + 40) = j;
      *(_QWORD *)(v4 + 16) = v16 + 1;
    }
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)(v4 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKComponent.Solver.ID, Int>);
    v18 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v18 = MEMORY[0x24BEE4B00];
  }
  v23 = v18;
  v19 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v19, 1, &v23);
  result = swift_release();
  v21 = v23;
  *v22 = a1;
  v22[1] = v21;
  return result;
}

uint64_t IKComponent.init(coreComponent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Asset;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;
  __int128 v11;
  __int128 v12;

  Asset = REIkParametersComponentGetAsset();
  if (Asset)
  {
    v5 = Asset;
    type metadata accessor for IKResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    RERetain();
    REAssetSetSwiftObject();
  }
  else
  {
    v6 = 0;
  }
  MEMORY[0x22076D6DC](a1);
  result = REIkParametersComponentGetSolverCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    v9 = MEMORY[0x24BEE4AF8];
    if (v8)
    {
      *(_QWORD *)&v12 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for IKComponent.Solver();
      for (i = 0; i != v8; ++i)
      {
        swift_allocObject();
        IKComponent.Solver.init(coreComp:solverIndex:)(a1, i);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      v9 = v12;
    }
    result = IKComponent.SolverCollection.init(_:)(v9, (unint64_t *)&v12);
    v11 = v12;
    *(_QWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v11;
  }
  return result;
}

void IKComponent.Solver.ID.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static IKComponent.Solver.ID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int IKComponent.Solver.ID.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t IKComponent.Solver.id.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  REIkParametersComponentGetSolverNodeName();
  String.init(cString:)();
  lazy protocol witness table accessor for type String and conformance String();
  v2 = StringProtocol.hash.getter();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t IKComponent.Solver.maxIterations.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 40) == 1)
    return REIkParametersComponentSolverGetMaxIterations();
  else
    return *(_QWORD *)(v0 + 32);
}

uint64_t IKComponent.Solver.maxIterations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

_QWORD *(*IKComponent.Solver.maxIterations.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;
  uint64_t MaxIterations;

  a1[1] = v1;
  if (*(_BYTE *)(v1 + 40) == 1)
    MaxIterations = REIkParametersComponentSolverGetMaxIterations();
  else
    MaxIterations = *(_QWORD *)(v1 + 32);
  *a1 = MaxIterations;
  return IKComponent.Solver.maxIterations.modify;
}

_QWORD *IKComponent.Solver.maxIterations.modify(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 32) = *result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

float IKComponent.Solver.globalFkWeight.getter()
{
  uint64_t v0;
  float result;

  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
    return *(float *)(v0 + 44);
  REIkParametersComponentSolverGetRetargetingGain();
  return result;
}

void IKComponent.Solver.globalFkWeight.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 44) = a1;
  *(_BYTE *)(v1 + 48) = 0;
}

uint64_t *(*IKComponent.Solver.globalFkWeight.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
    REIkParametersComponentSolverGetRetargetingGain();
  else
    v3 = *(_DWORD *)(v1 + 44);
  *v2 = v3;
  return IKComponent.Solver.globalFkWeight.modify;
}

uint64_t *IKComponent.Solver.globalFkWeight.modify(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_DWORD *)(v1 + 44) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

Swift::Void __swiftcall IKComponent.Solver.reset()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 49) = 1;
}

uint64_t key path getter for IKComponent.Solver.joints : IKComponent.Solver@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(_QWORD *)(v3 + 64);
  *a2 = v4;
  a2[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for IKComponent.Solver.joints : IKComponent.Solver(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 56) = v2;
  *(_QWORD *)(v4 + 64) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t IKComponent.Solver.joints.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t IKComponent.Solver.joints.setter(_OWORD *a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_OWORD *)(v1 + 56) = *a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for IKComponent.Solver.constraints : IKComponent.Solver@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(_QWORD *)(v3 + 80);
  *a2 = v4;
  a2[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for IKComponent.Solver.constraints : IKComponent.Solver(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 72) = v2;
  *(_QWORD *)(v4 + 80) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t IKComponent.Solver.constraints.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 80);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t IKComponent.Solver.constraints.setter(_OWORD *a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_OWORD *)(v1 + 72) = *a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*IKComponent.Solver.constraints.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t IKComponent.Solver.init(coreComp:solverIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  Swift::OpaquePointer v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::OpaquePointer v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  __int128 v23;

  *(_QWORD *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = 1;
  *(_DWORD *)(v2 + 44) = 0;
  *(_WORD *)(v2 + 48) = 1;
  *(_QWORD *)(v2 + 16) = a1;
  result = REIkParametersComponentSolverGetJointCount();
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v6 = result;
  v7._rawValue = (void *)MEMORY[0x24BEE4AF8];
  v20 = v2;
  if (v6)
  {
    v21 = (void *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for IKComponent.Joint();
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_BYTE *)(v10 + 64) = 1;
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      *(_BYTE *)(v10 + 96) = 1;
      *(_QWORD *)(v10 + 16) = a1;
      *(_QWORD *)(v10 + 24) = a2;
      *(_QWORD *)(v10 + 32) = v8;
      REIkParametersComponentJointGetName();
      *(_QWORD *)&v23 = String.init(cString:)();
      *((_QWORD *)&v23 + 1) = v11;
      lazy protocol witness table accessor for type String and conformance String();
      v12 = StringProtocol.hash.getter();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v10 + 104) = v12;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v8 = v9;
    }
    while (v6 != v9);
    v2 = v20;
    v7._rawValue = v21;
  }
  IKComponent.JointCollection.init(_:)(v7);
  *(_OWORD *)(v2 + 56) = v23;
  result = REIkParametersComponentSolverGetTaskCount();
  if (result < 0)
    goto LABEL_13;
  v13 = result;
  v14._rawValue = (void *)MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v22 = (void *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for IKComponent.Constraint();
    v15 = 0;
    do
    {
      v16 = v15 + 1;
      v17 = swift_allocObject();
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(_BYTE *)(v17 + 96) = 1;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 144) = 0u;
      *(_BYTE *)(v17 + 160) = 1;
      *(_QWORD *)(v17 + 176) = 0;
      *(_QWORD *)(v17 + 184) = 0;
      *(_BYTE *)(v17 + 192) = 1;
      *(_QWORD *)(v17 + 196) = 0;
      *(_BYTE *)(v17 + 204) = 1;
      *(_QWORD *)(v17 + 16) = a1;
      *(_QWORD *)(v17 + 24) = a2;
      *(_QWORD *)(v17 + 32) = v15;
      REIkParametersComponentTaskGetName();
      *(_QWORD *)&v23 = String.init(cString:)();
      *((_QWORD *)&v23 + 1) = v18;
      lazy protocol witness table accessor for type String and conformance String();
      v19 = StringProtocol.hash.getter();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 208) = v19;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v15 = v16;
    }
    while (v13 != v16);
    v2 = v20;
    v14._rawValue = v22;
  }
  IKComponent.ConstraintCollection.init(_:)(v14);
  *(_OWORD *)(v2 + 72) = v23;
  return v2;
}

RealityFoundation::IKComponent::JointCollection __swiftcall IKComponent.JointCollection.init(_:)(Swift::OpaquePointer a1)
{
  Swift::OpaquePointer *v1;
  Swift::OpaquePointer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  RealityFoundation::IKComponent::JointCollection result;
  Swift::OpaquePointer *v23;
  uint64_t v24;

  v3 = v1;
  v24 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v4 = v24;
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    v23 = v3;
    if (!v5)
      goto LABEL_16;
  }
  else
  {
    v5 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v23 = v3;
    if (!v5)
      goto LABEL_16;
  }
  if (v5 < 1)
  {
    __break(1u);
    v19 = (void *)swift_unexpectedError();
    __break(1u);
    goto LABEL_21;
  }
  if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v5; ++i)
    {
      v7 = *(_QWORD *)(MEMORY[0x220769770](i, a1._rawValue) + 104);
      swift_unknownObjectRelease();
      v24 = v4;
      v9 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v4 = v24;
      }
      v10 = v4 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = i;
      *(_QWORD *)(v4 + 16) = v9 + 1;
    }
  }
  else
  {
    v11 = 0;
    v12 = *(_QWORD *)(v24 + 16);
    v13 = 16 * v12;
    do
    {
      v14 = *(_QWORD *)(*((_QWORD *)a1._rawValue + v11 + 4) + 104);
      v24 = v4;
      v15 = *(_QWORD *)(v4 + 24);
      if (v12 + v11 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v12 + v11 + 1, 1);
        v4 = v24;
      }
      *(_QWORD *)(v4 + 16) = v12 + v11 + 1;
      v16 = v4 + v13;
      *(_QWORD *)(v16 + 32) = v14;
      *(_QWORD *)(v16 + 40) = v11;
      v13 += 16;
      ++v11;
    }
    while (v5 != v11);
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)(v4 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Joint.ID, Int>);
    v17 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v17 = MEMORY[0x24BEE4B00];
  }
  v24 = v17;
  v18 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v18, 1, &v24);
  v19 = (void *)swift_release();
  v21 = (void *)v24;
  v23->_rawValue = a1._rawValue;
  v23[1]._rawValue = v21;
LABEL_21:
  result.lookUpHelper._rawValue = v20;
  result.storage._rawValue = v19;
  return result;
}

RealityFoundation::IKComponent::ConstraintCollection __swiftcall IKComponent.ConstraintCollection.init(_:)(Swift::OpaquePointer a1)
{
  Swift::OpaquePointer *v1;
  Swift::OpaquePointer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  RealityFoundation::IKComponent::ConstraintCollection result;
  Swift::OpaquePointer *v23;
  uint64_t v24;

  v3 = v1;
  v24 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v4 = v24;
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    v23 = v3;
    if (!v5)
      goto LABEL_16;
  }
  else
  {
    v5 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v23 = v3;
    if (!v5)
      goto LABEL_16;
  }
  if (v5 < 1)
  {
    __break(1u);
    v19 = (void *)swift_unexpectedError();
    __break(1u);
    goto LABEL_21;
  }
  if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v5; ++i)
    {
      v7 = *(_QWORD *)(MEMORY[0x220769770](i, a1._rawValue) + 208);
      swift_unknownObjectRelease();
      v24 = v4;
      v9 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v4 = v24;
      }
      v10 = v4 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = i;
      *(_QWORD *)(v4 + 16) = v9 + 1;
    }
  }
  else
  {
    v11 = 0;
    v12 = *(_QWORD *)(v24 + 16);
    v13 = 16 * v12;
    do
    {
      v14 = *(_QWORD *)(*((_QWORD *)a1._rawValue + v11 + 4) + 208);
      v24 = v4;
      v15 = *(_QWORD *)(v4 + 24);
      if (v12 + v11 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v12 + v11 + 1, 1);
        v4 = v24;
      }
      *(_QWORD *)(v4 + 16) = v12 + v11 + 1;
      v16 = v4 + v13;
      *(_QWORD *)(v16 + 32) = v14;
      *(_QWORD *)(v16 + 40) = v11;
      v13 += 16;
      ++v11;
    }
    while (v5 != v11);
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)(v4 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Constraint.ID, Int>);
    v17 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v17 = MEMORY[0x24BEE4B00];
  }
  v24 = v17;
  v18 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v18, 1, &v24);
  v19 = (void *)swift_release();
  v21 = (void *)v24;
  v23->_rawValue = a1._rawValue;
  v23[1]._rawValue = v21;
LABEL_21:
  result.lookUpHelper._rawValue = v20;
  result.storage._rawValue = v19;
  return result;
}

uint64_t IKComponent.Solver.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IKComponent.Solver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance IKComponent.Solver@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  REIkParametersComponentGetSolverNodeName();
  String.init(cString:)();
  lazy protocol witness table accessor for type String and conformance String();
  v2 = StringProtocol.hash.getter();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void IKComponent.Joint.id.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 104);
}

uint64_t IKComponent.Joint.name.getter()
{
  return IKComponent.Joint.name.getter((void (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BE22688]);
}

float32x2_t IKComponent.Joint.fkWeightPerAxis.getter()
{
  float32x2_t *v0;
  float v1;
  float32x2_t v2;
  float v4;

  if ((v0[8].i8[0] & 1) != 0)
  {
    REIkParametersComponentJointGetRetargetingGain();
    v4 = v1;
    REIkParametersComponentJointGetRetargetingGainPerAxis();
    return vmul_n_f32(v2, v4);
  }
  else
  {
    return v0[6];
  }
}

void IKComponent.Joint.fkWeightPerAxis.setter(__n128 a1)
{
  __n128 *v1;

  v1[3] = a1;
  v1[4].n128_u8[0] = 0;
}

void (*IKComponent.Joint.fkWeightPerAxis.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  float v4;
  float32x4_t v5;
  __int128 v6;
  float v8;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
  {
    REIkParametersComponentJointGetRetargetingGain();
    v8 = v4;
    REIkParametersComponentJointGetRetargetingGainPerAxis();
    *(float32x2_t *)&v6 = vmul_n_f32(*(float32x2_t *)v5.f32, v8);
    *((_QWORD *)&v6 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v8, v5, 2));
  }
  else
  {
    v6 = *(_OWORD *)(v1 + 48);
  }
  *(_OWORD *)v3 = v6;
  return IKComponent.Joint.fkWeightPerAxis.modify;
}

void IKComponent.Joint.fkWeightPerAxis.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v3 = v1[1];
  v2 = v1[2];
  *(_QWORD *)(v2 + 48) = *v1;
  *(_QWORD *)(v2 + 56) = v3;
  *(_BYTE *)(v2 + 64) = 0;
  free(v1);
}

double IKComponent.Joint.rotationStiffness.getter()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 96) & 1) == 0)
    return *(double *)(v0 + 80);
  REIkParametersComponentJointGetRotationStiffness();
  return result;
}

void IKComponent.Joint.rotationStiffness.setter(__n128 a1)
{
  __n128 *v1;

  v1[5] = a1;
  v1[6].n128_u8[0] = 0;
}

void (*IKComponent.Joint.rotationStiffness.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  if ((*(_BYTE *)(v1 + 96) & 1) != 0)
    REIkParametersComponentJointGetRotationStiffness();
  else
    v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)v3 = v4;
  return IKComponent.Joint.rotationStiffness.modify;
}

void IKComponent.Joint.rotationStiffness.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v3 = v1[1];
  v2 = v1[2];
  *(_QWORD *)(v2 + 80) = *v1;
  *(_QWORD *)(v2 + 88) = v3;
  *(_BYTE *)(v2 + 96) = 0;
  free(v1);
}

uint64_t IKComponent.Joint.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t IKComponent.Joint.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for Identifiable.id.getter in conformance IKComponent.Joint(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 104);
}

uint64_t IKComponent.Constraint.DemandOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

RealityFoundation::IKComponent::Constraint::DemandOptions __swiftcall IKComponent.Constraint.DemandOptions.init(rawValue:)(RealityFoundation::IKComponent::Constraint::DemandOptions rawValue)
{
  RealityFoundation::IKComponent::Constraint::DemandOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void IKComponent.Constraint.id.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 208);
}

uint64_t IKComponent.Constraint.name.getter()
{
  return IKComponent.Joint.name.getter((void (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BE22700]);
}

uint64_t IKComponent.Joint.name.getter(void (*a1)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  a1(v1[2], v1[3], v1[4]);
  return String.init(cString:)();
}

uint64_t IKComponent.Constraint.jointID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  REIkParametersComponentTaskGetTargetName();
  String.init(cString:)();
  lazy protocol witness table accessor for type String and conformance String();
  v2 = StringProtocol.hash.getter();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t IKComponent.Constraint.demands.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t HasPositionEnabled;
  uint64_t result;
  uint64_t v4;

  HasPositionEnabled = REIkParametersComponentTaskHasPositionEnabled();
  result = REIkParametersComponentTaskHasRotationEnabled();
  if ((_DWORD)result)
  {
    result = REIkParametersComponentTaskHasLookAtEnabled();
    v4 = 2;
    if ((_DWORD)result)
      v4 = 6;
    HasPositionEnabled |= v4;
  }
  *a1 = HasPositionEnabled;
  return result;
}

double IKComponent.Constraint.target.getter()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 96) & 1) == 0)
    return *(double *)(v0 + 48);
  REIkParametersComponentTaskGetTargetRotation();
  REIkParametersComponentTaskGetTargetPosition();
  result = 0.00781250185;
  if (one-time initialization token for identity != -1)
  {
    swift_once();
    return 0.00781250185;
  }
  return result;
}

void IKComponent.Constraint.target.setter(__n128 a1, __n128 a2, __n128 a3)
{
  __n128 *v3;

  v3[3] = a1;
  v3[4] = a2;
  v3[5] = a3;
  v3[6].n128_u8[0] = 0;
}

void (*IKComponent.Constraint.target.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if ((*(_BYTE *)(v1 + 96) & 1) != 0)
  {
    REIkParametersComponentTaskGetTargetRotation();
    v10 = v4;
    REIkParametersComponentTaskGetTargetPosition();
    v6 = xmmword_21BE41210;
    if (one-time initialization token for identity != -1)
    {
      v9 = v5;
      swift_once();
      v5 = v9;
      v6 = xmmword_21BE41210;
    }
    v7 = v10;
  }
  else
  {
    v6 = *(_OWORD *)(v1 + 48);
    v7 = *(_OWORD *)(v1 + 64);
    v5 = *(_OWORD *)(v1 + 80);
  }
  *(_OWORD *)v3 = v6;
  *((_OWORD *)v3 + 1) = v7;
  *((_OWORD *)v3 + 2) = v5;
  return IKComponent.Constraint.target.modify;
}

void IKComponent.Constraint.target.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v1 = *a1;
  v3 = v1[5];
  v2 = v1[6];
  v4 = *((_OWORD *)v1 + 1);
  v5 = v1[4];
  *(_OWORD *)(v2 + 48) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 80) = v5;
  *(_QWORD *)(v2 + 88) = v3;
  *(_BYTE *)(v2 + 96) = 0;
  free(v1);
}

uint64_t key path getter for IKComponent.Constraint.offset : IKComponent.Constraint@<X0>(uint64_t result@<X0>, __int128 *a2@<X8>)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_OWORD **)result;
  if ((*(_BYTE *)(*(_QWORD *)result + 160) & 1) != 0)
  {
    if (one-time initialization token for identity != -1)
      result = swift_once();
    v4 = static Transform.identity;
    v5 = xmmword_2551B1050;
    v6 = xmmword_2551B1060;
  }
  else
  {
    v4 = v3[7];
    v5 = v3[8];
    v6 = v3[9];
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

double IKComponent.Constraint.offset.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 160) & 1) == 0)
    return *(double *)(v0 + 112);
  if (one-time initialization token for identity != -1)
    swift_once();
  return *(double *)&static Transform.identity;
}

void IKComponent.Constraint.offset.setter(__n128 a1, __n128 a2, __n128 a3)
{
  __n128 *v3;

  v3[7] = a1;
  v3[8] = a2;
  v3[9] = a3;
  v3[10].n128_u8[0] = 0;
}

void (*IKComponent.Constraint.offset.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if ((*(_BYTE *)(v1 + 160) & 1) != 0)
  {
    if (one-time initialization token for identity != -1)
      swift_once();
    v4 = static Transform.identity;
    v5 = xmmword_2551B1050;
    v6 = xmmword_2551B1060;
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 112);
    v5 = *(_OWORD *)(v1 + 128);
    v6 = *(_OWORD *)(v1 + 144);
  }
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = v6;
  return IKComponent.Constraint.offset.modify;
}

void IKComponent.Constraint.offset.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v1 = *a1;
  v3 = v1[5];
  v2 = v1[6];
  v4 = *((_OWORD *)v1 + 1);
  v5 = v1[4];
  *(_OWORD *)(v2 + 112) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 128) = v4;
  *(_QWORD *)(v2 + 144) = v5;
  *(_QWORD *)(v2 + 152) = v3;
  *(_BYTE *)(v2 + 160) = 0;
  free(v1);
}

double IKComponent.Constraint.lookAtTargetPosition.getter()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 192) & 1) == 0)
    return *(double *)(v0 + 176);
  REIkParametersComponentTaskGetLookAtTarget();
  return result;
}

void IKComponent.Constraint.lookAtTargetPosition.setter(__n128 a1)
{
  __n128 *v1;

  v1[11] = a1;
  v1[12].n128_u8[0] = 0;
}

void (*IKComponent.Constraint.lookAtTargetPosition.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  if ((*(_BYTE *)(v1 + 192) & 1) != 0)
    REIkParametersComponentTaskGetLookAtTarget();
  else
    v4 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)v3 = v4;
  return IKComponent.Constraint.lookAtTargetPosition.modify;
}

void IKComponent.Constraint.lookAtTargetPosition.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v3 = v1[1];
  v2 = v1[2];
  *(_QWORD *)(v2 + 176) = *v1;
  *(_QWORD *)(v2 + 184) = v3;
  *(_BYTE *)(v2 + 192) = 0;
  free(v1);
}

float IKComponent.Constraint.animationOverrideWeight.getter()
{
  uint64_t v0;
  float v1;
  float v2;

  if ((*(_BYTE *)(v0 + 204) & 1) == 0)
    return *(float *)(v0 + 196);
  REIkParametersComponentTaskGetPositionTargetBlendWeight();
  v2 = v1;
  REIkParametersComopnentTaskGetRotationTargetBlendWeight();
  return v2;
}

void IKComponent.Constraint.animationOverrideWeight.setter(float a1, float a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 196) = LODWORD(a1) | ((unint64_t)LODWORD(a2) << 32);
  *(_BYTE *)(v2 + 204) = 0;
}

_QWORD *(*IKComponent.Constraint.animationOverrideWeight.modify(uint64_t a1))(_QWORD *result)
{
  uint64_t v1;
  int v3;
  int v4;
  int v5;

  *(_QWORD *)(a1 + 8) = v1;
  if ((*(_BYTE *)(v1 + 204) & 1) != 0)
  {
    REIkParametersComponentTaskGetPositionTargetBlendWeight();
    v4 = v3;
    REIkParametersComopnentTaskGetRotationTargetBlendWeight();
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 196);
    v5 = *(_DWORD *)(v1 + 200);
  }
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  return IKComponent.Constraint.animationOverrideWeight.modify;
}

_QWORD *IKComponent.Constraint.animationOverrideWeight.modify(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 196) = *result;
  *(_BYTE *)(v1 + 204) = 0;
  return result;
}

uint64_t IKComponent.Constraint.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t IKComponent.Constraint.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for Identifiable.id.getter in conformance IKComponent.Constraint(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 208);
}

unint64_t IKComponent.SolverCollection.subscript.getter(_QWORD *a1)
{
  return IKComponent.SolverCollection.subscript.getter(a1, specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.SolverCollection.subscript.setter(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;

  if (result)
  {
    v3 = v2;
    v4 = result;
    v5 = *a2;
    swift_retain();
    REIkParametersComponentGetSolverNodeName();
    String.init(cString:)();
    lazy protocol witness table accessor for type String and conformance String();
    v6 = StringProtocol.hash.getter();
    swift_bridgeObjectRelease();
    if (v6 != v5)
      return swift_release_n();
    v7 = v3[1];
    if (!*(_QWORD *)(v7 + 16))
      return swift_release_n();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v9 & 1) == 0)
      return swift_release_n();
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
    v11 = *v3;
    swift_retain();
    result = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *v3 = v11;
    if (!(_DWORD)result || v11 < 0 || (v11 & 0x4000000000000000) != 0)
      specialized _ArrayBuffer._consumeAndCreateNew()(v11);
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x20) = v4;
      swift_release();
      specialized Array._endMutation()();
      return swift_release_n();
    }
    __break(1u);
  }
  return result;
}

uint64_t (*IKComponent.SolverCollection.subscript.modify(uint64_t *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (*result)(uint64_t *, char);
  uint64_t v11;

  v3 = v2;
  v5 = *a2;
  a1[1] = (uint64_t)v2;
  a1[2] = v5;
  v6 = v2[1];
  if (!*(_QWORD *)(v6 + 16) || (v7 = *v3, v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) == 0))
  {
    v11 = 0;
    goto LABEL_8;
  }
  result = *(uint64_t (**)(uint64_t *, char))(*(_QWORD *)(v6 + 56) + 8 * v8);
  if ((v7 & 0xC000000000000001) != 0)
  {
    v11 = MEMORY[0x220769770](result, v7);
    goto LABEL_8;
  }
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)result < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = swift_retain();
LABEL_8:
    *a1 = v11;
    return IKComponent.SolverCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.SolverCollection.subscript.modify(uint64_t *a1, char a2)
{
  return IKComponent.SolverCollection.subscript.modify(a1, a2, IKComponent.SolverCollection.subscript.setter);
}

Swift::Bool __swiftcall IKComponent.SolverCollection.contains(_:)(RealityFoundation::IKComponent::Solver::ID a1)
{
  return IKRig.JointCollection.contains(_:)((_QWORD *)a1.nameHash, (void (*)(_QWORD))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.SolverCollection.set(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  REIkParametersComponentGetSolverNodeName();
  String.init(cString:)();
  lazy protocol witness table accessor for type String and conformance String();
  v4 = StringProtocol.hash.getter();
  swift_bridgeObjectRelease();
  v5 = v1[1];
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v5 + 56);
  v9 = *(_QWORD *)(v8 + 8 * result);
  v10 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    v11 = MEMORY[0x220769770](*(_QWORD *)(v8 + 8 * result), *v2);
    v10 = *v2;
    goto LABEL_7;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = *(_QWORD *)(v10 + 8 * v9 + 32);
  swift_retain();
LABEL_7:
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v10;
  if (!(_DWORD)result || v10 < 0 || (v10 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_19;
  if (v9 < *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v9 + 0x20) = a1;
    swift_release();
    specialized Array._endMutation()();
    return v11;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t IKComponent.SolverCollection.startIndex.getter()
{
  return 0;
}

uint64_t IKComponent.SolverCollection.subscript.setter(uint64_t a1, unint64_t a2)
{
  return IKComponent.SolverCollection.subscript.setter(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t (*IKComponent.SolverCollection.subscript.modify(uint64_t ***a1, unint64_t a2))()
{
  uint64_t **v4;

  v4 = (uint64_t **)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t *)specialized Array.subscript.modify(v4, a2);
  return IKRig.JointCollection.subscript.modify;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IKComponent.SolverCollection(uint64_t *a1, _QWORD *a2))()
{
  uint64_t v3;

  v3 = IKComponent.JointCollection.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  return destroy for CustomMaterial.Roughness;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IKComponent.SolverCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IKComponent.SolverCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

unint64_t IKComponent.JointCollection.subscript.getter(_QWORD *a1)
{
  return IKComponent.SolverCollection.subscript.getter(a1, specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.JointCollection.subscript.setter(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;

  if (result)
  {
    v3 = result;
    if (*(_QWORD *)(result + 104) != *a2)
      return swift_release();
    v4 = v2;
    v5 = v2[1];
    if (!*(_QWORD *)(v5 + 16))
      return swift_release();
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(*a2);
    if ((v7 & 1) == 0)
      return swift_release();
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
    v9 = *v4;
    swift_retain_n();
    result = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *v4 = v9;
    if (!(_DWORD)result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      specialized _ArrayBuffer._consumeAndCreateNew()(v9);
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v3;
      swift_release();
      specialized Array._endMutation()();
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  return result;
}

uint64_t (*IKComponent.JointCollection.subscript.modify(uint64_t *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (*result)(uint64_t *, char);
  uint64_t v11;

  v3 = v2;
  v5 = *a2;
  a1[1] = (uint64_t)v2;
  a1[2] = v5;
  v6 = v2[1];
  if (!*(_QWORD *)(v6 + 16) || (v7 = *v3, v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) == 0))
  {
    v11 = 0;
    goto LABEL_8;
  }
  result = *(uint64_t (**)(uint64_t *, char))(*(_QWORD *)(v6 + 56) + 8 * v8);
  if ((v7 & 0xC000000000000001) != 0)
  {
    v11 = MEMORY[0x220769770](result, v7);
    goto LABEL_8;
  }
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)result < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = swift_retain();
LABEL_8:
    *a1 = v11;
    return IKComponent.JointCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.JointCollection.subscript.modify(uint64_t *a1, char a2)
{
  return IKComponent.SolverCollection.subscript.modify(a1, a2, IKComponent.JointCollection.subscript.setter);
}

uint64_t IKComponent.JointCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  return IKComponent.JointCollection.subscript.getter(a1, a2, specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.JointCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IKComponent.JointCollection.subscript.setter(a1, a2, a3, IKComponent.JointCollection.subscript.setter);
}

void (*IKComponent.JointCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  v7[2] = IKComponent.JointCollection.subscript.getter(a2, a3);
  return IKComponent.JointCollection.subscript.modify;
}

void IKComponent.JointCollection.subscript.modify(uint64_t a1, char a2)
{
  IKComponent.JointCollection.subscript.modify(a1, a2, (void (*)(uint64_t, uint64_t *))IKComponent.JointCollection.subscript.setter);
}

Swift::Bool __swiftcall IKComponent.JointCollection.contains(_:)(RealityFoundation::IKRig::Joint::ID a1)
{
  return IKRig.JointCollection.contains(_:)((_QWORD *)a1.nameHash, (void (*)(_QWORD))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.JointCollection.set(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v3 = v1[1];
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 104));
  if ((v6 & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(v3 + 56);
  v8 = *(_QWORD *)(v7 + 8 * result);
  v9 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    v10 = MEMORY[0x220769770](*(_QWORD *)(v7 + 8 * result), *v2);
    v9 = *v2;
    goto LABEL_7;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v8 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(v9 + 8 * v8 + 32);
  swift_retain();
LABEL_7:
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v9;
  if (!(_DWORD)result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_19;
  if (v8 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = a1;
    swift_release();
    specialized Array._endMutation()();
    return v10;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t IKComponent.JointCollection.startIndex.getter()
{
  return 0;
}

uint64_t IKComponent.JointCollection.subscript.setter(uint64_t a1, unint64_t a2)
{
  return IKComponent.SolverCollection.subscript.setter(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t (*IKComponent.JointCollection.subscript.modify(uint64_t ***a1, unint64_t a2))()
{
  uint64_t **v4;

  v4 = (uint64_t **)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t *)specialized Array.subscript.modify(v4, a2);
  return IKRig.JointCollection.subscript.modify;
}

Swift::Int __swiftcall IKComponent.JointCollection.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t IKComponent.JointCollection.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = 0;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IKComponent.JointCollection(uint64_t *a1, _QWORD *a2))()
{
  uint64_t v3;

  v3 = IKComponent.JointCollection.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection;
}

uint64_t protocol witness for Collection.subscript.getter in conformance IKComponent.JointCollection@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return specialized Collection<>.subscript.getter(*a1, a1[1], *(_QWORD *)v2, *(_QWORD *)(v2 + 8), a2);
}

unint64_t IKComponent.ConstraintCollection.subscript.getter(_QWORD *a1)
{
  return IKComponent.SolverCollection.subscript.getter(a1, specialized __RawDictionaryStorage.find<A>(_:));
}

unint64_t IKComponent.SolverCollection.subscript.getter(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;

  v3 = v2;
  v4 = v2[1];
  if (!*(_QWORD *)(v4 + 16))
    return 0;
  v5 = *v3;
  v6 = a2(*a1);
  if ((v7 & 1) == 0)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6);
  if ((v5 & 0xC000000000000001) != 0)
    return MEMORY[0x220769770](result, v5);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.ConstraintCollection.subscript.setter(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;

  if (result)
  {
    v3 = result;
    if (*(_QWORD *)(result + 208) != *a2)
      return swift_release();
    v4 = v2;
    v5 = v2[1];
    if (!*(_QWORD *)(v5 + 16))
      return swift_release();
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(*a2);
    if ((v7 & 1) == 0)
      return swift_release();
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
    v9 = *v4;
    swift_retain_n();
    result = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *v4 = v9;
    if (!(_DWORD)result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      specialized _ArrayBuffer._consumeAndCreateNew()(v9);
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v3;
      swift_release();
      specialized Array._endMutation()();
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  return result;
}

uint64_t (*IKComponent.ConstraintCollection.subscript.modify(uint64_t *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (*result)(uint64_t *, char);
  uint64_t v11;

  v3 = v2;
  v5 = *a2;
  a1[1] = (uint64_t)v2;
  a1[2] = v5;
  v6 = v2[1];
  if (!*(_QWORD *)(v6 + 16) || (v7 = *v3, v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) == 0))
  {
    v11 = 0;
    goto LABEL_8;
  }
  result = *(uint64_t (**)(uint64_t *, char))(*(_QWORD *)(v6 + 56) + 8 * v8);
  if ((v7 & 0xC000000000000001) != 0)
  {
    v11 = MEMORY[0x220769770](result, v7);
    goto LABEL_8;
  }
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)result < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = swift_retain();
LABEL_8:
    *a1 = v11;
    return IKComponent.ConstraintCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.ConstraintCollection.subscript.modify(uint64_t *a1, char a2)
{
  return IKComponent.SolverCollection.subscript.modify(a1, a2, IKComponent.ConstraintCollection.subscript.setter);
}

uint64_t IKComponent.SolverCollection.subscript.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a1;
  v7 = a1[2];
  if ((a2 & 1) == 0)
    return a3(v4, &v7);
  v5 = swift_retain();
  a3(v5, &v7);
  return swift_release();
}

uint64_t IKComponent.ConstraintCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  return IKComponent.JointCollection.subscript.getter(a1, a2, specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.JointCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *v3;
  v6 = v3[1];
  lazy protocol witness table accessor for type String and conformance String();
  v7 = StringProtocol.hash.getter();
  if (!*(_QWORD *)(v6 + 16))
    return 0;
  result = a3(v7);
  if ((v9 & 1) == 0)
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = MEMORY[0x220769770](v10, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v10 < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(_QWORD *)(v5 + 8 * v10 + 32);
    swift_retain();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t key path getter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = a2(v5, v6);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v7;
  return result;
}

uint64_t key path setter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *))
{
  uint64_t v6;
  _QWORD v8[2];

  v6 = *a1;
  v8[1] = *(_QWORD *)(a3 + 8);
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  v8[0] = StringProtocol.hash.getter();
  return a5(v6, v8);
}

uint64_t IKComponent.ConstraintCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IKComponent.JointCollection.subscript.setter(a1, a2, a3, IKComponent.ConstraintCollection.subscript.setter);
}

uint64_t IKComponent.JointCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD *))
{
  uint64_t v6;
  _QWORD v8[2];

  v8[1] = a3;
  lazy protocol witness table accessor for type String and conformance String();
  v6 = StringProtocol.hash.getter();
  swift_bridgeObjectRelease();
  v8[0] = v6;
  return a4(a1, v8);
}

void (*IKComponent.ConstraintCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  v7[2] = IKComponent.ConstraintCollection.subscript.getter(a2, a3);
  return IKComponent.ConstraintCollection.subscript.modify;
}

void IKComponent.ConstraintCollection.subscript.modify(uint64_t a1, char a2)
{
  IKComponent.JointCollection.subscript.modify(a1, a2, (void (*)(uint64_t, uint64_t *))IKComponent.ConstraintCollection.subscript.setter);
}

void IKComponent.JointCollection.subscript.modify(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t *))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  *v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4[1] = v6;
  if ((a2 & 1) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    swift_retain();
    v7 = StringProtocol.hash.getter();
    a3(v5, &v7);
    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type String and conformance String();
    v7 = StringProtocol.hash.getter();
    a3(v5, &v7);
  }
  free(v4);
}

BOOL IKComponent.SolverCollection.isEmpty.getter()
{
  _QWORD *v0;
  uint64_t v1;

  if (*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 == 0;
}

Swift::Bool __swiftcall IKComponent.ConstraintCollection.contains(_:)(RealityFoundation::IKRig::Constraint::ID a1)
{
  return IKRig.JointCollection.contains(_:)((_QWORD *)a1.nameHash, (void (*)(_QWORD))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.ConstraintCollection.set(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v3 = v1[1];
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 208));
  if ((v6 & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(v3 + 56);
  v8 = *(_QWORD *)(v7 + 8 * result);
  v9 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    v10 = MEMORY[0x220769770](*(_QWORD *)(v7 + 8 * result), *v2);
    v9 = *v2;
    goto LABEL_7;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v8 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(v9 + 8 * v8 + 32);
  swift_retain();
LABEL_7:
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v9;
  if (!(_DWORD)result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_19;
  if (v8 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = a1;
    swift_release();
    specialized Array._endMutation()();
    return v10;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t IKComponent.ConstraintCollection.startIndex.getter()
{
  return 0;
}

uint64_t IKComponent.SolverCollection.count.getter()
{
  _QWORD *v0;
  uint64_t v2;

  if (!(*v0 >> 62))
    return *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t IKComponent.SolverCollection.subscript.getter(unint64_t a1)
{
  _QWORD *v1;

  if ((*v1 & 0xC000000000000001) != 0)
LABEL_8:
    JUMPOUT(0x220769770);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  return swift_retain();
}

uint64_t *key path getter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *result;
  v5 = *a2;
  if ((*result & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x220769770](v5, v4);
    swift_bridgeObjectRelease();
    result = (uint64_t *)swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v5 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v4 + 8 * v5 + 32);
    result = (uint64_t *)swift_retain();
LABEL_5:
    *a3 = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t key path setter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = *a3;
  v8 = *a1;
  v9 = *a2;
  swift_retain_n();
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a2 = v9;
  if (!(_DWORD)result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
  {
    result = a5(v9);
    v9 = result;
    *a2 = result;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v8;
    swift_release();
    specialized Array._endMutation()();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.ConstraintCollection.subscript.setter(uint64_t a1, unint64_t a2)
{
  return IKComponent.SolverCollection.subscript.setter(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t IKComponent.SolverCollection.subscript.setter(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t result;

  v7 = *v3;
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v7;
  if (!(_DWORD)result || v7 < 0 || (v7 & 0x4000000000000000) != 0)
  {
    result = a3(v7);
    v7 = result;
    *v3 = result;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = a1;
    swift_release();
    specialized Array._endMutation()();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t (*IKComponent.ConstraintCollection.subscript.modify(uint64_t ***a1, unint64_t a2))()
{
  uint64_t **v4;

  v4 = (uint64_t **)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t *)specialized Array.subscript.modify(v4, a2);
  return IKRig.JointCollection.subscript.modify;
}

void IKComponent.SolverCollection.Iterator.next()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *v0;
  v1 = v0[1];
  if (!((unint64_t)*v0 >> 62))
  {
    if (v1 == *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      return;
LABEL_5:
    if ((v2 & 0xC000000000000001) != 0)
    {
      MEMORY[0x220769770](v1, v2);
      v4 = v1 + 1;
      if (!__OFADD__(v1, 1))
        goto LABEL_9;
    }
    else
    {
      if ((v1 & 0x8000000000000000) != 0)
      {
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (v1 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_14:
        __break(1u);
        return;
      }
      swift_retain();
      v4 = v1 + 1;
      if (!__OFADD__(v1, 1))
      {
LABEL_9:
        v0[1] = v4;
        return;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v1 != v3)
    goto LABEL_5;
}

void protocol witness for IteratorProtocol.next() in conformance IKComponent.SolverCollection.Iterator(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *v1;
  v3 = v1[1];
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3 == v6)
      goto LABEL_3;
  }
  else if (v3 == *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v5 = 0;
LABEL_10:
    *a1 = v5;
    return;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x220769770](v3, v4);
    v7 = v3 + 1;
    if (!__OFADD__(v3, 1))
      goto LABEL_9;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v3 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = swift_retain();
    v7 = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
LABEL_9:
      v1[1] = v7;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_15:
  __break(1u);
}

void protocol witness for Collection.endIndex.getter in conformance IKComponent.SolverCollection(uint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *a1 = v4;
}

uint64_t protocol witness for Collection.indices.getter in conformance IKComponent.SolverCollection@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = 0;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  a1[3] = v5;
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance IKComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return IKComponent.init(coreComponent:)(*a1, a2);
}

uint64_t static IKComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return IKComponent.init(coreComponent:)(*a1, a2);
}

uint64_t IKComponent.__toCore(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t Asset;
  BOOL v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Asset = REIkParametersComponentGetAsset();
  if (v1)
  {
    if (Asset)
      v5 = *(_QWORD *)(v1 + 16) == Asset;
    else
      v5 = 0;
    if (!v5)
      return REIkParametersComponentSetAsset();
  }
  else if (Asset)
  {
    return REIkParametersComponentSetAsset();
  }
  if (v2 >> 62)
    goto LABEL_66;
  v21 = v2 & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v25 = v7;
  if (!v7)
    goto LABEL_68;
  while (2)
  {
    v8 = 0;
    v23 = v2;
    v24 = v2 & 0xC000000000000001;
    v20 = v2 + 32;
    v22 = v3;
    while (1)
    {
      if (v24)
      {
        v9 = MEMORY[0x220769770](v8, v2);
        v10 = __OFADD__(v8, 1);
        v11 = v8 + 1;
        if (v10)
          goto LABEL_61;
      }
      else
      {
        if (v8 >= *(_QWORD *)(v21 + 16))
          goto LABEL_65;
        v9 = *(_QWORD *)(v20 + 8 * v8);
        swift_retain();
        v10 = __OFADD__(v8, 1);
        v11 = v8 + 1;
        if (v10)
          goto LABEL_61;
      }
      if ((*(_BYTE *)(v9 + 40) & 1) == 0)
        REIkParametersComponentSolverSetMaxIterations();
      if ((*(_BYTE *)(v9 + 48) & 1) == 0)
        REIkParametersComponentSolverSetRetargetingGain();
      if (*(_BYTE *)(v9 + 49) == 1)
        REIkParametersComponentResetSolver();
      v26 = v11;
      swift_beginAccess();
      v12 = *(_QWORD *)(v9 + 56);
      if (v12 >> 62)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v2 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v2)
          goto LABEL_42;
        swift_bridgeObjectRetain();
        v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v13 < 1)
          goto LABEL_63;
      }
      else
      {
        v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if (!v13)
          goto LABEL_42;
      }
      if ((v12 & 0xC000000000000001) == 0
        && (unint64_t)(v13 - 1) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_62;
      }
      for (i = 0; i != v13; ++i)
      {
        if ((v12 & 0xC000000000000001) != 0)
        {
          v2 = MEMORY[0x220769770](i, v12);
        }
        else
        {
          v2 = *(_QWORD *)(v12 + 8 * i + 32);
          swift_retain();
        }
        v3 = *(_QWORD *)(v2 + 32);
        if ((*(_BYTE *)(v2 + 64) & 1) == 0)
          REIkParametersComponentJointSetRetargetingGainPerAxis();
        if ((*(_BYTE *)(v2 + 96) & 1) == 0)
          REIkParametersComponentJointSetRotationStiffness();
        swift_release();
      }
LABEL_42:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_beginAccess();
      v15 = *(_QWORD *)(v9 + 72);
      if (v15 >> 62)
        break;
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      if (v16)
        goto LABEL_44;
LABEL_13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release();
      v8 = v26;
      v3 = v22;
      v2 = v23;
      if (v26 == v25)
        goto LABEL_68;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2)
      goto LABEL_13;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16 >= 1)
    {
LABEL_44:
      if ((v15 & 0xC000000000000001) == 0
        && (unint64_t)(v16 - 1) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_64;
      }
      v17 = 0;
      while (1)
      {
        if ((v15 & 0xC000000000000001) != 0)
        {
          v18 = (_BYTE *)MEMORY[0x220769770](v17, v15);
        }
        else
        {
          v18 = *(_BYTE **)(v15 + 8 * v17 + 32);
          swift_retain();
        }
        if ((v18[96] & 1) != 0)
        {
          if ((v18[192] & 1) != 0)
            goto LABEL_53;
        }
        else
        {
          REIkParametersComponentTaskSetTargetPosition();
          REIkParametersComponentTaskSetTargetRotation();
          if ((v18[192] & 1) != 0)
          {
LABEL_53:
            if ((v18[204] & 1) == 0)
              goto LABEL_57;
            goto LABEL_47;
          }
        }
        REIkParametersComponentTaskSetLookAtTarget();
        if ((v18[204] & 1) == 0)
        {
LABEL_57:
          REIkParametersComponentTaskSetPositionTargetBlendWeight();
          REIkParametersComponentTaskSetRotationTargetBlendWeight();
        }
LABEL_47:
        swift_release();
        if (v16 == ++v17)
          goto LABEL_13;
      }
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    v21 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19)
    {
      swift_bridgeObjectRetain();
      v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
LABEL_68:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

void protocol witness for static Component.__coreComponentType.getter in conformance IKComponent(_DWORD *a1@<X8>)
{
  *a1 = 5008;
}

void static IKComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5008;
}

unint64_t lazy protocol witness table accessor for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID;
  if (!lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.Solver.ID, &type metadata for IKComponent.Solver.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID;
  if (!lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.Solver.ID, &type metadata for IKComponent.Solver.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions;
  if (!lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.Constraint.DemandOptions, &type metadata for IKComponent.Constraint.DemandOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions;
  if (!lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.Constraint.DemandOptions, &type metadata for IKComponent.Constraint.DemandOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions;
  if (!lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.Constraint.DemandOptions, &type metadata for IKComponent.Constraint.DemandOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions;
  if (!lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.Constraint.DemandOptions, &type metadata for IKComponent.Constraint.DemandOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKComponent.SolverCollection and conformance IKComponent.SolverCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.SolverCollection and conformance IKComponent.SolverCollection;
  if (!lazy protocol witness table cache variable for type IKComponent.SolverCollection and conformance IKComponent.SolverCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.SolverCollection, &type metadata for IKComponent.SolverCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.SolverCollection and conformance IKComponent.SolverCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IKComponent.SolverCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<IKComponent.SolverCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IKComponent.SolverCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IKComponent.SolverCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<IKComponent.SolverCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IKComponent.SolverCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type IKComponent.SolverCollection.Iterator and conformance IKComponent.SolverCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.SolverCollection.Iterator and conformance IKComponent.SolverCollection.Iterator;
  if (!lazy protocol witness table cache variable for type IKComponent.SolverCollection.Iterator and conformance IKComponent.SolverCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.SolverCollection.Iterator, &type metadata for IKComponent.SolverCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.SolverCollection.Iterator and conformance IKComponent.SolverCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKComponent.JointCollection and conformance IKComponent.JointCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.JointCollection and conformance IKComponent.JointCollection;
  if (!lazy protocol witness table cache variable for type IKComponent.JointCollection and conformance IKComponent.JointCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.JointCollection, &type metadata for IKComponent.JointCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.JointCollection and conformance IKComponent.JointCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IKComponent.JointCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<IKComponent.JointCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IKComponent.JointCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IKComponent.JointCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<IKComponent.JointCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IKComponent.JointCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type IKComponent.JointCollection.Iterator and conformance IKComponent.JointCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.JointCollection.Iterator and conformance IKComponent.JointCollection.Iterator;
  if (!lazy protocol witness table cache variable for type IKComponent.JointCollection.Iterator and conformance IKComponent.JointCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.JointCollection.Iterator, &type metadata for IKComponent.JointCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.JointCollection.Iterator and conformance IKComponent.JointCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKComponent.ConstraintCollection and conformance IKComponent.ConstraintCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.ConstraintCollection and conformance IKComponent.ConstraintCollection;
  if (!lazy protocol witness table cache variable for type IKComponent.ConstraintCollection and conformance IKComponent.ConstraintCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.ConstraintCollection, &type metadata for IKComponent.ConstraintCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.ConstraintCollection and conformance IKComponent.ConstraintCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IKComponent.ConstraintCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<IKComponent.ConstraintCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IKComponent.ConstraintCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IKComponent.ConstraintCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<IKComponent.ConstraintCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IKComponent.ConstraintCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type IKComponent.ConstraintCollection.Iterator and conformance IKComponent.ConstraintCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKComponent.ConstraintCollection.Iterator and conformance IKComponent.ConstraintCollection.Iterator;
  if (!lazy protocol witness table cache variable for type IKComponent.ConstraintCollection.Iterator and conformance IKComponent.ConstraintCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKComponent.ConstraintCollection.Iterator, &type metadata for IKComponent.ConstraintCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.ConstraintCollection.Iterator and conformance IKComponent.ConstraintCollection.Iterator);
  }
  return result;
}

uint64_t sub_21BC50D40@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  if (*(_BYTE *)(*(_QWORD *)result + 40) == 1)
  {
    result = REIkParametersComponentSolverGetMaxIterations();
    v3 = result;
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)result + 32);
  }
  *a2 = v3;
  return result;
}

_QWORD *sub_21BC50D84(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(v2 + 32) = *result;
  *(_BYTE *)(v2 + 40) = 0;
  return result;
}

uint64_t sub_21BC50D98@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  int v3;

  if ((*(_BYTE *)(*(_QWORD *)result + 48) & 1) != 0)
    result = REIkParametersComponentSolverGetRetargetingGain();
  else
    v3 = *(_DWORD *)(*(_QWORD *)result + 44);
  *a2 = v3;
  return result;
}

_DWORD *sub_21BC50DD4(_DWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(v2 + 44) = *result;
  *(_BYTE *)(v2 + 48) = 0;
  return result;
}

void sub_21BC50DF8(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(float32x2_t *)&v2 = IKComponent.Joint.fkWeightPerAxis.getter();
  *a1 = v2;
}

_QWORD *sub_21BC50E20(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = *a2;
  *(_QWORD *)(v3 + 48) = *result;
  *(_QWORD *)(v3 + 56) = v2;
  *(_BYTE *)(v3 + 64) = 0;
  return result;
}

uint64_t sub_21BC50E34@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  if ((*(_BYTE *)(*(_QWORD *)result + 96) & 1) != 0)
    result = REIkParametersComponentJointGetRotationStiffness();
  else
    v3 = *(_OWORD *)(*(_QWORD *)result + 80);
  *a2 = v3;
  return result;
}

_QWORD *sub_21BC50E7C(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = *a2;
  *(_QWORD *)(v3 + 80) = *result;
  *(_QWORD *)(v3 + 88) = v2;
  *(_BYTE *)(v3 + 96) = 0;
  return result;
}

void sub_21BC50E90(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(double *)&v2 = IKComponent.Constraint.target.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
}

__n128 sub_21BC50EBC(uint64_t a1, uint64_t *a2)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *a2;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 80) = v5;
  *(_QWORD *)(v6 + 88) = v4;
  *(_BYTE *)(v6 + 96) = 0;
  return result;
}

__n128 sub_21BC50EDC(uint64_t a1, uint64_t *a2)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *a2;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 128) = v3;
  *(_QWORD *)(v6 + 144) = v5;
  *(_QWORD *)(v6 + 152) = v4;
  *(_BYTE *)(v6 + 160) = 0;
  return result;
}

uint64_t sub_21BC50EF8@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  if ((*(_BYTE *)(*(_QWORD *)result + 192) & 1) != 0)
    result = REIkParametersComponentTaskGetLookAtTarget();
  else
    v3 = *(_OWORD *)(*(_QWORD *)result + 176);
  *a2 = v3;
  return result;
}

_QWORD *sub_21BC50F40(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = *a2;
  *(_QWORD *)(v3 + 176) = *result;
  *(_QWORD *)(v3 + 184) = v2;
  *(_BYTE *)(v3 + 192) = 0;
  return result;
}

void sub_21BC50F54(uint64_t a1@<X8>)
{
  int v2;

  *(float *)a1 = IKComponent.Constraint.animationOverrideWeight.getter();
  *(_DWORD *)(a1 + 4) = v2;
}

_QWORD *sub_21BC50F7C(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(v2 + 196) = *result;
  *(_BYTE *)(v2 + 204) = 0;
  return result;
}

uint64_t sub_21BC50F90@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_19Tm(a1, a2, (uint64_t (*)(uint64_t *))IKComponent.SolverCollection.subscript.getter, a3);
}

uint64_t sub_21BC50F9C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, IKComponent.SolverCollection.subscript.setter);
}

uint64_t sub_21BC50FA8()
{
  return 0;
}

uint64_t *sub_21BC50FB8@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3);
}

uint64_t sub_21BC50FCC(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  return key path setter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3, a4, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t sub_21BC50FE8()
{
  return 0;
}

uint64_t sub_21BC50FF8@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_19Tm(a1, a2, (uint64_t (*)(uint64_t *))IKComponent.JointCollection.subscript.getter, a3);
}

uint64_t keypath_get_19Tm@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t *)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;

  v5 = *a2;
  v8 = *a1;
  v7 = v5;
  result = a3(&v7);
  *a4 = result;
  return result;
}

uint64_t sub_21BC51048(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, IKComponent.JointCollection.subscript.setter);
}

uint64_t sub_21BC51054()
{
  return 0;
}

uint64_t sub_21BC51064@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return key path getter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(a1, IKComponent.JointCollection.subscript.getter, a2);
}

uint64_t sub_21BC51080(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(a1, a2, a3, a4, IKComponent.JointCollection.subscript.setter);
}

uint64_t sub_21BC5109C()
{
  return 0;
}

uint64_t *sub_21BC510AC@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3);
}

uint64_t sub_21BC510C0(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  return key path setter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3, a4, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t sub_21BC510DC()
{
  return 0;
}

uint64_t sub_21BC510EC@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_19Tm(a1, a2, (uint64_t (*)(uint64_t *))IKComponent.ConstraintCollection.subscript.getter, a3);
}

uint64_t sub_21BC510F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, IKComponent.ConstraintCollection.subscript.setter);
}

uint64_t keypath_set_20Tm(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *))
{
  uint64_t v6;
  uint64_t v8;

  v8 = *a3;
  v6 = swift_retain();
  return a5(v6, &v8);
}

uint64_t sub_21BC51144()
{
  return 0;
}

uint64_t sub_21BC51154@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return key path getter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(a1, IKComponent.ConstraintCollection.subscript.getter, a2);
}

uint64_t sub_21BC51170(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(a1, a2, a3, a4, IKComponent.ConstraintCollection.subscript.setter);
}

uint64_t sub_21BC5118C()
{
  return 0;
}

uint64_t *sub_21BC5119C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3);
}

uint64_t sub_21BC511B0(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  return key path setter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3, a4, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t sub_21BC511CC()
{
  return 0;
}

uint64_t destroy for IKComponent()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for IKComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IKComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IKComponent(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IKComponent()
{
  return &type metadata for IKComponent;
}

uint64_t type metadata accessor for IKComponent.Solver()
{
  return objc_opt_self();
}

uint64_t method lookup function for IKComponent.Solver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IKComponent.Solver.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of IKComponent.Solver.maxIterations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of IKComponent.Solver.maxIterations.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of IKComponent.Solver.globalFkWeight.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of IKComponent.Solver.globalFkWeight.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of IKComponent.Solver.globalFkWeight.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of IKComponent.Solver.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of IKComponent.Solver.joints.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of IKComponent.Solver.joints.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of IKComponent.Solver.constraints.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of IKComponent.Solver.constraints.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

ValueMetadata *type metadata accessor for IKComponent.Solver.ID()
{
  return &type metadata for IKComponent.Solver.ID;
}

uint64_t type metadata accessor for IKComponent.Joint()
{
  return objc_opt_self();
}

uint64_t method lookup function for IKComponent.Joint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IKComponent.Joint.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of IKComponent.Joint.fkWeightPerAxis.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of IKComponent.Joint.fkWeightPerAxis.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of IKComponent.Joint.fkWeightPerAxis.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of IKComponent.Joint.rotationStiffness.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of IKComponent.Joint.rotationStiffness.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of IKComponent.Joint.rotationStiffness.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t type metadata accessor for IKComponent.Constraint()
{
  return objc_opt_self();
}

uint64_t method lookup function for IKComponent.Constraint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IKComponent.Constraint.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of IKComponent.Constraint.jointID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of IKComponent.Constraint.demands.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of IKComponent.Constraint.target.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of IKComponent.Constraint.target.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of IKComponent.Constraint.target.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of IKComponent.Constraint.offset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of IKComponent.Constraint.offset.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of IKComponent.Constraint.offset.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of IKComponent.Constraint.lookAtTargetPosition.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of IKComponent.Constraint.lookAtTargetPosition.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of IKComponent.Constraint.lookAtTargetPosition.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of IKComponent.Constraint.animationOverrideWeight.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of IKComponent.Constraint.animationOverrideWeight.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of IKComponent.Constraint.animationOverrideWeight.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

ValueMetadata *type metadata accessor for IKComponent.Constraint.DemandOptions()
{
  return &type metadata for IKComponent.Constraint.DemandOptions;
}

ValueMetadata *type metadata accessor for IKComponent.SolverCollection()
{
  return &type metadata for IKComponent.SolverCollection;
}

ValueMetadata *type metadata accessor for IKComponent.SolverCollection.Iterator()
{
  return &type metadata for IKComponent.SolverCollection.Iterator;
}

ValueMetadata *type metadata accessor for IKComponent.JointCollection()
{
  return &type metadata for IKComponent.JointCollection;
}

ValueMetadata *type metadata accessor for IKComponent.JointCollection.Iterator()
{
  return &type metadata for IKComponent.JointCollection.Iterator;
}

ValueMetadata *type metadata accessor for IKComponent.ConstraintCollection()
{
  return &type metadata for IKComponent.ConstraintCollection;
}

ValueMetadata *type metadata accessor for IKComponent.ConstraintCollection.Iterator()
{
  return &type metadata for IKComponent.ConstraintCollection.Iterator;
}

uint64_t __RKEntityLookAtTrigger.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityLookAtTrigger.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKEntityLookAtTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEntityLookAtTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityLookAtTrigger()
{
  return objc_opt_self();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_SSs5NeverOTg504_s17d13Foundation26_f1_g9Resource_i18C4withAcA01_c1_d11h15_F0V_tKcfcSSAF5J54Vcfu_33_194c66f652b1d54667754fca0031e5efAHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v4 += 10;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_s6UInt32Vs5NeverOTg504_s17d13Foundation28_f1_gh1_i2V5j3Vs6k11VIgnd_AeGs5l62OIegnrzr_TR04_s17a13Foundation26_c1_d9Resource_f18C4withAcA01_W42_d11e12_F0V_tKcfcs6h4VAF5G5VcfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v8;
    v4 = (_BYTE *)(a1 + 56);
    do
    {
      if ((*v4 & 1) != 0)
      {
        LODWORD(v5) = -1;
      }
      else
      {
        v5 = *((_QWORD *)v4 - 1);
        if ((v5 & 0x8000000000000000) != 0 || HIDWORD(v5))
        {
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_DWORD *)(result + 4 * v7 + 32) = v5;
      v4 += 80;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_So5RESRTas5NeverOTg504_s17d13Foundation26_f1_g9Resource_i18C4withAcA01_c1_d11h22_F0V_tKcfcSo5RESRTaAF5J54Vcfu0_33_5265ce75bb004bfc7d633de337cec3d7AjHTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v14;
    v4 = (__int128 *)(a1 + 96);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v15 = result;
      v9 = *(_QWORD *)(result + 16);
      v8 = *(_QWORD *)(result + 24);
      if (v9 >= v8 >> 1)
      {
        v12 = *(v4 - 1);
        v13 = *(v4 - 2);
        v11 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v7 = v11;
        v6 = v12;
        v5 = v13;
        result = v15;
      }
      *(_QWORD *)(result + 16) = v9 + 1;
      v10 = (_OWORD *)(result + 48 * v9);
      v10[2] = v5;
      v10[3] = v6;
      v10[4] = v7;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *static _Proto_SkeletonResource_v1.__fromCore(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t Name;
  unint64_t v4;

  if ((id)REAssetGetSwiftObject())
  {
    type metadata accessor for _Proto_SkeletonResource_v1();
    v2 = (_QWORD *)swift_dynamicCastClass();
    if (v2)
      return v2;
    swift_unknownObjectRelease();
  }
  type metadata accessor for _Proto_SkeletonResource_v1();
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = a1;
  Name = RESkeletonAssetGetName();
  if (Name)
    Name = String.init(cString:)();
  else
    v4 = 0xE000000000000000;
  v2[3] = Name;
  v2[4] = v4;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t type metadata accessor for _Proto_SkeletonResource_v1()
{
  return objc_opt_self();
}

uint64_t _Proto_SkeletonResource_v1.deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _Proto_SkeletonResource_v1.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

int64_t _Proto_SkeletonResource_v1.definition.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_retain();
  return _Proto_SkeletonDefinition_v1.init(from:)(v2, a1);
}

uint64_t _Proto_SkeletonResource_v1.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Proto_SkeletonResource_v1.__allocating_init(with:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t SkeletonAsset;
  uint64_t Name;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v1 = (_QWORD *)a1[1];
  v3 = a1[2];
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v20);
  v5 = v21;
  v6 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  v7 = swift_bridgeObjectRetain();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_SSs5NeverOTg504_s17d13Foundation26_f1_g9Resource_i18C4withAcA01_c1_d11h15_F0V_tKcfcSSAF5J54Vcfu_33_194c66f652b1d54667754fca0031e5efAHSSTf3nnnpk_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  v9 = swift_bridgeObjectRetain();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_s6UInt32Vs5NeverOTg504_s17d13Foundation28_f1_gh1_i2V5j3Vs6k11VIgnd_AeGs5l62OIegnrzr_TR04_s17a13Foundation26_c1_d9Resource_f18C4withAcA01_W42_d11e12_F0V_tKcfcs6h4VAF5G5VcfU_Tf3nnnpf_nTf1cn_n(v9);
  swift_bridgeObjectRelease();
  v11 = specialized Array.init(repeating:count:)(*(_QWORD *)(v3 + 16), *(__n128 *)zmmword_21BE41220, *(__n128 *)&zmmword_21BE41220[16], *(__n128 *)&zmmword_21BE41220[32], *(__n128 *)&zmmword_21BE41220[48]);
  v12 = swift_bridgeObjectRetain();
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_So5RESRTas5NeverOTg504_s17d13Foundation26_f1_g9Resource_i18C4withAcA01_c1_d11h22_F0V_tKcfcSo5RESRTaAF5J54Vcfu0_33_5265ce75bb004bfc7d633de337cec3d7AjHTf3nnnpk_nTf1cn_n(v12);
  swift_bridgeObjectRelease();
  specialized static MeshResource.Skeleton.makeSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:)(v2, (uint64_t)v1, v8, v10, v11, v13);
  v20[0] = 0;
  result = RESkeletonDefinitionValidate();
  if ((_DWORD)result)
  {
    SkeletonAsset = RESkeletonDefinitionCreateSkeletonAsset();
    RERelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (SkeletonAsset)
    {
      type metadata accessor for _Proto_SkeletonResource_v1();
      v1 = (_QWORD *)swift_allocObject();
      v1[2] = SkeletonAsset;
      Name = RESkeletonAssetGetName();
      if (Name)
        Name = String.init(cString:)();
      else
        v17 = 0xE000000000000000;
      v1[3] = Name;
      v1[4] = v17;
      RERetain();
      REAssetSetSwiftObject();
    }
    else
    {
      lazy protocol witness table accessor for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError();
      swift_allocError();
      swift_willThrow();
    }
    return (uint64_t)v1;
  }
  v18 = v20[0];
  if (v20[0])
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *v19 = v18;
    swift_willThrow();
    RERelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError;
  if (!lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for _Proto_SkeletonResource_v1.SkeletonResourceGenError, &type metadata for _Proto_SkeletonResource_v1.SkeletonResourceGenError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError;
  if (!lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for _Proto_SkeletonResource_v1.SkeletonResourceGenError, &type metadata for _Proto_SkeletonResource_v1.SkeletonResourceGenError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError);
  }
  return result;
}

uint64_t method lookup function for _Proto_SkeletonResource_v1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _Proto_SkeletonResource_v1.coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of _Proto_SkeletonResource_v1.definition.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for _Proto_SkeletonResource_v1.SkeletonResourceGenError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BC52514 + 4 * byte_21BE699D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BC52534 + 4 * byte_21BE699D5[v4]))();
}

_BYTE *sub_21BC52514(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BC52534(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC5253C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC52544(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC5254C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC52554(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for _Proto_SkeletonResource_v1.SkeletonResourceGenError()
{
  return &type metadata for _Proto_SkeletonResource_v1.SkeletonResourceGenError;
}

void Scene.AnchorCollection.append(_:)(uint64_t a1)
{
  uint64_t *v1;

  specialized Scene.AnchorCollection.append(_:)(a1, v1);
}

uint64_t Scene.AnchorCollection.removeNinja(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  v2 = specialized HasHierarchy.parent.getter();
  result = swift_release();
  if (v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  result = REEntityGetSceneNullable();
  if (result)
  {
    v4 = result;
    v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      v6 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      v6 = Scene.init(coreScene:)(v4);
    }
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v1 + 16);
    result = swift_release();
    if (v7 == v8)
    {
      result = Entity.isNinja.getter();
      if ((result & 1) != 0)
        return RESceneRemoveEntity();
      goto LABEL_11;
    }
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  __break(1u);
  return result;
}

void Scene.AnchorCollection.appendNinja(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t SceneNullable;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  if ((Entity.isNinja.getter() & 1) != 0)
  {
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
      goto LABEL_7;
    v5 = SceneNullable;
    v6 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v6)
    {
      v7 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      v7 = Scene.init(coreScene:)(v5);
    }
    v8 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v3 + 16);
    swift_release();
    if (v8 != v9)
    {
LABEL_7:
      Scene.AnchorCollection.doAppend(_:)(a1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void Scene.AnchorCollection.makeIterator()(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

void Scene.AnchorCollection.doAppend(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t SceneNullable;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;

  v3 = *v1;
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
    goto LABEL_6;
  v5 = SceneNullable;
  v6 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v6)
  {
    v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    v7 = Scene.init(coreScene:)(v5);
  }
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v3 + 16);
  swift_release();
  if (v8 != v9)
  {
LABEL_6:
    RESceneAddEntity();
    if (swift_conformsToProtocol2())
      v10 = a1;
    else
      v10 = 0;
    if (v10)
    {
      swift_beginAccess();
      v11 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v11[2])
        {
          swift_retain();
          v12 = (id)RFServiceManagerGetAnchorManagementService();
          if (v12)
          {
            v13 = v12;
            RFAnchorManagementUpdateAnchoringInScene();

          }
          swift_release();
        }
      }
    }
    Entity.updateSceneGravityIfNeeded()();
  }
}

uint64_t Scene.AnchorCollection.startIndex.getter()
{
  return 0;
}

uint64_t Scene.AnchorCollection.endIndex.getter()
{
  char *EntitiesArray;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Object;
  unsigned __int8 *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  Swift::Int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  _QWORD *v38;

  EntitiesArray = (char *)RESceneGetEntitiesArray();
  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v1);
  v37 = *(_QWORD *)(v2 + 16);
  if (!v37)
  {
    v35 = 0;
    v5 = 0;
LABEL_42:
    swift_release();
    result = v35 - v5;
    if (!__OFSUB__(v35, v5))
      return result;
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v3 = one-time initialization token for customComponentTypeObjectIdToHandles;
  swift_retain();
  if (v3 != -1)
LABEL_49:
    swift_once();
  v4 = 0;
  v5 = 0;
  v6 = &static SceneManager.customComponentTypeObjectIdToHandles;
  while (1)
  {
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    swift_beginAccess();
    if (*(_QWORD *)(*v6 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
      if ((v9 & 1) != 0)
      {
        swift_endAccess();
        goto LABEL_22;
      }
    }
    v10 = v2;
    swift_endAccess();
    v2 = (uint64_t)&type metadata for __EntityInfoComponent;
    v11 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent, 0, 0);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v6;
    v38 = (_QWORD *)*v6;
    v14 = v6;
    *v6 = 0x8000000000000000;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
    v17 = *(_QWORD *)(v13 + 16);
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_45;
    v2 = v15;
    if (*(_QWORD *)(v13 + 24) >= v19)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v22 = v38;
        if ((v15 & 1) == 0)
          goto LABEL_19;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v22 = v38;
        if ((v2 & 1) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
      v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
      if ((v2 & 1) != (v21 & 1))
        goto LABEL_52;
      v16 = v20;
      v22 = v38;
      if ((v2 & 1) == 0)
      {
LABEL_19:
        v22[(v16 >> 6) + 8] |= 1 << v16;
        v23 = 8 * v16;
        *(_QWORD *)(v22[6] + v23) = &type metadata for __EntityInfoComponent;
        *(_QWORD *)(v22[7] + v23) = v11;
        v24 = v22[2];
        v7 = __OFADD__(v24, 1);
        v25 = v24 + 1;
        if (v7)
          goto LABEL_47;
        v22[2] = v25;
        goto LABEL_21;
      }
    }
    *(_QWORD *)(v22[7] + 8 * v16) = v11;
LABEL_21:
    static SceneManager.customComponentTypeObjectIdToHandles = (uint64_t)v22;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v2 = v10;
    v6 = v14;
LABEL_22:
    if (REEntityGetCustomComponent())
      break;
LABEL_4:
    v7 = __OFADD__(v5++, 1);
    if (v7)
      goto LABEL_46;
LABEL_5:
    ++v4;
    if (v8 == v37)
    {
      swift_release();
      v35 = *(_QWORD *)(v2 + 16);
      goto LABEL_42;
    }
  }
  Object = RECustomComponentGetObject();
  if (!Object)
    goto LABEL_51;
  v27 = *(unsigned __int8 **)Object;
  if (*(_QWORD *)(Object + 8))
    v28 = 1;
  else
    v28 = v27 == 0;
  if (v28)
  {
    swift_retain();
  }
  else
  {
    v29 = *v27;
    v30 = String.init(utf8String:)();
    if (v31)
      v32 = v30;
    else
      v32 = 0;
    if (v31)
      v33 = v31;
    else
      v33 = 0xE000000000000000;
    v27 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v29 == 42, v32, v33);
    swift_bridgeObjectRelease();
    type metadata accessor for IntrospectionDataCleanupHelper();
    *(_QWORD *)(swift_allocObject() + 16) = v27;
  }
  if (v27)
  {
    v34 = *v27;
    swift_release();
    if (v34 != 42)
      goto LABEL_5;
    goto LABEL_4;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall Scene.AnchorCollection.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t Scene.AnchorCollection.subscript.getter(uint64_t a1)
{
  char *EntitiesArray;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t Object;
  unsigned __int8 *v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  Swift::Int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  EntitiesArray = (char *)RESceneGetEntitiesArray();
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v2);
  v40 = *(_QWORD *)(v3 + 16);
  v41 = v3;
  if (!v40)
  {
LABEL_60:
    swift_release();
    goto LABEL_61;
  }
  if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
LABEL_56:
    swift_once();
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v7 = *(_QWORD *)(v41 + 8 * v4 + 32);
    swift_beginAccess();
    if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v8 & 1) == 0))
    {
      swift_endAccess();
      v9 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v11 = static SceneManager.customComponentTypeObjectIdToHandles;
      v42 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
      v14 = *(_QWORD *)(v11 + 16);
      v15 = (v12 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        goto LABEL_53;
      v17 = v12;
      if (*(_QWORD *)(v11 + 24) < v16)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
        v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_62;
        v13 = v18;
        v20 = (_QWORD *)v42;
        if ((v17 & 1) == 0)
          goto LABEL_12;
LABEL_16:
        *(_QWORD *)(v20[7] + 8 * v13) = v9;
LABEL_17:
        static SceneManager.customComponentTypeObjectIdToHandles = (uint64_t)v20;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v20 = (_QWORD *)v42;
        if ((v12 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v20 = (_QWORD *)v42;
        if ((v17 & 1) != 0)
          goto LABEL_16;
      }
LABEL_12:
      v20[(v13 >> 6) + 8] |= 1 << v13;
      v21 = 8 * v13;
      *(_QWORD *)(v20[6] + v21) = &type metadata for __EntityInfoComponent;
      *(_QWORD *)(v20[7] + v21) = v9;
      v22 = v20[2];
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
        goto LABEL_54;
      v20[2] = v24;
      goto LABEL_17;
    }
LABEL_18:
    swift_endAccess();
    if (REEntityGetCustomComponent())
    {
      Object = RECustomComponentGetObject();
      if (!Object)
        goto LABEL_59;
      v26 = *(unsigned __int8 **)Object;
      if (*(_QWORD *)(Object + 8))
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        swift_retain();
      }
      else
      {
        v28 = *v26;
        v29 = String.init(utf8String:)();
        if (v30)
          v31 = v29;
        else
          v31 = 0;
        if (v30)
          v32 = v30;
        else
          v32 = 0xE000000000000000;
        v26 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v28 == 42, v31, v32);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(_QWORD *)(swift_allocObject() + 16) = v26;
      }
      if (!v26)
        goto LABEL_58;
      v33 = *v26;
      swift_release();
      if (v33 != 42)
        break;
    }
LABEL_4:
    ++v4;
    if (v6 == v40)
      goto LABEL_60;
  }
  if (v5 != a1)
  {
    v23 = __OFADD__(v5++, 1);
    if (v23)
      goto LABEL_55;
    goto LABEL_4;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v34 = swift_dynamicCastClassUnconditional();
    goto LABEL_43;
  }
  if ((REEntityIsBeingDestroyed() & 1) != 0)
  {
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v36 = specialized static Entity.entityInfoType(_:)(v7);
  if (v36)
  {
    v35 = (*(uint64_t (**)(void))(v36 + 232))();
    v37 = *(_QWORD *)(v35 + 16);
    swift_retain();
    MEMORY[0x22076D160](v37, 0);
    *(_QWORD *)(v35 + 16) = v7;
    MEMORY[0x22076D160](v7, v35);
    swift_release();
  }
  else
  {
    v34 = makeEntity(for:)(v7);
LABEL_43:
    v35 = v34;
  }
  if (!swift_conformsToProtocol2())
    v35 = 0;
  if (!v35)
  {
    while (1)
    {
LABEL_61:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_62:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
  swift_release();
  return v35;
}

uint64_t Scene.AnchorCollection.subscript.setter(_QWORD *a1, char a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  char *EntitiesArray;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t Object;
  unsigned __int8 *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  Swift::Int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t result;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];

  LOBYTE(v4) = a2;
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  v8 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v7);
  v50 = *(_QWORD *)(v8 + 16);
  v51 = v8;
  if (!v50)
    goto LABEL_71;
  v47 = v3;
  v48 = a1;
  if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
LABEL_66:
    swift_once();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v12 = *(_QWORD *)(v51 + 8 * v9 + 32);
    swift_beginAccess();
    v3 = (_QWORD *)static SceneManager.customComponentTypeObjectIdToHandles;
    if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v14 & 1) == 0))
    {
      swift_endAccess();
      v4 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v3 = (_QWORD *)static SceneManager.customComponentTypeObjectIdToHandles;
      v52[0] = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
      v18 = v3[2];
      v19 = (v16 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        goto LABEL_58;
      v21 = v16;
      if (v3[3] < v20)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
        v3 = (_QWORD *)v52[0];
        v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_73;
        v17 = v22;
        v24 = (_QWORD *)v52[0];
        if ((v21 & 1) == 0)
          goto LABEL_18;
LABEL_16:
        *(_QWORD *)(v24[7] + 8 * v17) = v4;
LABEL_20:
        static SceneManager.customComponentTypeObjectIdToHandles = (uint64_t)v24;
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v24 = (_QWORD *)v52[0];
        if ((v16 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        v3 = v52;
        specialized _NativeDictionary.copy()();
        v24 = (_QWORD *)v52[0];
        if ((v21 & 1) != 0)
          goto LABEL_16;
      }
LABEL_18:
      v24[(v17 >> 6) + 8] |= 1 << v17;
      v25 = 8 * v17;
      *(_QWORD *)(v24[6] + v25) = &type metadata for __EntityInfoComponent;
      *(_QWORD *)(v24[7] + v25) = v4;
      v26 = v24[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
      {
        __break(1u);
        goto LABEL_66;
      }
      v24[2] = v28;
      goto LABEL_20;
    }
    v4 = *(_QWORD *)(v3[7] + 8 * v13);
LABEL_21:
    swift_endAccess();
    if (REEntityGetCustomComponent())
    {
      Object = RECustomComponentGetObject();
      if (!Object)
        goto LABEL_68;
      v30 = *(unsigned __int8 **)Object;
      if (*(_QWORD *)(Object + 8))
        v31 = 1;
      else
        v31 = v30 == 0;
      if (v31)
      {
        swift_retain();
      }
      else
      {
        LODWORD(v4) = *v30;
        v32 = String.init(utf8String:)();
        if (v33)
          v34 = v32;
        else
          v34 = 0;
        if (v33)
          v3 = v33;
        else
          v3 = (_QWORD *)0xE000000000000000;
        v30 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)((_DWORD)v4 == 42, v34, (unint64_t)v3);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(_QWORD *)(swift_allocObject() + 16) = v30;
      }
      if (!v30)
        goto LABEL_69;
      v35 = *v30;
      swift_release();
      if (v35 != 42)
      {
        if (v10 == a3)
          goto LABEL_42;
        v27 = __OFADD__(v10++, 1);
        if (v27)
          break;
      }
    }
    ++v9;
    if (v11 == v50)
      goto LABEL_71;
  }
  __break(1u);
LABEL_42:
  swift_release();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v36 = swift_dynamicCastClassUnconditional();
    v37 = v48;
    goto LABEL_48;
  }
  v37 = v48;
  if ((REEntityIsBeingDestroyed() & 1) != 0)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
  }
  else
  {
    v38 = specialized static Entity.entityInfoType(_:)();
    if (v38)
    {
      v36 = (*(uint64_t (**)(void))(v38 + 232))();
      v39 = *(_QWORD *)(v36 + 16);
      swift_retain();
      MEMORY[0x22076D160](v39, 0);
      *(_QWORD *)(v36 + 16) = v12;
      MEMORY[0x22076D160](v12, v36);
      swift_release();
    }
    else
    {
      v36 = makeEntity(for:)(v12);
    }
LABEL_48:
    if (*(_QWORD *)(v36 + 16) == v37[2])
      goto LABEL_63;
    v40 = HasHierarchy.parent.getter();
    v41 = *(uint64_t (**)(uint64_t))(*v37 + 120);
    v42 = swift_retain();
    v43 = v41(v42);
    swift_release();
    if (v40)
    {
      v52[1] = v40;
      swift_retain();
      swift_retain();
      Entity.ChildCollection.doRemove(_:preservingWorldTransform:)((uint64_t)v37, 0);
      swift_release();
      swift_release();
      RESceneSetEntityAtIndex();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    if (!v43)
    {
      RESceneSetEntityAtIndex();
LABEL_63:
      swift_release();
      return swift_release();
    }
    if (*(_QWORD *)(v43 + 16) != *(_QWORD *)(*v47 + 16))
    {
      swift_retain();
      RESceneRemoveEntity();
      swift_release();
      goto LABEL_62;
    }
    swift_retain();
    v44 = swift_retain();
    v3 = (_QWORD *)specialized Collection.firstIndex(where:)(v44, (uint64_t)v37);
    LOBYTE(v4) = v45;
    swift_release();
    swift_release();
    RESceneRemoveEntity();
    if (RELinkedOnOrAfterFall2024OSVersions())
    {
      RESceneGetEntityIndexInParent();
      goto LABEL_62;
    }
LABEL_59:
    if ((v4 & 1) != 0)
      goto LABEL_72;
    if ((uint64_t)v3 >= a3 || !__OFSUB__(v9, 1))
    {
LABEL_62:
      RESceneSetEntityAtIndex();
      swift_release();
      goto LABEL_63;
    }
  }
  __break(1u);
LABEL_71:
  swift_release();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_72:
  swift_release();
  swift_release();
  __break(1u);
LABEL_73:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Scene.AnchorCollection.remove(_:)()
{
  return specialized Scene.AnchorCollection.remove(_:)();
}

uint64_t (*Scene.AnchorCollection.subscript.modify(uint64_t *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;

  a1[2] = a2;
  a1[3] = v2;
  *a1 = Scene.AnchorCollection.subscript.getter(a2);
  a1[1] = v4;
  return Scene.AnchorCollection.subscript.modify;
}

uint64_t Scene.AnchorCollection.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if ((a2 & 1) == 0)
    return Scene.AnchorCollection.subscript.setter(*(_QWORD **)a1, v2, v3);
  v4 = (_QWORD *)swift_retain();
  Scene.AnchorCollection.subscript.setter(v4, v2, v3);
  return swift_release();
}

Swift::Void __swiftcall Scene.AnchorCollection.append(contentsOf:)(Swift::OpaquePointer contentsOf)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t SceneNullable;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *Object;
  uint64_t ServiceLocator;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  BOOL v27;
  float v28;
  float v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;

  v2 = *((_QWORD *)contentsOf._rawValue + 2);
  if (v2)
  {
    v3 = *v1;
    v4 = (char *)contentsOf._rawValue + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v2; ++i)
    {
      v6 = *(_QWORD *)&v4[16 * i];
      swift_retain();
      SceneNullable = REEntityGetSceneNullable();
      if (!SceneNullable)
        goto LABEL_39;
      v8 = SceneNullable;
      v9 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v9)
      {
        v10 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_QWORD *)(v10 + 56) = 0;
        swift_unknownObjectWeakInit();
        *(_QWORD *)(v10 + 104) = 0;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        swift_weakInit();
        *(_OWORD *)(v10 + 216) = 0u;
        *(_OWORD *)(v10 + 200) = 0u;
        *(_OWORD *)(v10 + 184) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        RERetain();
        *(_QWORD *)(v10 + 16) = v8;
        RESceneSetSwiftObject();
      }
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v3 + 16);
      swift_release();
      if (v11 != v12)
      {
LABEL_39:
        RESceneAddEntity();
        if (swift_conformsToProtocol2())
          v13 = v6;
        else
          v13 = 0;
        if (v13)
        {
          swift_beginAccess();
          v14 = static RealityFusionSession.sharedSession;
          if (static RealityFusionSession.sharedSession)
          {
            swift_beginAccess();
            if (v14[2])
            {
              swift_retain();
              v15 = (id)RFServiceManagerGetAnchorManagementService();
              if (v15)
              {
                v16 = v15;
                RFAnchorManagementUpdateAnchoringInScene();

              }
              swift_release();
            }
          }
        }
        v17 = REEntityGetSceneNullable();
        if (v17)
        {
          v18 = v17;
          v19 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v19)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            v20 = swift_allocObject();
            *(_OWORD *)(v20 + 24) = 0u;
            *(_OWORD *)(v20 + 40) = 0u;
            *(_QWORD *)(v20 + 56) = 0;
            swift_unknownObjectWeakInit();
            *(_QWORD *)(v20 + 104) = 0;
            *(_OWORD *)(v20 + 88) = 0u;
            *(_OWORD *)(v20 + 72) = 0u;
            swift_weakInit();
            *(_OWORD *)(v20 + 216) = 0u;
            *(_OWORD *)(v20 + 200) = 0u;
            *(_OWORD *)(v20 + 184) = 0u;
            *(_OWORD *)(v20 + 168) = 0u;
            *(_OWORD *)(v20 + 152) = 0u;
            *(_OWORD *)(v20 + 136) = 0u;
            *(_OWORD *)(v20 + 120) = 0u;
            RERetain();
            *(_QWORD *)(v20 + 16) = v18;
            RESceneSetSwiftObject();
          }
          swift_beginAccess();
          if (static __RKScenePhysics.registration)
          {
            RESceneGetComponentsOfCustomType();
            if (v21)
            {
              Object = (__int128 *)RECustomComponentGetObject();
              if (Object)
              {
                v30 = *Object;
                if (RESceneGetECSManagerNullable())
                {
                  ServiceLocator = REECSManagerGetServiceLocator();
                  if (MEMORY[0x22076FDD0](ServiceLocator))
                  {
                    REPhysicsSimulationServiceGetDefaultGravity();
                    v26 = v24;
                    v25 = 0;
                    HIDWORD(v26) = v31;
                    v27 = 1;
                    while (1)
                    {
                      while (!v27)
                      {
                        if (v25 == 2)
                          goto LABEL_34;
                        v27 = 0;
                        ++v25;
                      }
                      v32 = v26;
                      v28 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
                      v33 = v30;
                      v29 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
                      v27 = v28 == v29;
                      if (v25 == 2)
                        break;
                      ++v25;
                    }
                    if (v28 == v29)
                      goto LABEL_35;
LABEL_34:
                    REPhysicsSimulationServiceSetDefaultGravity();
                  }
                }
              }
            }
          }
LABEL_35:
          swift_release();
        }
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t Scene.AnchorCollection.append<A>(contentsOf:)()
{
  return Sequence.forEach(_:)();
}

void closure #1 in Scene.AnchorCollection.append<A>(contentsOf:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t SceneNullable;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;

  v3 = *a1;
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
    goto LABEL_6;
  v5 = SceneNullable;
  v6 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v6)
  {
    v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    v7 = Scene.init(coreScene:)(v5);
  }
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  swift_release();
  if (v8 != v9)
  {
LABEL_6:
    RESceneAddEntity();
    if (swift_conformsToProtocol2())
      v10 = v3;
    else
      v10 = 0;
    if (v10)
    {
      swift_beginAccess();
      v11 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v11[2])
        {
          swift_retain();
          v12 = (id)RFServiceManagerGetAnchorManagementService();
          if (v12)
          {
            v13 = v12;
            RFAnchorManagementUpdateAnchoringInScene();

          }
          swift_release();
        }
      }
    }
    Entity.updateSceneGravityIfNeeded()();
  }
}

Swift::Void __swiftcall Scene.AnchorCollection.remove(at:)(Swift::Int at)
{
  Scene.AnchorCollection.subscript.getter(at);
  RESceneRemoveEntity();
  swift_release();
}

Swift::Void __swiftcall Scene.AnchorCollection.removeAll(keepCapacity:)(Swift::Bool keepCapacity)
{
  uint64_t v1;

  while (1)
  {
    v1 = Scene.AnchorCollection.endIndex.getter();
    if (v1 < 0)
      break;
    if (!v1)
      return;
    Scene.AnchorCollection.subscript.getter(0);
    RESceneRemoveEntity();
    swift_release();
  }
  __break(1u);
}

Swift::Void __swiftcall Scene.AnchorCollection.removeAll()()
{
  uint64_t v0;

  while (1)
  {
    v0 = Scene.AnchorCollection.endIndex.getter();
    if (v0 < 0)
      break;
    if (!v0)
      return;
    Scene.AnchorCollection.subscript.getter(0);
    RESceneRemoveEntity();
    swift_release();
  }
  __break(1u);
}

Swift::Void __swiftcall Scene.AnchorCollection.replaceAll(_:)(Swift::OpaquePointer a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t SceneNullable;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *Object;
  uint64_t ServiceLocator;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  BOOL v29;
  float v30;
  float v31;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = *v1;
  while (1)
  {
    v36 = v3;
    v4 = Scene.AnchorCollection.endIndex.getter();
    if (v4 < 0)
    {
      __break(1u);
      return;
    }
    if (!v4)
      break;
    v36 = v3;
    Scene.AnchorCollection.subscript.getter(0);
    RESceneRemoveEntity();
    swift_release();
  }
  v5 = *((_QWORD *)a1._rawValue + 2);
  if (v5)
  {
    v6 = (char *)a1._rawValue + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)&v6[16 * i];
      swift_retain_n();
      SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        v10 = SceneNullable;
        v11 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v11)
        {
          v12 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          v12 = swift_allocObject();
          *(_OWORD *)(v12 + 24) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          *(_QWORD *)(v12 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(_QWORD *)(v12 + 104) = 0;
          *(_OWORD *)(v12 + 88) = 0u;
          *(_OWORD *)(v12 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v12 + 216) = 0u;
          *(_OWORD *)(v12 + 200) = 0u;
          *(_OWORD *)(v12 + 184) = 0u;
          *(_OWORD *)(v12 + 168) = 0u;
          *(_OWORD *)(v12 + 152) = 0u;
          *(_OWORD *)(v12 + 136) = 0u;
          *(_OWORD *)(v12 + 120) = 0u;
          RERetain();
          *(_QWORD *)(v12 + 16) = v10;
          RESceneSetSwiftObject();
        }
        v13 = *(_QWORD *)(v12 + 16);
        v14 = *(_QWORD *)(v3 + 16);
        swift_release();
        if (v13 == v14)
          goto LABEL_7;
      }
      RESceneAddEntity();
      if (swift_conformsToProtocol2())
        v15 = v8;
      else
        v15 = 0;
      if (v15)
      {
        swift_beginAccess();
        v16 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v16[2])
          {
            swift_retain();
            v17 = (id)RFServiceManagerGetAnchorManagementService();
            if (v17)
            {
              v18 = v17;
              RFAnchorManagementUpdateAnchoringInScene();

            }
            swift_release();
          }
        }
      }
      v19 = REEntityGetSceneNullable();
      if (!v19)
      {
LABEL_7:
        swift_release_n();
      }
      else
      {
        v20 = v19;
        v21 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v21)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          v22 = swift_allocObject();
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 40) = 0u;
          *(_QWORD *)(v22 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(_QWORD *)(v22 + 104) = 0;
          *(_OWORD *)(v22 + 88) = 0u;
          *(_OWORD *)(v22 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v22 + 216) = 0u;
          *(_OWORD *)(v22 + 200) = 0u;
          *(_OWORD *)(v22 + 184) = 0u;
          *(_OWORD *)(v22 + 168) = 0u;
          *(_OWORD *)(v22 + 152) = 0u;
          *(_OWORD *)(v22 + 136) = 0u;
          *(_OWORD *)(v22 + 120) = 0u;
          RERetain();
          *(_QWORD *)(v22 + 16) = v20;
          RESceneSetSwiftObject();
        }
        swift_beginAccess();
        if (static __RKScenePhysics.registration)
        {
          RESceneGetComponentsOfCustomType();
          if (v23)
          {
            Object = (__int128 *)RECustomComponentGetObject();
            if (Object)
            {
              v32 = *Object;
              if (RESceneGetECSManagerNullable())
              {
                ServiceLocator = REECSManagerGetServiceLocator();
                if (MEMORY[0x22076FDD0](ServiceLocator))
                {
                  REPhysicsSimulationServiceGetDefaultGravity();
                  v28 = v26;
                  v27 = 0;
                  HIDWORD(v28) = v33;
                  v29 = 1;
                  while (1)
                  {
                    while (!v29)
                    {
                      if (v27 == 2)
                        goto LABEL_39;
                      v29 = 0;
                      ++v27;
                    }
                    v34 = v28;
                    v30 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
                    v35 = v32;
                    v31 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
                    v29 = v30 == v31;
                    if (v27 == 2)
                      break;
                    ++v27;
                  }
                  if (v30 == v31)
                    goto LABEL_40;
LABEL_39:
                  REPhysicsSimulationServiceSetDefaultGravity();
                }
              }
            }
          }
        }
LABEL_40:
        swift_release_n();
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t Scene.AnchorCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t i;
  uint64_t SceneNullable;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *Object;
  uint64_t ServiceLocator;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  BOOL v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v37 - v9;
  v11 = *v2;
  while (1)
  {
    v43 = v11;
    result = Scene.AnchorCollection.endIndex.getter();
    if (result < 0)
    {
      __break(1u);
      return result;
    }
    if (!result)
      break;
    v43 = v11;
    Scene.AnchorCollection.subscript.getter(0);
    RESceneRemoveEntity();
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  for (i = v44; v44; i = v44)
  {
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      v15 = SceneNullable;
      v16 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v16)
      {
        v17 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        v17 = swift_allocObject();
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *(_QWORD *)(v17 + 56) = 0;
        swift_unknownObjectWeakInit();
        *(_QWORD *)(v17 + 104) = 0;
        *(_OWORD *)(v17 + 88) = 0u;
        *(_OWORD *)(v17 + 72) = 0u;
        swift_weakInit();
        *(_OWORD *)(v17 + 216) = 0u;
        *(_OWORD *)(v17 + 200) = 0u;
        *(_OWORD *)(v17 + 184) = 0u;
        *(_OWORD *)(v17 + 168) = 0u;
        *(_OWORD *)(v17 + 152) = 0u;
        *(_OWORD *)(v17 + 136) = 0u;
        *(_OWORD *)(v17 + 120) = 0u;
        RERetain();
        *(_QWORD *)(v17 + 16) = v15;
        RESceneSetSwiftObject();
      }
      v18 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(v11 + 16);
      swift_release();
      if (v18 == v19)
        goto LABEL_7;
    }
    RESceneAddEntity();
    if (swift_conformsToProtocol2())
      v20 = i;
    else
      v20 = 0;
    if (v20)
    {
      swift_beginAccess();
      v21 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v21[2])
        {
          swift_retain();
          v22 = (id)RFServiceManagerGetAnchorManagementService();
          if (v22)
          {
            v23 = v22;
            RFAnchorManagementUpdateAnchoringInScene();

          }
          swift_release();
        }
      }
    }
    v24 = REEntityGetSceneNullable();
    if (!v24)
    {
LABEL_7:
      swift_release_n();
      goto LABEL_8;
    }
    v25 = v24;
    v26 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v26)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      v27 = swift_allocObject();
      *(_OWORD *)(v27 + 24) = 0u;
      *(_OWORD *)(v27 + 40) = 0u;
      *(_QWORD *)(v27 + 56) = 0;
      swift_unknownObjectWeakInit();
      *(_QWORD *)(v27 + 104) = 0;
      *(_OWORD *)(v27 + 88) = 0u;
      *(_OWORD *)(v27 + 72) = 0u;
      swift_weakInit();
      *(_OWORD *)(v27 + 216) = 0u;
      *(_OWORD *)(v27 + 200) = 0u;
      *(_OWORD *)(v27 + 184) = 0u;
      *(_OWORD *)(v27 + 168) = 0u;
      *(_OWORD *)(v27 + 152) = 0u;
      *(_OWORD *)(v27 + 136) = 0u;
      *(_OWORD *)(v27 + 120) = 0u;
      RERetain();
      *(_QWORD *)(v27 + 16) = v25;
      RESceneSetSwiftObject();
    }
    swift_beginAccess();
    if (!static __RKScenePhysics.registration)
      goto LABEL_40;
    RESceneGetComponentsOfCustomType();
    if (!v28)
      goto LABEL_40;
    Object = (__int128 *)RECustomComponentGetObject();
    if (!Object)
      goto LABEL_40;
    v39 = *Object;
    if (!RESceneGetECSManagerNullable())
      goto LABEL_40;
    ServiceLocator = REECSManagerGetServiceLocator();
    if (!MEMORY[0x22076FDD0](ServiceLocator))
      goto LABEL_40;
    REPhysicsSimulationServiceGetDefaultGravity();
    v33 = v31;
    v32 = 0;
    HIDWORD(v33) = HIDWORD(v40);
    v34 = 1;
    v40 = v33;
    while (!v34)
    {
      if (v32 == 2)
        goto LABEL_39;
      v34 = 0;
LABEL_34:
      ++v32;
    }
    v41 = v33;
    v35 = *(float *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v32 & 3)));
    v42 = v39;
    v36 = *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v32 & 3)));
    v34 = v35 == v36;
    if (v32 != 2)
      goto LABEL_34;
    if (v35 == v36)
      goto LABEL_40;
LABEL_39:
    REPhysicsSimulationServiceSetDefaultGravity();
LABEL_40:
    swift_release_n();
    swift_release();
LABEL_8:
    dispatch thunk of IteratorProtocol.next()();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, AssociatedTypeWitness);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Scene.AnchorCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Scene.AnchorCollection.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Scene.AnchorCollection(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3;
  uint64_t v4;

  v3 = Scene.AnchorCollection.subscript.getter(*a2);
  a1[1] = v4;
  a1[2] = v3;
  *a1 = v3;
  return destroy for __RKEntityUUIDComponent;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Scene.AnchorCollection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *a1;
  v4 = a1[1];
  v6 = *v2;
  result = Scene.AnchorCollection.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= v4)
  {
    a2[1] = v4;
    a2[2] = v6;
    *a2 = v5;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance Scene.AnchorCollection@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  *a1 = *v1;
  a1[1] = 0;
  swift_retain();
  result = Scene.AnchorCollection.endIndex.getter();
  a1[2] = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Scene.AnchorCollection()
{
  return Scene.AnchorCollection.endIndex.getter() == 0;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Scene.AnchorCollection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance Scene.AnchorCollection()
{
  uint64_t result;

  result = Scene.AnchorCollection.endIndex.getter();
  if (result < 0)
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Scene.AnchorCollection()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Scene.AnchorCollection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t Scene.AnchorCollection.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_retain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasAnchoring);
  v3 = MEMORY[0x220768F48](v1, v2);
  swift_release();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Scene.AnchorCollection()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_retain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasAnchoring);
  v3 = MEMORY[0x220768F48](v1, v2);
  swift_release();
  return v3;
}

uint64_t specialized Scene.AnchorCollection.remove(_:)()
{
  return RESceneRemoveEntity();
}

void specialized Scene.AnchorCollection.append(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t SceneNullable;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;

  v3 = *a2;
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
    goto LABEL_6;
  v5 = SceneNullable;
  v6 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v6)
  {
    v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    v7 = Scene.init(coreScene:)(v5);
  }
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v3 + 16);
  swift_release();
  if (v8 != v9)
  {
LABEL_6:
    RESceneAddEntity();
    if (swift_conformsToProtocol2())
      v10 = a1;
    else
      v10 = 0;
    if (v10)
    {
      swift_beginAccess();
      v11 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v11[2])
        {
          swift_retain();
          v12 = (id)RFServiceManagerGetAnchorManagementService();
          if (v12)
          {
            v13 = v12;
            RFAnchorManagementUpdateAnchoringInScene();

          }
          swift_release();
        }
      }
    }
    Entity.updateSceneGravityIfNeeded()();
  }
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = 0;
  if (Scene.AnchorCollection.endIndex.getter())
  {
    while (1)
    {
      v4 = *(_QWORD *)(Scene.AnchorCollection.subscript.getter(v3) + 16);
      v5 = *(_QWORD *)(a2 + 16);
      result = swift_release();
      if (v4 == v5)
        break;
      v7 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        return result;
      }
      ++v3;
      if (v7 == Scene.AnchorCollection.endIndex.getter())
        return 0;
    }
  }
  return v3;
}

void partial apply for closure #1 in Scene.AnchorCollection.append<A>(contentsOf:)(uint64_t *a1)
{
  uint64_t v1;

  closure #1 in Scene.AnchorCollection.append<A>(contentsOf:)(a1, *(_QWORD *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type Scene.AnchorCollection and conformance Scene.AnchorCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection;
  if (!lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.AnchorCollection, &type metadata for Scene.AnchorCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Scene.AnchorCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<Scene.AnchorCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<Scene.AnchorCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Scene.AnchorCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<Scene.AnchorCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<Scene.AnchorCollection>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Scene.AnchorCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Scene.AnchorCollection> and conformance Entity.ChildCollection.IndexingIterator<A>, &demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Scene.AnchorCollection>, (uint64_t)&protocol conformance descriptor for Entity.ChildCollection.IndexingIterator<A>);
}

uint64_t sub_21BC54DCC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = Scene.AnchorCollection.subscript.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_21BC54E08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (_QWORD *)swift_retain();
  return Scene.AnchorCollection.subscript.setter(v5, v4, v3);
}

uint64_t sub_21BC54E48()
{
  return 0;
}

ValueMetadata *type metadata accessor for Scene.AnchorCollection()
{
  return &type metadata for Scene.AnchorCollection;
}

void static GroundingShadowComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 4009;
}

uint64_t GroundingShadowComponent.castsShadow.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t GroundingShadowComponent.castsShadow.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*GroundingShadowComponent.castsShadow.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double GroundingShadowComponent.init(castsShadow:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_BYTE *)a2 = a1;
  *(_BYTE *)(a2 + 1) = a1;
  return result;
}

uint64_t static GroundingShadowComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  char CastsShadow;
  char ReceivesShadow;
  int FadeBehaviorNearPhysicalObjects;
  char v5;
  char v7[24];
  ValueMetadata *v8;

  CastsShadow = REGroundingShadowComponentGetCastsShadow();
  ReceivesShadow = REGroundingShadowComponentGetReceivesShadow();
  FadeBehaviorNearPhysicalObjects = REGroundingShadowComponentGetFadeBehaviorNearPhysicalObjects();
  v5 = FadeBehaviorNearPhysicalObjects == 1;
  if (FadeBehaviorNearPhysicalObjects == 2)
    v5 = 2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_BYTE *)a1 = CastsShadow;
  *(_BYTE *)(a1 + 1) = ReceivesShadow;
  v8 = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  v7[0] = v5;
  return outlined assign with take of Any?((uint64_t)v7, a1 + 8);
}

uint64_t GroundingShadowComponent.__toCore(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  REGroundingShadowComponentSetCastsShadow();
  REGroundingShadowComponentSetReceivesShadow();
  v1 = v0 + 8;
  outlined init with copy of Any?(v1, (uint64_t)&v6);
  v2 = v7;
  outlined destroy of Any?((uint64_t)&v6);
  if (!v2)
    goto LABEL_4;
  result = outlined init with copy of Any?(v1, (uint64_t)&v4);
  if (v5)
  {
    outlined init with take of Any(&v4, &v6);
    swift_dynamicCast();
LABEL_4:
    REGroundingShadowComponentSetFadeBehaviorNearPhysicalObjects();
    return RENetworkMarkComponentDirty();
  }
  __break(1u);
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance GroundingShadowComponent(_DWORD *a1@<X8>)
{
  *a1 = 4009;
}

uint64_t static GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.__fromCore(from:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = (_DWORD)result == 1;
  if ((_DWORD)result == 2)
    v2 = 2;
  *a2 = v2;
  return result;
}

uint64_t GroundingShadowComponent.init(castsShadow:receivesShadow:fadeBehaviorNearPhysicalObjects:)@<X0>(char a1@<W0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  _BYTE v6[24];
  ValueMetadata *v7;

  v4 = *a3;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_BYTE *)a4 = a1;
  *(_BYTE *)(a4 + 1) = a2;
  *(_OWORD *)(a4 + 8) = 0u;
  v7 = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  v6[0] = v4;
  return outlined assign with take of Any?((uint64_t)v6, a4 + 8);
}

uint64_t GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = v1 + 8;
  outlined init with copy of Any?(v3, (uint64_t)&v8);
  v4 = v9;
  result = outlined destroy of Any?((uint64_t)&v8);
  if (v4)
  {
    result = outlined init with copy of Any?(v3, (uint64_t)&v6);
    if (v7)
    {
      outlined init with take of Any(&v6, &v8);
      return swift_dynamicCast();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

uint64_t GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.__toCore()()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t GroundingShadowComponent.receivesShadow.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t GroundingShadowComponent.receivesShadow.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

_BYTE *(*GroundingShadowComponent.receivesShadow.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 1);
  return RealityRenderer.CameraSettings.antialiasing.modify;
}

double GroundingShadowComponent.init(castsShadow:receivesShadow:)@<D0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_BYTE *)a3 = a1;
  *(_BYTE *)(a3 + 1) = a2;
  return result;
}

BOOL static GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.setter(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE v4[24];
  ValueMetadata *v5;

  v2 = *a1;
  v5 = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  v4[0] = v2;
  return outlined assign with take of Any?((uint64_t)v4, v1 + 8);
}

void (*GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*result)(uint64_t);

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = v1 + 8;
  outlined init with copy of Any?(v1 + 8, (uint64_t)v3);
  v5 = v3[3];
  outlined destroy of Any?((uint64_t)v3);
  if (!v5)
  {
    *((_BYTE *)v3 + 72) = 0;
    return GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.modify;
  }
  result = (void (*)(uint64_t))outlined init with copy of Any?(v4, (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    swift_dynamicCast();
    return GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.modify;
  }
  __break(1u);
  return result;
}

void GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.modify(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  uint64_t v3;

  v1 = *(_QWORD **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64) + 8;
  v1[3] = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  *(_BYTE *)v1 = v2;
  outlined assign with take of Any?((uint64_t)v1, v3);
  free(v1);
}

uint64_t GroundingShadowComponent.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[40];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of GroundingShadowComponent((__int16 *)v0, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v8 + 32) = 0x6168537374736163;
  *(_QWORD *)(v8 + 40) = 0xEB00000000776F64;
  v9 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v8 + 48) = *(_BYTE *)v0;
  *(_QWORD *)(v8 + 72) = v9;
  strcpy((char *)(v8 + 80), "receivesShadow");
  *(_BYTE *)(v8 + 95) = -18;
  *(_BYTE *)(v8 + 96) = *(_BYTE *)(v0 + 1);
  *(_QWORD *)(v8 + 120) = v9;
  *(_QWORD *)(v8 + 128) = 0xD00000000000001FLL;
  *(_QWORD *)(v8 + 136) = 0x800000021BE8CAB0;
  *(_QWORD *)(v8 + 168) = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.getter((_BYTE *)(v8 + 144));
  v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t lazy protocol witness table accessor for type GroundingShadowComponent.FadeBehaviorNearPhysicalObjects and conformance GroundingShadowComponent.FadeBehaviorNearPhysicalObjects()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroundingShadowComponent.FadeBehaviorNearPhysicalObjects and conformance GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  if (!lazy protocol witness table cache variable for type GroundingShadowComponent.FadeBehaviorNearPhysicalObjects and conformance GroundingShadowComponent.FadeBehaviorNearPhysicalObjects)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects, &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroundingShadowComponent.FadeBehaviorNearPhysicalObjects and conformance GroundingShadowComponent.FadeBehaviorNearPhysicalObjects);
  }
  return result;
}

uint64_t sub_21BC5558C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 1);
  return result;
}

_BYTE *sub_21BC55598(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_21BC555A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_21BC555DC(char *a1, uint64_t a2)
{
  char v2;
  _BYTE v4[24];
  ValueMetadata *v5;

  v2 = *a1;
  v5 = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  v4[0] = v2;
  return outlined assign with take of Any?((uint64_t)v4, a2 + 8);
}

uint64_t destroy for GroundingShadowComponent(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  return result;
}

uint64_t initializeWithCopy for GroundingShadowComponent(uint64_t a1, __int16 *a2)
{
  _OWORD *v4;
  __int16 v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;

  v5 = *a2;
  v4 = a2 + 4;
  *(_WORD *)a1 = v5;
  v6 = (_OWORD *)(a1 + 8);
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
  }
  else
  {
    v8 = v4[1];
    *v6 = *v4;
    v6[1] = v8;
  }
  return a1;
}

uint64_t assignWithCopy for GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = (_OWORD *)(a1 + 8);
  v4 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 32) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    v6 = v4[1];
    *v3 = *v4;
    v3[1] = v6;
    return a1;
  }
  if (!v5)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = (_OWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *v4 = *(_OWORD *)(a2 + 8);
  v4[1] = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for GroundingShadowComponent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroundingShadowComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroundingShadowComponent()
{
  return &type metadata for GroundingShadowComponent;
}

uint64_t storeEnumTagSinglePayload for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BC55878 + 4 * byte_21BE69CB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BC558AC + 4 * asc_21BE69CB0[v4]))();
}

uint64_t sub_21BC558AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC558B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC558BCLL);
  return result;
}

uint64_t sub_21BC558C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC558D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BC558D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC558DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects()
{
  return &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
}

_QWORD *Entity.prepareAudio(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  type metadata accessor for AudioPlaybackController();
  v4 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v4[5] = a1;
  v4[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  v5 = REEntityGetOrAddComponentByClass();
  v4[4] = v5;
  RERetain();
  v6 = REAudioPlayerComponentPrepareAsset();
  v4[6] = v6;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v7 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v5, v2, a1, v6);
  swift_release();
  swift_release();
  v4[2] = v7;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  return v4;
}

_QWORD *Entity.playAudio(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  type metadata accessor for AudioPlaybackController();
  v4 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v4[5] = a1;
  v4[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  v5 = REEntityGetOrAddComponentByClass();
  v4[4] = v5;
  RERetain();
  v6 = REAudioPlayerComponentPrepareAsset();
  v4[6] = v6;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v7 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v5, v2, a1, v6);
  swift_release();
  swift_release();
  v4[2] = v7;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  AudioPlaybackController.play()();
  return v4;
}

Swift::Void __swiftcall Entity.stopAllAudio()()
{
  REAudioPlayerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    MEMORY[0x22076B984]();
    RENetworkMarkComponentDirty();
  }
}

_QWORD *Entity.playAudio(_:parentTimebase:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = v2;
  type metadata accessor for AudioFileResource();
  v5 = swift_dynamicCastClassUnconditional();
  type metadata accessor for AudioPlaybackController();
  v6 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v6[5] = v5;
  v6[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  v7 = REEntityGetOrAddComponentByClass();
  v6[4] = v7;
  RERetain();
  v8 = REAudioPlayerComponentPrepareAsset();
  v6[6] = v8;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v9 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v7, v3, v5, v8);
  swift_release();
  swift_release();
  v6[2] = v9;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  v10 = a2;
  REAudioPlayerComponentSetSourceClockOrTimebase();
  RENetworkMarkComponentDirty();

  AudioPlaybackController.play()();
  return v6;
}

_QWORD *Entity.prepareAudio(_:parentTimebase:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = v2;
  type metadata accessor for AudioFileResource();
  v5 = swift_dynamicCastClassUnconditional();
  type metadata accessor for AudioPlaybackController();
  v6 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v6[5] = v5;
  v6[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  v7 = REEntityGetOrAddComponentByClass();
  v6[4] = v7;
  RERetain();
  v8 = REAudioPlayerComponentPrepareAsset();
  v6[6] = v8;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v9 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v7, v3, v5, v8);
  swift_release();
  swift_release();
  v6[2] = v9;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  v10 = a2;
  REAudioPlayerComponentSetSourceClockOrTimebase();
  RENetworkMarkComponentDirty();

  return v6;
}

uint64_t static MeshResource.makeMutable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Mutable;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v6);
  v1 = v7;
  v2 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  Mutable = REAssetServiceMeshAssetCreateMutable();
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_4;
  type metadata accessor for MeshResource();
  v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = Mutable;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

void MeshResource.replaceAll(with:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    if (REAssetHandleConvertToMutable())
      REMeshAssetReplaceAllWithModel();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MeshResource.replaceAll(with:instances:skeletons:)(Swift::OpaquePointer with, Swift::OpaquePointer instances, Swift::OpaquePointer skeletons)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  Swift::OpaquePointer v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t k;
  void *rawValue;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_51;
  if (!REAssetHandleConvertToMutable())
    return;
  if ((unint64_t)with._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)(((unint64_t)with._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v8 = MEMORY[0x24BEE4AF8];
  rawValue = skeletons._rawValue;
  if (v7)
  {
    v36 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    v8 = v36;
    if (((unint64_t)with._rawValue & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = *(_QWORD *)(MEMORY[0x220769770](i, with._rawValue) + 16);
        swift_unknownObjectRelease();
        v12 = *(_QWORD *)(v36 + 16);
        v11 = *(_QWORD *)(v36 + 24);
        if (v12 >= v11 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        *(_QWORD *)(v36 + 16) = v12 + 1;
        *(_QWORD *)(v36 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      v13 = (char *)with._rawValue + 32;
      v14 = *(_QWORD *)(v36 + 16);
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)v13 + 16);
        v16 = *(_QWORD *)(v36 + 24);
        if (v14 >= v16 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v14 + 1, 1);
        *(_QWORD *)(v36 + 16) = v14 + 1;
        *(_QWORD *)(v36 + 8 * v14 + 32) = v15;
        v13 += 8;
        ++v14;
        --v7;
      }
      while (v7);
    }
    skeletons._rawValue = rawValue;
  }
  if ((unint64_t)instances._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = *(_QWORD *)(((unint64_t)instances._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = MEMORY[0x24BEE4AF8];
  if (!v17)
    goto LABEL_34;
  v37 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 & ~(v17 >> 63), 0);
  if (v17 < 0)
    goto LABEL_50;
  v18 = v37;
  if (((unint64_t)instances._rawValue & 0xC000000000000001) != 0)
  {
    for (j = 0; j != v17; ++j)
    {
      v20 = *(_QWORD *)(MEMORY[0x220769770](j, instances._rawValue) + 16);
      swift_unknownObjectRelease();
      v22 = *(_QWORD *)(v37 + 16);
      v21 = *(_QWORD *)(v37 + 24);
      if (v22 >= v21 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      *(_QWORD *)(v37 + 16) = v22 + 1;
      *(_QWORD *)(v37 + 8 * v22 + 32) = v20;
    }
  }
  else
  {
    v23 = (char *)instances._rawValue + 32;
    v24 = *(_QWORD *)(v37 + 16);
    do
    {
      v25 = *(_QWORD *)(*(_QWORD *)v23 + 16);
      v26 = *(_QWORD *)(v37 + 24);
      if (v24 >= v26 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v24 + 1, 1);
      *(_QWORD *)(v37 + 16) = v24 + 1;
      *(_QWORD *)(v37 + 8 * v24 + 32) = v25;
      v23 += 8;
      ++v24;
      --v17;
    }
    while (v17);
  }
  skeletons._rawValue = rawValue;
LABEL_34:
  v27 = *((_QWORD *)skeletons._rawValue + 2);
  v28 = MEMORY[0x24BEE4AF8];
  if (v27)
  {
    v38 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
    v28 = v38;
    v29 = (char *)skeletons._rawValue + 56;
    do
    {
      v30._rawValue = MeshSkeleton.makeSkeletonDef()()._rawValue;
      v32 = *(_QWORD *)(v38 + 16);
      v31 = *(_QWORD *)(v38 + 24);
      if (v32 >= v31 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      *(_QWORD *)(v38 + 16) = v32 + 1;
      *(Swift::OpaquePointer *)(v38 + 8 * v32 + 32) = v30;
      v29 += 32;
      --v27;
    }
    while (v27);
  }
  if (HIDWORD(*(_QWORD *)(v8 + 16)) || HIDWORD(*(_QWORD *)(v18 + 16)) || HIDWORD(*(_QWORD *)(v28 + 16)))
    goto LABEL_52;
  REMeshAssetReplaceAllWithSkinnedModels();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(v28 + 16);
  if (v33)
  {
    swift_bridgeObjectRetain();
    for (k = 0; k != v33; ++k)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

uint64_t specialized static MeshResource.makeMutable(assetService:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Mutable;
  uint64_t v4;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  Mutable = REAssetServiceMeshAssetCreateMutable();
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_4;
  type metadata accessor for MeshResource();
  v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = Mutable;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v4;
}

char *EnvironmentResource.CreateOptions.init(samplingQuality:specularCubeDimension:compression:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  char v5;

  v5 = *result;
  *(_WORD *)a5 = *a4;
  *(_BYTE *)(a5 + 2) = v5;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  return result;
}

Swift::OpaquePointer_optional __swiftcall EnvironmentResource.CreateOptions.toCoreImageBasedLightCompilationOptions(skyboxCubeDimension:)(Swift::Int_optional skyboxCubeDimension)
{
  uint64_t v1;
  Swift::Bool is_nil;
  Swift::Int value;
  int v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  Swift::Bool v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;
  Swift::OpaquePointer_optional result;

  is_nil = skyboxCubeDimension.is_nil;
  value = skyboxCubeDimension.value;
  v4 = *(unsigned __int8 *)(v1 + 2);
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(_BYTE *)(v1 + 16);
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;
  type metadata accessor for REEnvironmentResourceCreateSamplingQuality(0);
  v26 = v11;
  LODWORD(v25) = v4;
  outlined init with take of Any(&v25, v24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v8, v10, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = MEMORY[0x24BEE1768];
  if (!is_nil)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;
    v26 = v14;
    *(_QWORD *)&v25 = value;
    outlined init with take of Any(&v25, v24);
    v18 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v15, v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((v6 & 1) == 0)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;
    v26 = v14;
    *(_QWORD *)&v25 = v5;
    outlined init with take of Any(&v25, v24);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v19, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v23 = (void *)v7;
  result.value._rawValue = v23;
  result.is_nil = v13;
  return result;
}

uint64_t __SkyboxMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v2;
  result = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x800000021BE8B100);
  *(_QWORD *)a1 = result;
  return result;
}

void EnvironmentResource.LoadError.errorDescription.getter()
{
  __int128 *v0;
  _BYTE v1[8];
  _BYTE v2[40];

  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v1);
  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_21BC5683C()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v3;

  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  String.append(_:)(v3);
  v1._countAndFlagsBits = 0x6E7562206E692022;
  v1._object = (void *)0xEB00000000656C64;
  String.append(_:)(v1);
  return v0 + 18;
}

void sub_21BC56A94()
{
  type metadata accessor for CFErrorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
  Error.localizedDescription.getter();
  JUMPOUT(0x21BC56A74);
}

void sub_21BC56AE0()
{
  swift_bridgeObjectRetain();
  JUMPOUT(0x21BC56A74);
}

void protocol witness for LocalizedError.errorDescription.getter in conformance EnvironmentResource.LoadError()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v1);
  EnvironmentResource.LoadError.errorDescription.getter();
}

unint64_t EnvironmentResource.OptionError.errorDescription.getter(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  if (!a2)
    return 0xD00000000000002CLL;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x766E692073692022;
  v5._object = (void *)0xEC00000064696C61;
  String.append(_:)(v5);
  return 0xD000000000000012;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance EnvironmentResource.OptionError()
{
  uint64_t v0;

  return EnvironmentResource.OptionError.errorDescription.getter(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t EnvironmentResource.coreSkyboxAsset.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t EnvironmentResource.coreSkyboxAssetRef.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 24);
  return result;
}

uint64_t static EnvironmentResource.__compiledExtension.getter()
{
  return 0x657974696C616572;
}

uint64_t EnvironmentResource.deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 24))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  return v0;
}

uint64_t EnvironmentResource.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 24))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  return swift_deallocClassInstance();
}

uint64_t static EnvironmentResource.load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;

  v4 = specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(a1, a2, a3, 0);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = type metadata accessor for EnvironmentResource();
    *(_QWORD *)(inited + 64) = &protocol witness table for EnvironmentResource;
    *(_QWORD *)(inited + 32) = v4;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v4;
}

uint64_t static EnvironmentResource.load(named:in:allowsREIbl:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;

  v5 = specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(a1, a2, a3, a4);
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = type metadata accessor for EnvironmentResource();
    *(_QWORD *)(inited + 64) = &protocol witness table for EnvironmentResource;
    *(_QWORD *)(inited + 32) = v5;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v5;
}

unint64_t *static EnvironmentResource.__load(contentsOf:withName:)(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;

  if (URL.pathExtension.getter() == 0x657974696C616572 && v3 == 0xEA0000000000766ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      a1 = specialized static EnvironmentResource.importResourceInternal(contentsOf:options:)((uint64_t)a1, v6);
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  v5 = specialized static EnvironmentResource.loadCompiledResource(from:)((uint64_t)a1);
  if (!v1)
    return (unint64_t *)v5;
  return a1;
}

uint64_t static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t result;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;

  v63 = a1;
  v64 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  v8 = *(_QWORD *)(v61 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v57 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v58 = (char *)&v56 - v10;
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
    v15 = a3;
  else
    v15 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v16 = a3;
  v17 = specialized static __ServiceLocator.shared.getter();
  v18 = *(void **)(*(_QWORD *)(v17 + 168) + 16);
  swift_beginAccess();
  v19 = *(_QWORD *)(v17 + 24);
  swift_unownedRetainStrong();
  v20 = *(void **)(v19 + 32);
  swift_retain();
  v60 = v18;
  v21 = v20;
  swift_release();
  *v14 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BEE5610], v11);
  v22 = v21;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v19 & 1) != 0)
  {
    v24 = (void *)MEMORY[0x220768C3C](v63, v64);
    v25 = (void *)MEMORY[0x220768C3C](0x657974696C616572, 0xEA0000000000766ELL);
    v26 = v15;
    v27 = objc_msgSend(v15, sel_URLForResource_withExtension_, v24, v25);

    if (v27)
    {
      v28 = v57;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v30 = v61;
      v29 = v62;
      v31 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
      v31(v6, v28, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v6, 0, 1, v29);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v6, 1, v29) != 1)
      {
        v32 = v58;
        v31(v58, v6, v29);
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v28, v32, v29);
        v33 = *(unsigned __int8 *)(v30 + 80);
        v64 = v22;
        v34 = (v33 + 24) & ~v33;
        v35 = (v8 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
        v36 = swift_allocObject();
        *(_QWORD *)(v36 + 16) = v17;
        v31((char *)(v36 + v34), v28, v29);
        v37 = v60;
        *(_QWORD *)(v36 + v35) = v60;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
        v38 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<EnvironmentResource, Error>?>);
        v39 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
        v40 = swift_allocObject();
        *(_DWORD *)(v40 + 16) = 0;
        *(_QWORD *)(v39 + 16) = v40;
        *(_QWORD *)(v39 + 24) = 0;
        *(_BYTE *)(v39 + 32) = -1;
        *(_QWORD *)(v38 + 16) = v39;
        v41 = (_QWORD *)swift_allocObject();
        v41[2] = partial apply for closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:);
        v41[3] = v36;
        v41[4] = v39;
        v41[5] = 0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<EnvironmentResource, Error>);
        swift_allocObject();
        swift_retain();
        v42 = v37;
        swift_retain();
        *(_QWORD *)(v38 + 24) = Future.init(_:)();
        v43 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v58, v29);
        return v43;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v6, 1, 1, v62);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
    v44 = (_QWORD *)swift_allocObject();
    v45 = v60;
    v46 = v63;
    v47 = v64;
    v44[2] = v59;
    v44[3] = v46;
    v44[4] = v47;
    v44[5] = v26;
    v44[6] = v17;
    v44[7] = v22;
    v44[8] = v45;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
    v48 = v22;
    v49 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<EnvironmentResource, Error>?>);
    v50 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v51 = swift_allocObject();
    *(_DWORD *)(v51 + 16) = 0;
    *(_QWORD *)(v50 + 16) = v51;
    *(_QWORD *)(v50 + 24) = 0;
    *(_BYTE *)(v50 + 32) = -1;
    *(_QWORD *)(v49 + 16) = v50;
    v52 = (_QWORD *)swift_allocObject();
    v52[2] = partial apply for closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:);
    v52[3] = v44;
    v52[4] = v50;
    v52[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<EnvironmentResource, Error>);
    swift_allocObject();
    swift_retain();
    v53 = v45;
    v54 = v48;
    swift_bridgeObjectRetain();
    v55 = v26;
    swift_retain();
    *(_QWORD *)(v49 + 24) = Future.init(_:)();
    v43 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

    swift_release();
    swift_release();
    return v43;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v31 = a5;
  v25 = a2;
  v26 = a3;
  v27 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  v18 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v20 + v18, v16, v13);
  v21 = (_QWORD *)(v20 + v19);
  *v21 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v21[1] = v17;
  aBlock[4] = partial apply for doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_66_0;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v32 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v23 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v12, v9, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  return swift_release();
}

uint64_t doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24[11];
  char v25[8];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[32];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v18 = a3;
  v19 = a4;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v30, 0, 25);
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v30[25] = 1;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v25[0] = 1;
  swift_beginAccess();
  outlined init with copy of __REAssetService(a1 + 120, (uint64_t)&v20);
  v11 = *((_QWORD *)&v21 + 1);
  v10 = v22;
  __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
  v30[27] = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 56))(v11, v10) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  outlined init with copy of __REAssetService(a1 + 120, (uint64_t)&v20);
  v12 = *((_QWORD *)&v21 + 1);
  v13 = v22;
  __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
  v30[26] = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)v25, (uint64_t)&v20);
  swift_retain();
  __REAssetBundle.init(url:serviceLocator:_:)((uint64_t)v9, a1, (uint64_t)&v20, v24);
  swift_beginAccess();
  swift_unownedRetainStrong();
  outlined init with copy of __REAssetBundle((uint64_t)v24, (uint64_t)&v20);
  v14 = swift_allocObject();
  v15 = v21;
  *(_OWORD *)(v14 + 16) = v20;
  *(_OWORD *)(v14 + 32) = v15;
  v16 = v23;
  *(_OWORD *)(v14 + 48) = v22;
  *(_OWORD *)(v14 + 64) = v16;
  *(_QWORD *)(v14 + 80) = v18;
  *(_QWORD *)(v14 + 88) = v19;
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:), v14);
  swift_release();
  swift_release();
  outlined destroy of __REAssetBundle((uint64_t)v24);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v25);
}

void closure #1 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, void (*a2)(void *, uint64_t))
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4 < 2)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4 < 2)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      v5 = (void *)swift_allocError();
      *(_QWORD *)v6 = v4;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_BYTE *)(v6 + 32) = 4;
      a2(v5, 1);

      return;
    }
  }
  if ((v3 & 0xC000000000000001) == 0)
  {
    v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
    {
      if (v7 != 1)
      {
        v8 = *(_QWORD *)(v3 + 32);
        v9 = *(_QWORD *)(v3 + 40);
        swift_retain();
        swift_retain();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  v8 = MEMORY[0x220769770](0, v3);
  v9 = MEMORY[0x220769770](1, v3);
LABEL_9:
  swift_bridgeObjectRelease();
  v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)v24);
  v11 = v25;
  v12 = v26;
  __swift_project_boxed_opaque_existential_1(v24, v25);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  v13 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of __RenderService?(v13, (uint64_t)&v19);
  if (v20)
  {
    outlined init with take of BindableDataInternal(&v19, (uint64_t)v21);
    v14 = v22;
    v15 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
    REAssetManagerPostLoadProcessImageBasedLightAsset();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    v16 = *(_QWORD *)(v8 + 16);
    v17 = *(_QWORD *)(v9 + 16);
    type metadata accessor for EnvironmentResource();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 16) = v16;
    swift_beginAccess();
    *(_QWORD *)(v18 + 24) = v17;
    RERetain();
    REAssetSetSwiftObject();
    RERetain();
    REAssetSetSwiftObject();
    a2((void *)v18, 0);
    swift_release();
    swift_release();
    swift_release();
    return;
  }
LABEL_14:
  __break(1u);
}

void closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(void (*a1)(void **), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *aBlock;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  uint64_t (*v40)();
  _QWORD *v41;

  v30 = a7;
  v31 = a8;
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v34 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  v32 = *(_QWORD *)(v16 - 8);
  v33 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  swift_retain();
  v20 = specialized static EnvironmentResource.resolvedPath(forName:in:allowsREIbl:)(a4, a5, a6, 1);
  if (v21)
  {
    v22 = v20;
    v23 = v21;
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = v22;
    v24[3] = v23;
    v24[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v24[5] = v19;
    v24[6] = a4;
    v24[7] = a5;
    v25 = v31;
    v24[8] = v30;
    v24[9] = v25;
    v40 = partial apply for doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:);
    v41 = v24;
    aBlock = (void *)MEMORY[0x24BDAC760];
    v37 = 1107296256;
    v38 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v39 = &block_descriptor_82_1;
    v26 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    v27 = v25;
    static DispatchQoS.unspecified.getter();
    v35 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v18, v15, v26);
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v13);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v33);
    swift_release();
  }
  else
  {
    swift_release();
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    v28 = (void *)swift_allocError();
    *(_QWORD *)v29 = a4;
    *(_QWORD *)(v29 + 8) = a5;
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)(v29 + 24) = 0;
    *(_BYTE *)(v29 + 32) = 0;
    aBlock = v28;
    LOBYTE(v37) = 1;
    swift_bridgeObjectRetain();
    a1(&aBlock);

  }
}

void doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  void *v20;
  uint64_t v21;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v11 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v11, (uint64_t)v29);
  v13 = v30;
  v12 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v13, v12);
  v14 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of __RenderService?(v14, (uint64_t)&v24);
  if (v25)
  {
    outlined init with take of BindableDataInternal(&v24, (uint64_t)v26);
    v16 = v27;
    v15 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v16, v15);
    String.utf8CString.getter();
    v17 = REAssetManagerImageBasedLightMemoryAssetCreateFromReiblFileAsync();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    if (v17)
    {
      swift_beginAccess();
      swift_unownedRetainStrong();
      v18 = (_QWORD *)swift_allocObject();
      v18[2] = v17;
      v18[3] = a3;
      v18[4] = a4;
      v18[5] = a8;
      swift_retain();
      v19 = a8;
      __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:), (uint64_t)v18);
      swift_release();
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      v20 = (void *)swift_allocError();
      *(_QWORD *)v21 = a5;
      *(_QWORD *)(v21 + 8) = a6;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      *(_BYTE *)(v21 + 32) = 2;
      swift_bridgeObjectRetain();
      a3(v20, 1);

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  Swift::String v17;
  uint64_t FailedMessage;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t SkyboxTexture;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[7];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  RERetain();
  RERelease();
  REAssetHandleLoadNow();
  if (REAssetHandleLoadFailed())
  {
    v16 = (void *)REAssetCopyDescription();
    v17 = String.init(_:)(v16);
    v35 = a4;
    v37 = v12;
    FailedMessage = REAssetHandleCopyLoadFailedMessage();
    v33 = a2;
    v19 = (void *)FailedMessage;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v36 = v13;
    v21 = v20;
    v34 = v9;
    v23 = v22;

    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    v24 = (void *)swift_allocError();
    *(Swift::String *)v25 = v17;
    *(_QWORD *)(v25 + 16) = v21;
    *(_QWORD *)(v25 + 24) = v23;
    *(_BYTE *)(v25 + 32) = 1;
    swift_willThrow();
    RERelease();
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = v33;
    v26[3] = a3;
    v26[4] = v24;
    aBlock[4] = partial apply for closure #1 in closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:);
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_91;
    v27 = _Block_copy(aBlock);
    swift_retain();
    v28 = v24;
    static DispatchQoS.unspecified.getter();
    v38 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v15, v11, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
    return swift_release();
  }
  else
  {
    SkyboxTexture = REIBLAssetGetSkyboxTexture();
    type metadata accessor for EnvironmentResource();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 16) = a1;
    swift_beginAccess();
    *(_QWORD *)(v31 + 24) = SkyboxTexture;
    RERetain();
    REAssetSetSwiftObject();
    if (SkyboxTexture)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    a2(v31, 0);
    swift_release();
    return RERelease();
  }
}

void closure #2 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(void (*a1)(void *, uint64_t), int a2, id a3)
{
  id v4;
  CFIndex Code;
  void *v6;
  __CFError **v7;
  __CFError *err;

  v4 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for CFErrorRef(0);
  swift_dynamicCast();
  Code = CFErrorGetCode(err);
  if (Code == 300 || Code == 200)
  {
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    v6 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (Code != 100)
    {
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v6 = (void *)swift_allocError();
      *v7 = err;
      goto LABEL_8;
    }
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    v6 = (void *)swift_allocError();
    CancellationError.init()();
  }

LABEL_8:
  a1(v6, 1);

}

uint64_t static EnvironmentResource.defaultAR()()
{
  uint64_t v0;
  uint64_t inited;

  if (one-time initialization token for coreRE != -1)
    swift_once();
  v0 = specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(0xD000000000000016, 0x800000021BE8CAD0, (void *)static NSBundle.coreRE, 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for EnvironmentResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for EnvironmentResource;
  *(_QWORD *)(inited + 32) = v0;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v0;
}

uint64_t static EnvironmentResource.defaultObject()()
{
  uint64_t v0;
  uint64_t inited;

  if (one-time initialization token for coreRE != -1)
    swift_once();
  v0 = specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(0xD00000000000001ALL, 0x800000021BE8CB50, (void *)static NSBundle.coreRE, 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for EnvironmentResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for EnvironmentResource;
  *(_QWORD *)(inited + 32) = v0;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v0;
}

uint64_t static EnvironmentResource.generate(fromLatLong:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static EnvironmentResource.generate(fromEquirectangular:withName:)(a1, a2, a3);
}

uint64_t static EnvironmentResource.generate(fromEquirectangular:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static EnvironmentResource.generate(fromEquirectangular:withName:)(a1, a2, a3);
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  v4[7] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t static EnvironmentResource.generate(fromEquirectangular:withName:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v1 = v0[4];
  v2 = v0[5];
  v4 = (void *)v0[2];
  v3 = v0[3];
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  v5[5] = v1;
  swift_bridgeObjectRetain();
  v6 = v4;
  v7 = static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t)partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:), (uint64_t)v5, 0, 0);
  v0[9] = v7;
  swift_release();
  v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static EnvironmentResource.load<A>(_:)
                                        + async function pointer to specialized static EnvironmentResource.load<A>(_:));
  v8 = (_QWORD *)swift_task_alloc();
  v0[10] = v8;
  *v8 = v0;
  v8[1] = static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  return v10(v7);
}

uint64_t static EnvironmentResource.generateAsync(fromLatLong:withName:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  id v8;
  uint64_t v9;

  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  swift_bridgeObjectRetain();
  v8 = a1;
  v9 = static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t)partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:), (uint64_t)v7, 0, 0);
  swift_release();
  return v9;
}

uint64_t specialized static EnvironmentResource.load<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>);
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator);
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  v1[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[15] = v4;
  return swift_task_switch();
}

uint64_t specialized static EnvironmentResource.load<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v0[2] = v0[5];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<EnvironmentResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<EnvironmentResource>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  MEMORY[0x220768A08](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator, MEMORY[0x24BDB9D48]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = specialized static TextureResource.load<A>(_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(uint64_t a1)
{
  uint64_t SkyboxTexture;
  uint64_t v3;

  SkyboxTexture = REIBLAssetGetSkyboxTexture();
  type metadata accessor for EnvironmentResource();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = SkyboxTexture;
  RERetain();
  REAssetSetSwiftObject();
  if (SkyboxTexture)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v3;
}

uint64_t specialized closure #2 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(void (*a1)(uint64_t), uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v7;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  if (!a1
    || (v12 = swift_retain(),
        a1(v12),
        result = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a1),
        !v7))
  {
    if (!a3
      || (v14 = swift_retain(),
          a3(v14),
          result = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a3),
          !v7))
    {
      if (!a5)
        return a7();
      v15 = swift_retain();
      a5(v15);
      result = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a5);
      if (!v7)
        return a7();
    }
  }
  return result;
}

uint64_t static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a4;
  v29 = a3;
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = specialized static __ServiceLocator.shared.getter();
  v11 = *(void **)(*(_QWORD *)(v10 + 168) + 16);
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 24);
  swift_unownedRetainStrong();
  v13 = *(void **)(v12 + 32);
  swift_retain();
  v14 = v11;
  v15 = v13;
  swift_release();
  *v9 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5610], v6);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v15 & 1) != 0)
  {
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = a1;
    v18[3] = a2;
    v19 = v28;
    v20 = v29;
    v18[4] = v27;
    v18[5] = v20;
    v18[6] = v19;
    v18[7] = v10;
    v18[8] = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
    v21 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<EnvironmentResource, Error>?>);
    v22 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v23 = swift_allocObject();
    *(_DWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v22 + 16) = v23;
    *(_QWORD *)(v22 + 24) = 0;
    *(_BYTE *)(v22 + 32) = -1;
    *(_QWORD *)(v21 + 16) = v22;
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:);
    v24[3] = v18;
    v24[4] = v22;
    v24[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<EnvironmentResource, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v25 = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v21 + 24) = Future.init(_:)();
    v26 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
    swift_release();

    swift_release();
    return v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v32 = a9;
  v15 = type metadata accessor for DispatchWorkItemFlags();
  v31 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS();
  v29 = *(_QWORD *)(v18 - 8);
  v30 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a3;
  v22[3] = a4;
  v23 = v28;
  v22[4] = v27;
  v22[5] = v23;
  v22[6] = a7;
  v22[7] = a8;
  v22[8] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v22[9] = v21;
  aBlock[4] = partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_24;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v33 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v20, v17, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v15);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v30);
  return swift_release();
}

uint64_t doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v12 = a1();
  v13 = specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(v12, a4, a5);
  v15 = v14;
  swift_beginAccess();
  swift_unownedRetainStrong();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v13;
  v16[3] = v15;
  v16[4] = a7;
  v16[5] = a8;
  swift_retain();
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:), (uint64_t)v16);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t static EnvironmentResource.__fromAssets(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *a2;
  type metadata accessor for EnvironmentResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = v3;
  if (v2)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  if (v3)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v4;
}

uint64_t static EnvironmentResource.__exportCompiledResource(contentsOf:to:)(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = xmmword_21BE66FF0;
  v4 = 0;
  v6 = 0;
  v5 = 0;
  return specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(a1, a2, (uint64_t)&v3, 0);
}

uint64_t static EnvironmentResource.exportCompiledResource(contentsOf:to:for:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  int v4;
  char v5;
  __int128 v7;
  uint64_t v8;
  int v9;
  char v10;

  v3 = *((_QWORD *)a3 + 2);
  v4 = *((_DWORD *)a3 + 6);
  v5 = *((_BYTE *)a3 + 28);
  v7 = *a3;
  v8 = v3;
  v10 = v5;
  v9 = v4;
  return specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(a1, a2, (uint64_t)&v7, 0);
}

uint64_t static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(a1, a2, a3, a4);
}

uint64_t static EnvironmentResource.exportCompiledResource(contentsOf:to:for:compilationOptions:)(uint64_t a1, uint64_t a2, __int128 *a3, unint64_t a4)
{
  uint64_t v4;
  int v5;
  char v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;

  v4 = *((_QWORD *)a3 + 2);
  v5 = *((_DWORD *)a3 + 6);
  v6 = *((_BYTE *)a3 + 28);
  v8 = *a3;
  v9 = v4;
  v11 = v6;
  v10 = v5;
  return specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(a1, a2, (uint64_t)&v8, a4);
}

uint64_t EnvironmentResource.init(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>);
  v4[15] = v5;
  v4[16] = *(_QWORD *)(v5 - 8);
  v4[17] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator);
  v4[18] = v6;
  v4[19] = *(_QWORD *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = type metadata accessor for MainActor();
  v4[22] = static MainActor.shared.getter();
  return swift_task_switch();
}

uint64_t EnvironmentResource.init(named:in:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)v0[13];
  v3 = v0[11];
  v2 = (void *)v0[12];
  swift_release();
  v0[24] = static EnvironmentResource.loadAsyncPrivate(named:in:)(v3, v2, v1);
  swift_bridgeObjectRelease();
  v0[25] = dispatch thunk of Actor.unownedExecutor.getter();
  v0[26] = v4;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[16];
  v1 = v0[17];
  v3 = v0[15];
  v0[8] = v0[24];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<EnvironmentResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<EnvironmentResource>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  MEMORY[0x220768A08](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[27] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator, MEMORY[0x24BDB9D48]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[28] = v6;
  *v6 = v0;
  v6[1] = EnvironmentResource.init(named:in:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc();
  v3 = *(_QWORD *)(v2 + 216);
  if (v0)
  {
    if (v3)
      goto LABEL_5;
  }
  else if (v3)
  {
LABEL_5:
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 240) = *(_QWORD *)(v0 + 72);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v11;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 240);
    v3 = *(_QWORD *)(v2 + 16);
    swift_beginAccess();
    v4 = *(_QWORD *)(v2 + 24);
    type metadata accessor for EnvironmentResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 16) = v3;
    swift_beginAccess();
    *(_QWORD *)(v5 + 24) = v4;
    if (v3)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    if (v4)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    v7 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(void **)(v0 + 104);
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  else
  {
    v11 = *(void **)(v0 + 104);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 232);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(void **)(v0 + 104);
  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EnvironmentResource.skybox.getter()
{
  uint64_t v0;
  uint64_t SkyboxTexture;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  if (!*(_QWORD *)(v0 + 16) || (SkyboxTexture = REIBLAssetGetSkyboxTexture()) == 0)
  {
    v4 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4, (uint64_t)v6);
    v3 = closure #1 in static TextureResource.builtinTexture(named:)(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    return v3;
  }
  v2 = SkyboxTexture;
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_6;
  type metadata accessor for TextureResource();
  v3 = swift_dynamicCastClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
LABEL_6:
    type metadata accessor for TextureResource();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  return v3;
}

void EnvironmentResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t EnvironmentResource.addToLoadRequest(_:)()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 16))
    REAssetLoadRequestAddAsset();
  result = swift_beginAccess();
  if (*(_QWORD *)(v0 + 24))
    return REAssetLoadRequestAddAsset();
  return result;
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance EnvironmentResource()
{
  return EnvironmentResource.addToLoadRequest(_:)();
}

uint64_t EnvironmentResource.init(cube:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  objc_class *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  Swift::Int_optional v15;

  v4 = *(_QWORD *)(a2 + 8);
  specialized static EnvironmentResource.validate(cubeTexture:)();
  if (v2)
  {
    swift_release();
  }
  else
  {
    v15.value = 0;
    v15.is_nil = 1;
    v5 = (objc_class *)EnvironmentResource.CreateOptions.toCoreImageBasedLightCompilationOptions(skyboxCubeDimension:)(v15);
    v6 = (unint64_t)TextureResource.Compression.toCoreASTCOptions()();
    v7 = *(_QWORD *)(a1 + 16);
    RERetain();
    v8 = (uint64_t (*)(void))specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(v7, v5, v6);
    v9 = v8();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v11 = type metadata accessor for EnvironmentResource();
    *(_QWORD *)(inited + 32) = v9;
    *(_QWORD *)(inited + 56) = v11;
    *(_QWORD *)(inited + 64) = &protocol witness table for EnvironmentResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v9 + 16);
    swift_beginAccess();
    v14 = *(_QWORD *)(v9 + 24);
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 16) = v13;
    swift_beginAccess();
    *(_QWORD *)(v4 + 24) = v14;
    if (v13)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    if (v14)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    swift_release();
    swift_release();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v2;
  *(_WORD *)(v3 + 144) = *(_WORD *)a2;
  *(_BYTE *)(v3 + 146) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v3 + 147) = *(_BYTE *)(a2 + 16);
  type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 88) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 96) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 104) = v4;
  return swift_task_switch();
}

uint64_t EnvironmentResource.init(equirectangular:withName:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)((uint64_t)a1, a2, a3, 0, 4, 0, 0);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = (uint64_t (*)(void))specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(v7, 0, 0);
    v9 = v8();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v11 = type metadata accessor for EnvironmentResource();
    *(_QWORD *)(inited + 32) = v9;
    *(_QWORD *)(inited + 56) = v11;
    *(_QWORD *)(inited + 64) = &protocol witness table for EnvironmentResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    swift_release();
    v13 = *(_QWORD *)(v9 + 16);
    swift_beginAccess();
    v14 = *(_QWORD *)(v9 + 24);
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 16) = v13;
    swift_beginAccess();
    *(_QWORD *)(v4 + 24) = v14;
    if (v13)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    if (v14)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    swift_release();

  }
  return v4;
}

uint64_t EnvironmentResource.init(equirectangular:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  v4[13] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[14] = v5;
  return swift_task_switch();
}

uint64_t EnvironmentResource.init(equirectangular:withName:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v1 = v0[10];
  v2 = v0[11];
  v4 = (void *)v0[8];
  v3 = v0[9];
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  v5[5] = v1;
  swift_bridgeObjectRetain();
  v6 = v4;
  v7 = static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t)partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:), (uint64_t)v5, 0, 0);
  v0[15] = v7;
  swift_release();
  swift_bridgeObjectRelease();
  v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static EnvironmentResource.load<A>(_:)
                                        + async function pointer to specialized static EnvironmentResource.load<A>(_:));
  v8 = (_QWORD *)swift_task_alloc();
  v0[16] = v8;
  *v8 = v0;
  v8[1] = EnvironmentResource.init(equirectangular:withName:);
  return v10(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release();
  v2 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  type metadata accessor for EnvironmentResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = v3;
  if (v2)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  if (v3)
  {
    RERetain();
    REAssetSetSwiftObject();
  }

  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EnvironmentResource.init(equirectangular:withName:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 136) = a1;
  *(_QWORD *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t EnvironmentResource.init(cube:options:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);
  Swift::Int_optional v8;

  specialized static EnvironmentResource.validate(cubeTexture:)();
  v1 = v0[8];
  v8.value = 0;
  v8.is_nil = 1;
  v2 = (unint64_t)EnvironmentResource.CreateOptions.toCoreImageBasedLightCompilationOptions(skyboxCubeDimension:)(v8);
  v3 = (unint64_t)TextureResource.Compression.toCoreASTCOptions()();
  swift_retain();
  v4 = static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t)partial apply for closure #1 in EnvironmentResource.init(cube:options:), v1, v2, v3);
  v0[14] = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static EnvironmentResource.load<A>(_:)
                                       + async function pointer to specialized static EnvironmentResource.load<A>(_:));
  v5 = (_QWORD *)swift_task_alloc();
  v0[15] = v5;
  *v5 = v0;
  v5[1] = EnvironmentResource.init(cube:options:);
  return v7(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release();
  v2 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  type metadata accessor for EnvironmentResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = v3;
  if (v2)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  if (v3)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  swift_release();
  swift_release_n();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;

  swift_release_n();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EnvironmentResource.init(cube:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

BOOL static EnvironmentResource.CreateOptions.SamplingQuality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void EnvironmentResource.CreateOptions.SamplingQuality.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int EnvironmentResource.CreateOptions.SamplingQuality.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void EnvironmentResource.CreateOptions.compression.getter(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

_WORD *EnvironmentResource.CreateOptions.compression.setter(_WORD *result)
{
  _WORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*EnvironmentResource.CreateOptions.compression.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void EnvironmentResource.CreateOptions.samplingQuality.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *EnvironmentResource.CreateOptions.samplingQuality.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*EnvironmentResource.CreateOptions.samplingQuality.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t EnvironmentResource.CreateOptions.specularCubeDimension.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t EnvironmentResource.CreateOptions.specularCubeDimension.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*EnvironmentResource.CreateOptions.specularCubeDimension.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void EnvironmentResource.CreateOptions.hash(into:)()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 2);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((unsigned __int8 *)v0 + 16);
  v5 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v5 = 0;
  }
  else if ((_DWORD)v5 == 5)
  {
    v5 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
}

Swift::Int EnvironmentResource.CreateOptions.hashValue.getter()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 2);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)();
  v5 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v5 = 0;
  }
  else if ((_DWORD)v5 == 5)
  {
    v5 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EnvironmentResource.CreateOptions()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 2);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((unsigned __int8 *)v0 + 16);
  v5 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v5 = 0;
  }
  else if ((_DWORD)v5 == 5)
  {
    v5 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EnvironmentResource.CreateOptions()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 2);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)();
  v5 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v5 = 0;
  }
  else if ((_DWORD)v5 == 5)
  {
    v5 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t __SkyboxMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t __SkyboxMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t __SkyboxMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*__SkyboxMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v4 = v2;
  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(isStackAllocationSafe + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = a2((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2)
      swift_willThrow();
    else
      return v9;
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v4 = a2((char *)v10, v7, v5);
    MEMORY[0x220772F44](v10, -1, -1);
  }
  return v4;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t *v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _BYTE v23[32];
  int64_t v24;

  v19 = (unint64_t *)result;
  v20 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v24 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_5;
    }
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v24)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v24)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
      v15 = *(_QWORD *)(v5 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v24)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
        v15 = *(_QWORD *)(v5 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v10, (uint64_t)v23);
    v21[0] = v13;
    v21[1] = v12;
    outlined init with copy of Any((uint64_t)v23, (uint64_t)&v22);
    swift_bridgeObjectRetain_n();
    LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    result = swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      *(unint64_t *)((char *)v19 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v24)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v24)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t *v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _BYTE v23[32];
  int64_t v24;

  v19 = (unint64_t *)result;
  v20 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v24 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_5;
    }
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v24)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v24)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
      v15 = *(_QWORD *)(v5 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v24)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
        v15 = *(_QWORD *)(v5 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v10, (uint64_t)v23);
    v21[0] = v13;
    v21[1] = v12;
    outlined init with copy of Any((uint64_t)v23, (uint64_t)&v22);
    swift_bridgeObjectRetain_n();
    LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    result = swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      *(unint64_t *)((char *)v19 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v24)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v24)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized static EnvironmentResource.CreateOptions.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  int v9;
  char v11;

  v2 = *a1;
  v3 = *((unsigned __int8 *)a1 + 2);
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a1 + 16);
  v6 = *a2;
  v7 = v2 >> 8;
  if (v2 >> 8 == 4)
  {
    result = 0;
    if ((v6 & 0xFF00) != 0x400)
      return result;
    goto LABEL_13;
  }
  if (v7 == 5)
  {
    result = 0;
    if ((v6 & 0xFF00) != 0x500)
      return result;
LABEL_13:
    if (((v3 ^ *((unsigned __int8 *)a2 + 2)) & 1) == 0)
    {
      if ((v5 & 1) != 0)
      {
        if ((a2[8] & 1) == 0)
          return 0;
      }
      else
      {
        if (v4 == *((_QWORD *)a2 + 1))
          v11 = *((_BYTE *)a2 + 16);
        else
          v11 = 1;
        if ((v11 & 1) != 0)
          return 0;
      }
      return 1;
    }
    return result;
  }
  if ((v6 & 0xFE00) == 0x400)
    return 0;
  result = 0;
  v9 = (v6 ^ v2);
  if (v7 == v6 >> 8 && v9 == 0)
    goto LABEL_13;
  return result;
}

BOOL specialized static EnvironmentResource.areEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (v5)
      v6 = v4 == v5;
    else
      v6 = 0;
    if (!v6)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v8 = *(_QWORD *)(a2 + 24);
  result = (v7 | v8) == 0;
  if (v7)
  {
    if (v8)
      return v7 == v8;
    else
      return v7 == 0;
  }
  return result;
}

uint64_t specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSDictionary v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t TextureAssetFromData;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v10 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  v11 = RETextureImportOperationCreateWithCGImage();
  RETextureImportOperationSetSemantic();
  RETextureImportOperationSetMipmapMode();
  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  if ((a7 & 1) != 0)
    RETextureImportOperationSetCompressionType();
  v38 = 0;
  if (!RETextureImportOperationCreateAssetData())
  {
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v16._countAndFlagsBits = 0xD00000000000002FLL;
    v16._object = (void *)0x800000021BE8CBF0;
    String.append(_:)(v16);
    v17._countAndFlagsBits = MEMORY[0x2207697B8](v11);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._object = (void *)0x800000021BE8CC20;
    v18._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v18);
    TextureAssetFromData = 0xE000000000000000;
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)(v29 + 24) = 0;
    *(_BYTE *)(v29 + 32) = 6;
    swift_willThrow();
    goto LABEL_17;
  }
  v37 = 0;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v10 + 40, (uint64_t)&v31);
  if (v32)
  {
    outlined init with take of BindableDataInternal(&v31, (uint64_t)&v33);
    v13 = v35;
    v14 = v36;
    __swift_project_boxed_opaque_existential_1(&v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    if (a4)
      v15.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    else
      v15.super.isa = 0;
    v20 = RECreateCubeTextureDataFromLatLong();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    if (v20)
    {
      swift_beginAccess();
      outlined init with copy of __REAssetService(v10 + 120, (uint64_t)&v33);
      v21 = v35;
      v22 = v36;
      __swift_project_boxed_opaque_existential_1(&v33, v35);
      (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
      TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      RERelease();
      RERelease();
      RERelease();
      swift_release();
      return TextureAssetFromData;
    }
    v23 = v37;
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v24._countAndFlagsBits = 0xD000000000000022;
    v24._object = (void *)0x800000021BE8CC40;
    String.append(_:)(v24);
    v25._countAndFlagsBits = MEMORY[0x2207697B8](v11);
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._object = (void *)0x800000021BE8CC20;
    v26._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v26);
    TextureAssetFromData = v34;
    if (v23)
    {
      v27 = v23;
      swift_bridgeObjectRelease();
      TextureAssetFromData = 0;
      v28 = 5;
    }
    else
    {
      v23 = v33;
      v28 = 6;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_QWORD *)v30 = v23;
    *(_QWORD *)(v30 + 8) = TextureAssetFromData;
    *(_QWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v30 + 24) = 0;
    *(_BYTE *)(v30 + 32) = v28;
    swift_willThrow();
    RERelease();
LABEL_17:
    RERelease();
    swift_release();
    return TextureAssetFromData;
  }
  __break(1u);
  return result;
}

uint64_t specialized static EnvironmentResource.resolvedPath(forName:in:allowsREIbl:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
    v12 = a3;
  else
    v12 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v13 = a3;
  v14 = (void *)MEMORY[0x220768C3C](a1, a2);
  v15 = objc_msgSend(v12, sel_pathForResource_ofType_, v14, 0);

  if ((a4 & 1) != 0)
  {
    if (v15)
    {
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v28 = (void *)MEMORY[0x220768C3C](a1, a2);
      v29 = (void *)MEMORY[0x220768C3C](0x6C62696572, 0xE500000000000000);
      v30 = objc_msgSend(v12, sel_pathForResource_ofType_, v28, v29);

      if (v30)
      {
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      else
      {

        return 0;
      }
    }
    return v16;
  }
  v36 = v8;
  if (v15
    || (v17 = (void *)MEMORY[0x220768C3C](a1, a2),
        v18 = (void *)MEMORY[0x220768C3C](0x786F62796B73, 0xE600000000000000),
        v15 = objc_msgSend(v12, sel_pathForResource_ofType_, v17, v18),
        v17,
        v18,
        v15))
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

  }
  else
  {
    v16 = 0;
    v20 = 0;
  }
  v21 = (void *)MEMORY[0x220768C3C](a1, a2);
  v22 = objc_msgSend(v12, sel_pathForResource_ofType_, v21, 0);

  if (!v22)
  {
    v23 = (void *)MEMORY[0x220768C3C](a1, a2);
    v24 = (void *)MEMORY[0x220768C3C](0x6C62696572, 0xE500000000000000);
    v22 = objc_msgSend(v12, sel_pathForResource_ofType_, v23, v24);

    if (!v22)
    {
      if (v20)
        goto LABEL_13;
      v25 = 0;
      goto LABEL_23;
    }
  }
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  if (v20)
  {
LABEL_13:
    swift_bridgeObjectRelease();

    return v16;
  }
  if (!v27)
  {
LABEL_23:

    return v25;
  }
  Logger.init(subsystem:category:)();
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_21B9AA000, v31, v32, "Using .reibl files is not supported publicly in RealityKit anymore. Please use EnvironmentResource.loadAllowREIbl to load .reibl files for internal useage.", v33, 2u);
    MEMORY[0x220772F44](v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v36);
  return v25;
}

uint64_t specialized static EnvironmentResource.loadCompiledResource(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  if (URL.pathExtension.getter() == 0x657974696C616572 && v3 == 0xEA0000000000766ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      a1 = URL.pathExtension.getter();
      v10 = v9;
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      swift_allocError();
      *(_QWORD *)v11 = a1;
      *(_QWORD *)(v11 + 8) = v10;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_BYTE *)(v11 + 32) = 3;
      swift_willThrow();
      return a1;
    }
  }
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v28);
  memset(v25, 0, sizeof(v25));
  LOBYTE(v23) = 2;
  static __REAssetBundle.__init(url:assetService:materialDefinition:with:)(a1, v28, (char *)&v23, &v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  if (v1)
    return a1;
  a1 = v32;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v6 = result;
    if (result < 2)
      goto LABEL_8;
  }
  else
  {
    v6 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6 < 2)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      swift_allocError();
      *(_QWORD *)v8 = v6;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_BYTE *)(v8 + 32) = 4;
      swift_willThrow();
      outlined destroy of __REAssetBundle((uint64_t)&v31);
      return a1;
    }
  }
  if ((a1 & 0xC000000000000001) == 0)
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
      if (v12 != 1)
      {
        v13 = *(_QWORD *)(a1 + 32);
        v14 = *(_QWORD *)(a1 + 40);
        swift_retain();
        swift_retain();
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  v13 = MEMORY[0x220769770](0, a1);
  v14 = MEMORY[0x220769770](1, a1);
LABEL_16:
  swift_bridgeObjectRelease();
  v15 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v15, (uint64_t)v28);
  v16 = v29;
  v17 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
  v18 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v18, (uint64_t)&v23);
  if (v24)
  {
    outlined init with take of BindableDataInternal(&v23, (uint64_t)v25);
    v19 = v26;
    v20 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    REAssetManagerPostLoadProcessImageBasedLightAsset();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    v21 = *(_QWORD *)(v13 + 16);
    v22 = *(_QWORD *)(v14 + 16);
    type metadata accessor for EnvironmentResource();
    a1 = swift_allocObject();
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    swift_beginAccess();
    *(_QWORD *)(a1 + 24) = v22;
    RERetain();
    REAssetSetSwiftObject();
    RERetain();
    REAssetSetSwiftObject();
    swift_release();
    swift_release();
    outlined destroy of __REAssetBundle((uint64_t)&v31);
    return a1;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized static EnvironmentResource.getCubeMapData(coreTexture:options:source:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t TextureType;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[2];
  _QWORD *v44;
  int v45;
  uint64_t v46;
  NSObject *v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TextureType = RETextureAssetDataGetTextureType();
  if (TextureType != 2)
  {
    if (TextureType == 5)
    {
      v10 = (void *)*MEMORY[0x24BE26240];
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(_QWORD *)(a2 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v13, (uint64_t)&v50);
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v51 + 1))
        {
          outlined destroy of BodyTrackingComponent?((uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_18:
          Logger.init(subsystem:category:)();
          v32 = Logger.logObject.getter();
          v33 = static os_log_type_t.error.getter();
          v34 = v33;
          v47 = v32;
          if (os_log_type_enabled(v32, v33))
          {
            v35 = swift_slowAlloc();
            v45 = v34;
            v36 = v35;
            v37 = (_QWORD *)swift_slowAlloc();
            v44 = v37;
            *(_DWORD *)v36 = 138412546;
            v46 = v36 + 4;
            v43[1] = v36 + 12;
            *(_QWORD *)&v50 = v10;
            v38 = v10;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v37 = v10;
            *(_WORD *)(v36 + 12) = 2112;
            v46 = v2;
            *(_QWORD *)&v50 = *MEMORY[0x24BE26248];
            v39 = v50;
            v40 = (id)v50;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v41 = v44;
            v44[1] = v39;
            _os_log_impl(&dword_21B9AA000, v47, (os_log_type_t)v45, "Options %@ and %@ only apply when creating a cube map from a 2D lat/long texture source. They are not applicable for cube map sources and will be ignored.", (uint8_t *)v36, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x220772F44](v41, -1, -1);
            MEMORY[0x220772F44](v36, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_21:
          RERetain();
          return (uint64_t)a1;
        }
      }
      else
      {
        v50 = 0u;
        v51 = 0u;
        swift_bridgeObjectRelease();
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(_QWORD *)(a2 + 16) && (v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v30 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v29, (uint64_t)&v50);
      }
      else
      {
        v50 = 0u;
        v51 = 0u;
      }
      swift_bridgeObjectRelease();
      v31 = *((_QWORD *)&v51 + 1);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (!v31)
        goto LABEL_21;
      goto LABEL_18;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_OWORD *)v26 = 0u;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_BYTE *)(v26 + 32) = 7;
LABEL_24:
    swift_willThrow();
    return (uint64_t)a1;
  }
  v15 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v15, (uint64_t)&v48);
  if (v49)
  {
    outlined init with take of BindableDataInternal(&v48, (uint64_t)&v50);
    v17 = *((_QWORD *)&v51 + 1);
    v18 = v52;
    __swift_project_boxed_opaque_existential_1(&v50, *((uint64_t *)&v51 + 1));
    (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
    *(_QWORD *)&v48 = 0;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    a1 = (void *)RECreateCubeTextureDataFromLatLong();

    if (a1)
      return (uint64_t)a1;
    a1 = (void *)v48;
    *(_QWORD *)&v50 = 0;
    *((_QWORD *)&v50 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v20._countAndFlagsBits = 0xD000000000000022;
    v20._object = (void *)0x800000021BE8CC40;
    String.append(_:)(v20);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0xD00000000000001ALL;
    v22._object = (void *)0x800000021BE8CC20;
    String.append(_:)(v22);
    v23 = *((_QWORD *)&v50 + 1);
    if (a1)
    {
      v24 = a1;
      swift_bridgeObjectRelease();
      v23 = 0;
      v25 = 5;
    }
    else
    {
      a1 = (void *)v50;
      v25 = 6;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_QWORD *)v42 = a1;
    *(_QWORD *)(v42 + 8) = v23;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_BYTE *)(v42 + 32) = v25;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t specialized static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t SkyboxTexture;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t SpecularTexture;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t (*v20)();
  uint64_t DiffuseTexture;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = partial apply for closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:);
  if (!a2)
    return (uint64_t)v6;
  v7 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v7, (uint64_t)&v27);
  if (v28)
  {
    outlined init with take of BindableDataInternal(&v27, (uint64_t)v29);
    v9 = v30;
    v10 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    SkyboxTexture = REIBLAssetGetSkyboxTexture();
    if (SkyboxTexture)
    {
      v12 = SkyboxTexture;
      type metadata accessor for TextureResource();
      v13 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(v12, a2);
      if (v2)
        goto LABEL_10;
      v15 = (uint64_t)v13;
      v16 = v14;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    type metadata accessor for TextureResource();
    SpecularTexture = REIBLAssetGetSpecularTexture();
    v18 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(SpecularTexture, a2);
    if (!v2)
    {
      v20 = v18;
      v32 = v19;
      DiffuseTexture = REIBLAssetGetDiffuseTexture();
      v22 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(DiffuseTexture, a2);
      v24 = v23;
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v15;
      v25[3] = v16;
      v26 = v32;
      v25[4] = v20;
      v25[5] = v26;
      v25[8] = partial apply for closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:);
      v25[9] = v5;
      v6 = partial apply for specialized closure #2 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:);
      v25[6] = v22;
      v25[7] = v24;
      return (uint64_t)v6;
    }
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
LABEL_10:
    swift_release();
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

uint64_t specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(uint64_t a1, Class isa, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v4 = v3;
  v29 = *MEMORY[0x24BDAC8D0];
  v7 = specialized static __ServiceLocator.shared.getter();
  v28 = 0;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7 + 120, (uint64_t)v25);
  v8 = v26;
  v9 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 32);
  swift_retain();
  v10(v8, v9);
  swift_beginAccess();
  outlined init with copy of __RenderService?(v7 + 40, (uint64_t)&v20);
  if (!v21)
    __break(1u);
  outlined init with take of BindableDataInternal(&v20, (uint64_t)v22);
  v11 = v23;
  v12 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13 = REAssetManagerImageBasedLightCreateWithCubeMapNullableAsync();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  if (!v13)
  {
    v4 = (uint64_t)v28;
    if (v28)
    {
      v15 = v28;
      v16 = 0;
      v17 = 5;
    }
    else
    {
      v16 = 0x800000021BE8CC70;
      v17 = 6;
      v4 = 0xD000000000000052;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_QWORD *)v18 = v4;
    *(_QWORD *)(v18 + 8) = v16;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_BYTE *)(v18 + 32) = v17;
    swift_willThrow();
    goto LABEL_11;
  }
  v14 = specialized static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(v13, a3);
  if (v4)
  {
LABEL_11:
    RERelease();
    swift_release();
    return v4;
  }
  v4 = v14;
  RERelease();
  swift_release();
  return v4;
}

unint64_t *specialized static EnvironmentResource.importResourceInternal(contentsOf:options:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  void *v17;
  uint64_t AssetData;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t **v23;
  id v24;
  unint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TextureAssetFromData;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  unint64_t *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  v56 = *MEMORY[0x24BDAC8D0];
  v47 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  RETextureImportOperationCreateWithURL();

  RETextureImportOperationSetSemantic();
  if (a2)
    v12 = a2;
  else
    v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v48 = v12;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;
  swift_bridgeObjectRetain();
  v16 = &v48;
  specialized Dictionary._Variant.removeValue(forKey:)(v13, v15, &v54);
  swift_bridgeObjectRelease();
  if (v55)
  {
    outlined init with take of Any(&v54, &v51);
    outlined init with copy of Any((uint64_t)&v51, (uint64_t)&v54);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      v16 = (unint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v21;
      lazy protocol witness table accessor for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError();
      swift_allocError();
      *v23 = v16;
      v23[1] = v22;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
      goto LABEL_21;
    }
    v16 = v50;
    v17 = (void *)MEMORY[0x220768C3C](v49, v50);
    swift_bridgeObjectRelease();
    RETextureImportOperationSetColorSpaceName();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v54, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v49 = 0;
  AssetData = RETextureImportOperationCreateAssetData();
  if (!AssetData)
  {
    swift_bridgeObjectRelease();
    v24 = v49;
    if (v49)
    {
      type metadata accessor for CFErrorRef(0);
      v16 = v25;
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v26 = swift_allocError();
      *v27 = v24;
      v28 = a1;
      v29 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v28, v47);
      if (v26)
      {
LABEL_20:
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v29);
        swift_willThrow();
        goto LABEL_21;
      }
    }
    else
    {
      v39 = a1;
      v29 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v39, v47);
    }
    v16 = (unint64_t *)URL.absoluteString.getter();
    v41 = v40;
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_QWORD *)v42 = v16;
    *(_QWORD *)(v42 + 8) = v41;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_BYTE *)(v42 + 32) = 2;
    goto LABEL_20;
  }
  v19 = (void *)AssetData;
  if (v49)

  v20 = v48;
  swift_bridgeObjectRetain();
  specialized static EnvironmentResource.getCubeMapData(coreTexture:options:source:)(v19, v20);
  if (v3)
  {
    swift_bridgeObjectRelease_n();
    RERelease();
LABEL_21:
    RERelease();
    return v16;
  }
  swift_bridgeObjectRelease();
  v30 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v30, (uint64_t)&v51);
  v31 = v52;
  v32 = v53;
  __swift_project_boxed_opaque_existential_1(&v51, v52);
  (*(void (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
  v34 = swift_bridgeObjectRetain();
  v35 = specialized _NativeDictionary.filter(_:)(v34, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
  swift_bridgeObjectRelease();
  v36 = swift_bridgeObjectRetain();
  v37 = (objc_class *)specialized _NativeDictionary.filter(_:)(v36, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
  swift_bridgeObjectRelease_n();
  v38 = (uint64_t (*)(void))specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(TextureAssetFromData, v37, v35);
  v16 = (unint64_t *)v38();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v44 = type metadata accessor for EnvironmentResource();
  *(_QWORD *)(inited + 32) = v16;
  v47 = inited + 32;
  *(_QWORD *)(inited + 56) = v44;
  *(_QWORD *)(inited + 64) = &protocol witness table for EnvironmentResource;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  swift_release();
  swift_release();
  RERelease();
  RERelease();
  RERelease();
  return v16;
}

uint64_t specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *FailedMessage;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t SkyboxTexture;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v58 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v56 = (char *)&v55 - v16;
  v57 = v4;
  if (a3)
    v17 = a3;
  else
    v17 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v18 = a3;
  v67 = a1;
  v19 = a1;
  v20 = a2;
  v21 = (void *)MEMORY[0x220768C3C](v19, a2);
  v22 = (void *)MEMORY[0x220768C3C](0x657974696C616572, 0xEA0000000000766ELL);
  v23 = v17;
  v24 = objc_msgSend(v17, sel_URLForResource_withExtension_, v21, v22);

  if (v24)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v25 = *(void (**)(void))(v12 + 32);
    ((void (*)(char *, char *, uint64_t))v25)(v10, v14, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      v26 = (uint64_t)v56;
      v25();
      v28 = v23;
      if (URL.pathExtension.getter() == 0x657974696C616572 && v27 == 0xEA0000000000766ELL)
      {
        swift_bridgeObjectRelease();
        FailedMessage = v57;
      }
      else
      {
        v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        FailedMessage = v57;
        if ((v50 & 1) == 0)
        {
          v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
          v54 = specialized static EnvironmentResource.importResourceInternal(contentsOf:options:)(v26, v53);
          if (FailedMessage)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            FailedMessage = v54;
            swift_bridgeObjectRelease();
          }
          goto LABEL_28;
        }
      }
      v51 = specialized static EnvironmentResource.loadCompiledResource(from:)(v26);
      if (!FailedMessage)
        FailedMessage = (_QWORD *)v51;
LABEL_28:
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v26, v11);
      goto LABEL_29;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  v28 = v23;
  v30 = v23;
  v31 = v67;
  FailedMessage = (_QWORD *)v20;
  specialized static EnvironmentResource.resolvedPath(forName:in:allowsREIbl:)(v67, v20, v28, v58 & 1);
  v33 = v32;

  if (!v33)
  {
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_QWORD *)v48 = v31;
    *(_QWORD *)(v48 + 8) = v20;
    *(_QWORD *)(v48 + 16) = 0;
    *(_QWORD *)(v48 + 24) = 0;
    *(_BYTE *)(v48 + 32) = 0;
LABEL_17:
    swift_bridgeObjectRetain();
    swift_willThrow();
LABEL_29:

    return (uint64_t)FailedMessage;
  }
  v34 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v34, (uint64_t)v64);
  v35 = v65;
  v36 = v66;
  __swift_project_boxed_opaque_existential_1(v64, v65);
  (*(void (**)(uint64_t, uint64_t))(v36 + 32))(v35, v36);
  v37 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v37, (uint64_t)&v59);
  if (v60)
  {
    outlined init with take of BindableDataInternal(&v59, (uint64_t)v61);
    v39 = v62;
    v40 = v63;
    __swift_project_boxed_opaque_existential_1(v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v40 + 24))(v39, v40);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v41 = REAssetManagerImageBasedLightMemoryAssetCreateFromReiblFileAsync();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    if (v41)
    {
      RERetain();
      RERelease();
      REAssetHandleLoadNow();
      if (REAssetHandleLoadFailed())
      {
        v42 = (void *)REAssetCopyDescription();
        v43 = String.init(_:)(v42);
        FailedMessage = (_QWORD *)REAssetHandleCopyLoadFailedMessage();
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v46 = v45;

        lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
        swift_allocError();
        *(Swift::String *)v47 = v43;
        *(_QWORD *)(v47 + 16) = v44;
        *(_QWORD *)(v47 + 24) = v46;
        *(_BYTE *)(v47 + 32) = 1;
        swift_willThrow();
        RERelease();
      }
      else
      {
        SkyboxTexture = REIBLAssetGetSkyboxTexture();
        type metadata accessor for EnvironmentResource();
        FailedMessage = (_QWORD *)swift_allocObject();
        FailedMessage[3] = 0;
        FailedMessage[2] = v41;
        swift_beginAccess();
        FailedMessage[3] = SkyboxTexture;
        RERetain();
        REAssetSetSwiftObject();
        if (SkyboxTexture)
        {
          RERetain();
          REAssetSetSwiftObject();
        }
        RERelease();
      }
      goto LABEL_29;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_QWORD *)v49 = v67;
    *(_QWORD *)(v49 + 8) = FailedMessage;
    *(_QWORD *)(v49 + 16) = 0;
    *(_QWORD *)(v49 + 24) = 0;
    *(_BYTE *)(v49 + 32) = 2;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for EnvironmentResource()
{
  return objc_opt_self();
}

uint64_t specialized static EnvironmentResource.generate(fromEquirectangular:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t inited;
  uint64_t v8;

  v5 = specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)(a1, a2, a3, 0, 4, 0, 0);
  if (!v3)
  {
    v6 = (uint64_t (*)(void))specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(v5, 0, 0);
    v4 = v6();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v8 = type metadata accessor for EnvironmentResource();
    *(_QWORD *)(inited + 32) = v4;
    *(_QWORD *)(inited + 56) = v8;
    *(_QWORD *)(inited + 64) = &protocol witness table for EnvironmentResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    swift_release();
  }
  return v4;
}

uint64_t partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:)()
{
  return partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:)();
}

{
  uint64_t *v0;

  return specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)(v0[3], v0[4], v0[5], 0, 4, 0, 0);
}

uint64_t specialized static EnvironmentResource.validate(cubeTexture:)()
{
  uint64_t result;
  uint64_t v1;
  _QWORD *v2;

  if (RETextureAssetGetSemantic() - 3 >= 2)
  {
    lazy protocol witness table accessor for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError();
    swift_allocError();
    *v2 = 0;
    v2[1] = 0;
  }
  else
  {
    result = RETextureAssetGetTextureType();
    if (result == 5)
      return result;
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_BYTE *)(v1 + 32) = 7;
  }
  return swift_willThrow();
}

uint64_t specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  __int128 v48[8];
  _OWORD v49[2];
  char v50;
  char v51;
  char v52;
  uint64_t v53[8];
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE v61[73];
  _QWORD v62[6];
  uint64_t v63;

  v7 = *(_QWORD *)(a3 + 16);
  v27 = *(_QWORD *)a3;
  v28 = *(_QWORD *)(a3 + 8);
  v8 = *(unsigned __int8 *)(a3 + 28);
  v9 = *(unsigned int *)(a3 + 24);
  v63 = a2;
  if (URL.pathExtension.getter() == 0x657974696C616572 && v10 == 0xEA0000000000766ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v23 = URL.pathExtension.getter();
      v25 = v24;
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      swift_allocError();
      *(_QWORD *)v26 = v23;
      *(_QWORD *)(v26 + 8) = v25;
      *(_QWORD *)(v26 + 16) = 0;
      *(_QWORD *)(v26 + 24) = 0;
      *(_BYTE *)(v26 + 32) = 3;
      return swift_willThrow();
    }
  }
  result = (uint64_t)specialized static EnvironmentResource.importResourceInternal(contentsOf:options:)(a1, a4);
  if (!v4)
  {
    v13 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE6A0B0;
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = result;
      v16 = MEMORY[0x24BEE27D0];
      v56 = MEMORY[0x24BEE27D0];
      *(_QWORD *)&v54 = v14;
      outlined init with copy of Any((uint64_t)&v54, (uint64_t)v48);
      swift_dynamicCast();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      RERetain();
      type metadata accessor for __REAsset();
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v29[0];
      *(_QWORD *)(v15 + 32) = v17;
      result = swift_beginAccess();
      v18 = *(_QWORD *)(v13 + 24);
      if (v18)
      {
        v62[3] = v16;
        v62[0] = v18;
        outlined init with copy of Any((uint64_t)v62, (uint64_t)v48);
        swift_dynamicCast();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
        RERetain();
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = v29[0];
        *(_QWORD *)(v15 + 40) = v19;
        *(_QWORD *)&v48[0] = v15;
        specialized Array._endMutation()();
        v20 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v20, (uint64_t)v48);
        outlined init with copy of __REAssetService((uint64_t)v48, (uint64_t)v29);
        v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v22 = swift_bridgeObjectRetain();
        __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v22, (uint64_t)v29, v21, 0, v53);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
        swift_bridgeObjectRelease();
        v52 = 0;
        v51 = 1;
        v50 = 1;
        LOBYTE(v54) = 2;
        *((_QWORD *)&v54 + 1) = 1;
        LOBYTE(v55) = 0;
        v56 = 0;
        LODWORD(v57) = 16777217;
        *((_QWORD *)&v57 + 1) = v27;
        *(_QWORD *)&v58 = v28;
        *((_QWORD *)&v58 + 1) = v7;
        BYTE4(v59) = (v9 | (unint64_t)(v8 << 32)) >> 32;
        LODWORD(v59) = v9;
        v60 = 0;
        *(_WORD *)v61 = 1;
        memset(&v61[8], 0, 64);
        v61[72] = 1;
        *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)&v61[57];
        v48[2] = v57;
        v48[3] = v58;
        v48[4] = v59;
        v48[5] = *(_OWORD *)v61;
        v48[6] = *(_OWORD *)&v61[16];
        v48[7] = *(_OWORD *)&v61[32];
        v49[0] = *(_OWORD *)&v61[48];
        v48[0] = v54;
        v48[1] = v55;
        outlined copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v27, v28);
        outlined retain of __REAssetBundle.ExportOptions((uint64_t)&v54);
        __REAssetBundle.writeWithCPlusPlus(to:with:)(v63, v48);
        swift_release();
        outlined release of __REAssetBundle.ExportOptions((uint64_t)&v54);
        outlined destroy of __REAssetBundle((uint64_t)v53);
        LOBYTE(v29[0]) = 2;
        v29[1] = 1;
        v30 = v52;
        v31 = 0;
        v32 = 1;
        v33 = 0;
        v34 = v51;
        v35 = v27;
        v36 = v28;
        v37 = v7;
        v39 = (v9 | (unint64_t)(v8 << 32)) >> 32;
        v38 = v9;
        v40 = 0;
        v41 = v50;
        v42 = 0;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v47 = 1;
        return outlined release of __REAssetBundle.ExportOptions((uint64_t)v29);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EnvironmentResource.init(cube:options:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  RERetain();
  return v1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentResource.CreateOptions.SamplingQuality and conformance EnvironmentResource.CreateOptions.SamplingQuality()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions.SamplingQuality and conformance EnvironmentResource.CreateOptions.SamplingQuality;
  if (!lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions.SamplingQuality and conformance EnvironmentResource.CreateOptions.SamplingQuality)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EnvironmentResource.CreateOptions.SamplingQuality, &type metadata for EnvironmentResource.CreateOptions.SamplingQuality);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions.SamplingQuality and conformance EnvironmentResource.CreateOptions.SamplingQuality);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentResource.CreateOptions and conformance EnvironmentResource.CreateOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions and conformance EnvironmentResource.CreateOptions;
  if (!lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions and conformance EnvironmentResource.CreateOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EnvironmentResource.CreateOptions, &type metadata for EnvironmentResource.CreateOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions and conformance EnvironmentResource.CreateOptions);
  }
  return result;
}

uint64_t sub_21BC5DF6C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return result;
}

uint64_t sub_21BC5DFB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  return result;
}

uint64_t method lookup function for EnvironmentResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAsset.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAsset.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of EnvironmentResource.coreIBLAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAssetRef.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t getEnumTagSinglePayload for EnvironmentResource.CreateOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 2);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentResource.CreateOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 2) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentResource.CreateOptions()
{
  return &type metadata for EnvironmentResource.CreateOptions;
}

uint64_t storeEnumTagSinglePayload for EnvironmentResource.CreateOptions.SamplingQuality(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC5E11C + 4 * byte_21BE69DCD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC5E150 + 4 * byte_21BE69DC8[v4]))();
}

uint64_t sub_21BC5E150(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC5E158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC5E160);
  return result;
}

uint64_t sub_21BC5E16C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC5E174);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC5E178(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC5E180(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentResource.CreateOptions.SamplingQuality()
{
  return &type metadata for EnvironmentResource.CreateOptions.SamplingQuality;
}

ValueMetadata *type metadata accessor for __SkyboxMaterial()
{
  return &type metadata for __SkyboxMaterial;
}

unint64_t lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError;
  if (!lazy protocol witness table cache variable for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EnvironmentResource.LoadError, &unk_24DFC06B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError);
  }
  return result;
}

uint64_t sub_21BC5E1F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)()
{
  uint64_t v0;

  return closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_21BC5E218()
{
  _QWORD *v0;

  if (v0[2])
    swift_release();
  if (v0[4])
    swift_release();
  if (v0[6])
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)()
{
  uint64_t v0;

  return specialized closure #2 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56), *(uint64_t (**)(void))(v0 + 64));
}

unint64_t lazy protocol witness table accessor for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError;
  if (!lazy protocol witness table cache variable for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EnvironmentResource.OptionError, &unk_24DFC0628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError);
  }
  return result;
}

uint64_t outlined retain of __REAssetBundle.ExportOptions(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  v5 = *(id *)(a1 + 24);
  outlined copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21BC5E39C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(a1, a2, closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:));
}

uint64_t _s10RealityKit11LoadRequestC_12dependenciesACyxGyys6ResultOyxs5Error_pGcc_0A10Foundation0cD12DependenciesCSgtcfcyyAIccfU_AA19EnvironmentResourceC_Tg5TA_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_21BC5E3FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BC5E420()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)()
{
  return partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:));
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t sub_21BC5E48C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BC5E4B8()
{
  id *v0;

  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:));
}

uint64_t partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8]);
}

uint64_t sub_21BC5E540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BC5E638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_21BC5E718()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  uint64_t v0;

  closure #1 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(v0 + 16, *(void (**)(void *, uint64_t))(v0 + 80));
}

uint64_t sub_21BC5E768()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  return partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:));
}

uint64_t partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_21BC5E7D0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  uint64_t v0;

  return closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD, _QWORD))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t objectdestroy_38Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  uint64_t v0;

  closure #2 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32));
}

void *type metadata accessor for EnvironmentResource.OptionError()
{
  return &unk_24DFC0628;
}

id outlined copy of EnvironmentResource.LoadError(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 2:
    case 3:
    case 6:
      goto LABEL_2;
    case 1:
      swift_bridgeObjectRetain();
LABEL_2:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 5:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

void destroy for EnvironmentResource.LoadError(uint64_t a1)
{
  outlined consume of EnvironmentResource.LoadError(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

void outlined consume of EnvironmentResource.LoadError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 2:
    case 3:
    case 6:
      goto LABEL_2;
    case 1:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      break;
    case 5:

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for EnvironmentResource.LoadError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of EnvironmentResource.LoadError(*(id *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for EnvironmentResource.LoadError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of EnvironmentResource.LoadError(*(id *)a2, v4, v5, v6, v7);
  v8 = *(void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of EnvironmentResource.LoadError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for EnvironmentResource.LoadError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of EnvironmentResource.LoadError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentResource.LoadError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentResource.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for EnvironmentResource.LoadError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 6u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t destructiveInjectEnumTag for EnvironmentResource.LoadError(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 7;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

void *type metadata accessor for EnvironmentResource.LoadError()
{
  return &unk_24DFC06B8;
}

uint64_t static Reverb.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 11)
  {
    if (v3 == 11)
      return 1;
  }
  else if (v2 == 10)
  {
    if (v3 == 10)
      return 1;
  }
  else if (v2 == v3 && (v3 & 0xFE) != 10)
  {
    return 1;
  }
  return 0;
}

void Reverb.Preset.init(core:)(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  switch(a1)
  {
    case 201:
      v3 = 1;
      break;
    case 202:
      v3 = 2;
      break;
    case 203:
      v3 = 3;
      break;
    case 204:
      v3 = 4;
      break;
    case 205:
      v3 = 5;
      break;
    case 206:
      v3 = 6;
      break;
    case 207:
      v3 = 8;
      break;
    case 208:
      v3 = 7;
      break;
    case 209:
      v3 = 9;
      break;
    default:
      if (a1 == 101)
      {
        v3 = 0;
      }
      else
      {
        if (one-time initialization token for audio != -1)
          swift_once();
        v4 = type metadata accessor for Logger();
        __swift_project_value_buffer(v4, (uint64_t)static Logger.audio);
        v5 = Logger.logObject.getter();
        v6 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v5, v6))
        {
          v7 = (uint8_t *)swift_slowAlloc();
          v8 = swift_slowAlloc();
          v11 = v8;
          *(_DWORD *)v7 = 136315138;
          type metadata accessor for REAudioReverbPreset(0);
          v9 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_21B9AA000, v5, v6, "Unknown REAudioReverbPreset case: %s", v7, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x220772F44](v8, -1, -1);
          MEMORY[0x220772F44](v7, -1, -1);
        }

        v3 = 10;
      }
      break;
  }
  *a2 = v3;
}

_BYTE *static Reverb.preset(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t Reverb.Preset.core.getter()
{
  char *v0;
  unint64_t v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *v0;
  if (v1 < 0xA)
    return qword_21BE6A2C0[v1];
  if (one-time initialization token for audio != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.audio);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v10 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v4, v5, "Unknown reverb preset case: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v7, -1, -1);
    MEMORY[0x220772F44](v6, -1, -1);
  }

  return 100;
}

void static Reverb.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

void static Reverb.anechoic.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Reverb.Kind(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 11)
    return v3 == 11;
  if (v2 == 10)
    return v3 == 10;
  if ((v3 & 0xFE) == 0xA)
    return 0;
  return v2 == v3;
}

void Reverb.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((_DWORD)v1 == 10)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 11)
  {
    v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int Reverb.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 == 10)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 11)
  {
    v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static Reverb.Preset.outside.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Reverb.Preset.concertHall.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Reverb.Preset.veryLargeRoom.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Reverb.Preset.largeRoom.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Reverb.Preset.largeRoomTreated.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Reverb.Preset.mediumRoomDry.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static Reverb.Preset.smallRoomBright.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static Reverb.Preset.verySmallRoomBright.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static Reverb.Preset.listeningRoom.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static Reverb.Preset.livingRoom.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void Reverb.Preset.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Reverb.Preset.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Reverb.Preset.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Reverb and conformance Reverb()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Reverb and conformance Reverb;
  if (!lazy protocol witness table cache variable for type Reverb and conformance Reverb)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Reverb, &type metadata for Reverb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Reverb and conformance Reverb);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Reverb.Preset and conformance Reverb.Preset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Reverb.Preset and conformance Reverb.Preset;
  if (!lazy protocol witness table cache variable for type Reverb.Preset and conformance Reverb.Preset)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Reverb.Preset, &type metadata for Reverb.Preset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Reverb.Preset and conformance Reverb.Preset);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Reverb(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_21BC5F254 + 4 * byte_21BE6A0DE[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_21BC5F288 + 4 * byte_21BE6A0D9[v4]))();
}

uint64_t sub_21BC5F288(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC5F290(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC5F298);
  return result;
}

uint64_t sub_21BC5F2A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC5F2ACLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_21BC5F2B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC5F2B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Reverb()
{
  return &type metadata for Reverb;
}

ValueMetadata *type metadata accessor for Reverb.Preset()
{
  return &type metadata for Reverb.Preset;
}

uint64_t storeEnumTagSinglePayload for Reverb.Preset(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_21BC5F338 + 4 * byte_21BE6A0E8[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_21BC5F36C + 4 * byte_21BE6A0E3[v4]))();
}

uint64_t sub_21BC5F36C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC5F374(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC5F37CLL);
  return result;
}

uint64_t sub_21BC5F388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC5F390);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_21BC5F394(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC5F39C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Reverb.Preset.Kind()
{
  return &type metadata for Reverb.Preset.Kind;
}

uint64_t getEnumTagSinglePayload for Reverb.Kind(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
  {
    v6 = *a1;
    if (v6 >= 0xA)
      v7 = v6 - 9;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 11;
    if (a2 + 11 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21BC5F408 + 4 * byte_21BE6A0ED[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for Reverb.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 11;
  if (a3 + 11 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF5)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_21BC5F4B4 + 4 * byte_21BE6A0F7[v5]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_21BC5F4E8 + 4 * byte_21BE6A0F2[v5]))();
}

uint64_t sub_21BC5F4E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC5F4F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC5F4F8);
  return result;
}

uint64_t sub_21BC5F504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC5F50CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_21BC5F510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC5F518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for Reverb.Kind(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 0xA)
    return v1 - 9;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for Reverb.Kind(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 9;
  return result;
}

ValueMetadata *type metadata accessor for Reverb.Kind()
{
  return &type metadata for Reverb.Kind;
}

unint64_t lazy protocol witness table accessor for type Reverb.Kind and conformance Reverb.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Reverb.Kind and conformance Reverb.Kind;
  if (!lazy protocol witness table cache variable for type Reverb.Kind and conformance Reverb.Kind)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Reverb.Kind, &type metadata for Reverb.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Reverb.Kind and conformance Reverb.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Reverb.Preset.Kind and conformance Reverb.Preset.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Reverb.Preset.Kind and conformance Reverb.Preset.Kind;
  if (!lazy protocol witness table cache variable for type Reverb.Preset.Kind and conformance Reverb.Preset.Kind)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Reverb.Preset.Kind, &type metadata for Reverb.Preset.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Reverb.Preset.Kind and conformance Reverb.Preset.Kind);
  }
  return result;
}

Swift::Void __swiftcall Entity.generateCollisionShapes(recursive:)(Swift::Bool recursive)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Child;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  if (dynamic_cast_existential_2_conditional(v1))
  {
    swift_retain();
    HasCollision.collision.getter(v25);
    v3 = v25[0];
    swift_bridgeObjectRelease();
    if (!v3)
      HasModel.__generateCollisionShape(isStatic:)(0);
    swift_release();
  }
  if (recursive)
  {
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_41:
      swift_release();
    }
    else
    {
      v4 = 0;
      while (v4 < REEntityGetChildCount())
      {
        Child = REEntityGetChild();
        if (!Child)
          goto LABEL_46;
        v6 = Child;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
            goto LABEL_45;
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent())
            goto LABEL_38;
          Object = RECustomComponentGetObject();
          if (!Object)
            goto LABEL_38;
          v8 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v9 = 1;
          else
            v9 = v8 == 0;
          if (v9)
          {
            swift_retain();
          }
          else
          {
            v10 = *v8;
            v11 = String.init(utf8String:)();
            if (v12)
              v13 = v11;
            else
              v13 = 0;
            if (v12)
              v14 = v12;
            else
              v14 = 0xE000000000000000;
            v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(_QWORD *)(swift_allocObject() + 16) = v8;
          }
          if (!v8)
            goto LABEL_47;
          swift_retain();
          v15 = String.init(utf8String:)();
          v17 = v16;
          swift_release();
          v18 = v17 ? v15 : 0;
          v19 = v17 ? v17 : 0xE000000000000000;
          v20 = (NSString *)MEMORY[0x220768C3C](v18, v19);
          swift_bridgeObjectRelease();
          v21 = NSClassFromString(v20);

          swift_release();
          if (!v21)
            goto LABEL_38;
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          v22 = swift_dynamicCastMetatype();
          if (v22)
          {
            v23 = (*(uint64_t (**)(void))(v22 + 232))();
            v24 = *(_QWORD *)(v23 + 16);
            swift_retain();
            MEMORY[0x22076D160](v24, 0);
            *(_QWORD *)(v23 + 16) = v6;
            MEMORY[0x22076D160](v6, v23);
            swift_release();
          }
          else
          {
LABEL_38:
            makeEntity(for:)(v6);
          }
        }
        if (v4 >= REEntityGetChildCount())
          goto LABEL_44;
        ++v4;
        Entity.generateCollisionShapes(recursive:)(1);
        swift_release();
        if (v4 >= REEntityGetChildCount())
          goto LABEL_41;
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
    }
  }
}

uint64_t specialized Entity.ChildCollection.IndexingIterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >= REEntityGetChildCount())
    return 0;
  result = Entity.ChildCollection.subscript.getter(v1);
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    result = REEntityGetChildCount();
    if (v1 < result)
    {
      *(_QWORD *)(v0 + 8) = v1 + 1;
      return v3;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall HasModel.__generateCollisionShape()()
{
  HasModel.__generateCollisionShape(isStatic:)(0);
}

Swift::Void __swiftcall Entity.generateCollisionShapes(recursive:static:)(Swift::Bool recursive, Swift::Bool a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t Child;
  uint64_t v8;
  uint64_t Object;
  unsigned __int8 *v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSString *v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];

  if (dynamic_cast_existential_2_conditional(v2))
  {
    swift_retain();
    HasCollision.collision.getter(v27);
    v5 = v27[0];
    swift_bridgeObjectRelease();
    if (!v5)
      HasModel.__generateCollisionShape(isStatic:)(a2);
    swift_release();
  }
  if (recursive)
  {
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_41:
      swift_release();
    }
    else
    {
      v6 = 0;
      while (v6 < REEntityGetChildCount())
      {
        Child = REEntityGetChild();
        if (!Child)
          goto LABEL_46;
        v8 = Child;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
            goto LABEL_45;
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent())
            goto LABEL_38;
          Object = RECustomComponentGetObject();
          if (!Object)
            goto LABEL_38;
          v10 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v11 = 1;
          else
            v11 = v10 == 0;
          if (v11)
          {
            swift_retain();
          }
          else
          {
            v12 = *v10;
            v13 = String.init(utf8String:)();
            if (v14)
              v15 = v13;
            else
              v15 = 0;
            if (v14)
              v16 = v14;
            else
              v16 = 0xE000000000000000;
            v10 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v12 == 42, v15, v16);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(_QWORD *)(swift_allocObject() + 16) = v10;
          }
          if (!v10)
            goto LABEL_47;
          swift_retain();
          v17 = String.init(utf8String:)();
          v19 = v18;
          swift_release();
          v20 = v19 ? v17 : 0;
          v21 = v19 ? v19 : 0xE000000000000000;
          v22 = (NSString *)MEMORY[0x220768C3C](v20, v21);
          swift_bridgeObjectRelease();
          v23 = NSClassFromString(v22);

          swift_release();
          if (!v23)
            goto LABEL_38;
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          v24 = swift_dynamicCastMetatype();
          if (v24)
          {
            v25 = (*(uint64_t (**)(void))(v24 + 232))();
            v26 = *(_QWORD *)(v25 + 16);
            swift_retain();
            MEMORY[0x22076D160](v26, 0);
            *(_QWORD *)(v25 + 16) = v8;
            MEMORY[0x22076D160](v8, v25);
            swift_release();
          }
          else
          {
LABEL_38:
            makeEntity(for:)(v8);
          }
        }
        if (v6 >= REEntityGetChildCount())
          goto LABEL_44;
        ++v6;
        Entity.generateCollisionShapes(recursive:static:)(1, a2);
        swift_release();
        if (v6 >= REEntityGetChildCount())
          goto LABEL_41;
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
    }
  }
}

Swift::Void __swiftcall HasModel.__generateCollisionShape(isStatic:)(Swift::Bool isStatic)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  float v6;
  float v7;
  float v8;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16[3];

  v2 = v1;
  if (!dynamic_cast_existential_2_conditional(v1))
    return;
  swift_retain();
  HasCollision.collision.getter(v16);
  v4 = v16[0];
  swift_bridgeObjectRelease();
  if (v4)
  {
    __break(1u);
LABEL_20:
    v15 = v5;
    swift_once();
    v5 = v15;
    goto LABEL_13;
  }
  HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)(0, v2);
  if (REAABBIsEmpty())
  {
    swift_release();
    return;
  }
  REAABBExtents();
  if (v8 < 0.0001 && v6 < 0.0001 && v7 < 0.0001)
  {
    v12 = specialized static ShapeResource.generateSphere(radius:)();
    goto LABEL_15;
  }
  specialized static ShapeResource.generateBox(size:)();
  REAABBCenter();
  v5 = v11;
  if (one-time initialization token for identity != -1)
    goto LABEL_20;
LABEL_13:
  v12 = ShapeResource.offsetBy(rotation:translation:)((__n128)static simd_quatf.identity, v5);
  swift_release();
LABEL_15:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v13 + 32) = v12;
  v16[0] = v13;
  specialized Array._endMutation()();
  v14 = 0x100000000;
  if (!isStatic)
    v14 = 0;
  v16[1] = v14;
  v16[2] = 0xFFFFFFFF00000001;
  swift_retain();
  HasCollision.collision.setter(v16);
  swift_release();
  swift_release();
}

_QWORD *Scene.__allocating_init(name:addSystemsCallback:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t active;
  uint64_t v8;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v4 = RESceneCreate();
  swift_release();
  a3(v4);
  type metadata accessor for Scene();
  v5 = (_QWORD *)swift_allocObject();
  Scene.init(coreScene:)(v4);
  swift_retain();
  RERelease();
  MEMORY[0x22076FC98](v4, 1);
  Scene.addDefaultCamera()();
  if (!v5[12])
  {
    type metadata accessor for Entity();
    swift_allocObject();
    v6 = Entity.init()();
    REEntitySetName();
    RENetworkMarkEntityMetadataDirty();
    Entity.turnIntoNinja()();
    REAudioMixerComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneAddEntity();
    v5[12] = v6;
    swift_release();
  }
  swift_beginAccess();
  v5[9] = 0;
  swift_release();
  active = v5[9];
  if (!active)
    active = Scene.internalActiveCamera.getter();
  v8 = v5[10];
  v5[10] = active;
  swift_retain();
  swift_retain();
  Scene.internalAudioListener.didset(v8);
  swift_release();
  swift_release();
  swift_release();
  return v5;
}

uint64_t static Scene.fromCore(_:)(uint64_t a1)
{
  id v2;
  uint64_t v4;

  v2 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v2)
    return swift_dynamicCastClassUnconditional();
  v4 = swift_allocObject();
  Scene.init(coreScene:)(a1);
  return v4;
}

uint64_t one-time initialization function for pickingEmitter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssetHandle;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[32];
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v8);
  v1 = v9;
  v2 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  AssetHandle = REAssetManagerCreateAssetHandle();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (AssetHandle)
  {
    v9 = MEMORY[0x24BEE27D0];
    v8[0] = AssetHandle;
    outlined init with copy of Any((uint64_t)v8, (uint64_t)v7);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    RERetain();
    type metadata accessor for __REAsset();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v6;
    type metadata accessor for __RERenderGraphEmitter();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    pickingEmitter = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t pickingEmitter.getter()
{
  if (one-time initialization token for pickingEmitter != -1)
    swift_once();
  return swift_retain();
}

uint64_t Scene.coreScene.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Scene.session.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x22077301C](v0 + 64);
}

void Scene.session.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

void (*Scene.session.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x22077301C](v1 + 64);
  return Scene.session.modify;
}

void Scene.session.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

  }
  free(v3);
}

uint64_t Scene.name.getter()
{
  RESceneGetName();
  return String.init(cString:)();
}

uint64_t Scene.__audioListener.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t Scene.__audioListener.setter(uint64_t a1)
{
  specialized Scene.__audioListener.setter(a1);
  return swift_release();
}

uint64_t (*Scene.__audioListener.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return Scene.__audioListener.modify;
}

uint64_t Scene.__audioListener.modify(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t active;
  uint64_t v7;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(v5 + 72))
    {
      active = *(_QWORD *)(v5 + 72);
    }
    else
    {
      active = Scene.internalActiveCamera.getter();
      v5 = *(_QWORD *)(a1 + 24);
    }
    v7 = *(_QWORD *)(v5 + 80);
    *(_QWORD *)(v5 + 80) = active;
    swift_retain();
    swift_retain();
    Scene.internalAudioListener.didset(v7);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t Scene.internalAudioListener.didset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 80);
  if (result)
  {
    if (!v2 || *(_QWORD *)(result + 16) != *(_QWORD *)(v2 + 16))
    {
      swift_retain();
      REListenerComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REListenerComponentSetSystemListener();
        REListenerComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      result = swift_release();
      if (*(_QWORD *)(v1 + 80))
        goto LABEL_10;
    }
  }
  else if (v2)
  {
LABEL_10:
    swift_retain();
    REListenerComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    REListenerComponentSetSystemListener();
    return swift_release();
  }
  return result;
}

AUAudioUnit_optional __swiftcall Scene.__addPostProcessingAudioEffect(_:)(AudioComponentDescription a1)
{
  objc_class *v1;
  Swift::Bool v2;
  AUAudioUnit_optional result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  REEngineGetServiceLocator();
  if (REServiceLocatorGetAudioService())
  {
    v1 = (objc_class *)(id)REAudioServiceInsertPostProcessingEffect();
  }
  else
  {
    v1 = (objc_class *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result.value.super.isa = v1;
  result.is_nil = v2;
  return result;
}

uint64_t key path setter for Scene.defaultCamera : Scene(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 88) = v2;
  swift_retain();
  return swift_release();
}

uint64_t Scene.defaultCamera.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t Scene.defaultCamera.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t Scene.internalActiveCamera.getter()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;

  result = swift_weakLoadStrong();
  if (!result)
  {
    result = closure #1 in Scene.internalActiveCamera.getter(54, (uint64_t)v0);
    if (!result)
    {
      result = closure #1 in Scene.internalActiveCamera.getter(55, (uint64_t)v0);
      if (!result)
      {
        result = closure #1 in Scene.internalActiveCamera.getter(56, (uint64_t)v0);
        if (!result)
        {
          swift_beginAccess();
          if (!v0[9])
          {
            swift_beginAccess();
            v2 = v0[10];
            v0[10] = v0[11];
            swift_retain_n();
            Scene.internalAudioListener.didset(v2);
            swift_release();
            swift_release();
          }
          swift_beginAccess();
          return swift_retain();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in Scene.internalActiveCamera.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Entity;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSString *v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int IsAuthoritative;
  int ShouldAlwaysMigrate;
  uint64_t v31;
  int IsOwnershipLocked;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  result = RESceneGetComponentsOfType();
  if (v4 < 0)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    return result;
  }
  v5 = v4;
  if (!v4)
    return 0;
  v6 = result;
  v36 = a2;
  v7 = a2 + 88;
  result = swift_beginAccess();
  while (1)
  {
    if (!v5)
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    Entity = REComponentGetEntity();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v9 = swift_dynamicCastClassUnconditional();
LABEL_36:
      v27 = v9;
      goto LABEL_37;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      goto LABEL_53;
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
      swift_once();
    swift_beginAccess();
    if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v10 & 1) == 0))
    {
      swift_endAccess();
      v11 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v37 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v37;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent())
      goto LABEL_35;
    Object = RECustomComponentGetObject();
    if (!Object)
      goto LABEL_35;
    v14 = *(unsigned __int8 **)Object;
    if (*(_QWORD *)(Object + 8) || !v14)
    {
      result = swift_retain();
    }
    else
    {
      v15 = *v14;
      v16 = String.init(utf8String:)();
      if (v17)
        v18 = v16;
      else
        v18 = 0;
      if (v17)
        v19 = v17;
      else
        v19 = 0xE000000000000000;
      v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v14;
    }
    if (!v14)
      goto LABEL_55;
    swift_retain();
    v20 = String.init(utf8String:)();
    v22 = v21;
    swift_release();
    if (v22)
      v23 = v20;
    else
      v23 = 0;
    if (!v22)
      v22 = 0xE000000000000000;
    v24 = (NSString *)MEMORY[0x220768C3C](v23, v22);
    swift_bridgeObjectRelease();
    v25 = NSClassFromString(v24);

    swift_release();
    if (!v25
      || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (v26 = swift_dynamicCastMetatype()) == 0))
    {
LABEL_35:
      v9 = makeEntity(for:)(Entity);
      goto LABEL_36;
    }
    v27 = (*(uint64_t (**)(void))(v26 + 232))();
    v28 = *(_QWORD *)(v27 + 16);
    swift_retain();
    MEMORY[0x22076D160](v28, 0);
    *(_QWORD *)(v27 + 16) = Entity;
    MEMORY[0x22076D160](Entity, v27);
    swift_release();
LABEL_37:
    if ((REEntityIsActive() & 1) == 0 || *(_QWORD *)v7 && *(_QWORD *)(v27 + 16) == *(_QWORD *)(*(_QWORD *)v7 + 16))
      goto LABEL_4;
    swift_retain();
    if (!REEntityGetComponent())
      break;
    IsAuthoritative = RENetworkComponentIsAuthoritative();
    ShouldAlwaysMigrate = RENetworkComponentShouldAlwaysMigrate();
    v31 = RENetworkComponentGuid();
    IsOwnershipLocked = RENetworkComponentIsOwnershipLocked();
    swift_release();
    v33 = 0x10000;
    if (!IsOwnershipLocked)
      v33 = 0;
    v34 = 256;
    if (!ShouldAlwaysMigrate)
      v34 = 0;
    outlined consume of SynchronizationComponent?(v31, v34 | IsAuthoritative | v33, 0, 1);
    if ((IsAuthoritative & 1) != 0)
      goto LABEL_50;
LABEL_4:
    result = swift_release();
    v6 += 8;
    if (!--v5)
      return 0;
  }
  swift_release();
LABEL_50:
  swift_beginAccess();
  if (!*(_QWORD *)(v36 + 72))
  {
    v35 = *(_QWORD *)(v36 + 80);
    *(_QWORD *)(v36 + 80) = v27;
    swift_retain_n();
    Scene.internalAudioListener.didset(v35);
    swift_release();
    swift_release();
  }
  return v27;
}

uint64_t Scene.__entities.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_retain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  v2 = specialized _arrayForceCast<A, B>(_:)(v1);
  swift_release();
  return v2;
}

uint64_t Scene.anchors.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t Scene.anchors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(v1 + 16);
  result = swift_release();
  if (v2 != v3)
    __break(1u);
  return result;
}

BOOL static Scene.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t (*Scene.anchors.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  swift_retain();
  return destroy for __ImageBasedLightComponent;
}

uint64_t Scene.addAnchor(_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized Scene.addAnchor(_:)(a1, v1);
}

uint64_t Scene.removeAnchor(_:)()
{
  swift_retain();
  specialized Scene.AnchorCollection.remove(_:)();
  return swift_release();
}

uint64_t Scene.eventService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t EventBus;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];
  __int128 v10;
  uint64_t v11;
  _UNKNOWN **v12;

  v3 = v1 + 120;
  swift_beginAccess();
  outlined init with copy of EventService?(v1 + 120, (uint64_t)&v10);
  if (!v11)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v10, &demangling cache variable for type metadata for EventService?);
    EventBus = RESceneGetEventBus();
    v5 = type metadata accessor for REEventBus();
    v6 = swift_allocObject();
    v7 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v6 + 16) = EventBus;
    *(_QWORD *)(v6 + 24) = v7;
    RERetain();
    REEventBusSetSwiftObject();
    v11 = v5;
    v12 = &protocol witness table for REEventBus;
    *(_QWORD *)&v10 = v6;
    outlined init with copy of __REAssetService((uint64_t)&v10, (uint64_t)v9);
    swift_beginAccess();
    outlined assign with take of Material?((uint64_t)v9, v3, &demangling cache variable for type metadata for EventService?);
    swift_endAccess();
  }
  return outlined init with take of BindableDataInternal(&v10, a1);
}

uint64_t Scene.engineEventService.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t EventBus;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (RESceneGetECSManagerNullable()
    && (ServiceLocator = REECSManagerGetServiceLocator(), MEMORY[0x22076FD94](ServiceLocator)))
  {
    EventBus = REEngineGetEventBus();
    v4 = type metadata accessor for REEventBus();
    v5 = swift_allocObject();
    v6 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v5 + 16) = EventBus;
    *(_QWORD *)(v5 + 24) = v6;
    RERetain();
    result = REEventBusSetSwiftObject();
    a1[3] = v4;
    a1[4] = (uint64_t)&protocol witness table for REEventBus;
    *a1 = v5;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Scene.applyReverbPreset(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = v0;
  if (*(_QWORD *)(v0 + 104))
    goto LABEL_3;
  type metadata accessor for Entity();
  swift_allocObject();
  v2 = Entity.init()();
  REEntitySetName();
  RENetworkMarkEntityMetadataDirty();
  Entity.turnIntoNinja()();
  REReverbComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RESceneAddEntity();
  REReverbComponentSetPriority();
  *(_QWORD *)(v1 + 104) = v2;
  result = swift_release();
  if (*(_QWORD *)(v1 + 104))
  {
LABEL_3:
    swift_retain();
    REReverbComponentGetComponentType();
    if (REEntityGetComponentByClass())
      REReverbComponentSetReverbPreset();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall Scene.setReverbPresetPriority(_:)(Swift::UInt16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1;
  if (*(_QWORD *)(v1 + 104))
    goto LABEL_3;
  type metadata accessor for Entity();
  swift_allocObject();
  v3 = Entity.init()();
  REEntitySetName();
  RENetworkMarkEntityMetadataDirty();
  Entity.turnIntoNinja()();
  REReverbComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RESceneAddEntity();
  REReverbComponentSetPriority();
  *(_QWORD *)(v2 + 104) = v3;
  swift_release();
  if (*(_QWORD *)(v2 + 104))
  {
LABEL_3:
    swift_retain();
    REReverbComponentGetComponentType();
    if (REEntityGetComponentByClass())
      REReverbComponentSetPriority();
    swift_release();
  }
}

Swift::Void __swiftcall Scene.addDefaultCamera()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _BYTE v20[64];
  _QWORD v21[4];
  __int128 v22;
  char v23;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (_OWORD *)((char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16);
  type metadata accessor for Entity();
  swift_allocObject();
  v5 = Entity.init()();
  v6 = (uint64_t *)(v0 + 88);
  swift_beginAccess();
  *v6 = v5;
  swift_release();
  if (!*v6)
  {
    __break(1u);
    goto LABEL_15;
  }
  swift_retain();
  REEntitySetName();
  RENetworkMarkEntityMetadataDirty();
  swift_release();
  if (!*v6)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  swift_retain_n();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v18);
  v7 = v18[0];
  v8 = v18[1];
  v9 = v18[2];
  v10 = v18[3];
  v12 = v18[4];
  v11 = HIDWORD(v19);
  swift_release();
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v20);
  if ((v20[48] & 1) != 0)
  {
    if (one-time initialization token for identity != -1)
      swift_once();
    v8 = *((_QWORD *)&static Transform.identity + 1);
    v7 = static Transform.identity;
    v10 = *((_QWORD *)&xmmword_2551B1050 + 1);
    v9 = xmmword_2551B1050;
    v13 = xmmword_2551B1060;
  }
  else
  {
    *(_QWORD *)&v13 = v12;
    HIDWORD(v13) = v11;
  }
  DWORD2(v13) = 2.0;
  v21[0] = v7;
  v21[1] = v8;
  v21[2] = v9;
  v21[3] = v10;
  v22 = v13;
  v23 = 0;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v21);
  swift_release_n();
  if (!*v6)
    goto LABEL_16;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0x7F8000003C23D70ALL, 0x142700000);
  swift_release();
  if (!*v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  RECameraViewDescriptorsComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RECameraViewDescriptorsComponentSetRenderOrder();
  if (!*v6)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *v4 = *(_OWORD *)zmmword_21BE41220;
  v4[1] = *(_OWORD *)&zmmword_21BE41220[16];
  v4[2] = *(_OWORD *)&zmmword_21BE41220[32];
  v4[3] = *(_OWORD *)&zmmword_21BE41220[48];
  type metadata accessor for AnchoringComponent.Target(0);
  swift_storeEnumTagMultiPayload();
  v14 = (int *)type metadata accessor for AnchoringComponent(0);
  *(_QWORD *)((char *)v4 + v14[5]) = 1;
  *(_QWORD *)((char *)v4 + v14[6]) = 1;
  v15 = (char *)v4 + v14[7];
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v15[64] = 1;
  (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v14 - 1) + 56))(v4, 0, 1, v14);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v4);
  outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent?);
  swift_release();
  if (!*v6)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_retain();
  Entity.turnIntoNinja()();
  swift_release();
  v17 = v1;
  if (*(_QWORD *)(v1 + 88))
  {
    swift_retain();
    v16 = swift_retain();
    Scene.AnchorCollection.appendNinja(_:)(v16);
    swift_release();
    swift_release();
    return;
  }
LABEL_20:
  __break(1u);
}

Swift::Void __swiftcall Scene.addAudioMixer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (!*(_QWORD *)(v0 + 96))
  {
    v1 = v0;
    type metadata accessor for Entity();
    swift_allocObject();
    v2 = Entity.init()();
    REEntitySetName();
    RENetworkMarkEntityMetadataDirty();
    Entity.turnIntoNinja()();
    REAudioMixerComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneAddEntity();
    *(_QWORD *)(v1 + 96) = v2;
    swift_release();
  }
}

uint64_t type metadata accessor for Scene()
{
  return objc_opt_self();
}

Swift::Void __swiftcall Scene.addAudioReverb()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (!*(_QWORD *)(v0 + 104))
  {
    v1 = v0;
    type metadata accessor for Entity();
    swift_allocObject();
    v2 = Entity.init()();
    REEntitySetName();
    RENetworkMarkEntityMetadataDirty();
    Entity.turnIntoNinja()();
    REReverbComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneAddEntity();
    REReverbComponentSetPriority();
    *(_QWORD *)(v1 + 104) = v2;
    swift_release();
  }
}

_QWORD *static Scene.__testInit(name:)()
{
  swift_bridgeObjectRetain();
  return specialized Scene.__allocating_init(name:)();
}

uint64_t Scene.init(coreScene:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v1 + 104) = 0;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  swift_weakInit();
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  RERetain();
  *(_QWORD *)(v1 + 16) = a1;
  RESceneSetSwiftObject();
  return v1;
}

_QWORD *Scene.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;
  void (*v3)(uint64_t, uint64_t);
  _QWORD v5[4];

  RESceneSetSwiftObject();
  RERelease();
  swift_beginAccess();
  if (v0[6])
  {
    outlined init with copy of __REAssetService((uint64_t)(v0 + 3), (uint64_t)v5);
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  swift_beginAccess();
  if (v0[27])
  {
    v1 = v0[28];
    ObjectType = swift_getObjectType();
    v3 = *(void (**)(uint64_t, uint64_t))(v1 + 56);
    swift_unknownObjectRetain();
    v3(ObjectType, v1);
    swift_unknownObjectRelease();
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 3), &demangling cache variable for type metadata for Cancellable?);
  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_weakDestroy();
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 15), &demangling cache variable for type metadata for EventService?);
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 20), &demangling cache variable for type metadata for Cancellable?);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Scene.__deallocating_deinit()
{
  Scene.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall Scene.enableCollisions(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _OWORD v7[2];
  uint64_t v8;
  char *v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = v1 + 24;
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 48))
  {
    outlined init with copy of __REAssetService(v1 + 24, (uint64_t)v9);
    __swift_project_boxed_opaque_existential_1(v9, v10);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  if (a1)
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    v4 = swift_allocObject();
    swift_weakInit();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v7, v9);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = partial apply for closure #1 in Scene.enableCollisions(_:);
    *(_QWORD *)(v5 + 24) = v4;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Began>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<CollisionEvents.Began> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Began>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v6 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v10 = type metadata accessor for AnyCancellable();
    v11 = MEMORY[0x24BDB9B58];
    swift_release();
    v9[0] = v6;
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Material?((uint64_t)v9, v3, &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
  }
}

uint64_t closure #1 in Scene.enableCollisions(_:)(__int128 *a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v19 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v24 = a1[2];
  v25 = v9;
  v26 = a1[4];
  v10 = a1[1];
  v22 = *a1;
  v23 = v10;
  type metadata accessor for OS_dispatch_queue();
  v11 = (void *)static OS_dispatch_queue.main.getter();
  v12 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  v14 = v25;
  *(_OWORD *)(v13 + 64) = v24;
  *(_OWORD *)(v13 + 80) = v14;
  *(_OWORD *)(v13 + 96) = v26;
  v15 = v23;
  *(_OWORD *)(v13 + 32) = v22;
  *(_OWORD *)(v13 + 48) = v15;
  aBlock[4] = partial apply for closure #1 in closure #1 in Scene.enableCollisions(_:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_25;
  v16 = _Block_copy(aBlock);
  swift_retain();
  outlined retain of CollisionEvents.Began((uint64_t)&v22);
  static DispatchQoS.unspecified.getter();
  v20 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, v3, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v8, v5, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in Scene.enableCollisions(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    Scene.__interactionService.getter();
    type metadata accessor for __RKEntityInteractionManager();
    if (swift_dynamicCastClass())
    {
      v7 = *a2;
      Entity.__interactionIdentifier.getter((uint64_t)v5);
      v8 = type metadata accessor for UUID();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v5, 1, v8) == 1)
      {
        swift_unknownObjectRelease();
        swift_release();
        return outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_21BE50AD0;
        *(_QWORD *)(v9 + 32) = a2[1];
        v13 = v9;
        specialized Array._endMutation()();
        v10 = v13;
        swift_retain();
        swift_retain();
        v11 = Entity.__tags.getter();
        type metadata accessor for __RKEntityCollisionTrigger();
        v12 = swift_allocObject();
        *(_QWORD *)(v12 + 24) = 0;
        swift_beginAccess();
        *(_QWORD *)(v12 + 24) = v7;
        swift_retain();
        swift_release();
        *(_QWORD *)(v12 + 32) = v10;
        *(_QWORD *)(v12 + 40) = v11;
        swift_release();
        *(_WORD *)(v12 + 16) = 0;
        *(_BYTE *)(v12 + 18) = 0;
        __RKEntityInteractionManager.__performInteractions(matching:on:)(v12, 0);
        swift_release();
        swift_unknownObjectRelease();
        return swift_release();
      }
    }
    else
    {
      swift_release();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t Scene.findEntity(named:)()
{
  uint64_t EntityByName;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
    return 0;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v4 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v4)
    {
      v2 = (*(uint64_t (**)(void))(v4 + 232))();
      v5 = *(_QWORD *)(v2 + 16);
      swift_retain();
      MEMORY[0x22076D160](v5, 0);
      *(_QWORD *)(v2 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v2);
      swift_release();
      return v2;
    }
    return makeEntity(for:)(EntityByName);
  }
  __break(1u);
  return result;
}

uint64_t Scene.findEntity(id:)()
{
  uint64_t Entity;
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  Entity = RESceneFindEntity();
  if (!Entity)
    return 0;
  v1 = Entity;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      v3 = (*(uint64_t (**)(void))(v5 + 232))();
      v6 = *(_QWORD *)(v3 + 16);
      swift_retain();
      MEMORY[0x22076D160](v6, 0);
      *(_QWORD *)(v3 + 16) = v1;
      MEMORY[0x22076D160](v1, v3);
      swift_release();
      return v3;
    }
    return makeEntity(for:)(v1);
  }
  __break(1u);
  return result;
}

uint64_t Scene.__interactionService.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  if (*(_QWORD *)(v0 + 200))
  {
    v2 = *(_QWORD *)(v0 + 200);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    type metadata accessor for __RKEntityInteractionManager();
    swift_allocObject();
    v2 = __RKEntityInteractionManager.init(sceneRef:)(v3);
    *(_QWORD *)(v1 + 200) = v2;
    *(_QWORD *)(v1 + 208) = &protocol witness table for __RKEntityInteractionManager;
    swift_retain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

uint64_t Scene.synchronizationService.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t Scene.synchronizationService.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v3 = v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 216);
  v7 = *(_QWORD *)(v3 + 224);
  *(_QWORD *)(v3 + 216) = a1;
  *(_QWORD *)(v3 + 224) = a2;
  swift_unknownObjectRetain();
  if (v6)
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v7 + 56))(ObjectType, v7);
  }
  if (*(_QWORD *)(v3 + 216))
  {
    v9 = *(_QWORD *)(v3 + 224);
    v10 = swift_getObjectType();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 48);
    swift_unknownObjectRetain();
    v11(v10, v9);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void (*Scene.synchronizationService.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  char *v3;

  v3 = (char *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 5) = v1;
  swift_beginAccess();
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v1 + 216);
  swift_unknownObjectRetain();
  return Scene.synchronizationService.modify;
}

void Scene.synchronizationService.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = v2[4];
  if ((a2 & 1) != 0)
  {
    v5 = swift_unknownObjectRetain();
    Scene.synchronizationService.setter(v5, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    Scene.synchronizationService.setter(v3, v2[4]);
  }
  free(v2);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Scene.containsChangeSceneActions()()
{
  char v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *i;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t Object;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(const char *, _QWORD);
  void *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE v33[12];
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51[12];

  v50 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v40 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v2 = &v33[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for __RKEntityActionSpecification(0);
  v49 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v33[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = type metadata accessor for Data.Deallocator();
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v43 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
  {
    v7 = closure #1 in Scene.entitiesWithInteractions()();
    if (v7 >> 62)
      goto LABEL_42;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    for (i = v43; v8; i = v43)
    {
      v10 = 0;
      v44 = type metadata accessor for Scene();
      v45 = v7 & 0xC000000000000001;
      v39 = v7 & 0xFFFFFFFFFFFFFF8;
      v38 = v7 + 32;
      v34 = *MEMORY[0x24BDCDB98];
      v41 = v8;
      v42 = v7;
      while (v45)
      {
        v11 = MEMORY[0x220769770](v10, v7);
        v12 = __OFADD__(v10, 1);
        v13 = v10 + 1;
        if (v12)
          goto LABEL_40;
LABEL_11:
        v48 = v11;
        if (static __RKEntityInteractionsComponent.registration
          && REEntityGetCustomComponent()
          && (Object = RECustomComponentGetObject()) != 0)
        {
          v15 = *(const char **)(Object + 16);
          outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v51);
          if (v15)
          {
            v16 = v15;
          }
          else
          {
            v17 = v51[0];
            if (v51[0])
            {
              v46 = 0;
              v18 = strlen(v51[0]);
              (*(void (**)(_BYTE *, _QWORD, uint64_t))(v35 + 104))(i, v34, v36);
              Data.Deallocator._deallocator.getter();
              if (v18)
              {
                type metadata accessor for __DataStorage();
                swift_allocObject();
                swift_retain();
                v19 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                v18 = specialized Data._Representation.init(_:count:)(v19, v18);
                v21 = v20;
                swift_release();
              }
              else
              {
                v22 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
                v22(v17, 0);
                swift_release();
                swift_release();
                v21 = 0xC000000000000000;
              }
              (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(i, v36);
              type metadata accessor for JSONDecoder();
              swift_allocObject();
              JSONDecoder.init()();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
              lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
              v23 = v37;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)();
              if (v23)
              {
                swift_release();
                outlined consume of Data._Representation(v18, v21);

                v37 = 0;
                v16 = (const char *)MEMORY[0x24BEE4AF8];
              }
              else
              {
                v37 = 0;
                swift_release();
                outlined consume of Data._Representation(v18, v21);
                v16 = v51[11];
              }
              v7 = v42;
              i = v43;
              v8 = v41;
            }
            else
            {
              v16 = (const char *)MEMORY[0x24BEE4AF8];
            }
          }
          swift_bridgeObjectRetain();
          outlined destroy of __RKEntityInteractionsComponent((uint64_t)v51);
        }
        else
        {
          v16 = (const char *)MEMORY[0x24BEE4AF8];
        }
        v47 = v13;
        v24 = *((_QWORD *)v16 + 2);
        if (v24)
        {
          v51[0] = (const char *)MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
          v25 = *(unsigned __int8 *)(v40 + 80);
          v46 = v16;
          v26 = (uint64_t)&v16[(v25 + 32) & ~v25];
          v27 = *(_QWORD *)(v40 + 72);
          do
          {
            outlined init with copy of __RKEntityActionSpecification(v26, (uint64_t)v2, type metadata accessor for __RKEntityInteractionSpecification);
            outlined init with copy of __RKEntityActionSpecification((uint64_t)&v2[*(int *)(v50 + 20)], (uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
            outlined destroy of __RKEntityActionSpecification((uint64_t)v2, type metadata accessor for __RKEntityInteractionSpecification);
            v28 = v51[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1);
              v28 = v51[0];
            }
            v30 = *((_QWORD *)v28 + 2);
            v29 = *((_QWORD *)v28 + 3);
            if (v30 >= v29 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
              v28 = v51[0];
            }
            *((_QWORD *)v28 + 2) = v30 + 1;
            outlined init with take of __RKEntityActionSpecification((uint64_t)v5, (uint64_t)&v28[((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v30]);
            v26 += v27;
            --v24;
          }
          while (v24);
          swift_bridgeObjectRelease();
          v7 = v42;
          i = v43;
          v8 = v41;
        }
        else
        {
          swift_bridgeObjectRelease();
          v28 = (const char *)MEMORY[0x24BEE4AF8];
        }
        v0 = static Scene.containsChangeSceneActions(_:)((uint64_t)v28);
        swift_bridgeObjectRelease();
        swift_release();
        if ((v0 & 1) == 0)
        {
          v10 = v47;
          if (v47 != v8)
            continue;
        }
        goto LABEL_44;
      }
      if (v10 >= *(_QWORD *)(v39 + 16))
        goto LABEL_41;
      v11 = swift_retain();
      v12 = __OFADD__(v10, 1);
      v13 = v10 + 1;
      if (!v12)
        goto LABEL_11;
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      v8 = _CocoaArrayWrapper.endIndex.getter();
    }
    v0 = 0;
LABEL_44:
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)v31 = xmmword_21BE6A310;
    *(_BYTE *)(v31 + 16) = 0;
    swift_willThrow();
  }
  return v0 & 1;
}

uint64_t static Scene.containsChangeSceneActions(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int EnumCaseMultiPayload;
  uint64_t v12;

  v2 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return 0;
  v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v8 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of __RKEntityActionSpecification(v7, (uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 6)
      break;
    v9 = static Scene.containsChangeSceneActions(_:)(*((_QWORD *)v5 + 1));
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
LABEL_4:
    v7 += v8;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  if (EnumCaseMultiPayload != 1)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  outlined destroy of __RKEntityActionSpecification((uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
  return 1;
}

uint64_t closure #1 in Scene.entitiesWithInteractions()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Entity;
  uint64_t Object;
  unsigned __int8 *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSString *v18;
  Class v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = RESceneGetComponentsOfCustomType();
  if (v1 < 0)
    goto LABEL_37;
  v2 = result;
  v3 = v1;
  result = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    while (1)
    {
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        if (!REEntityGetCustomComponent())
          goto LABEL_32;
        Object = RECustomComponentGetObject();
        if (!Object)
          goto LABEL_32;
        v6 = *(unsigned __int8 **)Object;
        if (*(_QWORD *)(Object + 8))
          v7 = 1;
        else
          v7 = v6 == 0;
        if (v7)
        {
          result = swift_retain();
        }
        else
        {
          v8 = *v6;
          v9 = String.init(utf8String:)();
          if (v10)
            v11 = v9;
          else
            v11 = 0;
          if (v10)
            v12 = v10;
          else
            v12 = 0xE000000000000000;
          v6 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
          swift_bridgeObjectRelease();
          type metadata accessor for IntrospectionDataCleanupHelper();
          result = swift_allocObject();
          *(_QWORD *)(result + 16) = v6;
        }
        if (!v6)
          goto LABEL_38;
        swift_retain();
        v13 = String.init(utf8String:)();
        v15 = v14;
        swift_release();
        v16 = v15 ? v13 : 0;
        v17 = v15 ? v15 : 0xE000000000000000;
        v18 = (NSString *)MEMORY[0x220768C3C](v16, v17);
        swift_bridgeObjectRelease();
        v19 = NSClassFromString(v18);

        swift_release();
        if (!v19)
          goto LABEL_32;
        swift_getObjCClassMetadata();
        type metadata accessor for Entity();
        v20 = swift_dynamicCastMetatype();
        if (v20)
        {
          v21 = (*(uint64_t (**)(void))(v20 + 232))();
          v22 = *(_QWORD *)(v21 + 16);
          swift_retain();
          MEMORY[0x22076D160](v22, 0);
          *(_QWORD *)(v21 + 16) = Entity;
          MEMORY[0x22076D160](Entity, v21);
          swift_release();
        }
        else
        {
LABEL_32:
          makeEntity(for:)(Entity);
        }
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v2 += 8;
      if (!--v3)
        return v23;
    }
  }
  return result;
}

uint64_t static Scene.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;

  v1 = *a1;
  v2 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v2)
    return swift_dynamicCastClassUnconditional();
  v4 = swift_allocObject();
  Scene.init(coreScene:)(v1);
  return v4;
}

void Scene.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

Swift::Int Scene.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  return Hasher._finalize()();
}

uint64_t Scene.id.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (result < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance Scene@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = v2;
  }
  return result;
}

uint64_t Scene.__corePointer.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t specialized Scene.addAnchor(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  swift_retain();
  specialized Scene.AnchorCollection.append(_:)(a1, &v4);
  return swift_release();
}

uint64_t specialized Scene.__audioListener.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t active;
  uint64_t v4;

  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = a1;
  swift_retain();
  swift_release();
  active = *(_QWORD *)(v1 + 72);
  if (!active)
    active = Scene.internalActiveCamera.getter();
  v4 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = active;
  swift_retain();
  swift_retain();
  Scene.internalAudioListener.didset(v4);
  swift_release();
  return swift_release();
}

_QWORD *specialized Scene.__allocating_init(name:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t active;
  uint64_t v4;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v0 = RESceneCreate();
  swift_release();
  RESceneAddDefaultSystems();
  type metadata accessor for Scene();
  v1 = (_QWORD *)swift_allocObject();
  Scene.init(coreScene:)(v0);
  swift_retain();
  RERelease();
  MEMORY[0x22076FC98](v0, 1);
  Scene.addDefaultCamera()();
  if (!v1[12])
  {
    type metadata accessor for Entity();
    swift_allocObject();
    v2 = Entity.init()();
    REEntitySetName();
    RENetworkMarkEntityMetadataDirty();
    Entity.turnIntoNinja()();
    REAudioMixerComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneAddEntity();
    v1[12] = v2;
    swift_release();
  }
  swift_beginAccess();
  v1[9] = 0;
  swift_release();
  active = v1[9];
  if (!active)
    active = Scene.internalActiveCamera.getter();
  v4 = v1[10];
  v1[10] = active;
  swift_retain();
  swift_retain();
  Scene.internalAudioListener.didset(v4);
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_21BC6319C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Scene.enableCollisions(_:)(__int128 *a1)
{
  return closure #1 in Scene.enableCollisions(_:)(a1);
}

uint64_t sub_21BC631C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of __RKEntityActionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __RKEntityActionSpecification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in Scene(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Scene and conformance Scene, a2, (uint64_t (*)(uint64_t))type metadata accessor for Scene, (uint64_t)&protocol conformance descriptor for Scene);
}

uint64_t sub_21BC632B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + 64;
  swift_beginAccess();
  result = MEMORY[0x22077301C](v3);
  *a2 = result;
  return result;
}

uint64_t sub_21BC632FC()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_21BC63348@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 72);
  return swift_retain();
}

uint64_t sub_21BC63390()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized Scene.__audioListener.setter(v0);
  return swift_release();
}

uint64_t sub_21BC633C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 88);
  return swift_retain();
}

uint64_t sub_21BC6340C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_21BC63418(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)result + 16) != *(_QWORD *)(*(_QWORD *)a2 + 16))
    __break(1u);
  return result;
}

uint64_t sub_21BC63438@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Scene.__interactionService.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21BC63460(_OWORD *a1, uint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a2 + 200) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_21BC63494@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_OWORD *)(v3 + 216);
  return swift_unknownObjectRetain();
}

uint64_t sub_21BC634E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = swift_unknownObjectRetain();
  return Scene.synchronizationService.setter(v2, v1);
}

uint64_t method lookup function for Scene()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Scene.__coreScene.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of Scene.session.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of Scene.session.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of Scene.session.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of Scene.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of Scene.__audioListener.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of Scene.__audioListener.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of Scene.__audioListener.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of Scene.__addPostProcessingAudioEffect(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of Scene.defaultCamera.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of Scene.defaultCamera.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of Scene.defaultCamera.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of Scene.__defaultCamera.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of Scene.internalActiveCamera.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of Scene.__entities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of Scene.anchors.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of Scene.anchors.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of Scene.anchors.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of Scene.addAnchor(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of Scene.removeAnchor(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of Scene.applyReverbPreset(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of Scene.setReverbPresetPriority(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of Scene.addDefaultCamera()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of Scene.addAudioMixer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of Scene.addAudioReverb()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of Scene.enableCollisions(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of Scene.findEntity(named:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of Scene.findEntity(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of Scene.__interactionService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of Scene.synchronizationService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of Scene.synchronizationService.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of Scene.synchronizationService.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of Scene.containsChangeSceneActions()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))() & 1;
}

uint64_t outlined init with copy of EventService?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventService?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BC6370C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Scene.enableCollisions(_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in Scene.enableCollisions(_:)(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 32));
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t outlined retain of CollisionEvents.Began(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyp_ypyptG_17RealityFoundation22AcousticModelComponentV18AbsorptionMaterialVs5NeverOTg5010_sypypyp17d12Foundation22fgh3V18ij20VIgnnnr_yp_ypyptAEs5k83OIegnrzr_TR04_s17a12Foundation22cde38V10__fromCoreyAC0A3Kit02__E3RefVFZAC18fG15Vyp_Q16XEfU0_Tf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v17;
  void *v18;
  _BYTE v19[32];
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[32];
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v23 = MEMORY[0x24BEE4AF8];
    a3(0, v3, 0);
    v6 = a1 + 96;
    do
    {
      outlined init with copy of Any(v6 - 64, (uint64_t)v22);
      swift_dynamicCast();
      v7 = v21;
      v17 = v20;
      outlined init with copy of Any(v6 - 32, (uint64_t)v19);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSArray);
      swift_dynamicCast();
      toFloatArray #1 (_:) in static AcousticModelComponent.__fromCore(_:)(v18);
      v9 = v8;

      outlined init with copy of Any(v6, (uint64_t)v19);
      swift_dynamicCast();
      toFloatArray #1 (_:) in static AcousticModelComponent.__fromCore(_:)(v18);
      v11 = v10;

      v4 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        a3(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v23;
      }
      v13 = *(_QWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 24);
      if (v13 >= v12 >> 1)
      {
        a3(v12 > 1, v13 + 1, 1);
        v4 = v23;
      }
      *(_QWORD *)(v4 + 16) = v13 + 1;
      v14 = (_QWORD *)(v4 + 32 * v13);
      v14[4] = v17;
      v14[5] = v7;
      v14[6] = v9;
      v14[7] = v11;
      v6 += 96;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySo7NSArrayCAGyA2IGG_yp_ypypts5NeverOTg503_s7b42STQzAASTQy_AASTQy0_AbcDIgnnnrrr_AB_AC_ADttn7_AcDts5g31OIegnrzr_STRzSTR_STR0_r1_lTRSo7f129C_A2HTG5091_s17RealityFoundation22AcousticModelComponentV10__fromCoreyAC0A3Kit02__E3RefVFZ4zip3L_ySay7a67Qz_AIQy_AIQy0_tGx_q_q0_ttu1_v1_w32_lFAJ_AkLtAJ_AK_ALttXEfU_So7C8C_Y14OTg5Tf3nnnpf_nTf1cn_n(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  uint64_t result;
  __int128 *v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  __int128 *v44;
  __int128 *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _OWORD v51[2];
  _OWORD v52[2];
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<NSArray, Zip2Sequence<NSArray, NSArray>>.Iterator);
  *(_QWORD *)&v7 = MEMORY[0x24BDAC7A8](v6).n128_u64[0];
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, sel_count, v7);
  v11 = objc_msgSend(a2, sel_count);
  v12 = objc_msgSend(a3, sel_count);
  if ((uint64_t)v12 >= (uint64_t)v11)
    v13 = v11;
  else
    v13 = v12;
  if ((uint64_t)v13 >= (uint64_t)v10)
    v14 = (uint64_t)v10;
  else
    v14 = (uint64_t)v13;
  v78 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
  v15 = a1;
  v16 = a2;
  v17 = a3;
  NSArray.makeIterator()();

  v18 = &v9[*(int *)(v6 + 52)];
  NSArray.makeIterator()();

  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<NSArray, NSArray>.Iterator);
  v46 = &v18[*(int *)(v19 + 52)];
  NSArray.makeIterator()();
  v20 = (uint64_t)v9;

  v48 = *(int *)(v19 + 56);
  v49 = v18;
  v18[v48] = 0;
  v50 = *(int *)(v6 + 56);
  v9[v50] = 0;
  if (v14 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v62, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __break(1u);
LABEL_42:
    v40 = &v55;
LABEL_44:
    outlined destroy of BodyTrackingComponent?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v49[v48] = 1;
LABEL_45:
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    __break(1u);
  }
  else
  {
    v47 = v9;
    if (v14)
    {
      v44 = &v74;
      v45 = &v70;
      v43 = &v76;
      do
      {
        if ((*(_BYTE *)(v20 + v50) & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        type metadata accessor for NSFastEnumerationIterator();
        lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
        dispatch thunk of IteratorProtocol.next()();
        if (!*((_QWORD *)&v63 + 1))
          goto LABEL_41;
        outlined init with take of Any(&v62, v51);
        if ((v49[v48] & 1) != 0)
          goto LABEL_45;
        dispatch thunk of IteratorProtocol.next()();
        if (!v56)
          goto LABEL_42;
        outlined init with take of Any(&v55, v57);
        dispatch thunk of IteratorProtocol.next()();
        if (!v54)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
          v40 = &v53;
          goto LABEL_44;
        }
        outlined init with take of Any(&v53, &v55);
        outlined init with take of Any(v57, &v58);
        outlined init with take of Any(&v55, &v60);
        v62 = v58;
        v63 = v59;
        v64 = v60;
        v65 = v61;
        outlined init with take of Any(v51, &v66);
        v68 = v62;
        v69 = v63;
        v70 = v64;
        v71 = v65;
        outlined init with copy of Any((uint64_t)&v68, (uint64_t)&v62);
        outlined init with copy of Any((uint64_t)v45, (uint64_t)&v64);
        outlined init with copy of Any((uint64_t)&v66, (uint64_t)&v72);
        outlined init with copy of Any((uint64_t)&v62, (uint64_t)&v58);
        outlined init with copy of Any((uint64_t)&v64, (uint64_t)&v60);
        outlined init with take of Any(&v58, v44);
        outlined init with take of Any(&v62, v51);
        outlined init with take of Any(&v64, v52);
        outlined init with take of Any(v52, v43);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v66, &demangling cache variable for type metadata for (Any, (Any, Any)));
        v21 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v78;
        }
        v23 = *(_QWORD *)(v21 + 16);
        v22 = *(_QWORD *)(v21 + 24);
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          v21 = v78;
        }
        *(_QWORD *)(v21 + 16) = v23 + 1;
        v24 = (_OWORD *)(v21 + 96 * v23);
        v25 = v73;
        v24[2] = v72;
        v24[3] = v25;
        v26 = v74;
        v27 = v75;
        v28 = v77;
        v24[6] = v76;
        v24[7] = v28;
        v24[4] = v26;
        v24[5] = v27;
        --v14;
        v20 = (uint64_t)v47;
      }
      while (v14);
      if ((v47[v50] & 1) != 0)
        goto LABEL_38;
    }
    type metadata accessor for NSFastEnumerationIterator();
    lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
    v44 = &v76;
    v45 = &v74;
    v42 = v52;
    v43 = &v70;
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      if (!*((_QWORD *)&v63 + 1))
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)&v62, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_37;
      }
      outlined init with take of Any(&v62, v51);
      if ((v49[v48] & 1) != 0)
        break;
      dispatch thunk of IteratorProtocol.next()();
      if (!v56)
      {
        v38 = &v55;
LABEL_35:
        outlined destroy of BodyTrackingComponent?((uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v49[v48] = 1;
        break;
      }
      outlined init with take of Any(&v55, v57);
      dispatch thunk of IteratorProtocol.next()();
      if (!v54)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
        v38 = &v53;
        goto LABEL_35;
      }
      outlined init with take of Any(&v53, &v55);
      outlined init with take of Any(v57, &v58);
      outlined init with take of Any(&v55, &v60);
      v62 = v58;
      v63 = v59;
      v64 = v60;
      v65 = v61;
      outlined init with take of Any(v51, &v66);
      v70 = v64;
      v71 = v65;
      v68 = v62;
      v69 = v63;
      v72 = v66;
      v73 = v67;
      v74 = v62;
      v75 = v63;
      v76 = v64;
      v77 = v65;
      outlined init with copy of Any((uint64_t)v45, (uint64_t)&v62);
      outlined init with copy of Any((uint64_t)v44, (uint64_t)&v64);
      outlined init with copy of Any((uint64_t)&v72, (uint64_t)&v66);
      outlined init with copy of Any((uint64_t)&v62, (uint64_t)&v58);
      outlined init with copy of Any((uint64_t)&v64, (uint64_t)&v60);
      outlined init with take of Any(&v58, &v68);
      outlined init with take of Any(&v62, v51);
      v29 = v42;
      outlined init with take of Any(&v64, v42);
      outlined init with take of Any(v29, v43);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v72, &demangling cache variable for type metadata for (Any, (Any, Any)));
      v30 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1);
        v30 = v78;
      }
      v32 = *(_QWORD *)(v30 + 16);
      v31 = *(_QWORD *)(v30 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        v30 = v78;
      }
      *(_QWORD *)(v30 + 16) = v32 + 1;
      v33 = (_OWORD *)(v30 + 96 * v32);
      v34 = v67;
      v33[2] = v66;
      v33[3] = v34;
      v35 = v68;
      v36 = v69;
      v37 = v71;
      v33[6] = v70;
      v33[7] = v37;
      v33[4] = v35;
      v33[5] = v36;
      v20 = (uint64_t)v47;
      if ((v47[v50] & 1) != 0)
        goto LABEL_38;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
LABEL_37:
    v20 = (uint64_t)v47;
    v47[v50] = 1;
LABEL_38:
    outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for Zip2Sequence<NSArray, Zip2Sequence<NSArray, NSArray>>.Iterator);
    return v78;
  }
  return result;
}

uint64_t AcousticModelComponent.mesh.getter()
{
  return swift_retain();
}

uint64_t AcousticModelComponent.mesh.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AcousticModelComponent.mesh.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AcousticModelComponent.absorptionMaterials.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AcousticModelComponent.absorptionMaterials.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AcousticModelComponent.absorptionMaterials.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AcousticModelComponent.scatteringMaterials.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AcousticModelComponent.scatteringMaterials.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AcousticModelComponent.scatteringMaterials.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AcousticModelComponent.soundReductionMaterials.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AcousticModelComponent.soundReductionMaterials.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AcousticModelComponent.soundReductionMaterials.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AcousticModelComponent.init(mesh:absorptionMaterials:scatteringMaterials:soundReductionMaterials:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void AcousticModelComponent.init()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = 0;
  a1[1] = v1;
  a1[2] = v1;
  a1[3] = v1;
}

void static AcousticModelComponent.__fromCore(_:)(uint64_t *a1@<X8>)
{
  uint64_t MeshAsset;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v27[8];
  char v28[8];
  char v29[8];

  MeshAsset = REAcousticMeshComponentGetMeshAsset();
  if (MeshAsset)
  {
    v2 = MeshAsset;
    type metadata accessor for AcousticMeshResource();
    v3 = swift_allocObject();
    RERetain();
    v25 = v3;
    *(_QWORD *)(v3 + 16) = v2;
  }
  else
  {
    v25 = 0;
  }
  v4 = (void *)REAcousticMeshComponentCopyAllAbsorptionIdentifiers();
  v5 = (void *)REAcousticMeshComponentCopyAllAbsorptionFrequencies();
  v24 = (void *)REAcousticMeshComponentCopyAllAbsorptionCoefficients();
  v6 = v5;
  v7 = v4;
  v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySo7NSArrayCAGyA2IGG_yp_ypypts5NeverOTg503_s7b42STQzAASTQy_AASTQy0_AbcDIgnnnrrr_AB_AC_ADttn7_AcDts5g31OIegnrzr_STRzSTR_STR0_r1_lTRSo7f129C_A2HTG5091_s17RealityFoundation22AcousticModelComponentV10__fromCoreyAC0A3Kit02__E3RefVFZ4zip3L_ySay7a67Qz_AIQy_AIQy0_tGx_q_q0_ttu1_v1_w32_lFAJ_AkLtAJ_AK_ALttXEfU_So7C8C_Y14OTg5Tf3nnnpf_nTf1cn_n(v7, v6, v24);

  v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyp_ypyptG_17RealityFoundation22AcousticModelComponentV18AbsorptionMaterialVs5NeverOTg5010_sypypyp17d12Foundation22fgh3V18ij20VIgnnnr_yp_ypyptAEs5k83OIegnrzr_TR04_s17a12Foundation22cde38V10__fromCoreyAC0A3Kit02__E3RefVFZAC18fG15Vyp_Q16XEfU0_Tf3nnnpf_nTf1cn_nTm(v8, (uint64_t)v29, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  v9 = (void *)REAcousticMeshComponentCopyAllScatteringIdentifiers();
  v10 = (void *)REAcousticMeshComponentCopyAllScatteringCoefficients();
  v11 = (void *)REAcousticMeshComponentCopyAllScatteringFrequencies();
  v12 = v10;
  v13 = v9;
  v14 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySo7NSArrayCAGyA2IGG_yp_ypypts5NeverOTg503_s7b42STQzAASTQy_AASTQy0_AbcDIgnnnrrr_AB_AC_ADttn7_AcDts5g31OIegnrzr_STRzSTR_STR0_r1_lTRSo7f129C_A2HTG5091_s17RealityFoundation22AcousticModelComponentV10__fromCoreyAC0A3Kit02__E3RefVFZ4zip3L_ySay7a67Qz_AIQy_AIQy0_tGx_q_q0_ttu1_v1_w32_lFAJ_AkLtAJ_AK_ALttXEfU_So7C8C_Y14OTg5Tf3nnnpf_nTf1cn_n(v13, v11, v12);

  v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyp_ypyptG_17RealityFoundation22AcousticModelComponentV18AbsorptionMaterialVs5NeverOTg5010_sypypyp17d12Foundation22fgh3V18ij20VIgnnnr_yp_ypyptAEs5k83OIegnrzr_TR04_s17a12Foundation22cde38V10__fromCoreyAC0A3Kit02__E3RefVFZAC18fG15Vyp_Q16XEfU0_Tf3nnnpf_nTf1cn_nTm(v14, (uint64_t)v28, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  v15 = (void *)REAcousticMeshComponentCopyAllSoundReductionIdentifiers();
  v16 = (void *)REAcousticMeshComponentCopyAllSoundReductionIndices();
  v17 = (void *)REAcousticMeshComponentCopyAllSoundReductionFrequencies();
  v18 = v16;
  v19 = v15;
  v20 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySo7NSArrayCAGyA2IGG_yp_ypypts5NeverOTg503_s7b42STQzAASTQy_AASTQy0_AbcDIgnnnrrr_AB_AC_ADttn7_AcDts5g31OIegnrzr_STRzSTR_STR0_r1_lTRSo7f129C_A2HTG5091_s17RealityFoundation22AcousticModelComponentV10__fromCoreyAC0A3Kit02__E3RefVFZ4zip3L_ySay7a67Qz_AIQy_AIQy0_tGx_q_q0_ttu1_v1_w32_lFAJ_AkLtAJ_AK_ALttXEfU_So7C8C_Y14OTg5Tf3nnnpf_nTf1cn_n(v19, v17, v18);

  v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyp_ypyptG_17RealityFoundation22AcousticModelComponentV18AbsorptionMaterialVs5NeverOTg5010_sypypyp17d12Foundation22fgh3V18ij20VIgnnnr_yp_ypyptAEs5k83OIegnrzr_TR04_s17a12Foundation22cde38V10__fromCoreyAC0A3Kit02__E3RefVFZAC18fG15Vyp_Q16XEfU0_Tf3nnnpf_nTf1cn_nTm(v20, (uint64_t)v27, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  *a1 = v25;
  a1[1] = v23;
  a1[2] = v22;
  a1[3] = v21;

}

uint64_t AcousticModelComponent.__toCore(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  REAcousticMeshComponentSetMeshAsset();
  REAcousticMeshComponentClearAllMaterials();
  v4 = *(_QWORD *)(v1 + 16);
  v20 = v2;
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = v1 + 56;
    do
    {
      v6 = *(_QWORD *)(v5 - 24);
      v7 = *(_QWORD *)(v5 - 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = (void *)MEMORY[0x220768C3C](v6, v7);
      REAcousticMeshComponentAddAbsorptionCoefficients();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v2 = v20;
  }
  v9 = *(_QWORD *)(v2 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = v2 + 56;
    do
    {
      v11 = *(_QWORD *)(v10 - 24);
      v12 = *(_QWORD *)(v10 - 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = (void *)MEMORY[0x220768C3C](v11, v12);
      REAcousticMeshComponentAddScatteringCoefficients();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v10 += 32;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  v14 = *(_QWORD *)(v3 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    v15 = v3 + 56;
    do
    {
      v16 = *(_QWORD *)(v15 - 24);
      v17 = *(_QWORD *)(v15 - 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = (void *)MEMORY[0x220768C3C](v16, v17);
      REAcousticMeshComponentAddSoundReductionIndices();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v15 += 32;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance AcousticModelComponent(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static AcousticModelComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

uint64_t destroy for AcousticModelComponent()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AcousticModelComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AcousticModelComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AcousticModelComponent(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AcousticModelComponent()
{
  return &type metadata for AcousticModelComponent;
}

ValueMetadata *type metadata accessor for AcousticModelComponent.AbsorptionMaterial()
{
  return &type metadata for AcousticModelComponent.AbsorptionMaterial;
}

ValueMetadata *type metadata accessor for AcousticModelComponent.ScatteringMaterial()
{
  return &type metadata for AcousticModelComponent.ScatteringMaterial;
}

ValueMetadata *type metadata accessor for AcousticModelComponent.SoundReductionMaterial()
{
  return &type metadata for AcousticModelComponent.SoundReductionMaterial;
}

void toFloatArray #1 (_:) in static AcousticModelComponent.__fromCore(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  id v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for NSFastEnumerationIterator();
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = MEMORY[0x24BDAC7A8](v2).n128_u64[0];
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)objc_msgSend(a1, sel_count, v4);
  v28 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  v8 = a1;
  NSArray.makeIterator()();

  if (v7 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
  v22 = v3;
  if (v7)
  {
    lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
    do
    {
      dispatch thunk of IteratorProtocol.next()();
      if (!v27)
        goto LABEL_18;
      outlined init with copy of Any((uint64_t)&v26, (uint64_t)&v24);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber);
      swift_dynamicCast();
      v9 = v23;
      objc_msgSend(v23, sel_floatValue);
      v11 = v10;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      v12 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v28;
      }
      v14 = *(_QWORD *)(v12 + 16);
      v13 = *(_QWORD *)(v12 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v12 = v28;
      }
      *(_QWORD *)(v12 + 16) = v14 + 1;
      *(_DWORD *)(v12 + 4 * v14 + 32) = v11;
    }
    while (--v7);
  }
  lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
  dispatch thunk of IteratorProtocol.next()();
  while (v25)
  {
    outlined init with take of Any(&v24, &v26);
    outlined init with copy of Any((uint64_t)&v26, (uint64_t)&v24);
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber);
    swift_dynamicCast();
    v15 = v23;
    objc_msgSend(v23, sel_floatValue);
    v17 = v16;

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    v18 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
      v18 = v28;
    }
    v20 = *(_QWORD *)(v18 + 16);
    v19 = *(_QWORD *)(v18 + 24);
    if (v20 >= v19 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      v18 = v28;
    }
    *(_QWORD *)(v18 + 16) = v20 + 1;
    *(_DWORD *)(v18 + 4 * v20 + 32) = v17;
    dispatch thunk of IteratorProtocol.next()();
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v2);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

unint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator;
  if (!lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator)
  {
    v1 = type metadata accessor for NSFastEnumerationIterator();
    result = MEMORY[0x220772E3C](MEMORY[0x24BDCD530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator);
  }
  return result;
}

uint64_t AudioMixGroupsComponent._proto_fadeMixGroup(named:to:duration:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  void (*v7)(_QWORD *);
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD v12[4];

  swift_bridgeObjectRetain();
  v7 = specialized Dictionary.subscript.modify(v12, a1, a2);
  if (*(_QWORD *)(v6 + 48))
  {
    v8 = v6;
    v9 = (double)Duration.components.getter();
    Duration.components.getter();
    *(double *)(v8 + 8) = a3;
    *(_BYTE *)(v8 + 16) = 0;
    *(double *)(v8 + 24) = (double)v10 * 1.0e-18 + v9;
    *(_BYTE *)(v8 + 32) = 0;
  }
  ((void (*)(_QWORD *, _QWORD))v7)(v12, 0);
  return swift_bridgeObjectRelease();
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();
  free(v1);
}

void (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[10] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

