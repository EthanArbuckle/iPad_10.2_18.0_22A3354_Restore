void (*OrbitAnimation.trimDuration.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipDuration;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(_QWORD *)(v1 + 200);
  v6 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 41) & 1) == 0)
  {
    v10 = v3[4];
    v11 = v3[5] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
  if (!ClipDuration)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipDuration;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return OrbitAnimation.trimDuration.modify;
}

void OrbitAnimation.trimDuration.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)(v2 + 88) = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 96) = v3;
  free((void *)v1);
}

double OrbitAnimation.offset.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_OWORD *)(v0 + 168);
  v12 = *(_OWORD *)(v0 + 152);
  v13 = v1;
  v14 = *(_OWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v9 = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v10 = *(_OWORD *)(v0 + 120);
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void OrbitAnimation.offset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 104) = a1;
  *(_BYTE *)(v1 + 112) = 0;
}

void (*OrbitAnimation.offset.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = v3 + 19;
  v3[20] = v1;
  v6 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(_QWORD *)(v1 + 200);
  v7 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[7] & 1) != 0)
  {
    v10 = 0;
    if (*(_QWORD *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipOffset();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = v3[6];
  }
  *v5 = v10;
  return OrbitAnimation.offset.modify;
}

void OrbitAnimation.offset.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = v1[20];
  *(_QWORD *)(v2 + 104) = v1[19];
  *(_BYTE *)(v2 + 112) = 0;
  free(v1);
}

double OrbitAnimation.delay.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 168);
  v11 = *(_OWORD *)(v0 + 152);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v9 = *(_OWORD *)(v0 + 120);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void OrbitAnimation.delay.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 120) = a1;
  *(_BYTE *)(v1 + 128) = 0;
}

void (*OrbitAnimation.delay.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = v3 + 19;
  v3[20] = v1;
  v6 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(_QWORD *)(v1 + 200);
  v7 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[9] & 1) != 0)
  {
    v10 = 0;
    if (*(_QWORD *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipDelay();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = v3[8];
  }
  *v5 = v10;
  return OrbitAnimation.delay.modify;
}

void OrbitAnimation.delay.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = v1[20];
  *(_QWORD *)(v2 + 120) = v1[19];
  *(_BYTE *)(v2 + 128) = 0;
  free(v1);
}

float OrbitAnimation.speed.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 168);
  v11 = *(_OWORD *)(v0 + 152);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v9 = *(_OWORD *)(v0 + 120);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((v10 & 1) == 0)
    return *((float *)&v9 + 3);
  v5 = 1.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void OrbitAnimation.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 132) = a1;
  *(_BYTE *)(v1 + 136) = 0;
}

void (*OrbitAnimation.speed.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  float *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float v10;
  float v11;

  v3 = (char *)malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = (float *)(v3 + 160);
  v6 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  *((_QWORD *)v3 + 18) = *(_QWORD *)(v1 + 200);
  *((_QWORD *)v3 + 19) = v1;
  v7 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[80] & 1) != 0)
  {
    v10 = 1.0;
    if (*(_QWORD *)(*((_QWORD *)v3 + 18) + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipSpeed();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = *((float *)v3 + 19);
  }
  *v5 = v10;
  return OrbitAnimation.speed.modify;
}

void OrbitAnimation.speed.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 152);
  *(_DWORD *)(v2 + 132) = *(_DWORD *)(v1 + 160);
  *(_BYTE *)(v2 + 136) = 0;
  free((void *)v1);
}

void OrbitAnimation.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int ClipLoopBehavior;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 168);
  v11 = *(_OWORD *)(v1 + 152);
  v12 = v3;
  v13 = *(_OWORD *)(v1 + 184);
  v14 = *(_QWORD *)(v1 + 200);
  v4 = *(_OWORD *)(v1 + 104);
  v9[2] = *(_OWORD *)(v1 + 88);
  v9[3] = v4;
  v5 = *(_OWORD *)(v1 + 136);
  v9[4] = *(_OWORD *)(v1 + 120);
  v10 = v5;
  v6 = *(_OWORD *)(v1 + 72);
  v9[0] = *(_OWORD *)(v1 + 56);
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    v7 = *(_QWORD *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

_BYTE *OrbitAnimation.repeatMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 137) = *result;
  return result;
}

void (*OrbitAnimation.repeatMode.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int ClipLoopBehavior;

  v2 = (unsigned __int8 *)malloc(0xA8uLL);
  v3 = (uint64_t)v2;
  *a1 = v2;
  v4 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v2 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v2 + 7) = v4;
  *((_OWORD *)v2 + 8) = *(_OWORD *)(v1 + 184);
  *((_QWORD *)v2 + 18) = *(_QWORD *)(v1 + 200);
  *((_QWORD *)v2 + 19) = v1;
  v5 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v2 + 3) = v5;
  v6 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v2 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v2 + 5) = v6;
  v7 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)v2 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v2 + 1) = v7;
  LODWORD(a1) = v2[81];
  if ((_DWORD)a1 == 4)
  {
    a1 = *(_QWORD **)(*((_QWORD *)v2 + 18) + 16);
    if (a1)
    {
      outlined retain of TimelineClipProperties((uint64_t)v2);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(a1) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties(v3);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(a1) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_BYTE *)(v3 + 160) = (_BYTE)a1;
  return OrbitAnimation.repeatMode.modify;
}

void OrbitAnimation.repeatMode.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_BYTE *)(*(_QWORD *)(v1 + 152) + 137) = *(_BYTE *)(v1 + 160);
  free((void *)v1);
}

double OrbitAnimation.duration.getter()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 216) & 1) == 0)
    return *(double *)(v0 + 208);
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return 0.0;
  RETimelineDefinitionGetDuration();
  return result;
}

void OrbitAnimation.duration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 208) = a1;
  *(_BYTE *)(v1 + 216) = 0;
}

_QWORD *(*OrbitAnimation.duration.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  if ((*(_BYTE *)(v1 + 216) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      RETimelineDefinitionGetDuration();
    else
      v3 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 208);
  }
  *a1 = v3;
  return OrbitAnimation.duration.modify;
}

_QWORD *OrbitAnimation.duration.modify(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 208) = *result;
  *(_BYTE *)(v1 + 216) = 0;
  return result;
}

double OrbitAnimation.axis.getter()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 240) & 1) == 0)
    return *(double *)(v0 + 224);
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return 0.0078125;
  RETimelineDefinitionGetAxis();
  return result;
}

void OrbitAnimation.axis.setter(__n128 a1)
{
  __n128 *v1;

  v1[14] = a1;
  v1[15].n128_u8[0] = 0;
}

void (*OrbitAnimation.axis.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  if ((*(_BYTE *)(v1 + 240) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      RETimelineDefinitionGetAxis();
    else
      v4 = *(_OWORD *)&zmmword_21BE41220[16];
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 224);
  }
  *(_OWORD *)v3 = v4;
  return OrbitAnimation.axis.modify;
}

void OrbitAnimation.axis.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v3 = v1[1];
  v2 = v1[2];
  *(_QWORD *)(v2 + 224) = *v1;
  *(_QWORD *)(v2 + 232) = v3;
  *(_BYTE *)(v2 + 240) = 0;
  free(v1);
}

double OrbitAnimation.startTransform.getter()
{
  uint64_t v0;
  double result;
  double v2;

  if ((*(_BYTE *)(v0 + 304) & 1) == 0)
    return *(double *)(v0 + 256);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
  {
    RETimelineDefinitionGetStartTransform();
    if (one-time initialization token for identity != -1)
    {
      v2 = result;
      swift_once();
      return v2;
    }
  }
  else
  {
    if (one-time initialization token for identity != -1)
      swift_once();
    return 0.00781250185;
  }
  return result;
}

void OrbitAnimation.startTransform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  __n128 *v3;

  v3[16] = a1;
  v3[17] = a2;
  v3[18] = a3;
  v3[19].n128_u8[0] = 0;
}

void (*OrbitAnimation.startTransform.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if ((*(_BYTE *)(v1 + 304) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
    {
      RETimelineDefinitionGetStartTransform();
      if (one-time initialization token for identity != -1)
      {
        v9 = v5;
        v10 = v4;
        v8 = v6;
        swift_once();
        v6 = v8;
        v5 = v9;
        v4 = v10;
      }
    }
    else
    {
      if (one-time initialization token for identity != -1)
        swift_once();
      v4 = xmmword_21BE41210;
      v5 = static simd_quatf.identity;
      v6 = 0uLL;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 256);
    v5 = *(_OWORD *)(v1 + 272);
    v6 = *(_OWORD *)(v1 + 288);
  }
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = v6;
  return OrbitAnimation.startTransform.modify;
}

void OrbitAnimation.startTransform.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v1 = *a1;
  v3 = v1[5];
  v2 = v1[6];
  v4 = *((_OWORD *)v1 + 1);
  v5 = v1[4];
  *(_OWORD *)(v2 + 256) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 272) = v4;
  *(_QWORD *)(v2 + 288) = v5;
  *(_QWORD *)(v2 + 296) = v3;
  *(_BYTE *)(v2 + 304) = 0;
  free(v1);
}

uint64_t OrbitAnimation.spinClockwise.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 305);
  if (v1 != 2)
    return v1 & 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return RETimelineDefinitionGetSpinClockwise();
  return 1;
}

uint64_t OrbitAnimation.spinClockwise.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 305) = result;
  return result;
}

_BYTE *(*OrbitAnimation.spinClockwise.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  char *v2;
  int v3;
  char SpinClockwise;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(unsigned __int8 *)(v1 + 305);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      SpinClockwise = RETimelineDefinitionGetSpinClockwise();
    else
      SpinClockwise = 1;
  }
  else
  {
    SpinClockwise = v3 & 1;
  }
  *v2 = SpinClockwise;
  return OrbitAnimation.spinClockwise.modify;
}

_BYTE *OrbitAnimation.spinClockwise.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 305) = result[8];
  return result;
}

uint64_t OrbitAnimation.orientToPath.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 306);
  if (v1 != 2)
    return v1 & 1;
  result = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  if (result)
    return RETimelineDefinitionGetOrientToPath();
  return result;
}

uint64_t OrbitAnimation.orientToPath.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 306) = result;
  return result;
}

_BYTE *(*OrbitAnimation.orientToPath.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = *(unsigned __int8 *)(v1 + 306);
  if (v3 == 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v4)
      LOBYTE(v4) = RETimelineDefinitionGetOrientToPath();
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *v2 = v4;
  return OrbitAnimation.orientToPath.modify;
}

_BYTE *OrbitAnimation.orientToPath.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 306) = result[8];
  return result;
}

float OrbitAnimation.rotationCount.getter()
{
  uint64_t v0;
  float result;

  if ((*(_BYTE *)(v0 + 312) & 1) == 0)
    return *(float *)(v0 + 308);
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return 1.0;
  RETimelineDefinitionGetRotationCount();
  return result;
}

void OrbitAnimation.rotationCount.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 308) = a1;
  *(_BYTE *)(v1 + 312) = 0;
}

uint64_t *(*OrbitAnimation.rotationCount.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;
  float *v2;
  float v3;

  *a1 = v1;
  v2 = (float *)(a1 + 1);
  if ((*(_BYTE *)(v1 + 312) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      RETimelineDefinitionGetRotationCount();
    else
      v3 = 1.0;
  }
  else
  {
    v3 = *(float *)(v1 + 308);
  }
  *v2 = v3;
  return OrbitAnimation.rotationCount.modify;
}

uint64_t *OrbitAnimation.rotationCount.modify(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_DWORD *)(v1 + 308) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 312) = 0;
  return result;
}

uint64_t OrbitAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_BYTE *)(a1 + 32) = -1;
      *(_DWORD *)(a1 + 36) = 0;
      *(_WORD *)(a1 + 40) = 1;
      *(_BYTE *)(a1 + 42) = 1;
      *(_BYTE *)(a1 + 43) = 2;
      *(_QWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 65) = 1;
      *(_QWORD *)(a1 + 72) = 0;
      *(_BYTE *)(a1 + 80) = 0;
      *(_BYTE *)(a1 + 81) = 1;
      *(_QWORD *)(a1 + 88) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      *(_BYTE *)(a1 + 97) = 1;
      *(_QWORD *)(a1 + 104) = 0;
      *(_BYTE *)(a1 + 112) = 1;
      *(_QWORD *)(a1 + 120) = 0;
      *(_BYTE *)(a1 + 128) = 1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_BYTE *)(a1 + 136) = 1;
      *(_BYTE *)(a1 + 137) = 4;
      *(_QWORD *)(a1 + 144) = v9;
      *(_QWORD *)(a1 + 152) = ClipSourceRef;
      *(_QWORD *)(a1 + 160) = v10;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_WORD *)(a1 + 192) = v16;
      *(_BYTE *)(a1 + 194) = v15;
      *(_BYTE *)(a1 + 195) = v14;
      *(_QWORD *)(a1 + 200) = v12;
      *(_QWORD *)(a1 + 208) = 0;
      *(_BYTE *)(a1 + 216) = 1;
      *(_QWORD *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 232) = 0;
      *(_BYTE *)(a1 + 240) = 1;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_BYTE *)(a1 + 304) = 1;
      *(_WORD *)(a1 + 305) = 514;
      *(_DWORD *)(a1 + 308) = 0;
      *(_BYTE *)(a1 + 312) = 1;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *OrbitAnimation.createResource()()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  void *OrbitAnimation;
  char v9;
  unsigned __int8 v10;
  _QWORD *v11;
  Swift::OpaquePointer v12;
  int v14;
  int v15;
  int v16;
  _OWORD v17[20];
  _QWORD __dst[42];

  memcpy(__dst, v0, 0x139uLL);
  v1 = __dst[2];
  v2 = __dst[3];
  v3 = __dst[4];
  v4 = __dst[6];
  v5 = __dst[27];
  v6 = __dst[30];
  v7 = __dst[38];
  if (__dst[1])
  {
    v14 = LOBYTE(__dst[39]);
    v15 = BYTE1(__dst[38]);
    v16 = BYTE2(__dst[38]);
    outlined retain of OrbitAnimation((uint64_t)__dst);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
    goto LABEL_3;
  }
  if (BYTE3(__dst[5]) == 2)
    v9 = (LOBYTE(__dst[4]) == 255) & __dst[5] & BYTE2(__dst[5]);
  else
    v9 = 0;
  v10 = v9 & __dst[27] & LOBYTE(__dst[30]) & __dst[38];
  if (BYTE1(__dst[38]) != 2)
    v10 = 0;
  if (BYTE2(__dst[38]) != 2)
    v10 = 0;
  if ((v10 & __dst[39] & 1) == 0)
  {
    v14 = LOBYTE(__dst[39]);
    v15 = BYTE1(__dst[38]);
    v16 = BYTE2(__dst[38]);
    if (*(_QWORD *)(__dst[6] + 16))
    {
      outlined retain of OrbitAnimation((uint64_t)__dst);
      outlined copy of BindTarget?(v1, v2, v3);
      swift_retain();
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of OrbitAnimation((uint64_t)__dst);
      outlined copy of BindTarget?(v1, v2, v3);
      swift_retain();
    }
LABEL_3:
    outlined consume of BindTarget?(v1, v2, v3);
    swift_release();
    outlined release of OrbitAnimation((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    OrbitAnimation = (void *)RETimelineDefinitionCreateOrbitAnimation();
    swift_release();
    if ((v5 & 1) != 0 && *(_QWORD *)(v4 + 16))
      RETimelineDefinitionGetDuration();
    RETimelineDefinitionSetDuration();
    if ((v6 & 1) != 0 && *(_QWORD *)(v4 + 16))
      RETimelineDefinitionGetAxis();
    RETimelineDefinitionSetAxis();
    if ((v7 & 1) == 0)
      goto LABEL_29;
    if (*(_QWORD *)(v4 + 16))
    {
      outlined retain of OrbitAnimation((uint64_t)__dst);
      RETimelineDefinitionGetStartTransform();
      if (one-time initialization token for identity == -1)
        goto LABEL_28;
    }
    else
    {
      outlined retain of OrbitAnimation((uint64_t)__dst);
      if (one-time initialization token for identity == -1)
      {
LABEL_28:
        outlined release of OrbitAnimation((uint64_t)__dst);
LABEL_29:
        RETimelineDefinitionSetStartTransform();
        if (v15 == 2 && *(_QWORD *)(v4 + 16))
          RETimelineDefinitionGetSpinClockwise();
        RETimelineDefinitionSetSpinClockwise();
        if (v16 == 2 && *(_QWORD *)(v4 + 16))
          RETimelineDefinitionGetOrientToPath();
        RETimelineDefinitionSetOrientToPath();
        if (v14)
        {
          if (*(_QWORD *)(v4 + 16))
            RETimelineDefinitionGetRotationCount();
        }
        RETimelineDefinitionSetRotationCount();
        memcpy(v17, __dst, 0x139uLL);
        v12._rawValue = OrbitAnimation;
        v11 = OrbitAnimation.createResource(timelineDefinition:)(v12);
        RERelease();
        return v11;
      }
    }
    swift_once();
    goto LABEL_28;
  }
  v17[6] = *(_OWORD *)&__dst[19];
  v17[7] = *(_OWORD *)&__dst[21];
  v17[8] = *(_OWORD *)&__dst[23];
  *(_QWORD *)&v17[9] = __dst[25];
  v17[2] = *(_OWORD *)&__dst[11];
  v17[3] = *(_OWORD *)&__dst[13];
  v17[4] = *(_OWORD *)&__dst[15];
  v17[5] = *(_OWORD *)&__dst[17];
  v17[0] = *(_OWORD *)&__dst[7];
  v17[1] = *(_OWORD *)&__dst[9];
  if (TimelineClipProperties.isClipped.getter())
  {
    v17[6] = *(_OWORD *)&__dst[19];
    v17[7] = *(_OWORD *)&__dst[21];
    v17[8] = *(_OWORD *)&__dst[23];
    *(_QWORD *)&v17[9] = __dst[25];
    v17[2] = *(_OWORD *)&__dst[11];
    v17[3] = *(_OWORD *)&__dst[13];
    v17[4] = *(_OWORD *)&__dst[15];
    v17[5] = *(_OWORD *)&__dst[17];
    v17[0] = *(_OWORD *)&__dst[7];
    v17[1] = *(_OWORD *)&__dst[9];
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      v17[6] = *(_OWORD *)&__dst[19];
      v17[7] = *(_OWORD *)&__dst[21];
      v17[8] = *(_OWORD *)&__dst[23];
      *(_QWORD *)&v17[9] = __dst[25];
      v17[2] = *(_OWORD *)&__dst[11];
      v17[3] = *(_OWORD *)&__dst[13];
      v17[4] = *(_OWORD *)&__dst[15];
      v17[5] = *(_OWORD *)&__dst[17];
      v17[0] = *(_OWORD *)&__dst[7];
      v17[1] = *(_OWORD *)&__dst[9];
      return (_QWORD *)TimelineClipProperties.createClip()();
    }
  }
  return TimelineDefinition.resource.getter();
}

_QWORD *OrbitAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TimelineAsset;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  int v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unsigned __int128 v58;
  unsigned __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unsigned __int128 v68;
  unsigned __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unsigned __int128 v78;
  unsigned __int128 v79;
  __int128 v80;
  uint64_t v81;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_OWORD *)(v1 + 168);
  v78 = *(_OWORD *)(v1 + 152);
  v79 = v3;
  v80 = *(_OWORD *)(v1 + 184);
  v81 = *(_QWORD *)(v1 + 200);
  v4 = *(_OWORD *)(v1 + 104);
  v74 = *(_OWORD *)(v1 + 88);
  v75 = v4;
  v5 = *(_OWORD *)(v1 + 136);
  v76 = *(_OWORD *)(v1 + 120);
  v77 = v5;
  v6 = *(_OWORD *)(v1 + 72);
  v72 = *(_OWORD *)(v1 + 56);
  v73 = v6;
  if (a1._rawValue)
  {
    TimelineBaseProperties.writeProperties(_:)(a1);
    v68 = v78;
    v69 = v79;
    v70 = v80;
    v71 = v81;
    v64 = v74;
    v65 = v75;
    v66 = v76;
    v67 = v77;
    v62 = v72;
    v63 = v73;
    if (!TimelineClipProperties.isClipped.getter())
    {
      type metadata accessor for TimelineDefinition();
      *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
      RERetain();
      v20 = TimelineDefinition.resource.getter();
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
      return v20;
    }
    v49 = v79;
    v50 = *((_QWORD *)&v78 + 1);
    v48 = *((_QWORD *)&v79 + 1);
    v46 = DWORD1(v80);
    v47 = v80;
    v44 = BYTE9(v80);
    v45 = BYTE8(v80);
    v42 = BYTE11(v80);
    v43 = BYTE10(v80);
    v41 = v81;
    v39 = HIDWORD(v76);
    v40 = BYTE1(v77);
    v38 = v77;
    v37 = v76;
    v36 = BYTE8(v76);
    v35 = v75;
    v34 = BYTE8(v75);
    v30 = BYTE9(v74);
    v31 = BYTE8(v74);
    v8 = v73;
    v9 = BYTE8(v73);
    v10 = BYTE9(v73);
    v11 = v72;
    v12 = BYTE8(v72);
    v13 = BYTE9(v72);
    v32 = v74;
    v33 = v78;
    type metadata accessor for TimelineDefinition();
    v14 = swift_allocObject();
    *(Swift::OpaquePointer *)(v14 + 16) = a1;
    outlined retain of TimelineClipProperties((uint64_t)&v72);
    RERetain();
    swift_release();
    *(_QWORD *)&v52 = v11;
    BYTE8(v52) = v12;
    BYTE9(v52) = v13;
    *(_QWORD *)&v53 = v8;
    BYTE8(v53) = v9;
    BYTE9(v53) = v10;
    *(_QWORD *)&v54 = v32;
    BYTE8(v54) = v31;
    BYTE9(v54) = v30;
    *(_QWORD *)&v55 = v35;
    BYTE8(v55) = v34;
    *(_QWORD *)&v56 = v37;
    BYTE8(v56) = v36;
    HIDWORD(v56) = v39;
    LOBYTE(v57) = v38;
    BYTE1(v57) = v40;
    *((_QWORD *)&v57 + 1) = v14;
    v58 = __PAIR128__(v50, v33);
    v59 = __PAIR128__(v48, v49);
    LOBYTE(v60) = v47;
    DWORD1(v60) = v46;
    BYTE8(v60) = v45;
    BYTE9(v60) = v44;
    BYTE10(v60) = v43;
    BYTE11(v60) = v42;
    v61 = v41;
    v71 = v41;
    v69 = __PAIR128__(v48, v49);
    v70 = v60;
    v62 = v52;
    v63 = v53;
    v67 = v57;
    v68 = __PAIR128__(v50, v33);
    v65 = v55;
    v66 = v56;
    v64 = v54;
    outlined retain of TimelineClipProperties((uint64_t)&v52);
    swift_retain();
    closure #1 in TimelineClipProperties.createClip()((uint64_t)&v62, &v51);
    swift_release();
    outlined release of TimelineClipProperties((uint64_t)&v52);
    outlined release of TimelineClipProperties((uint64_t)&v52);
    return (_QWORD *)v51;
  }
  else
  {
    v16 = *(_OWORD *)(v1 + 168);
    v68 = *(_OWORD *)(v1 + 152);
    v69 = v16;
    v70 = *(_OWORD *)(v1 + 184);
    v71 = *(_QWORD *)(v1 + 200);
    v17 = *(_OWORD *)(v1 + 104);
    v64 = *(_OWORD *)(v1 + 88);
    v65 = v17;
    v18 = *(_OWORD *)(v1 + 136);
    v66 = *(_OWORD *)(v1 + 120);
    v67 = v18;
    v19 = *(_OWORD *)(v1 + 72);
    v62 = *(_OWORD *)(v1 + 56);
    v63 = v19;
    if (TimelineClipProperties.isClipped.getter())
    {
      v68 = v78;
      v69 = v79;
      v70 = v80;
      v71 = v81;
      v64 = v74;
      v65 = v75;
      v66 = v76;
      v67 = v77;
      v62 = v72;
      v63 = v73;
      if ((TimelineClipProperties.isModified.getter() & 1) == 0)
        return TimelineDefinition.resource.getter();
      v68 = v78;
      v69 = v79;
      v70 = v80;
      v71 = v81;
      v64 = v74;
      v65 = v75;
      v66 = v76;
      v67 = v77;
      v62 = v72;
      v63 = v73;
      return (_QWORD *)TimelineClipProperties.createClip()();
    }
    else
    {
      v15 = *(_QWORD **)(v2 + 16);
      if (v15)
      {
        v22 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v22, (uint64_t)&v62);
        v23 = *((_QWORD *)&v63 + 1);
        v24 = v64;
        __swift_project_boxed_opaque_existential_1(&v62, *((uint64_t *)&v63 + 1));
        (*(void (**)(uint64_t, uint64_t))(v24 + 32))(v23, v24);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
        TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          v26 = TimelineAsset;
          RETimelineDefinitionGetName();
          v27 = String.init(cString:)();
          v29 = v28;
          type metadata accessor for AnimationResource();
          v15 = (_QWORD *)swift_allocObject();
          v15[2] = v26;
          v15[3] = v27;
          v15[4] = v29;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v15;
}

uint64_t protocol witness for AnimationDefinition.name.getter in conformance OrbitAnimation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  if (*(_QWORD *)(v0 + 8))
  {
    v4 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance OrbitAnimation(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)OrbitAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance OrbitAnimation()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 40) != 1)
    return *(unsigned int *)(v0 + 36);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance OrbitAnimation(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.blendLayer.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.fillMode.getter in conformance OrbitAnimation@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 42) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 41);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance OrbitAnimation(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 41) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.fillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance OrbitAnimation(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance OrbitAnimation()
{
  return OrbitAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance OrbitAnimation(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  *(_BYTE *)(v2 + 65) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.trimStart.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance OrbitAnimation()
{
  return OrbitAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance OrbitAnimation(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  *(_BYTE *)(v2 + 81) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.trimEnd.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance OrbitAnimation()
{
  return OrbitAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance OrbitAnimation(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  *(_BYTE *)(v2 + 97) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.trimDuration.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.offset.setter in conformance OrbitAnimation(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 104) = a1;
  *(_BYTE *)(v1 + 112) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.offset.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.delay.setter in conformance OrbitAnimation(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 120) = a1;
  *(_BYTE *)(v1 + 128) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.delay.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.speed.setter in conformance OrbitAnimation(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 132) = a1;
  *(_BYTE *)(v1 + 136) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.speed.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_BYTE *protocol witness for AnimationDefinition.repeatMode.setter in conformance OrbitAnimation(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 137) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance OrbitAnimation(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.repeatMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

double protocol witness for AnimationDefinition.duration.getter in conformance OrbitAnimation()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 216) & 1) == 0)
    return *(double *)(v0 + 208);
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return 0.0;
  RETimelineDefinitionGetDuration();
  return result;
}

_QWORD *protocol witness for AnimationDefinitionInternal.generate() in conformance OrbitAnimation()
{
  _QWORD *result;
  uint64_t v1;

  result = OrbitAnimation.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v1 = 0xD00000000000001CLL;
    *(_QWORD *)(v1 + 8) = 0x800000021BE822D0;
    *(_BYTE *)(v1 + 16) = 0;
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

uint64_t sub_21BB78184(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_21BB781C4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 40) == 1)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    result = *(unsigned int *)(a1 + 36);
  }
  *a2 = result;
  return result;
}

_DWORD *sub_21BB78208(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) = *result;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

double sub_21BB78218@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  OrbitAnimation.bindTarget.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_21BB7825C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 42) == 1)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(a1 + 41);
  }
  *a2 = result;
  return result;
}

unsigned __int8 *sub_21BB782A0(unsigned __int8 *result, uint64_t a2)
{
  *(_WORD *)(a2 + 41) = *result;
  return result;
}

uint64_t sub_21BB782B0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 43);
  if (v3 == 2)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
    if (result)
      result = RETimelineDefinitionIsAdditive();
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21BB782F4(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 43) = *result;
  return result;
}

uint64_t sub_21BB78300@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = OrbitAnimation.trimStart.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BB78330(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)result;
  *(_WORD *)(a2 + 64) = v2;
  return result;
}

uint64_t sub_21BB78348@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = OrbitAnimation.trimEnd.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BB78378(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)result;
  *(_WORD *)(a2 + 80) = v2;
  return result;
}

uint64_t sub_21BB78390@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = OrbitAnimation.trimDuration.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BB783C0(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)result;
  *(_WORD *)(a2 + 96) = v2;
  return result;
}

void sub_21BB783D8(double *a1@<X8>)
{
  *a1 = OrbitAnimation.offset.getter();
}

_QWORD *sub_21BB78400(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 104) = *result;
  *(_BYTE *)(a2 + 112) = 0;
  return result;
}

void sub_21BB78410(double *a1@<X8>)
{
  *a1 = OrbitAnimation.delay.getter();
}

_QWORD *sub_21BB78438(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 120) = *result;
  *(_BYTE *)(a2 + 128) = 0;
  return result;
}

void sub_21BB78448(float *a1@<X8>)
{
  *a1 = OrbitAnimation.speed.getter();
}

_DWORD *sub_21BB78470(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 132) = *result;
  *(_BYTE *)(a2 + 136) = 0;
  return result;
}

void sub_21BB78480(_BYTE *a1@<X8>)
{
  char v2;

  OrbitAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

_BYTE *sub_21BB784B8(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 137) = *result;
  return result;
}

uint64_t sub_21BB784C4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  if ((*(_BYTE *)(result + 216) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(result + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetDuration();
    else
      v3 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(result + 208);
  }
  *a2 = v3;
  return result;
}

_QWORD *sub_21BB7850C(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 208) = *result;
  *(_BYTE *)(a2 + 216) = 0;
  return result;
}

uint64_t sub_21BB7851C@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  if ((*(_BYTE *)(result + 240) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(result + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetAxis();
    else
      v3 = *(_OWORD *)&zmmword_21BE41220[16];
  }
  else
  {
    v3 = *(_OWORD *)(result + 224);
  }
  *a2 = v3;
  return result;
}

_QWORD *sub_21BB78570(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[1];
  *(_QWORD *)(a2 + 224) = *result;
  *(_QWORD *)(a2 + 232) = v2;
  *(_BYTE *)(a2 + 240) = 0;
  return result;
}

void sub_21BB78580(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(double *)&v2 = OrbitAnimation.startTransform.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
}

__n128 sub_21BB785AC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 256) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 272) = v3;
  *(_QWORD *)(a2 + 288) = v5;
  *(_QWORD *)(a2 + 296) = v4;
  *(_BYTE *)(a2 + 304) = 0;
  return result;
}

uint64_t sub_21BB785C4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 305);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16))
      result = RETimelineDefinitionGetSpinClockwise();
    else
      result = 1;
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21BB78610(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 305) = *result;
  return result;
}

uint64_t sub_21BB7861C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 306);
  if (v3 == 2)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetOrientToPath();
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21BB78660(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 306) = *result;
  return result;
}

uint64_t sub_21BB7866C@<X0>(uint64_t result@<X0>, float *a2@<X8>)
{
  float v3;

  if ((*(_BYTE *)(result + 312) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(result + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetRotationCount();
    else
      v3 = 1.0;
  }
  else
  {
    v3 = *(float *)(result + 308);
  }
  *a2 = v3;
  return result;
}

_DWORD *sub_21BB786B4(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 308) = *result;
  *(_BYTE *)(a2 + 312) = 0;
  return result;
}

uint64_t destroy for OrbitAnimation(uint64_t a1)
{
  int v2;
  int v3;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v3);
  return swift_release();
}

uint64_t initializeWithCopy for OrbitAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    outlined copy of BindTarget(v6, v7, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v10 = *(unsigned __int8 *)(a2 + 184);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 168);
    v12 = *(_QWORD *)(a2 + 176);
    outlined copy of BindTarget(v11, v12, v10);
    *(_QWORD *)(a1 + 168) = v11;
    *(_QWORD *)(a1 + 176) = v12;
    *(_BYTE *)(a1 + 184) = v10;
  }
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  v13 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v13;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_WORD *)(a1 + 305) = *(_WORD *)(a2 + 305);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OrbitAnimation(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 16);
  v5 = (__int128 *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      v15 = *v5;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *v4 = v15;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      outlined copy of BindTarget(v12, v13, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_BYTE *)(a1 + 32) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
    v14 = *(_BYTE *)(a2 + 32);
    *v4 = *v5;
    *(_BYTE *)(a1 + 32) = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of BindTarget(v7, v8, *(_BYTE *)(a2 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v11 = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v6;
    outlined consume of BindTarget(v9, v10, v11);
  }
  v16 = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v16;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v17 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v17;
  v18 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v18;
  v19 = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v19;
  v20 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v20;
  v21 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (__int128 *)(a1 + 168);
  v23 = (__int128 *)(a2 + 168);
  v24 = *(unsigned __int8 *)(a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v24 == 255)
    {
      v33 = *v23;
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *v22 = v33;
    }
    else
    {
      v30 = *(_QWORD *)(a2 + 168);
      v31 = *(_QWORD *)(a2 + 176);
      outlined copy of BindTarget(v30, v31, *(_BYTE *)(a2 + 184));
      *(_QWORD *)(a1 + 168) = v30;
      *(_QWORD *)(a1 + 176) = v31;
      *(_BYTE *)(a1 + 184) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    v32 = *(_BYTE *)(a2 + 184);
    *v22 = *v23;
    *(_BYTE *)(a1 + 184) = v32;
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 176);
    outlined copy of BindTarget(v25, v26, *(_BYTE *)(a2 + 184));
    v27 = *(_QWORD *)(a1 + 168);
    v28 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = v25;
    *(_QWORD *)(a1 + 176) = v26;
    v29 = *(_BYTE *)(a1 + 184);
    *(_BYTE *)(a1 + 184) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  v34 = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v34;
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_retain();
  swift_release();
  v35 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v35;
  v36 = *(_OWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = v36;
  v37 = *(_OWORD *)(a2 + 256);
  v38 = *(_OWORD *)(a2 + 272);
  v39 = *(_OWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_OWORD *)(a1 + 272) = v38;
  *(_OWORD *)(a1 + 288) = v39;
  *(_OWORD *)(a1 + 256) = v37;
  *(_BYTE *)(a1 + 305) = *(_BYTE *)(a2 + 305);
  *(_BYTE *)(a1 + 306) = *(_BYTE *)(a2 + 306);
  LODWORD(v35) = *(_DWORD *)(a2 + 308);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_DWORD *)(a1 + 308) = v35;
  return a1;
}

void *__swift_memcpy313_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x139uLL);
}

uint64_t assignWithTake for OrbitAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 32);
    if (v7 != 255)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v5;
      *(_BYTE *)(a1 + 32) = v7;
      outlined consume of BindTarget(v8, v9, v6);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
LABEL_6:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  v12 = (_OWORD *)(a2 + 168);
  v13 = *(unsigned __int8 *)(a1 + 184);
  if (v13 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 168) = *v12;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    goto LABEL_11;
  }
  v14 = *(unsigned __int8 *)(a2 + 184);
  if (v14 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *v12;
  *(_BYTE *)(a1 + 184) = v14;
  outlined consume of BindTarget(v15, v16, v13);
LABEL_11:
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_release();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v17 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v17;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  *(_BYTE *)(a1 + 306) = *(_BYTE *)(a2 + 306);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrbitAnimation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 313))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrbitAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 313) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 313) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrbitAnimation()
{
  return &type metadata for OrbitAnimation;
}

uint64_t outlined retain of OrbitAnimation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRetain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_retain();
  return a1;
}

uint64_t outlined release of OrbitAnimation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  return a1;
}

BOOL static TweenMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TweenMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TweenMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t SampledAnimation.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  if (*(_QWORD *)(v0 + 8))
  {
    v4 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path setter for SampledAnimation.name : <A>SampledAnimation<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return SampledAnimation.name.setter(v1, v2);
}

uint64_t SampledAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SampledAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  const void *v1;
  uint64_t v3;
  _BYTE v5[288];

  a1[2] = (uint64_t)v1;
  memcpy(v5, v1, sizeof(v5));
  *a1 = SampledAnimation.name.getter();
  a1[1] = v3;
  return BlendTreeAnimation.name.modify;
}

uint64_t SampledAnimation.blendLayer.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 40) != 1)
    return *(unsigned int *)(v0 + 36);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t SampledAnimation.blendLayer.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t *(*SampledAnimation.blendLayer.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v3)
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 36);
  }
  *v2 = v3;
  return BlendTreeAnimation.blendLayer.modify;
}

uint64_t SampledAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 32);
  if (v5 == 255)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = v11;
      v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v9 = 0;
      v8 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  return swift_release();
}

double key path getter for SampledAnimation.bindTarget : <A>SampledAnimation<A>@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  SampledAnimation.bindTarget.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for SampledAnimation.bindTarget : <A>SampledAnimation<A>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v4[2];
  unsigned __int8 v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 16);
  v4[0] = *(_QWORD *)a1;
  v4[1] = v1;
  v5 = v2;
  outlined copy of BindTarget(v4[0], v1, v2);
  return SampledAnimation.bindTarget.setter(v4);
}

uint64_t SampledAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*SampledAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  const void *v1;
  _BYTE v4[288];

  *(_QWORD *)(a1 + 24) = v1;
  memcpy(v4, v1, sizeof(v4));
  SampledAnimation.bindTarget.getter(a1);
  return BlendTreeAnimation.bindTarget.modify;
}

uint64_t SampledAnimation.fillMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 42) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 41);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *SampledAnimation.fillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 41) = *result;
  return result;
}

unsigned __int8 *(*SampledAnimation.fillMode.modify(_QWORD *a1))(unsigned __int8 *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 42) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v3)
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)(v1 + 41);
  }
  *v2 = v3;
  return BlendTreeAnimation.fillMode.modify;
}

uint64_t SampledAnimation.additive.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 43);
  if (v1 != 2)
    return v1 & 1;
  result = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  if (result)
    return RETimelineDefinitionIsAdditive();
  return result;
}

uint64_t SampledAnimation.additive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 43) = result;
  return result;
}

_BYTE *(*SampledAnimation.additive.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = *(unsigned __int8 *)(v1 + 43);
  if (v3 == 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v4)
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *v2 = v4;
  return BlendTreeAnimation.isAdditive.modify;
}

uint64_t SampledAnimation.trimStart.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipStart;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 168);
  v8[6] = *(_OWORD *)(v0 + 152);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v8[4] = *(_OWORD *)(v0 + 120);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0)
    return *(_QWORD *)&v8[0];
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t SampledAnimation.trimStart.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  *(_BYTE *)(v2 + 65) = 0;
  return result;
}

uint64_t (*SampledAnimation.trimStart.modify(uint64_t a1))(uint64_t result)
{
  const void *v1;
  char v3;
  _BYTE v5[288];

  *(_QWORD *)(a1 + 16) = v1;
  memcpy(v5, v1, sizeof(v5));
  *(_QWORD *)a1 = SampledAnimation.trimStart.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimStart.modify;
}

uint64_t SampledAnimation.trimEnd.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipEnd;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_OWORD *)(v0 + 168);
  v14 = *(_OWORD *)(v0 + 152);
  v15 = v1;
  v16 = *(_OWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v10 = *(_OWORD *)(v0 + 88);
  v11 = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v12 = *(_OWORD *)(v0 + 120);
  v13 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8 = *(_OWORD *)(v0 + 56);
  v9 = v4;
  if ((BYTE9(v4) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t SampledAnimation.trimEnd.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  *(_BYTE *)(v2 + 81) = 0;
  return result;
}

uint64_t (*SampledAnimation.trimEnd.modify(uint64_t a1))(uint64_t result)
{
  const void *v1;
  char v3;
  _BYTE v5[288];

  *(_QWORD *)(a1 + 16) = v1;
  memcpy(v5, v1, sizeof(v5));
  *(_QWORD *)a1 = SampledAnimation.trimEnd.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimEnd.modify;
}

uint64_t SampledAnimation.trimDuration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *ClipDuration;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_OWORD *)(v0 + 88);
  v2 = *(_OWORD *)(v0 + 168);
  v14 = *(_OWORD *)(v0 + 152);
  v15 = v2;
  v16 = *(_OWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v3 = *(_OWORD *)(v0 + 104);
  v10 = v1;
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 136);
  v12 = *(_OWORD *)(v0 + 120);
  v13 = v4;
  v5 = *(_OWORD *)(v0 + 72);
  v9[0] = *(_OWORD *)(v0 + 56);
  v9[1] = v5;
  if ((BYTE9(v1) & 1) == 0)
    return v10;
  v6 = *(_QWORD *)(v17 + 16);
  if (v6)
  {
    outlined retain of TimelineClipProperties((uint64_t)v9);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      v6 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v9);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v9);
      return 0;
    }
  }
  return v6;
}

uint64_t SampledAnimation.trimDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  *(_BYTE *)(v2 + 97) = 0;
  return result;
}

uint64_t (*SampledAnimation.trimDuration.modify(uint64_t a1))(uint64_t result)
{
  const void *v1;
  char v3;
  _BYTE v5[288];

  *(_QWORD *)(a1 + 16) = v1;
  memcpy(v5, v1, sizeof(v5));
  *(_QWORD *)a1 = SampledAnimation.trimDuration.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimDuration.modify;
}

double SampledAnimation.offset.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_OWORD *)(v0 + 168);
  v12 = *(_OWORD *)(v0 + 152);
  v13 = v1;
  v14 = *(_OWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v9 = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v10 = *(_OWORD *)(v0 + 120);
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void SampledAnimation.offset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 104) = a1;
  *(_BYTE *)(v1 + 112) = 0;
}

double (*SampledAnimation.offset.modify(uint64_t a1))(uint64_t a1)
{
  const void *v1;
  _BYTE v4[288];

  *(_QWORD *)(a1 + 8) = v1;
  memcpy(v4, v1, sizeof(v4));
  *(double *)a1 = SampledAnimation.offset.getter();
  return BlendTreeAnimation.offset.modify;
}

double SampledAnimation.delay.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 168);
  v11 = *(_OWORD *)(v0 + 152);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v9 = *(_OWORD *)(v0 + 120);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void SampledAnimation.delay.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 120) = a1;
  *(_BYTE *)(v1 + 128) = 0;
}

double (*SampledAnimation.delay.modify(uint64_t a1))(uint64_t a1)
{
  const void *v1;
  _BYTE v4[288];

  *(_QWORD *)(a1 + 8) = v1;
  memcpy(v4, v1, sizeof(v4));
  *(double *)a1 = SampledAnimation.delay.getter();
  return BlendTreeAnimation.delay.modify;
}

float SampledAnimation.speed.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 168);
  v11 = *(_OWORD *)(v0 + 152);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v9 = *(_OWORD *)(v0 + 120);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((v10 & 1) == 0)
    return *((float *)&v9 + 3);
  v5 = 1.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void SampledAnimation.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 132) = a1;
  *(_BYTE *)(v1 + 136) = 0;
}

float (*SampledAnimation.speed.modify(uint64_t a1))(float *a1)
{
  const void *v1;
  _BYTE v4[288];

  *(_QWORD *)a1 = v1;
  memcpy(v4, v1, sizeof(v4));
  *(float *)(a1 + 8) = SampledAnimation.speed.getter();
  return BlendTreeAnimation.speed.modify;
}

void SampledAnimation.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int ClipLoopBehavior;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 168);
  v11 = *(_OWORD *)(v1 + 152);
  v12 = v3;
  v13 = *(_OWORD *)(v1 + 184);
  v14 = *(_QWORD *)(v1 + 200);
  v4 = *(_OWORD *)(v1 + 104);
  v9[2] = *(_OWORD *)(v1 + 88);
  v9[3] = v4;
  v5 = *(_OWORD *)(v1 + 136);
  v9[4] = *(_OWORD *)(v1 + 120);
  v10 = v5;
  v6 = *(_OWORD *)(v1 + 72);
  v9[0] = *(_OWORD *)(v1 + 56);
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    v7 = *(_QWORD *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

_BYTE *SampledAnimation.repeatMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 137) = *result;
  return result;
}

_BYTE *(*SampledAnimation.repeatMode.modify(_QWORD *a1))(_BYTE *result)
{
  const void *v1;
  _BYTE *v2;
  _BYTE v4[288];

  *a1 = v1;
  v2 = a1 + 1;
  memcpy(v4, v1, sizeof(v4));
  SampledAnimation.repeatMode.getter(v2);
  return BlendTreeAnimation.repeatMode.modify;
}

uint64_t SampledAnimation.tweenMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(v1 + 208);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      result = RETimelineDefinitionGetInterpolationEnabled();
    else
      result = 1;
  }
  else
  {
    result = v3 & 1;
  }
  *a1 = result;
  return result;
}

_BYTE *SampledAnimation.tweenMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 208) = *result;
  return result;
}

_BYTE *(*SampledAnimation.tweenMode.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  char *v2;
  int v3;
  char InterpolationEnabled;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(unsigned __int8 *)(v1 + 208);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      InterpolationEnabled = RETimelineDefinitionGetInterpolationEnabled();
    else
      InterpolationEnabled = 1;
  }
  else
  {
    InterpolationEnabled = v3 & 1;
  }
  *v2 = InterpolationEnabled;
  return SampledAnimation.tweenMode.modify;
}

_BYTE *SampledAnimation.tweenMode.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 208) = result[8];
  return result;
}

float SampledAnimation.frameInterval.getter()
{
  uint64_t v0;
  float result;

  if ((*(_BYTE *)(v0 + 216) & 1) == 0)
    return *(float *)(v0 + 212);
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return 0.033333;
  RETimelineDefinitionGetFrameInterval();
  return result;
}

void SampledAnimation.frameInterval.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 212) = a1;
  *(_BYTE *)(v1 + 216) = 0;
}

float (*SampledAnimation.frameInterval.modify(_QWORD *a1))(float *a1)
{
  uint64_t v1;
  int *v2;
  int v3;

  *a1 = v1;
  v2 = (int *)(a1 + 1);
  if ((*(_BYTE *)(v1 + 216) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      RETimelineDefinitionGetFrameInterval();
    else
      v3 = 1023969417;
  }
  else
  {
    v3 = *(_DWORD *)(v1 + 212);
  }
  *v2 = v3;
  return SampledAnimation.frameInterval.modify;
}

float SampledAnimation.frameInterval.modify(float *a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)a1;
  result = a1[2];
  *(float *)(v1 + 212) = result;
  *(_BYTE *)(v1 + 216) = 0;
  return result;
}

double SampledAnimation.start.getter()
{
  uint64_t v0;
  float v1;

  if ((*(_BYTE *)(v0 + 240) & 1) == 0)
    return *(double *)(v0 + 232);
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return 0.0;
  RETimelineDefinitionGetStartTime();
  return v1;
}

void SampledAnimation.start.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 232) = a1;
  *(_BYTE *)(v1 + 240) = 0;
}

double (*SampledAnimation.start.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  double v3;
  float v4;

  *(_QWORD *)(a1 + 8) = v1;
  if ((*(_BYTE *)(v1 + 240) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
    {
      RETimelineDefinitionGetStartTime();
      v3 = v4;
    }
    else
    {
      v3 = 0.0;
    }
  }
  else
  {
    v3 = *(double *)(v1 + 232);
  }
  *(double *)a1 = v3;
  return SampledAnimation.start.modify;
}

double SampledAnimation.start.modify(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)(v1 + 232) = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 240) = 0;
  return result;
}

double specialized SampledAnimation.end.getter(uint64_t *a1)
{
  uint64_t v1;
  float v3;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(v1 + 256) & 1) == 0)
    return *(double *)(v1 + 248);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
  {
    RETimelineDefinitionGetEndTime();
    return v3;
  }
  else
  {
    outlined init with take of Transform?(v1 + 224, (uint64_t)&v7, a1);
    outlined init with take of Transform?((uint64_t)&v7, (uint64_t)&v8, a1);
    if (v8)
      v5 = (double)*(uint64_t *)(v8 + 16);
    else
      v5 = 0.0;
    v6 = *(float *)(v1 + 212);
    if (*(_BYTE *)(v1 + 216))
      v6 = 0.0333333351;
    return v5 * v6;
  }
}

uint64_t SampledAnimation.end.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if ((*(_BYTE *)(v1 + 256) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 48);
    if (*(_QWORD *)(v2 + 16))
      return RETimelineDefinitionGetEndTime();
    v3 = *(_BYTE *)(v1 + 216);
    if (*(_QWORD *)(v1 + 224))
    {
      result = MEMORY[0x220768FCC](*(_QWORD *)(v1 + 224), *(_QWORD *)(result + 16));
      if ((v3 & 1) == 0)
        return result;
    }
    else if ((*(_BYTE *)(v1 + 216) & 1) == 0)
    {
      return result;
    }
    result = *(_QWORD *)(v2 + 16);
    if (result)
      return RETimelineDefinitionGetFrameInterval();
  }
  return result;
}

void SampledAnimation.end.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 248) = a1;
  *(_BYTE *)(v1 + 256) = 0;
}

double (*SampledAnimation.end.modify(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  const void *v2;
  uint64_t v5;
  _BYTE v7[288];

  a1[1] = v2;
  memcpy(v7, v2, sizeof(v7));
  SampledAnimation.end.getter(a2);
  *a1 = v5;
  return SampledAnimation.end.modify;
}

double SampledAnimation.end.modify(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)(v1 + 248) = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 256) = 0;
  return result;
}

void SampledAnimation.duration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 248) = a1;
  *(_BYTE *)(v1 + 256) = 0;
}

double (*SampledAnimation.duration.modify(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  const void *v2;
  uint64_t v5;
  _BYTE v7[288];

  a1[1] = v2;
  memcpy(v7, v2, sizeof(v7));
  SampledAnimation.end.getter(a2);
  *a1 = v5;
  return SampledAnimation.end.modify;
}

uint64_t SampledAnimation.init(frames:name:tweenMode:frameInterval:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, char *a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v39[2];
  char v40;
  char v41;
  char v42;
  char v43[8];
  _OWORD v44[9];
  uint64_t v45;
  char v46[10];

  v26 = *a4;
  v27 = *a6;
  v28 = a6[1];
  v29 = *((_BYTE *)a6 + 16);
  v30 = *a8;
  v31 = *a14;
  v39[0] = 0;
  v39[1] = 0;
  v40 = -1;
  v46[0] = v30;
  v43[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v39, 0, v46, v43, a15, a16 & 1, (uint64_t)v44, a11, a12, a13, a17, a18 & 1, a19, a20 & 1);
  type metadata accessor for TimelineDefinition();
  v32 = swift_allocObject();
  v33 = v44[7];
  *(_OWORD *)(a9 + 152) = v44[6];
  *(_OWORD *)(a9 + 168) = v33;
  *(_OWORD *)(a9 + 184) = v44[8];
  v34 = v44[3];
  *(_OWORD *)(a9 + 88) = v44[2];
  *(_OWORD *)(a9 + 104) = v34;
  v35 = v44[5];
  *(_OWORD *)(a9 + 120) = v44[4];
  *(_OWORD *)(a9 + 136) = v35;
  v36 = v44[1];
  *(_OWORD *)(a9 + 56) = v44[0];
  *(_QWORD *)(v32 + 16) = 0;
  v43[0] = 0;
  v42 = 1;
  v41 = 1;
  *(_QWORD *)a9 = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = v27;
  *(_QWORD *)(a9 + 24) = v28;
  *(_BYTE *)(a9 + 32) = v29;
  *(_DWORD *)(a9 + 36) = a7;
  *(_BYTE *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 41) = v31;
  *(_BYTE *)(a9 + 42) = 0;
  *(_BYTE *)(a9 + 43) = a5;
  *(_QWORD *)(a9 + 48) = v32;
  *(_QWORD *)(a9 + 200) = v45;
  *(_OWORD *)(a9 + 72) = v36;
  *(_BYTE *)(a9 + 208) = v26;
  *(float *)(a9 + 212) = a10;
  *(_BYTE *)(a9 + 216) = v43[0];
  *(_QWORD *)(a9 + 224) = a1;
  *(_QWORD *)(a9 + 232) = 0;
  *(_BYTE *)(a9 + 240) = v42;
  *(_QWORD *)(a9 + 248) = 0;
  *(_BYTE *)(a9 + 256) = v41;
  *(_QWORD *)(a9 + 264) = 0;
  *(_WORD *)(a9 + 272) = 514;
  *(_BYTE *)(a9 + 274) = 2;
  *(_QWORD *)(a9 + 280) = 0;
  return swift_bridgeObjectRetain();
}

_QWORD *SampledAnimation.createResource()()
{
  const void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t, uint64_t);
  void (*v4)(void *, uint64_t, _QWORD);
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE v9[288];
  _BYTE v10[288];
  _BYTE v11[288];
  _BYTE v12[288];
  _BYTE v13[288];
  _BYTE __src[288];
  _BYTE v15[288];
  _BYTE __dst[288];

  memcpy(__dst, v0, sizeof(__dst));
  memcpy(v15, v0, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Float>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24FC8];
    v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE251F8];
    v3 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    v4 = (void (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE25468];
    v5 = (uint64_t *)&demangling cache variable for type metadata for [Float]?;
LABEL_13:
    v6 = SampledAnimation<>.createResource()(v1, v2, v3, v4, v5);
    goto LABEL_14;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Double>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24FA8];
    v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE25160];
    v3 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    v4 = (void (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE253C8];
    v5 = (uint64_t *)&demangling cache variable for type metadata for [Double]?;
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD2<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24FB0];
    v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE25198];
    v3 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    v4 = (void (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE25408];
    v5 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Float>]?;
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD3<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24FB8];
    v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE251B8];
    v3 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    v4 = (void (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE25428];
    v5 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Float>]?;
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD4<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24FC0];
    v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE251D8];
    v3 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    v4 = (void (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE25448];
    v5 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Float>]?;
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<simd_quatf>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24FD0];
    v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE25238];
    v3 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    v4 = (void (*)(void *, uint64_t, _QWORD))MEMORY[0x24BE254A8];
    v5 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatf]?;
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Transform>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    v6 = SampledAnimation<>.createResource()();
  }
  else
  {
    memcpy(v15, __dst, sizeof(v15));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<JointTransforms>);
    if (swift_dynamicCast())
    {
      memcpy(v12, __src, sizeof(v12));
      outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
      memcpy(v11, __dst, sizeof(v11));
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      swift_dynamicCast();
      memcpy(v13, v10, sizeof(v13));
      memcpy(v9, v10, sizeof(v9));
      v6 = SampledAnimation<>.createResource()();
    }
    else
    {
      memcpy(v15, __dst, sizeof(v15));
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<BlendShapeWeights>);
      if ((swift_dynamicCast() & 1) == 0)
        return 0;
      memcpy(v12, __src, sizeof(v12));
      outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
      memcpy(v11, __dst, sizeof(v11));
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      swift_dynamicCast();
      memcpy(v13, v10, sizeof(v13));
      memcpy(v9, v10, sizeof(v9));
      v6 = SampledAnimation<>.createResource()();
    }
  }
LABEL_14:
  v7 = v6;
  outlined release of SampledAnimation<simd_quatf>((uint64_t)v13);
  return v7;
}

_QWORD *SampledAnimation<>.createResource()(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(void *, uint64_t, _QWORD), uint64_t *a5)
{
  __int128 *v5;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ValueCount;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::OpaquePointer v26;
  _QWORD __dst[36];
  _BYTE v30[13];
  char v31;
  char v32;
  char v33;
  _BYTE v34[8];
  _BYTE v35[16];
  _BYTE v36[16];
  _BYTE v37[7];
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  _BYTE v44[2];
  _BYTE v45[8];
  _BYTE v46[24];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[20];
  _BYTE v57[8];
  _BYTE v58[2];
  char v59;
  char v60;
  _BYTE v61[8];
  _BYTE v62[16];
  _BYTE v63[16];
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  _QWORD v68[3];

  memcpy(__dst, v5, sizeof(__dst));
  v11 = v5[1];
  v39 = *v5;
  v40 = v11;
  v41 = v5[2];
  v42 = *((_QWORD *)v5 + 6);
  v12 = __dst[28];
  if (*((_QWORD *)&v39 + 1))
  {
    v13 = v42;
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v39);
  }
  else
  {
    outlined init with take of Transform?((uint64_t)&v40, (uint64_t)v46, &demangling cache variable for type metadata for BindTarget?);
    outlined init with take of Transform?((uint64_t)v46, (uint64_t)v56, &demangling cache variable for type metadata for BindTarget?);
    if (v56[16] == 255)
    {
      outlined init with take of Transform?((uint64_t)&v41 + 4, (uint64_t)v45, &demangling cache variable for type metadata for Int32?);
      outlined init with take of Transform?((uint64_t)v45, (uint64_t)v57, &demangling cache variable for type metadata for Int32?);
      if (v57[4] == 1)
      {
        outlined init with take of Transform?((uint64_t)&v41 + 9, (uint64_t)v44, &demangling cache variable for type metadata for AnimationFillMode?);
        outlined init with take of Transform?((uint64_t)v44, (uint64_t)v58, &demangling cache variable for type metadata for AnimationFillMode?);
        if (v58[1] == 1)
        {
          outlined init with take of Transform?((uint64_t)&v41 + 11, (uint64_t)&v43, &demangling cache variable for type metadata for Bool?);
          outlined init with take of Transform?((uint64_t)&v43, (uint64_t)&v59, &demangling cache variable for type metadata for Bool?);
          if (v59 == 2)
          {
            outlined init with take of Transform?((uint64_t)&__dst[26], (uint64_t)&v38, &demangling cache variable for type metadata for TweenMode?);
            outlined init with take of Transform?((uint64_t)&v38, (uint64_t)&v60, &demangling cache variable for type metadata for TweenMode?);
            if (v60 == 2)
            {
              outlined init with take of Transform?((uint64_t)&__dst[26] + 4, (uint64_t)v37, &demangling cache variable for type metadata for Float?);
              outlined init with take of Transform?((uint64_t)v37, (uint64_t)v61, &demangling cache variable for type metadata for Float?);
              if (v61[4] == 1 && !v12)
              {
                outlined init with take of Transform?((uint64_t)&__dst[29], (uint64_t)v36, &demangling cache variable for type metadata for Double?);
                outlined init with take of Transform?((uint64_t)v36, (uint64_t)v62, &demangling cache variable for type metadata for Double?);
                if (v62[8] == 1)
                {
                  outlined init with take of Transform?((uint64_t)&__dst[31], (uint64_t)v35, &demangling cache variable for type metadata for Double?);
                  outlined init with take of Transform?((uint64_t)v35, (uint64_t)v63, &demangling cache variable for type metadata for Double?);
                  if (v63[8] == 1)
                  {
                    outlined init with take of Transform?((uint64_t)&__dst[33], (uint64_t)v34, &demangling cache variable for type metadata for [String]?);
                    outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v64, &demangling cache variable for type metadata for [String]?);
                    if (!v64)
                    {
                      outlined init with take of Transform?((uint64_t)&__dst[34], (uint64_t)&v33, &demangling cache variable for type metadata for Bool?);
                      outlined init with take of Transform?((uint64_t)&v33, (uint64_t)&v65, &demangling cache variable for type metadata for Bool?);
                      if (v65 == 2)
                      {
                        outlined init with take of Transform?((uint64_t)&__dst[34] + 1, (uint64_t)&v32, &demangling cache variable for type metadata for Bool?);
                        outlined init with take of Transform?((uint64_t)&v32, (uint64_t)&v66, &demangling cache variable for type metadata for Bool?);
                        if (v66 == 2)
                        {
                          outlined init with take of Transform?((uint64_t)&__dst[34] + 2, (uint64_t)&v31, &demangling cache variable for type metadata for Bool?);
                          outlined init with take of Transform?((uint64_t)&v31, (uint64_t)&v67, &demangling cache variable for type metadata for Bool?);
                          if (v67 == 2)
                          {
                            outlined init with take of Transform?((uint64_t)&__dst[35], (uint64_t)v30, &demangling cache variable for type metadata for [String]?);
                            outlined init with take of Transform?((uint64_t)v30, (uint64_t)v68, &demangling cache variable for type metadata for [String]?);
                            if (!v68[0])
                            {
                              v53 = *(_OWORD *)&__dst[19];
                              v54 = *(_OWORD *)&__dst[21];
                              v55 = *(_OWORD *)&__dst[23];
                              v49 = *(_OWORD *)&__dst[11];
                              v50 = *(_OWORD *)&__dst[13];
                              v51 = *(_OWORD *)&__dst[15];
                              v52 = *(_OWORD *)&__dst[17];
                              v47 = *(_OWORD *)&__dst[7];
                              v48 = *(_OWORD *)&__dst[9];
                              if (TimelineClipProperties.isClipped.getter()
                                && (TimelineClipProperties.isModified.getter() & 1) != 0)
                              {
                                return (_QWORD *)TimelineClipProperties.createClip()();
                              }
                              else
                              {
                                return TimelineDefinition.resource.getter();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v13 = v42;
    if (*(_QWORD *)(v42 + 16))
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v39);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v39);
    }
  }
  swift_bridgeObjectRetain();
  outlined release of TimelineBaseProperties((uint64_t)&v39);
  outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
  v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v15 = (void *)a1(v14 + 32);
  swift_release();
  if (!v12)
  {
    v17 = *(_QWORD *)(v13 + 16);
    if (v17)
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      ValueCount = RETimelineDefinitionGetValueCount();
      v19 = a2(v17);
      if (v19)
      {
        v16 = a3(v19, ValueCount);
        goto LABEL_27;
      }
    }
    else
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    }
    v16 = MEMORY[0x24BEE4AF8];
    goto LABEL_27;
  }
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  v16 = v12;
LABEL_27:
  swift_bridgeObjectRetain();
  outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
  v20 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRelease();
  if (v20)
  {
    if (v12)
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      v21 = v12;
LABEL_36:
      swift_bridgeObjectRetain();
      outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
      a4(v15, v21 + 32, *(_QWORD *)(v21 + 16));
      swift_bridgeObjectRelease();
      v26._rawValue = v15;
      v22 = specialized SampledAnimation.createResource(timelineDefinition:)(v26, a5);
      RERelease();
      return v22;
    }
    v23 = *(_QWORD *)(v13 + 16);
    if (v23)
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      v24 = RETimelineDefinitionGetValueCount();
      v25 = a2(v23);
      if (v25)
      {
        v21 = a3(v25, v24);
        goto LABEL_36;
      }
    }
    else
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    }
    v21 = MEMORY[0x24BEE4AF8];
    goto LABEL_36;
  }
  RERelease();
  return 0;
}

_QWORD *SampledAnimation<>.createResource()()
{
  __int128 *v0;
  __int128 v1;
  void *SampledSRTAnimation;
  _QWORD *v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  Swift::OpaquePointer v17;
  _QWORD *v18;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[18];
  _QWORD __dst[36];
  _BYTE v27[13];
  char v28;
  char v29;
  char v30;
  char v31[8];
  _BYTE v32[16];
  _BYTE v33[16];
  char v34[8];
  _BYTE v35[7];
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  _BYTE v42[2];
  char v43[8];
  _BYTE v44[24];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[20];
  _BYTE v55[8];
  _BYTE v56[2];
  char v57;
  char v58;
  _BYTE v59[8];
  uint64_t v60;
  _BYTE v61[16];
  _BYTE v62[16];
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;

  memcpy(__dst, v0, sizeof(__dst));
  v1 = v0[1];
  v37 = *v0;
  v38 = v1;
  v39 = v0[2];
  v40 = *((_QWORD *)v0 + 6);
  if (*((_QWORD *)&v37 + 1))
    goto LABEL_18;
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v44, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v44, (uint64_t)v54, &demangling cache variable for type metadata for BindTarget?);
  if (v54[16] == 255)
  {
    outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v43, &demangling cache variable for type metadata for Int32?);
    outlined init with take of Transform?((uint64_t)v43, (uint64_t)v55, &demangling cache variable for type metadata for Int32?);
    if (v55[4] == 1)
    {
      outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v42, &demangling cache variable for type metadata for AnimationFillMode?);
      outlined init with take of Transform?((uint64_t)v42, (uint64_t)v56, &demangling cache variable for type metadata for AnimationFillMode?);
      if (v56[1] == 1)
      {
        outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v41, &demangling cache variable for type metadata for Bool?);
        outlined init with take of Transform?((uint64_t)&v41, (uint64_t)&v57, &demangling cache variable for type metadata for Bool?);
        if (v57 == 2)
        {
          outlined init with take of Transform?((uint64_t)&__dst[26], (uint64_t)&v36, &demangling cache variable for type metadata for TweenMode?);
          outlined init with take of Transform?((uint64_t)&v36, (uint64_t)&v58, &demangling cache variable for type metadata for TweenMode?);
          if (v58 == 2)
          {
            outlined init with take of Transform?((uint64_t)&__dst[26] + 4, (uint64_t)v35, &demangling cache variable for type metadata for Float?);
            outlined init with take of Transform?((uint64_t)v35, (uint64_t)v59, &demangling cache variable for type metadata for Float?);
            if (v59[4] == 1)
            {
              outlined init with take of Transform?((uint64_t)&__dst[28], (uint64_t)v34, &demangling cache variable for type metadata for [Transform]?);
              outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v60, &demangling cache variable for type metadata for [Transform]?);
              if (!v60)
              {
                outlined init with take of Transform?((uint64_t)&__dst[29], (uint64_t)v33, &demangling cache variable for type metadata for Double?);
                outlined init with take of Transform?((uint64_t)v33, (uint64_t)v61, &demangling cache variable for type metadata for Double?);
                if (v61[8] == 1)
                {
                  outlined init with take of Transform?((uint64_t)&__dst[31], (uint64_t)v32, &demangling cache variable for type metadata for Double?);
                  outlined init with take of Transform?((uint64_t)v32, (uint64_t)v62, &demangling cache variable for type metadata for Double?);
                  if (v62[8] == 1)
                  {
                    outlined init with take of Transform?((uint64_t)&__dst[33], (uint64_t)v31, &demangling cache variable for type metadata for [String]?);
                    outlined init with take of Transform?((uint64_t)v31, (uint64_t)&v63, &demangling cache variable for type metadata for [String]?);
                    if (!v63)
                    {
                      outlined init with take of Transform?((uint64_t)&__dst[34], (uint64_t)&v30, &demangling cache variable for type metadata for Bool?);
                      outlined init with take of Transform?((uint64_t)&v30, (uint64_t)&v64, &demangling cache variable for type metadata for Bool?);
                      if (v64 == 2)
                      {
                        outlined init with take of Transform?((uint64_t)&__dst[34] + 1, (uint64_t)&v29, &demangling cache variable for type metadata for Bool?);
                        outlined init with take of Transform?((uint64_t)&v29, (uint64_t)&v65, &demangling cache variable for type metadata for Bool?);
                        if (v65 == 2)
                        {
                          outlined init with take of Transform?((uint64_t)&__dst[34] + 2, (uint64_t)&v28, &demangling cache variable for type metadata for Bool?);
                          outlined init with take of Transform?((uint64_t)&v28, (uint64_t)&v66, &demangling cache variable for type metadata for Bool?);
                          if (v66 == 2)
                          {
                            outlined init with take of Transform?((uint64_t)&__dst[35], (uint64_t)v27, &demangling cache variable for type metadata for [String]?);
                            outlined init with take of Transform?((uint64_t)v27, (uint64_t)&v67, &demangling cache variable for type metadata for [String]?);
                            if (!v67)
                            {
                              v51 = *(_OWORD *)&__dst[19];
                              v52 = *(_OWORD *)&__dst[21];
                              v53 = *(_OWORD *)&__dst[23];
                              v47 = *(_OWORD *)&__dst[11];
                              v48 = *(_OWORD *)&__dst[13];
                              v49 = *(_OWORD *)&__dst[15];
                              v50 = *(_OWORD *)&__dst[17];
                              v45 = *(_OWORD *)&__dst[7];
                              v46 = *(_OWORD *)&__dst[9];
                              v20 = __dst[25];
                              v25[6] = *(_OWORD *)&__dst[19];
                              v25[7] = *(_OWORD *)&__dst[21];
                              v25[8] = *(_OWORD *)&__dst[23];
                              v25[2] = *(_OWORD *)&__dst[11];
                              v25[3] = *(_OWORD *)&__dst[13];
                              v25[4] = *(_OWORD *)&__dst[15];
                              v25[5] = *(_OWORD *)&__dst[17];
                              v25[0] = *(_OWORD *)&__dst[7];
                              v25[1] = *(_OWORD *)&__dst[9];
                              *(_QWORD *)&v25[9] = __dst[25];
                              if (!TimelineClipProperties.isClipped.getter())
                                return TimelineDefinition.resource.getter();
                              v25[6] = v51;
                              v25[7] = v52;
                              v25[8] = v53;
                              v25[2] = v47;
                              v25[3] = v48;
                              v25[4] = v49;
                              v25[5] = v50;
                              v25[0] = v45;
                              v25[1] = v46;
                              *(_QWORD *)&v25[9] = v20;
                              if ((TimelineClipProperties.isModified.getter() & 1) == 0)
                                return TimelineDefinition.resource.getter();
                              v25[6] = v51;
                              v25[7] = v52;
                              v25[8] = v53;
                              v25[2] = v47;
                              v25[3] = v48;
                              v25[4] = v49;
                              v25[5] = v50;
                              v25[0] = v45;
                              v25[1] = v46;
                              *(_QWORD *)&v25[9] = v20;
                              return (_QWORD *)TimelineClipProperties.createClip()();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*(_QWORD *)(v40 + 16))
  {
LABEL_18:
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
  }
  else
  {
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    RETimelineDefinitionGetName();
    String.init(cString:)();
  }
  swift_bridgeObjectRetain();
  outlined release of TimelineBaseProperties((uint64_t)&v37);
  outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  SampledSRTAnimation = (void *)RETimelineDefinitionCreateSampledSRTAnimation();
  swift_release();
  memcpy(v25, __dst, sizeof(v25));
  v3 = SampledAnimation<>.frames.getter();
  v4 = v3[2];
  if (v4)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, MEMORY[0x24BEE4AF8]);
    v6 = 0;
    v7 = v3 + 4;
    v8 = v5[2];
    v9 = 6 * v8;
    do
    {
      v10 = *(_OWORD *)&v7[v6];
      v11 = *(_OWORD *)&v7[v6 + 2];
      v12 = *(_OWORD *)&v7[v6 + 4];
      v13 = v5[3];
      v14 = v8 + 1;
      if (v8 >= v13 >> 1)
      {
        v23 = *(_OWORD *)&v7[v6 + 2];
        v24 = *(_OWORD *)&v7[v6];
        v22 = *(_OWORD *)&v7[v6 + 4];
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v8 + 1, 1, v5);
        v12 = v22;
        v11 = v23;
        v10 = v24;
        v5 = v16;
      }
      v5[2] = v14;
      v15 = &v5[v9 + v6];
      v15[2] = v10;
      v15[3] = v11;
      v15[4] = v12;
      v6 += 6;
      v8 = v14;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    RETimelineDefinitionSetSRTValues();
    swift_bridgeObjectRelease_n();
    v17._rawValue = SampledSRTAnimation;
    v18 = specialized SampledAnimation.createResource(timelineDefinition:)(v17, &demangling cache variable for type metadata for [Transform]?);
    RERelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    RERelease();
    return 0;
  }
  return v18;
}

{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *SampledSkeletalPoseAnimation;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  int v16;
  Swift::OpaquePointer v17;
  uint64_t v19;
  int v21;
  _OWORD v22[18];
  _QWORD __dst[36];
  _BYTE v24[8];
  _BYTE v25[8];
  _BYTE v26[16];
  _BYTE v27[16];
  _BYTE v28[8];
  _BYTE v29[7];
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  _BYTE v36[2];
  _BYTE v37[8];
  _BYTE v38[24];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[20];
  _BYTE v49[8];
  _BYTE v50[2];
  char v51;
  char v52;
  _BYTE v53[8];
  uint64_t v54;
  _BYTE v55[16];
  _BYTE v56[16];
  uint64_t v57;
  _QWORD v58[3];

  memcpy(__dst, v0, sizeof(__dst));
  v1 = v0[1];
  v31 = *v0;
  v32 = v1;
  v33 = v0[2];
  v34 = *((_QWORD *)v0 + 6);
  v2 = *((_QWORD *)&v31 + 1);
  v3 = LOBYTE(__dst[34]);
  v4 = BYTE1(__dst[34]);
  v5 = BYTE2(__dst[34]);
  if (*((_QWORD *)&v31 + 1))
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&v32, (uint64_t)v38, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v38, (uint64_t)v48, &demangling cache variable for type metadata for BindTarget?);
  if (v48[16] != 255)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&v33 + 4, (uint64_t)v37, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)v49, &demangling cache variable for type metadata for Int32?);
  if (v49[4] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&v33 + 9, (uint64_t)v36, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v50, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v50[1] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&v33 + 11, (uint64_t)&v35, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v35, (uint64_t)&v51, &demangling cache variable for type metadata for Bool?);
  if (v51 != 2)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[26], (uint64_t)&v30, &demangling cache variable for type metadata for TweenMode?);
  outlined init with take of Transform?((uint64_t)&v30, (uint64_t)&v52, &demangling cache variable for type metadata for TweenMode?);
  if (v52 != 2)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[26] + 4, (uint64_t)v29, &demangling cache variable for type metadata for Float?);
  outlined init with take of Transform?((uint64_t)v29, (uint64_t)v53, &demangling cache variable for type metadata for Float?);
  if (v53[4] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[28], (uint64_t)v28, &demangling cache variable for type metadata for [JointTransforms]?);
  outlined init with take of Transform?((uint64_t)v28, (uint64_t)&v54, &demangling cache variable for type metadata for [JointTransforms]?);
  if (v54)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[29], (uint64_t)v27, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v27, (uint64_t)v55, &demangling cache variable for type metadata for Double?);
  if (v55[8] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[31], (uint64_t)v26, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v26, (uint64_t)v56, &demangling cache variable for type metadata for Double?);
  if (v56[8] == 1
    && (outlined init with take of Transform?((uint64_t)&__dst[33], (uint64_t)v25, &demangling cache variable for type metadata for [String]?), outlined init with take of Transform?((uint64_t)v25, (uint64_t)&v57, &demangling cache variable for type metadata for [String]?), !v57)&& v3 == 2&& v4 == 2&& v5 == 2&& (outlined init with take of Transform?((uint64_t)&__dst[35], (uint64_t)v24, &demangling cache variable for type metadata for [String]?), outlined init with take of Transform?((uint64_t)v24, (uint64_t)v58, &demangling cache variable for type metadata for [String]?),
        !v58[0]))
  {
    v45 = *(_OWORD *)&__dst[19];
    v46 = *(_OWORD *)&__dst[21];
    v47 = *(_OWORD *)&__dst[23];
    v41 = *(_OWORD *)&__dst[11];
    v42 = *(_OWORD *)&__dst[13];
    v43 = *(_OWORD *)&__dst[15];
    v44 = *(_OWORD *)&__dst[17];
    v39 = *(_OWORD *)&__dst[7];
    v40 = *(_OWORD *)&__dst[9];
    v19 = __dst[25];
    v22[6] = *(_OWORD *)&__dst[19];
    v22[7] = *(_OWORD *)&__dst[21];
    v22[8] = *(_OWORD *)&__dst[23];
    v22[2] = *(_OWORD *)&__dst[11];
    v22[3] = *(_OWORD *)&__dst[13];
    v22[4] = *(_OWORD *)&__dst[15];
    v22[5] = *(_OWORD *)&__dst[17];
    v22[0] = *(_OWORD *)&__dst[7];
    v22[1] = *(_OWORD *)&__dst[9];
    *(_QWORD *)&v22[9] = __dst[25];
    if (!TimelineClipProperties.isClipped.getter())
      return TimelineDefinition.resource.getter();
    v22[6] = v45;
    v22[7] = v46;
    v22[8] = v47;
    v22[2] = v41;
    v22[3] = v42;
    v22[4] = v43;
    v22[5] = v44;
    v22[0] = v39;
    v22[1] = v40;
    *(_QWORD *)&v22[9] = v19;
    if ((TimelineClipProperties.isModified.getter() & 1) == 0)
      return TimelineDefinition.resource.getter();
    v22[6] = v45;
    v22[7] = v46;
    v22[8] = v47;
    v22[2] = v41;
    v22[3] = v42;
    v22[4] = v43;
    v22[5] = v44;
    v22[0] = v39;
    v22[1] = v40;
    *(_QWORD *)&v22[9] = v19;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
LABEL_16:
    memcpy(v22, __dst, sizeof(v22));
    v6 = SampledAnimation<>.jointNames.getter();
    v7 = v6[2];
    if (v7)
    {
      v8 = v34;
      v21 = v4;
      if (v2 || !*(_QWORD *)(v34 + 16))
      {
        outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
        outlined retain of TimelineBaseProperties((uint64_t)&v31);
      }
      else
      {
        outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
        outlined retain of TimelineBaseProperties((uint64_t)&v31);
        RETimelineDefinitionGetName();
        String.init(cString:)();
      }
      swift_bridgeObjectRetain();
      outlined release of TimelineBaseProperties((uint64_t)&v31);
      outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      SampledSkeletalPoseAnimation = (void *)RETimelineDefinitionCreateSampledSkeletalPoseAnimation();
      swift_release();
      RETimelineDefinitionSetSkeletalJointCount();
      v11 = 0;
      v12 = v6 + 5;
      do
      {
        String.utf8CString.getter();
        RETimelineDefinitionSetSkeletalJointName();
        swift_release();
        v12 += 2;
        ++v11;
      }
      while (v7 != v11);
      swift_bridgeObjectRelease();
      memcpy(v22, __dst, sizeof(v22));
      v13 = *(_QWORD *)(SampledAnimation<>.frames.getter() + 16);
      RETimelineDefinitionSetSkeletalPosePoseCount();
      if (v13)
      {
        for (i = 0; i != v13; ++i)
        {
          swift_bridgeObjectRetain();
          RETimelineDefinitionSetSkeletalPoseIndexValues();
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      if (v3 == 2)
      {
        v16 = v21;
        v15 = v5;
        if (*(_QWORD *)(v8 + 16))
          RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
      }
      else
      {
        v16 = v21;
        v15 = v5;
      }
      RETimelineDefinitionSetSkeletalPoseScaleChannelMask();
      if (v16 == 2 && *(_QWORD *)(v8 + 16))
        RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
      RETimelineDefinitionSetSkeletalPoseRotationChannelMask();
      if (v15 == 2 && *(_QWORD *)(v8 + 16))
        RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
      RETimelineDefinitionSetSkeletalPoseTranslationChannelMask();
      v17._rawValue = SampledSkeletalPoseAnimation;
      v9 = specialized SampledAnimation.createResource(timelineDefinition:)(v17, &demangling cache variable for type metadata for [JointTransforms]?);
      RERelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v9;
}

{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *SampledBlendShapeWeightsAnimation;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  Swift::OpaquePointer v11;
  uint64_t v13;
  _OWORD v15[18];
  _QWORD __dst[36];
  _BYTE v17[13];
  char v18;
  char v19;
  char v20;
  _BYTE v21[8];
  _BYTE v22[16];
  _BYTE v23[16];
  _BYTE v24[8];
  _BYTE v25[7];
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  _BYTE v32[2];
  _BYTE v33[8];
  _BYTE v34[24];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[20];
  _BYTE v45[8];
  _BYTE v46[2];
  char v47;
  char v48;
  _BYTE v49[8];
  uint64_t v50;
  _BYTE v51[16];
  _BYTE v52[16];
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;

  memcpy(__dst, v0, sizeof(__dst));
  v1 = v0[1];
  v27 = *v0;
  v28 = v1;
  v29 = v0[2];
  v30 = *((_QWORD *)v0 + 6);
  v2 = *((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&v28, (uint64_t)v34, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v34, (uint64_t)v44, &demangling cache variable for type metadata for BindTarget?);
  if (v44[16] != 255)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&v29 + 4, (uint64_t)v33, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v33, (uint64_t)v45, &demangling cache variable for type metadata for Int32?);
  if (v45[4] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&v29 + 9, (uint64_t)v32, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)v46, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v46[1] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&v29 + 11, (uint64_t)&v31, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v31, (uint64_t)&v47, &demangling cache variable for type metadata for Bool?);
  if (v47 != 2)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[26], (uint64_t)&v26, &demangling cache variable for type metadata for TweenMode?);
  outlined init with take of Transform?((uint64_t)&v26, (uint64_t)&v48, &demangling cache variable for type metadata for TweenMode?);
  if (v48 != 2)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[26] + 4, (uint64_t)v25, &demangling cache variable for type metadata for Float?);
  outlined init with take of Transform?((uint64_t)v25, (uint64_t)v49, &demangling cache variable for type metadata for Float?);
  if (v49[4] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[28], (uint64_t)v24, &demangling cache variable for type metadata for [BlendShapeWeights]?);
  outlined init with take of Transform?((uint64_t)v24, (uint64_t)&v50, &demangling cache variable for type metadata for [BlendShapeWeights]?);
  if (v50)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[29], (uint64_t)v23, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v23, (uint64_t)v51, &demangling cache variable for type metadata for Double?);
  if (v51[8] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[31], (uint64_t)v22, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v22, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[33], (uint64_t)v21, &demangling cache variable for type metadata for [String]?);
  outlined init with take of Transform?((uint64_t)v21, (uint64_t)&v53, &demangling cache variable for type metadata for [String]?);
  if (v53)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[34], (uint64_t)&v20, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v20, (uint64_t)&v54, &demangling cache variable for type metadata for Bool?);
  if (v54 != 2)
    goto LABEL_16;
  outlined init with take of Transform?((uint64_t)&__dst[34] + 1, (uint64_t)&v19, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v19, (uint64_t)&v55, &demangling cache variable for type metadata for Bool?);
  if (v55 == 2
    && (outlined init with take of Transform?((uint64_t)&__dst[34] + 2, (uint64_t)&v18, &demangling cache variable for type metadata for Bool?), outlined init with take of Transform?((uint64_t)&v18, (uint64_t)&v56, &demangling cache variable for type metadata for Bool?), v56 == 2)&& (outlined init with take of Transform?((uint64_t)&__dst[35], (uint64_t)v17, &demangling cache variable for type metadata for [String]?), outlined init with take of Transform?((uint64_t)v17, (uint64_t)&v57, &demangling cache variable for type metadata for [String]?), !v57))
  {
    v41 = *(_OWORD *)&__dst[19];
    v42 = *(_OWORD *)&__dst[21];
    v43 = *(_OWORD *)&__dst[23];
    v37 = *(_OWORD *)&__dst[11];
    v38 = *(_OWORD *)&__dst[13];
    v39 = *(_OWORD *)&__dst[15];
    v40 = *(_OWORD *)&__dst[17];
    v35 = *(_OWORD *)&__dst[7];
    v36 = *(_OWORD *)&__dst[9];
    v13 = __dst[25];
    v15[6] = *(_OWORD *)&__dst[19];
    v15[7] = *(_OWORD *)&__dst[21];
    v15[8] = *(_OWORD *)&__dst[23];
    v15[2] = *(_OWORD *)&__dst[11];
    v15[3] = *(_OWORD *)&__dst[13];
    v15[4] = *(_OWORD *)&__dst[15];
    v15[5] = *(_OWORD *)&__dst[17];
    v15[0] = *(_OWORD *)&__dst[7];
    v15[1] = *(_OWORD *)&__dst[9];
    *(_QWORD *)&v15[9] = __dst[25];
    if (!TimelineClipProperties.isClipped.getter())
      return TimelineDefinition.resource.getter();
    v15[6] = v41;
    v15[7] = v42;
    v15[8] = v43;
    v15[2] = v37;
    v15[3] = v38;
    v15[4] = v39;
    v15[5] = v40;
    v15[0] = v35;
    v15[1] = v36;
    *(_QWORD *)&v15[9] = v13;
    if ((TimelineClipProperties.isModified.getter() & 1) == 0)
      return TimelineDefinition.resource.getter();
    v15[6] = v41;
    v15[7] = v42;
    v15[8] = v43;
    v15[2] = v37;
    v15[3] = v38;
    v15[4] = v39;
    v15[5] = v40;
    v15[0] = v35;
    v15[1] = v36;
    *(_QWORD *)&v15[9] = v13;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
LABEL_16:
    memcpy(v15, __dst, sizeof(v15));
    v3 = SampledAnimation<>.weightNames.getter();
    v4 = v3[2];
    if (v4)
    {
      if (v2 || !*(_QWORD *)(v30 + 16))
      {
        outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
        outlined retain of TimelineBaseProperties((uint64_t)&v27);
      }
      else
      {
        outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
        outlined retain of TimelineBaseProperties((uint64_t)&v27);
        RETimelineDefinitionGetName();
        String.init(cString:)();
      }
      swift_bridgeObjectRetain();
      outlined release of TimelineBaseProperties((uint64_t)&v27);
      outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      SampledBlendShapeWeightsAnimation = (void *)RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation();
      swift_release();
      RETimelineDefinitionSetBlendShapeWeightsWeightsCount();
      v7 = 0;
      v8 = v3 + 5;
      do
      {
        String.utf8CString.getter();
        RETimelineDefinitionSetBlendShapeWeightsWeightName();
        swift_release();
        v8 += 2;
        ++v7;
      }
      while (v4 != v7);
      swift_bridgeObjectRelease();
      memcpy(v15, __dst, sizeof(v15));
      v9 = *(_QWORD *)(SampledAnimation<>.frames.getter() + 16);
      RETimelineDefinitionSetBlendShapeWeightsSampleCount();
      if (v9)
      {
        for (i = 0; i != v9; ++i)
        {
          swift_bridgeObjectRetain();
          RETimelineDefinitionSetBlendShapeWeightsIndexValues();
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      v11._rawValue = SampledBlendShapeWeightsAnimation;
      v5 = specialized SampledAnimation.createResource(timelineDefinition:)(v11, &demangling cache variable for type metadata for [BlendShapeWeights]?);
      RERelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v5;
}

_QWORD *specialized SampledAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1, uint64_t *a2)
{
  __int128 *v2;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TimelineAsset;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  _QWORD *v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  int v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unsigned __int128 v74;
  unsigned __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _BYTE v88[8];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unsigned __int128 v95;
  unsigned __int128 v96;
  __int128 v97;
  uint64_t v98;

  if (a1._rawValue)
  {
    v5 = v2[1];
    v89 = *v2;
    v90 = v5;
    v91 = v2[2];
    v6 = *((_QWORD *)v2 + 6);
    *(_QWORD *)&v92 = v6;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if (*((_BYTE *)v2 + 208) == 2 && *(_QWORD *)(v6 + 16))
      RETimelineDefinitionGetInterpolationEnabled();
    RETimelineDefinitionSetInterpolationEnabled();
    if ((*((_BYTE *)v2 + 216) & 1) != 0 && *(_QWORD *)(v6 + 16))
      RETimelineDefinitionGetFrameInterval();
    RETimelineDefinitionSetFrameInterval();
    if ((v2[15] & 1) != 0)
    {
      if (*(_QWORD *)(v6 + 16))
        RETimelineDefinitionGetStartTime();
    }
    RETimelineDefinitionSetStartTime();
    specialized SampledAnimation.end.getter(a2);
    RETimelineDefinitionSetEndTime();
    v29 = *(__int128 *)((char *)v2 + 168);
    v84 = *(__int128 *)((char *)v2 + 152);
    v85 = v29;
    v86 = *(__int128 *)((char *)v2 + 184);
    v87 = *((_QWORD *)v2 + 25);
    v30 = *(__int128 *)((char *)v2 + 104);
    v80 = *(__int128 *)((char *)v2 + 88);
    v81 = v30;
    v31 = *(__int128 *)((char *)v2 + 136);
    v82 = *(__int128 *)((char *)v2 + 120);
    v83 = v31;
    v32 = *(__int128 *)((char *)v2 + 72);
    v78 = *(__int128 *)((char *)v2 + 56);
    v79 = v32;
    v33 = *(__int128 *)((char *)v2 + 168);
    v95 = *(__int128 *)((char *)v2 + 152);
    v96 = v33;
    v97 = *(__int128 *)((char *)v2 + 184);
    v98 = *((_QWORD *)v2 + 25);
    v34 = *(__int128 *)((char *)v2 + 104);
    v91 = *(__int128 *)((char *)v2 + 88);
    v92 = v34;
    v35 = *(__int128 *)((char *)v2 + 136);
    v93 = *(__int128 *)((char *)v2 + 120);
    v94 = v35;
    v36 = *(__int128 *)((char *)v2 + 72);
    v89 = *(__int128 *)((char *)v2 + 56);
    v90 = v36;
    if (TimelineClipProperties.isClipped.getter())
    {
      v65 = *((_QWORD *)&v84 + 1);
      v66 = v84;
      v63 = *((_QWORD *)&v85 + 1);
      v64 = v85;
      v61 = DWORD1(v86);
      v62 = v86;
      v59 = BYTE9(v86);
      v60 = BYTE8(v86);
      v57 = BYTE11(v86);
      v58 = BYTE10(v86);
      v37 = v87;
      v55 = HIDWORD(v82);
      v56 = BYTE1(v83);
      v54 = v83;
      v53 = v82;
      v52 = BYTE8(v82);
      v51 = v81;
      v50 = BYTE8(v81);
      v49 = v80;
      v47 = BYTE9(v80);
      v48 = BYTE8(v80);
      v38 = v79;
      v39 = BYTE8(v79);
      v40 = BYTE9(v79);
      v41 = v78;
      v42 = BYTE8(v78);
      v43 = BYTE9(v78);
      outlined init with take of Transform?((uint64_t)&v83 + 8, (uint64_t)v88, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      v44 = swift_allocObject();
      *(Swift::OpaquePointer *)(v44 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v78);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v88);
      *(_QWORD *)&v68 = v41;
      BYTE8(v68) = v42;
      BYTE9(v68) = v43;
      *(_QWORD *)&v69 = v38;
      BYTE8(v69) = v39;
      BYTE9(v69) = v40;
      *(_QWORD *)&v70 = v49;
      BYTE8(v70) = v48;
      BYTE9(v70) = v47;
      *(_QWORD *)&v71 = v51;
      BYTE8(v71) = v50;
      *(_QWORD *)&v72 = v53;
      BYTE8(v72) = v52;
      HIDWORD(v72) = v55;
      LOBYTE(v73) = v54;
      BYTE1(v73) = v56;
      *((_QWORD *)&v73 + 1) = v44;
      v74 = __PAIR128__(v65, v66);
      v75 = __PAIR128__(v63, v64);
      LOBYTE(v76) = v62;
      DWORD1(v76) = v61;
      BYTE8(v76) = v60;
      BYTE9(v76) = v59;
      BYTE10(v76) = v58;
      BYTE11(v76) = v57;
      v77 = v37;
      v98 = v37;
      v96 = __PAIR128__(v63, v64);
      v97 = v76;
      v89 = v68;
      v90 = v69;
      v94 = v73;
      v95 = __PAIR128__(v65, v66);
      v92 = v71;
      v93 = v72;
      v91 = v70;
      outlined retain of TimelineClipProperties((uint64_t)&v68);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)&v89, &v67);
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v68);
      outlined release of TimelineClipProperties((uint64_t)&v68);
      return (_QWORD *)v67;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    v46 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    return v46;
  }
  else
  {
    v7 = *((_QWORD *)v2 + 25);
    v8 = *(__int128 *)((char *)v2 + 136);
    v9 = *(__int128 *)((char *)v2 + 168);
    v95 = *(__int128 *)((char *)v2 + 152);
    v96 = v9;
    v97 = *(__int128 *)((char *)v2 + 184);
    v10 = *(__int128 *)((char *)v2 + 72);
    v11 = *(__int128 *)((char *)v2 + 104);
    v91 = *(__int128 *)((char *)v2 + 88);
    v92 = v11;
    v93 = *(__int128 *)((char *)v2 + 120);
    v94 = v8;
    v89 = *(__int128 *)((char *)v2 + 56);
    v90 = v10;
    v98 = v7;
    if (!TimelineClipProperties.isClipped.getter())
    {
      v20 = *(_QWORD **)(*((_QWORD *)v2 + 6) + 16);
      if (v20)
      {
        v21 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v21, (uint64_t)&v89);
        v22 = *((_QWORD *)&v90 + 1);
        v23 = v91;
        __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
        (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
        TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          v25 = TimelineAsset;
          RETimelineDefinitionGetName();
          v26 = String.init(cString:)();
          v28 = v27;
          type metadata accessor for AnimationResource();
          v20 = (_QWORD *)swift_allocObject();
          v20[2] = v25;
          v20[3] = v26;
          v20[4] = v28;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return v20;
    }
    v12 = *(__int128 *)((char *)v2 + 168);
    v95 = *(__int128 *)((char *)v2 + 152);
    v96 = v12;
    v97 = *(__int128 *)((char *)v2 + 184);
    v13 = *(__int128 *)((char *)v2 + 104);
    v91 = *(__int128 *)((char *)v2 + 88);
    v92 = v13;
    v14 = *(__int128 *)((char *)v2 + 136);
    v93 = *(__int128 *)((char *)v2 + 120);
    v94 = v14;
    v15 = *(__int128 *)((char *)v2 + 72);
    v89 = *(__int128 *)((char *)v2 + 56);
    v90 = v15;
    v98 = v7;
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      v16 = *(__int128 *)((char *)v2 + 168);
      v95 = *(__int128 *)((char *)v2 + 152);
      v96 = v16;
      v97 = *(__int128 *)((char *)v2 + 184);
      v17 = *(__int128 *)((char *)v2 + 104);
      v91 = *(__int128 *)((char *)v2 + 88);
      v92 = v17;
      v18 = *(__int128 *)((char *)v2 + 136);
      v93 = *(__int128 *)((char *)v2 + 120);
      v94 = v18;
      v19 = *(__int128 *)((char *)v2 + 72);
      v89 = *(__int128 *)((char *)v2 + 56);
      v90 = v19;
      v98 = v7;
      return (_QWORD *)TimelineClipProperties.createClip()();
    }
    return TimelineDefinition.resource.getter();
  }
}

_QWORD *SampledAnimation.generate()()
{
  _QWORD *result;
  uint64_t v1;

  result = SampledAnimation.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v1 = 0xD00000000000001CLL;
    *(_QWORD *)(v1 + 8) = 0x800000021BE822D0;
    *(_BYTE *)(v1 + 16) = 0;
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance SampledAnimation<A>(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)SampledAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.blendLayer.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance SampledAnimation<A>(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return SampledAnimation.fillMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.fillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance SampledAnimation<A>()
{
  return SampledAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance SampledAnimation<A>(uint64_t a1, char a2)
{
  return SampledAnimation.trimStart.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.trimStart.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance SampledAnimation<A>()
{
  return SampledAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance SampledAnimation<A>(uint64_t a1, char a2)
{
  return SampledAnimation.trimEnd.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.trimEnd.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance SampledAnimation<A>()
{
  return SampledAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance SampledAnimation<A>(uint64_t a1, char a2)
{
  return SampledAnimation.trimDuration.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.trimDuration.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.offset.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.delay.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.speed.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_BYTE *protocol witness for AnimationDefinition.repeatMode.setter in conformance SampledAnimation<A>(char *a1)
{
  char v2;

  v2 = *a1;
  return SampledAnimation.repeatMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance SampledAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.repeatMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_QWORD *protocol witness for AnimationDefinitionInternal.generate() in conformance SampledAnimation<A>()
{
  return SampledAnimation.generate()();
}

uint64_t SampledAnimation<>.frames.getter()
{
  return SampledAnimation<>.frames.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE251F8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE25160], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE25198], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE251B8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE251D8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE25238], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t ValueCount;
  int64_t SkeletalJointCount;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;

  v1 = *(_QWORD **)(v0 + 224);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return MEMORY[0x24BEE4AF8];
  ValueCount = RETimelineDefinitionGetValueCount();
  SkeletalJointCount = RETimelineDefinitionGetSkeletalJointCount();
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ValueCount & ~(ValueCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (ValueCount < 0)
    goto LABEL_23;
  v1 = (_QWORD *)result;
  if (!ValueCount)
    return (uint64_t)v1;
  if ((SkeletalJointCount & 0x8000000000000000) == 0)
  {
    v7 = 0;
    while (v7 != ValueCount)
    {
      v20 = v6;
      v23 = v5;
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletalJointCount, 0, MEMORY[0x24BEE4AF8]);
      v8 = (_QWORD *)result;
      if (SkeletalJointCount)
      {
        v9 = 0;
        v10 = HIDWORD(v20);
        v11 = HIDWORD(v23);
        do
        {
          v26 = v11;
          v27 = v10;
          result = RETimelineDefinitionGetSkeletalPoseIndexJointValue();
          v13 = v12;
          v15 = v8[2];
          v14 = v8[3];
          if (v15 >= v14 >> 1)
          {
            v21 = v6;
            v24 = v5;
            v19 = v12;
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
            v13 = v19;
            v6 = v21;
            v5 = v24;
            v8 = (_QWORD *)result;
          }
          ++v9;
          HIDWORD(v5) = v26;
          HIDWORD(v6) = v27;
          v8[2] = v15 + 1;
          v16 = &v8[6 * v15];
          v16[2] = v5;
          v16[3] = v13;
          v16[4] = v6;
          v10 = v27;
          v11 = v26;
        }
        while (SkeletalJointCount != v9);
      }
      else
      {
        v6 = v20;
        v5 = v23;
      }
      v18 = v1[2];
      v17 = v1[3];
      if (v18 >= v17 >> 1)
      {
        v22 = v6;
        v25 = v5;
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v1);
        v6 = v22;
        v5 = v25;
        v1 = (_QWORD *)result;
      }
      ++v7;
      v1[2] = v18 + 1;
      v1[v18 + 4] = v8;
      if (v7 == ValueCount)
        return (uint64_t)v1;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t ValueCount;
  int64_t BlendShapeWeightsWeightsCount;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD **)(v0 + 224);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return MEMORY[0x24BEE4AF8];
  ValueCount = RETimelineDefinitionGetValueCount();
  BlendShapeWeightsWeightsCount = RETimelineDefinitionGetBlendShapeWeightsWeightsCount();
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ValueCount & ~(ValueCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (ValueCount < 0)
    goto LABEL_21;
  v1 = (_QWORD *)result;
  if (!ValueCount)
    return (uint64_t)v1;
  if ((BlendShapeWeightsWeightsCount & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = (char *)MEMORY[0x24BEE4AF8];
    while (v5 != ValueCount)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsWeightsCount, 0, v6);
      v7 = result;
      if (BlendShapeWeightsWeightsCount)
      {
        for (i = 0; i != BlendShapeWeightsWeightsCount; ++i)
        {
          result = RETimelineDefinitionGetBlendShapeWeightsIndexWeightValue();
          v10 = v9;
          v12 = *(_QWORD *)(v7 + 16);
          v11 = *(_QWORD *)(v7 + 24);
          if (v12 >= v11 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v7);
            v7 = result;
          }
          *(_QWORD *)(v7 + 16) = v12 + 1;
          *(_DWORD *)(v7 + 4 * v12 + 32) = v10;
        }
      }
      v14 = v1[2];
      v13 = v1[3];
      if (v14 >= v13 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v1);
        v1 = (_QWORD *)result;
      }
      ++v5;
      v1[2] = v14 + 1;
      v1[v14 + 4] = v7;
      if (v5 == ValueCount)
        return (uint64_t)v1;
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*SampledAnimation<>.frames.modify(uint64_t *a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *FloatValues;

  a1[1] = v1;
  if (*(_QWORD *)(v1 + 224))
  {
    v3 = *(_QWORD *)(v1 + 224);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16)
         && (ValueCount = RETimelineDefinitionGetValueCount(),
             (FloatValues = (char *)RETimelineDefinitionGetFloatValues()) != 0))
  {
    v3 = specialized _copyCollectionToContiguousArray<A>(_:)(FloatValues, ValueCount);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *DoubleValues;

  a1[1] = v1;
  if (*(_QWORD *)(v1 + 224))
  {
    v3 = *(_QWORD *)(v1 + 224);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16)
         && (ValueCount = RETimelineDefinitionGetValueCount(),
             (DoubleValues = (char *)RETimelineDefinitionGetDoubleValues()) != 0))
  {
    v3 = specialized _copyCollectionToContiguousArray<A>(_:)(DoubleValues, ValueCount);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *Float2Values;

  a1[1] = v1;
  if (*(_QWORD *)(v1 + 224))
  {
    v3 = *(_QWORD *)(v1 + 224);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16)
         && (ValueCount = RETimelineDefinitionGetValueCount(),
             (Float2Values = (char *)RETimelineDefinitionGetFloat2Values()) != 0))
  {
    v3 = specialized _copyCollectionToContiguousArray<A>(_:)(Float2Values, ValueCount);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *Float3Values;

  a1[1] = v1;
  if (*(_QWORD *)(v1 + 224))
  {
    v3 = *(_QWORD *)(v1 + 224);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16)
         && (ValueCount = RETimelineDefinitionGetValueCount(),
             (Float3Values = (char *)RETimelineDefinitionGetFloat3Values()) != 0))
  {
    v3 = specialized _copyCollectionToContiguousArray<A>(_:)(Float3Values, ValueCount);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *Float4Values;

  a1[1] = v1;
  if (*(_QWORD *)(v1 + 224))
  {
    v3 = *(_QWORD *)(v1 + 224);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16)
         && (ValueCount = RETimelineDefinitionGetValueCount(),
             (Float4Values = (char *)RETimelineDefinitionGetFloat4Values()) != 0))
  {
    v3 = specialized _copyCollectionToContiguousArray<A>(_:)(Float4Values, ValueCount);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *QuaternionValues;

  a1[1] = v1;
  if (*(_QWORD *)(v1 + 224))
  {
    v3 = *(_QWORD *)(v1 + 224);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16)
         && (ValueCount = RETimelineDefinitionGetValueCount(),
             (QuaternionValues = (char *)RETimelineDefinitionGetQuaternionValues()) != 0))
  {
    v3 = specialized _copyCollectionToContiguousArray<A>(_:)(QuaternionValues, ValueCount);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  const void *v1;
  _BYTE v4[288];

  a1[1] = (uint64_t)v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.frames.getter();
  return SampledAnimation<>.frames.modify;
}

{
  const void *v1;
  _BYTE v4[288];

  a1[1] = (uint64_t)v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.frames.getter();
  return SampledAnimation<>.frames.modify;
}

uint64_t key path getter for SampledAnimation<>.frames : SampledAnimation<Float>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ValueCount;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[36];

  memcpy(v13, __src, sizeof(v13));
  v7 = v13[28];
  if (!v13[28])
  {
    v9 = *(_QWORD *)(v13[6] + 16);
    if (v9)
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)v13);
      ValueCount = RETimelineDefinitionGetValueCount();
      v11 = a2(v9);
      if (v11)
      {
        v8 = a3(v11, ValueCount);
        goto LABEL_8;
      }
    }
    else
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)v13);
    }
    v8 = MEMORY[0x24BEE4AF8];
    goto LABEL_8;
  }
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)v13);
  v8 = v7;
LABEL_8:
  swift_bridgeObjectRetain();
  result = outlined release of SampledAnimation<simd_quatf>((uint64_t)v13);
  *a4 = v8;
  return result;
}

uint64_t SampledAnimation<>.frames.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ValueCount;
  uint64_t v8;

  if (*(_QWORD *)(v2 + 224))
  {
    v3 = *(_QWORD *)(v2 + 224);
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16);
    if (v4 && (ValueCount = RETimelineDefinitionGetValueCount(), (v8 = a1(v4)) != 0))
      v3 = a2(v8, ValueCount);
    else
      v3 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t SampledAnimation<>.frames.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 224) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 224) = v2;
  }
  return result;
}

_QWORD *SampledAnimation<>.frames.getter()
{
  uint64_t v0;
  _QWORD *v1;
  int64_t ValueCount;
  uint64_t SRTValues;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  _QWORD *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v1 = *(_QWORD **)(v0 + 224);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  ValueCount = RETimelineDefinitionGetValueCount();
  SRTValues = RETimelineDefinitionGetSRTValues();
  if (!SRTValues || ValueCount < 1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = (char *)SRTValues;
  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ValueCount, 0, MEMORY[0x24BEE4AF8]);
  v6 = specialized _copyCollectionToContiguousArray<A>(_:)(v5, ValueCount);
  if ((unint64_t)(ValueCount - 1) >= *(_QWORD *)(v6 + 16))
  {
    __break(1u);
  }
  else
  {
    v5 = (char *)v6;
    if (one-time initialization token for identity == -1)
      goto LABEL_12;
  }
  swift_once();
LABEL_12:
  v7 = 0;
  v8 = v5 + 32;
  v9 = v1[2];
  v10 = 6 * v9;
  do
  {
    v11 = *(_OWORD *)&v8[v7];
    v12 = *(_OWORD *)&v8[v7 + 16];
    v13 = *(_OWORD *)&v8[v7 + 32];
    v14 = v1[3];
    v15 = v9 + 1;
    if (v9 >= v14 >> 1)
    {
      v20 = *(_OWORD *)&v8[v7 + 16];
      v21 = *(_OWORD *)&v8[v7];
      v19 = *(_OWORD *)&v8[v7 + 32];
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v9 + 1, 1, v1);
      v13 = v19;
      v12 = v20;
      v11 = v21;
      v1 = v17;
    }
    v1[2] = v15;
    v16 = &v1[v10 + v7 / 8];
    v16[2] = v11;
    v16[3] = v12;
    v16[4] = v13;
    v7 += 48;
    v9 = v15;
    --ValueCount;
  }
  while (ValueCount);
  swift_release();
  return v1;
}

uint64_t (*SampledAnimation<>.frames.modify(_QWORD *a1))()
{
  const void *v1;
  _BYTE v4[288];

  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.frames.getter();
  return SampledAnimation<>.frames.modify;
}

uint64_t SampledAnimation<>.init(jointNames:frames:name:tweenMode:frameInterval:isAdditive:isScaleAnimated:isRotationAnimated:isTranslationAnimated:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, float a10@<S0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, char a14, uint64_t *a15, int a16, char *a17, char *a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v45[2];
  char v46;
  char v47;
  char v48;
  char v49[8];
  _OWORD v50[9];
  uint64_t v51;
  char v52[10];

  v29 = *a5;
  v30 = *a15;
  v31 = a15[1];
  v32 = *((_BYTE *)a15 + 16);
  v33 = *a17;
  v34 = *a18;
  v45[0] = 0;
  v45[1] = 0;
  v46 = -1;
  v52[0] = v33;
  v49[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a3, a4, v45, 0, v52, v49, a19, a20 & 1, (uint64_t)v50, a11, a12, a13, a21, a22 & 1, a23, a24 & 1);
  type metadata accessor for TimelineDefinition();
  v35 = swift_allocObject();
  v36 = v50[7];
  *(_OWORD *)(a9 + 152) = v50[6];
  *(_OWORD *)(a9 + 168) = v36;
  *(_OWORD *)(a9 + 184) = v50[8];
  v37 = v50[3];
  *(_OWORD *)(a9 + 88) = v50[2];
  *(_OWORD *)(a9 + 104) = v37;
  v38 = v50[5];
  *(_OWORD *)(a9 + 120) = v50[4];
  *(_OWORD *)(a9 + 136) = v38;
  v39 = v50[1];
  *(_OWORD *)(a9 + 56) = v50[0];
  *(_QWORD *)(v35 + 16) = 0;
  v49[0] = 0;
  v48 = 1;
  v47 = 1;
  *(_QWORD *)a9 = a3;
  *(_QWORD *)(a9 + 8) = a4;
  *(_QWORD *)(a9 + 16) = v30;
  *(_QWORD *)(a9 + 24) = v31;
  *(_BYTE *)(a9 + 32) = v32;
  *(_DWORD *)(a9 + 36) = a16;
  *(_BYTE *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 41) = v34;
  *(_BYTE *)(a9 + 42) = 0;
  *(_BYTE *)(a9 + 43) = a6;
  *(_QWORD *)(a9 + 48) = v35;
  *(_QWORD *)(a9 + 200) = v51;
  *(_OWORD *)(a9 + 72) = v39;
  *(_BYTE *)(a9 + 208) = v29;
  *(float *)(a9 + 212) = a10;
  *(_BYTE *)(a9 + 216) = v49[0];
  *(_QWORD *)(a9 + 224) = a2;
  *(_QWORD *)(a9 + 232) = 0;
  *(_BYTE *)(a9 + 240) = v48;
  *(_QWORD *)(a9 + 248) = 0;
  *(_BYTE *)(a9 + 256) = v47;
  *(_QWORD *)(a9 + 264) = a1;
  *(_BYTE *)(a9 + 272) = a7;
  *(_BYTE *)(a9 + 273) = a8;
  *(_BYTE *)(a9 + 274) = a14;
  *(_QWORD *)(a9 + 280) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t SampledAnimation<>.isScaleAnimated.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 272);
  if (v1 != 2)
    return v1 & 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
  return 1;
}

uint64_t SampledAnimation<>.isScaleAnimated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 272) = result;
  return result;
}

_BYTE *(*SampledAnimation<>.isScaleAnimated.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  char *v2;
  int v3;
  char SkeletalPoseScaleChannelMask;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(unsigned __int8 *)(v1 + 272);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      SkeletalPoseScaleChannelMask = RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
    else
      SkeletalPoseScaleChannelMask = 1;
  }
  else
  {
    SkeletalPoseScaleChannelMask = v3 & 1;
  }
  *v2 = SkeletalPoseScaleChannelMask;
  return SampledAnimation<>.isScaleAnimated.modify;
}

_BYTE *SampledAnimation<>.isScaleAnimated.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 272) = result[8];
  return result;
}

uint64_t SampledAnimation<>.isRotationAnimated.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 273);
  if (v1 != 2)
    return v1 & 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
  return 1;
}

uint64_t SampledAnimation<>.isRotationAnimated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 273) = result;
  return result;
}

_BYTE *(*SampledAnimation<>.isRotationAnimated.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  char *v2;
  int v3;
  char SkeletalPoseRotationChannelMask;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(unsigned __int8 *)(v1 + 273);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      SkeletalPoseRotationChannelMask = RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
    else
      SkeletalPoseRotationChannelMask = 1;
  }
  else
  {
    SkeletalPoseRotationChannelMask = v3 & 1;
  }
  *v2 = SkeletalPoseRotationChannelMask;
  return SampledAnimation<>.isRotationAnimated.modify;
}

_BYTE *SampledAnimation<>.isRotationAnimated.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 273) = result[8];
  return result;
}

uint64_t SampledAnimation<>.isTranslationAnimated.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 274);
  if (v1 != 2)
    return v1 & 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
  return 1;
}

uint64_t SampledAnimation<>.isTranslationAnimated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 274) = result;
  return result;
}

_BYTE *(*SampledAnimation<>.isTranslationAnimated.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  char *v2;
  int v3;
  char SkeletalPoseTranslationChannelMask;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(unsigned __int8 *)(v1 + 274);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
      SkeletalPoseTranslationChannelMask = RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
    else
      SkeletalPoseTranslationChannelMask = 1;
  }
  else
  {
    SkeletalPoseTranslationChannelMask = v3 & 1;
  }
  *v2 = SkeletalPoseTranslationChannelMask;
  return SampledAnimation<>.isTranslationAnimated.modify;
}

_BYTE *SampledAnimation<>.isTranslationAnimated.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 274) = result[8];
  return result;
}

uint64_t SampledAnimation<>.frames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 224) = a1;
  return result;
}

_QWORD *SampledAnimation<>.jointNames.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *result;
  uint64_t SkeletalJointCount;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD **)(v0 + 264);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  SkeletalJointCount = RETimelineDefinitionGetSkeletalJointCount();
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletalJointCount & ~(SkeletalJointCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  if ((SkeletalJointCount & 0x8000000000000000) == 0)
  {
    v1 = result;
    if (SkeletalJointCount)
    {
      for (i = 0; i != SkeletalJointCount; ++i)
      {
        if (RETimelineDefinitionGetSkeletalJointName())
        {
          v5 = String.init(cString:)();
          v7 = v6;
          v9 = v1[2];
          v8 = v1[3];
          if (v9 >= v8 >> 1)
            v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v1);
          v1[2] = v9 + 1;
          v10 = &v1[2 * v9];
          v10[4] = v5;
          v11 = v10 + 4;
        }
        else
        {
          v13 = v1[2];
          v12 = v1[3];
          if (v13 >= v12 >> 1)
            v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v1);
          v1[2] = v13 + 1;
          v14 = &v1[2 * v13];
          v14[4] = 0;
          v11 = v14 + 4;
          v7 = 0xE000000000000000;
        }
        v11[1] = v7;
      }
    }
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t SampledAnimation<>.jointNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 264) = a1;
  return result;
}

uint64_t (*SampledAnimation<>.jointNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  const void *v1;
  _BYTE v4[288];

  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.jointNames.getter();
  return SampledAnimation<>.jointNames.modify;
}

uint64_t SampledAnimation<>.jointNames.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 264) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 264) = v2;
  }
  return result;
}

uint64_t SampledAnimation<>.init(weightNames:frames:name:tweenMode:frameInterval:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, char a6@<W5>, uint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, float a10@<S0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, char *a14, char *a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v41[2];
  char v42;
  char v43;
  char v44;
  char v45[8];
  _OWORD v46[9];
  uint64_t v47;
  char v48[10];

  v27 = *a5;
  v28 = *a7;
  v29 = a7[1];
  v30 = *((_BYTE *)a7 + 16);
  v31 = *a14;
  v32 = *a15;
  v41[0] = 0;
  v41[1] = 0;
  v42 = -1;
  v48[0] = v31;
  v45[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a3, a4, v41, 0, v48, v45, a16, a17 & 1, (uint64_t)v46, a11, a12, a13, a18, a19 & 1, a20, a21 & 1);
  type metadata accessor for TimelineDefinition();
  v33 = swift_allocObject();
  v34 = v46[7];
  *(_OWORD *)(a9 + 152) = v46[6];
  *(_OWORD *)(a9 + 168) = v34;
  *(_OWORD *)(a9 + 184) = v46[8];
  v35 = v46[3];
  *(_OWORD *)(a9 + 88) = v46[2];
  *(_OWORD *)(a9 + 104) = v35;
  v36 = v46[5];
  *(_OWORD *)(a9 + 120) = v46[4];
  *(_OWORD *)(a9 + 136) = v36;
  v37 = v46[1];
  *(_OWORD *)(a9 + 56) = v46[0];
  *(_QWORD *)(v33 + 16) = 0;
  v45[0] = 0;
  v44 = 1;
  v43 = 1;
  *(_QWORD *)a9 = a3;
  *(_QWORD *)(a9 + 8) = a4;
  *(_QWORD *)(a9 + 16) = v28;
  *(_QWORD *)(a9 + 24) = v29;
  *(_BYTE *)(a9 + 32) = v30;
  *(_DWORD *)(a9 + 36) = a8;
  *(_BYTE *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 41) = v32;
  *(_BYTE *)(a9 + 42) = 0;
  *(_BYTE *)(a9 + 43) = a6;
  *(_QWORD *)(a9 + 48) = v33;
  *(_QWORD *)(a9 + 200) = v47;
  *(_OWORD *)(a9 + 72) = v37;
  *(_BYTE *)(a9 + 208) = v27;
  *(float *)(a9 + 212) = a10;
  *(_BYTE *)(a9 + 216) = v45[0];
  *(_QWORD *)(a9 + 224) = a2;
  *(_QWORD *)(a9 + 232) = 0;
  *(_BYTE *)(a9 + 240) = v44;
  *(_QWORD *)(a9 + 248) = 0;
  *(_BYTE *)(a9 + 256) = v43;
  *(_QWORD *)(a9 + 264) = 0;
  *(_WORD *)(a9 + 272) = 514;
  *(_BYTE *)(a9 + 274) = 2;
  *(_QWORD *)(a9 + 280) = a1;
  return swift_bridgeObjectRetain();
}

_QWORD *SampledAnimation<>.weightNames.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *result;
  uint64_t BlendShapeWeightsWeightsCount;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD **)(v0 + 280);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  BlendShapeWeightsWeightsCount = RETimelineDefinitionGetBlendShapeWeightsWeightsCount();
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsWeightsCount & ~(BlendShapeWeightsWeightsCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  if ((BlendShapeWeightsWeightsCount & 0x8000000000000000) == 0)
  {
    v1 = result;
    if (BlendShapeWeightsWeightsCount)
    {
      for (i = 0; i != BlendShapeWeightsWeightsCount; ++i)
      {
        if (RETimelineDefinitionGetBlendShapeWeightsWeightName())
        {
          v5 = String.init(cString:)();
          v7 = v6;
          v9 = v1[2];
          v8 = v1[3];
          if (v9 >= v8 >> 1)
            v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v1);
          v1[2] = v9 + 1;
          v10 = &v1[2 * v9];
          v10[4] = v5;
          v11 = v10 + 4;
        }
        else
        {
          v13 = v1[2];
          v12 = v1[3];
          if (v13 >= v12 >> 1)
            v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v1);
          v1[2] = v13 + 1;
          v14 = &v1[2 * v13];
          v14[4] = 0;
          v11 = v14 + 4;
          v7 = 0xE000000000000000;
        }
        v11[1] = v7;
      }
    }
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t SampledAnimation<>.weightNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 280) = a1;
  return result;
}

uint64_t (*SampledAnimation<>.weightNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  const void *v1;
  _BYTE v4[288];

  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.weightNames.getter();
  return FromToByAnimation<>.jointNames.modify;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for SIMD3<Float>);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for SIMD2<Float>);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for USKNode();
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TweenMode and conformance TweenMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TweenMode and conformance TweenMode;
  if (!lazy protocol witness table cache variable for type TweenMode and conformance TweenMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TweenMode, &type metadata for TweenMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TweenMode and conformance TweenMode);
  }
  return result;
}

uint64_t sub_21BB7E748@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SampledAnimation.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21BB7E774()
{
  return 16;
}

__n128 sub_21BB7E780(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7E78C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = SampledAnimation.blendLayer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BB7E7B4(unsigned int *a1)
{
  return SampledAnimation.blendLayer.setter(*a1);
}

uint64_t sub_21BB7E7D8()
{
  return 16;
}

__n128 sub_21BB7E7E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7E7F8()
{
  return 16;
}

__n128 sub_21BB7E804(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7E810@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = SampledAnimation.fillMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned __int8 *sub_21BB7E848(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return SampledAnimation.fillMode.setter(&v2);
}

uint64_t sub_21BB7E87C()
{
  return 16;
}

__n128 sub_21BB7E888(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7E894@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SampledAnimation.additive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_21BB7E8C0(unsigned __int8 *a1)
{
  return SampledAnimation.additive.setter(*a1);
}

uint64_t sub_21BB7E8E4()
{
  return 16;
}

__n128 sub_21BB7E8F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7E8FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = SampledAnimation.trimStart.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BB7E92C(uint64_t a1)
{
  return SampledAnimation.trimStart.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BB7E958()
{
  return 16;
}

__n128 sub_21BB7E964(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7E970@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = SampledAnimation.trimEnd.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BB7E9A0(uint64_t a1)
{
  return SampledAnimation.trimEnd.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BB7E9CC()
{
  return 16;
}

__n128 sub_21BB7E9D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7E9E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = SampledAnimation.trimDuration.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BB7EA14(uint64_t a1)
{
  return SampledAnimation.trimDuration.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BB7EA40()
{
  return 16;
}

__n128 sub_21BB7EA4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BB7EA58(double *a1@<X8>)
{
  *a1 = SampledAnimation.offset.getter();
}

void sub_21BB7EA80(double *a1)
{
  SampledAnimation.offset.setter(*a1);
}

uint64_t sub_21BB7EAA4()
{
  return 16;
}

__n128 sub_21BB7EAB0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BB7EABC(double *a1@<X8>)
{
  *a1 = SampledAnimation.delay.getter();
}

void sub_21BB7EAE4(double *a1)
{
  SampledAnimation.delay.setter(*a1);
}

uint64_t sub_21BB7EB08()
{
  return 16;
}

__n128 sub_21BB7EB14(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BB7EB20(float *a1@<X8>)
{
  *a1 = SampledAnimation.speed.getter();
}

void sub_21BB7EB48(float *a1)
{
  SampledAnimation.speed.setter(*a1);
}

uint64_t sub_21BB7EB6C()
{
  return 16;
}

__n128 sub_21BB7EB78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BB7EB84(_BYTE *a1@<X8>)
{
  char v2;

  SampledAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

_BYTE *sub_21BB7EBBC(char *a1)
{
  char v2;

  v2 = *a1;
  return SampledAnimation.repeatMode.setter(&v2);
}

uint64_t sub_21BB7EBF0()
{
  return 16;
}

__n128 sub_21BB7EBFC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7EC08@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = SampledAnimation.tweenMode.getter(&v3);
  *a1 = v3;
  return result;
}

_BYTE *sub_21BB7EC40(char *a1)
{
  char v2;

  v2 = *a1;
  return SampledAnimation.tweenMode.setter(&v2);
}

uint64_t sub_21BB7EC74()
{
  return 16;
}

__n128 sub_21BB7EC80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BB7EC8C(float *a1@<X8>)
{
  *a1 = SampledAnimation.frameInterval.getter();
}

void sub_21BB7ECB4(float *a1)
{
  SampledAnimation.frameInterval.setter(*a1);
}

uint64_t sub_21BB7ECD8()
{
  return 16;
}

__n128 sub_21BB7ECE4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BB7ECF0(double *a1@<X8>)
{
  *a1 = SampledAnimation.start.getter();
}

void sub_21BB7ED18(double *a1)
{
  SampledAnimation.start.setter(*a1);
}

uint64_t sub_21BB7ED3C()
{
  return 16;
}

__n128 sub_21BB7ED48(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BB7ED54(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  keypath_get_57Tm(a1, a2, (double (*)(uint64_t))SampledAnimation.end.getter, a3);
}

void sub_21BB7ED60(double *a1)
{
  SampledAnimation.end.setter(*a1);
}

uint64_t sub_21BB7ED84()
{
  return 16;
}

__n128 sub_21BB7ED90(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BB7ED9C(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  keypath_get_57Tm(a1, a2, (double (*)(uint64_t))SampledAnimation.duration.getter, a3);
}

void keypath_get_57Tm(uint64_t a1@<X1>, uint64_t a2@<X2>, double (*a3)(uint64_t)@<X3>, double *a4@<X8>)
{
  uint64_t v6;

  v6 = type metadata accessor for SampledAnimation(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), (uint64_t)a3);
  *a4 = a3(v6);
}

void sub_21BB7EDEC(double *a1)
{
  SampledAnimation.duration.setter(*a1);
}

uint64_t sub_21BB7EE10()
{
  return 16;
}

__n128 sub_21BB7EE1C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BB7EE28@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251F8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_21BB7EE50()
{
  return 0;
}

uint64_t sub_21BB7EE60@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25160], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_21BB7EE88()
{
  return 0;
}

uint64_t sub_21BB7EE98@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25198], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_21BB7EEC0()
{
  return 0;
}

uint64_t sub_21BB7EED0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251B8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_21BB7EEF8()
{
  return 0;
}

uint64_t sub_21BB7EF08@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251D8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_21BB7EF30()
{
  return 0;
}

uint64_t sub_21BB7EF40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25238], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_21BB7EF68()
{
  return 0;
}

_QWORD *sub_21BB7EF78@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = SampledAnimation<>.frames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BB7EFA4()
{
  return 0;
}

uint64_t sub_21BB7EFB4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 272);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16))
      result = RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
    else
      result = 1;
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21BB7F000(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 272) = *result;
  return result;
}

uint64_t sub_21BB7F00C()
{
  return 0;
}

uint64_t sub_21BB7F01C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 273);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16))
      result = RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
    else
      result = 1;
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21BB7F068(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 273) = *result;
  return result;
}

uint64_t sub_21BB7F074()
{
  return 0;
}

uint64_t sub_21BB7F084@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 274);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16))
      result = RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
    else
      result = 1;
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21BB7F0D0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 274) = *result;
  return result;
}

uint64_t sub_21BB7F0DC()
{
  return 0;
}

uint64_t sub_21BB7F0EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SampledAnimation<>.frames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BB7F118()
{
  return 0;
}

_QWORD *sub_21BB7F128@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = SampledAnimation<>.jointNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BB7F150(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 264) = v3;
  return result;
}

uint64_t sub_21BB7F190()
{
  return 0;
}

uint64_t sub_21BB7F1A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SampledAnimation<>.frames.getter();
  *a1 = result;
  return result;
}

uint64_t keypath_set_66Tm_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 224) = v3;
  return result;
}

uint64_t sub_21BB7F20C()
{
  return 0;
}

_QWORD *sub_21BB7F21C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = SampledAnimation<>.weightNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BB7F244(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 280) = v3;
  return result;
}

uint64_t sub_21BB7F284()
{
  return 0;
}

uint64_t storeEnumTagSinglePayload for TweenMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BB7F2E0 + 4 * byte_21BE607C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BB7F314 + 4 * byte_21BE607C0[v4]))();
}

uint64_t sub_21BB7F314(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB7F31C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB7F324);
  return result;
}

uint64_t sub_21BB7F330(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB7F338);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BB7F33C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB7F344(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TweenMode()
{
  return &type metadata for TweenMode;
}

uint64_t destroy for SampledAnimation(uint64_t a1)
{
  int v2;
  int v3;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SampledAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    outlined copy of BindTarget(v6, v7, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v10 = *(unsigned __int8 *)(a2 + 184);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 168);
    v12 = *(_QWORD *)(a2 + 176);
    outlined copy of BindTarget(v11, v12, v10);
    *(_QWORD *)(a1 + 168) = v11;
    *(_QWORD *)(a1 + 176) = v12;
    *(_BYTE *)(a1 + 184) = v10;
  }
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v13 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v13;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_BYTE *)(a1 + 274) = *(_BYTE *)(a2 + 274);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SampledAnimation(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  int v34;
  int v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 16);
  v5 = (__int128 *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      v15 = *v5;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *v4 = v15;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      outlined copy of BindTarget(v12, v13, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_BYTE *)(a1 + 32) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
    v14 = *(_BYTE *)(a2 + 32);
    *v4 = *v5;
    *(_BYTE *)(a1 + 32) = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of BindTarget(v7, v8, *(_BYTE *)(a2 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v11 = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v6;
    outlined consume of BindTarget(v9, v10, v11);
  }
  v16 = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v16;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v17 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v17;
  v18 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v18;
  v19 = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v19;
  v20 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v20;
  v21 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (__int128 *)(a1 + 168);
  v23 = (__int128 *)(a2 + 168);
  v24 = *(unsigned __int8 *)(a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v24 == 255)
    {
      v33 = *v23;
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *v22 = v33;
    }
    else
    {
      v30 = *(_QWORD *)(a2 + 168);
      v31 = *(_QWORD *)(a2 + 176);
      outlined copy of BindTarget(v30, v31, *(_BYTE *)(a2 + 184));
      *(_QWORD *)(a1 + 168) = v30;
      *(_QWORD *)(a1 + 176) = v31;
      *(_BYTE *)(a1 + 184) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    v32 = *(_BYTE *)(a2 + 184);
    *v22 = *v23;
    *(_BYTE *)(a1 + 184) = v32;
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 176);
    outlined copy of BindTarget(v25, v26, *(_BYTE *)(a2 + 184));
    v27 = *(_QWORD *)(a1 + 168);
    v28 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = v25;
    *(_QWORD *)(a1 + 176) = v26;
    v29 = *(_BYTE *)(a1 + 184);
    *(_BYTE *)(a1 + 184) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  v34 = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v34;
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v35 = *(_DWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_DWORD *)(a1 + 212) = v35;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v36;
  LOBYTE(v36) = *(_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = v36;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_BYTE *)(a1 + 273) = *(_BYTE *)(a2 + 273);
  *(_BYTE *)(a1 + 274) = *(_BYTE *)(a2 + 274);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy288_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for SampledAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 32);
    if (v7 != 255)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v5;
      *(_BYTE *)(a1 + 32) = v7;
      outlined consume of BindTarget(v8, v9, v6);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
LABEL_6:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  v12 = (_OWORD *)(a2 + 168);
  v13 = *(unsigned __int8 *)(a1 + 184);
  if (v13 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 168) = *v12;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    goto LABEL_11;
  }
  v14 = *(unsigned __int8 *)(a2 + 184);
  if (v14 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *v12;
  *(_BYTE *)(a1 + 184) = v14;
  outlined consume of BindTarget(v15, v16, v13);
LABEL_11:
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_release();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_WORD *)(a1 + 273) = *(_WORD *)(a2 + 273);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SampledAnimation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SampledAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SampledAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SampledAnimation);
}

uint64_t outlined release of SampledAnimation<simd_quatf>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of SampledAnimation<simd_quatf>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRetain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t type metadata accessor for USKNode()
{
  unint64_t result;

  result = lazy cache variable for type metadata for USKNode;
  if (!lazy cache variable for type metadata for USKNode)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for USKNode);
  }
  return result;
}

uint64_t specialized Set.contains(_:)(char a1, uint64_t a2)
{
  unint64_t v4;
  _BYTE v6[72];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    specialized RawRepresentable<>.hash(into:)((uint64_t)v6, a1);
    v4 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  _BOOL8 result;
  Swift::UInt v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_retain();
    v4 = __CocoaSet.contains(_:)();
    swift_release();
    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  v6 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v6);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = v7 & ~v8;
  v10 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    return 0;
  v11 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(*(_QWORD *)(v11 + 8 * v9) + 16) == v6)
    return 1;
  v12 = ~v8;
  v13 = (v9 + 1) & v12;
  if (((*(_QWORD *)(v10 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
    return 0;
  do
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * v13) + 16);
    result = v14 == v6;
    if (v14 == v6)
      break;
    v13 = (v13 + 1) & v12;
  }
  while (((*(_QWORD *)(v10 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = MEMORY[0x220769EF0](*(_QWORD *)(a2 + 40), a1, 4);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(v8 + 4 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_DWORD *)(v8 + 4 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

RealityFoundation::StateMachineGraph __swiftcall StateMachineGraph.init(initialState:states:transitions:)(Swift::String initialState, Swift::OpaquePointer states, Swift::OpaquePointer transitions)
{
  Swift::OpaquePointer *v3;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::OpaquePointer *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  RealityFoundation::StateMachineGraph result;

  object = initialState._object;
  countAndFlagsBits = initialState._countAndFlagsBits;
  v8 = v3;
  if (!initialState._countAndFlagsBits && initialState._object == (void *)0xE000000000000000
    || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v9 & 1) != 0))
  {
    v9 = swift_bridgeObjectRelease();
    if (*((_QWORD *)states._rawValue + 2))
    {
      countAndFlagsBits = *((_QWORD *)states._rawValue + 4);
      object = (void *)*((_QWORD *)states._rawValue + 5);
      v9 = swift_bridgeObjectRetain();
    }
    else
    {
      countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
  }
  v8->_rawValue = (void *)countAndFlagsBits;
  v8[1]._rawValue = object;
  v8[2]._rawValue = states._rawValue;
  v8[3]._rawValue = transitions._rawValue;
  result.transitions._rawValue = v12;
  result.states._rawValue = v11;
  result.initialState._object = v10;
  result.initialState._countAndFlagsBits = v9;
  return result;
}

uint64_t static StateMachineStatesBuilder.buildBlock()()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t static StateMachineTransitionsBuilder.buildBlock()()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t StateMachineGraph.init(initialState:states:transitions:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  v9 = (_QWORD *)a3();
  v10 = a4();
  if (!a1 && a2 == 0xE000000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    result = swift_bridgeObjectRelease();
    if (v9[2])
    {
      a1 = v9[4];
      a2 = v9[5];
      result = swift_bridgeObjectRetain();
    }
    else
    {
      a1 = 0;
      a2 = 0xE000000000000000;
    }
  }
  *a5 = a1;
  a5[1] = a2;
  a5[2] = v9;
  a5[3] = v10;
  return result;
}

uint64_t StateMachineGraph.initialState.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineGraph.initialState.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineGraph.initialState.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineGraph.states.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StateMachineGraph.states.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*StateMachineGraph.states.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineGraph.transitions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StateMachineGraph.transitions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*StateMachineGraph.transitions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void StateMachineGraph.checkIntegrity()(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int *v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t DynamicType;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  Swift::Int v72;
  Swift::Int v73;
  uint64_t v74;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _QWORD v81[3];
  uint64_t v82;
  uint64_t v83;
  Swift::Int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v2 = v1[2];
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 5;
    return;
  }
  v5 = *v1;
  v4 = v1[1];
  v74 = v1[3];
  v6 = MEMORY[0x24BEE4B08];
  v88 = MEMORY[0x24BEE4B08];
  swift_bridgeObjectRetain();
  v7 = v2 + 56;
  do
  {
    v9 = *(_QWORD *)(v7 - 24);
    v8 = *(_QWORD *)(v7 - 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v10 = specialized Set._Variant.insert(_:)(&v84, v9, v8);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = 0;
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 += 32;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  v11 = v88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = specialized Set.contains(_:)(v5, v4, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = 3;
    swift_bridgeObjectRetain();
    return;
  }
  v87 = v6;
  v13 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v70 = *(_QWORD *)(v74 + 16);
  if (!v70)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62 = a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v63 = -1;
    goto LABEL_42;
  }
  v14 = v74 + 32;
  v15 = swift_bridgeObjectRetain();
  v16 = 0;
  while (1)
  {
    if (v16 >= *(_QWORD *)(v15 + 16))
      goto LABEL_54;
    v71 = v16;
    v17 = (Swift::Int *)(v14 + 72 * v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v23 = v17[4];
    v22 = v17[5];
    v24 = v17[8];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = specialized Set._Variant.insert(_:)(&v84, v18, v19);
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62 = a1;
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v19;
      v63 = 1;
      goto LABEL_42;
    }
    v26 = v88;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = specialized Set.contains(_:)(v20, v21, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62 = a1;
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v21;
      v63 = 2;
      goto LABEL_42;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = specialized Set.contains(_:)(v23, v22, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62 = a1;
      *(_QWORD *)a1 = v23;
      *(_QWORD *)(a1 + 8) = v22;
      v63 = 2;
LABEL_42:
      *(_BYTE *)(v62 + 16) = v63;
LABEL_47:
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(v24 + 16);
    if (v29)
      break;
LABEL_39:
    swift_bridgeObjectRelease();
    v15 = v74;
    v16 = v71 + 1;
    v14 = v74 + 32;
    if (v71 + 1 == v70)
    {
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
  }
  v30 = 0;
  v72 = v24;
  v73 = v24 + 32;
  v69 = *(_QWORD *)(v24 + 16);
  while (1)
  {
    if (v30 >= *(_QWORD *)(v24 + 16))
      goto LABEL_53;
    outlined init with copy of __REAssetService(v73 + 40 * v30, (uint64_t)&v84);
    v31 = v85;
    v32 = v86;
    __swift_project_boxed_opaque_existential_1(&v84, v85);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
    v34 = *(_QWORD *)(v33 + 16);
    if (v34)
      break;
    swift_bridgeObjectRelease();
LABEL_15:
    ++v30;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
    v24 = v72;
    if (v30 == v29)
      goto LABEL_39;
  }
  v35 = v33 + 32;
  while (2)
  {
    outlined init with copy of __REAssetService(v35, (uint64_t)v81);
    v37 = v82;
    v38 = v83;
    __swift_project_boxed_opaque_existential_1(v81, v82);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
    if (v13[2] && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40), (v42 & 1) != 0))
    {
      outlined init with copy of __REAssetService(v13[7] + 40 * v41, (uint64_t)&v76);
    }
    else
    {
      v78 = 0;
      v76 = 0u;
      v77 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v77 + 1))
    {
      outlined init with take of BindableDataInternal(&v76, (uint64_t)&v79);
      __swift_project_boxed_opaque_existential_1(v81, v82);
      DynamicType = swift_getDynamicType();
      __swift_project_boxed_opaque_existential_1(&v79, v80);
      if (DynamicType != swift_getDynamicType())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v64 = v82;
        v65 = v83;
        __swift_project_boxed_opaque_existential_1(v81, v82);
        v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v64, v65);
        v68 = v67;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
        *(_QWORD *)a1 = v66;
        *(_QWORD *)(a1 + 8) = v68;
        *(_BYTE *)(a1 + 16) = 4;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
        goto LABEL_47;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
LABEL_21:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
      v35 += 40;
      if (!--v34)
      {
        swift_bridgeObjectRelease();
        v29 = v69;
        goto LABEL_15;
      }
      continue;
    }
    break;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v76, &demangling cache variable for type metadata for StateMachineParameterProtocol?);
  v44 = v82;
  v45 = v83;
  __swift_project_boxed_opaque_existential_1(v81, v82);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
  v48 = v47;
  outlined init with copy of __REAssetService((uint64_t)v81, (uint64_t)&v79);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v76 = v13;
  v51 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
  v52 = v13[2];
  v53 = (v50 & 1) == 0;
  v54 = v52 + v53;
  if (!__OFADD__(v52, v53))
  {
    v55 = v50;
    if (v13[3] >= v54)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, isUniquelyReferenced_nonNull_native);
      v56 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
      if ((v55 & 1) != (v57 & 1))
        goto LABEL_55;
      v51 = v56;
    }
    v13 = (_QWORD *)v76;
    if ((v55 & 1) != 0)
    {
      v36 = *(_QWORD *)(v76 + 56) + 40 * v51;
      __swift_destroy_boxed_opaque_existential_1(v36);
      outlined init with take of BindableDataInternal(&v79, v36);
    }
    else
    {
      *(_QWORD *)(v76 + 8 * (v51 >> 6) + 64) |= 1 << v51;
      v58 = (uint64_t *)(v13[6] + 16 * v51);
      *v58 = v46;
      v58[1] = v48;
      outlined init with take of BindableDataInternal(&v79, v13[7] + 40 * v51);
      v59 = v13[2];
      v60 = __OFADD__(v59, 1);
      v61 = v59 + 1;
      if (v60)
        goto LABEL_52;
      v13[2] = v61;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(uint64_t))specialized _NativeSet.resize(capacity:), MEMORY[0x24BEE4568], (void (*)(uint64_t))specialized _NativeSet.copyAndResize(capacity:), &demangling cache variable for type metadata for _SetStorage<UInt64>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_retain();
    swift_bridgeObjectRetain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for __REAsset();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v22 = v18;
    if (*(_QWORD *)(v18 + 24) <= *(_QWORD *)(v18 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v19 = v22;
    }
    else
    {
      v19 = v18;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    v10 = *(_QWORD *)(a2 + 16);
    Hasher._combine(_:)(v10);
    v11 = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      v14 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(*(_QWORD *)(v14 + 8 * v13) + 16) == v10)
      {
LABEL_12:
        swift_release();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      v15 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v15;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v14 + 8 * v13) + 16) == v10)
          goto LABEL_12;
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v2;
    *v2 = 0x8000000000000000;
    v17 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v17, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v21;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(uint64_t))specialized _NativeSet.resize(capacity:), MEMORY[0x24BEE1768], (void (*)(uint64_t))specialized _NativeSet.copyAndResize(capacity:), &demangling cache variable for type metadata for _SetStorage<Int>);
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t destroy for StateMachineGraph()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for StateMachineGraph(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for StateMachineGraph(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StateMachineGraph(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StateMachineGraph()
{
  return &type metadata for StateMachineGraph;
}

uint64_t outlined copy of StateMachineError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for StateMachineError(uint64_t a1)
{
  return outlined consume of StateMachineError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of StateMachineError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StateMachineError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of StateMachineError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StateMachineError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of StateMachineError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of StateMachineError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for StateMachineError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of StateMachineError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTag for StateMachineError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for StateMachineError(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StateMachineError()
{
  return &type metadata for StateMachineError;
}

ValueMetadata *type metadata accessor for StateMachineStatesBuilder()
{
  return &type metadata for StateMachineStatesBuilder;
}

ValueMetadata *type metadata accessor for StateMachineTransitionsBuilder()
{
  return &type metadata for StateMachineTransitionsBuilder;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char isUniquelyReferenced_nonNull_native;
  __int128 v23;
  __int128 v24;
  _BYTE v25[72];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v5 = *v2;
  v6 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = v6;
  v30 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  v26 = *(_OWORD *)a2;
  v27 = v7;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v25);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v5 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v5 + 48);
    while (1)
    {
      v13 = v12 + 80 * v10;
      v14 = *(_QWORD *)v13 == *(_QWORD *)a2 && *(float *)(v13 + 8) == *(float *)(a2 + 8);
      v15 = v14 && *(float *)(v13 + 12) == *(float *)(a2 + 12);
      if (v15
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 48), *(float32x4_t *)(a2 + 48)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 64), *(float32x4_t *)(a2 + 64))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 32), *(float32x4_t *)(a2 + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 16), *(float32x4_t *)(a2 + 16))))) & 0x80000000) != 0)
      {
        break;
      }
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_14;
    }
    result = 0;
    v17 = *(_QWORD *)(*v2 + 48) + 80 * v10;
    v18 = *(_OWORD *)(v17 + 16);
    v19 = *(_OWORD *)(v17 + 32);
    v20 = *(_OWORD *)(v17 + 48);
    v21 = *(_OWORD *)(v17 + 64);
    *(_QWORD *)a1 = *(_QWORD *)v17;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v17 + 8);
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a1 + 32) = v19;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v21;
  }
  else
  {
LABEL_14:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v26 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native);
    *v2 = v26;
    swift_bridgeObjectRelease();
    v23 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v23;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    return 1;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _BYTE v15[80];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      outlined init with copy of GeometricPin(*(_QWORD *)(v6 + 48) + 80 * v9, (uint64_t)v15);
      v11 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v15, a2);
      outlined destroy of GeometricPin((uint64_t)v15);
      if (v11)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    outlined destroy of GeometricPin(a2);
    outlined init with copy of GeometricPin(*(_QWORD *)(*v3 + 48) + 80 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of GeometricPin(a2, (uint64_t)v15);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v15, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    outlined init with take of GeometricPin(a2, a1);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t *v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v44 = a1;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v53);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v51 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v49 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v42 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v42 = (uint64_t)&v42 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v42 - v18;
  v43 = v2;
  v20 = *v2;
  Hasher.init(_seed:)();
  outlined init with copy of UUID?(a2, (uint64_t)v19);
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v21 = v47(v19, 1, v6);
  v45 = v9;
  v46 = a2;
  v48 = v7;
  if (v21 == 1)
  {
    v22 = a2;
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v19, v6);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
    swift_bridgeObjectRetain();
    v22 = v46;
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v23 = v20;
  v24 = Hasher._finalize()();
  v25 = -1 << *(_BYTE *)(v20 + 32);
  v26 = v24 & ~v25;
  v52 = v20 + 56;
  v27 = (uint64_t)v49;
  v28 = v47;
  if (((*(_QWORD *)(v20 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    v38 = v43;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v40 = v42;
    outlined init with copy of UUID?(v22, v42);
    v54 = *v38;
    *v38 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v40, v26, isUniquelyReferenced_nonNull_native);
    *v38 = v54;
    swift_bridgeObjectRelease();
    outlined init with take of UUID?(v22, v44);
    return 1;
  }
  v50 = ~v25;
  v51 = *(_QWORD *)(v51 + 72);
  while (1)
  {
    v29 = v23;
    v30 = *(_QWORD *)(v23 + 48);
    v31 = v51 * v26;
    outlined init with copy of UUID?(v30 + v51 * v26, (uint64_t)v14);
    v32 = (uint64_t)&v5[*(int *)(v53 + 48)];
    outlined init with copy of UUID?((uint64_t)v14, (uint64_t)v5);
    outlined init with copy of UUID?(v22, v32);
    if (v28(v5, 1, v6) == 1)
      break;
    outlined init with copy of UUID?((uint64_t)v5, v27);
    if (v28((char *)v32, 1, v6) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v27, v6);
      goto LABEL_7;
    }
    v33 = v48;
    v34 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v45, v32, v6);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA98]);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v36 = *(void (**)(char *, uint64_t))(v33 + 8);
    v37 = v34;
    v27 = (uint64_t)v49;
    v36(v37, v6);
    v36((char *)v27, v6);
    v22 = v46;
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
    v28 = v47;
    outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    if ((v35 & 1) != 0)
      goto LABEL_16;
LABEL_8:
    v26 = (v26 + 1) & v50;
    v23 = v29;
    if (((*(_QWORD *)(v52 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
      goto LABEL_14;
  }
  if (v28((char *)v32, 1, v6) != 1)
  {
LABEL_7:
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for (UUID?, UUID?));
    outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    goto LABEL_8;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
LABEL_16:
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v22, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of UUID?(*(_QWORD *)(*v43 + 48) + v31, v44);
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), uint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;

  v11 = v6;
  v14 = *v6;
  v15 = static Hasher._hash(seed:_:)();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v11;
    *v11 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v17, isUniquelyReferenced_nonNull_native, a3, a4, a5, a6);
    *v11 = v22;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v18 = *(_QWORD *)(v14 + 48);
  if (*(_QWORD *)(v18 + 8 * v17) != a2)
  {
    v19 = ~v16;
    do
    {
      v17 = (v17 + 1) & v19;
      if (((*(_QWORD *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v18 + 8 * v17) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<IKRig.Joint.ID>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<IKRig.Constraint.ID>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x220769EF0](*(_QWORD *)(v6 + 40), a2, 4);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_BYTE *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v8;
  _QWORD v10[9];

  v4 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v10, a2);
  v5 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10[0] = *v8;
  *v8 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v5, isUniquelyReferenced_nonNull_native);
  *v8 = v10[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v12;
    v16 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v29 = v16;
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 16);
    while (1)
    {
      v19 = v14;
      v20 = v18;
      v18(v9, *(_QWORD *)(v14 + 48) + v17 * v13, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA98]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v13 = (v13 + 1) & v28;
      v14 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v13, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v9, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID();
    result = MEMORY[0x220772E3C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native, a3);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(v7 + 48);
  if (*(_QWORD *)(v11 + 8 * v10) != a2)
  {
    v12 = ~v9;
    do
    {
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v11 + 8 * v10) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v10);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for __REAsset();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
        result = Hasher._finalize()();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_31;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_31;
          v16 = v6[v5];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_31:
              if (v28 >= 64)
                bzero((void *)(v2 + 56), 8 * v10);
              else
                *v6 = v26;
              v1 = v27;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                v5 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_37;
                if (v5 >= v10)
                  goto LABEL_31;
                v16 = v6[v5];
                ++v17;
                if (v16)
                  goto LABEL_21;
              }
            }
            v5 = v17;
          }
        }
LABEL_21:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = v0;
  v32 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_22;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v16 >= v8)
      break;
    v17 = (_QWORD *)(v2 + 56);
    v18 = *(_QWORD *)(v32 + 8 * v16);
    ++v11;
    if (!v18)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v8)
        goto LABEL_31;
      v18 = *(_QWORD *)(v32 + 8 * v11);
      if (!v18)
      {
        v19 = v16 + 2;
        if (v19 >= v8)
        {
LABEL_31:
          swift_release();
          v1 = v31;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v32 + 8 * v19);
        if (!v18)
        {
          while (1)
          {
            v11 = v19 + 1;
            if (__OFADD__(v19, 1))
              goto LABEL_39;
            if (v11 >= v8)
              goto LABEL_31;
            v18 = *(_QWORD *)(v32 + 8 * v11);
            ++v19;
            if (v18)
              goto LABEL_21;
          }
        }
        v11 = v19;
      }
    }
LABEL_21:
    v7 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_22:
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v21;
    v13[1] = v22;
    ++*(_QWORD *)(v4 + 16);
  }
  swift_release();
  v1 = v31;
  v17 = (_QWORD *)(v2 + 56);
LABEL_33:
  v30 = 1 << *(_BYTE *)(v2 + 32);
  if (v30 > 63)
    bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v17 = -1 << v30;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char v27[8];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<GeometricPin>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of GeometricPin(*(_QWORD *)(v2 + 48) + 80 * v15, (uint64_t)v27);
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v10 + 8 * v21);
        }
        while (v25 == -1);
        v13 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      result = outlined init with take of GeometricPin((uint64_t)v27, *(_QWORD *)(v4 + 48) + 80 * v13);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;

  v1 = v0;
  v48 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v43 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v42 - v9;
  v11 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID?>);
  v12 = static _SetStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v47 = v2;
    v42 = v0;
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 56);
    v45 = (_QWORD *)(v11 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v44 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    result = swift_retain();
    v20 = 0;
    v21 = v48;
    v46 = v11;
    while (1)
    {
      if (v17)
      {
        v49 = v20;
        v50 = (v17 - 1) & v17;
        v23 = __clz(__rbit64(v17)) | (v20 << 6);
      }
      else
      {
        v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v44)
          goto LABEL_36;
        v25 = v45[v24];
        v26 = v20 + 1;
        if (!v25)
        {
          v26 = v20 + 2;
          if (v20 + 2 >= v44)
            goto LABEL_36;
          v25 = v45[v26];
          if (!v25)
          {
            v26 = v20 + 3;
            if (v20 + 3 >= v44)
              goto LABEL_36;
            v25 = v45[v26];
            if (!v25)
            {
              v27 = v20 + 4;
              if (v20 + 4 >= v44)
              {
LABEL_36:
                swift_release();
                v1 = v42;
                v41 = 1 << *(_BYTE *)(v11 + 32);
                if (v41 > 63)
                  bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v45 = -1 << v41;
                *(_QWORD *)(v11 + 16) = 0;
                break;
              }
              v25 = v45[v27];
              if (!v25)
              {
                while (1)
                {
                  v26 = v27 + 1;
                  if (__OFADD__(v27, 1))
                    goto LABEL_42;
                  if (v26 >= v44)
                    goto LABEL_36;
                  v25 = v45[v26];
                  ++v27;
                  if (v25)
                    goto LABEL_23;
                }
              }
              v26 = v20 + 4;
            }
          }
        }
LABEL_23:
        v49 = v26;
        v50 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v26 << 6);
      }
      v28 = *(_QWORD *)(v5 + 72);
      outlined init with take of UUID?(*(_QWORD *)(v11 + 48) + v28 * v23, (uint64_t)v10);
      Hasher.init(_seed:)();
      outlined init with copy of UUID?((uint64_t)v10, (uint64_t)v7);
      v29 = v47;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v7, 1, v21) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v30 = v13;
        v31 = v10;
        v32 = v43;
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v7, v21);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
        dispatch thunk of Hashable.hash(into:)();
        v33 = v32;
        v10 = v31;
        v13 = v30;
        (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v21);
      }
      v17 = v50;
      result = Hasher._finalize()();
      v34 = -1 << *(_BYTE *)(v13 + 32);
      v35 = result & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
        v21 = v48;
      }
      else
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v34) >> 6;
        v21 = v48;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v39 = v36 == v38;
          if (v36 == v38)
            v36 = 0;
          v37 |= v39;
          v40 = *(_QWORD *)(v18 + 8 * v36);
        }
        while (v40 == -1);
        v22 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      result = outlined init with take of UUID?((uint64_t)v10, *(_QWORD *)(v13 + 48) + v22 * v28);
      ++*(_QWORD *)(v13 + 16);
      v11 = v46;
      v20 = v49;
    }
  }
  result = swift_release();
  *v1 = v13;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
      result = MEMORY[0x220769EF0](*(_QWORD *)(v4 + 40), v18, 4);
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NetworkSendBlockingCategory>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x21BB84A7CLL);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        Hasher.init(_seed:)();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(_QWORD *)(v5 + 48) + v22 * v17;
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v23, v2);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

unint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt32 v14;
  Swift::UInt32 v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  _BYTE v26[80];

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CollisionPlane_v1>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = 1 << *(_BYTE *)(v1 + 32);
    v4 = (_QWORD *)(v1 + 56);
    if (v3 < 64)
      v5 = ~(-1 << v3);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v7 = (unint64_t)(v3 + 63) >> 6;
    result = swift_retain();
    v9 = 0;
    while (1)
    {
      if (v6)
      {
        v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          return result;
        }
        if (v17 >= v7)
          goto LABEL_27;
        v18 = v4[v17];
        ++v9;
        if (!v18)
        {
          v9 = v17 + 1;
          if (v17 + 1 >= v7)
            goto LABEL_27;
          v18 = v4[v9];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v7)
            {
LABEL_27:
              swift_release();
              v20 = 1 << *(_BYTE *)(v1 + 32);
              if (v20 > 63)
                bzero((void *)(v1 + 56), ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v4 = -1 << v20;
              *(_QWORD *)(v1 + 16) = 0;
              break;
            }
            v18 = v4[v19];
            if (!v18)
            {
              while (1)
              {
                v9 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_33;
                if (v9 >= v7)
                  goto LABEL_27;
                v18 = v4[v9];
                ++v19;
                if (v18)
                  goto LABEL_26;
              }
            }
            v9 = v19;
          }
        }
LABEL_26:
        v6 = (v18 - 1) & v18;
        v11 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      v12 = *(_QWORD *)(v1 + 48) + 80 * v11;
      v13 = *(_QWORD *)v12;
      v23 = *(__n128 *)(v12 + 32);
      v24 = *(__n128 *)(v12 + 16);
      v21 = *(__n128 *)(v12 + 64);
      v22 = *(__n128 *)(v12 + 48);
      v25 = *(_QWORD *)(v12 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v13);
      if ((v25 & 0x7FFFFFFF) != 0)
        v14 = v25;
      else
        v14 = 0;
      Hasher._combine(_:)(v14);
      if ((v25 & 0x7FFFFFFF00000000) != 0)
        v15 = HIDWORD(v25);
      else
        v15 = 0;
      Hasher._combine(_:)(v15);
      specialized SIMD.hash(into:)(v26, v24);
      specialized SIMD.hash(into:)(v26, v23);
      specialized SIMD.hash(into:)(v26, v22);
      specialized SIMD.hash(into:)(v26, v21);
      Hasher._finalize()();
      result = _HashTable.nextHole(atOrAfter:)();
      *(_QWORD *)(v2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v16 = *(_QWORD *)(v2 + 48) + 80 * result;
      *(_QWORD *)v16 = v13;
      *(_QWORD *)(v16 + 8) = v25;
      *(__n128 *)(v16 + 16) = v24;
      *(__n128 *)(v16 + 32) = v23;
      *(__n128 *)(v16 + 48) = v22;
      *(__n128 *)(v16 + 64) = v21;
      ++*(_QWORD *)(v2 + 16);
    }
  }
  result = swift_release();
  *v0 = v2;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _SetStorage.resize(original:capacity:move:)();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v8 = (_QWORD *)(v4 + 56);
    v9 = 1 << *(_BYTE *)(v4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_33;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_33;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_33;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                v28 = 1 << *(_BYTE *)(v4 + 32);
                if (v28 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v3 = v2;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v7 >= v12)
                    goto LABEL_33;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_23:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CollisionPlane_v1>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_28;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
      {
        v9 = v24 + 2;
        if (v24 + 2 >= v13)
          goto LABEL_28;
        v25 = *(_QWORD *)(v6 + 8 * v9);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 80 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_OWORD *)(v17 + 16);
    v19 = *(_OWORD *)(v17 + 32);
    v20 = *(_OWORD *)(v17 + 48);
    v21 = *(_OWORD *)(v17 + 64);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    v23 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)v22 = *(_QWORD *)v17;
    *(_QWORD *)(v22 + 8) = v23;
    *(_OWORD *)(v22 + 16) = v18;
    *(_OWORD *)(v22 + 32) = v19;
    *(_OWORD *)(v22 + 48) = v20;
    *(_OWORD *)(v22 + 64) = v21;
  }
  v26 = v24 + 3;
  if (v26 >= v13)
    goto LABEL_28;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[80];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<GeometricPin>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v13)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 80 * v15;
    outlined init with copy of GeometricPin(*(_QWORD *)(v2 + 48) + 80 * v15, (uint64_t)v20);
    result = (void *)outlined init with take of GeometricPin((uint64_t)v20, *(_QWORD *)(v4 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v13)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID?>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_25:
    result = (void *)swift_release();
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16)
      goto LABEL_25;
    v21 = *(_QWORD *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_25;
      v21 = *(_QWORD *)(v10 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v16)
          goto LABEL_25;
        v21 = *(_QWORD *)(v10 + 8 * v12);
        if (!v21)
          break;
      }
    }
LABEL_24:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    outlined init with copy of UUID?(*(_QWORD *)(v6 + 48) + v19, (uint64_t)v5);
    result = (void *)outlined init with take of UUID?((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19);
  }
  v22 = v20 + 3;
  if (v22 >= v16)
    goto LABEL_25;
  v21 = *(_QWORD *)(v10 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_25;
    v21 = *(_QWORD *)(v10 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NetworkSendBlockingCategory>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_33:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v10)
      goto LABEL_31;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_31;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
        break;
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_22:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 2;
  if (v17 >= v10)
  {
LABEL_31:
    result = swift_release();
    v1 = v26;
    goto LABEL_33;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_31;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_32:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain_n();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_21;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v16 >= v29)
      goto LABEL_30;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_30;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v18 = v16 + 2;
        if (v18 >= v29)
        {
LABEL_30:
          result = swift_release_n();
          v1 = v0;
          goto LABEL_32;
        }
        v17 = *(_QWORD *)(v6 + 8 * v18);
        v11 = v18;
        if (!v17)
          break;
      }
    }
LABEL_20:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_21:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_30;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26[8];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<GeometricPin>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    outlined init with copy of GeometricPin(*(_QWORD *)(v2 + 48) + 80 * v15, (uint64_t)v26);
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v10 + 8 * v21);
      }
      while (v25 == -1);
      v13 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    result = outlined init with take of GeometricPin((uint64_t)v26, *(_QWORD *)(v4 + 48) + 80 * v13);
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  int64_t v51;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v47 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v45 - v10;
  v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID?>);
  v13 = static _SetStorage.resize(original:capacity:move:)();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v14;
    return result;
  }
  v45 = v0;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v48 = v12 + 56;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain();
  v21 = 0;
  v46 = v11;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v51 = v21;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v49)
      goto LABEL_36;
    v26 = *(_QWORD *)(v48 + 8 * v25);
    v27 = v21 + 1;
    if (!v26)
    {
      v27 = v21 + 2;
      if (v21 + 2 >= v49)
        goto LABEL_36;
      v26 = *(_QWORD *)(v48 + 8 * v27);
      if (!v26)
      {
        v27 = v21 + 3;
        if (v21 + 3 >= v49)
          goto LABEL_36;
        v26 = *(_QWORD *)(v48 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v18 = (v26 - 1) & v26;
    v51 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v12 + 48);
    v50 = *(_QWORD *)(v6 + 72);
    outlined init with copy of UUID?(v29 + v50 * v24, (uint64_t)v11);
    Hasher.init(_seed:)();
    outlined init with copy of UUID?((uint64_t)v11, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v30 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v31 = v14;
      v32 = v12;
      v33 = v6;
      v34 = v3;
      v35 = v47;
      v30(v47, v8, v2);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
      dispatch thunk of Hashable.hash(into:)();
      v36 = *(void (**)(char *, uint64_t))(v34 + 8);
      v37 = v35;
      v3 = v34;
      v6 = v33;
      v12 = v32;
      v14 = v31;
      v11 = v46;
      v36(v37, v2);
    }
    result = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(v14 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v19 + 8 * v40);
      }
      while (v44 == -1);
      v22 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = outlined init with take of UUID?((uint64_t)v11, *(_QWORD *)(v14 + 48) + v22 * v50);
    ++*(_QWORD *)(v14 + 16);
    v21 = v51;
  }
  v28 = v21 + 4;
  if (v21 + 4 >= v49)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v45;
    goto LABEL_38;
  }
  v26 = *(_QWORD *)(v48 + 8 * v28);
  if (v26)
  {
    v27 = v21 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v49)
      goto LABEL_36;
    v26 = *(_QWORD *)(v48 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
    result = swift_retain();
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    result = MEMORY[0x220769EF0](*(_QWORD *)(v4 + 40), v18, 4);
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NetworkSendBlockingCategory>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x21BB87CA4);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        Hasher.init(_seed:)();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt32 v14;
  Swift::UInt32 v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  _BYTE v25[80];

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CollisionPlane_v1>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_28:
    result = swift_release();
    *v0 = v2;
    return result;
  }
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = v1 + 56;
  if (v3 < 64)
    v5 = ~(-1 << v3);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v7 = (unint64_t)(v3 + 63) >> 6;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_7;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v7)
      goto LABEL_27;
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v7)
        goto LABEL_27;
      v18 = *(_QWORD *)(v4 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_26:
    v6 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_7:
    v12 = *(_QWORD *)(v1 + 48) + 80 * v11;
    v13 = *(_QWORD *)v12;
    v22 = *(__n128 *)(v12 + 32);
    v23 = *(__n128 *)(v12 + 16);
    v20 = *(__n128 *)(v12 + 64);
    v21 = *(__n128 *)(v12 + 48);
    v24 = *(_QWORD *)(v12 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v13);
    if ((v24 & 0x7FFFFFFF) != 0)
      v14 = v24;
    else
      v14 = 0;
    Hasher._combine(_:)(v14);
    if ((v24 & 0x7FFFFFFF00000000) != 0)
      v15 = HIDWORD(v24);
    else
      v15 = 0;
    Hasher._combine(_:)(v15);
    specialized SIMD.hash(into:)(v25, v23);
    specialized SIMD.hash(into:)(v25, v22);
    specialized SIMD.hash(into:)(v25, v21);
    specialized SIMD.hash(into:)(v25, v20);
    Hasher._finalize()();
    result = _HashTable.nextHole(atOrAfter:)();
    *(_QWORD *)(v2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = *(_QWORD *)(v2 + 48) + 80 * result;
    *(_QWORD *)v16 = v13;
    *(_QWORD *)(v16 + 8) = v24;
    *(__n128 *)(v16 + 16) = v23;
    *(__n128 *)(v16 + 32) = v22;
    *(__n128 *)(v16 + 48) = v21;
    *(__n128 *)(v16 + 64) = v20;
    ++*(_QWORD *)(v2 + 16);
  }
  v19 = v17 + 2;
  if (v19 >= v7)
  {
LABEL_27:
    swift_release();
    goto LABEL_28;
  }
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v7)
      goto LABEL_27;
    v18 = *(_QWORD *)(v4 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _SetStorage.resize(original:capacity:move:)();
  v6 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v7 = 0;
  v8 = v4 + 56;
  v9 = 1 << *(_BYTE *)(v4 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_33;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_33;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    result = swift_release();
    v3 = v2;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE v25[72];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_21;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_21;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  v9 = *(_OWORD *)(v5 + 48);
  v28 = *(_OWORD *)(v5 + 32);
  v29 = v9;
  v30 = *(_OWORD *)(v5 + 64);
  v10 = *(_OWORD *)(v5 + 16);
  v26 = *(_OWORD *)v5;
  v27 = v10;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v25);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    v13 = *(_QWORD *)(v8 + 48);
    while (1)
    {
      v14 = v13 + 80 * a2;
      v15 = *(_QWORD *)v14 == *(_QWORD *)v5 && *(float *)(v14 + 8) == *(float *)(v5 + 8);
      v16 = v15 && *(float *)(v14 + 12) == *(float *)(v5 + 12);
      if (v16
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v13 + 80 * a2 + 48), *(float32x4_t *)(v5 + 48)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v13 + 80 * a2 + 64), *(float32x4_t *)(v5 + 64))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v13 + 80 * a2 + 32), *(float32x4_t *)(v5 + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v13 + 80 * a2 + 16), *(float32x4_t *)(v5 + 16))))) & 0x80000000) != 0)
      {
        break;
      }
      a2 = (a2 + 1) & v12;
      if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_21;
    }
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_21:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v18 = (_OWORD *)(*(_QWORD *)(v17 + 48) + 80 * a2);
  v19 = *(_OWORD *)(v5 + 64);
  v20 = *(_OWORD *)(v5 + 32);
  v18[3] = *(_OWORD *)(v5 + 48);
  v18[4] = v19;
  v21 = *(_OWORD *)(v5 + 16);
  *v18 = *(_OWORD *)v5;
  v18[1] = v21;
  v18[2] = v20;
  v22 = *(_QWORD *)(v17 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v24;
  return result;
}

{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_13;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_13;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  v9 = *(_QWORD *)(v5 + 16);
  Hasher._combine(_:)(v9);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    result = type metadata accessor for __REAsset();
    v11 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(*(_QWORD *)(v11 + 8 * a2) + 16) == v9)
    {
LABEL_12:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v11 + 8 * a2) + 16) == v9)
          goto LABEL_12;
      }
    }
  }
LABEL_13:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  _BYTE v15[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_10;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v8 = *v3;
    Hasher.init(_seed:)();
    specialized RawRepresentable<>.hash(into:)((uint64_t)v15, v5);
    result = Hasher._finalize()();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x21BB895ECLL);
  }
  *(_QWORD *)(v9 + 16) = v12;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[80];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      outlined init with copy of GeometricPin(*(_QWORD *)(v9 + 48) + 80 * a2, (uint64_t)v19);
      v13 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v19, a1);
      outlined destroy of GeometricPin((uint64_t)v19);
      if (v13)
        goto LABEL_15;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of GeometricPin(a1, *(_QWORD *)(v14 + 48) + 80 * a2);
  v16 = *(_QWORD *)(v14 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (!v17)
  {
    *(_QWORD *)(v14 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v46 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v44 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v45 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v40 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v40 - v19;
  v21 = *(_QWORD *)(*v3 + 16);
  v22 = *(_QWORD *)(*v3 + 24);
  v42 = v12;
  v43 = v3;
  if (v22 <= v21 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      v41 = v18;
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v22 > v21)
      {
        specialized _NativeSet.copy()();
        goto LABEL_21;
      }
      v41 = v18;
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v50 = *v3;
    Hasher.init(_seed:)();
    outlined init with copy of UUID?(v51, (uint64_t)v20);
    v23 = v46;
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
    if (v24(v20, 1, v9) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v25 = v44;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v44, v20, v9);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v9);
    }
    v26 = v23;
    v27 = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v50 + 32);
    a2 = v27 & ~v28;
    v49 = v50 + 56;
    if (((*(_QWORD *)(v50 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v48 = ~v28;
      v47 = *(_QWORD *)(v12 + 72);
      v29 = (uint64_t)v45;
      do
      {
        outlined init with copy of UUID?(*(_QWORD *)(v50 + 48) + v47 * a2, (uint64_t)v16);
        v34 = (uint64_t)&v8[*(int *)(v6 + 48)];
        outlined init with copy of UUID?((uint64_t)v16, (uint64_t)v8);
        outlined init with copy of UUID?(v51, v34);
        if (v24(v8, 1, v9) == 1)
        {
          if (v24((char *)v34, 1, v9) == 1)
            goto LABEL_24;
        }
        else
        {
          outlined init with copy of UUID?((uint64_t)v8, v29);
          if (v24((char *)v34, 1, v9) != 1)
          {
            v30 = v44;
            (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v44, v34, v9);
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA98]);
            v31 = dispatch thunk of static Equatable.== infix(_:_:)();
            v32 = *(void (**)(char *, uint64_t))(v46 + 8);
            v33 = v30;
            v29 = (uint64_t)v45;
            v32(v33, v9);
            v32((char *)v29, v9);
            v26 = v46;
            outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
            outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
            if ((v31 & 1) != 0)
              goto LABEL_25;
            goto LABEL_14;
          }
          (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v9);
        }
        outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for (UUID?, UUID?));
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
LABEL_14:
        a2 = (a2 + 1) & v48;
      }
      while (((*(_QWORD *)(v49 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  v35 = *v43;
  *(_QWORD *)(*v43 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of UUID?(v51, *(_QWORD *)(v35 + 48) + *(_QWORD *)(v42 + 72) * a2);
  v37 = *(_QWORD *)(v35 + 16);
  v38 = __OFADD__(v37, 1);
  v39 = v37 + 1;
  if (v38)
  {
    __break(1u);
LABEL_24:
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
LABEL_25:
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v35 + 16) = v39;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v13 = *v3;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v10, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA98]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6, v8);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3, void (*a4)(uint64_t), uint64_t a5, void (*a6)(uint64_t), uint64_t *a7)
{
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v9 = result;
  v10 = *(_QWORD *)(*v7 + 16);
  v11 = *(_QWORD *)(*v7 + 24);
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    if ((a3 & 1) == 0)
      a4 = a6;
    if ((a3 & 1) != 0 || v11 <= v10)
    {
      a4(v10 + 1);
      v13 = *v7;
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v13 + 32);
      a2 = result & ~v14;
      if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      {
        v15 = *(_QWORD *)(v13 + 48);
        if (*(_QWORD *)(v15 + 8 * a2) == v9)
        {
LABEL_14:
          result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
        }
        else
        {
          v16 = ~v14;
          while (1)
          {
            a2 = (a2 + 1) & v16;
            if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
              break;
            if (*(_QWORD *)(v15 + 8 * a2) == v9)
              goto LABEL_14;
          }
        }
      }
    }
    else
    {
      result = (uint64_t)specialized _NativeSet.copy()(a7);
    }
  }
  v17 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = v9;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = MEMORY[0x220769EF0](*(_QWORD *)(*v3 + 40), v5, 4);
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_DWORD *)(v10 + 4 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(_QWORD *)(v12 + 48) + 4 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3, uint64_t *a4)
{
  uint64_t *v4;
  Swift::UInt v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v6 = result;
  v7 = *(_QWORD *)(*v4 + 16);
  v8 = *(_QWORD *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v9, a4);
  }
  v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v10 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == v6)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == v6)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = v6;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void static VFXComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2003;
}

RealityFoundation::VFXComponent::SimulationState_optional __swiftcall VFXComponent.SimulationState.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (RealityFoundation::VFXComponent::SimulationState_optional)rawValue;
}

uint64_t VFXComponent.SimulationState.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

RealityFoundation::VFXComponent::SimulationState_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VFXComponent.SimulationState(Swift::Int *a1)
{
  return VFXComponent.SimulationState.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance VFXComponent.SimulationState()
{
  lazy protocol witness table accessor for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VFXComponent.SimulationState()
{
  lazy protocol witness table accessor for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState();
  return RawRepresentable<>.encode(to:)();
}

uint64_t VFXComponent.effect.getter()
{
  return swift_retain();
}

uint64_t VFXComponent.effect.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*VFXComponent.effect.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float VFXComponent.simulationRate.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void VFXComponent.simulationRate.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*VFXComponent.simulationRate.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float VFXComponent.simulationTime.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void VFXComponent.simulationTime.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*VFXComponent.simulationTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void VFXComponent.simulationState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

unsigned __int8 *VFXComponent.simulationState.setter(unsigned __int8 *result)
{
  uint64_t v1;
  int v2;

  v2 = *result;
  if (*(_BYTE *)(v1 + 16) == 1 && v2 == 3)
    LOBYTE(v2) = 2;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

unsigned __int8 *(*VFXComponent.simulationState.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 16);
  return VFXComponent.simulationState.modify;
}

unsigned __int8 *VFXComponent.simulationState.modify(unsigned __int8 *result)
{
  int v1;

  v1 = result[8];
  if (*(_BYTE *)(*(_QWORD *)result + 16) == 1 && v1 == 3)
    LOBYTE(v1) = 2;
  *(_BYTE *)(*(_QWORD *)result + 16) = v1;
  return result;
}

uint64_t VFXComponent.startObserving(parameter:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v2 = v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v7 = v6;
  v8 = *(_QWORD **)(v2 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v12 = &v8[2 * v11];
  v12[4] = v5;
  v12[5] = v7;
  *(_QWORD *)(v2 + 24) = v8;
  return result;
}

uint64_t VFXComponent.stopObserving(parameter:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v2 = v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v7 = v6;
  v8 = *(_QWORD **)(v2 + 32);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v12 = &v8[2 * v11];
  v12[4] = v5;
  v12[5] = v7;
  *(_QWORD *)(v2 + 32) = v8;
  return result;
}

uint64_t VFXComponent.restrictCrossingToMesh(ofPortal:withPadding:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  swift_retain();
  result = swift_release();
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a2;
  *(_BYTE *)(v3 + 56) = a3 & 1;
  return result;
}

Swift::Void __swiftcall VFXComponent.stopRestrictingCrossingToMesh()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 57) = 1;
}

double VFXComponent.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v3;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a2 + 8) = 1065353216;
  *(_BYTE *)(a2 + 16) = 0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_WORD *)(a2 + 56) = 1;
  return result;
}

uint64_t static VFXComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t Asset;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t SimulationState;
  char v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  Asset = REVFXSceneComponentGetAsset();
  if (!Asset)
    goto LABEL_8;
  v3 = Asset;
  type metadata accessor for VFXResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  RERetain();
  REAssetSetSwiftObject();
  REVFXSceneComponentGetSimulationRate();
  v6 = v5;
  SimulationState = REVFXSceneComponentGetSimulationState();
  if ((SimulationState & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_8:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (SimulationState >= 4)
    v8 = 0;
  else
    v8 = SimulationState;
  result = REVFXSceneComponentGetSimulationTime();
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v10;
  *(_BYTE *)(a1 + 16) = v8;
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 1;
  return result;
}

uint64_t VFXComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v2 = *a1;
  v3 = *(unsigned __int8 *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 57);
  REVFXSceneComponentSetAsset();
  REVFXSceneComponentSetSimulationRate();
  REVFXSceneComponentSetSimulationTime();
  if (v3 >= 2)
    REVFXSceneComponentResetSimulation();
  REVFXSceneComponentSetSimulationState();
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain_n();
    v9 = (uint64_t *)(v5 + 40);
    do
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      swift_bridgeObjectRetain();
      v12 = (void *)MEMORY[0x220768C3C](v10, v11);
      MEMORY[0x220772020](v2, v12);
      swift_bridgeObjectRelease();

      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease_n();
  }
  v13 = *(_QWORD *)(v4 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain_n();
    v14 = (uint64_t *)(v4 + 40);
    do
    {
      v15 = *(v14 - 1);
      v16 = *v14;
      swift_bridgeObjectRetain();
      v17 = (void *)MEMORY[0x220768C3C](v15, v16);
      MEMORY[0x220772038](v2, v17);
      swift_bridgeObjectRelease();

      v14 += 2;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease_n();
  }
  if ((v7 & 1) != 0)
    REVFXSceneComponentStopCollidingOutsidePortal();
  if (v6)
  {
    swift_retain();
    REVFXSceneComponentStartCollidingOutsidePortal();
    REVFXSceneComponentSetPortalPaddingForCollisions();
    swift_release();
  }
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance VFXComponent(_DWORD *a1@<X8>)
{
  *a1 = 2003;
}

uint64_t HasVFX.vfxComponent.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

double key path getter for HasVFX.vfxComponent : <A>A@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int16 v3;
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;
  __int16 v9;

  HasVFX.vfxComponent.getter(v6);
  v2 = v8;
  v3 = v9;
  v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = v2;
  *(_WORD *)(a1 + 56) = v3;
  return result;
}

uint64_t key path setter for HasVFX.vfxComponent : <A>A(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v9[7];
  __int16 v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_WORD *)(a1 + 56);
  v9[0] = *(_QWORD *)a1;
  v9[1] = v1;
  v9[2] = v2;
  v9[3] = v3;
  v9[4] = v4;
  v9[5] = v5;
  v9[6] = v6;
  v10 = v7;
  outlined copy of VFXComponent?(v9[0]);
  return HasVFX.vfxComponent.setter((uint64_t)v9);
}

uint64_t HasVFX.vfxComponent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *, _QWORD);
  _BYTE v4[32];
  uint64_t v5[8];

  outlined init with take of VFXComponent?(a1, (uint64_t)v5);
  v2 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v4);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
  outlined release of VFXComponent?(v5);
  swift_release();
  return v2(v4, 0);
}

void (*HasVFX.vfxComponent.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v9;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[9] = a3;
  v7[10] = v3;
  v7[8] = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 96))(&v9);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(v7);
  swift_release();
  return HasVFX.vfxComponent.modify;
}

void HasVFX.vfxComponent.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  _QWORD v12[7];
  __int16 v13;

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  v11 = *((_WORD *)v3 + 28);
  v12[0] = v4;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v9;
  v12[6] = v10;
  v13 = v11;
  if ((a2 & 1) != 0)
  {
    outlined copy of VFXComponent?(v4);
    HasVFX.vfxComponent.setter((uint64_t)v12);
    outlined consume of VFXComponent?(*v3);
  }
  else
  {
    HasVFX.vfxComponent.setter((uint64_t)v12);
  }
  free(v3);
}

void HasVFX.setVFXValue(_:of:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  REVFXSceneComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    v4 = a2[3];
    v5 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v4);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 32))(v21, v4, v5);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    swift_getDynamicType();
    if ((VFXParameterType.isMatching(type:)() & 1) != 0)
    {
      v6 = a2[3];
      v7 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v6);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 32))(&v25, v6, v7);
      __asm { BR              X10 }
    }
    v8 = static os_log_type_t.error.getter();
    outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v21);
    outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v26);
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v9 = static OS_os_log.default.getter();
    v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v25 = v12;
      *(_DWORD *)v11 = 136315394;
      v13 = v22;
      v14 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      *(_WORD *)(v11 + 12) = 2080;
      v17 = v27;
      v18 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      _os_log_impl(&dword_21B9AA000, v9, v10, "[VFX] Missmatch between setValue value type and parameter type of %s.%s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v12, -1, -1);
      MEMORY[0x220772F44](v11, -1, -1);

    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
  }
}

void sub_21BB8A540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterFloat2();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8A5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterFloat4();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8A650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  va_list va;

  va_start(va, a10);
  v12 = v11[3];
  v13 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v15 = (void *)MEMORY[0x220768C3C](v14);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v10, (uint64_t)va);
  type metadata accessor for simd_float4x4(0);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterFloat4x4();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8A6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v21 = v20[3];
  v22 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
  v24 = (void *)MEMORY[0x220768C3C](v23);
  swift_bridgeObjectRelease();
  v25 = v20[3];
  v26 = v20[4];
  __swift_project_boxed_opaque_existential_1(v20, v25);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 32))(&a18, v25, v26);
  outlined init with copy of Any(v19, (uint64_t)&a9);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for CAKeyframeAnimation);
  swift_dynamicCast();
  v27 = a19;
  REVFXSceneComponentSetParameterKeyframeAnimation();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8A7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterFloat3();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8A82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  va_list va;

  va_start(va, a10);
  v12 = v11[3];
  v13 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v15 = (void *)MEMORY[0x220768C3C](v14);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v10, (uint64_t)va);
  type metadata accessor for simd_float3x3(0);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterFloat3x3();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8A8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;

  v22 = v21[3];
  v23 = v21[4];
  __swift_project_boxed_opaque_existential_1(v21, v22);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  v25 = (void *)MEMORY[0x220768C3C](v24);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v20, (uint64_t)&a9);
  swift_dynamicCast();
  v26 = (void *)MEMORY[0x220768C3C](a19, a20);
  swift_bridgeObjectRelease();
  REVFXSceneComponentSetParameterString();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8A950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterBool();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8A9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterUInt8();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8AA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterUInt16();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8AAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterUInt32();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8AB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterUInt64();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8ABD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterInt();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8AC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterInt16();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8ACD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterInt32();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8AD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterInt64();

  JUMPOUT(0x21BB8A520);
}

void sub_21BB8ADD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v11 = v10[3];
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x220768C3C](v13);
  swift_bridgeObjectRelease();
  outlined init with copy of Any(v9, (uint64_t)&a9);
  swift_dynamicCast();
  REVFXSceneComponentSetParameterInt8();

  JUMPOUT(0x21BB8A520);
}

uint64_t HasVFX.vfxValue(of:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  REVFXSceneComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
  {
    v5 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v5);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 32))(&v7, v5, v6);
    __asm { BR              X10 }
  }
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

void sub_21BB8AF6C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = (void *)MEMORY[0x220768C3C](v4);
  swift_bridgeObjectRelease();
  REVFXSceneComponentGetParameterFloat2();
  v7 = v6;

  v0[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  *v0 = v7;
  JUMPOUT(0x21BB8AF48);
}

void sub_21BB8AFD0()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = (void *)MEMORY[0x220768C3C](v4);
  swift_bridgeObjectRelease();
  REVFXSceneComponentGetParameterFloat4();
  v8 = v6;

  v0[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  v7 = swift_allocObject();
  *v0 = v7;
  *(_OWORD *)(v7 + 16) = v8;
  JUMPOUT(0x21BB8AF48);
}

void sub_21BB8B1C8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = (void *)MEMORY[0x220768C3C](v4);
  swift_bridgeObjectRelease();
  REVFXSceneComponentGetParameterFloat3x3();
  v12 = v7;
  v13 = v6;
  v11 = v8;

  type metadata accessor for simd_float3x3(0);
  v0[3] = v9;
  v10 = (_OWORD *)swift_allocObject();
  *v0 = v10;
  v10[1] = v13;
  v10[2] = v12;
  v10[3] = v11;
  JUMPOUT(0x21BB8AF48);
}

void sub_21BB8B254()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = (void *)MEMORY[0x220768C3C](v4);
  swift_bridgeObjectRelease();
  v6 = (id)REVFXSceneComponentGetParameterString();

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v0[3] = MEMORY[0x24BEE0D00];
  *v0 = v7;
  v0[1] = v9;
  JUMPOUT(0x21BB8AF48);
}

void sub_21BB8B2D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char ParameterBool;

  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = (void *)MEMORY[0x220768C3C](v4);
  swift_bridgeObjectRelease();
  ParameterBool = REVFXSceneComponentGetParameterBool();

  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE1328];
  *(_BYTE *)v0 = ParameterBool;
  JUMPOUT(0x21BB8AF48);
}

uint64_t outlined init with take of VFXComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VFXComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of VFXComponent?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21BB8B760()
{
  return swift_deallocObject();
}

uint64_t sub_21BB8B770()
{
  return swift_deallocObject();
}

uint64_t sub_21BB8B780()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VFXComponent.SimulationState, &type metadata for VFXComponent.SimulationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VFXComponent.SimulationState, &type metadata for VFXComponent.SimulationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState);
  }
  return result;
}

uint64_t sub_21BB8B7D8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 16);
  return result;
}

unsigned __int8 *sub_21BB8B7E4(unsigned __int8 *result, uint64_t a2)
{
  int v2;

  v2 = *result;
  if (*(_BYTE *)(a2 + 16) == 1 && v2 == 3)
    LOBYTE(v2) = 2;
  *(_BYTE *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_21BB8B80C()
{
  return 16;
}

__n128 sub_21BB8B818(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for VFXComponent()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for VFXComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VFXComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t assignWithTake for VFXComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for VFXComponent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VFXComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXComponent()
{
  return &type metadata for VFXComponent;
}

uint64_t storeEnumTagSinglePayload for VFXComponent.SimulationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BB8BB04 + 4 * byte_21BE60A29[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BB8BB38 + 4 * byte_21BE60A24[v4]))();
}

uint64_t sub_21BB8BB38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB8BB40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB8BB48);
  return result;
}

uint64_t sub_21BB8BB54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB8BB5CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BB8BB60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB8BB68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFXComponent.SimulationState()
{
  return &type metadata for VFXComponent.SimulationState;
}

uint64_t FromToByAction.from.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FromToByAction.to.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t FromToByAction.by.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

__n128 FromToByAction.timingFunction.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 *v3;
  unsigned __int32 v4;
  unsigned __int8 v5;
  __n128 result;

  v3 = (__n128 *)(v2 + *(int *)(a1 + 44));
  v4 = v3[1].n128_u32[0];
  v5 = v3[1].n128_u8[4];
  result = *v3;
  *a2 = *v3;
  a2[1].n128_u32[0] = v4;
  a2[1].n128_u8[4] = v5;
  return result;
}

__n128 FromToByAction.timingFunction.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int32 v3;
  unsigned __int8 v4;
  __n128 *v5;
  __n128 result;

  v3 = a1[1].n128_u32[0];
  v4 = a1[1].n128_u8[4];
  v5 = (__n128 *)(v2 + *(int *)(a2 + 44));
  result = *a1;
  *v5 = *a1;
  v5[1].n128_u32[0] = v3;
  v5[1].n128_u8[4] = v4;
  return result;
}

uint64_t (*FromToByAction.timingFunction.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void static FromToByAction.TransformMode.default.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -3;
}

uint64_t static FromToByAction.TransformMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  uint64_t v13[2];
  char v14;
  uint64_t v15[2];
  char v16;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 253)
  {
    if (v7 == 253)
    {
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(*(_QWORD *)a1, v2, 0xFDu);
      v8 = v6;
      v9 = v5;
      v10 = -3;
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (v4 == 254)
  {
    if (v7 == 254)
    {
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(*(_QWORD *)a1, v2, 0xFEu);
      v8 = v6;
      v9 = v5;
      v10 = -2;
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (v4 != 255)
  {
    if (v7 <= 0xFC)
    {
      v15[0] = *(_QWORD *)a1;
      v15[1] = v2;
      v16 = v4 & 1;
      v13[0] = v6;
      v13[1] = v5;
      v14 = v7 & 1;
      outlined copy of FromToByAction<A>.TransformMode<A>(v6, v5, v7);
      outlined copy of FromToByAction<A>.TransformMode<A>(v3, v2, v4);
      outlined copy of FromToByAction<A>.TransformMode<A>(v6, v5, v7);
      outlined copy of FromToByAction<A>.TransformMode<A>(v3, v2, v4);
      v11 = specialized static ActionEntityResolution.== infix(_:_:)(v15, v13);
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v3, v2, v4);
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v6, v5, v7);
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v6, v5, v7);
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v3, v2, v4);
      return v11 & 1;
    }
    goto LABEL_12;
  }
  if (v7 != 255)
  {
LABEL_12:
    outlined copy of FromToByAction<A>.TransformMode<A>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
    outlined copy of FromToByAction<A>.TransformMode<A>(v3, v2, v4);
    outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v3, v2, v4);
    outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v6, v5, v7);
    v11 = 0;
    return v11 & 1;
  }
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(*(_QWORD *)a1, v2, 0xFFu);
  v8 = v6;
  v9 = v5;
  v10 = -1;
LABEL_10:
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v8, v9, v10);
  v11 = 1;
  return v11 & 1;
}

BOOL static FromToByAction.TransformMode.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FromToByAction.TransformMode.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t FromToByAction.TransformMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E65726170 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E656373 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65766974616C6572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

Swift::Int FromToByAction.TransformMode.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t FromToByAction.TransformMode.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BB8C11C + 4 * byte_21BE60B80[a1]))(0x746E65726170, 0xE600000000000000);
}

uint64_t sub_21BB8C11C()
{
  return 0x6C61636F6CLL;
}

uint64_t sub_21BB8C130()
{
  return 0x656E656373;
}

uint64_t sub_21BB8C144()
{
  return 0x65766974616C6572;
}

uint64_t FromToByAction.TransformMode.RelativeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 28532 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FromToByAction<A>.TransformMode.CodingKeys(char *a1, char *a2)
{
  return static FromToByAction.TransformMode.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FromToByAction<A>.TransformMode.CodingKeys()
{
  unsigned __int8 *v0;

  return FromToByAction.TransformMode.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FromToByAction<A>.TransformMode.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  FromToByAction.TransformMode.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FromToByAction<A>.TransformMode.CodingKeys()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  FromToByAction.TransformMode.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FromToByAction<A>.TransformMode.CodingKeys()
{
  unsigned __int8 *v0;

  return FromToByAction.TransformMode.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = FromToByAction.TransformMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FromToByAction<A>.TransformMode.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized FromToByAction.TransformMode.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.CodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.CodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FromToByAction<A>.TransformMode.LocalCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.LocalCodingKeys@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  return protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.LocalCodingKeys(a1, (uint64_t (*)(_QWORD, _QWORD))protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError, a2);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FromToByAction<A>.TransformMode.LocalCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.LocalCodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.LocalCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.LocalCodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.LocalCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.ParentCodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.ParentCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.ParentCodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.ParentCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FromToByAction<A>.TransformMode.RelativeCodingKeys()
{
  return 28532;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.RelativeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = FromToByAction.TransformMode.RelativeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.RelativeCodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.RelativeCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.RelativeCodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.RelativeCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.LocalCodingKeys@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(_QWORD, _QWORD)@<X4>, _BYTE *a3@<X8>)
{
  char v4;
  uint64_t result;

  v4 = a2(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  result = swift_bridgeObjectRelease();
  *a3 = v4 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.SceneCodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.SceneCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.SceneCodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.SceneCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t FromToByAction.TransformMode.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for FromToByAction.TransformMode.RelativeCodingKeys(255, v6, v7, a4);
  v51 = MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.RelativeCodingKeys, v8);
  v52 = v8;
  v9 = type metadata accessor for KeyedEncodingContainer();
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v53 = (char *)&v36 - v10;
  v12 = type metadata accessor for FromToByAction.TransformMode.SceneCodingKeys(255, v6, v7, v11);
  v49 = MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.SceneCodingKeys, v12);
  v50 = v12;
  v13 = type metadata accessor for KeyedEncodingContainer();
  v47 = *(_QWORD *)(v13 - 8);
  v48 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v46 = (char *)&v36 - v14;
  v16 = type metadata accessor for FromToByAction.TransformMode.LocalCodingKeys(255, v6, v7, v15);
  v45 = MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.LocalCodingKeys, v16);
  v17 = type metadata accessor for KeyedEncodingContainer();
  v43 = *(_QWORD *)(v17 - 8);
  v44 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v42 = (char *)&v36 - v18;
  v20 = type metadata accessor for FromToByAction.TransformMode.ParentCodingKeys(255, v6, v7, v19);
  v41 = MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.ParentCodingKeys, v20);
  v40 = type metadata accessor for KeyedEncodingContainer();
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v38 = (char *)&v36 - v21;
  v23 = type metadata accessor for FromToByAction.TransformMode.CodingKeys(255, v6, v7, v22);
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.CodingKeys, v23);
  v24 = type metadata accessor for KeyedEncodingContainer();
  v56 = *(_QWORD *)(v24 - 8);
  v57 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v36 - v25;
  v37 = *v4;
  v36 = v4[1];
  v27 = *((unsigned __int8 *)v4 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v27)
  {
    case 253:
      LOBYTE(v58) = 2;
      v30 = v46;
      v29 = v57;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v48);
      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v26, v29);
    case 254:
      LOBYTE(v58) = 1;
      v31 = v42;
      v29 = v57;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v44);
      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v26, v29);
    case 255:
      LOBYTE(v58) = 0;
      v28 = v38;
      v29 = v57;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v26, v29);
  }
  LOBYTE(v58) = 3;
  v33 = v53;
  v34 = v57;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v58 = v37;
  v59 = v36;
  v60 = v27 & 1;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  v35 = v55;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v26, v34);
}

uint64_t FromToByAction.TransformMode.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *v75;

  v56 = a5;
  v8 = type metadata accessor for FromToByAction.TransformMode.RelativeCodingKeys(255, a2, a3, a4);
  v66 = MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.RelativeCodingKeys, v8);
  v67 = v8;
  v51 = type metadata accessor for KeyedDecodingContainer();
  v68 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v55 = (char *)&v45 - v9;
  v11 = type metadata accessor for FromToByAction.TransformMode.SceneCodingKeys(255, a2, a3, v10);
  v12 = MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.SceneCodingKeys, v11);
  v65 = v11;
  v62 = v12;
  v13 = type metadata accessor for KeyedDecodingContainer();
  v63 = *(_QWORD *)(v13 - 8);
  v64 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v54 = (char *)&v45 - v14;
  v16 = type metadata accessor for FromToByAction.TransformMode.LocalCodingKeys(255, a2, a3, v15);
  v17 = MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.LocalCodingKeys, v16);
  v61 = v16;
  v58 = v17;
  v18 = type metadata accessor for KeyedDecodingContainer();
  v59 = *(_QWORD *)(v18 - 8);
  v60 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v53 = (char *)&v45 - v19;
  v21 = type metadata accessor for FromToByAction.TransformMode.ParentCodingKeys(255, a2, a3, v20);
  v57 = MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.ParentCodingKeys, v21);
  v50 = type metadata accessor for KeyedDecodingContainer();
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)&v45 - v22;
  v69 = a3;
  v24 = type metadata accessor for FromToByAction.TransformMode.CodingKeys(255, a2, a3, v23);
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode.CodingKeys, v24);
  v25 = type metadata accessor for KeyedDecodingContainer();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v45 - v27;
  v29 = a1[3];
  v70 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v29);
  v30 = v75;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v30)
  {
    v47 = v21;
    v31 = v69;
    v48 = v26;
    v46 = 0;
    v32 = v25;
    v75 = v28;
    *(_QWORD *)&v71 = KeyedDecodingContainer.allKeys.getter();
    v33 = type metadata accessor for Array();
    MEMORY[0x220772E3C](MEMORY[0x24BEE12C8], v33);
    *(_QWORD *)&v73 = ArraySlice.init<A>(_:)();
    *((_QWORD *)&v73 + 1) = v34;
    *(_QWORD *)&v74 = v35;
    *((_QWORD *)&v74 + 1) = v36;
    v37 = type metadata accessor for ArraySlice();
    MEMORY[0x220772E3C](MEMORY[0x24BEE2190], v37);
    Collection<>.popFirst()();
    v38 = v71;
    if (v71 != 4)
    {
      v45 = v73;
      v71 = v73;
      v72 = v74;
      if ((Collection.isEmpty.getter() & 1) != 0)
        __asm { BR              X9 }
    }
    v39 = type metadata accessor for DecodingError();
    swift_allocError();
    v41 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v41 = type metadata accessor for FromToByAction.TransformMode(0, a2, v31, v42);
    v43 = v75;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x24BEE26D0], v39);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v32);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
}

void sub_21BB8CEF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 160) = 1;
  v4 = *(_QWORD *)(v3 - 304);
  v5 = *(_QWORD *)(v3 - 72);
  v6 = *(_QWORD *)(v3 - 360);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 344) + 8))(v5, v2);
    JUMPOUT(0x21BB8D0F4);
  }
  JUMPOUT(0x21BB8CEA8);
}

void sub_21BB8CF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 - 160) = 2;
  v4 = *(_QWORD *)(v3 - 296);
  v5 = *(_QWORD *)(v3 - 72);
  v6 = *(_QWORD *)(v3 - 360);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v7 = *(_QWORD *)(v3 - 280);
  if (v6)
    JUMPOUT(0x21BB8CFB0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 344) + 8))(v5, v2);
  *(_OWORD *)v7 = 0u;
  *(_BYTE *)(v7 + 16) = -3;
  JUMPOUT(0x21BB8CEC4);
}

void sub_21BB8CFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 160) = 3;
  v3 = *(_QWORD *)(v2 - 288);
  v4 = *(_QWORD *)(v2 - 72);
  v5 = *(_QWORD *)(v2 - 360);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_unknownObjectRelease();
    JUMPOUT(0x21BB8CEBCLL);
  }
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  v6 = *(_QWORD *)(v2 - 320);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v7 = *(_QWORD *)(v2 - 344);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v6);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v1);
  JUMPOUT(0x21BB8D0ECLL);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FromToByAction<A>.TransformMode@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return FromToByAction.TransformMode.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FromToByAction<A>.TransformMode(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FromToByAction.TransformMode.encode(to:)(a1, a2, a3, a4);
}

uint64_t FromToByAction.isAdditive.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t FromToByAction.isAdditive.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 52)) = result;
  return result;
}

uint64_t (*FromToByAction.isAdditive.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t FromToByAction.init(from:to:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28[2];
  int v29;
  char v30;
  _QWORD v31[2];
  char v32;

  v27 = a6;
  v26 = a4;
  v25 = a1;
  v11 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v24 - v16;
  v19 = *(_QWORD *)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v20 = *(_DWORD *)(a3 + 16);
  LOBYTE(a3) = *(_BYTE *)(a3 + 20);
  v21 = *(_QWORD *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 32))((char *)&v24 - v16, a2, a5, v15);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v22(v17, 0, 1, a5);
  v22(v13, 1, 1, a5);
  v31[0] = 0;
  v31[1] = 0;
  v32 = -3;
  v28[0] = v19;
  v28[1] = v18;
  v29 = v20;
  v30 = a3;
  return FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)(v25, (uint64_t)v17, (uint64_t)v13, (uint64_t)v31, v28, v26, a5, v27, a7);
}

uint64_t FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  int *v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v15 = *(_QWORD *)a4;
  v16 = *(_QWORD *)(a4 + 8);
  v17 = *(_BYTE *)(a4 + 16);
  v27 = a5[1];
  v28 = *a5;
  v25 = *((_BYTE *)a5 + 20);
  v26 = *((_DWORD *)a5 + 4);
  v18 = (int *)type metadata accessor for FromToByAction(0, a7, a8, a4);
  *(_BYTE *)(a9 + v18[14]) = 1;
  v19 = (uint64_t *)(a9 + v18[15]);
  *v19 = a7;
  v19[1] = a8;
  v20 = type metadata accessor for Optional();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
  v21(a9, a1, v20);
  v21(a9 + v18[9], a2, v20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v21)(a9 + v18[10], a3, v20);
  v23 = a9 + v18[12];
  *(_QWORD *)v23 = v15;
  *(_QWORD *)(v23 + 8) = v16;
  *(_BYTE *)(v23 + 16) = v17;
  v24 = a9 + v18[11];
  *(_QWORD *)v24 = v28;
  *(_QWORD *)(v24 + 8) = v27;
  *(_DWORD *)(v24 + 16) = v26;
  *(_BYTE *)(v24 + 20) = v25;
  *(_BYTE *)(a9 + v18[13]) = a6;
  return result;
}

uint64_t FromToByAction.init(from:by:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27[2];
  int v28;
  char v29;
  _QWORD v30[2];
  char v31;

  v26 = a6;
  v25 = a4;
  v23 = a7;
  v24 = a1;
  v10 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - v15;
  v18 = *(_QWORD *)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v19 = *(_DWORD *)(a3 + 16);
  LOBYTE(a3) = *(_BYTE *)(a3 + 20);
  v20 = *(_QWORD *)(a5 - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56);
  v21((char *)&v23 - v15, 1, 1, a5, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v12, a2, a5);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v21)(v12, 0, 1, a5);
  v30[0] = 0;
  v30[1] = 0;
  v31 = -3;
  v27[0] = v18;
  v27[1] = v17;
  v28 = v19;
  v29 = a3;
  return FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)(v24, (uint64_t)v16, (uint64_t)v12, (uint64_t)v30, v27, v25, a5, v26, v23);
}

uint64_t FromToByAction.init(from:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29[2];
  int v30;
  char v31;
  _QWORD v32[2];
  char v33;

  v28 = a5;
  v27 = a3;
  v26 = a6;
  v9 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - v13;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v25 - v17;
  v20 = *(_QWORD *)a2;
  v19 = *(_QWORD *)(a2 + 8);
  v21 = *(_DWORD *)(a2 + 16);
  LOBYTE(a2) = *(_BYTE *)(a2 + 20);
  v22 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 32))((char *)&v25 - v17, a1, a4, v16);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v23(v18, 0, 1, a4);
  v23(v14, 1, 1, a4);
  v23(v11, 1, 1, a4);
  v32[0] = 0;
  v32[1] = 0;
  v33 = -3;
  v29[0] = v20;
  v29[1] = v19;
  v30 = v21;
  v31 = a2;
  return FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)((uint64_t)v18, (uint64_t)v14, (uint64_t)v11, (uint64_t)v32, v29, v27, a4, v28, v26);
}

uint64_t FromToByAction.init(to:by:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32[2];
  int v33;
  char v34;
  _QWORD v35[2];
  char v36;

  v31 = a6;
  v30 = a4;
  v27 = a1;
  v28 = a2;
  v29 = a7;
  v9 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - v13;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v26 - v17;
  v19 = *(_QWORD *)a3;
  v20 = *(_QWORD *)(a3 + 8);
  v21 = *(_DWORD *)(a3 + 16);
  LOBYTE(a3) = *(_BYTE *)(a3 + 20);
  v22 = *(_QWORD *)(a5 - 8);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v22 + 56);
  v23((char *)&v26 - v17, 1, 1, a5, v16);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  v24(v14, v27, a5);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v23)(v14, 0, 1, a5);
  v24(v11, v28, a5);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v23)(v11, 0, 1, a5);
  v35[0] = 0;
  v35[1] = 0;
  v36 = -3;
  v32[0] = v19;
  v32[1] = v20;
  v33 = v21;
  v34 = a3;
  return FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)((uint64_t)v18, (uint64_t)v14, (uint64_t)v11, (uint64_t)v35, v32, v30, a5, v31, v29);
}

uint64_t FromToByAction.isReversible.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t FromToByAction.animatedValueType.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 60));
}

uint64_t protocol witness for Decodable.init(from:) in conformance FromToByAction<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FromToByAction.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t FromToByAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  int v34;
  char v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char v64;
  char v65;

  v49 = a4;
  v7 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v50 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v51 = (uint64_t)&v48 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v48 - v12;
  v14 = type metadata accessor for FromToByAction.CodingKeys(255, a2, a3, v13);
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v14);
  v56 = type metadata accessor for KeyedDecodingContainer();
  v52 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v16 = (char *)&v48 - v15;
  v18 = (int *)type metadata accessor for FromToByAction(0, a2, a3, v17);
  v19 = *((_QWORD *)v18 - 1);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v48 - v20;
  *((_BYTE *)&v48 + *(int *)(v22 + 56) - v20) = 1;
  v23 = (uint64_t *)((char *)&v48 + *(int *)(v22 + 60) - v20);
  v57 = a2;
  v58 = a3;
  *v23 = a2;
  v23[1] = a3;
  v24 = a1[3];
  v60 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  v59 = v16;
  v25 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  v28 = v52;
  v27 = v53;
  v61 = v19;
  v30 = v54;
  v29 = v55;
  v31 = type metadata accessor for FromToByAction.TransformMode(0, v57, v58, v26);
  v65 = 3;
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode, v31);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v32 = v63;
  v33 = &v21[v18[12]];
  *(_OWORD *)v33 = v62;
  v33[16] = v32;
  v65 = 4;
  lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v34 = v63;
  v35 = v64;
  v36 = &v21[v18[11]];
  *(_OWORD *)v36 = v62;
  *((_DWORD *)v36 + 4) = v34;
  v36[20] = v35;
  v37 = v27;
  v38 = (uint64_t)v27;
  v39 = v58;
  v40 = v57;
  static FromToByAction.decodeValueIfPresent(from:forKey:)((uint64_t)v59, 0, v57, v58, v38);
  v41 = v37;
  v42 = v29;
  v53 = *(char **)(v30 + 32);
  ((void (*)(char *, char *, uint64_t))v53)(v21, v41, v29);
  v43 = v51;
  static FromToByAction.decodeValueIfPresent(from:forKey:)((uint64_t)v59, 1, v40, v39, v51);
  ((void (*)(char *, uint64_t, uint64_t))v53)(&v21[v18[9]], v43, v42);
  v44 = v50;
  static FromToByAction.decodeValueIfPresent(from:forKey:)((uint64_t)v59, 2, v40, v39, v50);
  ((void (*)(char *, uint64_t, uint64_t))v53)(&v21[v18[10]], v44, v42);
  LOBYTE(v62) = 5;
  v45 = v56;
  LOBYTE(v40) = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v59, v45);
  v21[v18[13]] = v40 & 1;
  v46 = v61;
  (*(void (**)(uint64_t, char *, int *))(v61 + 16))(v49, v21, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  return (*(uint64_t (**)(char *, int *))(v46 + 8))(v21, v18);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FromToByAction<A>(_QWORD *a1, uint64_t a2)
{
  return FromToByAction.encode(to:)(a1, a2);
}

uint64_t FromToByAction.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  __int128 *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  int v35;
  char v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t);
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  int v70;
  char v71;
  char v72;

  v3 = *(_QWORD *)(a2 + 16);
  v66 = (int *)a2;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  v62 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v58 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v60 = (char *)&v53 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v64 = (char *)&v53 - v11;
  v63 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v57 = (char *)&v53 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v59 = (char *)&v53 - v17;
  v18 = *(_QWORD *)(a2 + 24);
  v20 = type metadata accessor for FromToByAction.CodingKeys(255, v3, v18, v19);
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v20);
  v21 = type metadata accessor for KeyedEncodingContainer();
  v65 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v53 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v24 = v18;
  v26 = v66;
  v25 = v67;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v27 = (__int128 *)(v25 + v26[12]);
  v28 = *((_BYTE *)v27 + 16);
  v69 = *v27;
  LOBYTE(v70) = v28;
  v72 = 3;
  v30 = type metadata accessor for FromToByAction.TransformMode(0, v3, v18, v29);
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.TransformMode, v30);
  v31 = (uint64_t)v23;
  v32 = (uint64_t)v68;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v32)
  {
    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v65 + 8);
  }
  else
  {
    v33 = v64;
    v55 = v24;
    v34 = (__int128 *)(v25 + v26[11]);
    v35 = *((_DWORD *)v34 + 4);
    v36 = *((_BYTE *)v34 + 20);
    v69 = *v34;
    v70 = v35;
    v71 = v36;
    v72 = 4;
    lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v68 = v23;
    v40 = v61;
    v39 = v62;
    v53 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
    v53(v33, v25, v61);
    v41 = v63;
    v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
    if (v54(v33, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v40);
      v42 = v40;
    }
    else
    {
      v43 = (uint64_t)v59;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v59, v33, v3);
      static FromToByAction.encodeValue(_:to:forKey:)(v43, (uint64_t)v68, 0, v3, v55);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v3);
      v42 = v61;
    }
    v44 = v60;
    v45 = v53;
    v46 = v54;
    v53(v60, v25 + v26[9], v42);
    if (v46(v44, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v42);
    }
    else
    {
      v47 = v63;
      v48 = (uint64_t)v57;
      (*(void (**)(void))(v63 + 32))();
      static FromToByAction.encodeValue(_:to:forKey:)(v48, (uint64_t)v68, 1, v3, v55);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v3);
      v42 = v61;
      v46 = v54;
    }
    v49 = v58;
    v45(v58, v25 + v26[10], v42);
    if (v46(v49, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v42);
      v50 = v65;
      v31 = (uint64_t)v68;
    }
    else
    {
      v51 = v63;
      v52 = (uint64_t)v56;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v56, v49, v3);
      v31 = (uint64_t)v68;
      static FromToByAction.encodeValue(_:to:forKey:)(v52, (uint64_t)v68, 2, v3, v55);
      v50 = v65;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v3);
    }
    LOBYTE(v69) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8);
  }
  return v37(v31, v21);
}

uint64_t FromToByAction<>.mode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(v1 + 216);
  v3 = *(_QWORD *)(v1 + 224);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 232);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of FromToByAction<A>.TransformMode<A>(v2, v3, v4);
}

__n128 FromToByAction<>.init(from:to:mode:timing:isAdditive:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>, __n128 a8@<Q2>)
{
  char v12;
  unsigned __int8 v13;
  int v14;
  char v15;
  __int128 v16;
  __n128 result;
  _OWORD v21[3];
  char v22;
  char v23;
  char v24;
  char v25;

  outlined init with take of Transform?(a1, (uint64_t)v21, &demangling cache variable for type metadata for Transform?);
  v12 = v22;
  v13 = a2[1].n128_u8[0];
  v14 = *(_DWORD *)(a3 + 16);
  v15 = *(_BYTE *)(a3 + 20);
  v25 = v22;
  v24 = 0;
  v23 = 1;
  v16 = v21[1];
  *(_OWORD *)a5 = v21[0];
  *(_OWORD *)(a5 + 16) = v16;
  *(_OWORD *)(a5 + 32) = v21[2];
  *(_BYTE *)(a5 + 48) = v12;
  *(__n128 *)(a5 + 64) = a6;
  *(__n128 *)(a5 + 80) = a7;
  *(__n128 *)(a5 + 96) = a8;
  *(_BYTE *)(a5 + 112) = 0;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_BYTE *)(a5 + 176) = 1;
  *(_OWORD *)(a5 + 192) = *(_OWORD *)a3;
  *(_DWORD *)(a5 + 208) = v14;
  *(_BYTE *)(a5 + 212) = v15;
  result = *a2;
  *(__n128 *)(a5 + 216) = *a2;
  *(_BYTE *)(a5 + 232) = v13;
  *(_BYTE *)(a5 + 233) = a4;
  *(_BYTE *)(a5 + 234) = 1;
  *(_QWORD *)(a5 + 240) = &type metadata for Transform;
  *(_QWORD *)(a5 + 248) = &protocol witness table for Transform;
  return result;
}

__n128 FromToByAction<>.init(from:by:mode:timing:isAdditive:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>, __n128 a8@<Q2>)
{
  char v12;
  unsigned __int8 v13;
  int v14;
  char v15;
  __int128 v16;
  __n128 result;
  _OWORD v21[3];
  char v22;
  char v23;
  char v24;
  char v25;

  outlined init with take of Transform?(a1, (uint64_t)v21, &demangling cache variable for type metadata for Transform?);
  v12 = v22;
  v13 = a2[1].n128_u8[0];
  v14 = *(_DWORD *)(a3 + 16);
  v15 = *(_BYTE *)(a3 + 20);
  v25 = 0;
  v24 = 1;
  v23 = v22;
  *(__n128 *)a5 = a6;
  *(__n128 *)(a5 + 16) = a7;
  *(__n128 *)(a5 + 32) = a8;
  *(_BYTE *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_BYTE *)(a5 + 112) = 1;
  v16 = v21[1];
  *(_OWORD *)(a5 + 128) = v21[0];
  *(_OWORD *)(a5 + 144) = v16;
  *(_OWORD *)(a5 + 160) = v21[2];
  *(_BYTE *)(a5 + 176) = v12;
  *(_OWORD *)(a5 + 192) = *(_OWORD *)a3;
  *(_DWORD *)(a5 + 208) = v14;
  *(_BYTE *)(a5 + 212) = v15;
  result = *a2;
  *(__n128 *)(a5 + 216) = *a2;
  *(_BYTE *)(a5 + 232) = v13;
  *(_BYTE *)(a5 + 233) = a4;
  *(_BYTE *)(a5 + 234) = 1;
  *(_QWORD *)(a5 + 240) = &type metadata for Transform;
  *(_QWORD *)(a5 + 248) = &protocol witness table for Transform;
  return result;
}

__n128 FromToByAction<>.init(to:by:mode:timing:isAdditive:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>, __n128 a6@<Q1>, __n128 a7@<Q2>, __n128 a8@<Q3>, __n128 a9@<Q4>, __n128 a10@<Q5>)
{
  unsigned __int8 v10;
  int v11;
  char v12;
  __n128 result;

  v10 = a1[1].n128_u8[0];
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *(_BYTE *)(a2 + 20);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_BYTE *)(a4 + 48) = 1;
  *(__n128 *)(a4 + 64) = a5;
  *(__n128 *)(a4 + 80) = a6;
  *(__n128 *)(a4 + 96) = a7;
  *(_BYTE *)(a4 + 112) = 0;
  *(__n128 *)(a4 + 128) = a8;
  *(__n128 *)(a4 + 144) = a9;
  *(__n128 *)(a4 + 160) = a10;
  *(_BYTE *)(a4 + 176) = 0;
  *(_OWORD *)(a4 + 192) = *(_OWORD *)a2;
  *(_DWORD *)(a4 + 208) = v11;
  *(_BYTE *)(a4 + 212) = v12;
  result = *a1;
  *(__n128 *)(a4 + 216) = *a1;
  *(_BYTE *)(a4 + 232) = v10;
  *(_BYTE *)(a4 + 233) = a3;
  *(_BYTE *)(a4 + 234) = 1;
  *(_QWORD *)(a4 + 240) = &type metadata for Transform;
  *(_QWORD *)(a4 + 248) = &protocol witness table for Transform;
  return result;
}

__n128 FromToByAction<>.init(by:timing:isAdditive:)@<Q0>(__n128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  unsigned __int32 v6;
  unsigned __int8 v7;
  __n128 result;

  v6 = a1[1].n128_u32[0];
  v7 = a1[1].n128_u8[4];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_BYTE *)(a3 + 48) = 1;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_BYTE *)(a3 + 112) = 1;
  *(__n128 *)(a3 + 128) = a4;
  *(__n128 *)(a3 + 144) = a5;
  *(__n128 *)(a3 + 160) = a6;
  *(_BYTE *)(a3 + 176) = 0;
  result = *a1;
  *(__n128 *)(a3 + 192) = *a1;
  *(_DWORD *)(a3 + 208) = v6;
  *(_BYTE *)(a3 + 212) = v7;
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 224) = 0;
  *(_BYTE *)(a3 + 232) = -3;
  *(_BYTE *)(a3 + 233) = a2;
  *(_BYTE *)(a3 + 234) = 1;
  *(_QWORD *)(a3 + 240) = &type metadata for Transform;
  *(_QWORD *)(a3 + 248) = &protocol witness table for Transform;
  return result;
}

uint64_t FromToByActionHandler.actionUpdated(event:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  double v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v43 - v10;
  v12 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v43 - v17;
  v20 = type metadata accessor for FromToByAction(255, v4, *(_QWORD *)(a2 + 24), v19);
  result = type metadata accessor for ActionEvent(0, v20, (uint64_t)&protocol witness table for FromToByAction<A>, v21);
  v23 = a1 + *(int *)(result + 76);
  if ((*(_BYTE *)(v23 + 8) & 1) == 0)
  {
    v44 = v18;
    v45 = result;
    v46 = v15;
    v47 = a1;
    v49 = v5;
    v50 = v12;
    v48 = v6;
    v24 = *(double *)v23;
    v25 = fabs(*(double *)v23 + -1.0) <= 0.0001;
    v26 = v24 <= 0.0001 || v25;
    if (v26 == 1)
    {
      v27 = v48;
      v28 = v49;
      v29 = v51;
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v11, v51, v49);
      v30 = v50;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v11, 1, v4) == 1)
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
      }
      else
      {
        v31 = v44;
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v44, v11, v4);
        if (vabdd_f64(*(double *)&v29[*(int *)(a2 + 36)], v24) <= 0.0001)
        {
          ActionEvent.animationState.getter(v45, (uint64_t)v52);
          v41 = v53;
          if (v53)
          {
            v42 = v54;
            __swift_project_boxed_opaque_existential_1(v52, v53);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 64))(v31, v4, v41, v42);
            (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v4);
            result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v4);
            result = outlined destroy of AnimationStateProtocol?((uint64_t)v52);
          }
          v40 = v51;
          v32 = a2;
LABEL_22:
          *(double *)&v40[*(int *)(v32 + 36)] = v24;
          return result;
        }
        (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v4);
      }
    }
    v32 = a2;
    FromToByActionHandler.evaluateResult(_:)(v47, a2, v8);
    v33 = v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v8, 1, v4) == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v8, v49);
    LODWORD(v44) = v26;
    v34 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v35 = v46;
    v34(v46, v8, v4);
    ActionEvent.animationState.getter(v45, (uint64_t)v52);
    v36 = v53;
    if (v53)
    {
      v37 = v54;
      __swift_project_boxed_opaque_existential_1(v52, v53);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 64))(v35, v4, v36, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    }
    else
    {
      outlined destroy of AnimationStateProtocol?((uint64_t)v52);
    }
    v38 = v48;
    v39 = v49;
    if ((_DWORD)v44)
    {
      v40 = v51;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v49);
      v34(v40, v46, v4);
      result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v40, 0, 1, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v46, v4);
      v40 = v51;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v51, v39);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v40, 1, 1, v4);
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t FromToByActionHandler.evaluateResult(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, __n128);
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *boxed_opaque_existential_1;
  char v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  int v67;
  char v68;
  float v69;
  uint64_t v70;
  float v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  void (*v78)(char *, uint64_t);
  char *v79;
  _QWORD v80[2];
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _QWORD v101[3];
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t AssociatedConformanceWitness;

  v100 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v90 = type metadata accessor for Optional();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v8 = (char *)v80 - v7;
  v99 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v92 = (char *)v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v80 - v12;
  v14 = type metadata accessor for Optional();
  v96 = *(_QWORD *)(v14 - 8);
  v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v80 - v15;
  v17 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v94 = (char *)v80 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v95 = (char *)v80 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v80 - v26;
  v98 = a2;
  v93 = *(_QWORD *)(a2 + 24);
  v91 = type metadata accessor for FromToByAction(255, v5, v93, v28);
  v30 = type metadata accessor for ActionEvent(0, v91, (uint64_t)&protocol witness table for FromToByAction<A>, v29);
  v31 = a1 + *(int *)(v30 + 76);
  if (*(_BYTE *)(v31 + 8) == 1)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v100, 1, 1, v5);
  v33 = v30;
  v87 = v17;
  v34 = *(double *)v31;
  v88 = a1;
  ActionEvent.animationState.getter(v30, (uint64_t)v101);
  v35 = v102;
  v84 = v13;
  v86 = v27;
  if (v102)
  {
    v81 = v33;
    v82 = v8;
    v85 = v20;
    v83 = TupleTypeMetadata2;
    v36 = v103;
    __swift_project_boxed_opaque_existential_1(v101, v102);
    v37 = *(void (**)(uint64_t, uint64_t, __n128))(v36 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v39 = type metadata accessor for Optional();
    v80[1] = v80;
    v40 = *(_QWORD *)(v39 - 8);
    v41 = MEMORY[0x24BDAC7A8](v39);
    v43 = (char *)v80 - v42;
    v37(v35, v36, v41);
    v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v43, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
      AssociatedConformanceWitness = 0;
      v104 = 0u;
      v105 = 0u;
    }
    else
    {
      *((_QWORD *)&v105 + 1) = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v104);
      (*(void (**)(uint64_t *, char *, uint64_t))(v44 + 32))(boxed_opaque_existential_1, v43, AssociatedTypeWitness);
    }
    TupleTypeMetadata2 = v83;
    v20 = v85;
    v45 = v87;
    v46 = v88;
    v8 = v82;
    v33 = v81;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
  }
  else
  {
    outlined destroy of AnimationStateProtocol?((uint64_t)v101);
    v104 = 0u;
    v105 = 0u;
    AssociatedConformanceWitness = 0;
    v45 = v87;
    v46 = v88;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  v48 = swift_dynamicCast();
  v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
  if ((v48 & 1) != 0)
  {
    v49((uint64_t)v16, 0, 1, v5);
    v50 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v97 = v49;
    v51 = (uint64_t)v86;
    v50(v86, v16, v5);
    v52 = v46;
    v53 = v45;
    FromToByActionHandler.getStartEnd(event:base:)(v52, v51, v98, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v8, 1, TupleTypeMetadata2) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v51, v5);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v8, v90);
      v54 = v100;
      v55 = 1;
    }
    else
    {
      v85 = v20;
      v56 = *(int *)(TupleTypeMetadata2 + 48);
      v57 = v84;
      v58 = &v84[v56];
      v59 = &v8[v56];
      v50(v84, v8, v5);
      v50(v58, v59, v5);
      v60 = v92;
      v61 = &v92[*(int *)(TupleTypeMetadata2 + 48)];
      v62 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
      v62(v92, v57, v5);
      v62(v61, v58, v5);
      v50(v95, v60, v5);
      v63 = v94;
      v50(v94, v61, v5);
      v64 = v88 + *(int *)(v33 + 36);
      v65 = v91;
      v66 = (__int128 *)(v64 + *(int *)(v91 + 44));
      v67 = *((_DWORD *)v66 + 4);
      v68 = *((_BYTE *)v66 + 20);
      v69 = v34;
      v104 = *v66;
      LODWORD(v105) = v67;
      BYTE4(v105) = v68;
      AnimationTimingFunction.coreEasingFunction.getter();
      if (*(_QWORD *)(v70 + 16))
      {
        REEasingFunctionEvaluateEx();
        v69 = v71;
      }
      v72 = v85;
      v73 = v95;
      swift_release();
      v74 = v93;
      (*(void (**)(char *, uint64_t, uint64_t, double))(v93 + 40))(v63, v5, v93, v69);
      if (*(_BYTE *)(v64 + *(int *)(v65 + 52)) == 1)
      {
        v75 = v100;
        v76 = v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v72, v5, v74);
        v77 = *(void (**)(char *, uint64_t))(v87 + 8);
        v77(v72, v5);
        v77(v63, v5);
        v77(v73, v5);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v84, TupleTypeMetadata2);
        v77(v76, v5);
        v54 = v75;
      }
      else
      {
        v78 = *(void (**)(char *, uint64_t))(v87 + 8);
        v78(v63, v5);
        v78(v73, v5);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v84, TupleTypeMetadata2);
        v78(v86, v5);
        v79 = v100;
        v50(v100, v72, v5);
        v54 = v79;
      }
      v55 = 0;
    }
    return v97((uint64_t)v54, v55, 1, v5);
  }
  else
  {
    v49((uint64_t)v16, 1, 1, v5);
    (*(void (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(v96 + 8))(v16, v97);
    return v49((uint64_t)v100, 1, 1, v5);
  }
}

uint64_t FromToByActionHandler.getStartEnd(event:base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, __n128);
  uint64_t v55;
  char *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  int v75;
  char *v76;
  char *v77;
  char *v78;
  int v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  char *v82;
  char *v83;
  char *v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  void (*v88)(void);
  char *v89;
  void (*v90)(char *, char *, uint64_t);
  int v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  void (*v96)(char *, char *, uint64_t);
  int v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  char *v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t TupleTypeMetadata2;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  char *v130;
  char *v131;
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  char *v134;
  uint64_t v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  _OWORD v139[29];
  _OWORD v140[29];
  _BYTE v141[528];
  _BYTE v142[128];

  v129 = (void (*)(char *, uint64_t))a3;
  v126 = a2;
  v127 = a4;
  v5 = *(_QWORD *)(a3 + 16);
  v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v112 = (char *)&v108 - v8;
  v135 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v110 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v125 = (char *)&v108 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v111 = (char *)&v108 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v109 = (char *)&v108 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v134 = (char *)&v108 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v121 = (char *)&v108 - v20;
  v21 = *(_QWORD *)(a3 + 24);
  v128 = v5;
  v114 = v21;
  v23 = type metadata accessor for FromToByAction(255, v5, v21, v22);
  v25 = type metadata accessor for ActionEvent(0, v23, (uint64_t)&protocol witness table for FromToByAction<A>, v24);
  v117 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v118 = (char *)&v108 - v26;
  v27 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v123 = (char *)&v108 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v122 = (char *)&v108 - v34;
  MEMORY[0x24BDAC7A8](v35);
  v108 = (char *)&v108 - v36;
  MEMORY[0x24BDAC7A8](v37);
  v115 = (char *)&v108 - v38;
  MEMORY[0x24BDAC7A8](v39);
  v124 = (char *)&v108 - v40;
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v108 - v42;
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v108 - v45;
  v48 = MEMORY[0x24BDAC7A8](v47);
  v50 = (char *)&v108 - v49;
  v119 = v51;
  v120 = a1;
  v52 = a1 + *(int *)(v51 + 36);
  v133 = v53;
  v54 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v53 + 16);
  v54((char *)&v108 - v49, v52, v7, v48);
  ((void (*)(char *, uint64_t, uint64_t))v54)(v46, v52 + *(int *)(v23 + 36), v7);
  v55 = v52 + *(int *)(v23 + 40);
  v56 = v43;
  v132 = (void (*)(char *, char *, uint64_t))v54;
  ((void (*)(char *, uint64_t, uint64_t))v54)(v43, v55, v7);
  (*(void (**)(char *, char *, void (*)(char *, uint64_t)))(v27 + 16))(v30, v130, v129);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
  v57 = swift_dynamicCast();
  v131 = v46;
  if ((v57 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v118, v120, v119);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionEvent<FromToByAction<Transform>>);
    swift_dynamicCast();
    memcpy(v139, v140, sizeof(v139));
    v58 = v128;
    (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v121, v126, v128);
    swift_dynamicCast();
    specialized FromToByActionHandler<>.getFromTo(event:base:)((uint64_t)v139, (uint64_t)v142, v136, v137, v138);
    memcpy(v141, v139, 0x1D0uLL);
    outlined release of ActionEvent<FromToByAction<Transform>>((uint64_t)v141);
    v59 = v133;
    v60 = *(void (**)(char *, uint64_t))(v133 + 8);
    v60(v46, v7);
    v60(v50, v7);
    outlined init with take of Transform?((uint64_t)v142, (uint64_t)v140, &demangling cache variable for type metadata for (from: Transform?, to: Transform?)?);
    v61 = v7;
    if ((BYTE1(v140[7]) & 1) != 0)
    {
      v60(v43, v7);
      v62 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v127, 1, 1, v62);
    }
    v65 = v50;
    v66 = v59;
    v130 = v56;
    v139[0] = v140[0];
    v139[1] = v140[1];
    v139[2] = v140[2];
    LOBYTE(v139[3]) = v140[3];
    v139[4] = v140[4];
    v139[5] = v140[5];
    v139[6] = v140[6];
    LOBYTE(v139[7]) = v140[7];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (from: Transform?, to: Transform?));
    v68 = v112;
    v67 = TupleTypeMetadata2;
    swift_dynamicCast();
    v69 = &v68[*(int *)(v67 + 48)];
    v70 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    v70(v65, v68, v7);
    v70(v46, v69, v7);
    v64 = v135;
  }
  else
  {
    v130 = v43;
    v58 = v128;
    v64 = v135;
    v65 = v50;
    v61 = v7;
  }
  v71 = v124;
  v72 = v132;
  v132(v124, v65, v61);
  v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
  v74 = v58;
  v75 = v73(v71, 1, v58);
  v76 = v134;
  v116 = v65;
  if (v75 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v134, v71, v58);
    v83 = v122;
    v86 = v123;
    v85 = v73;
    goto LABEL_14;
  }
  v129 = *(void (**)(char *, uint64_t))(v133 + 8);
  v129(v71, v61);
  v77 = v115;
  v78 = v131;
  v72(v115, v131, v61);
  v79 = v73(v77, 1, v74);
  v80 = v72;
  v81 = v73;
  if (v79 != 1)
  {
    v87 = v64;
    v88 = *(void (**)(void))(v64 + 32);
    v89 = v109;
    v90 = v80;
    ((void (*)(char *, char *, uint64_t))v88)(v109, v77, v74);
    v82 = v108;
    v90(v108, v130, v61);
    v91 = v81(v82, 1, v74);
    v83 = v122;
    v85 = v81;
    if (v91 == 1)
    {
      (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v74);
      v64 = v87;
      v84 = v131;
      v76 = v134;
      goto LABEL_12;
    }
    v88();
    v92 = v114;
    v93 = v87;
    v94 = v121;
    (*(void (**)(uint64_t, uint64_t))(v114 + 16))(v74, v114);
    (*(void (**)(char *, uint64_t, uint64_t))(v92 + 24))(v94, v74, v92);
    v95 = *(void (**)(char *, uint64_t))(v93 + 8);
    v95(v94, v74);
    v95(v111, v74);
    v95(v89, v74);
    v86 = v123;
LABEL_14:
    v84 = v131;
    goto LABEL_15;
  }
  v82 = v77;
  v83 = v122;
  v84 = v78;
  v85 = v81;
LABEL_12:
  v129(v82, v61);
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v76, v126, v74);
  v86 = v123;
LABEL_15:
  v96 = v132;
  v132(v83, v84, v61);
  v97 = v85(v83, 1, v74);
  v98 = *(void (**)(char *, uint64_t))(v133 + 8);
  if (v97 == 1)
  {
    v98(v83, v61);
    v99 = v130;
    v96(v86, v130, v61);
    if (v85(v86, 1, v74) == 1)
    {
      v98(v99, v61);
      v98(v131, v61);
      v98(v116, v61);
      v98(v86, v61);
      v100 = v135;
      v101 = v125;
      (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v125, v126, v74);
      v102 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
    }
    else
    {
      v103 = v135;
      v102 = *(void (**)(char *, char *, uint64_t))(v135 + 32);
      v104 = v110;
      v102(v110, v86, v74);
      (*(void (**)(char *, uint64_t))(v114 + 24))(v104, v74);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v74);
      v98(v99, v61);
      v101 = v125;
      v98(v131, v61);
      v98(v116, v61);
    }
  }
  else
  {
    v98(v130, v61);
    v98(v84, v61);
    v98(v116, v61);
    v102 = *(void (**)(char *, char *, uint64_t))(v135 + 32);
    v101 = v125;
    v102(v125, v83, v74);
  }
  v105 = v127;
  v106 = swift_getTupleTypeMetadata2();
  v107 = &v105[*(int *)(v106 + 48)];
  v102(v105, v134, v74);
  v102(v107, v101, v74);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v105, 0, 1, v106);
}

unint64_t FromToByAction.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FromToByAction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t FromToByAction.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BB8FA38 + 4 * byte_21BE60B88[a1]))(1836020326, 0xE400000000000000);
}

uint64_t sub_21BB8FA38()
{
  return 28532;
}

uint64_t sub_21BB8FA44()
{
  return 31074;
}

uint64_t sub_21BB8FA50()
{
  return 0x726F66736E617274;
}

uint64_t sub_21BB8FA74()
{
  return 0x7546676E696D6974;
}

uint64_t sub_21BB8FA98()
{
  return 0x6974696464417369;
}

uint64_t FromToByAction.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BB8FAE0 + 4 * byte_21BE60B8E[a1]))(1836020326, 0xE400000000000000);
}

uint64_t sub_21BB8FAE0()
{
  return 28532;
}

uint64_t sub_21BB8FAEC()
{
  return 31074;
}

uint64_t sub_21BB8FAF8()
{
  return 0x726F66736E617274;
}

uint64_t sub_21BB8FB1C()
{
  return 0x7546676E696D6974;
}

uint64_t sub_21BB8FB40()
{
  return 0x6974696464417369;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FromToByAction<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FromToByAction<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FromToByAction<A>.CodingKeys()
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance FromToByAction<A>.CodingKeys()
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FromToByAction<A>.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = FromToByAction.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FromToByAction<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = FromToByAction.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FromToByAction<A>.CodingKeys()
{
  unsigned __int8 *v0;

  return FromToByAction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FromToByAction.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FromToByAction<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized FromToByAction.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t static FromToByAction.DecodingErrors.== infix(_:_:)()
{
  return 1;
}

void FromToByAction.DecodingErrors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int FromToByAction.DecodingErrors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t static FromToByAction.decodeValueIfPresent(from:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v11 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, a4);
  MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v11);
  type metadata accessor for KeyedDecodingContainer();
  if ((KeyedDecodingContainer.contains(_:)() & 1) != 0)
  {
    result = static FromToByAction.decodeValue(from:forKey:)(a1, a2, a3, a4);
    if (v5)
      return result;
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, v13, 1, a3);
}

uint64_t static FromToByAction.encodeValue(_:to:forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;

  v72 = a5;
  v71 = a2;
  MEMORY[0x24BDAC7A8](a1);
  v65 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v66 = (char *)&v64 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v67 = (char *)&v64 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v68 = (char *)&v64 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v69 = (char *)&v64 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v64 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v64 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v64 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v64 - v27;
  v30 = MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v64 - v31;
  v70 = v33;
  v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v33 + 16);
  v34((char *)&v64 - v31, a1, v35, v30);
  if (swift_dynamicCast())
  {
    ((void (*)(char *, uint64_t, uint64_t))v34)(v28, a1, a4);
    swift_dynamicCast();
    LOBYTE(v73) = a3;
    v37 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v72, v36);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v37);
    type metadata accessor for KeyedEncodingContainer();
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v32, a4);
  }
  v64 = (void (*)(char *, uint64_t, uint64_t))v34;
  v38 = v72;
  if (swift_dynamicCast())
  {
    v64(v25, a1, a4);
    swift_dynamicCast();
    LOBYTE(v73) = a3;
    v40 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v38, v39);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v40);
    type metadata accessor for KeyedEncodingContainer();
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v32, a4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCast())
  {
    v64(v22, a1, a4);
    swift_dynamicCast();
    *(_QWORD *)&v73 = v76;
    v79 = a3;
    v42 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v38, v41);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v42);
    type metadata accessor for KeyedEncodingContainer();
    v43 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>;
    v44 = &demangling cache variable for type metadata for SIMD2<Float>;
    v45 = MEMORY[0x24BEE40D8];
LABEL_11:
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v43, v44, v45);
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (swift_dynamicCast())
  {
    v64(v19, a1, a4);
    swift_dynamicCast();
    v73 = v76;
    v79 = a3;
    v47 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v38, v46);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v47);
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
LABEL_12:
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v32, a4);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  if (swift_dynamicCast())
  {
    v64(v69, a1, a4);
    swift_dynamicCast();
    v73 = v76;
    v79 = a3;
    v49 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v38, v48);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v49);
    type metadata accessor for KeyedEncodingContainer();
    v43 = &lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
    v44 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
    v45 = MEMORY[0x24BEE4168];
    goto LABEL_11;
  }
  v51 = v38;
  type metadata accessor for simd_quatf(0);
  if (swift_dynamicCast())
  {
    v64(v68, a1, a4);
    swift_dynamicCast();
    v73 = v76;
    v79 = a3;
    v53 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v38, v52);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v53);
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4168]);
    goto LABEL_12;
  }
  if (swift_dynamicCast())
  {
    v64(v67, a1, a4);
    swift_dynamicCast();
    v73 = v76;
    v74 = v77;
    v75 = v78;
    v79 = a3;
    v55 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v38, v54);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v55);
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type Transform and conformance Transform();
    goto LABEL_12;
  }
  v56 = swift_dynamicCast();
  v57 = v64;
  if (v56)
  {
    swift_bridgeObjectRelease();
    v57(v66, a1, a4);
    swift_dynamicCast();
    *(_QWORD *)&v73 = v76;
    v79 = a3;
    v59 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v51, v58);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v59);
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms();
  }
  else
  {
    if (!swift_dynamicCast())
    {
      v63 = type metadata accessor for FromToByAction.DecodingErrors(0, a4, v51, v60);
      MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.DecodingErrors, v63);
      swift_allocError();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v32, a4);
    }
    swift_bridgeObjectRelease();
    v57(v65, a1, a4);
    swift_dynamicCast();
    *(_QWORD *)&v73 = v76;
    v79 = a3;
    v62 = type metadata accessor for FromToByAction.CodingKeys(255, a4, v51, v61);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v62);
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights();
  }
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v32, a4);
}

uint64_t static FromToByAction.decodeValue(from:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (swift_dynamicCastMetatype())
  {
    v8 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v7);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v8);
    type metadata accessor for KeyedDecodingContainer();
    result = KeyedDecodingContainer.decode(_:forKey:)();
    if (v4)
      return result;
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    v11 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v10);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v11);
    type metadata accessor for KeyedDecodingContainer();
    result = KeyedDecodingContainer.decode(_:forKey:)();
    if (v4)
      return result;
    return swift_dynamicCast();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCastMetatype())
  {
    v13 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v12);
    MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v13);
    type metadata accessor for KeyedDecodingContainer();
    v14 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>;
    v15 = &demangling cache variable for type metadata for SIMD2<Float>;
    v16 = MEMORY[0x24BEE40E8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    if (swift_dynamicCastMetatype())
    {
      v18 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v17);
      MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v18);
      type metadata accessor for KeyedDecodingContainer();
      v14 = &lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
      v15 = &demangling cache variable for type metadata for SIMD3<Float>;
      v16 = MEMORY[0x24BEE4118];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for simd_quatf(0);
        if (swift_dynamicCastMetatype())
        {
          v22 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v21);
          MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v22);
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4178]);
          result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        else if (swift_dynamicCastMetatype())
        {
          v24 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v23);
          MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v24);
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type Transform and conformance Transform();
          result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        else if (swift_dynamicCastMetatype())
        {
          v26 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v25);
          MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v26);
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms();
          result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        else
        {
          if (!swift_dynamicCastMetatype())
          {
            v29 = type metadata accessor for FromToByAction.DecodingErrors(0, a3, a4, v27);
            MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.DecodingErrors, v29);
            swift_allocError();
            return swift_willThrow();
          }
          v28 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v27);
          MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v28);
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights();
          result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        return result;
      }
      v20 = type metadata accessor for FromToByAction.CodingKeys(255, a3, a4, v19);
      MEMORY[0x220772E3C](&protocol conformance descriptor for FromToByAction<A>.CodingKeys, v20);
      type metadata accessor for KeyedDecodingContainer();
      v14 = &lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
      v15 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
      v16 = MEMORY[0x24BEE4178];
    }
  }
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v14, v15, v16);
  result = KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!v4)
    return swift_dynamicCast();
  return result;
}

uint64_t type metadata accessor for FromToByAction.TransformMode.RelativeCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction.TransformMode.RelativeCodingKeys);
}

uint64_t type metadata accessor for FromToByAction.TransformMode.SceneCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction.TransformMode.SceneCodingKeys);
}

uint64_t type metadata accessor for FromToByAction.TransformMode.LocalCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction.TransformMode.LocalCodingKeys);
}

uint64_t type metadata accessor for FromToByAction.TransformMode.ParentCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction.TransformMode.ParentCodingKeys);
}

uint64_t type metadata accessor for FromToByAction.TransformMode.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction.TransformMode.CodingKeys);
}

uint64_t type metadata accessor for FromToByAction.TransformMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction.TransformMode);
}

uint64_t type metadata accessor for FromToByAction.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction.CodingKeys);
}

uint64_t type metadata accessor for FromToByAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction);
}

void base witness table accessor for Equatable in FromToByAction<A>.DecodingErrors()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t type metadata instantiation function for FromToByAction()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for FromToByAction()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for FromToByAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v5(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v6 + v7;
  v9 = ~v7;
  v10 = (v6 + v7 + a1) & ~v7;
  if (!v5(v10, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v3);
  v11 = (v8 + v10) & v9;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v11, 1, v3);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v11, v3);
  if (*(unsigned __int8 *)(((((v6 + v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8) + 0x10) <= 1u)
    return outlined consume of ActionEntityResolution();
  return result;
}

void *initializeWithCopy for FromToByAction(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = (void *)(((unint64_t)v15 + v13) & v14);
  v18 = ((unint64_t)v16 + v13) & v14;
  if (v7((const void *)v18, 1, v5))
  {
    memcpy(v17, (const void *)(((unint64_t)v16 + v13) & v14), v11);
  }
  else
  {
    (*(void (**)(void *, unint64_t, uint64_t))(v6 + 16))(v17, ((unint64_t)v16 + v13) & v14, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  v19 = ((unint64_t)v17 + v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (v11 + 15 + v18) & 0xFFFFFFFFFFFFFFF0;
  v21 = *(_OWORD *)v20;
  *(_QWORD *)(v19 + 13) = *(_QWORD *)(v20 + 0xD);
  *(_OWORD *)v19 = v21;
  v22 = (v19 + 28) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v20 + 28) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(unsigned __int8 *)(v23 + 16);
  if (v24 > 1)
  {
    v28 = *(_OWORD *)v23;
    *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
    *(_OWORD *)v22 = v28;
  }
  else
  {
    v25 = v24 != 0;
    v26 = *(_QWORD *)v23;
    v27 = *(_QWORD *)(v23 + 8);
    outlined copy of ActionEntityResolution();
    *(_QWORD *)v22 = v26;
    *(_QWORD *)(v22 + 8) = v27;
    *(_BYTE *)(v22 + 16) = v25;
  }
  *(_BYTE *)(v22 + 17) = *(_BYTE *)(v23 + 17);
  *(_BYTE *)(v22 + 18) = *(_BYTE *)(v23 + 18);
  *(_OWORD *)((v22 + 26) & 0xFFFFFFFFFFFFF0) = *(_OWORD *)((v23 + 26) & 0xFFFFFFFFFFFFF0);
  return a1;
}

void *assignWithCopy for FromToByAction(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  v17 = v7(v15, 1, v5);
  v18 = v7(v16, 1, v5);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v15, v16, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
LABEL_18:
    memcpy(v15, v16, v11);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v15, v16, v5);
LABEL_19:
  v19 = (void *)(((unint64_t)v15 + v13) & v14);
  v20 = (void *)(((unint64_t)v16 + v13) & v14);
  v21 = v7(v19, 1, v5);
  v22 = v7(v20, 1, v5);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v19, v20, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v19, v5);
LABEL_24:
    memcpy(v19, v20, v11);
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v19, v20, v5);
LABEL_25:
  v23 = ((unint64_t)v19 + v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = ((unint64_t)v20 + v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = *(_OWORD *)v24;
  *(_QWORD *)(v23 + 13) = *(_QWORD *)(v24 + 0xD);
  *(_OWORD *)v23 = v25;
  v26 = (v23 + 28) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v24 + 28) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(unsigned __int8 *)(v27 + 16);
  if (*(unsigned __int8 *)(v26 + 16) > 1u)
  {
    if (v28 <= 1)
    {
      v32 = v28 != 0;
      v33 = *(_QWORD *)v27;
      v34 = *(_QWORD *)(v27 + 8);
      outlined copy of ActionEntityResolution();
      *(_QWORD *)v26 = v33;
      *(_QWORD *)(v26 + 8) = v34;
      *(_BYTE *)(v26 + 16) = v32;
      goto LABEL_32;
    }
LABEL_31:
    v35 = *(_OWORD *)v27;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    *(_OWORD *)v26 = v35;
    goto LABEL_32;
  }
  if (v28 > 1)
  {
    outlined consume of ActionEntityResolution();
    goto LABEL_31;
  }
  v29 = v28 != 0;
  v30 = *(_QWORD *)v27;
  v31 = *(_QWORD *)(v27 + 8);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)v26 = v30;
  *(_QWORD *)(v26 + 8) = v31;
  *(_BYTE *)(v26 + 16) = v29;
  outlined consume of ActionEntityResolution();
LABEL_32:
  *(_BYTE *)(v26 + 17) = *(_BYTE *)(v27 + 17);
  *(_BYTE *)(v26 + 18) = *(_BYTE *)(v27 + 18);
  *(_OWORD *)((v26 + 26) & 0xFFFFFFFFFFFFF0) = *(_OWORD *)((v27 + 26) & 0xFFFFFFFFFFFFF0);
  return a1;
}

void *initializeWithTake for FromToByAction(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = (void *)(((unint64_t)v15 + v13) & v14);
  v18 = ((unint64_t)v16 + v13) & v14;
  if (v7((const void *)v18, 1, v5))
  {
    memcpy(v17, (const void *)(((unint64_t)v16 + v13) & v14), v11);
  }
  else
  {
    (*(void (**)(void *, unint64_t, uint64_t))(v6 + 32))(v17, ((unint64_t)v16 + v13) & v14, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  v19 = ((unint64_t)v17 + v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = (v11 + 15 + v18) & 0xFFFFFFFFFFFFFFF0;
  v21 = *(_OWORD *)v20;
  *(_QWORD *)(v19 + 13) = *(_QWORD *)(v20 + 0xD);
  *(_OWORD *)v19 = v21;
  v22 = (v19 + 28) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v20 + 28) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_OWORD *)v23;
  *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
  *(_OWORD *)v22 = v24;
  *(_BYTE *)(v22 + 17) = *(_BYTE *)(v23 + 17);
  *(_BYTE *)(v22 + 18) = *(_BYTE *)(v23 + 18);
  *(_OWORD *)((v22 + 26) & 0xFFFFFFFFFFFFF0) = *(_OWORD *)((v23 + 26) & 0xFFFFFFFFFFFFF0);
  return a1;
}

void *assignWithTake for FromToByAction(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  __int128 v29;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  v17 = v7(v15, 1, v5);
  v18 = v7(v16, 1, v5);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v15, v16, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
LABEL_18:
    memcpy(v15, v16, v11);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v15, v16, v5);
LABEL_19:
  v19 = (void *)(((unint64_t)v15 + v13) & v14);
  v20 = (void *)(((unint64_t)v16 + v13) & v14);
  v21 = v7(v19, 1, v5);
  v22 = v7(v20, 1, v5);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v19, v20, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v19, v5);
LABEL_24:
    memcpy(v19, v20, v11);
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v19, v20, v5);
LABEL_25:
  v23 = ((unint64_t)v19 + v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = ((unint64_t)v20 + v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = *(_OWORD *)v24;
  *(_QWORD *)(v23 + 13) = *(_QWORD *)(v24 + 0xD);
  *(_OWORD *)v23 = v25;
  v26 = (v23 + 28) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v24 + 28) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v26 + 16) > 1u)
  {
LABEL_29:
    v29 = *(_OWORD *)v27;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    *(_OWORD *)v26 = v29;
    goto LABEL_30;
  }
  v28 = *(unsigned __int8 *)(v27 + 16);
  if (v28 > 1)
  {
    outlined consume of ActionEntityResolution();
    goto LABEL_29;
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_BYTE *)(v26 + 16) = v28 != 0;
  outlined consume of ActionEntityResolution();
LABEL_30:
  *(_BYTE *)(v26 + 17) = *(_BYTE *)(v27 + 17);
  *(_BYTE *)(v26 + 18) = *(_BYTE *)(v27 + 18);
  *(_OWORD *)((v26 + 26) & 0xFFFFFFFFFFFFF0) = *(_OWORD *)((v27 + 26) & 0xFFFFFFFFFFFFF0);
  return a1;
}

uint64_t getEnumTagSinglePayload for FromToByAction(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  unint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + v9;
  v11 = v8 + 15;
  if (v7 < a2)
  {
    if (((((((((v11 + ((v10 + (v10 & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF0)
         + 16) & 0xFFFFFFF0) != 0)
      v12 = 2;
    else
      v12 = a2 - v7 + 1;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    __asm { BR              X3 }
  }
  if (v6 < 0x7FFFFFFE)
  {
    v17 = *(_QWORD *)((((((v11 + ((v10 + ((v10 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFF8)
                     + 26) & 0xFFFFFFFFFFFFF0);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    if ((v17 + 1) >= 2)
      return v17;
    else
      return 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for FromToByAction(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((((_DWORD)v11
             + 15
             + (((_DWORD)v11
               + *(unsigned __int8 *)(v7 + 80)
               + (((_DWORD)v11 + *(unsigned __int8 *)(v7 + 80)) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 26) & 0xFFFFFFF0) == 0xFFFFFFF0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((_DWORD)v11
             + 15
             + (((_DWORD)v11
               + *(unsigned __int8 *)(v7 + 80)
               + (((_DWORD)v11 + *(unsigned __int8 *)(v7 + 80)) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 26) & 0xFFFFFFF0) != 0xFFFFFFF0)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((((v11+ 15+ ((v11+ *(unsigned __int8 *)(v7 + 80)+ ((v11 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF0)+ 28) & 0xFFFFFFFFFFFFFFF8)+ 26) & 0xFFFFFFFFFFFFFFF0)+ 16);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_21BB91D48@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t result;

  v15[v16] = 0;
  if (a1)
  {
    if (v11 < 0x7FFFFFFE)
    {
      v18 = (_QWORD *)((((((v14 + ((v13 + ((unint64_t)&v15[v13] & v10)) & v10)) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8)
                      + 26) & 0xFFFFFFFFFFFFFFF0);
      if (a1 > 0x7FFFFFFE)
      {
        *v18 = 0;
        *(_QWORD *)(((((((v14 + ((v13 + ((unint64_t)&v15[v13] & v10)) & v10)) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8)
                    + 26) & 0xFFFFFFFFFFFFFFF0)
                  + 8) = 0;
        *(_DWORD *)v18 = a1 - 0x7FFFFFFF;
      }
      else
      {
        *v18 = a1;
      }
    }
    else if (v11 >= a1)
    {
      return (*(uint64_t (**)(_BYTE *, _QWORD))(v12 + 56))(v15, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v17 = a2;
      else
        v17 = 4;
      bzero(v15, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_21BB91E6C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_21BB91E7C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21BB91E84()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t destroy for FromToByAction.TransformMode(uint64_t result)
{
  if (*(unsigned __int8 *)(result + 16) <= 1u)
    return outlined consume of ActionEntityResolution();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FromToByAction.TransformMode(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v4 = v3 != 0;
    v5 = *a2;
    v6 = a2[1];
    outlined copy of ActionEntityResolution();
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for FromToByAction.TransformMode(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) > 1u)
  {
    if (v4 <= 1)
    {
      v8 = v4 != 0;
      v10 = *a2;
      v9 = a2[1];
      outlined copy of ActionEntityResolution();
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v9;
      *(_BYTE *)(a1 + 16) = v8;
      return a1;
    }
LABEL_7:
    v11 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if (v4 > 1)
  {
    outlined consume of ActionEntityResolution();
    goto LABEL_7;
  }
  v5 = v4 != 0;
  v7 = *a2;
  v6 = a2[1];
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ActionEntityResolution();
  return a1;
}

uint64_t assignWithTake for FromToByAction.TransformMode(uint64_t a1, uint64_t a2)
{
  unsigned int v4;

  if (*(unsigned __int8 *)(a1 + 16) > 1u)
    goto LABEL_5;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 > 1)
  {
    outlined consume of ActionEntityResolution();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4 != 0;
  outlined consume of ActionEntityResolution();
  return a1;
}

uint64_t getEnumTagSinglePayload for FromToByAction.TransformMode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 1)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 4)
    return v4 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FromToByAction.TransformMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -3 - a2;
  }
  return result;
}

uint64_t getEnumTag for FromToByAction.TransformMode(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for FromToByAction.TransformMode(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for FromToByAction.DecodingErrors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAction.DecodingErrors);
}

uint64_t storeEnumTagSinglePayload for FromToByAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21BB9218C + 4 * byte_21BE60BAC[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21BB921C0 + 4 * byte_21BE60BA7[v4]))();
}

uint64_t sub_21BB921C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB921C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB921D0);
  return result;
}

uint64_t sub_21BB921DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB921E4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21BB921E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB921F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FromToByAction.TransformMode.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BB92248 + 4 * byte_21BE60BB6[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BB9227C + 4 * byte_21BE60BB1[v4]))();
}

uint64_t sub_21BB9227C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB92284(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB9228CLL);
  return result;
}

uint64_t sub_21BB92298(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB922A0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BB922A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB922AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FromToByAction.DecodingErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BB922F8 + 4 * byte_21BE60BBB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BB92318 + 4 * byte_21BE60BC0[v4]))();
}

_BYTE *sub_21BB922F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BB92318(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BB92320(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BB92328(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BB92330(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BB92338(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in FromToByAction<A>.TransformMode.RelativeCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for Equatable in FromToByAction<A>.TransformMode.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for Equatable in FromToByAction<A>.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomStringConvertible in FromToByAction<A>.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.ParentCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.ParentCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.LocalCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.LocalCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.SceneCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.SceneCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.RelativeCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.RelativeCodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t specialized FromToByAction.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t specialized FromToByAction.TransformMode.CodingKeys.init(intValue:)()
{
  return 4;
}

unint64_t lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights, &type metadata for BlendShapeWeights);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights, &type metadata for BlendShapeWeights);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights, &type metadata for BlendShapeWeights);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights, &type metadata for BlendShapeWeights);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights, &type metadata for BlendShapeWeights);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights, &type metadata for BlendShapeWeights);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms, &type metadata for JointTransforms);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms, &type metadata for JointTransforms);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms, &type metadata for JointTransforms);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms, &type metadata for JointTransforms);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms, &type metadata for JointTransforms);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms, &type metadata for JointTransforms);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Transform and conformance Transform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Transform and conformance Transform;
  if (!lazy protocol witness table cache variable for type Transform and conformance Transform)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Transform, &type metadata for Transform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform and conformance Transform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Transform and conformance Transform;
  if (!lazy protocol witness table cache variable for type Transform and conformance Transform)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Transform, &type metadata for Transform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform and conformance Transform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Transform and conformance Transform;
  if (!lazy protocol witness table cache variable for type Transform and conformance Transform)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Transform, &type metadata for Transform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform and conformance Transform);
  }
  return result;
}

uint64_t specialized FromToByActionHandler<>.getFromToToParent(transformMode:playbackController:targetEntity:base:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>, __int128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  int v7;
  char v8;
  uint64_t v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t SceneNullable;
  uint64_t v19;
  id v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  simd_float4 v37;
  simd_float4 v38;
  __n128 v39;
  simd_float4 v40;
  __n128 v41;
  simd_float4 v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  simd_float4x4 v51;

  v7 = *(unsigned __int8 *)(result + 16);
  if (v7 == 253)
  {
    if (a2)
    {
      swift_retain();
      v9 = specialized HasHierarchy.parent.getter();
      if (v9)
      {
        *(double *)v10.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v9, 0);
        v40 = v11;
        v42 = v10;
        v37 = v13;
        v38 = v12;
        swift_release();
        v51.columns[1] = v40;
        v51.columns[0] = v42;
        v51.columns[3] = v37;
        v51.columns[2] = v38;
        __invert_f4(v51);
      }
      REMakeSRTFromMatrix();
      v41 = v22;
      v43 = v21;
      v39 = v23;
      if (one-time initialization token for identity != -1)
        swift_once();
      goto LABEL_25;
    }
LABEL_17:
    v49 = 0;
    v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    result = specialized static AnimationLogger.logError(_:)(0xD000000000000047, 0x800000021BE893D0);
LABEL_30:
    a4 = 0uLL;
    v8 = 1;
    a5 = 0uLL;
    a6 = 0uLL;
    goto LABEL_31;
  }
  if (v7 == 254)
  {
    v8 = 0;
    goto LABEL_31;
  }
  if (v7 != 255)
  {
    if (a2)
    {
      v15 = *(_QWORD *)result;
      v14 = *(_QWORD *)(result + 8);
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      if (!Strong)
      {
        swift_retain();
        outlined copy of FromToByAction<A>.TransformMode<A>(v15, v14, v7);
        _StringGuts.grow(_:)(70);
        v47 = 0;
        v48 = 0xE000000000000000;
        v24._countAndFlagsBits = 0xD000000000000019;
        v24._object = (void *)0x800000021BE89420;
        String.append(_:)(v24);
        v25._object = (void *)0x800000021BE89440;
        v25._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v25);
        v44 = v15;
        v45 = v14;
        v46 = v7 & 1;
        v26._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0xD000000000000030;
        v27._object = (void *)0x800000021BE89460;
        String.append(_:)(v27);
        specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
LABEL_29:
        swift_release();
        result = swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      v17 = Strong;
      if ((v7 & 1) != 0)
      {
        swift_retain();
        outlined copy of FromToByAction<A>.TransformMode<A>(v15, v14, v7);
        SceneNullable = REEntityGetSceneNullable();
        if (!SceneNullable)
          goto LABEL_28;
        v19 = SceneNullable;
        v20 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v20)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(v19);
        }
        v28 = Scene.findEntity(named:)();
        swift_release();
        if (!v28)
          goto LABEL_28;
      }
      else
      {
        v44 = v15;
        swift_retain();
        outlined copy of FromToByAction<A>.TransformMode<A>(v15, v14, v7);
        v28 = Entity.subscript.getter(&v44);
        if (!v28)
        {
LABEL_28:
          v44 = 0;
          v45 = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          v47 = v44;
          v48 = v45;
          v33._countAndFlagsBits = 0xD000000000000019;
          v33._object = (void *)0x800000021BE89420;
          String.append(_:)(v33);
          v34._object = (void *)0x800000021BE89440;
          v34._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v34);
          v44 = v15;
          v45 = v14;
          v46 = v7 & 1;
          _print_unlocked<A, B>(_:_:)();
          outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v15, v14, v7);
          v35._countAndFlagsBits = 0x206D6F726620;
          v35._object = (void *)0xE600000000000000;
          String.append(_:)(v35);
          v44 = v17;
          type metadata accessor for Entity();
          _print_unlocked<A, B>(_:_:)();
          v36._countAndFlagsBits = 46;
          v36._object = (void *)0xE100000000000000;
          String.append(_:)(v36);
          specialized static AnimationLogger.logError(_:)(v47, v48);
          swift_release();
          goto LABEL_29;
        }
      }
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v15, v14, v7);
      v29 = specialized HasHierarchy.parent.getter();
      specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v28, v29);
      swift_release();
      REMakeSRTFromMatrix();
      v41 = v31;
      v43 = v30;
      v39 = v32;
      if (one-time initialization token for identity != -1)
        swift_once();
      swift_release();
      swift_release();
LABEL_25:
      result = swift_release();
      v8 = 0;
      a5 = v41;
      a4 = (__int128)v43;
      a6 = v39;
      goto LABEL_31;
    }
    goto LABEL_17;
  }
  if (one-time initialization token for identity != -1)
    result = swift_once();
  v8 = 0;
  a4 = static Transform.identity;
  a5 = (__n128)xmmword_2551B1050;
  a6 = (__n128)xmmword_2551B1060;
LABEL_31:
  *a3 = (__n128)a4;
  a3[1] = a5;
  a3[2] = a6;
  a3[3].n128_u8[0] = v8;
  return result;
}

uint64_t type metadata completion function for FromToByActionHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FromToByActionHandler(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if ((v7 & 0x1000F8) != 0 || ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    *(_QWORD *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for FromToByActionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for FromToByActionHandler(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  *(_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for FromToByActionHandler(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  *(_QWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for FromToByActionHandler(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  *(_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for FromToByActionHandler(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  *(_QWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FromToByActionHandler(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  if (v6 < a2)
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X14 }
  }
  if (v5 < 2)
    return 0;
  v12 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v12 >= 2)
    return v12 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for FromToByActionHandler(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 < a3)
  {
    v12 = a3 - v9;
    if ((((_DWORD)v10 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v9)
  {
    if ((_DWORD)v11)
    {
      v15 = ~v9 + a2;
      bzero(a1, v11);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_21BB93280(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  *(_BYTE *)(v4 + v5) = 0;
  if (a2)
  {
    if (a3 >= 2)
      return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 56))(v4, (a2 + 1));
  }
  return result;
}

void sub_21BB932CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x21BB932D4);
  JUMPOUT(0x21BB932A4);
}

uint64_t type metadata accessor for FromToByActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByActionHandler);
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in FromToByActionHandler<A>()
{
  return &protocol witness table for FromToByAction<A>;
}

void specialized FromToByActionHandler<>.getFromTo(event:base:)(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float32x4_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  int8x16_t v18;
  __int128 v19;
  char v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  double v29;
  __n128 v30;
  double v31;
  __n128 v32;
  float32x4_t v33;
  __n128 v34;
  __int128 v35;
  __int128 v36;
  int8x16_t v37;
  __int128 v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  __n128 v43[4];
  float32x4_t v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_BYTE *)(a1 + 128);
  v14 = *(float32x4_t *)(a1 + 232);
  v15 = *(_BYTE *)(a1 + 248);
  v16 = *(_QWORD *)(a1 + 280);
  v17 = *(_OWORD *)(a1 + 80);
  v18 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 104), 8uLL);
  v19 = *(_OWORD *)(a1 + 112);
  if (v11 == 1 && (*(_BYTE *)(a1 + 128) & 1) != 0)
  {
    v20 = 0;
    v11 = 1;
    v9 = *(_QWORD *)(a1 + 80);
    v10 = *(_QWORD *)(a1 + 120);
    v13 = 1;
    v21 = *(int8x16_t *)(a1 + 88);
    v22 = *(int8x16_t *)(a1 + 104);
  }
  else
  {
    v35 = *(_OWORD *)(a1 + 88);
    v38 = *(_OWORD *)(a1 + 80);
    v39 = *(int8x16_t *)(a1 + 40);
    v36 = *(_OWORD *)(a1 + 112);
    v37 = v18;
    v41 = *(int8x16_t *)(a1 + 24);
    if (one-time initialization token for identity != -1)
    {
      v32 = a4;
      v34 = a5;
      v28 = *(float32x4_t *)(a1 + 232);
      v30 = a3;
      swift_once();
      v14 = v28;
      a3 = v30;
      a4 = v32;
      a5 = v34;
    }
    v44 = v14;
    LOBYTE(v45) = v15;
    specialized FromToByActionHandler<>.getFromToToParent(transformMode:playbackController:targetEntity:base:)((uint64_t)&v44, v16, v43, *(_OWORD *)&a3, a4, a5);
    outlined init with take of Transform?((uint64_t)v43, (uint64_t)&v44, &demangling cache variable for type metadata for Transform?);
    if ((v47 & 1) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v13 = 0;
      v21 = 0uLL;
      v22 = 0uLL;
      v20 = 1;
      v17 = 0uLL;
      v18 = 0uLL;
      v19 = 0uLL;
    }
    else
    {
      v31 = *(double *)&v45;
      v33 = v44;
      v29 = *(double *)&v46;
      if ((v11 & 1) != 0)
      {
        v22 = v39;
        v21 = v41;
      }
      else
      {
        v23.i64[0] = v9;
        v23.i64[1] = v41.i64[0];
        *(double *)v24.i64 = specialized static Transform.* infix(_:_:)(v44, *(double *)&v45, *(double *)&v46, v23);
        v21 = vextq_s8(v24, v25, 8uLL);
        v9 = v24.i64[0];
        v10 = v26.i64[1];
        v22 = vextq_s8(v25, v26, 8uLL);
      }
      v18 = v37;
      v17 = v38;
      v19 = v36;
      if ((v13 & 1) == 0)
      {
        v40 = v22;
        v42 = v21;
        v27.i64[0] = v12;
        v27.i64[1] = v35;
        *(double *)&v17 = specialized static Transform.* infix(_:_:)(v33, v31, v29, v27);
        v22 = v40;
        v21 = v42;
      }
      v20 = 0;
    }
  }
  *(_QWORD *)a2 = v9;
  *(int8x16_t *)(a2 + 8) = v21;
  *(int8x16_t *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = v17;
  *(int8x16_t *)(a2 + 80) = v18;
  *(_OWORD *)(a2 + 96) = v19;
  *(_BYTE *)(a2 + 112) = v13;
  *(_BYTE *)(a2 + 113) = v20;
}

void static AnimationTimingFunction.linear.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 10;
}

void AnimationTimingFunction.coreEasingFunction.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_21BB9357C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50940;
  *(_QWORD *)(inited + 32) = v1;
  specialized SIMD.init<A>(_:)(inited);
  swift_setDeallocating();
  v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v3 + 32) = v0;
  specialized SIMD.init<A>(_:)(v3);
  swift_setDeallocating();
  v4 = RECreateCubicBezierEaseEx();
  if (v4)
  {
    v5 = v4;
    type metadata accessor for AnimationTimingFunction.EasingFunction();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    RERetain();
    RERelease();
  }
  else
  {
    type metadata accessor for AnimationTimingFunction.EasingFunction();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = 0;
  }
  return v6;
}

double static AnimationTimingFunction.default.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static AnimationTimingFunction.default.getter(a1, (__n128)xmmword_21BE614C0).n128_u64[0];
  return result;
}

BOOL static AnimationTimingFunction.__Mode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AnimationTimingFunction.__Mode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AnimationTimingFunction.__Mode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void AnimationTimingFunction.EasingFunctionType.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_21BB9387C()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  __n128 v3;
  __n128 v5;

  v3.n128_u64[0] = v2;
  v3.n128_u64[1] = v0;
  v5 = v3;
  Hasher._combine(_:)(1uLL);
  return specialized SIMD.hash(into:)(v1, v5);
}

void sub_21BB938AC()
{
  uint64_t v0;
  Swift::UInt32 v2;

  Hasher._combine(_:)(2uLL);
  Hasher._combine(_:)(v0);
  if ((v0 & 0x7FFFFF00000000) == 0 && (v0 & 0x7F80000000000000) == 0)
    v2 = 0;
  else
    v2 = HIDWORD(v0);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationTimingFunction.EasingFunctionType()
{
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationTimingFunction.EasingFunctionType()
{
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AnimationTimingFunction.EasingFunction.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    RERelease();
  return swift_deallocClassInstance();
}

unsigned __int8 *static AnimationTimingFunction.__smooth(_:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 9;
  return result;
}

unsigned __int8 *static AnimationTimingFunction.__back(_:amplitude:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  return static AnimationTimingFunction.__back(_:amplitude:)(a1, 1, a2, a3);
}

unsigned __int8 *static AnimationTimingFunction.__bounce(_:bounces:bounciness:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = a2;
  *(float *)(a3 + 16) = a4;
  *(_BYTE *)(a3 + 20) = 2;
  return result;
}

unsigned __int8 *static AnimationTimingFunction.__circle(_:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 3;
  return result;
}

unsigned __int8 *static AnimationTimingFunction.__exponential(_:exponent:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  return static AnimationTimingFunction.__back(_:amplitude:)(a1, 5, a2, a3);
}

unsigned __int8 *static AnimationTimingFunction.__logarithmic(_:base:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  return static AnimationTimingFunction.__back(_:amplitude:)(a1, 6, a2, a3);
}

unsigned __int8 *static AnimationTimingFunction.__back(_:amplitude:)@<X0>(unsigned __int8 *result@<X0>, char a2@<W1>, uint64_t a3@<X8>, unsigned int a4@<S0>)
{
  *(_QWORD *)a3 = *result | ((unint64_t)a4 << 32);
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 20) = a2;
  return result;
}

void static AnimationTimingFunction.__power(_:power:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(_QWORD *)a1 = (unint64_t)a2 << 32;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 7;
}

unsigned __int8 *static AnimationTimingFunction.__sine(_:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 8;
  return result;
}

unsigned __int8 *static AnimationTimingFunction.__spring(_:oscillations:springiness:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = a2;
  *(float *)(a3 + 16) = a4;
  *(_BYTE *)(a3 + 20) = 4;
  return result;
}

__n128 static AnimationTimingFunction.cubicBezier(controlPoint1:controlPoint2:)@<Q0>(__n128 *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t inited;
  __int128 v5;
  __n128 v6;
  __n128 result;
  __n128 v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(double *)&v5 = a2;
  *((double *)&v5 + 1) = a3;
  *(_OWORD *)(inited + 16) = xmmword_21BE57F30;
  *(_OWORD *)(inited + 32) = v5;
  specialized SIMD.init<A>(_:)(inited);
  v10 = v6;
  swift_setDeallocating();
  result = v10;
  *a1 = v10;
  a1[1].n128_u32[0] = 0;
  a1[1].n128_u8[4] = 0;
  return result;
}

double static AnimationTimingFunction.easeIn.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static AnimationTimingFunction.default.getter(a1, (__n128)xmmword_21BE614D0).n128_u64[0];
  return result;
}

double static AnimationTimingFunction.easeOut.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static AnimationTimingFunction.default.getter(a1, (__n128)xmmword_21BE614E0).n128_u64[0];
  return result;
}

double static AnimationTimingFunction.easeInOut.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static AnimationTimingFunction.default.getter(a1, (__n128)xmmword_21BE614F0).n128_u64[0];
  return result;
}

__n128 static AnimationTimingFunction.default.getter@<Q0>(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t inited;
  __n128 v4;
  __n128 result;
  __n128 v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE57F30;
  *(__n128 *)(inited + 32) = a2;
  specialized SIMD.init<A>(_:)(inited);
  v7 = v4;
  swift_setDeallocating();
  result = v7;
  *a1 = v7;
  a1[1].n128_u32[0] = 0;
  a1[1].n128_u8[4] = 0;
  return result;
}

void AnimationTimingFunction.hash(into:)()
{
  AnimationTimingFunction.EasingFunctionType.hash(into:)();
}

uint64_t static AnimationTimingFunction.== infix(_:_:)(__int128 *a1)
{
  int v1;
  char v2;
  char v3;
  __int128 v5;
  int v6;
  char v7;

  v1 = *((_DWORD *)a1 + 4);
  v2 = *((_BYTE *)a1 + 20);
  v5 = *a1;
  v6 = v1;
  v7 = v2;
  specialized static AnimationTimingFunction.EasingFunctionType.== infix(_:_:)((uint64_t)&v5);
  return v3 & 1;
}

Swift::Int AnimationTimingFunction.hashValue.getter()
{
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AnimationTimingFunction.CodableAnimationTimingFunction.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a4;
  v17 = a3;
  v18 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys>);
  v19 = *(_QWORD *)(v5 - 8);
  v20 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys>);
  v22 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v21 & 1) != 0)
  {
    LOBYTE(v23) = 0;
    lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    LOBYTE(v23) = 1;
    lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v23 = v18;
    v24 = v17;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, MEMORY[0x24BEE4168]);
    v15 = v20;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v14, v12);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationTimingFunction()
{
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnimationTimingFunction()
{
  AnimationTimingFunction.EasingFunctionType.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationTimingFunction()
{
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimationTimingFunction(__int128 *a1)
{
  int v1;
  char v2;
  char v3;
  __int128 v5;
  int v6;
  char v7;

  v1 = *((_DWORD *)a1 + 4);
  v2 = *((_BYTE *)a1 + 20);
  v5 = *a1;
  v6 = v1;
  v7 = v2;
  specialized static AnimationTimingFunction.EasingFunctionType.== infix(_:_:)((uint64_t)&v5);
  return v3 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7A65426369627563;
  else
    return 0x7261656E696CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys()
{
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys()
{
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys()
{
  return 0x506C6F72746E6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x506C6F72746E6F63 && a2 == 0xED000073746E696FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys()
{
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys()
{
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys()
{
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys()
{
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;

  result = specialized AnimationTimingFunction.CodableAnimationTimingFunction.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction(_QWORD *a1)
{
  uint64_t v1;

  return AnimationTimingFunction.CodableAnimationTimingFunction.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t AnimationTimingFunction.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[5];

  outlined init with copy of __REAssetService(a1, (uint64_t)v15);
  v5 = specialized AnimationTimingFunction.CodableAnimationTimingFunction.init(from:)(v15);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = v7 << 31 >> 31;
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  if ((v11 & 1) != 0)
    v13 = 0;
  else
    v13 = v9;
  if ((v11 & 1) != 0)
    v14 = 0;
  else
    v14 = v10;
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = v12 & 0xA;
  return result;
}

uint64_t AnimationTimingFunction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 20))
  {
    if (*(_BYTE *)(v1 + 20) != 10 || (!(v3 | v2) ? (v4 = *(_DWORD *)(v1 + 16) == 0) : (v4 = 0), !v4))
    {
      lazy protocol witness table accessor for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors();
      swift_allocError();
      return swift_willThrow();
    }
    v2 = 0;
    v3 = 0;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  return AnimationTimingFunction.CodableAnimationTimingFunction.encode(to:)(a1, v2, v3, v6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnimationTimingFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[5];

  outlined init with copy of __REAssetService(a1, (uint64_t)v15);
  v5 = specialized AnimationTimingFunction.CodableAnimationTimingFunction.init(from:)(v15);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = v7 << 31 >> 31;
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  if ((v11 & 1) != 0)
    v13 = 0;
  else
    v13 = v9;
  if ((v11 & 1) != 0)
    v14 = 0;
  else
    v14 = v10;
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = v12 & 0xA;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnimationTimingFunction(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 20))
  {
    if (*(_BYTE *)(v1 + 20) != 10 || (!(v3 | v2) ? (v4 = *(_DWORD *)(v1 + 16) == 0) : (v4 = 0), !v4))
    {
      lazy protocol witness table accessor for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors();
      swift_allocError();
      return swift_willThrow();
    }
    v2 = 0;
    v3 = 0;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  return AnimationTimingFunction.CodableAnimationTimingFunction.encode(to:)(a1, v2, v3, v6);
}

void specialized static AnimationTimingFunction.EasingFunctionType.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X17 }
}

BOOL sub_21BB945F0@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  BOOL v8;
  float v10;
  float v11;
  __int128 v12;
  __int128 v13;

  if (v4)
    return 0;
  v5 = 0;
  *(_QWORD *)&v6 = v1;
  *((_QWORD *)&v6 + 1) = v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v3;
  while (1)
  {
    v12 = v6;
    v10 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v13 = v7;
    v11 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v8 = v10 == v11;
    if (v5 == 3)
      break;
    while (1)
    {
      ++v5;
      if (v8)
        break;
      if (v5 == 3)
        return 0;
      v8 = 0;
    }
  }
  return v10 == v11;
}

_QWORD *specialized AnimationTimingFunction.CodableAnimationTimingFunction.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  v27 = v2;
  v28 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v29 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v30 = a1;
  v14 = __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys();
  v15 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v26 = v5;
    v16 = v29;
    v32 = v10;
    v17 = KeyedDecodingContainer.allKeys.getter();
    v18 = v9;
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      v19 = *(unsigned __int8 *)(v17 + 32);
      if ((v19 & 1) != 0)
      {
        LOBYTE(v31) = 1;
        lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LODWORD(v26) = v19;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
        lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, MEMORY[0x24BEE4178]);
        v20 = v27;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v20);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v18);
        v14 = v31;
      }
      else
      {
        LOBYTE(v31) = 0;
        lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v18);
        v14 = 0;
      }
    }
    else
    {
      v21 = type metadata accessor for DecodingError();
      swift_allocError();
      v23 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v23 = &type metadata for AnimationTimingFunction.CodableAnimationTimingFunction;
      v14 = v12;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v9);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return v14;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.EncodingErrors, &type metadata for AnimationTimingFunction.EncodingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.EncodingErrors, &type metadata for AnimationTimingFunction.EncodingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.__Mode and conformance AnimationTimingFunction.__Mode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.__Mode and conformance AnimationTimingFunction.__Mode;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.__Mode and conformance AnimationTimingFunction.__Mode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.__Mode, &type metadata for AnimationTimingFunction.__Mode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.__Mode and conformance AnimationTimingFunction.__Mode);
  }
  return result;
}

__n128 __swift_memcpy21_16(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimingFunction()
{
  return &type metadata for AnimationTimingFunction;
}

uint64_t storeEnumTagSinglePayload for AnimationTimingFunction.__Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BB94C60 + 4 * byte_21BE61526[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BB94C94 + 4 * byte_21BE61521[v4]))();
}

uint64_t sub_21BB94C94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB94C9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB94CA4);
  return result;
}

uint64_t sub_21BB94CB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB94CB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BB94CBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB94CC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimingFunction.__Mode()
{
  return &type metadata for AnimationTimingFunction.__Mode;
}

uint64_t type metadata accessor for AnimationTimingFunction.EasingFunction()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for AnimationTimingFunction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 20);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationTimingFunction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 246;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AnimationTimingFunction.EasingFunctionType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 20) <= 9u)
    return *(unsigned __int8 *)(a1 + 20);
  else
    return (*(_DWORD *)a1 + 10);
}

uint64_t destructiveInjectEnumTag for AnimationTimingFunction.EasingFunctionType(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(_QWORD *)result = a2 - 10;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 10;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_BYTE *)(result + 20) = a2;
  return result;
}

void *type metadata accessor for AnimationTimingFunction.EasingFunctionType()
{
  return &unk_24DFB1178;
}

ValueMetadata *type metadata accessor for AnimationTimingFunction.EncodingErrors()
{
  return &type metadata for AnimationTimingFunction.EncodingErrors;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.EasingFunctionType and conformance AnimationTimingFunction.EasingFunctionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.EasingFunctionType and conformance AnimationTimingFunction.EasingFunctionType;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.EasingFunctionType and conformance AnimationTimingFunction.EasingFunctionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.EasingFunctionType, &unk_24DFB1178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.EasingFunctionType and conformance AnimationTimingFunction.EasingFunctionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys, &unk_24DFB1298);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys, &unk_24DFB1298);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys, &unk_24DFB1298);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys, &unk_24DFB1298);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys, &unk_24DFB13D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys, &unk_24DFB13D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys, &unk_24DFB13D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys, &unk_24DFB13D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys, &unk_24DFB12B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys, &unk_24DFB12B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys, &unk_24DFB12B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    result = MEMORY[0x220772E3C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BB94FD4 + 4 * byte_21BE61530[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BB95008 + 4 * byte_21BE6152B[v4]))();
}

uint64_t sub_21BB95008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB95010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB95018);
  return result;
}

uint64_t sub_21BB95024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB9502CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BB95030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB95038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys()
{
  return &unk_24DFB1298;
}

void *type metadata accessor for AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys()
{
  return &unk_24DFB12B8;
}

uint64_t getEnumTagSinglePayload for AnimationTimingFunction.CodableAnimationTimingFunction(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnimationTimingFunction.CodableAnimationTimingFunction(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t getEnumTag for AnimationTimingFunction.CodableAnimationTimingFunction(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for AnimationTimingFunction.CodableAnimationTimingFunction(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimingFunction.CodableAnimationTimingFunction()
{
  return &type metadata for AnimationTimingFunction.CodableAnimationTimingFunction;
}

uint64_t storeEnumTagSinglePayload for AnimationTimingFunction.EncodingErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BB95140 + 4 * byte_21BE61535[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BB95160 + 4 * byte_21BE6153A[v4]))();
}

_BYTE *sub_21BB95140(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BB95160(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BB95168(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BB95170(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BB95178(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BB95180(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys()
{
  return &unk_24DFB13D8;
}

uint64_t specialized AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7261656E696CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7A65426369627563 && a2 == 0xEB00000000726569)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Bool()
{
  return REBindPointSetBool();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Bool@<X0>(char *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = REBindPointGetBool();
  v3 = 0;
  if (!(_DWORD)result)
    v3 = 2;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Bool(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x24BE21048], MEMORY[0x24BE20FB0]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Bool()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddBoolValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Int8()
{
  return REBindPointSetInt8();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return protocol witness for static BindableDataInternal.get(from:) in conformance Int8(a1, MEMORY[0x24BE21148], a2);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Int8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x24BE210A8], MEMORY[0x24BE21010]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Int8()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance UInt8()
{
  return REBindPointSetUInt8();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance UInt8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return protocol witness for static BindableDataInternal.get(from:) in conformance Int8(a1, MEMORY[0x24BE21178], a2);
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, char *)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;
  char v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  result = a2(a1, &v6);
  v5 = v6;
  if (!(_DWORD)result)
    v5 = 0;
  *a3 = v5;
  a3[1] = result ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance UInt8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE210D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21040]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance UInt8()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Int16()
{
  return REBindPointSetInt16();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int16@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static BindableDataInternal.get(from:) in conformance Int16(a1, MEMORY[0x24BE21130], a2);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Int16(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x24BE21090], MEMORY[0x24BE20FF8]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Int16()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance UInt16()
{
  return REBindPointSetUInt16();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance UInt16@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static BindableDataInternal.get(from:) in conformance Int16(a1, MEMORY[0x24BE21168], a2);
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int16@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, __int16 *)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int16 v5;
  __int16 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  result = a2(a1, &v6);
  v5 = v6;
  if (!(_DWORD)result)
    v5 = 0;
  *(_WORD *)a3 = v5;
  *(_BYTE *)(a3 + 2) = result ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance UInt16(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE210C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21030]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance UInt16()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Int32()
{
  return REBindPointSetInt32();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int32@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static BindableDataInternal.get(from:) in conformance Int32(a1, MEMORY[0x24BE21138], a2);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Int32.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x24BE21098], MEMORY[0x24BE21000]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Int32()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance UInt32()
{
  return REBindPointSetUInt32();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance UInt32@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static BindableDataInternal.get(from:) in conformance Int32(a1, MEMORY[0x24BE21170], a2);
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int32@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, int *)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  result = a2(a1, &v6);
  v5 = v6;
  if (!(_DWORD)result)
    v5 = 0;
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = result ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance UInt32(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Int32.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE210D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21038]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance UInt32()
{
  int *v0;
  int v1;
  uint64_t result;

  v1 = *v0;
  REKeyValueComponentGetComponentType();
  result = REEntityGetOrAddComponentByClass();
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    REKeyValueComponentAddIntValue();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Int()
{
  return REBindPointSetInt64();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = REBindPointGetInt64();
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = result ^ 1;
  return result;
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Int()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddInt64Value();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Float()
{
  return REBindPointSetFloat();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Float@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = REBindPointGetFloat();
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = result ^ 1;
  return result;
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Float()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddFloatValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Double()
{
  return REBindPointSetDouble();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Double@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = REBindPointGetDouble();
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = result ^ 1;
  return result;
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Double()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddDoubleValue();
  return swift_release();
}

uint64_t SIMD2.set(to:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, __n128);
  uint64_t v11;
  uint64_t result;
  __int128 v13;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = *(void (**)(char *, uint64_t, __n128))(v9 + 16);
  v10((char *)&v13 - v11, v3, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCast())
    return REBindPointSetFloat2();
  ((void (*)(char *, uint64_t, uint64_t))v10)(v6, v3, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  result = swift_dynamicCast();
  if ((_DWORD)result)
    return REBindPointSetDouble2();
  return result;
}

uint64_t static SIMD2.get(from:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a1;
  v37 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for SIMD2();
  v2 = type metadata accessor for Optional();
  v31 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - v6;
  v8 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v30 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v30 - v19;
  v36 = 0;
  *(_QWORD *)&v35 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v20, v1);
    if (REBindPointGetFloat2())
    {
      *(_QWORD *)&v35 = v36;
      v21 = swift_dynamicCast();
      v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      if ((v21 & 1) != 0)
      {
        v22(v7, 0, 1, v1);
        v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v23(v17, v7, v1);
        v24 = v33;
        v23(v33, v17, v1);
        v25 = v24;
        return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v25, 0, 1, v1);
      }
      v22(v7, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
    }
  }
  v34 = 0u;
  v35 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v1);
    if (REBindPointGetDouble2())
    {
      v34 = v35;
      v26 = swift_dynamicCast();
      v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      if ((v26 & 1) != 0)
      {
        v22(v4, 0, 1, v1);
        v27 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v27(v11, v4, v1);
        v28 = v33;
        v27(v33, v11, v1);
        v25 = v28;
        return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v25, 0, 1, v1);
      }
      v22(v4, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v32);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v33, 1, 1, v1);
}

uint64_t static SIMD2.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t ReferenceForEntityAnimatedValuesDouble2;
  uint64_t ReferenceForEntityFloat2;
  uint64_t v9;
  uint64_t ReferenceForEntityAnimatedValuesFloat2;
  uint64_t result;

  type metadata accessor for SIMD2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  if (swift_dynamicCastMetatype())
  {
    if (a4 == 1)
    {
      String.utf8CString.getter();
      ReferenceForEntityAnimatedValuesDouble2 = REBindPointCreateReferenceForEntityAnimatedValuesDouble2();
      goto LABEL_9;
    }
    if (!a4)
    {
      String.utf8CString.getter();
      ReferenceForEntityAnimatedValuesDouble2 = REBindPointCreateReferenceForEntityDouble2();
LABEL_9:
      v9 = ReferenceForEntityAnimatedValuesDouble2;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0)
        return v9;
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1)
        ReferenceForEntityAnimatedValuesFloat2 = REBindPointCreateReferenceForEntityAnimatedValuesFloat2();
      else
        ReferenceForEntityAnimatedValuesFloat2 = REBindPointCreateReferenceForEntityFloat2();
LABEL_21:
      v9 = ReferenceForEntityAnimatedValuesFloat2;
      swift_release();
      REBindPointIsValid();
      return v9;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    if (swift_dynamicCastMetatype())
    {
      if (a4 == 1)
      {
        String.utf8CString.getter();
        ReferenceForEntityFloat2 = REBindPointCreateReferenceForEntityAnimatedValuesFloat2();
      }
      else
      {
        if (a4)
          goto LABEL_23;
        String.utf8CString.getter();
        ReferenceForEntityFloat2 = REBindPointCreateReferenceForEntityFloat2();
      }
      v9 = ReferenceForEntityFloat2;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0)
        return v9;
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1)
        ReferenceForEntityAnimatedValuesFloat2 = REBindPointCreateReferenceForEntityAnimatedValuesDouble2();
      else
        ReferenceForEntityAnimatedValuesFloat2 = REBindPointCreateReferenceForEntityDouble2();
      goto LABEL_21;
    }
  }
LABEL_23:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SIMD2.createAndSetParameter(name:_:)(uint64_t a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v4, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddFloat2Value();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance SIMD2<A>@<X0>(char *a1@<X8>)
{
  return static SIMD2.get(from:)(a1);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return static SIMD2.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5);
}

uint64_t SIMD3.set(to:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, __n128);
  uint64_t v11;
  uint64_t result;
  __int128 v13;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = *(void (**)(char *, uint64_t, __n128))(v9 + 16);
  v10((char *)&v13 - v11, v3, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (swift_dynamicCast())
    return REBindPointSetFloat3();
  ((void (*)(char *, uint64_t, uint64_t))v10)(v6, v3, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  result = swift_dynamicCast();
  if ((_DWORD)result)
    return REBindPointSetDouble3();
  return result;
}

uint64_t static SIMD3.get(from:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v33 = a1;
  v39 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for SIMD3();
  v2 = type metadata accessor for Optional();
  v31 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - v6;
  v8 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v30 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v30 - v19;
  v38 = 0u;
  v36 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v20, v1);
    if (REBindPointGetFloat3())
    {
      v36 = v38;
      v21 = swift_dynamicCast();
      v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      if ((v21 & 1) != 0)
      {
        v22(v7, 0, 1, v1);
        v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v23(v17, v7, v1);
        v24 = v33;
        v23(v33, v17, v1);
        v25 = v24;
        return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v25, 0, 1, v1);
      }
      v22(v7, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
    }
  }
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v1);
    if (REBindPointGetDouble3())
    {
      v34 = v36;
      v35 = v37;
      v26 = swift_dynamicCast();
      v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      if ((v26 & 1) != 0)
      {
        v22(v4, 0, 1, v1);
        v27 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v27(v11, v4, v1);
        v28 = v33;
        v27(v33, v11, v1);
        v25 = v28;
        return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v25, 0, 1, v1);
      }
      v22(v4, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v32);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v33, 1, 1, v1);
}

uint64_t static SIMD3.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t ReferenceForEntityAnimatedValuesDouble3;
  uint64_t ReferenceForEntityFloat3;
  uint64_t v9;
  uint64_t ReferenceForEntityAnimatedValuesFloat3;
  uint64_t result;

  type metadata accessor for SIMD3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  if (swift_dynamicCastMetatype())
  {
    if (a4 == 1)
    {
      String.utf8CString.getter();
      ReferenceForEntityAnimatedValuesDouble3 = REBindPointCreateReferenceForEntityAnimatedValuesDouble3();
      goto LABEL_9;
    }
    if (!a4)
    {
      String.utf8CString.getter();
      ReferenceForEntityAnimatedValuesDouble3 = REBindPointCreateReferenceForEntityDouble3();
LABEL_9:
      v9 = ReferenceForEntityAnimatedValuesDouble3;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0)
        return v9;
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1)
        ReferenceForEntityAnimatedValuesFloat3 = REBindPointCreateReferenceForEntityAnimatedValuesFloat3();
      else
        ReferenceForEntityAnimatedValuesFloat3 = REBindPointCreateReferenceForEntityFloat3();
LABEL_21:
      v9 = ReferenceForEntityAnimatedValuesFloat3;
      swift_release();
      REBindPointIsValid();
      return v9;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    if (swift_dynamicCastMetatype())
    {
      if (a4 == 1)
      {
        String.utf8CString.getter();
        ReferenceForEntityFloat3 = REBindPointCreateReferenceForEntityAnimatedValuesFloat3();
      }
      else
      {
        if (a4)
          goto LABEL_23;
        String.utf8CString.getter();
        ReferenceForEntityFloat3 = REBindPointCreateReferenceForEntityFloat3();
      }
      v9 = ReferenceForEntityFloat3;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0)
        return v9;
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1)
        ReferenceForEntityAnimatedValuesFloat3 = REBindPointCreateReferenceForEntityAnimatedValuesDouble3();
      else
        ReferenceForEntityAnimatedValuesFloat3 = REBindPointCreateReferenceForEntityDouble3();
      goto LABEL_21;
    }
  }
LABEL_23:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SIMD3.createAndSetParameter(name:_:)(uint64_t a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v4, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    v7[0] = v7[1];
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddFloat3Value();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance SIMD3<A>@<X0>(char *a1@<X8>)
{
  return static SIMD3.get(from:)(a1);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance SIMD3<A>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return static SIMD3.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5);
}

uint64_t SIMD4.set(to:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, __n128);
  uint64_t v11;
  uint64_t result;
  __int128 v13;

  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = *(void (**)(char *, uint64_t, __n128))(v9 + 16);
  v10((char *)&v13 - v11, v3, v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  if (swift_dynamicCast())
    return REBindPointSetFloat4();
  ((void (*)(char *, uint64_t, uint64_t))v10)(v6, v3, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  result = swift_dynamicCast();
  if ((_DWORD)result)
    return REBindPointSetDouble4();
  return result;
}

uint64_t static SIMD4.get(from:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v33 = a1;
  v39 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for SIMD4();
  v2 = type metadata accessor for Optional();
  v31 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - v6;
  v8 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v30 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v30 - v19;
  v38 = 0u;
  v36 = 0u;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v20, v1);
    if (REBindPointGetFloat4())
    {
      v36 = v38;
      v21 = swift_dynamicCast();
      v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      if ((v21 & 1) != 0)
      {
        v22(v7, 0, 1, v1);
        v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v23(v17, v7, v1);
        v24 = v33;
        v23(v33, v17, v1);
        v25 = v24;
        return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v25, 0, 1, v1);
      }
      v22(v7, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
    }
  }
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v1);
    if (REBindPointGetDouble4())
    {
      v34 = v36;
      v35 = v37;
      v26 = swift_dynamicCast();
      v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      if ((v26 & 1) != 0)
      {
        v22(v4, 0, 1, v1);
        v27 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v27(v11, v4, v1);
        v28 = v33;
        v27(v33, v11, v1);
        v25 = v28;
        return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v25, 0, 1, v1);
      }
      v22(v4, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v32);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v33, 1, 1, v1);
}

uint64_t static SIMD4.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t ReferenceForEntityAnimatedValuesDouble4;
  uint64_t ReferenceForEntityFloat4;
  uint64_t v9;
  uint64_t ReferenceForEntityAnimatedValuesFloat4;
  uint64_t result;

  type metadata accessor for SIMD4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  if (swift_dynamicCastMetatype())
  {
    if (a4 == 1)
    {
      String.utf8CString.getter();
      ReferenceForEntityAnimatedValuesDouble4 = REBindPointCreateReferenceForEntityAnimatedValuesDouble4();
      goto LABEL_9;
    }
    if (!a4)
    {
      String.utf8CString.getter();
      ReferenceForEntityAnimatedValuesDouble4 = REBindPointCreateReferenceForEntityDouble4();
LABEL_9:
      v9 = ReferenceForEntityAnimatedValuesDouble4;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0)
        return v9;
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1)
        ReferenceForEntityAnimatedValuesFloat4 = REBindPointCreateReferenceForEntityAnimatedValuesFloat4();
      else
        ReferenceForEntityAnimatedValuesFloat4 = REBindPointCreateReferenceForEntityFloat4();
LABEL_21:
      v9 = ReferenceForEntityAnimatedValuesFloat4;
      swift_release();
      REBindPointIsValid();
      return v9;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    if (swift_dynamicCastMetatype())
    {
      if (a4 == 1)
      {
        String.utf8CString.getter();
        ReferenceForEntityFloat4 = REBindPointCreateReferenceForEntityAnimatedValuesFloat4();
      }
      else
      {
        if (a4)
          goto LABEL_23;
        String.utf8CString.getter();
        ReferenceForEntityFloat4 = REBindPointCreateReferenceForEntityFloat4();
      }
      v9 = ReferenceForEntityFloat4;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0)
        return v9;
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1)
        ReferenceForEntityAnimatedValuesFloat4 = REBindPointCreateReferenceForEntityAnimatedValuesDouble4();
      else
        ReferenceForEntityAnimatedValuesFloat4 = REBindPointCreateReferenceForEntityDouble4();
      goto LABEL_21;
    }
  }
LABEL_23:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SIMD4.createAndSetParameter(name:_:)(uint64_t a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[2];

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v4, v1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    v7[0] = v7[1];
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddFloat4Value();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance SIMD4<A>@<X0>(char *a1@<X8>)
{
  return static SIMD4.get(from:)(a1);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance SIMD4<A>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return static SIMD4.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance simd_quatf()
{
  return REBindPointSetQuatF();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance simd_quatf@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  if (one-time initialization token for identity != -1)
    swift_once();
  v5 = static simd_quatf.identity;
  result = REBindPointGetQuatF();
  v3 = *((_QWORD *)&v5 + 1);
  v4 = v5;
  if (!(_DWORD)result)
  {
    v4 = 0;
    v3 = 0;
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = result ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance simd_quatf(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return specialized static Transform.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, MEMORY[0x24BE210B0], MEMORY[0x24BE21018]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance simd_quatf()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddQuatFValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Transform()
{
  return REBindPointSetSRT();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Transform@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = REBindPointGetSRT();
  v3 = result;
  if ((_DWORD)result && one-time initialization token for identity != -1)
    result = swift_once();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = v3 ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Transform(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return specialized static Transform.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, MEMORY[0x24BE210B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21020]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Transform()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddRESRTValue();
  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance String()
{
  uint64_t v0;

  String.utf8CString.getter();
  v0 = REBindPointSetString();
  swift_release();
  return v0;
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  if (REBindPointGetString())
  {
    result = String.init(cString:)();
  }
  else
  {
    result = 0;
    v3 = 0;
  }
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance String(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return specialized static Transform.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, MEMORY[0x24BE210C0], MEMORY[0x24BE21028]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance String()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  String.utf8CString.getter();
  REKeyValueComponentAddStringValue();
  swift_release();
  return swift_release();
}

uint64_t CommonBindPoint.__deallocating_deinit()
{
  REBindPointDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CommonBindPoint()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for BindPoint()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for BindPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BindPoint);
}

uint64_t specialized static Double.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t ReferenceForEntityAnimatedValuesDouble;
  uint64_t v8;
  uint64_t ReferenceForEntityAnimatedValuesFloat;
  uint64_t result;

  if (a4 == 1)
  {
    String.utf8CString.getter();
    ReferenceForEntityAnimatedValuesDouble = REBindPointCreateReferenceForEntityAnimatedValuesDouble();
  }
  else
  {
    if (a4)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    String.utf8CString.getter();
    ReferenceForEntityAnimatedValuesDouble = REBindPointCreateReferenceForEntityDouble();
  }
  v8 = ReferenceForEntityAnimatedValuesDouble;
  swift_release();
  if ((REBindPointIsValid() & 1) == 0 && (a5 & 1) != 0)
  {
    REBindPointDestroy();
    String.utf8CString.getter();
    if (a4 == 1)
      ReferenceForEntityAnimatedValuesFloat = REBindPointCreateReferenceForEntityAnimatedValuesFloat();
    else
      ReferenceForEntityAnimatedValuesFloat = REBindPointCreateReferenceForEntityFloat();
    v8 = ReferenceForEntityAnimatedValuesFloat;
    swift_release();
    REBindPointIsValid();
  }
  return v8;
}

uint64_t specialized static Float.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t ReferenceForEntityAnimatedValuesFloat;
  uint64_t v8;
  uint64_t ReferenceForEntityAnimatedValuesDouble;
  uint64_t result;

  if (a4 == 1)
  {
    String.utf8CString.getter();
    ReferenceForEntityAnimatedValuesFloat = REBindPointCreateReferenceForEntityAnimatedValuesFloat();
  }
  else
  {
    if (a4)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    String.utf8CString.getter();
    ReferenceForEntityAnimatedValuesFloat = REBindPointCreateReferenceForEntityFloat();
  }
  v8 = ReferenceForEntityAnimatedValuesFloat;
  swift_release();
  if ((REBindPointIsValid() & 1) == 0 && (a5 & 1) != 0)
  {
    REBindPointDestroy();
    String.utf8CString.getter();
    if (a4 == 1)
      ReferenceForEntityAnimatedValuesDouble = REBindPointCreateReferenceForEntityAnimatedValuesDouble();
    else
      ReferenceForEntityAnimatedValuesDouble = REBindPointCreateReferenceForEntityDouble();
    v8 = ReferenceForEntityAnimatedValuesDouble;
    swift_release();
    REBindPointIsValid();
  }
  return v8;
}

uint64_t specialized static Int.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t ReferenceForEntityAnimatedValuesInt64;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ReferenceForEntityAnimatedValuesUInt32;
  uint64_t result;

  if (a4 == 1)
  {
    String.utf8CString.getter();
    ReferenceForEntityAnimatedValuesInt64 = REBindPointCreateReferenceForEntityAnimatedValuesInt64();
  }
  else
  {
    if (a4)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    String.utf8CString.getter();
    ReferenceForEntityAnimatedValuesInt64 = REBindPointCreateReferenceForEntityInt64();
  }
  v8 = ReferenceForEntityAnimatedValuesInt64;
  swift_release();
  if ((REBindPointIsValid() & 1) == 0 && (a5 & 1) != 0)
  {
    REBindPointDestroy();
    String.utf8CString.getter();
    v9 = a4 == 1 ? REBindPointCreateReferenceForEntityAnimatedValuesUInt8() : REBindPointCreateReferenceForEntityUInt8();
    v8 = v9;
    swift_release();
    REBindPointIsValid();
    if ((REBindPointIsValid() & 1) == 0)
    {
      REBindPointDestroy();
      String.utf8CString.getter();
      v10 = a4 == 1
          ? REBindPointCreateReferenceForEntityAnimatedValuesUInt16()
          : REBindPointCreateReferenceForEntityUInt16();
      v8 = v10;
      swift_release();
      REBindPointIsValid();
      if ((REBindPointIsValid() & 1) == 0)
      {
        REBindPointDestroy();
        String.utf8CString.getter();
        if (a4 == 1)
          ReferenceForEntityAnimatedValuesUInt32 = REBindPointCreateReferenceForEntityAnimatedValuesUInt32();
        else
          ReferenceForEntityAnimatedValuesUInt32 = REBindPointCreateReferenceForEntityUInt32();
        v8 = ReferenceForEntityAnimatedValuesUInt32;
        swift_release();
        REBindPointIsValid();
      }
    }
  }
  return v8;
}

uint64_t specialized static Transform.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (a4 == 1)
  {
    v7 = *(_QWORD *)(a3 + 16);
    v8 = String.utf8CString.getter();
    v9 = a6(v7, v8 + 32);
LABEL_5:
    v13 = v9;
    swift_release();
    return v13;
  }
  if (!a4)
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = String.utf8CString.getter();
    v9 = a5(v11, v12 + 32);
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  if (a4 == 1)
  {
    v13 = *(_QWORD *)(a3 + 16);
    v14 = String.utf8CString.getter();
    v15 = a7(v13, v14 + 32);
  }
  else
  {
    if (a4)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v17 = *(_QWORD *)(a3 + 16);
    v18 = String.utf8CString.getter();
    v15 = a6(v17, v18 + 32);
  }
  v19 = v15;
  swift_release();
  if ((REBindPointIsValid() & 1) == 0 && (a5 & 1) != 0)
  {
    REBindPointDestroy();
    return specialized static Int32.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, 1, MEMORY[0x24BE21098], MEMORY[0x24BE21000]);
  }
  return v19;
}

uint64_t specialized static Int32.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ReferenceForEntityAnimatedValuesUInt16;
  uint64_t result;

  if (a4 == 1)
  {
    v10 = *(_QWORD *)(a3 + 16);
    v11 = String.utf8CString.getter();
    v12 = a7(v10, v11 + 32);
  }
  else
  {
    if (a4)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v14 = *(_QWORD *)(a3 + 16);
    v15 = String.utf8CString.getter();
    v12 = a6(v14, v15 + 32);
  }
  v16 = v12;
  swift_release();
  if ((REBindPointIsValid() & 1) == 0 && (a5 & 1) != 0)
  {
    REBindPointDestroy();
    String.utf8CString.getter();
    v17 = a4 == 1
        ? REBindPointCreateReferenceForEntityAnimatedValuesUInt8()
        : REBindPointCreateReferenceForEntityUInt8();
    v16 = v17;
    swift_release();
    REBindPointIsValid();
    if ((REBindPointIsValid() & 1) == 0)
    {
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1)
        ReferenceForEntityAnimatedValuesUInt16 = REBindPointCreateReferenceForEntityAnimatedValuesUInt16();
      else
        ReferenceForEntityAnimatedValuesUInt16 = REBindPointCreateReferenceForEntityUInt16();
      v16 = ReferenceForEntityAnimatedValuesUInt16;
      swift_release();
      REBindPointIsValid();
    }
  }
  return v16;
}

uint64_t specialized static LoadableResource.fromCoreAssetType(assetRef:)(uint64_t a1, void (*a2)(_QWORD))
{
  id v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *rawValue;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, __n128);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t *boxed_opaque_existential_1;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[3];

  v4 = (id)REAssetGetSwiftObject();
  a2(0);
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    v6 = REAssetHandleAssetType();
    if (one-time initialization token for resourceClasses != -1)
      swift_once();
    rawValue = resourceClasses._rawValue;
    if (*((_QWORD *)resourceClasses._rawValue + 2)
      && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
    {
      v10 = rawValue[7];
      v11 = *(_QWORD *)(v10 + 16 * v8 + 8);
      v12 = *(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v11 + 16);
      v24 = *(_OWORD *)(v10 + 16 * v8);
      v13 = v24;
      v14 = type metadata accessor for Optional();
      v15 = *(_QWORD *)(v14 - 8);
      v16 = MEMORY[0x24BDAC7A8](v14);
      v18 = (char *)&v24 - v17;
      v12(a1, v24, v11, v16);
      v19 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v13) == 1)
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
        memset(v26, 0, 40);
      }
      else
      {
        *(_OWORD *)((char *)&v26[1] + 8) = v24;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v26);
        (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v18, v13);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadableResource?);
      if (swift_dynamicCast())
        return v25;
    }
    else
    {
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_21BE411F0;
      v21 = (id)REAssetGetType();
      *(_QWORD *)(v20 + 56) = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      *(_QWORD *)(v20 + 64) = lazy protocol witness table accessor for type NSString and conformance NSObject();
      *(_QWORD *)(v20 + 32) = v21;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v22 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

    }
    return 0;
  }
  return result;
}

void static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;

  type metadata accessor for __REAsset();
  static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(a1, a2, a3, (void (*)(uint64_t, void *, char *))closure #1 in static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:), (uint64_t)&v6);
}

uint64_t static Resource.__fromCore(_:)()
{
  uint64_t result;

  if ((id)REAssetGetSwiftObject())
    return swift_dynamicCast();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  Swift::String v43;
  Swift::String v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  uint64_t v50;
  id v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, unint64_t, uint64_t);
  Swift::String v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;

  v60._countAndFlagsBits = a1;
  v60._object = a2;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v66 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
    v11 = a3;
  else
    v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v12 = a3;
  v13 = (void *)MEMORY[0x220768C3C](0x7974696C616572, 0xE700000000000000);
  v14 = objc_msgSend(v11, sel_URLsForResourcesWithExtension_subdirectory_, v13, 0);

  if (!v14)
  {
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v62 = 0xD000000000000021;
    v63 = 0x800000021BE895F0;
    v33 = objc_msgSend(v11, sel_description);
LABEL_20:
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = v36;

    v38._countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39 = v62;
    v6 = v63;
    goto LABEL_21;
  }
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v62 = 0xD000000000000021;
    v63 = 0x800000021BE895F0;
    v33 = objc_msgSend(v11, sel_description);
    goto LABEL_20;
  }
  v61 = v3;
  v50 = v15;
  v51 = v11;
  v17 = v15 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v55 = *(_QWORD *)(v6 + 72);
  v59 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v53 = 0x800000021BE89670;
  v54 = 0xD000000000000018;
  v52 = (void *)0x800000021BE89690;
  v57 = v5;
  v58 = v6;
  v56 = v10;
  while (1)
  {
    v59(v10, v17, v5);
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v19(v10, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5) == 1)
      break;
    v20 = (uint64_t)v66;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v66, v10, v5);
    v21 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v21 + 120), *(_QWORD *)(v21 + 144));
    swift_retain();
    v22 = v61;
    v23 = specialized __REAssetService.assetRef(named:in:)(v60._countAndFlagsBits, (uint64_t)v60._object, v20);
    v24 = v22;
    if (v22)
    {
      v61 = 0;
    }
    else
    {
      v25 = specialized static LoadableResource.fromCoreAssetType(assetRef:)(*(_QWORD *)(v23 + 16), (void (*)(_QWORD))type metadata accessor for AudioFileGroupResource);
      if (v25)
      {
        v6 = v25;

        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v6;
      }
      v64 = 0;
      v65 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v64 = v54;
      v65 = v53;
      String.append(_:)(v60);
      v26._countAndFlagsBits = 0xD000000000000015;
      v26._object = v52;
      String.append(_:)(v26);
      v27 = v64;
      v28 = v65;
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      v24 = (void *)swift_allocError();
      *(_QWORD *)v29 = v27;
      *(_QWORD *)(v29 + 8) = v28;
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_BYTE *)(v29 + 32) = 2;
      swift_willThrow();
      swift_release();
      v61 = 0;
    }
    v5 = v57;
    swift_release();
    v30 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    v32 = v18[2];
    v31 = v18[3];
    if (v32 >= v31 >> 1)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v18);
    v18[2] = v32 + 1;
    v18[v32 + 4] = v24;

    v6 = v58;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v5);
    v10 = v56;
    v17 += v55;
    if (!--v16)
    {
      v19(v56, 1, 1, v5);
      break;
    }
  }
  swift_bridgeObjectRelease();
  v11 = v51;
  if (v18[2])
  {
    v41 = (id)v18[4];
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  v64 = 0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v43._countAndFlagsBits = 0xD000000000000019;
  v43._object = (void *)0x800000021BE89620;
  String.append(_:)(v43);
  String.append(_:)(v60);
  v44._countAndFlagsBits = 0xD000000000000024;
  v44._object = (void *)0x800000021BE89640;
  String.append(_:)(v44);
  v45 = objc_msgSend(v11, sel_description, v50);
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;

  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v39 = v64;
  v6 = v65;
LABEL_21:
  lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
  swift_allocError();
  *(_QWORD *)v40 = v39;
  *(_QWORD *)(v40 + 8) = v6;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  *(_BYTE *)(v40 + 32) = 2;
LABEL_24:
  swift_willThrow();

  return v6;
}

{
  void *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  Swift::String v43;
  Swift::String v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  uint64_t v50;
  id v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, unint64_t, uint64_t);
  Swift::String v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;

  v60._countAndFlagsBits = a1;
  v60._object = a2;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v66 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
    v11 = a3;
  else
    v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v12 = a3;
  v13 = (void *)MEMORY[0x220768C3C](0x7974696C616572, 0xE700000000000000);
  v14 = objc_msgSend(v11, sel_URLsForResourcesWithExtension_subdirectory_, v13, 0);

  if (!v14)
  {
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v62 = 0xD000000000000021;
    v63 = 0x800000021BE895F0;
    v33 = objc_msgSend(v11, sel_description);
LABEL_20:
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = v36;

    v38._countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39 = v62;
    v6 = v63;
    goto LABEL_21;
  }
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v62 = 0xD000000000000021;
    v63 = 0x800000021BE895F0;
    v33 = objc_msgSend(v11, sel_description);
    goto LABEL_20;
  }
  v61 = v3;
  v50 = v15;
  v51 = v11;
  v17 = v15 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v55 = *(_QWORD *)(v6 + 72);
  v59 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v53 = 0x800000021BE89670;
  v54 = 0xD000000000000018;
  v52 = (void *)0x800000021BE89690;
  v57 = v5;
  v58 = v6;
  v56 = v10;
  while (1)
  {
    v59(v10, v17, v5);
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v19(v10, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5) == 1)
      break;
    v20 = (uint64_t)v66;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v66, v10, v5);
    v21 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v21 + 120), *(_QWORD *)(v21 + 144));
    swift_retain();
    v22 = v61;
    v23 = specialized __REAssetService.assetRef(named:in:)(v60._countAndFlagsBits, (uint64_t)v60._object, v20);
    v24 = v22;
    if (v22)
    {
      v61 = 0;
    }
    else
    {
      v25 = specialized static LoadableResource.fromCoreAssetType(assetRef:)(*(_QWORD *)(v23 + 16), (void (*)(_QWORD))type metadata accessor for AudioFileResource);
      if (v25)
      {
        v6 = v25;

        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v6;
      }
      v64 = 0;
      v65 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v64 = v54;
      v65 = v53;
      String.append(_:)(v60);
      v26._countAndFlagsBits = 0xD000000000000015;
      v26._object = v52;
      String.append(_:)(v26);
      v27 = v64;
      v28 = v65;
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      v24 = (void *)swift_allocError();
      *(_QWORD *)v29 = v27;
      *(_QWORD *)(v29 + 8) = v28;
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_BYTE *)(v29 + 32) = 2;
      swift_willThrow();
      swift_release();
      v61 = 0;
    }
    v5 = v57;
    swift_release();
    v30 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    v32 = v18[2];
    v31 = v18[3];
    if (v32 >= v31 >> 1)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v18);
    v18[2] = v32 + 1;
    v18[v32 + 4] = v24;

    v6 = v58;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v5);
    v10 = v56;
    v17 += v55;
    if (!--v16)
    {
      v19(v56, 1, 1, v5);
      break;
    }
  }
  swift_bridgeObjectRelease();
  v11 = v51;
  if (v18[2])
  {
    v41 = (id)v18[4];
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  v64 = 0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v43._countAndFlagsBits = 0xD000000000000019;
  v43._object = (void *)0x800000021BE89620;
  String.append(_:)(v43);
  String.append(_:)(v60);
  v44._countAndFlagsBits = 0xD000000000000024;
  v44._object = (void *)0x800000021BE89640;
  String.append(_:)(v44);
  v45 = objc_msgSend(v11, sel_description, v50);
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;

  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v39 = v64;
  v6 = v65;
LABEL_21:
  lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
  swift_allocError();
  *(_QWORD *)v40 = v39;
  *(_QWORD *)(v40 + 8) = v6;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  *(_BYTE *)(v40 + 32) = 2;
LABEL_24:
  swift_willThrow();

  return v6;
}

void static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t, void *, char *)@<X3>, uint64_t a5@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char *v25;
  void *v26;
  id v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  id v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, unint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, void *, char *);
  Swift::String v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;

  v6 = v5;
  v53 = a4;
  v54._countAndFlagsBits = a1;
  v54._object = a2;
  v52 = a5;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v57 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
    v14 = a3;
  else
    v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v15 = a3;
  v16 = (void *)MEMORY[0x220768C3C](0x7974696C616572, 0xE700000000000000);
  v17 = objc_msgSend(v14, sel_URLsForResourcesWithExtension_subdirectory_, v16, 0);

  if (!v17)
  {
    v55 = 0;
    v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v55 = 0xD000000000000021;
    v56 = 0x800000021BE895F0;
    v31 = objc_msgSend(v14, sel_description);
LABEL_21:
    v37 = v31;
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v40 = v39;

    v41._countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42 = v55;
    v43 = v56;
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(_QWORD *)v44 = v42;
    *(_QWORD *)(v44 + 8) = v43;
    *(_QWORD *)(v44 + 16) = 0;
    *(_QWORD *)(v44 + 24) = 0;
    *(_BYTE *)(v44 + 32) = 2;
    goto LABEL_22;
  }
  v51 = v13;
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v55 = 0;
    v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v55 = 0xD000000000000021;
    v56 = 0x800000021BE895F0;
    v31 = objc_msgSend(v14, sel_description);
    goto LABEL_21;
  }
  v45[1] = v18;
  v46 = v14;
  v20 = v18 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v48 = *(_QWORD *)(v9 + 72);
  v50 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v49 = v9;
  v22 = v8;
  while (1)
  {
    v23 = v51;
    v50(v51, v20, v22);
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v24(v23, 0, 1, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v23, 1, v22) == 1)
      break;
    v47 = v24;
    v25 = v57;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v57, v23, v22);
    v26 = v6;
    v53(v54._countAndFlagsBits, v54._object, v25);
    if (!v6)
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v57, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v27 = v6;
    v28 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v30 = v28[2];
    v29 = v28[3];
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
    v28[2] = v30 + 1;
    v21 = v28;
    v28[v30 + 4] = v26;

    v9 = v49;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v57, v22);
    v6 = 0;
    v20 += v48;
    if (!--v19)
    {
      v47(v51, 1, 1, v22);
      break;
    }
  }
  swift_bridgeObjectRelease();
  v32 = v21;
  v33 = v21[2];
  v14 = v46;
  if (!v33)
  {
    swift_bridgeObjectRelease();
    v55 = 0;
    v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v35._countAndFlagsBits = 0xD000000000000019;
    v35._object = (void *)0x800000021BE89620;
    String.append(_:)(v35);
    String.append(_:)(v54);
    v36._countAndFlagsBits = 0xD000000000000024;
    v36._object = (void *)0x800000021BE89640;
    String.append(_:)(v36);
    v31 = objc_msgSend(v14, sel_description);
    goto LABEL_21;
  }
  v34 = (id)v32[4];
  swift_bridgeObjectRelease();
LABEL_22:
  swift_willThrow();

}

uint64_t closure #1 in static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v9 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v9 + 120), *(_QWORD *)(v9 + 144));
  swift_retain();
  v10 = specialized __REAssetService.assetRef(named:in:)(a1, a2, a3);
  result = swift_release();
  if (!v4)
    *a4 = v10;
  return result;
}

uint64_t one-time initialization function for resourceClasses()
{
  uint64_t inited;
  void *v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(REAssetType, LoadableResource.Type)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50950;
  *(_DWORD *)(inited + 32) = 13;
  *(_QWORD *)(inited + 40) = type metadata accessor for AudioFileResource();
  *(_QWORD *)(inited + 48) = &protocol witness table for AudioResource;
  *(_DWORD *)(inited + 56) = 14;
  *(_QWORD *)(inited + 64) = type metadata accessor for AudioFileGroupResource();
  *(_QWORD *)(inited + 72) = &protocol witness table for AudioResource;
  *(_DWORD *)(inited + 80) = 15;
  *(_QWORD *)(inited + 88) = type metadata accessor for AudioUnitResource();
  *(_QWORD *)(inited + 96) = &protocol witness table for AudioResource;
  v1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  result = swift_setDeallocating();
  resourceClasses._rawValue = v1;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v12;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v13);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = dispatch thunk of Collection.count.getter();
  if (!v18)
    return static Array._allocateUninitialized(_:)();
  v19 = v18;
  v25 = v15;
  v39 = MEMORY[0x220769854](v36);
  v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  v36 = v17;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t SIMD4<>.cgColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGColorRef v9;
  uint64_t result;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = SIMD4.scalars.getter(a1);
  v4 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = a2;
  v14 = v4;
  v5 = type metadata accessor for Array();
  v6 = MEMORY[0x220772E3C](MEMORY[0x24BEE12E0], v5);
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in SIMD4<>.cgColor.getter, (uint64_t)v11, v5, MEMORY[0x24BEE50B0], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  swift_bridgeObjectRelease();
  if (one-time initialization token for linearSRGBColorSpace != -1)
    swift_once();
  v9 = CGColorCreate((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, (const CGFloat *)(v8 + 32));
  swift_bridgeObjectRelease();
  if (v9)
    return (uint64_t)v9;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CGColorRef.simd4.getter()
{
  void *v0;

  return specialized SIMD4<>.init(_:)((CGColorRef)v0);
}

uint64_t SIMD4.init(_:_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.init()();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  v4 = type metadata accessor for SIMD3();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t SIMD3<>.init(_:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v22;
  CGColorRef v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v22 = (char *)&v22 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v22 - v16;
  v18 = type metadata accessor for SIMD4();
  v24 = *(_QWORD *)(v18 - 8);
  v25 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v22 - v19;
  v23 = a1;
  SIMD4<>.init(_:)(v23, a2, a3, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.init()();
  memcpy(v9, v17, v8);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v9, v14, v8);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();

  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v20, v25);
}

uint64_t specialized SIMD4<>.init(_:)(CGColorRef color)
{
  CGColorRef CopyByMatchingToColorSpace;
  CGColorRef v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  float v12;
  uint64_t result;
  uint64_t v14;

  if (one-time initialization token for linearSRGBColorSpace != -1)
    swift_once();
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, kCGRenderingIntentDefault, color, 0);
  if (CopyByMatchingToColorSpace)
  {
    v3 = CopyByMatchingToColorSpace;
    v4 = CGColorRef.components.getter();
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        v14 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
        v7 = 0;
        v8 = v14;
        v9 = *(_QWORD *)(v14 + 16);
        do
        {
          v10 = *(double *)(v5 + 8 * v7 + 32);
          v11 = *(_QWORD *)(v14 + 24);
          if (v9 >= v11 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v9 + 1, 1);
          ++v7;
          v12 = v10;
          *(_QWORD *)(v14 + 16) = v9 + 1;
          *(float *)(v14 + 4 * v9++ + 32) = v12;
        }
        while (v6 != v7);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v8 = MEMORY[0x24BEE4AF8];
      }
      if (*(_QWORD *)(v8 + 16) == 4)
      {
        specialized SIMD.init<A>(_:)(v8);

        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void SIMD4<>.init(_:)(CGColorRef color, char *a2, uint64_t a3, uint64_t a4)
{
  CGColorRef CopyByMatchingToColorSpace;
  CGColorRef v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  char *v20;
  uint64_t v21;

  if (one-time initialization token for linearSRGBColorSpace != -1)
    swift_once();
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, kCGRenderingIntentDefault, color, 0);
  if (CopyByMatchingToColorSpace)
  {
    v9 = CopyByMatchingToColorSpace;
    v10 = CGColorRef.components.getter();
    if (v10)
    {
      v21 = v10;
      MEMORY[0x24BDAC7A8](v10);
      v18[2] = a2;
      v18[3] = a3;
      v19 = a4;
      v20 = a2;
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
      v12 = lazy protocol witness table accessor for type [CGFloat] and conformance [A]();
      v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #2 in SIMD4<>.init(_:), (uint64_t)v18, v11, a2, MEMORY[0x24BEE4078], v12, MEMORY[0x24BEE40A8], v13);
      swift_bridgeObjectRelease();
      if (MEMORY[0x220768FCC](v14, a2) == 4)
      {
        v15 = type metadata accessor for SIMD4();
        v21 = v14;
        v16 = type metadata accessor for Array();
        MEMORY[0x220772E3C](MEMORY[0x24BEE4180], v15);
        MEMORY[0x220772E3C](MEMORY[0x24BEE12C8], v16);
        SIMD.init<A>(_:)();

        return;
      }
      swift_bridgeObjectRelease();
    }
    LODWORD(v20) = 0;
    v17 = 27;
  }
  else
  {
    LODWORD(v20) = 0;
    v17 = 24;
  }
  v19 = v17;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SIMD3<>.cgColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  _QWORD v21[3];
  uint64_t v22;

  v22 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v21[2] = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16) + 8) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v21 - v8;
  v10 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SIMD4();
  v21[0] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v21 - v16;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v10 + 16))(v13, v21[1], a1, v15);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x220769E3C](&unk_21BE61D38, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x220769D1C](v9, v3, v6);
  SIMD4.init(_:_:)((uint64_t)v13);
  v19 = SIMD4<>.cgColor.getter(v14, v22);
  (*(void (**)(char *, uint64_t))(v21[0] + 8))(v17, v14);
  return v19;
}

uint64_t SIMD4.scalars.getter(uint64_t a1)
{
  uint64_t v1;

  getContiguousArrayStorageType<A>(for:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16));
  swift_allocObject();
  v1 = static Array._adoptStorage(_:count:)();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  return _finalizeUninitializedArray<A>(_:)(v1);
}

uint64_t implicit closure #1 in SIMD4<>.cgColor.getter(uint64_t a1)
{
  size_t v1;
  const void *v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return BinaryFloatingPoint.init<A>(_:)();
}

uint64_t partial apply for implicit closure #1 in SIMD4<>.cgColor.getter(uint64_t a1)
{
  return implicit closure #1 in SIMD4<>.cgColor.getter(a1);
}

uint64_t CGColorRef.simd3.getter()
{
  void *v0;

  return specialized SIMD4<>.init(_:)((CGColorRef)v0);
}

uint64_t one-time initialization function for linearSRGBWhite()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static CGColorRef.linearSRGBWhite();
  static CGColorRef.linearSRGBWhite = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static CGColorRef.linearSRGBWhite()
{
  uint64_t result;
  _OWORD v6[2];

  if (one-time initialization token for linearSRGBColorSpace != -1)
    swift_once();
  __asm { FMOV            V0.2D, #1.0 }
  v6[0] = _Q0;
  v6[1] = _Q0;
  result = (uint64_t)CGColorCreate((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, (const CGFloat *)v6);
  if (!result)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for linearSRGBColorSpace()
{
  uint64_t result;

  result = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF308]);
  if (result)
  {
    static CGColorSpaceRef.linearSRGBColorSpace = result;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in SIMD4<>.init(_:)()
{
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type [CGFloat] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CGFloat] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CGFloat] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGFloat]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CGFloat] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE50B8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  else
    return type metadata accessor for _ContiguousArrayStorage();
}

uint64_t __RKMaterialParameterBlock.buildParametersDictionaryFromCurrentState()()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  id v45;
  uint64_t result;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[8];
  unsigned __int8 v60;

  v1 = *(void **)(v0 + 24);
  v2 = (id)REMaterialParameterBlockValueCopyParameterNameArray();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = (_QWORD *)v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_32:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  v56 = 0;
  v6 = (uint64_t *)(v3 + 40);
  v47 = v1;
  while (1)
  {
    v8 = *(v6 - 1);
    v9 = *v6;
    MEMORY[0x24BDAC7A8](v4);
    v54 = v11;
    v55 = v10;
    v57 = v8;
    if ((v9 & 0x1000000000000000) != 0 || !(v9 & 0x2000000000000000 | v8 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45 = v1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
      v13 = v56;
      _StringGuts._slowWithCString<A>(_:)();

LABEL_13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    if ((v9 & 0x2000000000000000) == 0)
    {
      if ((v8 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = v1;
      swift_bridgeObjectRetain();
      v13 = v56;
      closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)v59);

      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v1;
    swift_bridgeObjectRetain();
    v13 = v56;
    closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)v59);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    v56 = v13;
    if (v60 != 255)
      break;
    swift_bridgeObjectRetain();
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9);
    v32 = v31;
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
      v4 = swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      specialized _NativeDictionary.copy()();
    swift_bridgeObjectRelease();
    v33 = v5[7] + 80 * v30;
    v34 = *(void **)v33;
    v35 = *(_QWORD *)(v33 + 8);
    v37 = *(_QWORD *)(v33 + 16);
    v36 = *(_QWORD *)(v33 + 24);
    v58 = *(_QWORD *)(v33 + 32);
    v38 = *(_QWORD *)(v33 + 48);
    v51 = *(_QWORD *)(v33 + 56);
    v53 = *(_QWORD *)(v33 + 40);
    v39 = *(_BYTE *)(v33 + 64);
    specialized _NativeDictionary._delete(at:)(v30, (uint64_t)v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of __RKMaterialParameterBlock.Parameter(v34, v35, v37, v36, v58, v53, v38, v51, v39);
LABEL_5:
    v1 = v47;
LABEL_6:
    v6 = (uint64_t *)(v54 + 16);
    if (v55 == 1)
      goto LABEL_32;
  }
  v52 = v60;
  v16 = (void *)v59[0];
  v15 = v59[1];
  v18 = v59[2];
  v17 = v59[3];
  v19 = v59[4];
  v48 = v59[5];
  v49 = v59[6];
  v50 = v59[7];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9);
  v23 = v5[2];
  v24 = (v21 & 1) == 0;
  v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    v26 = v21;
    if (v5[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
      v27 = v57;
      if ((v26 & 1) == 0)
        goto LABEL_28;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      v27 = v57;
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9);
      if ((v26 & 1) != (v29 & 1))
        goto LABEL_35;
      v22 = v28;
      if ((v26 & 1) == 0)
      {
LABEL_28:
        v5[(v22 >> 6) + 8] |= 1 << v22;
        v40 = (uint64_t *)(v5[6] + 16 * v22);
        *v40 = v27;
        v40[1] = v9;
        v41 = v5[7] + 80 * v22;
        *(_QWORD *)v41 = v16;
        *(_QWORD *)(v41 + 8) = v15;
        *(_QWORD *)(v41 + 16) = v18;
        *(_QWORD *)(v41 + 24) = v17;
        *(_QWORD *)(v41 + 32) = v19;
        *(_QWORD *)(v41 + 40) = v48;
        *(_QWORD *)(v41 + 48) = v49;
        *(_QWORD *)(v41 + 56) = v50;
        *(_BYTE *)(v41 + 64) = v52;
        v42 = v5[2];
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (v43)
          goto LABEL_34;
        v5[2] = v44;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    v7 = v5[7] + 80 * v22;
    outlined consume of __RKMaterialParameterBlock.Parameter(*(void **)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_BYTE *)(v7 + 64));
    *(_QWORD *)v7 = v16;
    *(_QWORD *)(v7 + 8) = v15;
    *(_QWORD *)(v7 + 16) = v18;
    *(_QWORD *)(v7 + 24) = v17;
    *(_QWORD *)(v7 + 32) = v19;
    *(_QWORD *)(v7 + 40) = v48;
    *(_QWORD *)(v7 + 48) = v49;
    *(_QWORD *)(v7 + 56) = v50;
    *(_BYTE *)(v7 + 64) = v52;
LABEL_4:
    swift_bridgeObjectRelease();
    v4 = swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
LABEL_34:
  __break(1u);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_35:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t __RKMaterialParameterBlock.parameters.getter()
{
  return __RKMaterialParameterBlock.buildParametersDictionaryFromCurrentState()();
}

void __RKMaterialParameterBlock.parameters.setter(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD v29[8];
  char v30;

  v1 = 0;
  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  v5 = 1 << *(_BYTE *)(v2 - 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v3;
  v21 = v2;
  v22 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v27 = (v7 - 1) & v7;
      v28 = v1;
      v8 = __clz(__rbit64(v7)) | (v1 << 6);
      goto LABEL_5;
    }
    v17 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v22)
      goto LABEL_21;
    v18 = *(_QWORD *)(v21 + 8 * v17);
    v19 = v1 + 1;
    if (!v18)
    {
      v19 = v1 + 2;
      if (v1 + 2 >= v22)
        goto LABEL_21;
      v18 = *(_QWORD *)(v21 + 8 * v19);
      if (!v18)
      {
        v19 = v1 + 3;
        if (v1 + 3 >= v22)
          goto LABEL_21;
        v18 = *(_QWORD *)(v21 + 8 * v19);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v27 = (v18 - 1) & v18;
    v28 = v19;
    v8 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_5:
    v9 = *(_QWORD *)(a1 + 56) + 80 * v8;
    v11 = *(_QWORD *)(v9 + 8);
    v25 = *(_QWORD *)(v9 + 24);
    v26 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 40);
    v14 = *(_QWORD *)(v9 + 48);
    v15 = *(_QWORD *)(v9 + 56);
    v16 = *(_BYTE *)(v9 + 64);
    v29[0] = *(_QWORD *)v9;
    v10 = (void *)v29[0];
    v29[1] = v11;
    v29[2] = v26;
    v29[3] = v25;
    v29[4] = v12;
    v29[5] = v13;
    v29[6] = v14;
    v29[7] = v15;
    v30 = v16;
    v24 = String.utf8CString.getter() + 32;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter(v10, v11, v26, v25, v12, v13, v14, v15, v16);
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v24, (uint64_t)v29);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of __RKMaterialParameterBlock.Parameter(v10, v11, v26, v25, v12, v13, v14, v15, v16);
    v7 = v27;
    v1 = v28;
  }
  v20 = v1 + 4;
  if (v1 + 4 >= v22)
  {
LABEL_21:
    swift_release();
    return;
  }
  v18 = *(_QWORD *)(v21 + 8 * v20);
  if (v18)
  {
    v19 = v1 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v22)
      goto LABEL_21;
    v18 = *(_QWORD *)(v21 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

void (*__RKMaterialParameterBlock.parameters.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = __RKMaterialParameterBlock.buildParametersDictionaryFromCurrentState()();
  return __RKMaterialParameterBlock.parameters.modify;
}

void __RKMaterialParameterBlock.parameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t i;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD v29[8];
  char v30;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  v21 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v22 = (unint64_t)(63 - v4) >> 6;
  v23 = *a1;
  swift_bridgeObjectRetain();
  for (i = 0; ; i = v28)
  {
    if (v5)
    {
      v27 = (v5 - 1) & v5;
      v28 = i;
      v7 = __clz(__rbit64(v5)) | (i << 6);
      v8 = v23;
      goto LABEL_6;
    }
    v17 = i + 1;
    v8 = v23;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v22)
      goto LABEL_22;
    v18 = *(_QWORD *)(v21 + 8 * v17);
    v19 = i + 1;
    if (!v18)
    {
      v19 = i + 2;
      if (i + 2 >= v22)
        goto LABEL_22;
      v18 = *(_QWORD *)(v21 + 8 * v19);
      if (!v18)
      {
        v19 = i + 3;
        if (i + 3 >= v22)
          goto LABEL_22;
        v18 = *(_QWORD *)(v21 + 8 * v19);
        if (!v18)
          break;
      }
    }
LABEL_21:
    v27 = (v18 - 1) & v18;
    v28 = v19;
    v7 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_6:
    v9 = *(_QWORD *)(v8 + 56) + 80 * v7;
    v11 = *(_QWORD *)(v9 + 8);
    v25 = *(_QWORD *)(v9 + 24);
    v26 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 40);
    v14 = *(_QWORD *)(v9 + 48);
    v15 = *(_QWORD *)(v9 + 56);
    v16 = *(_BYTE *)(v9 + 64);
    v29[0] = *(_QWORD *)v9;
    v10 = (void *)v29[0];
    v29[1] = v11;
    v29[2] = v26;
    v29[3] = v25;
    v29[4] = v12;
    v29[5] = v13;
    v29[6] = v14;
    v29[7] = v15;
    v30 = v16;
    v24 = String.utf8CString.getter() + 32;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter(v10, v11, v26, v25, v12, v13, v14, v15, v16);
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v24, (uint64_t)v29);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of __RKMaterialParameterBlock.Parameter(v10, v11, v26, v25, v12, v13, v14, v15, v16);
    v5 = v27;
  }
  v20 = i + 4;
  if (i + 4 >= v22)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  v18 = *(_QWORD *)(v21 + 8 * v20);
  if (v18)
  {
    v19 = i + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v22)
      goto LABEL_22;
    v18 = *(_QWORD *)(v21 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_21;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_21BB9BBA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = __RKMaterialParameterBlock.buildParametersDictionaryFromCurrentState()();
  *a1 = result;
  return result;
}

void sub_21BB9BBF0()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.parameters.setter(v0);
}

void static HoverEffectComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3022;
}

id static HoverEffectComponent.HoverEffect.spotlight(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static HoverEffectComponent.HoverEffect.spotlight(_:)(a1, 0, a2);
}

id static HoverEffectComponent.HoverEffect.highlight(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static HoverEffectComponent.HoverEffect.spotlight(_:)(a1, 1, a2);
}

id static HoverEffectComponent.HoverEffect.spotlight(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  void *v3;
  unint64_t v4;

  v3 = *(void **)a1;
  v4 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = a2;
  return v3;
}

__n128 static HoverEffectComponent.HoverEffect.shader(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = 2;
  return result;
}

id HoverEffectComponent.hoverEffect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(v2, v3, v4);
}

id outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u)
    return result;
  return result;
}

void HoverEffectComponent.hoverEffect.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
}

void outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(id a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u)

}

uint64_t (*HoverEffectComponent.hoverEffect.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static HoverEffectComponent.OpacityFunction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void HoverEffectComponent.OpacityFunction.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int HoverEffectComponent.OpacityFunction.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

CGColorRef one-time initialization function for default()
{
  CGColorRef result;

  result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  static HoverEffectComponent.SpotlightHoverEffectStyle.default = (uint64_t)result;
  dword_25519C760 = 1065353216;
  byte_25519C764 = 0;
  return result;
}

{
  CGColorRef result;

  result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  static HoverEffectComponent.HighlightHoverEffectStyle.default = (uint64_t)result;
  dword_25519C770 = 1065353216;
  byte_25519C774 = 0;
  return result;
}

id static HoverEffectComponent.SpotlightHoverEffectStyle.default.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  int v3;
  char v4;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = (void *)static HoverEffectComponent.SpotlightHoverEffectStyle.default;
  v3 = dword_25519C760;
  v4 = byte_25519C764;
  *(_QWORD *)a1 = static HoverEffectComponent.SpotlightHoverEffectStyle.default;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v4;
  return v2;
}

uint64_t (*HoverEffectComponent.SpotlightHoverEffectStyle._color.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*HoverEffectComponent.SpotlightHoverEffectStyle.strength.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*HoverEffectComponent.SpotlightHoverEffectStyle.opacityFunction.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static HoverEffectComponent.SpotlightHoverEffectStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectComponent.SpotlightHoverEffectStyle(uint64_t a1, uint64_t a2)
{
  return specialized static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(a1, a2);
}

CGColorRef HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)@<X0>(CGColorRef result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  char v6;

  v6 = *a2;
  if (!result)
    result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  *(_QWORD *)a3 = result;
  *(float *)(a3 + 8) = a4;
  *(_BYTE *)(a3 + 12) = v6;
  return result;
}

id static HoverEffectComponent.HighlightHoverEffectStyle.default.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  int v3;
  char v4;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = (void *)static HoverEffectComponent.HighlightHoverEffectStyle.default;
  v3 = dword_25519C770;
  v4 = byte_25519C774;
  *(_QWORD *)a1 = static HoverEffectComponent.HighlightHoverEffectStyle.default;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v4;
  return v2;
}

id HoverEffectComponent.HighlightHoverEffectStyle._color.getter()
{
  id *v0;

  return *v0;
}

void HoverEffectComponent.HighlightHoverEffectStyle._color.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*HoverEffectComponent.HighlightHoverEffectStyle._color.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float HoverEffectComponent.HighlightHoverEffectStyle.strength.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void HoverEffectComponent.HighlightHoverEffectStyle.strength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*HoverEffectComponent.HighlightHoverEffectStyle.strength.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void HoverEffectComponent.HighlightHoverEffectStyle.opacityFunction.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 12);
}

_BYTE *HoverEffectComponent.HighlightHoverEffectStyle.opacityFunction.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = *result;
  return result;
}

uint64_t (*HoverEffectComponent.HighlightHoverEffectStyle.opacityFunction.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(a1, a2);
}

RealityFoundation::HoverEffectComponent::ShaderHoverEffectInputs __swiftcall HoverEffectComponent.ShaderHoverEffectInputs.init(fadeInDuration:fadeOutDuration:)(Swift::Double fadeInDuration, Swift::Double fadeOutDuration)
{
  Swift::Double *v2;
  RealityFoundation::HoverEffectComponent::ShaderHoverEffectInputs result;

  if (fadeInDuration > 10.0)
    fadeInDuration = 10.0;
  if (fadeOutDuration > 10.0)
    fadeOutDuration = 10.0;
  *v2 = fadeInDuration;
  v2[1] = fadeOutDuration;
  result._fadeOutDuration = fadeOutDuration;
  result._fadeInDuration = fadeInDuration;
  return result;
}

double static HoverEffectComponent.ShaderHoverEffectInputs.default.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.2;
  *a1 = xmmword_21BE61D50;
  return result;
}

double HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.setter(double a1)
{
  double *v1;

  if (a1 > 10.0)
    a1 = 10.0;
  *v1 = a1;
}

uint64_t (*HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.modify;
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.modify(uint64_t result)
{
  double v1;

  v1 = *(double *)result;
  if (*(double *)result > 10.0)
    v1 = 10.0;
  **(double **)(result + 8) = v1;
  return result;
}

double HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.setter(double a1)
{
  uint64_t v1;

  if (a1 > 10.0)
    a1 = 10.0;
  *(double *)(v1 + 8) = a1;
}

uint64_t (*HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.modify(_QWORD *a1))(uint64_t result)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.modify;
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.modify(uint64_t result)
{
  double v1;

  v1 = *(double *)result;
  if (*(double *)result > 10.0)
    v1 = 10.0;
  *(double *)(*(_QWORD *)(result + 8) + 8) = v1;
  return result;
}

BOOL static HoverEffectComponent.ShaderHoverEffectInputs.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectComponent.ShaderHoverEffectInputs(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

id HoverEffectComponent.init()@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  unint64_t v3;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = (void *)static HoverEffectComponent.SpotlightHoverEffectStyle.default;
  v3 = dword_25519C760 | ((unint64_t)byte_25519C764 << 32);
  *(_QWORD *)a1 = static HoverEffectComponent.SpotlightHoverEffectStyle.default;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 0;
  return v2;
}

uint64_t HoverEffectComponent.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  char v4;
  __int128 v5;

  v3 = *(_OWORD *)result;
  v4 = *(_BYTE *)(result + 16);
  if (one-time initialization token for default != -1)
  {
    v5 = *(_OWORD *)result;
    result = swift_once();
    v3 = v5;
  }
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

uint64_t static HoverEffectComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int Style;
  double v3;
  double v4;
  uint64_t result;
  double v6;
  double v7;
  unsigned int v8;
  unsigned int v9;
  int OpacityFunction;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  Style = RERemoteEffectsComponentGetStyle();
  if (Style == 2)
  {
    RERemoteEffectsComponentGetColorTint();
    RERemoteEffectsComponentGetIntensityMultiplier();
    v9 = v8;
    OpacityFunction = RERemoteEffectsComponentGetOpacityFunction();
    result = RECreateCGColorFromColorGamut();
    v11 = result;
    v12 = (unint64_t)(OpacityFunction == 2) << 33;
    if (OpacityFunction == 1)
      v12 = 0x100000000;
    v13 = v12 | v9;
    if (one-time initialization token for default != -1)
      result = swift_once();
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else if (Style == 1)
  {
    RERemoteEffectsComponentGetGlowAppearDurationOverride();
    v4 = v3;
    result = RERemoteEffectsComponentGetGlowDisappearDurationOverride();
    if (v4 > 10.0)
      v4 = 10.0;
    if (v6 <= 10.0)
      v7 = v6;
    else
      v7 = 10.0;
    if (one-time initialization token for default != -1)
      result = swift_once();
    *(double *)a1 = v4;
    *(double *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = 2;
  }
  else
  {
    RERemoteEffectsComponentGetColorTint();
    RERemoteEffectsComponentGetIntensityMultiplier();
    v15 = v14;
    v16 = RERemoteEffectsComponentGetOpacityFunction();
    result = RECreateCGColorFromColorGamut();
    v17 = result;
    v18 = (unint64_t)(v16 == 2) << 33;
    if (v16 == 1)
      v18 = 0x100000000;
    v19 = v18 | v15;
    if (one-time initialization token for default != -1)
      result = swift_once();
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v19;
    *(_BYTE *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t HoverEffectComponent.__toCore(_:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  int v3;
  id v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 v7;
  id v8;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  RERemoteEffectsComponentSetEnableEntityHoverEffect();
  RERemoteEffectsComponentResetGlowAppearDurationOverride();
  RERemoteEffectsComponentResetGlowDisappearDurationOverride();
  if (v3)
  {
    if (v3 != 1)
    {
      RERemoteEffectsComponentSetStyle();
      RERemoteEffectsComponentSetGlowAppearDurationOverride();
      RERemoteEffectsComponentSetGlowDisappearDurationOverride();
      goto LABEL_7;
    }
    v4 = v1;
    RERemoteEffectsComponentSetStyle();
    RECGColorToColorGamut();
    RERemoteEffectsComponentSetColorTint();
    RERemoteEffectsComponentSetIntensityMultiplier();
    RERemoteEffectsComponentSetOpacityFunction();
    v5 = v1;
    v6 = v2;
    v7 = 1;
  }
  else
  {
    v8 = v1;
    RERemoteEffectsComponentSetStyle();
    RECGColorToColorGamut();
    RERemoteEffectsComponentSetColorTint();
    RERemoteEffectsComponentSetIntensityMultiplier();
    RERemoteEffectsComponentSetOpacityFunction();
    v5 = v1;
    v6 = v2;
    v7 = 0;
  }
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(v5, v6, v7);
LABEL_7:
  RELinkedOnOrAfterFall2024OSVersions();
  RERemoteEffectsComponentSetVersion();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance HoverEffectComponent(_DWORD *a1@<X8>)
{
  *a1 = 3022;
}

BOOL specialized static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  int v3;
  float v4;
  int v5;
  char v6;
  _BOOL8 result;

  v2 = *(float *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = *(float *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 12);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  v6 = static _CFObject.== infix(_:_:)();
  result = 0;
  if ((v6 & 1) != 0 && v2 == v4)
    return v3 == v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffectComponent.OpacityFunction and conformance HoverEffectComponent.OpacityFunction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverEffectComponent.OpacityFunction and conformance HoverEffectComponent.OpacityFunction;
  if (!lazy protocol witness table cache variable for type HoverEffectComponent.OpacityFunction and conformance HoverEffectComponent.OpacityFunction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for HoverEffectComponent.OpacityFunction, &type metadata for HoverEffectComponent.OpacityFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectComponent.OpacityFunction and conformance HoverEffectComponent.OpacityFunction);
  }
  return result;
}

double sub_21BB9C6A8@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double *sub_21BB9C6B4(double *result, double *a2)
{
  double v2;

  v2 = *result;
  if (*result > 10.0)
    v2 = 10.0;
  *a2 = v2;
  return result;
}

double sub_21BB9C6CC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double *sub_21BB9C6D8(double *result, uint64_t a2)
{
  double v2;

  v2 = *result;
  if (*result > 10.0)
    v2 = 10.0;
  *(double *)(a2 + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectComponent()
{
  return &type metadata for HoverEffectComponent;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.HoverEffect()
{
  return &type metadata for HoverEffectComponent.HoverEffect;
}

uint64_t storeEnumTagSinglePayload for HoverEffectComponent.OpacityFunction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BB9C770 + 4 * byte_21BE61D65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BB9C7A4 + 4 * byte_21BE61D60[v4]))();
}

uint64_t sub_21BB9C7A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB9C7AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB9C7B4);
  return result;
}

uint64_t sub_21BB9C7C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB9C7C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BB9C7CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB9C7D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.OpacityFunction()
{
  return &type metadata for HoverEffectComponent.OpacityFunction;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.SpotlightHoverEffectStyle()
{
  return &type metadata for HoverEffectComponent.SpotlightHoverEffectStyle;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.HighlightHoverEffectStyle()
{
  return &type metadata for HoverEffectComponent.HighlightHoverEffectStyle;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.ShaderHoverEffectInputs()
{
  return &type metadata for HoverEffectComponent.ShaderHoverEffectInputs;
}

void destroy for HoverEffectComponent.HoverEffect.HoverEffectType(uint64_t a1)
{
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.HoverEffect.HoverEffectType()
{
  return &type metadata for HoverEffectComponent.HoverEffect.HoverEffectType;
}

BOOL specialized static HoverEffectComponent.HoverEffect.HoverEffectType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;
  double v5;
  double v6;
  int v7;
  float v8;
  float v9;
  double v10;
  uint64_t v11;
  unsigned __int8 v12;
  id v13;
  double v15;
  uint64_t v16;
  unsigned __int8 v17;

  v3 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(double *)a2;
  v5 = *(double *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      type metadata accessor for CGColorRef(0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
      if ((static _CFObject.== infix(_:_:)() & 1) != 0)
      {
        v8 = *(float *)&v2;
        v9 = *(float *)&v5;
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 0);
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
        v10 = v3;
        v11 = *(_QWORD *)&v2;
        v12 = 0;
        goto LABEL_17;
      }
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 0);
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
      v15 = v3;
      v16 = *(_QWORD *)&v2;
      v17 = 0;
LABEL_13:
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v15, v16, v17);
      return 0;
    }
    goto LABEL_7;
  }
  if (v4 == 1)
  {
    if (v7 == 1)
    {
      type metadata accessor for CGColorRef(0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 1u);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 1u);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
      if ((static _CFObject.== infix(_:_:)() & 1) != 0)
      {
        v8 = *(float *)&v2;
        v9 = *(float *)&v5;
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 1u);
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
        v10 = v3;
        v11 = *(_QWORD *)&v2;
        v12 = 1;
LABEL_17:
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v10, v11, v12);
        return v8 == v9 && ((*(_QWORD *)&v5 ^ *(_QWORD *)&v2) & 0xFF00000000) == 0;
      }
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 1u);
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
      v15 = v3;
      v16 = *(_QWORD *)&v2;
      v17 = 1;
      goto LABEL_13;
    }
LABEL_7:
    v13 = *(id *)&v3;
LABEL_12:
    outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, v7);
    outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, v4);
    v15 = v6;
    v16 = *(_QWORD *)&v5;
    v17 = v7;
    goto LABEL_13;
  }
  if (v7 != 2)
    goto LABEL_12;
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a1, *(uint64_t *)&v2, 2u);
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 2u);
  return v2 == v5 && v3 == v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_So5RESRTas5NeverOTB504_s17d55Foundation22SkeletalPosesComponentV28updateInternalPoseF116Namesyys13OpaquePointerVFyAA0cH0VXEfU_So5RESRTa0A3Kit9TransformVcfu_33_00c2e038d769be1530659e2383c6619cAmJTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v15;
    if (one-time initialization token for identity != -1)
      swift_once();
    v4 = (__int128 *)(a1 + 64);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v9 = *(_QWORD *)(v15 + 16);
      v8 = *(_QWORD *)(v15 + 24);
      if (v9 >= v8 >> 1)
      {
        v13 = *(v4 - 1);
        v14 = *(v4 - 2);
        v12 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v7 = v12;
        v6 = v13;
        v5 = v14;
      }
      *(_QWORD *)(v15 + 16) = v9 + 1;
      v10 = (_OWORD *)(v15 + 48 * v9);
      v10[2] = v5;
      v10[3] = v6;
      v10[4] = v7;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_So13simd_float4x4as5NeverOTB504_s17d55Foundation22SkeletalPosesComponentV28updateInternalPoseF126Namesyys13OpaquePointerVFyAA0cH0VXEfU_So13simd_float4x4a0A3Kit9TransformVcfu0_33_468c2b3721e400eee04f35cd537c1492AmJTf3nnnpk_nTf1cn_n(float32x4_t *a1)
{
  int64_t v1;
  uint64_t v2;
  float32x4_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  float32x4_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float32x4_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x4_t v15;
  _OWORD *v16;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x4_t v23;
  uint64_t v24;

  v1 = a1[1].i64[0];
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v24;
    if (one-time initialization token for identity != -1)
      swift_once();
    v4 = a1 + 4;
    do
    {
      v18 = v4[-2];
      v19 = *v4;
      *(double *)&v5 = simd_matrix4x4(v4[-1]);
      v20 = v5;
      v21 = v6;
      v22 = v7;
      v23 = v8;
      simd_float4x4.scale(_:)(v18);
      v9 = v20;
      v10 = v21;
      v11 = v22;
      v12 = v23;
      v14 = *(_QWORD *)(v24 + 16);
      v13 = *(_QWORD *)(v24 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v12 = v23;
        v11 = v22;
        v10 = v21;
        v9 = v20;
      }
      v15 = vaddq_f32(v19, v12);
      v15.i32[3] = v12.i32[3];
      *(_QWORD *)(v24 + 16) = v14 + 1;
      v16 = (_OWORD *)(v24 + (v14 << 6));
      v16[2] = v9;
      v16[3] = v10;
      v16[4] = v11;
      v16[5] = v15;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t SkeletalPosesComponent.poses.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t SkeletalPosesComponent.poses.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*SkeletalPosesComponent.poses.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SkeletalPosesComponent.init(poses:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

int64_t static SkeletalPosesComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int64_t result;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t JointCount;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;

  v3 = *a1;
  result = specialized static SkeletalPosesComponent.getCoreAsset(_:)();
  v5 = result;
  if (!result)
  {
    v7 = MEMORY[0x24BEE4AF8];
LABEL_15:
    *a2 = v7;
    a2[1] = v5;
    return result;
  }
  result = RESkeletalPoseComponentGetSkeletonCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v6 = result;
    v7 = MEMORY[0x24BEE4AF8];
    if (result)
    {
      v18 = v5;
      v19 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      v8 = 0;
      v7 = v19;
      do
      {
        RESkeletalPoseComponentGetPoseName();
        v9 = String.init(cString:)();
        v11 = v10;
        RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
        if (v8 < RESkeletalPoseComponentGetSkeletonCount()
          && (JointCount = RESkeletalPoseComponentGetJointCount()) != 0)
        {
          v13 = JointCount;
          if (JointCount < 0)
            goto LABEL_17;
          type metadata accessor for RESRT(0);
          v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v14 + 16) = v13;
          result = RESkeletalPoseComponentGetJointTransforms();
          *(_QWORD *)(v14 + 16) = v13;
        }
        else
        {
          result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x24BEE4AF8]);
          v14 = result;
        }
        v16 = *(_QWORD *)(v19 + 16);
        v15 = *(_QWORD *)(v19 + 24);
        if (v16 >= v15 >> 1)
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v17 = v19 + 56 * v16;
        *(_QWORD *)(v17 + 32) = v3;
        *(_QWORD *)(v17 + 40) = v8;
        *(_QWORD *)(v19 + 16) = v16 + 1;
        *(_BYTE *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = v9;
        *(_QWORD *)(v17 + 64) = v11;
        *(_QWORD *)(v17 + 72) = 0;
        *(_QWORD *)(v17 + 80) = v14;
        ++v8;
      }
      while (v6 != v8);
      v5 = v18;
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_17:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SkeletalPosesComponent.__toCore(_:)(Swift::OpaquePointer *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = 72;
    while (!*(_QWORD *)(v2 + v4))
    {
      v4 += 56;
      if (!--v3)
        goto LABEL_7;
    }
    SkeletalPosesComponent.updateInternalPoseJointNames(_:)((Swift::OpaquePointer)a1->_rawValue);
  }
LABEL_7:
  result = RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  v6 = *(_QWORD *)(v2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(v2 + 32 + 56 * v7 + 48);
      RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
      if (v7 < RESkeletalPoseComponentGetSkeletonCount())
      {
        result = RESkeletalPoseComponentGetJointCount();
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
        {
          if (v9 >= result)
            v10 = result;
          else
            v10 = *(_QWORD *)(v8 + 16);
          if (!v10)
            goto LABEL_11;
        }
        else
        {
          if (result >= 1)
            goto LABEL_11;
          v10 = result;
          if (!result)
            goto LABEL_11;
        }
        if (result == v10)
        {
          RESkeletalPoseComponentSetJointTransforms();
        }
        else
        {
          if (v10 < 0)
          {
            __break(1u);
            return result;
          }
          v11 = 0;
          v12 = v8 + 64;
          do
          {
            v13 = v11 + 1;
            RESkeletalPoseComponentSetJointTransform();
            v12 += 48;
            v11 = v13;
          }
          while (v10 != v13);
        }
        RENetworkMarkComponentDirty();
      }
LABEL_11:
      if (++v7 == v6)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance SkeletalPosesComponent(_DWORD *a1@<X8>)
{
  *a1 = 26;
}

void static SkeletalPosesComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 26;
}

Swift::Void __swiftcall SkeletalPosesComponent.updateInternalPoseJointNames(_:)(Swift::OpaquePointer a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t SkeletalPoseDefinition;
  uint64_t v5;
  uint64_t PoseCount;
  _QWORD *v7;
  uint64_t inited;
  uint64_t ModelSpacePoseCount;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  __int128 v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;

  v3 = *v1;
  SkeletalPoseDefinition = RESkeletalPoseComponentGetSkeletalPoseDefinition();
  if (SkeletalPoseDefinition)
  {
    v5 = SkeletalPoseDefinition;
    PoseCount = RESkeletalPoseDefinitionAssetGetPoseCount();
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v28 = MEMORY[0x24BEE4AF8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UnsafePointer<Int8>]>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 32) = v7;
    v27 = (_QWORD *)inited;
    ModelSpacePoseCount = RESkeletalPoseDefinitionAssetGetModelSpacePoseCount();
    v25 = v7;
    v26 = v7;
    v24 = v7;
    v10 = swift_initStackObject();
    *(_OWORD *)(v10 + 16) = xmmword_21BE411F0;
    *(_QWORD *)(v10 + 32) = v7;
    v23 = (_QWORD *)v10;
    v22 = v7;
    v11 = *(_QWORD *)(v3 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      v12 = (_QWORD *)(v3 + 80);
      do
      {
        v14 = *(v12 - 1);
        v13 = *v12;
        v15 = *(_OWORD *)(v12 - 3);
        v16 = *((_BYTE *)v12 - 32);
        v17 = *((_OWORD *)v12 - 3);
        v18 = v16;
        v19 = v15;
        v20 = v14;
        v21 = v13;
        closure #1 in SkeletalPosesComponent.updateInternalPoseJointNames(_:)((uint64_t *)&v17, PoseCount, v5, &v30, &v27, &v29, (uint64_t)&v28, (uint64_t)&v22, (uint64_t)a1._rawValue, ModelSpacePoseCount, &v26, &v23, &v25, &v24);
        v12 += 7;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    RENetworkMarkComponentDirty();
    swift_bridgeObjectRelease();
    $defer #1 () in SkeletalPosesComponent.updateInternalPoseJointNames(_:)((uint64_t)&v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in SkeletalPosesComponent.updateInternalPoseJointNames(_:)((uint64_t)&v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t $defer #1 () in SkeletalPosesComponent.updateInternalPoseJointNames(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  void *v7;

  v1 = *(_QWORD *)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 32 + 8 * i);
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
      {
        swift_bridgeObjectRetain();
        for (j = 0; j != v5; ++j)
        {
          v7 = *(void **)(v4 + 8 * j + 32);
          free(v7);
        }
        swift_bridgeObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in SkeletalPosesComponent.updateInternalPoseJointNames(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD **a4, _QWORD **a5, _QWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD **a11, _QWORD **a12, _QWORD **a13, _QWORD **a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  _QWORD *v25;
  const char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  int64_t ModelSpaceJointCount;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  float32x4_t *v55;
  _QWORD *v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  const char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  _QWORD *v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  int64_t v97;
  _QWORD *v98;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int64_t v103;
  _QWORD *v104;
  const char *v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  int64_t JointCount;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  const char *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  unint64_t v156;
  unint64_t v157;
  _OWORD *v158;
  _QWORD *v159;
  char v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t PoseMeshMapCount;
  uint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t result;
  uint64_t v181;
  unint64_t v182;
  _QWORD **v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;

  v15 = v14;
  v207 = *MEMORY[0x24BDAC8D0];
  v16 = a1[1];
  v188 = a1[3];
  v189 = *a1;
  v186 = a1[5];
  v187 = a1[4];
  v199 = a2;
  v200 = a1[6];
  v195 = v16;
  if ((a1[2] & 1) == 0)
  {
    if (a2 < 0)
      goto LABEL_189;
    if (!a2)
      goto LABEL_157;
    v96 = 0;
    while (1)
    {
      if (v96 == a2)
        goto LABEL_183;
      if (v96 != v16)
        break;
      *(_QWORD *)&v203 = v189;
      *((_QWORD *)&v203 + 1) = v16;
      LOBYTE(v204) = 0;
      *((_QWORD *)&v204 + 1) = v188;
      *(_QWORD *)&v205 = v187;
      *((_QWORD *)&v205 + 1) = v186;
      *(_QWORD *)&v206 = v200;
      v97 = SkeletalPose.jointNames.getter();
      v98 = *a6;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a6 = v98;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98[2] + 1, 1, v98);
        *a6 = v98;
      }
      v101 = v98[2];
      v100 = v98[3];
      if (v101 >= v100 >> 1)
      {
        v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v100 > 1), v101 + 1, 1, v98);
        *a6 = v98;
      }
      v98[2] = v101 + 1;
      v98[v101 + 4] = v97;
      v102 = *(_QWORD *)(v97 + 16);
      if (v102)
      {
        swift_bridgeObjectRetain();
        v103 = v97 + 40;
        v104 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v105 = (const char *)(String.utf8CString.getter() + 32);
          swift_bridgeObjectRetain();
          v106 = strdup(v105);
          swift_release();
          swift_bridgeObjectRelease();
          if (v106)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104[2] + 1, 1, v104);
            v108 = v104[2];
            v107 = v104[3];
            if (v108 >= v107 >> 1)
              v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v107 > 1), v108 + 1, 1, v104);
            v104[2] = v108 + 1;
            v104[v108 + 4] = v106;
          }
          v103 += 16;
          --v102;
        }
        while (v102);
        swift_bridgeObjectRelease();
      }
      else
      {
        v104 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      v120 = v104[2];
      v121 = *a4;
      v122 = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v121;
      if ((v122 & 1) == 0)
      {
        v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v121[2] + 1, 1, v121);
        *a4 = v121;
      }
      v124 = v121[2];
      v123 = v121[3];
      if (v124 >= v123 >> 1)
        v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v123 > 1), v124 + 1, 1, v121);
      v121[2] = v124 + 1;
      v125 = &v121[3 * v124];
      v125[4] = v120;
      v125[5] = v104 + 4;
      v125[6] = 0;
      *a4 = v121;
      v126 = *a5;
      v127 = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v126;
      if ((v127 & 1) == 0)
      {
        v126 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v126[2] + 1, 1, v126);
        *a5 = v126;
      }
      v129 = v126[2];
      v128 = v126[3];
      if (v129 >= v128 >> 1)
      {
        v126 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v128 > 1), v129 + 1, 1, v126);
        *a5 = v126;
      }
      v126[2] = v129 + 1;
      v126[v129 + 4] = v104;
      v130 = swift_bridgeObjectRetain();
      v131 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_So5RESRTas5NeverOTB504_s17d55Foundation22SkeletalPosesComponentV28updateInternalPoseF116Namesyys13OpaquePointerVFyAA0cH0VXEfU_So5RESRTa0A3Kit9TransformVcfu_33_00c2e038d769be1530659e2383c6619cAmJTf3nnnpk_nTf1cn_n(v130);
      swift_bridgeObjectRelease();
LABEL_148:
      v159 = *(_QWORD **)a7;
      v160 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)a7 = v159;
      if ((v160 & 1) == 0)
      {
        v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v159[2] + 1, 1, v159);
        *(_QWORD *)a7 = v159;
      }
      v162 = v159[2];
      v161 = v159[3];
      if (v162 >= v161 >> 1)
      {
        v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v161 > 1), v162 + 1, 1, v159);
        *(_QWORD *)a7 = v159;
      }
      v159[2] = v162 + 1;
      v159[v162 + 4] = v131;
      RESkeletalPoseComponentGetPoseName();
      v163 = String.init(cString:)();
      v165 = v164;
      v166 = *(_QWORD **)a8;
      v167 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)a8 = v166;
      if ((v167 & 1) == 0)
      {
        v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v166[2] + 1, 1, v166);
        *(_QWORD *)a8 = v166;
      }
      v169 = v166[2];
      v168 = v166[3];
      if (v169 >= v168 >> 1)
      {
        v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v168 > 1), v169 + 1, 1, v166);
        *(_QWORD *)a8 = v166;
      }
      ++v96;
      v166[2] = v169 + 1;
      v170 = &v166[2 * v169];
      v170[4] = v163;
      v170[5] = v165;
      a2 = v199;
      v16 = v195;
      if (v96 == v199)
        goto LABEL_157;
    }
    JointCount = RESkeletalPoseDefinitionAssetGetJointCount();
    if (JointCount < 0)
      goto LABEL_185;
    v110 = JointCount;
    if (JointCount)
    {
      *(_QWORD *)&v203 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, JointCount, 0);
      v111 = 0;
      v112 = v203;
      do
      {
        RESkeletalPoseDefinitionAssetGetJointName();
        v113 = String.init(cString:)();
        v115 = v114;
        *(_QWORD *)&v203 = v112;
        v117 = *(_QWORD *)(v112 + 16);
        v116 = *(_QWORD *)(v112 + 24);
        v118 = v117 + 1;
        if (v117 >= v116 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v116 > 1, v117 + 1, 1);
          v112 = v203;
        }
        ++v111;
        *(_QWORD *)(v112 + 16) = v118;
        v119 = v112 + 16 * v117;
        *(_QWORD *)(v119 + 32) = v113;
        *(_QWORD *)(v119 + 40) = v115;
      }
      while (v110 != v111);
    }
    else
    {
      v132 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v118 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v112 = MEMORY[0x24BEE4AF8];
      if (!v118)
      {
LABEL_129:
        v138 = v132[2];
        v139 = *a4;
        v140 = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v139;
        if ((v140 & 1) == 0)
        {
          v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v139[2] + 1, 1, v139);
          *a4 = v139;
        }
        v142 = v139[2];
        v141 = v139[3];
        if (v142 >= v141 >> 1)
          v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v141 > 1), v142 + 1, 1, v139);
        v139[2] = v142 + 1;
        v143 = &v139[3 * v142];
        v143[4] = v138;
        v143[5] = v132 + 4;
        v143[6] = 0;
        *a4 = v139;
        v144 = *a5;
        v145 = swift_isUniquelyReferenced_nonNull_native();
        *a5 = v144;
        if ((v145 & 1) == 0)
        {
          v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v144[2] + 1, 1, v144);
          *a5 = v144;
        }
        v147 = v144[2];
        v146 = v144[3];
        if (v147 >= v146 >> 1)
        {
          v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v146 > 1), v147 + 1, 1, v144);
          *a5 = v144;
        }
        v144[2] = v147 + 1;
        v144[v147 + 4] = v132;
        v148 = *a6;
        v149 = swift_isUniquelyReferenced_nonNull_native();
        *a6 = v148;
        if ((v149 & 1) == 0)
        {
          v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v148[2] + 1, 1, v148);
          *a6 = v148;
        }
        v151 = v148[2];
        v150 = v148[3];
        if (v151 >= v150 >> 1)
        {
          v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v150 > 1), v151 + 1, 1, v148);
          *a6 = v148;
        }
        v148[2] = v151 + 1;
        v148[v151 + 4] = v112;
        if (v110)
        {
          v202 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110, 0);
          v152 = 0;
          v131 = v202;
          do
          {
            v204 = 0u;
            v205 = 0u;
            v203 = 0u;
            RESkeletalPoseDefinitionAssetGetJointDefaultTransform();
            v153 = 0u;
            v154 = 0u;
            v155 = 0u;
            v157 = *(_QWORD *)(v202 + 16);
            v156 = *(_QWORD *)(v202 + 24);
            if (v157 >= v156 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v156 > 1, v157 + 1, 1);
              v155 = 0u;
              v154 = 0u;
              v153 = 0u;
            }
            ++v152;
            *(_QWORD *)(v202 + 16) = v157 + 1;
            v158 = (_OWORD *)(v202 + 48 * v157);
            v158[2] = v153;
            v158[3] = v154;
            v158[4] = v155;
          }
          while (v110 != v152);
        }
        else
        {
          v131 = MEMORY[0x24BEE4AF8];
        }
        goto LABEL_148;
      }
    }
    v194 = v15;
    swift_bridgeObjectRetain();
    v133 = v112 + 40;
    v132 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v134 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      v135 = strdup(v134);
      swift_release();
      swift_bridgeObjectRelease();
      if (v135)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v132 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v132[2] + 1, 1, v132);
        v137 = v132[2];
        v136 = v132[3];
        if (v137 >= v136 >> 1)
          v132 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v136 > 1), v137 + 1, 1, v132);
        v132[2] = v137 + 1;
        v132[v137 + 4] = v135;
      }
      v133 += 16;
      --v118;
    }
    while (v118);
    swift_bridgeObjectRelease();
    v15 = v194;
    goto LABEL_129;
  }
  if (a10 < 0)
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
  }
  if (a10)
  {
    v17 = 0;
    while (1)
    {
      if (v17 == a10)
        goto LABEL_182;
      if (v17 != v16)
        break;
      *(_QWORD *)&v203 = v189;
      *((_QWORD *)&v203 + 1) = v16;
      LOBYTE(v204) = 1;
      *((_QWORD *)&v204 + 1) = v188;
      *(_QWORD *)&v205 = v187;
      *((_QWORD *)&v205 + 1) = v186;
      *(_QWORD *)&v206 = v200;
      v18 = SkeletalPose.jointNames.getter();
      v19 = *a13;
      swift_bridgeObjectRetain();
      v20 = swift_isUniquelyReferenced_nonNull_native();
      *a13 = v19;
      if ((v20 & 1) == 0)
      {
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        *a13 = v19;
      }
      v22 = v19[2];
      v21 = v19[3];
      if (v22 >= v21 >> 1)
      {
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
        *a13 = v19;
      }
      v19[2] = v22 + 1;
      v19[v22 + 4] = v18;
      v23 = *(_QWORD *)(v18 + 16);
      if (v23)
      {
        swift_bridgeObjectRetain();
        v24 = v18 + 40;
        v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v26 = (const char *)(String.utf8CString.getter() + 32);
          swift_bridgeObjectRetain();
          v27 = strdup(v26);
          swift_release();
          swift_bridgeObjectRelease();
          if (v27)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
            v29 = v25[2];
            v28 = v25[3];
            if (v29 >= v28 >> 1)
              v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v25);
            v25[2] = v29 + 1;
            v25[v29 + 4] = v27;
          }
          v24 += 16;
          --v23;
        }
        while (v23);
        swift_bridgeObjectRelease();
      }
      else
      {
        v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v41 = v25[2];
      v42 = *a11;
      v43 = swift_isUniquelyReferenced_nonNull_native();
      *a11 = v42;
      if ((v43 & 1) == 0)
      {
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
        *a11 = v42;
      }
      v45 = v42[2];
      v44 = v42[3];
      if (v45 >= v44 >> 1)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v42);
      v42[2] = v45 + 1;
      v46 = &v42[3 * v45];
      v46[4] = v41;
      v46[5] = v25 + 4;
      v46[6] = 0;
      *a11 = v42;
      v47 = *a12;
      v48 = swift_isUniquelyReferenced_nonNull_native();
      *a12 = v47;
      if ((v48 & 1) == 0)
      {
        v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
        *a12 = v47;
      }
      v50 = v47[2];
      v49 = v47[3];
      if (v50 >= v49 >> 1)
      {
        v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v47);
        *a12 = v47;
      }
      v47[2] = v50 + 1;
      v47[v50 + 4] = v25;
      v51 = *a13;
      v52 = swift_isUniquelyReferenced_nonNull_native();
      *a13 = v51;
      if ((v52 & 1) == 0)
      {
        v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
        *a13 = v51;
      }
      v54 = v51[2];
      v53 = v51[3];
      if (v54 >= v53 >> 1)
      {
        v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v51);
        *a13 = v51;
      }
      v51[2] = v54 + 1;
      v51[v54 + 4] = v18;
      v55 = (float32x4_t *)swift_bridgeObjectRetain();
      v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_So13simd_float4x4as5NeverOTB504_s17d55Foundation22SkeletalPosesComponentV28updateInternalPoseF126Namesyys13OpaquePointerVFyAA0cH0VXEfU_So13simd_float4x4a0A3Kit9TransformVcfu0_33_468c2b3721e400eee04f35cd537c1492AmJTf3nnnpk_nTf1cn_n(v55);
      swift_bridgeObjectRelease();
      v56 = *a14;
      v57 = swift_isUniquelyReferenced_nonNull_native();
      *a14 = v56;
      if ((v57 & 1) == 0)
      {
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
        *a14 = v56;
      }
      v16 = v195;
      v59 = v56[2];
      v58 = v56[3];
      v60 = v59 + 1;
      if (v59 >= v58 >> 1)
      {
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v58 > 1), v59 + 1, 1, v56);
        *a14 = v56;
      }
LABEL_5:
      ++v17;
      v56[2] = v60;
      v56[v59 + 4] = v33;
      if (v17 == a10)
        goto LABEL_157;
    }
    ModelSpaceJointCount = RESkeletalPoseDefinitionAssetGetModelSpaceJointCount();
    if (ModelSpaceJointCount < 0)
      goto LABEL_184;
    v31 = ModelSpaceJointCount;
    v193 = v15;
    if (ModelSpaceJointCount)
    {
      *(_QWORD *)&v203 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, ModelSpaceJointCount, 0);
      v32 = 0;
      v33 = v203;
      do
      {
        RESkeletalPoseDefinitionAssetGetModelSpaceJointName();
        v34 = String.init(cString:)();
        v36 = v35;
        *(_QWORD *)&v203 = v33;
        v38 = *(_QWORD *)(v33 + 16);
        v37 = *(_QWORD *)(v33 + 24);
        v39 = v38 + 1;
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
          v33 = v203;
        }
        ++v32;
        *(_QWORD *)(v33 + 16) = v39;
        v40 = v33 + 16 * v38;
        *(_QWORD *)(v40 + 32) = v34;
        *(_QWORD *)(v40 + 40) = v36;
      }
      while (v31 != v32);
    }
    else
    {
      v61 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v39 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v33 = MEMORY[0x24BEE4AF8];
      if (!v39)
      {
LABEL_56:
        v67 = v61[2];
        v68 = *a11;
        v69 = swift_isUniquelyReferenced_nonNull_native();
        *a11 = v68;
        if ((v69 & 1) == 0)
        {
          v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
          *a11 = v68;
        }
        v71 = v68[2];
        v70 = v68[3];
        if (v71 >= v70 >> 1)
          v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v70 > 1), v71 + 1, 1, v68);
        v15 = v193;
        v68[2] = v71 + 1;
        v72 = &v68[3 * v71];
        v72[4] = v67;
        v72[5] = v61 + 4;
        v72[6] = 0;
        *a11 = v68;
        v73 = *a12;
        v74 = swift_isUniquelyReferenced_nonNull_native();
        *a12 = v73;
        if ((v74 & 1) == 0)
        {
          v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73[2] + 1, 1, v73);
          *a12 = v73;
        }
        v76 = v73[2];
        v75 = v73[3];
        if (v76 >= v75 >> 1)
        {
          v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v75 > 1), v76 + 1, 1, v73);
          *a12 = v73;
        }
        v73[2] = v76 + 1;
        v73[v76 + 4] = v61;
        v77 = *a13;
        swift_bridgeObjectRetain();
        v78 = swift_isUniquelyReferenced_nonNull_native();
        *a13 = v77;
        if ((v78 & 1) == 0)
        {
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
          *a13 = v77;
        }
        v80 = v77[2];
        v79 = v77[3];
        if (v80 >= v79 >> 1)
        {
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v80 + 1, 1, v77);
          *a13 = v77;
        }
        v77[2] = v80 + 1;
        v77[v80 + 4] = v33;
        if (v31)
        {
          v201 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
          v81 = 0;
          v82 = v201;
          do
          {
            v205 = 0u;
            v206 = 0u;
            v203 = 0u;
            v204 = 0u;
            RESkeletalPoseDefinitionAssetGetModelSpaceJointDefaultTransform();
            v83 = 0u;
            v84 = 0u;
            v85 = 0u;
            v86 = 0u;
            v88 = *(_QWORD *)(v201 + 16);
            v87 = *(_QWORD *)(v201 + 24);
            if (v88 >= v87 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
              v86 = 0u;
              v85 = 0u;
              v84 = 0u;
              v83 = 0u;
            }
            ++v81;
            *(_QWORD *)(v201 + 16) = v88 + 1;
            v89 = (_OWORD *)(v201 + (v88 << 6));
            v89[2] = v83;
            v89[3] = v84;
            v89[4] = v85;
            v89[5] = v86;
          }
          while (v31 != v81);
        }
        else
        {
          v82 = MEMORY[0x24BEE4AF8];
        }
        v90 = *a14;
        v91 = swift_isUniquelyReferenced_nonNull_native();
        *a14 = v90;
        if ((v91 & 1) == 0)
        {
          v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90[2] + 1, 1, v90);
          *a14 = v90;
        }
        v93 = v90[2];
        v92 = v90[3];
        if (v93 >= v92 >> 1)
        {
          v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v92 > 1), v93 + 1, 1, v90);
          *a14 = v90;
        }
        v90[2] = v93 + 1;
        v90[v93 + 4] = v82;
        v56 = *a13;
        v94 = swift_isUniquelyReferenced_nonNull_native();
        *a13 = v56;
        if ((v94 & 1) == 0)
        {
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
          *a13 = v56;
        }
        v16 = v195;
        v59 = v56[2];
        v95 = v56[3];
        v60 = v59 + 1;
        if (v59 >= v95 >> 1)
        {
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v95 > 1), v59 + 1, 1, v56);
          *a13 = v56;
        }
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRetain();
    v62 = v33 + 40;
    v61 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v63 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      v64 = strdup(v63);
      swift_release();
      swift_bridgeObjectRelease();
      if (v64)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        v66 = v61[2];
        v65 = v61[3];
        if (v66 >= v65 >> 1)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v66 + 1, 1, v61);
        v61[2] = v66 + 1;
        v61[v66 + 4] = v64;
      }
      v62 += 16;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
LABEL_157:
  PoseMeshMapCount = RESkeletalPoseDefinitionAssetGetPoseMeshMapCountEx();
  if (PoseMeshMapCount < 0)
  {
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  if (PoseMeshMapCount)
  {
    v172 = 0;
    v173 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v196 = PoseMeshMapCount;
    do
    {
      LOBYTE(v203) = 0;
      DWORD1(v205) = 0;
      v204 = 0uLL;
      *((_QWORD *)&v203 + 1) = 0;
      LOBYTE(v205) = 0;
      RESkeletalPoseDefinitionAssetGetPoseMeshMapEx();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v173[2] + 1, 1, v173);
      v175 = v173[2];
      v174 = v173[3];
      if (v175 >= v174 >> 1)
        v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v174 > 1), v175 + 1, 1, v173);
      v173[2] = v175 + 1;
      v176 = &v173[5 * v175];
      *((_BYTE *)v176 + 32) = 0;
      ++v172;
      v176[5] = 0;
      *((_OWORD *)v176 + 3) = 0uLL;
      *((_BYTE *)v176 + 64) = 0;
      *((_DWORD *)v176 + 17) = 0;
    }
    while (v196 != v172);
  }
  v177 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v177, (uint64_t)&v203);
  v178 = *((_QWORD *)&v204 + 1);
  v179 = v205;
  __swift_project_boxed_opaque_existential_1(&v203, *((uint64_t *)&v204 + 1));
  (*(void (**)(uint64_t, uint64_t))(v179 + 32))(v178, v179);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v203);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  RESkeletalPoseDefinitionAssetCreateAssetWithDefinitionsEx();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  RESkeletalPoseComponentSetSkeletalPoseDefinition();
  result = RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  if (v199 < 0)
    goto LABEL_187;
  if (!v199)
  {
    v183 = a14;
    if ((a10 & 0x8000000000000000) == 0)
      goto LABEL_172;
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }
  v181 = 0;
  v182 = 0;
  v183 = a14;
  do
  {
    if (v182 >= *(_QWORD *)(*(_QWORD *)a7 + 16))
      goto LABEL_179;
    RESkeletalPoseComponentSetJointTransforms();
    if (v182 >= *(_QWORD *)(*(_QWORD *)a8 + 16))
      goto LABEL_180;
    String.utf8CString.getter();
    RESkeletalPoseComponentSetPoseName();
    result = swift_release();
    v181 += 16;
    ++v182;
  }
  while (v199 != v182);
  if (a10 < 0)
    goto LABEL_178;
LABEL_172:
  if (a10)
  {
    v184 = 0;
    while (v184 < (*v183)[2])
    {
      v185 = v184 + 1;
      result = RESkeletalPoseComponentSetModelSpaceJointTransforms();
      v184 = v185;
      if (a10 == v185)
        return result;
    }
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  return result;
}

uint64_t specialized static SkeletalPosesComponent.getCoreAsset(_:)()
{
  uint64_t SkeletalPoseDefinition;
  uint64_t AssetForMesh;
  uint64_t Entity;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Component;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  SkeletalPoseDefinition = RESkeletalPoseComponentGetSkeletalPoseDefinition();
  if (SkeletalPoseDefinition)
    return SkeletalPoseDefinition;
  Entity = REComponentGetEntity();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_8;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v4 = specialized static Entity.entityInfoType(_:)();
    if (v4)
    {
      v5 = (*(uint64_t (**)(void))(v4 + 232))();
      v6 = *(_QWORD *)(v5 + 16);
      swift_retain();
      MEMORY[0x22076D160](v6, 0);
      *(_QWORD *)(v5 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v5);
      swift_release();
    }
    else
    {
      makeEntity(for:)(Entity);
    }
LABEL_8:
    Component = REEntityGetComponent();
    if (Component)
    {
      v11[0] = Component;
      static ModelComponent.__fromCore(_:borrowStrongReference:)(v11, 0, &v12);
      if (*(_QWORD *)(v12 + 16))
      {
        type metadata accessor for __ServiceLocator();
        v8 = static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v8, (uint64_t)&v12);
        swift_release();
        v9 = v13;
        v10 = v14;
        __swift_project_boxed_opaque_existential_1(&v12, v13);
        (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
        AssetForMesh = RESkeletalPoseDefinitionAssetCreateAssetForMesh();
        RESkeletalPoseComponentSetSkeletalPoseDefinition();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return AssetForMesh;
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_release();
    return 0;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for SkeletalPosesComponent()
{
  return &type metadata for SkeletalPosesComponent;
}

uint64_t TimebaseService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TimebaseService()
{
  return objc_opt_self();
}

uint64_t Scene.performQuery(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = v2;
  return Scene.performQuery(_:rootEntity:)(v5, 0, a2);
}

uint64_t Scene.performQuery(_:rootEntity:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t *AllEntitiesArray;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  Swift::Int v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  NSString *v33;
  Class v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD *);
  _QWORD aBlock[3];
  void *v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[4];

  v43 = (uint64_t (*)(_QWORD *))*a1;
  v5 = a1[6];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = MEMORY[0x24BEE4AF8];
  v7 = (unint64_t *)(v6 + 16);
  v42 = a3;
  if (!v5 || !*(_QWORD *)(v5 + 16))
  {
    AllEntitiesArray = (uint64_t *)RESceneGetAllEntitiesArray();
    if (a2)
    {
      v11 = v43;
      if (!v9)
        goto LABEL_48;
    }
    else
    {
      v11 = v43;
      if (!v9)
        goto LABEL_48;
    }
    v12 = 8 * v9;
    while (1)
    {
      v13 = *AllEntitiesArray;
      if (REEntityIsNonHiddenAndInHierarchy())
        break;
LABEL_11:
      ++AllEntitiesArray;
      v12 -= 8;
      if (!v12)
        goto LABEL_48;
    }
    v14 = MEMORY[0x24BEE27D0];
    v45 = (void *)MEMORY[0x24BEE27D0];
    aBlock[0] = v13;
    outlined init with copy of Any((uint64_t)aBlock, (uint64_t)v49);
    swift_dynamicCast();
    v15 = v48;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v16 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_52;
      }
      if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
        swift_once();
      swift_beginAccess();
      if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
        || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
            (v17 & 1) == 0))
      {
        swift_endAccess();
        v18 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v49[0] = static SceneManager.customComponentTypeObjectIdToHandles;
        static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
        static SceneManager.customComponentTypeObjectIdToHandles = v49[0];
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v21 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8) || !v21)
          {
            result = swift_retain();
          }
          else
          {
            v22 = *v21;
            v23 = String.init(utf8String:)();
            if (v24)
              v25 = v23;
            else
              v25 = 0;
            if (v24)
              v26 = v24;
            else
              v26 = 0xE000000000000000;
            v21 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v22 == 42, v25, v26);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v21;
          }
          if (!v21)
          {
            __break(1u);
            return result;
          }
          swift_retain();
          v28 = String.init(utf8String:)();
          v30 = v29;
          swift_release();
          v31 = v30 ? v28 : 0;
          v32 = v30 ? v30 : 0xE000000000000000;
          v33 = (NSString *)MEMORY[0x220768C3C](v31, v32);
          swift_bridgeObjectRelease();
          v34 = NSClassFromString(v33);

          swift_release();
          v11 = v43;
          if (v34)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v35 = swift_dynamicCastMetatype();
            if (v35)
            {
              v36 = (*(uint64_t (**)(void))(v35 + 232))();
              v37 = *(_QWORD *)(v36 + 16);
              swift_retain();
              MEMORY[0x22076D160](v37, 0);
              *(_QWORD *)(v36 + 16) = v15;
              MEMORY[0x22076D160](v15, v36);
              swift_release();
LABEL_45:
              aBlock[0] = v36;
              swift_retain();
              swift_retain();
              swift_retain();
              v38 = v11(aBlock);
              swift_release();
              swift_release();
              swift_release();
              if ((v38 & 1) != 0)
              {
                v39 = swift_retain();
                MEMORY[0x220768F0C](v39);
                if (*(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              swift_release();
              goto LABEL_11;
            }
          }
        }
      }
      v16 = makeEntity(for:)(v15);
    }
    v36 = v16;
    goto LABEL_45;
  }
  v46 = partial apply for closure #1 in Scene.performQuery(_:rootEntity:);
  v47 = v6;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v45 = &block_descriptor_12;
  v8 = _Block_copy(aBlock);
  swift_retain_n();
  swift_release();
  REQueryEvaluateEntityQueryWithRootEntity();
  _Block_release(v8);
  swift_release();
LABEL_48:
  swift_beginAccess();
  v40 = *v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SequenceBox<[Entity]>);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v40;
  if (v40 >> 62)
  {
LABEL_52:
    swift_bridgeObjectRetain_n();
    v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    result = swift_release();
  }
  *(_QWORD *)v42 = v14;
  *(_QWORD *)(v42 + 8) = v41;
  *(_BYTE *)(v42 + 16) = 0;
  return result;
}

uint64_t closure #1 in Scene.performQuery(_:rootEntity:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      v6 = (*(uint64_t (**)(void))(v5 + 232))();
      v7 = *(_QWORD *)(v6 + 16);
      swift_retain();
      MEMORY[0x22076D160](v7, 0);
      *(_QWORD *)(v6 + 16) = a1;
      MEMORY[0x22076D160](a1, v6);
      swift_release();
    }
    else
    {
      makeEntity(for:)(a1);
    }
  }
  swift_beginAccess();
  v8 = swift_retain();
  MEMORY[0x220768F0C](v8);
  if (*(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return swift_release();
}

uint64_t Scene.performQuery<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[7];

  v6 = swift_allocObject();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 + 16) = static Array._allocateUninitialized(_:)();
  v9 = type metadata accessor for Query(0, a1, a2, v8);
  if (Query.internalQuery.getter(v9))
  {
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = v6;
    aBlock[4] = partial apply for closure #1 in Scene.performQuery<A>(_:);
    aBlock[5] = v10;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_9;
    v11 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    REQueryEvaluateEntityQuery();
    _Block_release(v11);
    swift_release();
  }
  swift_beginAccess();
  aBlock[6] = *(_QWORD *)(v6 + 16);
  v12 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x220772E3C](MEMORY[0x24BEE12C8], v12);
  v13 = AnySequence.init<A>(_:)();
  v14 = swift_bridgeObjectRetain();
  v15 = MEMORY[0x220768FCC](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  QueryResult.init(_:count:)(v13, v15, 0, a3);
  return swift_release();
}

uint64_t closure #1 in Scene.performQuery<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27[3];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v26 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v25 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v25 - v17;
  result = REIsEntityHidden();
  if ((result & 1) == 0)
  {
    v25[0] = v9;
    v20 = (id)REEntityGetSwiftObject();
    v25[1] = a2;
    if (v20)
    {
      type metadata accessor for Entity();
      v21 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
      {
        __break(1u);
        return result;
      }
      v23 = specialized static Entity.entityInfoType(_:)();
      if (v23)
      {
        v22 = (*(uint64_t (**)(void))(v23 + 232))();
        v24 = *(_QWORD *)(v22 + 16);
        swift_retain();
        MEMORY[0x22076D160](v24, 0);
        *(_QWORD *)(v22 + 16) = a1;
        MEMORY[0x22076D160](a1, v22);
        swift_release();
LABEL_8:
        v27[0] = v22;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 24))(v27, a3, a4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
        {
          swift_release();
          return (*(uint64_t (**)(char *, _QWORD))(v26 + 8))(v11, v25[0]);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v11, AssociatedTypeWitness);
          (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, AssociatedTypeWitness);
          swift_beginAccess();
          type metadata accessor for Array();
          Array.append(_:)();
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, AssociatedTypeWitness);
        }
      }
      v21 = makeEntity(for:)(a1);
    }
    v22 = v21;
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = REIsEntityHidden();
  if ((result & 1) == 0)
  {
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
      {
        __break(1u);
        return result;
      }
      v9 = specialized static Entity.entityInfoType(_:)();
      if (v9)
      {
        v10 = (*(uint64_t (**)(void))(v9 + 232))();
        v11 = *(_QWORD *)(v10 + 16);
        swift_retain();
        MEMORY[0x22076D160](v11, 0);
        *(_QWORD *)(v10 + 16) = a1;
        MEMORY[0x22076D160](a1, v10);
        swift_release();
      }
      else
      {
        makeEntity(for:)(a1);
      }
    }
    type metadata accessor for QuerySelectors.ComponentQueryResult(0, a3, a4, v8);
    v12 = swift_retain();
    QuerySelectors.ComponentQueryResult.__allocating_init(entity:)(v12);
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t Scene.performQuery<A>(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 aBlock;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v8 = *((_QWORD *)a1 + 6);
  v9 = swift_allocObject();
  v11 = type metadata accessor for QuerySelectors.ComponentQueryResult(0, a2, a3, v10);
  v26 = a1[1];
  v27 = *a1;
  v25 = a1[2];
  *(_QWORD *)(v9 + 16) = static Array._allocateUninitialized(_:)();
  aBlock = v27;
  v30 = v26;
  v31 = v25;
  v32 = v8;
  v13 = type metadata accessor for QuerySelectors.ComponentTypeSelector(255, a2, a3, v12);
  v14 = MEMORY[0x220772E3C](&protocol conformance descriptor for QuerySelectors.ComponentTypeSelector<A>, v13);
  v16 = type metadata accessor for Query(0, v13, v14, v15);
  if (!Query.internalQuery.getter(v16))
    goto LABEL_5;
  v28 = a4;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = v9;
  swift_retain();
  v18 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v18, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  if (SceneManager.componentTypeToComponentClass(_:)(a2, a3)
    || (static Component.registerComponent()(a2, a3),
        (result = SceneManager.componentTypeToComponentClass(_:)(a2, a3)) != 0))
  {
    *(_QWORD *)&v31 = partial apply for closure #1 in Scene.performQuery<A>(_:);
    *((_QWORD *)&v31 + 1) = v17;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v30 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *((_QWORD *)&v30 + 1) = &block_descriptor_18_0;
    v20 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    REQueryEvaluateComponentQuery();
    swift_release();
    swift_release();
    _Block_release(v20);
    a4 = v28;
LABEL_5:
    swift_beginAccess();
    v21 = type metadata accessor for Array();
    swift_bridgeObjectRetain();
    MEMORY[0x220772E3C](MEMORY[0x24BEE12C8], v21);
    v22 = AnySequence.init<A>(_:)();
    v23 = swift_bridgeObjectRetain();
    v24 = MEMORY[0x220768FCC](v23, v11);
    swift_bridgeObjectRelease();
    QueryResult.init(_:count:)(v22, v24, 0, a4);
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_21BB9FCCC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Scene.performQuery(_:rootEntity:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Scene.performQuery(_:rootEntity:)(a1, v1);
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in Scene.performQuery<A>(_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in Scene.performQuery<A>(_:)(a1, v1[4], v1[2], v1[3]);
}

{
  uint64_t *v1;

  return closure #1 in Scene.performQuery<A>(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21BB9FD1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t key path setter for __RKEntityTriggerGroup.triggers : __RKEntityTriggerGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityTriggerGroup.triggers.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

unint64_t __RKEntityTriggerGroup.__allocating_init(triggers:)(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = swift_allocObject();
  v3 = specialized __RKEntityTriggerGroup.init(triggers:)(a1, v2);
  swift_release();
  return v3;
}

unint64_t __RKEntityTriggerGroup.init(triggers:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  v2 = specialized __RKEntityTriggerGroup.init(triggers:)(a1, v1);
  swift_release();
  return v2;
}

uint64_t __RKEntityTriggerGroup.matches(with:)(uint64_t a1)
{
  uint64_t v1;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;

  v18 = 0;
  v19 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  swift_beginAccess();
  v7 = *(_QWORD *)(v1 + 24);
  if (v7 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v8 = result;
    if (result)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v18 = 91;
    v19 = 0xE100000000000000;
    v17 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v18);
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_18;
LABEL_3:
  if ((v7 & 0xC000000000000001) != 0)
    goto LABEL_23;
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(_QWORD *)(v7 + 32);
    swift_retain();
    while (1)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 184))(a1) & 1) != 0)
      {
LABEL_7:
        swift_bridgeObjectRelease();
        v18 = 91;
        v19 = 0xE100000000000000;
        v11 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v11, &v18);
        swift_bridgeObjectRelease();
        swift_release();
        return 1;
      }
      swift_release();
      if (v8 == 1)
        goto LABEL_18;
      v12 = 5;
      while (1)
      {
        v13 = v12 - 4;
        if ((v7 & 0xC000000000000001) != 0)
        {
          v14 = MEMORY[0x220769770](v12 - 4, v7);
          v15 = __OFADD__(v13, 1);
          v16 = v12 - 3;
          if (v15)
            goto LABEL_19;
          goto LABEL_16;
        }
        if (v13 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
          break;
        v14 = *(_QWORD *)(v7 + 8 * v12);
        swift_retain();
        v15 = __OFADD__(v13, 1);
        v16 = v12 - 3;
        if (v15)
        {
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_16:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 184))(a1) & 1) != 0)
          goto LABEL_7;
        swift_release();
        ++v12;
        if (v16 == v8)
          goto LABEL_18;
      }
      __break(1u);
LABEL_23:
      v10 = MEMORY[0x220769770](0, v7);
    }
  }
  __break(1u);
  return result;
}

unint64_t __RKEntityTriggerGroup.description.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;

  v1 = (uint64_t *)(v0 + 24);
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 >> 62)
    goto LABEL_17;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3 >= 1)
  {
    while (1)
    {
      v4._countAndFlagsBits = 5966090;
      v4._object = (void *)0xE300000000000000;
      String.append(_:)(v4);
      v5 = *v1;
      if ((*v1 & 0xC000000000000001) != 0)
        break;
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v6 = *(_QWORD *)(v5 + 32);
        v7 = swift_retain();
        goto LABEL_6;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v3 < 1)
        goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x220769770](0, v5);
    v7 = swift_bridgeObjectRelease();
LABEL_6:
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 192))(v7);
    v10 = v9;
    swift_release();
    v11._countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12 = v3 - 1;
    if (v3 != 1)
    {
      v16 = 0;
      do
      {
        v17._countAndFlagsBits = 8236;
        v17._object = (void *)0xE200000000000000;
        String.append(_:)(v17);
        v18 = *v1;
        if ((*v1 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v19 = MEMORY[0x220769770](v16 + 1, v18);
          v20 = swift_bridgeObjectRelease();
        }
        else
        {
          if ((unint64_t)(v16 + 1) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_16;
          v19 = *(_QWORD *)(v18 + 8 * v16 + 40);
          v20 = swift_retain();
        }
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 192))(v20);
        v23 = v22;
        swift_release();
        v24._countAndFlagsBits = v21;
        v24._object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        ++v16;
      }
      while (v12 != v16);
    }
    v13._countAndFlagsBits = 93;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
  }
LABEL_8:
  v14._countAndFlagsBits = 665949;
  v14._object = (void *)0xE300000000000000;
  String.append(_:)(v14);
  return 0xD00000000000001ALL;
}

uint64_t __RKEntityTriggerGroup.copy(with:)@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  objc_super v14;
  unint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v3 = v1[3];
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    if (!(MEMORY[0x24BEE4AF8] >> 62))
      goto LABEL_14;
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v7 = (void *)MEMORY[0x220769770](i, v3);
      }
      else
      {
        v7 = *(void **)(v3 + 8 * i + 32);
        swift_retain();
      }
      objc_msgSend(v7, sel_copyWithZone_, 0);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for __RKEntityTrigger();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v8 = swift_retain();
        MEMORY[0x220768F0C](v8);
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
    v9 = v15;
    if (!(v15 >> 62))
    {
LABEL_14:
      if (*(uint64_t *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
      {
LABEL_15:
        v10 = type metadata accessor for __RKEntityTriggerGroup();
        v11 = swift_allocObject();
        v12 = specialized __RKEntityTriggerGroup.init(triggers:)(v9, v11);
        result = swift_release();
        a1[3] = v10;
        *a1 = v12;
        return result;
      }
      goto LABEL_19;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13 >= 1)
      goto LABEL_15;
LABEL_19:
    swift_bridgeObjectRelease();
    v14.receiver = v1;
    v14.super_class = (Class)type metadata accessor for __RKEntityTriggerGroup();
    objc_msgSendSuper2(&v14, sel_copyWithZone_, 0);
    _bridgeAnyObjectToAny(_:)();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityTriggerGroup.clone(matching:newEntity:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v16 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_20:
    result = swift_bridgeObjectRelease();
    a2 = MEMORY[0x24BEE4AF8];
    if (!(MEMORY[0x24BEE4AF8] >> 62))
      goto LABEL_14;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6)
    goto LABEL_20;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v8 = MEMORY[0x220769770](i, v5);
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 8 * i + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 200))(a1, a2))
    {
      v9 = swift_retain();
      MEMORY[0x220768F0C](v9);
      if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
  }
  result = swift_bridgeObjectRelease();
  a2 = v16;
  if (!(v16 >> 62))
  {
LABEL_14:
    v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11 == 1)
      goto LABEL_15;
LABEL_23:
    if (v11 < 2)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    else
    {
      type metadata accessor for __RKEntityTriggerGroup();
      v14 = swift_allocObject();
      v15 = swift_bridgeObjectRetain();
      v12 = specialized __RKEntityTriggerGroup.init(triggers:)(v15, v14);
      swift_bridgeObjectRelease();
      swift_release();
    }
    return v12;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v13 != 1)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_15:
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_28:
    v12 = MEMORY[0x220769770](0, a2);
    goto LABEL_18;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(_QWORD *)(a2 + 32);
    swift_retain();
LABEL_18:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

void __RKEntityTriggerGroup.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityTriggerGroup.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityTriggerGroup.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityTriggerGroup.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t specialized __RKEntityTriggerGroup.init(triggers:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;

  v2 = a2;
  v3 = a1;
  *(_QWORD *)(a2 + 24) = a1;
  v4 = (unint64_t *)(a2 + 24);
  if (a1 >> 62)
    goto LABEL_84;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_85:
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  while (1)
  {
    if ((v3 & 0xC000000000000001) == 0)
    {
      v34 = v2;
      v10 = 0;
      v2 = 0;
      v11 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      do
      {
        if (v2 <= v11)
          v12 = v11;
        else
          v12 = v2;
        while (1)
        {
          if (v12 == v2)
            goto LABEL_79;
          v13 = v2 + 1;
          type metadata accessor for __RKEntityTriggerGroup();
          if (swift_dynamicCastClass())
            break;
          ++v2;
          if (v5 == v13)
          {
            swift_bridgeObjectRelease();
            v2 = v34;
            if ((v10 & 1) != 0)
              goto LABEL_25;
            goto LABEL_86;
          }
        }
        v10 = 1;
      }
      while (v5 - 1 != v2++);
      swift_bridgeObjectRelease();
      v2 = v34;
LABEL_25:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_21BE411F0;
      *(_QWORD *)(v15 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v15 + 32) = 0xD000000000000042;
      *(_QWORD *)(v15 + 40) = 0x800000021BE89830;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v16 = *v4;
      if (*v4 >> 62)
        goto LABEL_88;
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v17)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        if (*v4 >> 62)
          goto LABEL_98;
        v3 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        while (1)
        {
LABEL_36:
          if (*v4 >> 62)
          {
            swift_bridgeObjectRetain();
            v19 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v19 >= v3)
            {
LABEL_38:
              specialized Array.replaceSubrange<A>(_:with:)(v3, v19);
              swift_endAccess();
              goto LABEL_86;
            }
          }
          else
          {
            v19 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v19 >= v3)
              goto LABEL_38;
          }
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          swift_bridgeObjectRetain();
          v3 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
      }
LABEL_27:
      v3 = 0;
      while (1)
      {
        if ((v16 & 0xC000000000000001) != 0)
          MEMORY[0x220769770](v3, v16);
        else
          swift_retain();
        type metadata accessor for __RKEntityTriggerGroup();
        if (swift_dynamicCastClass())
          break;
        swift_release();
        v18 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_80;
        ++v3;
        if (v18 == v17)
          goto LABEL_34;
      }
      swift_bridgeObjectRelease();
      swift_release();
      v20 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
      }
      else if (!(*v4 >> 62))
      {
        if (v20 == *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_36;
LABEL_42:
        v21 = v3 + 5;
        while (1)
        {
          v16 = v21 - 4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            MEMORY[0x220769770](v21 - 4);
          }
          else
          {
            if ((v16 & 0x8000000000000000) != 0)
              goto LABEL_81;
            if (v16 >= *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_82;
            swift_retain();
          }
          v22 = swift_dynamicCastClass();
          swift_release();
          if (v22)
            goto LABEL_68;
          if (v16 != v3)
            break;
LABEL_67:
          if (__OFADD__(v3++, 1))
          {
            __break(1u);
LABEL_88:
            swift_bridgeObjectRetain();
            v17 = _CocoaArrayWrapper.endIndex.getter();
            if (!v17)
              goto LABEL_34;
            goto LABEL_27;
          }
LABEL_68:
          v30 = v21 - 3;
          if (__OFADD__(v16, 1))
            goto LABEL_83;
          if (*v4 >> 62)
          {
            swift_bridgeObjectRetain();
            v31 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v31 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          ++v21;
          if (v30 == v31)
            goto LABEL_36;
        }
        v23 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          v24 = MEMORY[0x220769770](v3, *v4);
          v23 = *v4;
          if ((*v4 & 0xC000000000000001) == 0)
          {
LABEL_53:
            if ((v16 & 0x8000000000000000) != 0)
              goto LABEL_94;
            if (v16 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_95;
            v25 = *(_QWORD *)(v23 + 8 * v21);
            swift_retain();
            goto LABEL_56;
          }
        }
        else
        {
          if (v3 < 0)
            goto LABEL_92;
          if ((unint64_t)v3 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_93;
          v24 = *(_QWORD *)(v23 + 8 * v3 + 32);
          swift_retain();
          if ((v23 & 0xC000000000000001) == 0)
            goto LABEL_53;
        }
        v25 = MEMORY[0x220769770](v21 - 4, v23);
        v23 = *v4;
LABEL_56:
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *v4 = v23;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v23 & 0x8000000000000000) != 0
          || (v23 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v23);
        }
        *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x20) = v25;
        swift_release();
        specialized Array._endMutation()();
        v27 = *v4;
        v28 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *v4 = v27;
        if (!v28 || (v27 & 0x8000000000000000) != 0 || (v27 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v27);
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_96;
        if (v16 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_97;
        *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 8 * v21) = v24;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_67;
      }
      swift_bridgeObjectRetain();
      v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v20 == v33)
        goto LABEL_36;
      goto LABEL_42;
    }
    v6 = 0;
    v7 = 0;
LABEL_5:
    MEMORY[0x220769770](v7, v3);
    v8 = v7 + 1;
    if (!__OFADD__(v7, 1))
      break;
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    swift_retain();
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5)
      goto LABEL_85;
  }
  type metadata accessor for __RKEntityTriggerGroup();
  v9 = swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (v9)
  {
    v6 = 1;
    if (v8 == v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    ++v7;
    goto LABEL_5;
  }
  ++v7;
  if (v8 != v5)
    goto LABEL_5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    goto LABEL_25;
LABEL_86:
  *(_WORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 18) = 0;
  return v2;
}

uint64_t type metadata accessor for __RKEntityTriggerGroup()
{
  return objc_opt_self();
}

uint64_t sub_21BBA0FAC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for __RKEntityTriggerGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityTriggerGroup.triggers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of __RKEntityTriggerGroup.__allocating_init(triggers:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t __RKEntitySwapEntityAction.__allocating_init(targetEntity:newEntity:buildOutAction:buildInAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_QWORD *)(v8 + 112) = a2;
  *(_QWORD *)(v8 + 120) = a3;
  *(_QWORD *)(v8 + 128) = a4;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySwapEntityAction.init(targetEntity:newEntity:buildOutAction:buildInAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_QWORD *)(v4 + 112) = a2;
  *(_QWORD *)(v4 + 120) = a3;
  *(_QWORD *)(v4 + 128) = a4;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySwapEntityAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = *a1;
  v3 = a1[1];
  v23 = StaticString.description.getter();
  v24 = v5;
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v8 = v23;
  v7 = v24;
  v9 = (_QWORD *)(v1 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 104) == 1 && *v9 == 1 && (swift_beginAccess(), *(_BYTE *)(v2 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v10 = *(_QWORD *)(v2 + 96);
    v11 = *(_BYTE *)(v2 + 104);
    *(_QWORD *)(v2 + 96) = 1;
    *(_BYTE *)(v2 + 104) = 1;
    v23 = v10;
    LOBYTE(v24) = v11;
    __RKEntityAction.state.didset((uint64_t)&v23);
    v12 = *(_QWORD *)(v2 + 120);
    v13 = (_QWORD *)swift_allocObject();
    v13[2] = v2;
    v13[3] = v4;
    v13[4] = v3;
    swift_beginAccess();
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v12 + 72) = partial apply for closure #1 in __RKEntitySwapEntityAction.perform(with:);
    *(_QWORD *)(v12 + 80) = v13;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
    v23 = v4;
    v24 = v3;
    __RKEntityHideAction.perform(with:)();
    v15 = swift_allocObject();
    swift_weakInit();
    v16 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = partial apply for closure #2 in __RKEntitySwapEntityAction.perform(with:);
    *(_QWORD *)(v2 + 40) = v15;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
    if (*(_QWORD *)(v2 + 24))
      REEngineGetCurrentTime();
    else
      v17 = CACurrentMediaTime();
    *(double *)(v2 + 176) = v17 + *(float *)(v12 + 144) + *(float *)(*(_QWORD *)(v2 + 128) + 144);
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    v19 = swift_allocObject();
    swift_weakInit();
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v21, (uint64_t)partial apply for closure #3 in __RKEntitySwapEntityAction.perform(with:), v19, &v23);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v23, v2 + 136);
    swift_endAccess();
    v23 = v8;
    v24 = v7;
    v20 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v20, &v23);
    swift_bridgeObjectRelease();
    return 1;
  }
}

uint64_t sub_21BBA134C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RKEntitySwapEntityAction.perform(with:)()
{
  return __RKEntityShowAction.perform(with:)();
}

uint64_t closure #2 in __RKEntitySwapEntityAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  _QWORD v2[4];
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result + 136;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v1, (uint64_t)&v3);
    if (*((_QWORD *)&v4 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v3, (uint64_t)v2);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v2, v2[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for Cancellable?);
    }
    v5 = 0;
    v3 = 0u;
    v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v3, v1);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in __RKEntitySwapEntityAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  double v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 24))
      REEngineGetCurrentTime();
    else
      v2 = CACurrentMediaTime();
    if (*(double *)(v1 + 176) <= v2)
    {
      swift_beginAccess();
      v3 = *(_QWORD *)(v1 + 96);
      v4 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = 2;
      *(_BYTE *)(v1 + 104) = 1;
      v5 = v3;
      v6 = v4;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v5);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntitySwapEntityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_beginAccess();
  v3 = v1[14];
  v4 = v1[15];
  v5 = v1[16];
  v6 = type metadata accessor for __RKEntitySwapEntityAction();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_QWORD *)(v7 + 112) = v3;
  *(_QWORD *)(v7 + 120) = v4;
  *(_QWORD *)(v7 + 128) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  v8 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v8);
  a1[3] = v6;
  *a1 = result;
  return result;
}

uint64_t __RKEntitySwapEntityAction.clone(matching:newEntity:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_beginAccess();
  v3 = v1[2];
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v10 = v1[14];
    v11 = v1[15];
    v12 = v1[16];
    type metadata accessor for __RKEntitySwapEntityAction();
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_QWORD *)(v13 + 112) = v10;
    *(_QWORD *)(v13 + 120) = v11;
    *(_QWORD *)(v13 + 128) = v12;
    swift_retain();
    swift_retain();
    swift_retain();
    v14 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v14);
  }
  else
  {
    v4 = v1[14];
    v5 = v1[15];
    v6 = v1[16];
    type metadata accessor for __RKEntitySwapEntityAction();
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_QWORD *)(v7 + 112) = v4;
    *(_QWORD *)(v7 + 120) = v5;
    *(_QWORD *)(v7 + 128) = v6;
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v8);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v15;
    else
      return 0;
  }
}

void __RKEntitySwapEntityAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntitySwapEntityAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntitySwapEntityAction.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntitySwapEntityAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntitySwapEntityAction.__deallocating_deinit()
{
  __RKEntitySwapEntityAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_21BBA1964()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in __RKEntitySwapEntityAction.perform(with:)()
{
  return closure #2 in __RKEntitySwapEntityAction.perform(with:)();
}

uint64_t partial apply for closure #3 in __RKEntitySwapEntityAction.perform(with:)()
{
  return closure #3 in __RKEntitySwapEntityAction.perform(with:)();
}

uint64_t type metadata accessor for __RKEntitySwapEntityAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntitySwapEntityAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntitySwapEntityAction.__allocating_init(targetEntity:newEntity:buildOutAction:buildInAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 608))();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(_QWORD *)v3 = v5;
  }
  v14 = (uint64_t)&v5[5 * a1 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_20;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v14 + 40);
    v19 = (char *)&v5[5 * a2 + 4];
    if ((char *)(v14 + 40) != v19 || v18 >= &v19[40 * v17])
      memmove(v18, v19, 40 * v17);
    v20 = v5[2];
    v16 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v16)
    {
      v5[2] = v21;
LABEL_20:
      outlined init with copy of __REAssetService(a3, v14);
      return outlined destroy of CollectionOfOne<PhysicsJoint>(a3);
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for __RKEntityAction);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Entity);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unint64_t *v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a4;
    v9 = a3;
    v5 = a2;
    v7 = a1;
    v8 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v25 < v5)
    goto LABEL_31;
LABEL_4:
  v11 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v10 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v13 = v12 + v10;
    if (!__OFADD__(v12, v10))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v8 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 + v10;
  if (__OFADD__(v12, v10))
    goto LABEL_36;
LABEL_8:
  v8 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v8;
  v28 = v9;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  if (v8 >> 62)
    goto LABEL_37;
  v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x22076977C](v12, v16, 1, v8);
  swift_bridgeObjectRelease();
  *v4 = v8;
  v15 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v17 = (_QWORD *)(v15 + 32 + 8 * v7);
  v6(0);
  swift_arrayDestroy();
  if (!v10)
  {
LABEL_28:
    *v17 = v28;
    return specialized Array._endMutation()();
  }
  if (!(v8 >> 62))
  {
    v18 = *(_QWORD *)(v15 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v19 = v26 - v5;
  if (__OFSUB__(v26, v5))
    goto LABEL_40;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = (char *)(v17 + 1);
    v21 = (char *)(v15 + 32 + 8 * v5);
    if (v17 + 1 != (_QWORD *)v21 || v20 >= &v21[8 * v19])
      memmove(v20, v21, 8 * v19);
    if (!(v8 >> 62))
    {
      v22 = *(_QWORD *)(v15 + 16);
      v23 = v22 + v10;
      if (!__OFADD__(v22, v10))
      {
LABEL_27:
        *(_QWORD *)(v15 + 16) = v23;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v23 = v27 + v10;
    if (!__OFADD__(v27, v10))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Entity.availableAnimations.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ServiceLocator;
  uint64_t v4;
  unint64_t v5;
  uint64_t EntryCount;
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  uint64_t EntryAsset;
  uint64_t v11;
  _QWORD *v12;
  uint64_t Name;
  uint64_t TransformQueryResultCount;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t TransformQueryResultAnimationAsset;
  void *ResultAnimationName;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t SkeletalQueryResultCount;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t SkeletalQueryResultAnimationCount;
  uint64_t v30;
  uint64_t v31;
  uint64_t SkeletalQueryResultAnimationClipAsset;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  uint64_t DefaultAnimation;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[3];
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v2 = *(_QWORD *)(v0 + 16);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  ServiceLocator = REEngineGetServiceLocator();
  v4 = MEMORY[0x22076FD58](ServiceLocator);
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v75 = MEMORY[0x24BEE4AF8];
  REAnimationLibraryComponentGetComponentType();
  if (!REEntityGetComponentByClass())
    goto LABEL_49;
  if (!REAnimationLibraryComponentGetAnimationLibraryAsset())
    goto LABEL_48;
  if (!REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset())
    goto LABEL_20;
  EntryCount = REAnimationLibraryDefinitionGetEntryCount();
  v1 = EntryCount;
  if ((v5 & 0xC000000000000000) != 0)
    goto LABEL_100;
LABEL_6:
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(EntryCount, 0);
  specialized Array._endMutation()();
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1)
    {
      for (i = 0; i != v1; ++i)
      {
        EntryAsset = REAnimationLibraryDefinitionGetEntryAsset();
        if (EntryAsset)
        {
          v11 = EntryAsset;
          type metadata accessor for AnimationResource();
          v12 = (_QWORD *)swift_allocObject();
          v12[2] = v11;
          if (REAssetHandleAssetType() == 11)
            REAnimationSceneAssetGetRootTimeline();
          Name = REAnimationAssetGetName();
          if (Name)
            Name = String.init(cString:)();
          else
            v8 = 0xE000000000000000;
          v12[3] = Name;
          v12[4] = v8;
          RERetain();
          v9 = REAssetSetSwiftObject();
          MEMORY[0x220768F0C](v9);
          if (*(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
    }
    RERelease();
    v5 = v75;
LABEL_20:
    v2 = v5 >> 62;
    if (v5 >> 62)
    {
LABEL_96:
      swift_bridgeObjectRetain();
      v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v62)
        goto LABEL_48;
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_48;
    }
    if (REAnimationLibraryComponentCreateQueryAllTransformAnimations())
    {
      TransformQueryResultCount = REAnimationLibraryComponentGetTransformQueryResultCount();
      v1 = TransformQueryResultCount;
      if (v2)
        goto LABEL_104;
      v15 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      v16 = v15 + TransformQueryResultCount;
      if (__OFADD__(v15, v1))
        goto LABEL_106;
LABEL_25:
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v16, 0);
      specialized Array._endMutation()();
      if (v1 < 0)
        goto LABEL_107;
      if (v1)
      {
        for (j = 0; j != v1; ++j)
        {
          TransformQueryResultAnimationAsset = REAnimationLibraryComponentGetTransformQueryResultAnimationAsset();
          ResultAnimationName = (void *)REAnimationLibraryComponentCopyTransformQueryResultAnimationName();
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v22 = v21;

          type metadata accessor for AnimationResource();
          v23 = (_QWORD *)swift_allocObject();
          v23[2] = TransformQueryResultAnimationAsset;
          v23[3] = v20;
          v23[4] = v22;
          RERetain();
          v24 = REAssetSetSwiftObject();
          MEMORY[0x220768F0C](v24);
          if (*(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      RERelease();
    }
    if (!REAnimationLibraryComponentCreateQueryAllSkeletalAnimations())
      goto LABEL_48;
    SkeletalQueryResultCount = REAnimationLibraryComponentGetSkeletalQueryResultCount();
    v2 = SkeletalQueryResultCount;
    if (!(v75 >> 62))
    {
      v26 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = v26 + SkeletalQueryResultCount;
      if (__OFADD__(v26, v2))
        goto LABEL_110;
      goto LABEL_35;
    }
    goto LABEL_108;
  }
  while (1)
  {
    __break(1u);
LABEL_104:
    swift_bridgeObjectRetain();
    v66 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v16 = v66 + v1;
    if (!__OFADD__(v66, v1))
      goto LABEL_25;
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    swift_bridgeObjectRetain();
    v67 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    result = v67 + v2;
    if (__OFADD__(v67, v2))
      break;
LABEL_35:
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(result, 0);
    v5 = (unint64_t)&v75;
    result = specialized Array._endMutation()();
    if (v2 < 0)
      goto LABEL_111;
    if (!v2)
    {
LABEL_47:
      RERelease();
LABEL_48:
      v5 = v75;
LABEL_49:
      if (!(v5 >> 62))
      {
        v38 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_51;
      }
      goto LABEL_94;
    }
    v28 = 0;
    v68 = v2;
    while (v28 != v2)
    {
      SkeletalQueryResultAnimationCount = REAnimationLibraryComponentGetSkeletalQueryResultAnimationCount();
      if (SkeletalQueryResultAnimationCount < 0)
        goto LABEL_93;
      v30 = SkeletalQueryResultAnimationCount;
      if (SkeletalQueryResultAnimationCount)
      {
        v31 = 0;
        do
        {
          SkeletalQueryResultAnimationClipAsset = REAnimationLibraryComponentGetSkeletalQueryResultAnimationClipAsset();
          v33 = (void *)REAnimationLibraryComponentCopySkeletalQueryResultAnimationName();
          v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v1 = v35;

          type metadata accessor for AnimationResource();
          v36 = (_QWORD *)swift_allocObject();
          v36[2] = SkeletalQueryResultAnimationClipAsset;
          v36[3] = v34;
          v36[4] = v1;
          RERetain();
          v37 = REAssetSetSwiftObject();
          MEMORY[0x220768F0C](v37);
          if (*(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          ++v31;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          v5 = (unint64_t)&v75;
          specialized Array._endMutation()();
        }
        while (v30 != v31);
      }
      ++v28;
      v2 = v68;
      if (v28 == v68)
        goto LABEL_47;
    }
    while (1)
    {
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      swift_bridgeObjectRetain();
      v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v38 < 0)
      {
        __break(1u);
        goto LABEL_96;
      }
LABEL_51:
      if (!v38)
        break;
      v39 = 0;
      while (v38 != v39)
      {
        if ((v75 & 0xC000000000000001) != 0)
        {
          MEMORY[0x220769770](v39);
        }
        else
        {
          if (v39 >= *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_91;
          swift_retain();
        }
        AnimationResource.definition.getter(v72);
        swift_release();
        v40 = v73;
        v41 = v74;
        __swift_project_boxed_opaque_existential_1(v72, v73);
        v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
        v44 = v43;
        REAnimationLibraryComponentDefaultGlobalSceneName();
        if (v42 == String.init(cString:)() && v44 == v45)
        {
          swift_bridgeObjectRelease_n();
          outlined init with copy of __REAssetService((uint64_t)v72, (uint64_t)v69);
LABEL_75:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
LABEL_76:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
          return v75;
        }
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with copy of __REAssetService((uint64_t)v72, (uint64_t)v69);
        if ((v47 & 1) != 0)
          goto LABEL_75;
        v48 = v70;
        v2 = v71;
        __swift_project_boxed_opaque_existential_1(v69, v70);
        v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v48, v2);
        v5 = (unint64_t)v50;
        REAnimationLibraryComponentDefaultLocalSubtreeSceneName();
        v51 = String.init(cString:)();
        v1 = (uint64_t)v52;
        if (v49 == v51 && (_QWORD *)v5 == v52)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_75;
        }
        v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
        if ((v53 & 1) != 0)
          goto LABEL_76;
        ++v39;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        if (v38 == v39)
          goto LABEL_68;
      }
      __break(1u);
LABEL_91:
      __break(1u);
    }
LABEL_68:
    DefaultAnimation = REAnimationLibraryComponentCreateDefaultAnimation();
    if (!DefaultAnimation)
      return v75;
    v55 = DefaultAnimation;
    type metadata accessor for AnimationResource();
    v56 = (_QWORD *)swift_allocObject();
    v56[2] = v55;
    if (REAssetHandleAssetType() == 11)
      REAnimationSceneAssetGetRootTimeline();
    v57 = REAnimationAssetGetName();
    if (v57)
      v57 = String.init(cString:)();
    else
      v58 = 0xE000000000000000;
    v56[3] = v57;
    v56[4] = v58;
    RERetain();
    REAssetSetSwiftObject();
    v59 = v56[2];
    result = REAssetHandleAssetType();
    if ((_DWORD)result != 5)
    {
      if ((_DWORD)result != 11)
        goto LABEL_112;
      result = REAnimationSceneAssetGetRootTimeline();
      v59 = result;
      if (!result)
        goto LABEL_112;
    }
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v59;
    if (REAssetHandleAssetType() == 11)
      REAnimationSceneAssetGetRootTimeline();
    v60 = REAnimationAssetGetName();
    if (v60)
      v60 = String.init(cString:)();
    else
      v61 = 0xE000000000000000;
    *(_QWORD *)(v2 + 24) = v60;
    *(_QWORD *)(v2 + 32) = v61;
    RERetain();
    REAssetSetSwiftObject();
    if (!(v75 >> 62)
      || (swift_bridgeObjectRetain(),
          v63 = _CocoaArrayWrapper.endIndex.getter(),
          swift_bridgeObjectRelease(),
          (v63 & 0x8000000000000000) == 0))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, v2, (void (*)(_QWORD))type metadata accessor for AnimationResource);
      swift_release();
      return v75;
    }
    __break(1u);
LABEL_100:
    v64 = _CocoaArrayWrapper.endIndex.getter();
    v65 = __OFADD__(v64, v1);
    EntryCount = v64 + v1;
    if (!v65)
      goto LABEL_6;
    __break(1u);
  }
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
  return result;
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x22076977C](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for __RKEntityTrigger);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for AnimationResource);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for Entity);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for __RKEntityAction);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v16[40 * v15])
      result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[8 * a1 + 32];
    v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14])
      result = (char *)memmove(result, v15, 8 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of CollectionOfOne<PhysicsJoint>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v3)
    goto LABEL_31;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 - v9;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x22076977C](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v6(0);
  swift_arrayDestroy();
  if (!v8)
    return specialized Array._endMutation()();
  if (!(v7 >> 62))
  {
    v15 = *(_QWORD *)(v13 + 16);
    v16 = v15 - v3;
    if (!__OFSUB__(v15, v3))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v16 = v22 - v3;
  if (__OFSUB__(v22, v3))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v17 + 8 * v16)
      memmove((void *)(v13 + 32 + 8 * v5), v17, 8 * v16);
    if (!(v7 >> 62))
    {
      v18 = *(_QWORD *)(v13 + 16);
      v19 = v18 + v8;
      if (!__OFADD__(v18, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v19;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v19 = v23 + v8;
    if (!__OFADD__(v23, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

void one-time initialization function for observers()
{
  static Entity.LoadStatistics.observers = MEMORY[0x24BEE4AF8];
}

uint64_t Entity.LoadStatistics.Observer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t Entity.LoadStatistics.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_start;
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for Entity.LoadStatistics()
{
  return type metadata accessor for Entity.LoadStatistics();
}

uint64_t type metadata accessor for Entity.LoadStatistics()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Entity.LoadStatistics;
  if (!type metadata singleton initialization cache for Entity.LoadStatistics)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for Entity.LoadStatistics()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Entity.LoadStatistics.Observer()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for Entity.LoadStatistics.Observer.Log()
{
  return &type metadata for Entity.LoadStatistics.Observer.Log;
}

uint64_t getEnumTagSinglePayload for Entity.LoadStatistics.AssetType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.LoadStatistics.AssetType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Entity.LoadStatistics.AssetType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for Entity.LoadStatistics.AssetType(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Entity.LoadStatistics.AssetType()
{
  return &type metadata for Entity.LoadStatistics.AssetType;
}

uint64_t one-time initialization function for entityLoadLog(uint64_t a1)
{
  return one-time initialization function for entityLoadLog(a1, static Entity.LoadStatistics.entityLoadLog);
}

uint64_t one-time initialization function for assetLoadLog(uint64_t a1)
{
  return one-time initialization function for entityLoadLog(a1, static Entity.LoadStatistics.assetLoadLog);
}

uint64_t one-time initialization function for entityLoadLog(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

Swift::Void __swiftcall Entity.LoadStatistics.log()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t Strong;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char isEscapingClosureAtFileLocation;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  _QWORD v76[39];
  char v77;
  uint64_t v78;
  uint64_t v79;

  v1 = v0;
  v67 = *v0;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince(_:)();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v8 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type);
  v9 = 0x6E776F6E6B6E55;
  v10 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type + 8);
  v11 = 0xEB00000000656C69;
  if (v10 == 1)
    v9 = 0x467974696C616552;
  else
    v8 = 0;
  if (v10 != 1)
    v11 = 0xE700000000000000;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type + 8))
    v12 = v8;
  else
    v12 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type) & 1;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type + 8))
    v13 = v9;
  else
    v13 = 4477781;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type + 8))
    v14 = v11;
  else
    v14 = 0xE300000000000000;
  v15 = *((_BYTE *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async);
  v68 = (unint64_t)v1;
  v16 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  v17 = *(_QWORD *)((char *)v1
                  + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName
                  + 8);
  v66 = (char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName;
  v76[35] = v7;
  v76[36] = v13;
  v76[37] = v14;
  v76[38] = v12;
  v77 = v15;
  v78 = v16;
  v79 = v17;
  v18 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50910;
  *(_QWORD *)(inited + 32) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v20 = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 72) = v20;
  *(_QWORD *)(inited + 80) = 1701869940;
  v21 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  *(_QWORD *)(inited + 96) = v13;
  *(_QWORD *)(inited + 104) = v18;
  *(_QWORD *)(inited + 120) = v21;
  *(_QWORD *)(inited + 128) = 0x6E6F6973726576;
  v22 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 136) = 0xE700000000000000;
  *(_QWORD *)(inited + 144) = v12;
  *(_QWORD *)(inited + 168) = v22;
  *(_QWORD *)(inited + 176) = 0x636E797361;
  *(_QWORD *)(inited + 184) = 0xE500000000000000;
  v23 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = v15;
  *(_QWORD *)(inited + 216) = v23;
  strcpy((char *)(inited + 224), "functionName");
  *(_QWORD *)(inited + 264) = v21;
  *(_BYTE *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(_QWORD *)(inited + 240) = v16;
  *(_QWORD *)(inited + 248) = v17;
  v64 = v17;
  swift_bridgeObjectRetain_n();
  v65 = v18;
  swift_bridgeObjectRetain();
  v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (one-time initialization token for observers != -1)
    goto LABEL_54;
  while (1)
  {
    v25 = static Entity.LoadStatistics.observers;
    v26 = *(_QWORD *)(static Entity.LoadStatistics.observers + 16);
    if (v26)
    {
      v27 = MEMORY[0x24BEE4AF8];
      v70 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      v28 = 0;
      v29 = v25 + 32;
      do
      {
        if (v28 >= *(_QWORD *)(v25 + 16))
        {
          __break(1u);
          goto LABEL_53;
        }
        outlined init with copy of WeakRef<Entity.LoadStatistics.Observer>(v29, (uint64_t)v69);
        Strong = swift_weakLoadStrong();
        swift_release();
        if (Strong)
        {
          outlined init with take of WeakRef<Entity.LoadStatistics.Observer>((uint64_t)v69, (uint64_t)v76);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
          v27 = v70;
          v32 = *(_QWORD *)(v70 + 16);
          v31 = *(_QWORD *)(v70 + 24);
          if (v32 >= v31 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
            v27 = v70;
          }
          *(_QWORD *)(v27 + 16) = v32 + 1;
          outlined init with take of WeakRef<Entity.LoadStatistics.Observer>((uint64_t)v76, v27 + 8 * v32 + 32);
        }
        else
        {
          outlined destroy of BodyTrackingComponent?((uint64_t)v69, &demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
        }
        ++v28;
        v29 += 8;
      }
      while (v26 != v28);
      swift_bridgeObjectRelease();
      static Entity.LoadStatistics.observers = v70;
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(static Entity.LoadStatistics.observers + 16);
      if (v33)
      {
        v34 = static Entity.LoadStatistics.observers + 32;
        swift_bridgeObjectRetain();
        do
        {
          v35 = swift_weakLoadStrong();
          if (v35)
          {
            v36 = v35;
            v37 = (_QWORD *)(v35 + 16);
            swift_beginAccess();
            v38 = *(_QWORD **)(v36 + 16);
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v36 + 16) = v38;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
              *v37 = v38;
            }
            v41 = v38[2];
            v40 = v38[3];
            if (v41 >= v40 >> 1)
            {
              v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v38);
              *v37 = v38;
            }
            v38[2] = v41 + 1;
            v38[v41 + 4] = v24;
            swift_endAccess();
            swift_release();
          }
          v34 += 8;
          --v33;
        }
        while (v33);
        swift_bridgeObjectRelease();
      }
    }
    v42 = (void *)MEMORY[0x220768C3C](0xD000000000000026, 0x800000021BE89A30);
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = v24;
    v74 = partial apply for closure #4 in Entity.LoadStatistics.log();
    v75 = v43;
    v70 = MEMORY[0x24BDAC760];
    v71 = 1107296256;
    v72 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    v73 = &block_descriptor_13;
    v44 = _Block_copy(&v70);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v44);

    if (one-time initialization token for entityLoadLog != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Entity.LoadStatistics.entityLoadLog);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v70 = v49;
      *(_DWORD *)v48 = 136446210;
      v50 = specialized flatJSON #1 <A>(_:) in Entity.LoadStatistics.log()();
      v69[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v46, v47, "%{public}s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v49, -1, -1);
      MEMORY[0x220772F44](v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v52 = (unint64_t *)(v68
                             + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
    swift_beginAccess();
    v68 = *v52;
    if (v68 >> 62)
    {
      swift_bridgeObjectRetain();
      v53 = _CocoaArrayWrapper.endIndex.getter();
      if (!v53)
      {
LABEL_51:
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      v53 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v53)
        goto LABEL_51;
    }
    if (v53 < 1)
      break;
    v54 = 0;
    v64 = v53;
    v65 = v68 & 0xC000000000000001;
    while (1)
    {
      if (v65)
      {
        v55 = MEMORY[0x220769770](v54, v68);
        v56 = v55;
      }
      else
      {
        v56 = *(_QWORD *)(v68 + 8 * v54 + 32);
        v55 = swift_retain();
      }
      v57 = *((_QWORD *)v66 + 1);
      MEMORY[0x24BDAC7A8](v55);
      *(&v63 - 4) = v58;
      *(&v63 - 3) = v57;
      *(&v63 - 2) = v67;
      v24 = *(_QWORD *)(v56 + 16);
      v59 = swift_allocObject();
      *(_QWORD *)(v59 + 16) = partial apply for closure #5 in Entity.LoadStatistics.log();
      *(_QWORD *)(v59 + 24) = &v63 - 6;
      v60 = swift_allocObject();
      *(_QWORD *)(v60 + 16) = partial apply for closure #1 in __AssetLoadRequest.Statistics.forEach(_:);
      *(_QWORD *)(v60 + 24) = v59;
      v74 = partial apply for thunk for @callee_guaranteed () -> ();
      v75 = v60;
      v70 = MEMORY[0x24BDAC760];
      v71 = 1107296256;
      v72 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
      v73 = &block_descriptor_10;
      v61 = _Block_copy(&v70);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      REAssetLoadRequestStatsForEachStat();
      _Block_release(v61);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        break;
      if (v64 == ++v54)
        goto LABEL_51;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once();
  }
  __break(1u);
}

uint64_t outlined init with copy of WeakRef<Entity.LoadStatistics.Observer>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of WeakRef<Entity.LoadStatistics.Observer>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized flatJSON #1 <A>(_:) in Entity.LoadStatistics.log()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v0 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v0);
  v1 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  lazy protocol witness table accessor for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log()();
  v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v4 = v3;
  static String.Encoding.utf8.getter();
  v5 = String.init(data:encoding:)();
  if (v6)
  {
    v7 = v5;
    outlined consume of Data._Representation(v2, v4);
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v0 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v0);
  v1 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  lazy protocol witness table accessor for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()();
  v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v4 = v3;
  static String.Encoding.utf8.getter();
  v5 = String.init(data:encoding:)();
  if (v6)
  {
    v7 = v5;
    outlined consume of Data._Representation(v2, v4);
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t i;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  char v32[72];
  __int128 v33;
  _OWORD v34[2];
  __int128 v35;
  _OWORD v36[2];
  __int128 v37;
  _OWORD v38[2];
  uint64_t v39;
  _OWORD *v40;

  v39 = MEMORY[0x24BEE4B00];
  v2 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(63 - v3) >> 6;
  v40 = v36;
  swift_bridgeObjectRetain();
  i = 0;
  v31 = v6;
  if (v5)
    goto LABEL_8;
LABEL_9:
  while (2)
  {
    v10 = i + 1;
    if (!__OFADD__(i, 1))
    {
      if (v10 < v6)
      {
        v11 = *(_QWORD *)(v2 + 8 * v10);
        v12 = i + 1;
        if (v11)
          goto LABEL_24;
        v12 = i + 2;
        if (i + 2 >= v6)
          goto LABEL_41;
        v11 = *(_QWORD *)(v2 + 8 * v12);
        if (v11)
          goto LABEL_24;
        v12 = i + 3;
        if (i + 3 >= v6)
          goto LABEL_41;
        v11 = *(_QWORD *)(v2 + 8 * v12);
        if (v11)
          goto LABEL_24;
        v12 = i + 4;
        if (i + 4 >= v6)
          goto LABEL_41;
        v11 = *(_QWORD *)(v2 + 8 * v12);
        if (v11)
        {
LABEL_24:
          v5 = (v11 - 1) & v11;
          v9 = __clz(__rbit64(v11)) + (v12 << 6);
          for (i = v12; ; v9 = v8 | (i << 6))
          {
            v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
            v16 = *v14;
            v15 = v14[1];
            outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)v38);
            *(_QWORD *)&v37 = v16;
            *((_QWORD *)&v37 + 1) = v15;
            v35 = v37;
            v36[0] = v38[0];
            v36[1] = v38[1];
            outlined init with copy of Any((uint64_t)v40, (uint64_t)v32);
            type metadata accessor for NSObject();
            swift_bridgeObjectRetain();
            if ((swift_dynamicCast() & 1) == 0)
              break;
            v17 = v33;
            if (!(_QWORD)v33)
              goto LABEL_7;
            v18 = v35;
            v33 = v35;
            outlined init with take of Any(v40, v34);
            v19 = v39;
            v20 = *(_QWORD *)(v39 + 16);
            if (*(_QWORD *)(v39 + 24) <= v20)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20 + 1, 1);
              v19 = v39;
            }
            Hasher.init(_seed:)();
            String.hash(into:)();
            v21 = Hasher._finalize()();
            v22 = v19 + 64;
            v23 = -1 << *(_BYTE *)(v19 + 32);
            v24 = v21 & ~v23;
            v25 = v24 >> 6;
            if (((-1 << v24) & ~*(_QWORD *)(v19 + 64 + 8 * (v24 >> 6))) != 0)
            {
              v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v19 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              v27 = 0;
              v28 = (unint64_t)(63 - v23) >> 6;
              do
              {
                if (++v25 == v28 && (v27 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_42;
                }
                v29 = v25 == v28;
                if (v25 == v28)
                  v25 = 0;
                v27 |= v29;
                v30 = *(_QWORD *)(v22 + 8 * v25);
              }
              while (v30 == -1);
              v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            }
            *(_QWORD *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
            *(_OWORD *)(*(_QWORD *)(v19 + 48) + 16 * v26) = v18;
            *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v26) = v17;
            ++*(_QWORD *)(v19 + 16);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
            v6 = v31;
            if (!v5)
              goto LABEL_9;
LABEL_8:
            v8 = __clz(__rbit64(v5));
            v5 &= v5 - 1;
          }
          *(_QWORD *)&v33 = 0;
LABEL_7:
          outlined destroy of BodyTrackingComponent?((uint64_t)&v35, &demangling cache variable for type metadata for (key: String, value: Any));

          if (!v5)
            continue;
          goto LABEL_8;
        }
        v13 = i + 5;
        if (i + 5 < v6)
        {
          v11 = *(_QWORD *)(v2 + 8 * v13);
          if (v11)
          {
            v12 = i + 5;
            goto LABEL_24;
          }
          while (1)
          {
            v12 = v13 + 1;
            if (__OFADD__(v13, 1))
              goto LABEL_43;
            if (v12 >= v6)
              break;
            v11 = *(_QWORD *)(v2 + 8 * v12);
            ++v13;
            if (v11)
              goto LABEL_24;
          }
        }
      }
LABEL_41:
      outlined consume of [String : AnimationResource].Iterator._Variant();
      return;
    }
    break;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t closure #5 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(), double a6)
{
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Strong;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37[3];
  uint64_t aBlock;
  uint64_t v39;
  Class (*v40)(uint64_t);
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE57F30;
  *(_QWORD *)(inited + 32) = 0x7079547465737361;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  v13 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  *(_QWORD *)(inited + 72) = v13;
  *(_QWORD *)(inited + 80) = 0x656D695464616F6CLL;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  v14 = MEMORY[0x24BEE13C8];
  *(double *)(inited + 96) = a6;
  *(_QWORD *)(inited + 120) = v14;
  strcpy((char *)(inited + 128), "functionName");
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(_QWORD *)(inited + 144) = a4;
  *(_QWORD *)(inited + 152) = a5;
  *(_QWORD *)(inited + 168) = v13;
  *(_QWORD *)(inited + 176) = 0x657A6953656C6966;
  *(_QWORD *)(inited + 216) = MEMORY[0x24BEE4568];
  *(_QWORD *)(inited + 184) = 0xE800000000000000;
  *(_QWORD *)(inited + 192) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v16 = (void *)MEMORY[0x220768C3C](0xD00000000000002FLL, 0x800000021BE89AB0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v15;
  v42 = partial apply for closure #1 in closure #5 in Entity.LoadStatistics.log();
  v43 = v17;
  aBlock = MEMORY[0x24BDAC760];
  v39 = 1107296256;
  v40 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v41 = &block_descriptor_16;
  v18 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);

  aBlock = a1;
  v39 = a2;
  v40 = *(Class (**)(uint64_t))&a6;
  v41 = a4;
  v42 = a5;
  v43 = a3;
  v19 = one-time initialization token for assetLoadLog;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Entity.LoadStatistics.assetLoadLog);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v37[0] = v24;
    *(_DWORD *)v23 = 136446210;
    v25 = specialized flatJSON #1 <A>(_:) in Entity.LoadStatistics.log()();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v21, v22, "%{public}s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v24, -1, -1);
    MEMORY[0x220772F44](v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for observers != -1)
    swift_once();
  v27 = *(_QWORD *)(static Entity.LoadStatistics.observers + 16);
  if (v27)
  {
    v28 = static Entity.LoadStatistics.observers + 32;
    swift_bridgeObjectRetain();
    do
    {
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v30 = Strong;
        v31 = (_QWORD *)(Strong + 24);
        swift_beginAccess();
        v32 = *(_QWORD **)(v30 + 24);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v30 + 24) = v32;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
          *v31 = v32;
        }
        v35 = v32[2];
        v34 = v32[3];
        if (v35 >= v34 >> 1)
        {
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
          *v31 = v32;
        }
        v32[2] = v35 + 1;
        v32[v35 + 4] = v15;
        swift_endAccess();
        swift_release();
      }
      v28 += 8;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t encode(to:) in EntityLoadLog #1 in Entity.LoadStatistics.log()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t encode(to:) in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BBA48F4 + 4 * byte_21BE62070[*v0]))(0x6E6F697461727564, 0xE800000000000000);
}

uint64_t sub_21BBA48F4()
{
  return 1701869940;
}

uint64_t sub_21BBA4904()
{
  return 0x6E6F6973726576;
}

uint64_t sub_21BBA491C()
{
  return 0x636E797361;
}

uint64_t sub_21BBA4930()
{
  return 0x6E6F6974636E7566;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodingKeys.init(stringValue:) in EntityLoadLog #1 in Entity.LoadStatistics.log()(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  lazy protocol witness table accessor for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  lazy protocol witness table accessor for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EntityLoadLog #1 in Entity.LoadStatistics.log()(_QWORD *a1)
{
  return encode(to:) in EntityLoadLog #1 in Entity.LoadStatistics.log()(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BBA4A38 + 4 * byte_21BE62075[*v0]))(0x7079547465737361, 0xE900000000000065);
}

uint64_t sub_21BBA4A38()
{
  return 0x656D695464616F6CLL;
}

uint64_t sub_21BBA4A50()
{
  return 0x6E6F6974636E7566;
}

uint64_t sub_21BBA4A70()
{
  return 0x657A6953656C6966;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodingKeys.init(stringValue:) in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  lazy protocol witness table accessor for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  lazy protocol witness table accessor for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(_QWORD *a1)
{
  return encode(to:) in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(a1);
}

uint64_t sub_21BBA4B34()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #4 in Entity.LoadStatistics.log()()
{
  uint64_t v0;

  specialized Dictionary.compactMapValues<A>(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t partial apply for closure #5 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;

  return closure #5 in Entity.LoadStatistics.log()(a1, a2, a3, *(void **)(v4 + 16), *(uint64_t (**)())(v4 + 24), a4);
}

uint64_t sub_21BBA4BA8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __AssetLoadRequest.Statistics.forEach(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in __AssetLoadRequest.Statistics.forEach(_:)(a1, *(void (**)(uint64_t, uint64_t, uint64_t, double))(v1 + 16));
}

uint64_t sub_21BBA4BC0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EntityLoadLog #1 in Entity.LoadStatistics.log(), &unk_24DFB23A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log(), &unk_24DFB2320);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

uint64_t destroy for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

_QWORD *assignWithTake for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  return &unk_24DFB2320;
}

uint64_t destroy for EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  return &unk_24DFB23A8;
}

uint64_t type metadata accessor for WeakRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakRef);
}

uint64_t storeEnumTagSinglePayload for Entity.LoadStatistics.USDLoader(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BBA5098 + 4 * byte_21BE6207E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BBA50CC + 4 * byte_21BE62079[v4]))();
}

uint64_t sub_21BBA50CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBA50D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBA50DCLL);
  return result;
}

uint64_t sub_21BBA50E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBA50F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BBA50F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBA50FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Entity.LoadStatistics.USDLoader()
{
  return &type metadata for Entity.LoadStatistics.USDLoader;
}

unint64_t lazy protocol witness table accessor for type Entity.LoadStatistics.USDLoader and conformance Entity.LoadStatistics.USDLoader()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.LoadStatistics.USDLoader and conformance Entity.LoadStatistics.USDLoader;
  if (!lazy protocol witness table cache variable for type Entity.LoadStatistics.USDLoader and conformance Entity.LoadStatistics.USDLoader)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.LoadStatistics.USDLoader, &type metadata for Entity.LoadStatistics.USDLoader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.LoadStatistics.USDLoader and conformance Entity.LoadStatistics.USDLoader);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log(), &unk_24DFB25C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log(), &unk_24DFB25C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log(), &unk_24DFB25C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log(), &unk_24DFB25C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log(), &unk_24DFB2538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log(), &unk_24DFB2538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log(), &unk_24DFB2538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log(), &unk_24DFB2538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BBA5234 + 4 * byte_21BE62088[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BBA5268 + 4 * byte_21BE62083[v4]))();
}

uint64_t sub_21BBA5268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBA5270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBA5278);
  return result;
}

uint64_t sub_21BBA5284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBA528CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BBA5290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBA5298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  return &unk_24DFB2538;
}

uint64_t storeEnumTagSinglePayload for CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BBA5300 + 4 * byte_21BE62092[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BBA5334 + 4 * byte_21BE6208D[v4]))();
}

uint64_t sub_21BBA5334(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBA533C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBA5344);
  return result;
}

uint64_t sub_21BBA5350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBA5358);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BBA535C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBA5364(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  return &unk_24DFB25C8;
}

uint64_t specialized CodingKeys.init(stringValue:) in EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x636E797361 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xEC000000656D614ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized CodingKeys.init(stringValue:) in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7079547465737361 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D695464616F6CLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xEC000000656D614ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  uint64_t v9;
  void *v10;
  CGColorRef value;
  Swift::String v12;
  CGColorRef_optional v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  CGColor *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  if (one-time initialization token for linearSRGBWhite != -1)
    swift_once();
  v8 = (void *)static CGColorRef.linearSRGBWhite;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (a3)
    v9 = a2;
  else
    v9 = 0x6F6C6F4365736162;
  if (a3)
    v10 = a3;
  else
    v10 = (void *)0xED0000746E695472;
  value = v8;
  v12._countAndFlagsBits = v9;
  v12._object = v10;
  v13.value = Material.getColorParameter(key:)(v12).value;
  swift_bridgeObjectRelease();
  if (v13.value)
  {

    value = v13.value;
  }
  v14 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  Material.getTextureParameter(key:)(0xD000000000000010, 0x800000021BE860B0, v14, (uint64_t)&v20);
  v15 = v21;
  if (v21)
  {
    v16 = v23;
    v17 = v22;
    v18 = v20;
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v16 = 0;
  }
  *(_QWORD *)a4 = value;
  *(_QWORD *)(a4 + 8) = v18;
  *(_QWORD *)(a4 + 16) = v15;
  *(_QWORD *)(a4 + 24) = v17;
  *(_DWORD *)(a4 + 32) = v16;
  v19 = value;
  outlined copy of MaterialParameters.Texture?(v18, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  outlined consume of MaterialParameters.Texture?(v18, v15);
}

uint64_t static PhysicallyBasedMaterial.BaseColor.__tintKey.getter()
{
  return 0x6F6C6F4365736162;
}

uint64_t (*PhysicallyBasedMaterial.BaseColor.__tint.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.BaseColor.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*PhysicallyBasedMaterial.BaseColor.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.BaseColor.__defaultTexture.getter())(_QWORD *a1)
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return partial apply for closure #1 in static TextureResource.builtinTexture(named:);
}

uint64_t sub_21BBA5BA0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t static PhysicallyBasedMaterial.Metallic.__scaleKey.getter()
{
  return 0x63696C6C6174656DLL;
}

float PhysicallyBasedMaterial.Metallic.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Metallic.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicallyBasedMaterial.Metallic.__textureKey.getter()
{
  return 0x4D65727574786574;
}

uint64_t (*PhysicallyBasedMaterial.Metallic.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Metallic.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x63696C6C6174656DLL, (void *)0xED0000656C616353, 0x4D65727574786574, 0xEF63696C6C617465, a2);
}

uint64_t static PhysicallyBasedMaterial.Roughness.__scaleKey.getter()
{
  return 0x73656E6867756F72;
}

float PhysicallyBasedMaterial.Roughness.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Roughness.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.Roughness.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*PhysicallyBasedMaterial.Roughness.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Roughness.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x73656E6867756F72, (void *)0xEE00656C61635373, 0xD000000000000010, 0x800000021BE860D0, a2);
}

uint64_t static PhysicallyBasedMaterial.EmissiveColor.__colorKey.getter()
{
  return 0x6576697373696D65;
}

uint64_t (*PhysicallyBasedMaterial.EmissiveColor.__color.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicallyBasedMaterial.EmissiveColor.__textureKey.getter()
{
  return 0x4565727574786574;
}

uint64_t (*PhysicallyBasedMaterial.EmissiveColor.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.EmissiveColor.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.black");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void static PhysicallyBasedMaterial.EmissiveColor.textureSemantic.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void PhysicallyBasedMaterial.BaseColor.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  int v7;

  v4 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v5 = v4;
    swift_retain();
    v6 = (id)REMaterialCreateDefaultSamplerDescriptor();
    swift_release();

    v7 = 84148994;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = v7;
}

void PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(a1, 0x6576697373696D65, (void *)0xED0000726F6C6F43, 0x4565727574786574, 0xEF6576697373696DLL, a2);
}

uint64_t static PhysicallyBasedMaterial.Specular.__scaleKey.getter()
{
  return 0x72616C7563657073;
}

float PhysicallyBasedMaterial.Specular.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Specular.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicallyBasedMaterial.Specular.__textureKey.getter()
{
  return 0x5365727574786574;
}

uint64_t (*PhysicallyBasedMaterial.Specular.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Specular.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.Specular.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x72616C7563657073, (void *)0xED0000656C616353, 0x5365727574786574, 0xEF72616C75636570, a2);
}

id PhysicallyBasedMaterial.Blending.init(blending:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  int v7;

  v3 = *a1;
  v4 = a1[1];
  if (!v4)
  {
    outlined consume of __EntityInfoComponent?(*a1, 0);
    outlined consume of __EntityInfoComponent?(v3, 0);
    result = 0;
    v7 = 0;
LABEL_6:
    v5 = v3;
    goto LABEL_7;
  }
  if (v4 != 1)
  {
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v7 = 84148994;
    goto LABEL_6;
  }
  v5 = 0;
  result = 0;
  v7 = 0;
LABEL_7:
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

id PhysicallyBasedMaterial.Opacity.init(_:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  id result;
  int v6;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  if (v4)
  {
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v6 = 84148994;
  }
  else
  {
    result = 0;
    v6 = 0;
  }
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t static PhysicallyBasedMaterial.Opacity.__scaleKey.getter()
{
  return 0x537974696361706FLL;
}

float PhysicallyBasedMaterial.Opacity.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Opacity.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicallyBasedMaterial.Opacity.__textureKey.getter()
{
  return 0x4F65727574786574;
}

uint64_t (*PhysicallyBasedMaterial.Opacity.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Opacity.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

uint64_t static PhysicallyBasedMaterial.Clearcoat.__scaleKey.getter()
{
  return 0x616F637261656C63;
}

float PhysicallyBasedMaterial.Clearcoat.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Clearcoat.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.Clearcoat.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*PhysicallyBasedMaterial.Clearcoat.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Clearcoat.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x616F637261656C63, (void *)0xEE00656C61635374, 0xD000000000000010, 0x800000021BE860F0, a2);
}

unint64_t static PhysicallyBasedMaterial.ClearcoatRoughness.__scaleKey.getter()
{
  return 0xD000000000000017;
}

float PhysicallyBasedMaterial.ClearcoatRoughness.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.ClearcoatRoughness.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.ClearcoatRoughness.__textureKey.getter()
{
  return 0xD000000000000019;
}

uint64_t (*PhysicallyBasedMaterial.ClearcoatRoughness.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.ClearcoatRoughness.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id PhysicallyBasedMaterial.Metallic.init(_:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  id result;
  int v6;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  if (v4)
  {
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v6 = 84148994;
  }
  else
  {
    result = 0;
    v6 = 0;
  }
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

void PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(a1, 0xD000000000000017, (void *)0x800000021BE81740, 0xD000000000000019, 0x800000021BE86110, a2);
}

uint64_t static PhysicallyBasedMaterial.Normal.__textureKey.getter()
{
  return 0x4E65727574786574;
}

uint64_t (*PhysicallyBasedMaterial.Normal.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Normal.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0xD000000000000012;
  *(_QWORD *)(v0 + 24) = 0x800000021BE86130;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

unint64_t static PhysicallyBasedMaterial.AmbientOcclusion.__textureKey.getter()
{
  return 0xD000000000000017;
}

uint64_t (*PhysicallyBasedMaterial.AmbientOcclusion.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.AmbientOcclusion.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

unint64_t static PhysicallyBasedMaterial.AnisotropyLevel.__scaleKey.getter()
{
  return 0xD000000000000014;
}

float PhysicallyBasedMaterial.AnisotropyLevel.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.AnisotropyLevel.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.AnisotropyLevel.__textureKey.getter()
{
  return 0xD000000000000016;
}

uint64_t (*PhysicallyBasedMaterial.AnisotropyLevel.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.AnisotropyLevel.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(a1, 0xD000000000000014, (void *)0x800000021BE817C0, 0xD000000000000016, 0x800000021BE86CB0, a2);
}

unint64_t static PhysicallyBasedMaterial.AnisotropyAngle.__scaleKey.getter()
{
  return 0xD000000000000014;
}

float PhysicallyBasedMaterial.AnisotropyAngle.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void PhysicallyBasedMaterial.AnisotropyAngle.scale.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*PhysicallyBasedMaterial.AnisotropyAngle.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.AnisotropyAngle.__textureKey.getter()
{
  return 0xD000000000000016;
}

uint64_t (*PhysicallyBasedMaterial.AnisotropyAngle.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.AnisotropyAngle.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void static PhysicallyBasedMaterial.AnisotropyAngle.textureSemantic.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

__n128 PhysicallyBasedMaterial.Metallic.init(scale:texture:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unint64_t v3;
  unsigned __int32 v4;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u32[2];
  *(float *)a2 = a3;
  result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  *(_QWORD *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

void PhysicallyBasedMaterial.AnisotropyAngle.init(floatLiteral:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
}

void PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(a1, 0xD000000000000014, (void *)0x800000021BE817E0, 0xD000000000000016, 0x800000021BE86C90, a2);
}

void PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X3>, void *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  Swift::String v12;
  Swift::Float_optional *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  float v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  Material.getFloatParameter(key:)(v13, v12);
  v15 = v14;
  v16 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  Material.getTextureParameter(key:)(a4, a5, v16, (uint64_t)&v22);
  v17 = v23;
  if (v23)
  {
    v18 = v25;
    v19 = v24;
    v20 = v22;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v18 = 0;
  }
  v21 = *(float *)&v15;
  if ((v15 & 0x100000000) != 0)
    v21 = 1.0;
  *(float *)a6 = v21;
  *(_QWORD *)(a6 + 8) = v20;
  *(_QWORD *)(a6 + 16) = v17;
  *(_QWORD *)(a6 + 24) = v19;
  *(_DWORD *)(a6 + 32) = v18;
  outlined copy of MaterialParameters.Texture?(v20, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of MaterialParameters.Texture?(v20, v17);
}

float protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance PhysicallyBasedMaterial.AnisotropyAngle@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  result = *a1;
  *(float *)a2 = *a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t static PhysicallyBasedMaterial.SheenColor.__tintKey.getter()
{
  return 0x6C6F436E65656873;
}

id PhysicallyBasedMaterial.SheenColor.__tint.getter()
{
  id *v0;

  return *v0;
}

void PhysicallyBasedMaterial.SheenColor.__tint.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*PhysicallyBasedMaterial.SheenColor.__tint.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.SheenColor.__textureKey.getter()
{
  return 0xD000000000000011;
}

void *PhysicallyBasedMaterial.BaseColor.texture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *(void **)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_DWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = v5;
  return outlined copy of MaterialParameters.Texture?(v2, v3);
}

__n128 PhysicallyBasedMaterial.BaseColor.texture.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int32 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u32[2];
  outlined consume of MaterialParameters.Texture?(*(void **)(v1 + 8), *(_QWORD *)(v1 + 16));
  result = v5;
  *(__n128 *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 24) = v2;
  *(_DWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.SheenColor.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.SheenColor.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void static PhysicallyBasedMaterial.SheenColor.textureSemantic.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

__n128 PhysicallyBasedMaterial.BaseColor.init(tint:texture:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unsigned __int32 v4;
  __n128 result;

  v3 = a2[1].n128_u64[0];
  v4 = a2[1].n128_u32[2];
  *(_QWORD *)a3 = a1;
  result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  *(_QWORD *)(a3 + 24) = v3;
  *(_DWORD *)(a3 + 32) = v4;
  return result;
}

void PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(a1, 0x6C6F436E65656873, (void *)0xEA0000000000726FLL, 0xD000000000000011, 0x800000021BE86C70, a2);
}

void PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X3>, void *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  void *v12;
  CGColorRef v13;
  Swift::String v14;
  CGColorRef_optional v15;
  CGColorRef value;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  CGColor *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  swift_bridgeObjectRelease();
  if (one-time initialization token for linearSRGBWhite != -1)
    swift_once();
  v12 = (void *)static CGColorRef.linearSRGBWhite;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = v12;
  v14._countAndFlagsBits = a2;
  v14._object = a3;
  v15.value = Material.getColorParameter(key:)(v14).value;
  if (v15.value)
  {
    value = v15.value;

    v13 = value;
  }
  v17 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  Material.getTextureParameter(key:)(a4, a5, v17, (uint64_t)&v23);
  v18 = v24;
  if (v24)
  {
    v19 = v26;
    v20 = v25;
    v21 = v23;
  }
  else
  {
    v21 = 0;
    v20 = 0;
    v19 = 0;
  }
  *(_QWORD *)a6 = v13;
  *(_QWORD *)(a6 + 8) = v21;
  *(_QWORD *)(a6 + 16) = v18;
  *(_QWORD *)(a6 + 24) = v20;
  *(_DWORD *)(a6 + 32) = v19;
  v22 = v13;
  outlined copy of MaterialParameters.Texture?(v21, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  outlined consume of MaterialParameters.Texture?(v21, v18);
}

void PhysicallyBasedMaterial.Program.descriptor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

void PhysicallyBasedMaterial.Program.Descriptor.blendMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *PhysicallyBasedMaterial.Program.Descriptor.blendMode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.Program.Descriptor.blendMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicallyBasedMaterial.Program.Descriptor.init()(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static PhysicallyBasedMaterial.Program.Descriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v5;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
  {
    if (v3 != 2)
      return 0;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0)
      return 0;
  }
  return 1;
}

void PhysicallyBasedMaterial.Program.Descriptor.hash(into:)()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int PhysicallyBasedMaterial.Program.Descriptor.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicallyBasedMaterial.Program.Descriptor(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v5;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
  {
    if (v3 == 2)
      return 1;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 != 2 && v5 == 0)
      return 1;
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhysicallyBasedMaterial.Program.Descriptor()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PhysicallyBasedMaterial.Program.Descriptor()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhysicallyBasedMaterial.Program.Descriptor()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

uint64_t PhysicallyBasedMaterial.Program.__allocating_init(descriptor:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = swift_allocObject();
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = PhysicallyBasedMaterial.Program.__allocating_init(descriptor:);
  *(_QWORD *)(v4 + 80) = v3;
  *(_BYTE *)(v4 + 112) = *a1;
  return swift_task_switch();
}

uint64_t PhysicallyBasedMaterial.Program.__allocating_init(descriptor:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t PhysicallyBasedMaterial.Program.init(descriptor:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = v1;
  *(_BYTE *)(v2 + 112) = *a1;
  return swift_task_switch();
}

uint64_t PhysicallyBasedMaterial.Program.init(descriptor:)()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(__int16, uint64_t, int);

  v1 = *(unsigned __int8 *)(v0 + 112);
  *(_BYTE *)(*(_QWORD *)(v0 + 80) + 16) = v1;
  if (one-time initialization token for shaderCacheRegistry != -1)
    swift_once();
  v2 = *(unsigned __int8 *)(v0 + 112);
  swift_retain();
  v3 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, v0 + 16);
  *(_QWORD *)(v0 + 88) = specialized AssetServiceScopedRegistry.instance(for:)((_QWORD *)(v0 + 16));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v6 = (uint64_t (*)(__int16, uint64_t, int))((char *)&async function pointer to specialized ShaderCache.getResource(_:)
                                                     + async function pointer to specialized ShaderCache.getResource(_:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = PhysicallyBasedMaterial.Program.init(descriptor:);
  return v6(v1 != 2, 0, (v2 << 8) | 0x20001u);
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 80) + 24) = *(_QWORD *)(v0 + 104);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t PhysicallyBasedMaterial.Program.init(descriptor:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    swift_release();
  }
  else
  {
    swift_release();
    *(_QWORD *)(v4 + 104) = a1;
  }
  return swift_task_switch();
}

uint64_t static PhysicallyBasedMaterial.Program.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v5;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 2)
  {
    if (v3 == 2)
      return 1;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 != 2 && v5 == 0)
      return 1;
  }
  return 0;
}

void PhysicallyBasedMaterial.Program.hash(into:)()
{
  uint64_t v0;
  int v1;
  Swift::UInt v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

uint64_t PhysicallyBasedMaterial.Program.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PhysicallyBasedMaterial.Program.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

Swift::Int PhysicallyBasedMaterial.Program.hashValue.getter()
{
  uint64_t v0;
  int v1;
  Swift::UInt v2;

  Hasher.init(_seed:)();
  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicallyBasedMaterial.Program(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)a1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
  if (v2 == 2)
  {
    if (v3 == 2)
      return 1;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 != 2 && v5 == 0)
      return 1;
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhysicallyBasedMaterial.Program()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  Swift::UInt v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(unsigned __int8 *)(v1 + 16);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = v2 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PhysicallyBasedMaterial.Program()
{
  uint64_t v0;
  int v1;
  Swift::UInt v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)v0 + 16);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhysicallyBasedMaterial.Program()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  Swift::UInt v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(unsigned __int8 *)(v1 + 16);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = v2 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

unint64_t static PhysicallyBasedMaterial.ClearcoatNormal.__textureKey.getter()
{
  return 0xD000000000000016;
}

void *PhysicallyBasedMaterial.Normal.texture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = v5;
  return outlined copy of MaterialParameters.Texture?(v2, v3);
}

__n128 PhysicallyBasedMaterial.Normal.texture.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int32 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u32[2];
  outlined consume of MaterialParameters.Texture?(*(void **)v1, *(_QWORD *)(v1 + 8));
  result = v5;
  *(__n128 *)v1 = v5;
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.ClearcoatNormal.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void static PhysicallyBasedMaterial.ClearcoatNormal.textureSemantic.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

__n128 PhysicallyBasedMaterial.Normal.init(texture:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  unsigned __int32 v3;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u32[2];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  a2[1].n128_u32[2] = v3;
  return result;
}

id PhysicallyBasedMaterial.Normal.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  id result;
  int v5;

  v3 = *a1;
  if (*a1)
  {
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v5 = 84148994;
  }
  else
  {
    result = 0;
    v5 = 0;
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t specialized ShaderCache.getResource(_:)(__int16 a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = v3;
  *(_WORD *)(v4 + 68) = a1;
  return swift_task_switch();
}

uint64_t specialized ShaderCache.getResource(_:)()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  int v8;
  _QWORD *v9;
  uint64_t (*v10)(__int16, uint64_t, int);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 56);
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v3 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(*(_WORD *)(v0 + 68), *(_QWORD *)(v0 + 40), *(_DWORD *)(v0 + 64) & 0xFFFF01), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    v6 = 0;
  }
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v6)
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  v8 = *(_DWORD *)(v0 + 64);
  v10 = (uint64_t (*)(__int16, uint64_t, int))((char *)&async function pointer to specialized ShaderCacheLoader.loadResource(forKey:)
                                                      + async function pointer to specialized ShaderCacheLoader.loadResource(forKey:));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v9;
  *v9 = v0;
  v9[1] = specialized ShaderCache.getResource(_:);
  return v10(*(_WORD *)(v0 + 68), *(_QWORD *)(v0 + 40), v8 & 0xFFFF01);
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t (*v9)(int);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 56);
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v3 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(v0 + 56)), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    v6 = 0;
  }
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v6)
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  v9 = (uint64_t (*)(int))((char *)&async function pointer to specialized ShaderCacheLoader.loadResource(forKey:)
                                   + async function pointer to specialized ShaderCacheLoader.loadResource(forKey:));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v8;
  *v8 = v0;
  v8[1] = specialized ShaderCache.getResource(_:);
  return v9(*(_DWORD *)(v0 + 56));
}

uint64_t specialized ShaderCache.getResource(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  uint64_t result;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61[3];
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  _OWORD v73[7];
  void *v74;
  uint64_t v75;

  v3 = v2;
  v5 = *(_OWORD *)(a1 + 80);
  v69 = *(_OWORD *)(a1 + 64);
  v70 = v5;
  v71 = *(_OWORD *)(a1 + 96);
  v72 = *(void **)(a1 + 112);
  v6 = *(_OWORD *)(a1 + 16);
  v65 = *(_OWORD *)a1;
  v66 = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v67 = *(_OWORD *)(a1 + 32);
  v68 = v7;
  swift_retain();
  v8 = specialized SharedCacheStorage.getResource(forKey:)(a1);
  swift_release();
  if (v8)
    return v8;
  v9 = CustomMaterial.CustomShaderParameters.materialPath.getter();
  v11 = v10;
  v12 = CustomMaterial.CustomShaderParameters.functionConstants.getter();
  outlined init with copy of __REAssetService(v1 + 16, (uint64_t)&v54);
  v13 = v56;
  v14 = v57;
  __swift_project_boxed_opaque_existential_1(&v54, v56);
  v15 = __REAssetService.asset(_:)(v9, v11, v13, v14);
  swift_bridgeObjectRelease();
  if (v15)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    v18 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
    swift_bridgeObjectRetain();
    v19 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v64 = 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    v48 = BYTE2(v66);
    v49 = BYTE1(v66);
    v20 = (unsigned __int16)v65;
    v21 = *((_QWORD *)&v67 + 1);
    v51 = v12;
    v52 = v3;
    v75 = v15;
    v53 = v17;
    if (*((_QWORD *)&v67 + 1))
    {
      v46 = (unsigned __int16)v65;
      v22 = v67;
      v23 = v68;
      v24 = (void *)v69;
      v44 = *((_QWORD *)&v66 + 1);
      outlined copy of __MaterialResource.CoreMaterialFunction?(*((uint64_t *)&v66 + 1), v67, *((uint64_t *)&v67 + 1), v68, *((uint64_t *)&v68 + 1), (void *)v69);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      v26 = v16[2];
      v25 = v16[3];
      if (v26 >= v25 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v16);
      v16[2] = v26 + 1;
      v27 = &v16[6 * v26];
      *((_BYTE *)v27 + 32) = v44;
      v27[5] = v22;
      v27[6] = v21;
      *(_OWORD *)(v27 + 7) = v23;
      v27[9] = v42;
      outlined consume of __MaterialResource.CoreMaterialFunction?(v44, v22, v21, v23, *((uint64_t *)&v23 + 1), v24);
      v12 = v51;
      v3 = v52;
      v15 = v75;
      v17 = v53;
      v20 = v46;
    }
    LODWORD(v28) = (v20 >> 10) & 1;
    v47 = (v20 >> 11) & 1;
    v29 = *((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v45 = (v20 >> 10) & 1;
      v28 = v70;
      v30 = v71;
      v31 = v72;
      v43 = *((_QWORD *)&v69 + 1);
      outlined copy of __MaterialResource.CoreMaterialFunction?(*((uint64_t *)&v69 + 1), v70, *((uint64_t *)&v70 + 1), v71, *((uint64_t *)&v71 + 1), v72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      v33 = v16[2];
      v32 = v16[3];
      if (v33 >= v32 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v16);
      v16[2] = v33 + 1;
      v34 = &v16[6 * v33];
      *((_BYTE *)v34 + 32) = v43;
      v34[5] = v28;
      v34[6] = v29;
      *(_OWORD *)(v34 + 7) = v30;
      v34[9] = v41;
      outlined consume of __MaterialResource.CoreMaterialFunction?(v43, v28, v29, v30, *((uint64_t *)&v30 + 1), v31);
      v12 = v51;
      v3 = v52;
      v15 = v75;
      v17 = v53;
      LOBYTE(v28) = v45;
    }
    v35 = type metadata accessor for __MaterialResource();
    *(_QWORD *)&v54 = v15;
    *((_QWORD *)&v54 + 1) = v12;
    v55 = 0;
    LOBYTE(v56) = v64;
    BYTE1(v56) = v28;
    BYTE2(v56) = v47;
    BYTE3(v56) = v48;
    BYTE4(v56) = v49;
    v57 = v17;
    v58 = v18;
    v8 = v19;
    v59 = v19;
    v60 = v16;
    v50 = v35;
    static __MaterialResource.createMaterial(_:)(&v54, v61);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = v62;
      v37 = v63;
      __swift_project_boxed_opaque_existential_1(v61, v62);
      v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
      *(_QWORD *)(inited + 32) = v38;
      *(_QWORD *)(inited + 56) = v50;
      *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
      swift_retain();
      specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      v73[4] = v69;
      v73[5] = v70;
      v73[6] = v71;
      v74 = v72;
      v73[0] = v65;
      v73[1] = v66;
      v73[2] = v67;
      v73[3] = v68;
      swift_retain();
      v8 = specialized SharedCacheStorage.addResource(value:forKey:)(v38, v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_release();
    return v8;
  }
  __break(1u);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized ShaderCache.getResource(_:)(int a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = v1;
  *(_DWORD *)(v2 + 56) = a1;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type PhysicallyBasedMaterial.Program.Descriptor and conformance PhysicallyBasedMaterial.Program.Descriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program.Descriptor and conformance PhysicallyBasedMaterial.Program.Descriptor;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program.Descriptor and conformance PhysicallyBasedMaterial.Program.Descriptor)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicallyBasedMaterial.Program.Descriptor, &type metadata for PhysicallyBasedMaterial.Program.Descriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program.Descriptor and conformance PhysicallyBasedMaterial.Program.Descriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicallyBasedMaterial.Program and conformance PhysicallyBasedMaterial.Program()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program and conformance PhysicallyBasedMaterial.Program;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program and conformance PhysicallyBasedMaterial.Program)
  {
    v1 = type metadata accessor for PhysicallyBasedMaterial.Program();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicallyBasedMaterial.Program, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program and conformance PhysicallyBasedMaterial.Program);
  }
  return result;
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.Program()
{
  return objc_opt_self();
}

id *outlined destroy of MaterialParameters.Texture(id *a1)
{
  destroy for CustomMaterial.EmissiveColor(a1);
  return a1;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.BaseColor()
{
  return &type metadata for PhysicallyBasedMaterial.BaseColor;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Metallic()
{
  return &type metadata for PhysicallyBasedMaterial.Metallic;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Roughness()
{
  return &type metadata for PhysicallyBasedMaterial.Roughness;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.EmissiveColor()
{
  return &type metadata for PhysicallyBasedMaterial.EmissiveColor;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Specular()
{
  return &type metadata for PhysicallyBasedMaterial.Specular;
}

void destroy for PhysicallyBasedMaterial.Blending(uint64_t a1)
{
  unint64_t v2;
  int v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = -1;
  if (v2 < 0xFFFFFFFF)
    v3 = v2;
  if (v3 - 1 < 0)
  {
    if (v2)
    {
      v4 = *(id *)(a1 + 8);
      swift_release();

    }
  }
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial.Blending(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 16);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 16);
  if ((int)v4 - 1 < 0)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (v3)
    {
      v6 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v3;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      v7 = v6;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    }
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial.Blending(uint64_t a1, __int128 *a2)
{
  __int128 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 *v9;
  int v10;
  void *v11;
  id v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  __int128 v20;
  __int128 v21;

  v4 = (__int128 *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  LODWORD(v6) = -1;
  if (v5 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  else
    v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 - 1;
  v9 = (__int128 *)((char *)a2 + 8);
  if (*((_QWORD *)a2 + 2) < 0xFFFFFFFFuLL)
    v6 = *((_QWORD *)a2 + 2);
  v10 = v6 - 1;
  if ((v8 & 0x80000000) == 0)
  {
    if (v10 < 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      if (*((_QWORD *)a2 + 2))
      {
LABEL_9:
        v11 = (void *)*((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
        v12 = v11;
        swift_retain();
        return a1;
      }
LABEL_19:
      v20 = *v9;
      *(_OWORD *)(a1 + 20) = *(__int128 *)((char *)a2 + 20);
      *v4 = v20;
      return a1;
    }
LABEL_13:
    v13 = *a2;
    v14 = a2[1];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v14;
    return a1;
  }
  if ((v10 & 0x80000000) == 0)
  {
    if (v5)
    {

      swift_release();
    }
    goto LABEL_13;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v16 = *((_QWORD *)a2 + 2);
  if (!v5)
  {
    if (v16)
      goto LABEL_9;
    goto LABEL_19;
  }
  if (v16)
  {
    v17 = *(void **)(a1 + 8);
    v18 = (void *)*((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v18;
    v19 = v18;

    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 34);
    *(_BYTE *)(a1 + 35) = *((_BYTE *)a2 + 35);
  }
  else
  {
    outlined destroy of MaterialParameters.Texture((id *)(a1 + 8));
    v21 = *(__int128 *)((char *)v9 + 12);
    *v4 = *v9;
    *(__int128 *)((char *)v4 + 12) = v21;
  }
  return a1;
}

uint64_t assignWithTake for PhysicallyBasedMaterial.Blending(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _OWORD *v12;
  void *v13;

  v4 = *(_QWORD *)(a1 + 16);
  LODWORD(v5) = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = *(_QWORD *)(a1 + 16);
  if ((int)v5 - 1 < 0)
  {
    v8 = (_OWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    LODWORD(v10) = -1;
    if (v9 < 0xFFFFFFFF)
      v10 = *(_QWORD *)(a2 + 16);
    if ((int)v10 - 1 < 0)
    {
      v12 = (_OWORD *)(a2 + 8);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      if (v4)
      {
        if (v9)
        {
          v13 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

          *(_QWORD *)(a1 + 16) = v9;
          swift_release();
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          goto LABEL_5;
        }
        outlined destroy of MaterialParameters.Texture((id *)(a1 + 8));
      }
      *v8 = *v12;
      *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
      return a1;
    }
    if (v4)
    {
      v11 = *(void **)v8;
      swift_release();

    }
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_5:
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.Blending(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.Blending(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_DWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 36) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for PhysicallyBasedMaterial.Blending(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t destructiveInjectEnumTag for PhysicallyBasedMaterial.Blending(uint64_t result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Blending()
{
  return &type metadata for PhysicallyBasedMaterial.Blending;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Opacity()
{
  return &type metadata for PhysicallyBasedMaterial.Opacity;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Clearcoat()
{
  return &type metadata for PhysicallyBasedMaterial.Clearcoat;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.ClearcoatRoughness()
{
  return &type metadata for PhysicallyBasedMaterial.ClearcoatRoughness;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Normal()
{
  return &type metadata for PhysicallyBasedMaterial.Normal;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.AmbientOcclusion()
{
  return &type metadata for PhysicallyBasedMaterial.AmbientOcclusion;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.AnisotropyLevel()
{
  return &type metadata for PhysicallyBasedMaterial.AnisotropyLevel;
}

void destroy for PhysicallyBasedMaterial.Metallic(uint64_t a1)
{
  id v1;

  if (*(_QWORD *)(a1 + 16))
  {
    v1 = *(id *)(a1 + 8);
    swift_release();

  }
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = *(void **)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  }
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      v7 = *(void **)(a1 + 8);
      v8 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      v9 = v8;

      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
      *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
      *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
    }
    else
    {
      outlined destroy of MaterialParameters.Texture((id *)(a1 + 8));
      v12 = *(_OWORD *)((char *)v5 + 12);
      *v4 = *v5;
      *(_OWORD *)((char *)v4 + 12) = v12;
    }
  }
  else if (v6)
  {
    v10 = *(void **)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v11 = v10;
    swift_retain();
  }
  else
  {
    v13 = *v5;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *v4 = v13;
  }
  return a1;
}

uint64_t assignWithTake for PhysicallyBasedMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v6;
  void *v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v4 = (_OWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
  {
    outlined destroy of MaterialParameters.Texture((id *)(a1 + 8));
LABEL_5:
    *v3 = *v4;
    *(_OWORD *)((char *)v3 + 12) = *(_OWORD *)((char *)v4 + 12);
    return a1;
  }
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_QWORD *)(a1 + 16) = v6;
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.Metallic(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.Metallic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 36) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.AnisotropyAngle()
{
  return &type metadata for PhysicallyBasedMaterial.AnisotropyAngle;
}

void destroy for PhysicallyBasedMaterial.BaseColor(uint64_t a1)
{
  id v2;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = *(id *)(a1 + 8);
    swift_release();

  }
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v4;
  if (v6)
  {
    v8 = *(void **)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v9 = v8;
    swift_retain();
  }
  else
  {
    *v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)(a2 + 20);
  }
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = (_OWORD *)(a1 + 8);
  v8 = (_OWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v9)
    {
      v10 = *(void **)(a1 + 8);
      v11 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v11;
      v12 = v11;

      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
      *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
      *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
    }
    else
    {
      outlined destroy of MaterialParameters.Texture((id *)(a1 + 8));
      v15 = *(_OWORD *)(a2 + 20);
      *v7 = *v8;
      *(_OWORD *)(a1 + 20) = v15;
    }
  }
  else if (v9)
  {
    v13 = *(void **)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v14 = v13;
    swift_retain();
  }
  else
  {
    v16 = *v8;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *v7 = v16;
  }
  return a1;
}

uint64_t assignWithTake for PhysicallyBasedMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
  {
    outlined destroy of MaterialParameters.Texture((id *)(a1 + 8));
LABEL_5:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    return a1;
  }
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_QWORD *)(a1 + 16) = v5;
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.BaseColor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.BaseColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.SheenColor()
{
  return &type metadata for PhysicallyBasedMaterial.SheenColor;
}

uint64_t method lookup function for PhysicallyBasedMaterial.Program()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PhysicallyBasedMaterial.Program.__allocating_init(descriptor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(v1 + 96) + *(_QWORD *)(v1 + 96));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of PhysicallyBasedMaterial.Program.__allocating_init(descriptor:);
  return v6(a1);
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.Program.Descriptor(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  if (*a1 <= 2u)
    v6 = 2;
  else
    v6 = *a1;
  v7 = v6 - 3;
  if (*a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.Program.Descriptor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BBA86F8 + 4 * byte_21BE62455[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BBA872C + 4 * byte_21BE62450[v4]))();
}

uint64_t sub_21BBA872C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBA8734(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBA873CLL);
  return result;
}

uint64_t sub_21BBA8748(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBA8750);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BBA8754(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBA875C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Program.Descriptor()
{
  return &type metadata for PhysicallyBasedMaterial.Program.Descriptor;
}

void destroy for PhysicallyBasedMaterial.ClearcoatNormal(uint64_t a1)
{
  id v1;

  if (*(_QWORD *)(a1 + 8))
  {
    v1 = *(id *)a1;
    swift_release();

  }
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial.Normal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v5 = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial.Normal(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v5 = *(id *)a1;
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = v6;

      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
      *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
      *(_BYTE *)(a1 + 27) = *((_BYTE *)a2 + 27);
    }
    else
    {
      outlined destroy of MaterialParameters.Texture((id *)a1);
      v10 = *(__int128 *)((char *)a2 + 12);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 12) = v10;
    }
  }
  else if (v4)
  {
    v8 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    v9 = v8;
    swift_retain();
  }
  else
  {
    v11 = *a2;
    *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
    *(_OWORD *)a1 = v11;
  }
  return a1;
}

uint64_t assignWithTake for PhysicallyBasedMaterial.Normal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of MaterialParameters.Texture((id *)a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
    return a1;
  }
  v5 = *(id *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.Normal(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.Normal(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.ClearcoatNormal()
{
  return &type metadata for PhysicallyBasedMaterial.ClearcoatNormal;
}

void one-time initialization function for basicBounceAnimationData()
{
  static EmphasizeAnimations.basicBounceAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicBounceAnimationData;
}

void one-time initialization function for playfulBounceAnimationData()
{
  static EmphasizeAnimations.playfulBounceAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulBounceAnimationData;
}

void one-time initialization function for wildBounceAnimationData()
{
  static EmphasizeAnimations.wildBounceAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildBounceAnimationData;
}

_QWORD *specialized static EmphasizeAnimations.createEmphasizeBounceAnimation(style:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (!*a1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 94, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for basicBounceAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 140, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for playfulBounceAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 271, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for wildBounceAnimationData != -1)
LABEL_9:
    swift_once();
LABEL_8:
  v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AnchorEntity.__allocating_init(plane:classification:minimumBounds:)(char *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  *v8 = *a1;
  *((_QWORD *)v8 + 1) = v9;
  *((double *)v8 + 2) = a3;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  return AnchorEntity.init(_:)((uint64_t)v8);
}

uint64_t AnchorEntity.__allocating_init(_:)(uint64_t a1)
{
  swift_allocObject();
  return AnchorEntity.init(_:)(a1);
}

uint64_t AnchorEntity.init(_:)(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;

  v2 = (int *)type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Entity.init()();
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v4);
  *(_QWORD *)&v4[v2[5]] = 1;
  *(_QWORD *)&v4[v2[6]] = 1;
  v6 = &v4[v2[7]];
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[64] = 1;
  swift_retain();
  REAnchoringComponentGetComponentType();
  v9 = REEntityGetOrAddComponentByClass();
  AnchoringComponent.__toCore(_:)(&v9);
  REAnchorComponentGetComponentType();
  if (REEntityGetComponentByClass())
    REEntityRemoveComponent();
  outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for AnchoringComponent);
  swift_release();
  outlined destroy of __RKEntityActionSpecification(a1, type metadata accessor for AnchoringComponent.Target);
  return v5;
}

uint64_t AnchorEntity.__allocating_init(world:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 v7;
  __n128 v8;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;

  v12 = a3;
  v13 = a4;
  v10 = a1;
  v11 = a2;
  v4 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (__n128 *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = v11;
  *v6 = v10;
  v6[1] = v7;
  v8 = v13;
  v6[2] = v12;
  v6[3] = v8;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  return AnchorEntity.init(_:)((uint64_t)v6);
}

uint64_t AnchorEntity.__allocating_init(anchor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  _BYTE v10[32];
  id v11;

  v2 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of Any(a1, (uint64_t)v10);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  swift_dynamicCast();
  v5 = v11;
  v6 = objc_msgSend(v11, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  v7 = AnchorEntity.init(_:)((uint64_t)v4);

  outlined destroy of __AnyARKitObject(a1);
  return v7;
}

uint64_t AnchorEntity.__allocating_init(raycastResult:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  __n128 v28;
  __n128 v29;
  __int128 v31;
  __n128 v32;
  __n128 v33;
  float32x4_t v34;
  __int128 v35;
  id v36[4];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  simd_float4x4 v40;
  simd_float4x4 v41;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (__int128 *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Any(a1, (uint64_t)&v37);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARRaycastResult);
  swift_dynamicCast();
  v5 = v36[0];
  v6 = objc_msgSend(v36[0], sel_anchor);
  if (!v6)
  {
    objc_msgSend(v5, sel_worldTransform);
    *v4 = v15;
    v4[1] = v16;
    v4[2] = v17;
    v4[3] = v18;
    swift_storeEnumTagMultiPayload();
    type metadata accessor for AnchorEntity();
    swift_allocObject();
    v11 = AnchorEntity.init(_:)((uint64_t)v4);
    goto LABEL_13;
  }
  v7 = v6;
  v38 = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  *(_QWORD *)&v37 = v7;
  outlined init with copy of Any((uint64_t)&v37, (uint64_t)v36);
  v8 = v7;
  swift_dynamicCast();
  v9 = (void *)v35;
  v10 = objc_msgSend((id)v35, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  v11 = AnchorEntity.init(_:)((uint64_t)v4);

  outlined destroy of __AnyARKitObject((uint64_t)&v37);
  objc_opt_self();
  v12 = swift_dynamicCastObjCClass();
  if (!v12)
  {
    swift_retain();
    goto LABEL_7;
  }
  v13 = (void *)v12;
  v14 = v8;
  swift_retain();
  if (objc_msgSend(v13, sel_alignment))
  {

LABEL_7:
    objc_msgSend(v8, sel_transform);
    v41 = __invert_f4(v40);
    objc_msgSend(v5, sel_worldTransform, *(_OWORD *)v41.columns, *(_OWORD *)&v41.columns[1], *(_OWORD *)&v41.columns[2], *(_OWORD *)&v41.columns[3]);
    REMakeSRTFromMatrix();
    if (one-time initialization token for identity != -1)
    {
      v33 = v19;
      v34 = (float32x4_t)v20;
      v32 = v21;
      swift_once();
      v21 = v32;
      v19 = v33;
      v20 = (__n128)v34;
    }
    HasTransform.transform.setter(v19, v20, v21);
    swift_release();

    goto LABEL_13;
  }
  objc_msgSend(v5, sel_worldTransform);
  v34 = v22;
  objc_msgSend(v14, sel_transform);
  v24 = vsubq_f32(v34, v23);
  v24.i32[3] = 0;
  v34 = v24;
  objc_msgSend(v5, sel_worldTransform);
  v28.n128_u64[0] = simd_float4x4.scale.getter(v25, v26, v27).n64_u64[0];
  v33 = v28;
  objc_msgSend(v5, sel_worldTransform);
  v37 = 0u;
  v35 = 0u;
  *(_OWORD *)v36 = 0u;
  REDecomposeMatrix();
  v29 = *(__n128 *)v36;
  if (one-time initialization token for identity != -1)
  {
    v32 = *(__n128 *)v36;
    swift_once();
    v29 = v32;
  }
  HasTransform.transform.setter(v33, v29, (__n128)v34);
  swift_release();

LABEL_13:
  outlined destroy of __AnyARKitObject(a1);
  return v11;
}

uint64_t static AnchorEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  v5[8] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[9] = v6;
  return swift_task_switch();
}

uint64_t static AnchorEntity.classLoad(named:in:options:asyncOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 56);
  if (v1)
  {
    v2 = (_QWORD *)(v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *v2 = 0xD000000000000022;
    v2[1] = 0x800000021BE89E60;
    swift_bridgeObjectRelease();
  }
  v3 = static Entity.loadAnchorAsync(named:in:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  *(_QWORD *)(v0 + 80) = v3;
  v6 = (uint64_t (*)(uint64_t))&async function pointer to specialized static Entity.load<A>(_:)[*(int *)async function pointer to specialized static Entity.load<A>(_:)];
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = static AnchorEntity.classLoad(named:in:options:asyncOptions:);
  return v6(v3);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104));
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static AnchorEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 104) = a1;
  }
  return swift_task_switch();
}

uint64_t static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  type metadata accessor for MainActor();
  v5[12] = static MainActor.shared.getter();
  v5[13] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[14] = v6;
  return swift_task_switch();
}

uint64_t static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 56);
  if (v1)
  {
    v2 = (_QWORD *)(v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *v2 = 0xD00000000000002DLL;
    v2[1] = 0x800000021BE89E30;
    swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(void **)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v6 = static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(v5, v3, v4, v0 + 16);
  *(_QWORD *)(v0 + 120) = v6;
  outlined destroy of __DownsamplingStrategy?(v0 + 16);
  v9 = &async function pointer to specialized static Entity.load<A>(_:)[*(int *)async function pointer to specialized static Entity.load<A>(_:)];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v7;
  *v7 = v0;
  v7[1] = static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  return ((uint64_t (*)(uint64_t))v9)(v6);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144));
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 144) = a1;
  }
  return swift_task_switch();
}

uint64_t AnchorEntity.init(_:trackingMode:)(uint64_t a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v4 = (int *)type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a2;
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  v8 = Entity.init()();
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v6);
  v9 = v4[5];
  *(_QWORD *)&v6[v9] = 1;
  v10 = v4[6];
  *(_QWORD *)&v6[v10] = 1;
  v11 = &v6[v4[7]];
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[64] = 1;
  *(_QWORD *)&v6[v9] = v7;
  *(_QWORD *)&v6[v10] = 1;
  swift_retain();
  HasAnchoring.anchoring.setter((uint64_t)v6);
  swift_release();
  outlined destroy of __RKEntityActionSpecification(a1, type metadata accessor for AnchoringComponent.Target);
  return v8;
}

uint64_t AnchorEntity.init(_:trackingMode:physicsSimulation:)(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v6 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a2;
  v13 = *a3;
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  v14 = Entity.init()();
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v8);
  v15 = v9[5];
  *(_QWORD *)&v11[v15] = 1;
  v16 = v9[6];
  *(_QWORD *)&v11[v16] = 1;
  v17 = &v11[v9[7]];
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  v17[64] = 1;
  outlined init with take of AnchoringComponent.Target((uint64_t)v8, (uint64_t)v11);
  *(_QWORD *)&v11[v15] = v12;
  *(_QWORD *)&v11[v16] = v13;
  swift_retain();
  HasAnchoring.anchoring.setter((uint64_t)v11);
  swift_release();
  outlined destroy of __RKEntityActionSpecification(a1, type metadata accessor for AnchoringComponent.Target);
  return v14;
}

uint64_t static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  v5[8] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[9] = v6;
  return swift_task_switch();
}

uint64_t static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 56);
  if (v1)
  {
    v2 = (_QWORD *)(v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *v2 = 0xD000000000000027;
    v2[1] = 0x800000021BE89E00;
    swift_bridgeObjectRelease();
  }
  v3 = static Entity.loadBodyTrackedAsync(named:in:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  *(_QWORD *)(v0 + 80) = v3;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:);
  return v6(v3);
}

uint64_t static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 104) = a1;
  }
  return swift_task_switch();
}

uint64_t static BodyTrackedEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  v5[8] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[9] = v6;
  return swift_task_switch();
}

uint64_t static BodyTrackedEntity.classLoad(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v1 = *(_QWORD *)(v0[5] + 56);
  if (v1)
  {
    v2 = (_QWORD *)(v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *v2 = 0xD000000000000032;
    v2[1] = 0x800000021BE89DC0;
    swift_bridgeObjectRelease();
  }
  v3 = static Entity.loadBodyTrackedAsync(contentsOf:withName:)(v0[2], v0[3], v0[4]);
  v0[10] = v3;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  v4 = (_QWORD *)swift_task_alloc();
  v0[11] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:);
  return v6(v3);
}

uint64_t PointLight.__allocating_init()()
{
  swift_allocObject();
  return Entity.init()();
}

uint64_t PointLight.init(_coreEntity:)(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *a1;
  MEMORY[0x22076D160]();
  return v1;
}

uint64_t PointLight.deinit()
{
  uint64_t v0;

  MEMORY[0x22076D160](*(_QWORD *)(v0 + 16), 0);
  return v0;
}

uint64_t ModelEntity.__allocating_init()()
{
  uint64_t v0;

  swift_allocObject();
  v0 = Entity.init()();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes == 1)
  {
    swift_retain();
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else
  {
    swift_retain();
    if ((REShadowsGetEnableDefaultShadows() & 1) != 0)
      MEMORY[0x22076F17C](*(_QWORD *)(v0 + 16), 1);
  }
  swift_release();
  return v0;
}

uint64_t ModelEntity.init()()
{
  uint64_t v0;

  v0 = Entity.init()();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes == 1)
  {
    swift_retain();
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else
  {
    swift_retain();
    if ((REShadowsGetEnableDefaultShadows() & 1) != 0)
      MEMORY[0x22076F17C](*(_QWORD *)(v0 + 16), 1);
  }
  swift_release();
  return v0;
}

uint64_t ModelEntity.__allocating_init(mesh:materials:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = specialized ModelEntity.init(mesh:materials:)(a1, a2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ModelEntity.init(mesh:materials:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = specialized ModelEntity.init(mesh:materials:)(a1, a2);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)(a1, a2, a3, specialized ModelEntity.init(mesh:materials:collisionShape:mass:), a4);
}

uint64_t ModelEntity.init(mesh:materials:collisionShape:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;

  v4 = specialized ModelEntity.init(mesh:materials:collisionShape:mass:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ModelEntity.__allocating_init(mesh:materials:collisionShapes:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, float))specialized ModelEntity.init(mesh:materials:collisionShapes:mass:), a4);
}

uint64_t ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, float), float a5)
{
  uint64_t v10;

  swift_allocObject();
  v10 = a4(a1, a2, a3, a5);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t ModelEntity.init(mesh:materials:collisionShapes:mass:)(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;

  v4 = specialized ModelEntity.init(mesh:materials:collisionShapes:mass:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static ModelEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  v4[7] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t static ModelEntity.classLoad(named:in:options:asyncOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    v3 = (_QWORD *)(v2 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *v3 = 0xD000000000000021;
    v3[1] = 0x800000021BE89D90;
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v0 + 40);
  }
  v4 = specialized static Entity.loadModelAsync(named:in:options:asyncOptions:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), v1);
  *(_QWORD *)(v0 + 72) = v4;
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = static ModelEntity.classLoad(named:in:options:asyncOptions:);
  return v7(v4);
}

uint64_t static ModelEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 96) = a1;
  }
  return swift_task_switch();
}

uint64_t static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  v4[7] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    v3 = (_QWORD *)(v2 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *v3 = 0xD00000000000002CLL;
    v3[1] = 0x800000021BE89D60;
    swift_bridgeObjectRelease();
    v1 = v0[5];
  }
  v4 = specialized static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(v0[2], v0[3], v0[4], v1);
  v0[9] = v4;
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  v5 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  return v7(v4);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 96) = a1;
  }
  return swift_task_switch();
}

uint64_t TriggerVolume.__allocating_init(shape:filter:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v2 + 32) = a1;
  v5 = v2;
  specialized Array._endMutation()();
  type metadata accessor for TriggerVolume();
  swift_allocObject();
  v3 = Entity.init()();
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5);
  swift_release_n();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t TriggerVolume.__allocating_init(shapes:filter:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = Entity.init()();
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1);
  swift_release_n();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t TriggerVolume.init(shapes:filter:)(uint64_t a1)
{
  uint64_t v2;

  v2 = Entity.init()();
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1);
  swift_release_n();
  swift_bridgeObjectRelease();
  return v2;
}

void TriggerVolume.__allocating_init(_coreEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void TriggerVolume.init(_coreEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t VFXEntity.__allocating_init(effect:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  type metadata accessor for VFXEntity();
  swift_allocObject();
  v2 = Entity.init()();
  v4 = a1;
  v5 = *(_OWORD *)zmmword_21BE41220;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE4AF8];
  v8 = 0;
  v9 = 0;
  v10 = 1;
  swift_retain();
  swift_retain();
  HasVFX.vfxComponent.setter((uint64_t)&v4);
  swift_release();
  swift_release();
  return v2;
}

uint64_t AnchorEntity.__allocating_init(_coreEntity:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = *a1;
  MEMORY[0x22076D160]();
  return v2;
}

uint64_t AnchorEntity.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x22076D160](*(_QWORD *)(v0 + 16), 0);
  return swift_deallocClassInstance();
}

uint64_t specialized AnchorEntity.__allocating_init(world:)(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  __n128 v4;
  __n128 v6;

  v6 = a1;
  v1 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (_OWORD *)((char *)v6.n128_u64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = v6;
  v4.n128_u32[3] = 1.0;
  *v3 = *(_OWORD *)zmmword_21BE41220;
  v3[1] = *(_OWORD *)&zmmword_21BE41220[16];
  v3[2] = *(_OWORD *)&zmmword_21BE41220[32];
  v3[3] = v4;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  return AnchorEntity.init(_:)((uint64_t)v3);
}

uint64_t type metadata accessor for AnchorEntity()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of AnchoringComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnchoringComponent.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of __AnyARKitObject(uint64_t a1)
{
  destroy for AnyMeshBuffer();
  return a1;
}

uint64_t outlined init with take of AnchoringComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnchoringComponent.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized ModelEntity.init(mesh:materials:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = Entity.init()();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1, a2, 0, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes == 1)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else if ((REShadowsGetEnableDefaultShadows() & 1) != 0)
  {
    MEMORY[0x22076F17C](*(_QWORD *)(v4 + 16), 1);
  }
  swift_release();
  swift_release();
  return v4;
}

uint64_t specialized ModelEntity.init(mesh:materials:collisionShape:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  _BYTE v33[176];
  uint64_t v34[2];
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;

  v8 = Entity.init()();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1, a2, 0, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v9 + 32) = a3;
  v34[0] = v9;
  swift_retain();
  specialized Array._endMutation()();
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v34[0]);
  swift_release_n();
  swift_bridgeObjectRelease();
  LOBYTE(v34[0]) = 2;
  v10 = swift_retain();
  PhysicsBodyComponent.init(shape:mass:material:mode:)(v10, 0, (char *)v34, (uint64_t)v13, a4);
  LOBYTE(v34[0]) = v13[0];
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v41 = v20;
  v42 = v21;
  v43 = v22;
  v44 = v23;
  v45 = v24;
  v46 = v25;
  v47 = v26;
  v48 = v27;
  v49 = v28;
  v50 = v29;
  v51 = v30;
  v52 = v31;
  v53 = v32;
  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v34, v11);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v34, (uint64_t)v33);
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v33);
  swift_release_n();
  swift_release();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes == 1)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else if ((REShadowsGetEnableDefaultShadows() & 1) != 0)
  {
    MEMORY[0x22076F17C](*(_QWORD *)(v8 + 16), 1);
  }
  swift_release();
  swift_release();
  swift_release();
  return v8;
}

uint64_t specialized ModelEntity.init(mesh:materials:collisionShapes:mass:)(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _OWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Compound;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34[16];
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  _QWORD v54[2];
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char v73;
  uint64_t v74;

  v8 = Entity.init()();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1, a2, 0, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v9 = swift_bridgeObjectRetain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v9);
  swift_release();
  swift_bridgeObjectRelease();
  result = specialized static ShapeResource.findShapeResource(_:)(a3);
  if (!result)
  {
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v12 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unint64_t)(v12 - 0x1000000000000000) >> 61 == 7)
    {
      result = swift_slowAlloc();
      if ((unint64_t)(v12 - 0x400000000000000) >> 59 == 31)
      {
        v13 = (_QWORD *)result;
        result = swift_slowAlloc();
        if ((v12 & 0x8000000000000000) == 0)
        {
          v14 = result;
          if (v12)
          {
            if ((a3 & 0xC000000000000001) != 0)
            {
              v15 = 0;
              v16 = (_OWORD *)(result + 16);
              do
              {
                v17 = *(_QWORD *)(MEMORY[0x220769770](v15, a3) + 16);
                swift_unknownObjectRelease();
                v13[v15] = v17;
                v18 = MEMORY[0x220769770](v15, a3);
                v32 = *(_OWORD *)(v18 + 48);
                v33 = *(_OWORD *)(v18 + 32);
                swift_unknownObjectRelease();
                *(v16 - 1) = v33;
                *v16 = v32;
                v16 += 2;
                ++v15;
              }
              while (v12 != v15);
            }
            else
            {
              v19 = (uint64_t *)(a3 + 32);
              v20 = (_OWORD *)(result + 16);
              v21 = v13;
              v22 = v12;
              do
              {
                v23 = *v19++;
                *v21++ = *(_QWORD *)(v23 + 16);
                v24 = *(_OWORD *)(v23 + 48);
                *(v20 - 1) = *(_OWORD *)(v23 + 32);
                *v20 = v24;
                v20 += 2;
                --v22;
              }
              while (v22);
            }
          }
          v25 = specialized static __ServiceLocator.shared.getter() + 120;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v25, (uint64_t)v54);
          v26 = v56;
          v27 = v57;
          __swift_project_boxed_opaque_existential_1(v54, v56);
          (*(void (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
          Compound = REAssetManagerCollisionShapeAssetCreateCompound();
          type metadata accessor for ShapeResource();
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = Compound;
          REPoseIdentity();
          *(_OWORD *)(v11 + 32) = v29;
          *(_OWORD *)(v11 + 48) = v30;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
          MEMORY[0x220772F44](v14, -1, -1);
          MEMORY[0x220772F44](v13, -1, -1);
          goto LABEL_16;
        }
LABEL_24:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
  v11 = result;
LABEL_16:
  swift_bridgeObjectRelease();
  v34[0] = 2;
  PhysicsBodyComponent.init(shape:mass:material:mode:)(v11, 0, v34, (uint64_t)v54, a4);
  v34[0] = v54[0];
  v35 = v55;
  v36 = v57;
  v37 = v58;
  v38 = v59;
  v39 = v60;
  v40 = v61;
  v41 = v62;
  v42 = v63;
  v43 = v64;
  v44 = v65;
  v45 = v66;
  v46 = v67;
  v47 = v68;
  v48 = v69;
  v49 = v70;
  v50 = v71;
  v51 = v72;
  v52 = v73;
  v53 = v74;
  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v34, v31);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v34, (uint64_t)v54);
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v54);
  swift_release_n();
  swift_release();
  swift_beginAccess();
  if ((static RKARSystemCore.generateDecimatedMeshes & 1) != 0)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else if ((REShadowsGetEnableDefaultShadows() & 1) != 0)
  {
    MEMORY[0x22076F17C](*(_QWORD *)(v8 + 16), 1);
  }
  swift_release();
  swift_release();
  return v8;
}

uint64_t type metadata accessor for TriggerVolume()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VFXEntity()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnchorEntity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnchorEntity.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t type metadata accessor for BodyTrackedEntity()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PerspectiveCamera()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AmbientLight()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SpotLight()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DirectionalLight()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PointLight()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ModelEntity()
{
  return objc_opt_self();
}

uint64_t method lookup function for ModelEntity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ModelEntity.__allocating_init(mesh:materials:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of ModelEntity.__allocating_init(mesh:materials:collisionShapes:mass:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t method lookup function for TriggerVolume()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TriggerVolume.__allocating_init(shapes:filter:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t outlined destroy of __DownsamplingStrategy?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __DownsamplingStrategy?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void static PointLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 51;
}

void static PointLightComponent.Shadow.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 75;
}

id PointLightComponent.__color.getter()
{
  id *v0;

  return *v0;
}

void PointLightComponent.__color.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*PointLightComponent.__color.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PointLightComponent.intensity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void PointLightComponent.intensity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*PointLightComponent.intensity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PointLightComponent.attenuationRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void PointLightComponent.attenuationRadius.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*PointLightComponent.attenuationRadius.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PointLightComponent.init(cgColor:intensity:attenuationRadius:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>)
{

  *(_QWORD *)a2 = a1;
  *(float *)(a2 + 8) = a3;
  *(float *)(a2 + 12) = a4;
  *(_DWORD *)(a2 + 16) = 0x40000000;
}

void static PointLightComponent.__fromCore(_:)(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  REPointLightComponentGetColorGamut3F();
  REPointLightComponentGetIntensity();
  v3 = v2;
  REPointLightComponentGetAttenuationRadius();
  v5 = v4;
  REPointLightComponentGetAttenuationFalloffExponent();
  v7 = v6;
  v8 = RECreateCGColorFromColorGamut();

  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = v7;
}

void PointLightComponent.init(cgColor:intensity:attenuationRadius:attenuationFalloffExponent:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{

  *(_QWORD *)a2 = a1;
  *(float *)(a2 + 8) = a3;
  *(float *)(a2 + 12) = a4;
  *(float *)(a2 + 16) = a5;
}

uint64_t PointLightComponent.__toCore(_:)()
{
  RECGColorToColorGamut();
  REPointLightComponentSetColorGamut3F();
  REPointLightComponentSetIntensity();
  REPointLightComponentSetAttenuationRadius();
  REPointLightComponentSetAttenuationFalloffExponent();
  return RENetworkMarkComponentDirty();
}

float PointLightComponent.attenuationFalloffExponent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

uint64_t protocol witness for Component.__toCore(_:) in conformance PointLightComponent()
{
  RECGColorToColorGamut();
  REPointLightComponentSetColorGamut3F();
  REPointLightComponentSetIntensity();
  REPointLightComponentSetAttenuationRadius();
  REPointLightComponentSetAttenuationFalloffExponent();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PointLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 51;
}

float PointLightComponent.Shadow.depthBias.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void PointLightComponent.Shadow.depthBias.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*PointLightComponent.Shadow.depthBias.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PointLightComponent.Shadow.maximumDistance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void PointLightComponent.Shadow.maximumDistance.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*PointLightComponent.Shadow.maximumDistance.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PointLightComponent.Shadow.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2048.00048;
  *(_QWORD *)a1 = 0x40A000003F800000;
  *(_BYTE *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void PointLightComponent.Shadow.init(depthBias:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 1084227584;
  *(_BYTE *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t static PointLightComponent.Shadow.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  char v4;
  char ZNear;
  uint64_t result;

  REPointLightShadowMapComponentGetDepthBias();
  v3 = v2;
  if (REPointLightShadowMapComponentGetCullModeEx())
    v4 = 1;
  else
    v4 = 3;
  ZNear = REPointLightShadowMapComponentGetZNear();
  result = REPointLightShadowMapComponentGetZFar();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = 1084227584;
  *(_BYTE *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = ZNear ^ 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = result ^ 1;
  return result;
}

_BYTE *PointLightComponent.Shadow.cullModeOverride.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

int *PointLightComponent.Shadow.zNear.setter(int *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_DWORD *)(v1 + 12) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  return result;
}

int *PointLightComponent.Shadow.zFar.setter(int *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_DWORD *)(v1 + 20) = v2;
  *(_BYTE *)(v1 + 24) = v3;
  return result;
}

uint64_t PointLightComponent.Shadow.__toCore(_:)()
{
  REPointLightShadowMapComponentSetDepthBias();
  REPointLightShadowMapComponentSetZNear();
  REPointLightShadowMapComponentSetZFar();
  RENetworkMarkComponentDirty();
  return REPointLightShadowMapComponentSetCullMode();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PointLightComponent.Shadow(_DWORD *a1@<X8>)
{
  *a1 = 75;
}

void PointLightComponent.attenuationFalloffExponent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

float (*PointLightComponent.attenuationFalloffExponent.modify(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 16);
  return PointLightComponent.attenuationFalloffExponent.modify;
}

float PointLightComponent.attenuationFalloffExponent.modify(float *a1)
{
  float result;

  result = a1[2];
  *(float *)(*(_QWORD *)a1 + 16) = result;
  return result;
}

void PointLightComponent.Shadow.cullModeOverride.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *(*PointLightComponent.Shadow.cullModeOverride.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 8);
  return DirectionalLightComponent.Shadow.cullModeOverride.modify;
}

uint64_t static PointLightComponent.Shadow.ShadowClippingPlane.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = *(unsigned __int8 *)(a2 + 4);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(float *)a1 == *(float *)a2;
  return result;
}

void PointLightComponent.Shadow.zNear.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = *(_BYTE *)(v1 + 16);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = *(_DWORD *)(v1 + 12);
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t *(*PointLightComponent.Shadow.zNear.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;
  int v3;

  *(_QWORD *)a1 = v1;
  v2 = *(_BYTE *)(v1 + 16);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = *(_DWORD *)(v1 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v2;
  return PointLightComponent.Shadow.zNear.modify;
}

uint64_t *PointLightComponent.Shadow.zNear.modify(uint64_t *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = *result;
  v2 = *((_DWORD *)result + 2);
  v3 = *((_BYTE *)result + 12);
  if (v3)
    v2 = 0;
  *(_DWORD *)(v1 + 12) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  return result;
}

void PointLightComponent.Shadow.zFar.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = *(_BYTE *)(v1 + 24);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = *(_DWORD *)(v1 + 20);
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t *(*PointLightComponent.Shadow.zFar.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;
  int v3;

  *(_QWORD *)a1 = v1;
  v2 = *(_BYTE *)(v1 + 24);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = *(_DWORD *)(v1 + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v2;
  return PointLightComponent.Shadow.zFar.modify;
}

uint64_t *PointLightComponent.Shadow.zFar.modify(uint64_t *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = *result;
  v2 = *((_DWORD *)result + 2);
  v3 = *((_BYTE *)result + 12);
  if (v3)
    v2 = 0;
  *(_DWORD *)(v1 + 20) = v2;
  *(_BYTE *)(v1 + 24) = v3;
  return result;
}

uint64_t PointLightComponent.Shadow.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  char v27;
  int v28;
  char v29;

  v23 = a1;
  v22 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_BYTE *)(v1 + 8);
  v10 = *(_DWORD *)(v1 + 12);
  v11 = *(unsigned __int8 *)(v1 + 16);
  v12 = *(_DWORD *)(v1 + 20);
  v13 = *(unsigned __int8 *)(v1 + 24);
  v6.n128_u64[0] = *(_QWORD *)v1;
  v21 = v6;
  v24 = v6.n128_u64[0];
  v25 = v9;
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v14 + 32) = 0x6169426874706564;
  *(_QWORD *)(v14 + 40) = 0xE900000000000073;
  v15 = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v14 + 48) = v21.n128_u32[0];
  *(_QWORD *)(v14 + 72) = v15;
  *(_QWORD *)(v14 + 80) = 0xD000000000000010;
  *(_QWORD *)(v14 + 88) = 0x800000021BE820F0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  *(_BYTE *)(v14 + 96) = v9;
  *(_QWORD *)(v14 + 120) = v16;
  *(_QWORD *)(v14 + 128) = 0x7261654E7ALL;
  *(_QWORD *)(v14 + 136) = 0xE500000000000000;
  if (v11)
    v17 = 0;
  else
    v17 = v10;
  *(_DWORD *)(v14 + 144) = v17;
  *(_BYTE *)(v14 + 148) = v11;
  *(_QWORD *)(v14 + 168) = &type metadata for PointLightComponent.Shadow.ShadowClippingPlane;
  *(_QWORD *)(v14 + 176) = 1918977658;
  *(_QWORD *)(v14 + 184) = 0xE400000000000000;
  *(_QWORD *)(v14 + 216) = &type metadata for PointLightComponent.Shadow.ShadowClippingPlane;
  if (v13)
    v18 = 0;
  else
    v18 = v12;
  *(_DWORD *)(v14 + 192) = v18;
  *(_BYTE *)(v14 + 196) = v13;
  v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v22);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static PointLightComponent.Shadow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3;
  float v4;
  char v5;
  float v6;
  char v7;
  int v8;
  char v9;
  char v10;
  uint64_t result;

  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4))
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(float *)(a1 + 12);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(float *)(a1 + 20);
  v7 = *(_BYTE *)(a1 + 24);
  v8 = *(unsigned __int8 *)(a2 + 8);
  v9 = *(_BYTE *)(a2 + 16);
  v10 = *(_BYTE *)(a2 + 24);
  if (v3 == 3)
  {
    if (v8 != 3)
      return 0;
  }
  else
  {
    result = 0;
    if (v8 == 3 || v3 != v8)
      return result;
  }
  if ((v5 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (v4 != *(float *)(a2 + 12))
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  if ((v7 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return 0;
  }
  else
  {
    if (v6 != *(float *)(a2 + 20))
      v10 = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  return 1;
}

BOOL specialized static PointLightComponent.== infix(_:_:)(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  char v8;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  v8 = static _CFObject.== infix(_:_:)();
  result = 0;
  if ((v8 & 1) != 0 && v2 == v5 && v3 == v6)
    return v4 == v7;
  return result;
}

float sub_21BBABF44@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 16);
  *a2 = result;
  return result;
}

float sub_21BBABF50(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(float *)(a2 + 16) = *a1;
  return result;
}

uint64_t sub_21BBABF5C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *sub_21BBABF68(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_21BBABF74@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  char v3;

  v2 = *(_DWORD *)(result + 12);
  v3 = *(_BYTE *)(result + 16);
  if (v3)
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

int *sub_21BBABF90(int *result, uint64_t a2)
{
  int v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_DWORD *)(a2 + 12) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_21BBABFAC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  char v3;

  v2 = *(_DWORD *)(result + 20);
  v3 = *(_BYTE *)(result + 24);
  if (v3)
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

int *sub_21BBABFC8(int *result, uint64_t a2)
{
  int v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_DWORD *)(a2 + 20) = v2;
  *(_BYTE *)(a2 + 24) = v3;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PointLightComponent(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for PointLightComponent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PointLightComponent(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PointLightComponent()
{
  return &type metadata for PointLightComponent;
}

uint64_t getEnumTagSinglePayload for PointLightComponent.Shadow(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 253);
  if (*(unsigned __int8 *)(a1 + 8) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 8) < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointLightComponent.Shadow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PointLightComponent.Shadow()
{
  return &type metadata for PointLightComponent.Shadow;
}

ValueMetadata *type metadata accessor for PointLightComponent.Shadow.ShadowClippingPlane()
{
  return &type metadata for PointLightComponent.Shadow.ShadowClippingPlane;
}

uint64_t one-time initialization function for noTargetSceneIdentifier()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID();
  __swift_allocate_value_buffer(v3, static __RKChangeSceneAction.noTargetSceneIdentifier);
  v4 = __swift_project_value_buffer(v3, (uint64_t)static __RKChangeSceneAction.noTargetSceneIdentifier);
  UUID.init(uuidString:)();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t static __RKChangeSceneAction.noTargetSceneIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for noTargetSceneIdentifier != -1)
    swift_once();
  v2 = type metadata accessor for UUID();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static __RKChangeSceneAction.noTargetSceneIdentifier);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t key path setter for __RKChangeSceneAction.rootEntity : __RKChangeSceneAction(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  swift_beginAccess();
  *v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t __RKChangeSceneAction.rootEntity.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t __RKChangeSceneAction.rootEntity.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*__RKChangeSceneAction.rootEntity.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKChangeSceneAction.__allocating_init(rootEntity:targetSceneIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t implicit closure #1 in __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(24);
  v0._object = (void *)0x800000021BE89F80;
  v0._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t __RKChangeSceneAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t SceneNullable;
  uint64_t v22;
  id v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  char v27;
  os_log_type_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char v37;
  os_log_type_t v38;
  uint64_t v39;
  char v40;
  os_log_type_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  char *v57;
  char *v58;
  void *v59;
  uint64_t v60;
  os_log_type_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t aBlock;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  void *v83;
  uint64_t (*v84)();
  _QWORD *v85;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v78 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v77 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for DispatchQoS();
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v74 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for DispatchTime();
  v72 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v71 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v73 = (char *)&v65 - v7;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = StaticString.description.getter();
  v81 = v12;
  v13._countAndFlagsBits = 8250;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v15 = aBlock;
  v14 = v81;
  v16 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v16, &aBlock);
  swift_beginAccess();
  v17 = *(_QWORD *)(v0 + 96);
  v18 = *(_BYTE *)(v0 + 104);
  *(_QWORD *)(v0 + 96) = 1;
  *(_BYTE *)(v0 + 104) = 1;
  aBlock = v17;
  LOBYTE(v81) = v18;
  __RKEntityAction.state.didset((uint64_t)&aBlock);
  v19 = (uint64_t *)(v0 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  swift_beginAccess();
  v20 = *v19;
  if (*v19)
  {
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      v22 = SceneNullable;
      v23 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      v70 = v15;
      if (v23)
      {
        v24 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        v24 = Scene.init(coreScene:)(v22);
      }
      v31 = v24;
      v32 = Scene.__interactionService.getter();
      type metadata accessor for __RKEntityInteractionManager();
      v33 = swift_dynamicCastClass();
      if (v33)
      {
        v34 = v33;
        v68 = v32;
        v69 = v31;
        v67 = v2;
        v35 = v1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
        v36 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
        v36(v11, v1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier, v8);
        if (one-time initialization token for noTargetSceneIdentifier != -1)
          swift_once();
        __swift_project_value_buffer(v8, (uint64_t)static __RKChangeSceneAction.noTargetSceneIdentifier);
        v37 = static UUID.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        if ((v37 & 1) != 0)
        {
          aBlock = v70;
          v81 = v14;
          v38 = static os_log_type_t.error.getter();
          specialized InteractionsLogger.log(_:_:)(v38, &aBlock);
          swift_bridgeObjectRelease();
          v39 = *(_QWORD *)(v1 + 96);
          v40 = *(_BYTE *)(v1 + 104);
          *(_QWORD *)(v1 + 96) = 4;
          *(_BYTE *)(v1 + 104) = 1;
          aBlock = v39;
          LOBYTE(v81) = v40;
          __RKEntityAction.state.didset((uint64_t)&aBlock);
          swift_release();
          swift_release();
        }
        else
        {
          v44 = v70;
          swift_beginAccess();
          v45 = *(_QWORD *)(v34 + 48);
          swift_beginAccess();
          if (*(_BYTE *)(v45 + 32) == 1)
          {
            aBlock = v44;
            v81 = v14;
            v46 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v46, &aBlock);
            v36(v11, v35, v8);
            type metadata accessor for RKChangeSceneActionSimulationTechnique();
            v66 = swift_allocObject();
          }
          else
          {
            aBlock = v44;
            v81 = v14;
            v47 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v47, &aBlock);
            v36(v11, v35, v8);
            type metadata accessor for RKChangeSceneActionRuntimeTechnique();
            v48 = swift_allocObject();
            *(_QWORD *)(v48 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity) = 0;
            v66 = v48;
            *(_QWORD *)(v48 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_subcomponent) = 0;
          }
          v49 = v67;
          v50 = v66;
          *(_QWORD *)(v66 + 16) = v20;
          (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v50 + OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier, v11, v8);
          swift_getObjectType();
          swift_retain();
          swift_unknownObjectRetain();
          v51 = protocol witness for RKChangeSceneActionTechnique.switchScenes() in conformance RKChangeSceneActionBasicTechnique();
          swift_unknownObjectRelease();
          if ((v51 & 1) != 0)
          {
            type metadata accessor for OS_dispatch_queue();
            v67 = static OS_dispatch_queue.main.getter();
            v52 = v71;
            static DispatchTime.now()();
            v53 = v73;
            MEMORY[0x220768A98](v52, 0.01);
            v72 = *(_QWORD *)(v72 + 8);
            ((void (*)(char *, uint64_t))v72)(v52, v79);
            v54 = swift_allocObject();
            swift_weakInit();
            v55 = (_QWORD *)swift_allocObject();
            v55[2] = v54;
            v55[3] = v44;
            v55[4] = v14;
            v84 = partial apply for closure #1 in __RKChangeSceneAction.perform(with:);
            v85 = v55;
            aBlock = MEMORY[0x24BDAC760];
            v81 = 1107296256;
            v82 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            v83 = &block_descriptor_14;
            v56 = _Block_copy(&aBlock);
            swift_bridgeObjectRetain();
            swift_release();
            v57 = v74;
            static DispatchQoS.unspecified.getter();
            aBlock = MEMORY[0x24BEE4AF8];
            lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
            v58 = v77;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            v59 = (void *)v67;
            MEMORY[0x220769374](v53, v57, v58, v56);
            _Block_release(v56);

            (*(void (**)(char *, uint64_t))(v78 + 8))(v58, v49);
            (*(void (**)(char *, uint64_t))(v75 + 8))(v57, v76);
            ((void (*)(char *, uint64_t))v72)(v53, v79);
            aBlock = v44;
            v81 = v14;
            v60 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v60, &aBlock);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            return 1;
          }
          aBlock = v44;
          v81 = v14;
          v62 = static os_log_type_t.error.getter();
          specialized InteractionsLogger.log(_:_:)(v62, &aBlock);
          swift_bridgeObjectRelease();
          v63 = *(_QWORD *)(v1 + 96);
          v64 = *(_BYTE *)(v1 + 104);
          *(_QWORD *)(v1 + 96) = 4;
          *(_BYTE *)(v1 + 104) = 1;
          aBlock = v63;
          LOBYTE(v81) = v64;
          __RKEntityAction.state.didset((uint64_t)&aBlock);
          swift_release();
          swift_release();
          swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        aBlock = v70;
        v81 = v14;
        v41 = static os_log_type_t.error.getter();
        specialized InteractionsLogger.log(_:_:)(v41, &aBlock);
        swift_bridgeObjectRelease();
        v42 = *(_QWORD *)(v1 + 96);
        v43 = *(_BYTE *)(v1 + 104);
        *(_QWORD *)(v1 + 96) = 4;
        *(_BYTE *)(v1 + 104) = 1;
        aBlock = v42;
        LOBYTE(v81) = v43;
        __RKEntityAction.state.didset((uint64_t)&aBlock);
        swift_release();
        swift_release();
      }
    }
    else
    {
      aBlock = v15;
      v81 = v14;
      v28 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v28, &aBlock);
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(v1 + 96);
      v30 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = 4;
      *(_BYTE *)(v1 + 104) = 1;
      aBlock = v29;
      LOBYTE(v81) = v30;
      __RKEntityAction.state.didset((uint64_t)&aBlock);
      swift_release();
    }
  }
  else
  {
    aBlock = v15;
    v81 = v14;
    v25 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v25, &aBlock);
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v1 + 96);
    v27 = *(_BYTE *)(v1 + 104);
    *(_QWORD *)(v1 + 96) = 4;
    *(_BYTE *)(v1 + 104) = 1;
    aBlock = v26;
    LOBYTE(v81) = v27;
    __RKEntityAction.state.didset((uint64_t)&aBlock);
  }
  return 0;
}

uint64_t closure #1 in __RKChangeSceneAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  _QWORD v12[3];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v12[0] = a2;
    v12[1] = a3;
    v7 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v7, v12);
    swift_beginAccess();
    v8 = *(_QWORD *)(v6 + 96);
    v9 = *(_BYTE *)(v6 + 104);
    *(_QWORD *)(v6 + 96) = 2;
    *(_BYTE *)(v6 + 104) = 1;
    v10 = v8;
    v11 = v9;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v10);
    return swift_release_n();
  }
  return result;
}

uint64_t __RKChangeSceneAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier, v3);
  v7 = type metadata accessor for __RKChangeSceneAction();
  swift_allocObject();
  v8 = swift_retain();
  v9 = specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(v8, (uint64_t)v6);
  result = swift_release();
  a1[3] = v7;
  *a1 = v9;
  return result;
}

void __RKChangeSceneAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKChangeSceneAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKChangeSceneAction.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_release();
}

uint64_t __RKChangeSceneAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  v1 = v0 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t __RKChangeSceneAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  v1 = v0 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[5];
  _QWORD v23[2];
  uint64_t v24;
  unint64_t v25;

  v3 = v2;
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity) = 0;
  v24 = 91;
  v25 = 0xE100000000000000;
  if (a1)
  {
    v22[4] = a1;
    swift_retain();
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  else
  {
    swift_retain();
    v8 = 0xE300000000000000;
    v7 = 7104878;
  }
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_release();
  v14 = v24;
  v13 = v25;
  swift_beginAccess();
  *v6 = a1;
  swift_retain();
  v15 = swift_release();
  MEMORY[0x24BDAC7A8](v15);
  v22[2] = a2;
  v23[0] = v14;
  v23[1] = v13;
  v16 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v16, v23, partial apply for implicit closure #1 in __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:), v22);
  swift_bridgeObjectRelease();
  v17 = v3 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, a2, v18);
  swift_release();
  v20 = __RKEntityAction.init(targetEntity:)(0);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a2, v18);
  return v20;
}

uint64_t sub_21BBAD488()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BBAD4AC()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RKChangeSceneAction.perform(with:)()
{
  uint64_t *v0;

  return closure #1 in __RKChangeSceneAction.perform(with:)(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for __RKChangeSceneAction()
{
  uint64_t result;

  result = type metadata singleton initialization cache for __RKChangeSceneAction;
  if (!type metadata singleton initialization cache for __RKChangeSceneAction)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21BBAD584@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t ObjC metadata update function for __RKChangeSceneAction()
{
  return type metadata accessor for __RKChangeSceneAction();
}

uint64_t type metadata completion function for __RKChangeSceneAction()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for __RKChangeSceneAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKChangeSceneAction.rootEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of __RKChangeSceneAction.rootEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of __RKChangeSceneAction.rootEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of __RKChangeSceneAction.__allocating_init(rootEntity:targetSceneIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 584))();
}

uint64_t partial apply for implicit closure #1 in __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)()
{
  return implicit closure #1 in __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)();
}

uint64_t static __AssetRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

{
  uint64_t v2;

  outlined init with copy of Any(a1, (uint64_t)&v2);
  return swift_dynamicCast();
}

uint64_t static RemoteVideoPlayer.fromCore(_:)(uint64_t a1)
{
  uint64_t v2;

  outlined init with copy of Any(a1, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  return swift_dynamicCast();
}

uint64_t __AssetRef.__as<A>(_:)()
{
  return swift_dynamicCast();
}

uint64_t static __EntityRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

BOOL static __EntityRef.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t static __SceneRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t static __SceneImportOperationRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t static AssetDescriptorRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t static __ComponentRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t static __ComponentTypeRef.__fromCore(_:)(uint64_t a1)
{
  return static __ComponentTypeRef.__fromCore(_:)(a1, type metadata accessor for REComponentType);
}

uint64_t __ComponentTypeRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __ComponentTypeRef.__as<A>(_:)(a1, a2, type metadata accessor for REComponentType);
}

uint64_t static __EngineRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t __EngineClockModeRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __ComponentTypeRef.__as<A>(_:)(a1, a2, type metadata accessor for REEngineClockMode);
}

uint64_t __ComponentTypeRef.__as<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  a3(0);
  return swift_dynamicCast();
}

uint64_t static __EngineClockModeRef.__fromCore(_:)(uint64_t a1)
{
  return static __ComponentTypeRef.__fromCore(_:)(a1, type metadata accessor for REEngineClockMode);
}

uint64_t static __ComponentTypeRef.__fromCore(_:)(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v4;

  outlined init with copy of Any(a1, (uint64_t)&v4);
  a2(0);
  return swift_dynamicCast();
}

uint64_t __EngineServiceMaskRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __ComponentTypeRef.__as<A>(_:)(a1, a2, type metadata accessor for REEngineServiceMask);
}

uint64_t static __EngineServiceMaskRef.__fromCore(_:)(uint64_t a1)
{
  return static __ComponentTypeRef.__fromCore(_:)(a1, type metadata accessor for REEngineServiceMask);
}

uint64_t __RenderFlagsRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __ComponentTypeRef.__as<A>(_:)(a1, a2, type metadata accessor for RERenderFlags);
}

uint64_t static __RenderFlagsRef.__fromCore(_:)(uint64_t a1)
{
  return static __ComponentTypeRef.__fromCore(_:)(a1, type metadata accessor for RERenderFlags);
}

uint64_t __StartupOptionsRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __ComponentTypeRef.__as<A>(_:)(a1, a2, type metadata accessor for REStartupOptions);
}

uint64_t static __StartupOptionsRef.__fromCore(_:)(uint64_t a1)
{
  return static __ComponentTypeRef.__fromCore(_:)(a1, type metadata accessor for REStartupOptions);
}

uint64_t __PeerIDRef.__as<A>(_:)()
{
  return swift_dynamicCast();
}

uint64_t static __PeerIDRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t __AABBRef.__as<A>(_:)()
{
  type metadata accessor for REAABB(0);
  return swift_dynamicCast();
}

uint64_t __SRTRef.__as<A>(_:)()
{
  type metadata accessor for RESRT(0);
  return swift_dynamicCast();
}

double static __SRTRef.__fromCore(_:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[32];

  outlined init with copy of Any(a1, (uint64_t)v7);
  type metadata accessor for RESRT(0);
  swift_dynamicCast();
  result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

uint64_t __AnimationPlaybackTokenRef.core.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t __AnimationPlaybackTokenRef.core.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*__AnimationPlaybackTokenRef.core.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RemoteVideoPlayer.__as<A>(_:)()
{
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  return swift_dynamicCast();
}

ValueMetadata *type metadata accessor for __REECSManagerRef()
{
  return &type metadata for __REECSManagerRef;
}

ValueMetadata *type metadata accessor for __EntityRef()
{
  return &type metadata for __EntityRef;
}

ValueMetadata *type metadata accessor for __SceneRef()
{
  return &type metadata for __SceneRef;
}

ValueMetadata *type metadata accessor for __SceneImportOperationRef()
{
  return &type metadata for __SceneImportOperationRef;
}

ValueMetadata *type metadata accessor for CustomSystemRef()
{
  return &type metadata for CustomSystemRef;
}

ValueMetadata *type metadata accessor for AssetDescriptorRef()
{
  return &type metadata for AssetDescriptorRef;
}

ValueMetadata *type metadata accessor for __ComponentRef()
{
  return &type metadata for __ComponentRef;
}

ValueMetadata *type metadata accessor for __ComponentTypeRef()
{
  return &type metadata for __ComponentTypeRef;
}

ValueMetadata *type metadata accessor for __AssetRef()
{
  return &type metadata for __AssetRef;
}

ValueMetadata *type metadata accessor for __EngineRef()
{
  return &type metadata for __EngineRef;
}

ValueMetadata *type metadata accessor for __EngineClockModeRef()
{
  return &type metadata for __EngineClockModeRef;
}

ValueMetadata *type metadata accessor for __EngineServiceMaskRef()
{
  return &type metadata for __EngineServiceMaskRef;
}

ValueMetadata *type metadata accessor for __RenderFlagsRef()
{
  return &type metadata for __RenderFlagsRef;
}

ValueMetadata *type metadata accessor for __StartupOptionsRef()
{
  return &type metadata for __StartupOptionsRef;
}

ValueMetadata *type metadata accessor for __PeerIDRef()
{
  return &type metadata for __PeerIDRef;
}

ValueMetadata *type metadata accessor for __AABBRef()
{
  return &type metadata for __AABBRef;
}

ValueMetadata *type metadata accessor for __SRTRef()
{
  return &type metadata for __SRTRef;
}

ValueMetadata *type metadata accessor for __AnimationPlaybackTokenRef()
{
  return &type metadata for __AnimationPlaybackTokenRef;
}

ValueMetadata *type metadata accessor for RemoteVideoPlayer()
{
  return &type metadata for RemoteVideoPlayer;
}

Swift::Float __swiftcall convertToDegrees(radians:)(Swift::Float radians)
{
  return (float)(radians * 180.0) / 3.1416;
}

Swift::Float __swiftcall convertToRadians(degrees:)(Swift::Float degrees)
{
  return (float)(degrees * 3.1416) / 180.0;
}

Swift::Int32 __swiftcall log2RoundUp(_:)(Swift::Int32 a1)
{
  Swift::Int32 result;
  double v2;

  v2 = ceil(log2((double)a1));
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 2147483650.0)
    return (int)v2;
LABEL_7:
  __break(1u);
  return result;
}

void static WorldComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 1009;
}

uint64_t WorldComponent.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for WorldComponent.CoreWorldRoot();
  v2 = swift_allocObject();
  result = RECreateWorldRoot();
  *(_QWORD *)(v2 + 16) = result;
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for WorldComponent.CoreWorldRoot()
{
  return objc_opt_self();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance WorldComponent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = REWorldRootComponentCopyWorldRoot();
  type metadata accessor for WorldComponent.CoreWorldRoot();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  RERetain();
  *a1 = v3;
  return RERelease();
}

uint64_t static WorldComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = REWorldRootComponentCopyWorldRoot();
  type metadata accessor for WorldComponent.CoreWorldRoot();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  RERetain();
  *a1 = v3;
  return RERelease();
}

uint64_t protocol witness for Component.__toCore(_:) in conformance WorldComponent()
{
  REWorldRootComponentSetWorldRoot();
  return RENetworkMarkComponentDirty();
}

uint64_t WorldComponent.__toCore(_:)()
{
  REWorldRootComponentSetWorldRoot();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance WorldComponent(_DWORD *a1@<X8>)
{
  *a1 = 1009;
}

uint64_t WorldComponent.customMirror.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  v10[0] = MEMORY[0x24BEE4AF8];
  v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance WorldComponent()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  v10[0] = MEMORY[0x24BEE4AF8];
  v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

ValueMetadata *type metadata accessor for WorldComponent()
{
  return &type metadata for WorldComponent;
}

uint64_t __RKEmphasisLeanAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisLeanAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisLeanAnimation()
{
  return objc_opt_self();
}

id RERenderManager.device.getter()
{
  return (id)RERenderManagerGetRenderDevice();
}

id RERenderManager.commandQueue.getter()
{
  return (id)RERenderManagerGetRenderCommandQueue();
}

Swift::UInt32 __swiftcall RERenderManager.registerRenderLayer(_:)(CAMetalLayer a1)
{
  return RERenderManagerRegisterRenderLayer();
}

Swift::Void __swiftcall RERenderManager.unregisterRenderLayer(_:)(Swift::UInt32 a1)
{
  RERenderManagerUnregisterRenderLayer();
}

Swift::Void __swiftcall RERenderManager.setLayerSize(_:_:_:)(Swift::UInt32 a1, Swift::Float a2, Swift::Float a3)
{
  RERenderManagerSetLayerSize();
}

uint64_t RERenderManager.getLayerSize(_:)()
{
  return RERenderManagerGetLayerSize();
}

uint64_t RERenderManager.createRenderFrameSettings()()
{
  return RERenderManager.createRenderFrameSettings()((uint64_t (*)(_QWORD))MEMORY[0x24BE23FE8], (void (*)(_QWORD))type metadata accessor for RERenderFrameSettings);
}

uint64_t RERenderManager.createRenderFrameWorkload()()
{
  return RERenderManager.createRenderFrameSettings()((uint64_t (*)(_QWORD))MEMORY[0x24BE23FF0], (void (*)(_QWORD))type metadata accessor for RERenderFrameWorkload);
}

uint64_t RERenderManager.createRenderFrameSettings()(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = a1(*(_QWORD *)(v2 + 16));
  a2(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  return result;
}

Swift::Void __swiftcall RERenderManager.waitUntilScheduled()()
{
  RERenderManagerWaitUntilScheduled();
}

uint64_t RERenderManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t RERenderManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id protocol witness for __RenderService.device.getter in conformance RERenderManager()
{
  return (id)RERenderManagerGetRenderDevice();
}

id protocol witness for __RenderService.commandQueue.getter in conformance RERenderManager()
{
  return (id)RERenderManagerGetRenderCommandQueue();
}

uint64_t dispatch thunk of __RenderService.device.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __RenderService.commandQueue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of __RenderService.__coreRenderManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for RERenderManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for RERenderManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RERenderManager.device.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of RERenderManager.commandQueue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of RERenderManager.registerRenderLayer(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of RERenderManager.unregisterRenderLayer(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of RERenderManager.setLayerSize(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of RERenderManager.getLayerSize(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of RERenderManager.createRenderFrameSettings()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of RERenderManager.createRenderFrameWorkload()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of RERenderManager.waitUntilScheduled()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of RERenderManager.__coreRenderManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

double HasTransform.transform.getter()
{
  uint64_t v0;
  double v1;
  uint64_t v3;
  double v4;
  _BYTE v5[64];

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v0 + 96))(&v3);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v4);
  v1 = v4;
  swift_release();
  outlined init with take of Transform?((uint64_t)&v4, (uint64_t)v5);
  if ((v5[48] & 1) == 0)
    return v1;
  if (one-time initialization token for identity != -1)
    swift_once();
  return *(double *)&static Transform.identity;
}

__n128 HasTransform.convert(transform:from:)(uint64_t a1, float a2, float32x4_t a3, double a4)
{
  uint64_t v4;
  __n128 result;
  __n128 v10;

  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v4);
  specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3, a2);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v10 = result;
    swift_once();
    return v10;
  }
  return result;
}

double HasTransform.transformMatrix(relativeTo:)(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for Entity();
  return static HasTransform.conversionMatrix<A, B>(from:to:)(v1, a1);
}

uint64_t HasTransform.convert(normal:from:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  return HasTransform.convert(normal:from:)(a1, a4, a2, a3, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))simd_float4x4.transform(normal:));
}

double HasTransform.orientation(relativeTo:)(uint64_t a1)
{
  double v2;

  if (one-time initialization token for identity != -1)
    swift_once();
  HasTransform.convert(transform:to:)(a1, *(float *)&static Transform.identity, (float32x4_t)xmmword_2551B1050, *(double *)&xmmword_2551B1060);
  return v2;
}

__n128 HasTransform.scale(relativeTo:)(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __n128 v4;

  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(from:to:)(v1, a1);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v4 = result;
    swift_once();
    return v4;
  }
  return result;
}

double static HasTransform.conversionMatrix<A, B>(from:to:)(uint64_t a1, uint64_t a2)
{
  double result;
  float32x4_t v4;
  uint64_t v5;
  float32x4_t v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  uint64_t v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4x4 v16;
  simd_float4 v17;
  simd_float4 v18;
  simd_float4 v19;
  simd_float4 v20;
  float32x4_t v21;
  simd_float4x4 v22;

  if (a1)
  {
    if (a2 && a1 == a2)
    {
      *(_QWORD *)&result = 1065353216;
      return result;
    }
    swift_retain();
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RETransformComponentGetWorldMatrix4x4F();
      v21 = v4;
      swift_release();
      if (!a2)
        goto LABEL_19;
LABEL_12:
      swift_retain();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RETransformComponentGetWorldMatrix4x4F();
        v19 = v8;
        v20 = v7;
        v17 = v10;
        v18 = v9;
      }
      else
      {
        v11 = HasHierarchy.parent.getter();
        if (!v11)
        {
          swift_release();
          v16 = *(simd_float4x4 *)zmmword_21BE41220;
          goto LABEL_20;
        }
        *(double *)v12.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v11, 0);
        v19 = v13;
        v20 = v12;
        v17 = v15;
        v18 = v14;
        swift_release();
      }
      swift_release();
      v16.columns[1] = v19;
      v16.columns[0] = v20;
      v16.columns[3] = v17;
      v16.columns[2] = v18;
LABEL_20:
      v22 = __invert_f4(v16);
      *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v22.columns[0], v21.f32[0]), (float32x4_t)v22.columns[1], *(float32x2_t *)v21.f32, 1), (float32x4_t)v22.columns[2], v21, 2), (float32x4_t)v22.columns[3], v21, 3).u64[0];
      return result;
    }
    v5 = HasHierarchy.parent.getter();
    if (v5)
    {
      *(double *)v6.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v5, 0);
      v21 = v6;
      swift_release();
      swift_release();
      if (a2)
        goto LABEL_12;
    }
    else
    {
      swift_release();
      v21 = *(float32x4_t *)zmmword_21BE41220;
      if (a2)
        goto LABEL_12;
    }
LABEL_19:
    v16 = *(simd_float4x4 *)zmmword_21BE41220;
    goto LABEL_20;
  }
  *(_QWORD *)&result = 1065353216;
  v21 = *(float32x4_t *)zmmword_21BE41220;
  if (a2)
    goto LABEL_12;
  return result;
}

uint64_t HasTransform.transform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t (*v4)(_BYTE *, _QWORD);
  _BYTE v6[32];
  _OWORD v7[3];
  char v8;

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v8 = 0;
  v4 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 112))(v6);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v7);
  swift_release();
  return v4(v6, 0);
}

void (*HasTransform.transform.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(__n128 **a1)
{
  uint64_t v3;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  *(double *)&v8 = HasTransform.transform.getter();
  *(_OWORD *)v7 = v8;
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = v10;
  return HasTransform.transform.modify;
}

void HasTransform.transform.modify(__n128 **a1)
{
  __n128 *v1;

  v1 = *a1;
  HasTransform.transform.setter(**a1, (*a1)[1], (*a1)[2]);
  free(v1);
}

uint64_t HasTransform.scale.setter(__n128 a1)
{
  __n128 v1;
  __n128 v2;

  HasTransform.transform.getter();
  return HasTransform.transform.setter(a1, v1, v2);
}

void (*HasTransform.scale.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(__n128 **a1)
{
  uint64_t v3;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  *(double *)&v8 = HasTransform.transform.getter();
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = v10;
  *(_OWORD *)v7 = v8;
  return HasTransform.scale.modify;
}

void HasTransform.scale.modify(__n128 **a1)
{
  __n128 *v1;

  v1 = *a1;
  HasTransform.transform.setter(**a1, (*a1)[1], (*a1)[2]);
  free(v1);
}

uint64_t HasTransform.setScale(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v15;

  type metadata accessor for Entity();
  *(double *)v4.i64 = static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v2);
  v8 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v4, a2.f32[0]), (float32x4_t)0, v5), (float32x4_t)0, v6), (float32x4_t)0, v7);
  v9 = vmulq_f32(v4, (float32x4_t)0);
  v10.n128_u64[0] = simd_float4x4.scale.getter(v8, (int32x4_t)vmlaq_f32(vmlaq_f32(vmlaq_lane_f32(v9, v5, *(float32x2_t *)a2.f32, 1), (float32x4_t)0, v6), (float32x4_t)0, v7), (int8x16_t)vmlaq_f32(vmlaq_laneq_f32(vmlaq_f32(v9, (float32x4_t)0, v5), v6, a2, 2), (float32x4_t)0, v7)).n64_u64[0];
  v15 = v10;
  HasTransform.transform.getter();
  return HasTransform.transform.setter(v15, v11, v12);
}

double static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(uint64_t a1, uint64_t a2)
{
  simd_float4x4 v3;
  float32x4_t v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  double result;
  simd_float4x4 v10;
  float32x4_t v11;
  simd_float4x4 v12;

  v3 = *(simd_float4x4 *)zmmword_21BE41220;
  v11 = *(float32x4_t *)zmmword_21BE41220;
  if (!a1)
  {
LABEL_4:
    if (!a2)
      goto LABEL_10;
    goto LABEL_5;
  }
  swift_retain();
  RETransformComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RETransformComponentGetWorldMatrix4x4F();
    v11 = v4;
    swift_release();
    v3 = *(simd_float4x4 *)zmmword_21BE41220;
    goto LABEL_4;
  }
  swift_release();
  v3 = *(simd_float4x4 *)zmmword_21BE41220;
  v11 = *(float32x4_t *)zmmword_21BE41220;
  if (!a2)
    goto LABEL_10;
LABEL_5:
  swift_retain();
  RETransformComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RETransformComponentGetParentWorldMatrix4x4F();
    v10.columns[0] = v5;
    v10.columns[1] = v6;
    v10.columns[2] = v7;
    v10.columns[3] = v8;
    swift_release();
    v3 = v10;
  }
  else
  {
    swift_release();
    v3 = *(simd_float4x4 *)zmmword_21BE41220;
  }
LABEL_10:
  v12 = __invert_f4(v3);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v12.columns[0], v11.f32[0]), (float32x4_t)v12.columns[1], *(float32x2_t *)v11.f32, 1), (float32x4_t)v12.columns[2], v11, 2), (float32x4_t)v12.columns[3], v11, 3).u64[0];
  return result;
}

double HasTransform.position.getter()
{
  double v0;

  HasTransform.transform.getter();
  return v0;
}

uint64_t HasTransform.position.setter(__n128 a1)
{
  __n128 v1;
  __n128 v2;

  v1.n128_f64[0] = HasTransform.transform.getter();
  return HasTransform.transform.setter(v1, v2, a1);
}

void (*HasTransform.position.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(__n128 **a1)
{
  uint64_t v3;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  *(double *)&v8 = HasTransform.transform.getter();
  *((_OWORD *)v7 + 1) = v8;
  *((_OWORD *)v7 + 2) = v9;
  *(_OWORD *)v7 = v10;
  return HasTransform.position.modify;
}

void HasTransform.position.modify(__n128 **a1)
{
  __n128 *v1;

  v1 = *a1;
  HasTransform.transform.setter((*a1)[1], (*a1)[2], **a1);
  free(v1);
}

float32x2_t HasTransform.position(relativeTo:)(uint64_t a1)
{
  uint64_t v1;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  type metadata accessor for Entity();
  *(double *)v3.i64 = static HasTransform.conversionMatrix<A, B>(from:to:)(v1, a1);
  return simd_float4x4.transform(position:)((float32x4_t)0, v3, v4, v5, v6);
}

uint64_t HasTransform.convert(position:to:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  return HasTransform.convert(position:to:)(a1, a4, a2, a3, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))simd_float4x4.transform(position:));
}

uint64_t HasTransform.setPosition(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v13;

  type metadata accessor for Entity();
  *(double *)v4.i64 = static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v2);
  v8.n128_u64[0] = (unint64_t)simd_float4x4.transform(position:)(a2, v4, v5, v6, v7);
  v13 = v8;
  v9.n128_f64[0] = HasTransform.transform.getter();
  return HasTransform.transform.setter(v9, v10, v13);
}

double HasTransform.orientation.getter()
{
  double v0;

  HasTransform.transform.getter();
  return v0;
}

uint64_t HasTransform.orientation.setter(__n128 a1)
{
  __n128 v1;
  __n128 v2;

  v1.n128_f64[0] = HasTransform.transform.getter();
  return HasTransform.transform.setter(v1, a1, v2);
}

void (*HasTransform.orientation.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(__n128 **a1)
{
  uint64_t v3;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  *(double *)&v8 = HasTransform.transform.getter();
  *((_OWORD *)v7 + 1) = v8;
  *((_OWORD *)v7 + 2) = v9;
  *(_OWORD *)v7 = v10;
  return HasTransform.orientation.modify;
}

void HasTransform.orientation.modify(__n128 **a1)
{
  __n128 *v1;

  v1 = *a1;
  HasTransform.transform.setter((*a1)[1], **a1, (*a1)[2]);
  free(v1);
}

__n128 HasTransform.convert(transform:to:)(uint64_t a1, float a2, float32x4_t a3, double a4)
{
  uint64_t v4;
  __n128 result;
  __n128 v10;

  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(from:to:)(v4, a1);
  specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3, a2);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v10 = result;
    swift_once();
    return v10;
  }
  return result;
}

uint64_t HasTransform.setOrientation(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v9;

  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v2);
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized simd_float4x4.init(translation:rotation:scale:)(0.0, a2, 1.0);
  REMakeSRTFromMatrix();
  v9 = v4;
  v5.n128_f64[0] = HasTransform.transform.getter();
  return HasTransform.transform.setter(v5, v9, v6);
}

uint64_t HasTransform.setTransformMatrix(_:relativeTo:)(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t v5;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  __n128 v11;
  __n128 v12;
  __n128 v14;
  float32x4_t v16;
  int8x16_t v18;
  int32x4_t v20;
  float32x4_t v22;

  type metadata accessor for Entity();
  *(double *)v7.i64 = static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v5);
  v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a2.f32[0]), v8, *(float32x2_t *)a2.f32, 1), v9, a2, 2), v10, a2, 3);
  v20 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a3.f32[0]), v8, *(float32x2_t *)a3.f32, 1), v9, a3, 2), v10, a3, 3);
  v18 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a4.f32[0]), v8, *(float32x2_t *)a4.f32, 1), v9, a4, 2), v10, a4, 3);
  v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a5.f32[0]), v8, *(float32x2_t *)a5.f32, 1), v9, a5, 2), v10, a5, 3);
  HasTransform.transform.getter();
  v11 = (__n128)v16;
  v11.n128_u32[3] = 0;
  v14 = v11;
  REDecomposeMatrix();
  v12.n128_u64[0] = simd_float4x4.scale.getter(v22, v20, v18).n64_u64[0];
  return HasTransform.transform.setter(v12, (__n128)0, v14);
}

uint64_t HasTransform.convert(position:from:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  return HasTransform.convert(normal:from:)(a1, a4, a2, a3, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))simd_float4x4.transform(position:));
}

uint64_t HasTransform.convert(normal:from:)(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128, __n128))
{
  uint64_t v5;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;

  type metadata accessor for Entity();
  v7.n128_f64[0] = static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v5);
  return a5(a2, v7, v8, v9, v10);
}

double HasTransform.convert(direction:from:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  type metadata accessor for Entity();
  *(double *)v4.i64 = static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v2);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, a2.f32[0]), v5, *(float32x2_t *)a2.f32, 1), v6, a2, 2).u64[0];
  return result;
}

double HasTransform.convert(direction:to:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  type metadata accessor for Entity();
  *(double *)v4.i64 = static HasTransform.conversionMatrix<A, B>(from:to:)(v2, a1);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, a2.f32[0]), v5, *(float32x2_t *)a2.f32, 1), v6, a2, 2).u64[0];
  return result;
}

uint64_t HasTransform.convert(normal:to:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  return HasTransform.convert(position:to:)(a1, a4, a2, a3, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))simd_float4x4.transform(normal:));
}

uint64_t HasTransform.convert(position:to:)(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128, __n128))
{
  uint64_t v5;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;

  type metadata accessor for Entity();
  v7.n128_f64[0] = static HasTransform.conversionMatrix<A, B>(from:to:)(v5, a1);
  return a5(a2, v7, v8, v9, v10);
}

BOOL HasTransform.isMinusZForward.getter()
{
  REMeshComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 0;
  REAmbientLightComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REAREnvironmentProbeComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  RECustomMatrixCameraComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REDirectionalLightComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REImageBasedLightComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  RELightComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REListenerComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REOrthographicCameraComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REPerspectiveCameraComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REPointLightComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  RERectAreaLightComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REShadowMapComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  RESpotLightComponentGetComponentType();
  if (REEntityGetComponentByClass())
    return 1;
  REAudioPlayerComponentGetComponentType();
  return REEntityGetComponentByClass() != 0;
}

uint64_t HasTransform.look(at:from:upVector:relativeTo:)(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  char v5;

  v5 = 0;
  return HasTransform.look(at:from:upVector:relativeTo:forward:)(a1, &v5, a2, a3, a4);
}

uint64_t HasTransform.look(at:from:upVector:relativeTo:forward:)(uint64_t a1, char *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t v5;
  char v7;
  __n128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  float32x4_t v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __n128 v46;
  float32x4_t v47;
  float32x4_t v49;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __n128 v55;
  float32x4_t v56;
  __n128 v57;
  __n128 v58;

  v7 = *a2;
  v8.n128_f64[0] = HasTransform.transform.getter();
  v46 = v8;
  type metadata accessor for Entity();
  *(double *)v9.i64 = static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v5);
  v51 = v9;
  v53 = v10;
  v56 = v11;
  v47 = v12;
  *(float32x2_t *)v13.f32 = simd_float4x4.transform(position:)(a3, v9, v10, v11, v12);
  v49 = v13;
  *(float32x2_t *)v14.f32 = simd_float4x4.transform(position:)(a4, v51, v53, v56, v47);
  v15 = v14;
  v16 = vsubq_f32(v49, v14);
  v17 = vmulq_f32(v16, v16);
  v18 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0];
  if (v18 >= 1.0e-10)
  {
    v22 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, a5.f32[0]), v53, *(float32x2_t *)a5.f32, 1), v56, a5, 2);
    v23 = v18;
    v24 = vrsqrte_f32((float32x2_t)LODWORD(v18));
    v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)LODWORD(v23), vmul_f32(v24, v24)));
    v26 = vmulq_n_f32(v16, vmul_f32(v25, vrsqrts_f32((float32x2_t)LODWORD(v23), vmul_f32(v25, v25))).f32[0]);
    if ((v7 & 1) == 0)
    {
      *(float32x2_t *)v26.f32 = vsub_f32(0, *(float32x2_t *)v26.f32);
      v26.f32[2] = 0.0 - v26.f32[2];
      v26.i32[3] = 0;
    }
    v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL);
    v28 = vmlaq_f32(vmulq_f32(v27, vnegq_f32(v22)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
    v29 = vmulq_f32(v28, v28);
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), v29)).f32[0] < 1.0e-10)
    {
      v54 = v26;
      v52 = v27;
      HasTransform.transform.getter();
      v31 = v30;
      v32 = vmulq_f32(v30, (float32x4_t)xmmword_21BE516F0);
      v33 = (int32x4_t)vnegq_f32(v32);
      v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
      v35 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
      v35.i32[0] = v33.i32[1];
      v35.i32[3] = v33.i32[2];
      v36 = vmlaq_f32(vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), (float32x4_t)0, (float32x4_t)vextq_s8(v34, v34, 8uLL)), (float32x4_t)0, v35);
      v37 = (int32x4_t)vnegq_f32(v36);
      v38 = (int8x16_t)vtrn2q_s32((int32x4_t)v36, vtrn1q_s32((int32x4_t)v36, v37));
      v39 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v37, 8uLL), *(float32x2_t *)v31.f32, 1), (float32x4_t)vextq_s8(v38, v38, 8uLL), v31.f32[0]);
      v40 = (float32x4_t)vrev64q_s32((int32x4_t)v36);
      v40.i32[0] = v37.i32[1];
      v40.i32[3] = v37.i32[2];
      v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v36, v31, 3), v40, v31, 2), v39);
      v42 = vmlaq_f32(vmulq_f32(v52, vnegq_f32(v41)), v54, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL));
      v43 = vmulq_f32(v42, v42);
      if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), v43)).f32[0] < 1.0e-10)HasTransform.isMinusZForward.getter();
    }
    REMakeSRTFromMatrix();
    if (one-time initialization token for identity != -1)
    {
      v55 = v21;
      v58 = v20;
      swift_once();
      v21 = v55;
      v20 = v58;
    }
    v19 = v46;
  }
  else
  {
    v57 = (__n128)v15;
    v19.n128_f64[0] = HasTransform.transform.getter();
    v21 = v57;
  }
  return HasTransform.transform.setter(v19, v20, v21);
}

uint64_t HasTransform.move(to:relativeTo:)(uint64_t a1, float a2, float32x4_t a3, double a4)
{
  specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3, a2);
  return HasTransform.move(to:relativeTo:)(a1);
}

uint64_t HasTransform.move(to:relativeTo:)(uint64_t a1)
{
  uint64_t v1;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v1);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v9 = v3;
    v7 = v5;
    v8 = v4;
    swift_once();
    v5 = v7;
    v4 = v8;
    v3 = v9;
  }
  return HasTransform.transform.setter(v3, v4, v5);
}

uint64_t HasTransform.move(to:relativeTo:duration:timingFunction:)(uint64_t a1, uint64_t a2, float a3, float32x4_t a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  float32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  double v13;
  uint64_t v15[2];
  int v16;
  char v17;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 20);
  *(double *)v10.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(a5, a4, a3);
  v15[0] = v6;
  v15[1] = v7;
  v16 = v8;
  v17 = v9;
  return HasTransform.move(to:relativeTo:duration:timingFunction:)(a1, v15, v10, v11, v12, v13);
}

uint64_t HasTransform.move(to:relativeTo:duration:timingFunction:)(uint64_t a1, uint64_t *a2, float32x4_t a3, int32x4_t a4, int8x16_t a5, double a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  float v26;
  float32x4_t v27;
  double v28;
  __n128 v30;
  int8x16_t v31;
  __n128 v32;
  __n128 v34;
  __int128 v35;
  int v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_DWORD *)a2 + 4);
  v11 = *((_BYTE *)a2 + 20);
  *(__n64 *)v12.i8 = simd_float4x4.scale.getter(a3, a4, a5);
  v31 = v12;
  v35 = 0u;
  REDecomposeMatrix();
  v15 = 0u;
  if (one-time initialization token for identity != -1)
  {
    swift_once();
    v15 = 0u;
  }
  v13.f32[0] = fabsf(*(float *)v31.i32);
  v14.i64[0] = 0x3400000034000000;
  v16 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v14, v13), 0);
  v17 = (float32x4_t)v31;
  v17.i32[0] = 872415232;
  v18 = vbslq_s8(v16, (int8x16_t)v17, v31);
  v17.f32[0] = fabsf(*(float *)&v18.i32[1]);
  v19 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v14, v17), 0);
  v20 = v18;
  v20.i32[1] = 872415232;
  v21 = vbslq_s8((int8x16_t)v19, v20, v18);
  v19.f32[0] = fabsf(*(float *)&v21.i32[2]);
  v22 = v21;
  v22.i32[2] = 872415232;
  specialized simd_float4x4.init(translation:rotation:scale:)(a6, v15, *(float *)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v14, v19), 0), v22, v21).i32);
  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v6);
  REMakeSRTFromMatrix();
  v32 = v24;
  v34 = v23;
  v30 = v25;
  RETransformComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETransformComponentGetLocalUnanimatedSRT();
  *(_QWORD *)&v35 = v8;
  *((_QWORD *)&v35 + 1) = v9;
  v36 = v10;
  v37 = v11;
  return HasTransform.animateTransform(from:to:duration:timingFunction:)((uint64_t)&v35, v26, v27, v28, v34, v32, v30);
}

uint64_t HasTransform.animateTransform(from:to:duration:timingFunction:)(uint64_t a1, float a2, float32x4_t a3, double a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TimelineAsset;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  simd_float4x4 v39;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 20);
  v12 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 120))();
  swift_release();
  if (!v12)
  {
    type metadata accessor for AnimationPlaybackController();
    v23 = swift_allocObject();
    swift_weakInit();
    *(_QWORD *)(v23 + 16) = 0;
    swift_beginAccess();
    swift_weakAssign();
    return v23;
  }
  HasTransform.transform.getter();
  HasTransform.transform.setter(a5, a6, a7);
  REBindPointCreateReferenceForEntityAnimatedValuesSRT();
  REBindPointSetOverrideEnabled();
  REBindPointSetSRT();
  *(double *)v39.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(a7.n128_f64[0], (float32x4_t)a6, a5.n128_f32[0]);
  __invert_f4(v39);
  specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3, a2);
  REMakeSRTFromMatrix();
  v35 = v13;
  v36 = v14;
  v37 = v15;
  RESRTIdentity();
  RETimelineDefinitionCreateFromToBySRTAnimation();
  RETimelineDefinitionSetSRTFromValue();
  RETimelineDefinitionSetSRTToValue();
  RETimelineDefinitionSetDuration();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetFillMode();
  RETimelineDefinitionSetAdditive();
  v30 = v8;
  v31 = v9;
  LODWORD(v32) = v10;
  BYTE4(v32) = v11;
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v16 + 16))
    RETimelineDefinitionSetEasingFunctionEx();
  v17 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v17, (uint64_t)&v30);
  v18 = v33;
  v19 = v34;
  __swift_project_boxed_opaque_existential_1(&v30, v33);
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
  REAnimationComponentGetComponentType();
  result = REEntityGetOrAddComponentByClass();
  if (TimelineAsset)
  {
    v30 = 2;
    LODWORD(v31) = 4352;
    v32 = "SRTFROMTO";
    LOBYTE(v33) = 0;
    v22 = REAnimationComponentPlay();
    type metadata accessor for AnimationPlaybackController();
    v23 = swift_allocObject();
    swift_weakInit();
    *(_QWORD *)(v23 + 16) = v22;
    swift_beginAccess();
    swift_weakAssign();
    RERelease();
    swift_release();
    RERelease();
    REBindPointDestroy();
    return v23;
  }
  __break(1u);
  return result;
}

uint64_t HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(from:to:)(v2, a2);
  return REEntityComputeMeshBounds();
}

void sub_21BBB0110(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(double *)&v2 = HasTransform.transform.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
}

uint64_t sub_21BBB013C(__n128 *a1)
{
  return HasTransform.transform.setter(*a1, a1[1], a1[2]);
}

uint64_t sub_21BBB0164()
{
  return 16;
}

__n128 sub_21BBB0170(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BBB017C(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = HasTransform.scale.getter();
  *a1 = v2;
}

uint64_t sub_21BBB01A4(__n128 *a1)
{
  return HasTransform.scale.setter(*a1);
}

uint64_t sub_21BBB01C8()
{
  return 16;
}

__n128 sub_21BBB01D4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BBB01E0(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = HasTransform.position.getter();
  *a1 = v2;
}

uint64_t sub_21BBB0208(__n128 *a1)
{
  return HasTransform.position.setter(*a1);
}

uint64_t sub_21BBB022C()
{
  return 16;
}

__n128 sub_21BBB0238(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BBB0244(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = HasTransform.orientation.getter();
  *a1 = v2;
}

uint64_t sub_21BBB026C(__n128 *a1)
{
  return HasTransform.orientation.setter(*a1);
}

uint64_t sub_21BBB0290()
{
  return 16;
}

__n128 sub_21BBB029C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t __RealityFileARReferenceProvidingPlugin.__fetchReferenceObject(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  Class isa;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  result = __RealityFileARReferenceProvidingPlugin.arReferenceRawData(group:name:)(a1, a2, a3, a4);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    v13 = result;
    v14 = v12;
    v15 = objc_allocWithZone(MEMORY[0x24BDB1540]);
    swift_bridgeObjectRetain();
    v30 = v13;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v17 = (void *)MEMORY[0x220768C3C](a3, a4);
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(v15, sel_initWithArchiveData_name_error_, isa, v17, 0);

    v18 = type metadata accessor for __RealityFileURLResolver();
    outlined init with copy of __REAssetService(v5 + 16, (uint64_t)&v31);
    v19 = v33;
    v20 = v34;
    v21 = __swift_project_boxed_opaque_existential_1(&v31, v33);
    specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v21, v18, v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    v22._countAndFlagsBits = 47;
    v22._object = (void *)0xE100000000000000;
    if (String.hasSuffix(_:)(v22)
      || (v23 = 47,
          v24 = (void *)0xE100000000000000,
          v25._countAndFlagsBits = 47,
          v25._object = (void *)0xE100000000000000,
          String.hasPrefix(_:)(v25)))
    {
      v23 = 0;
      v24 = (void *)0xE000000000000000;
    }
    v31 = a1;
    v32 = a2;
    swift_bridgeObjectRetain();
    v26._countAndFlagsBits = v23;
    v26._object = v24;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = a3;
    v27._object = a4;
    String.append(_:)(v27);
    swift_release();
    swift_bridgeObjectRelease();
    v28 = (void *)MEMORY[0x220768C3C](v31, v32);
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_setName_, v28);

    *(_QWORD *)(a5 + 24) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARReferenceObject);
    result = outlined consume of Data?(v30, v14);
    *(_QWORD *)a5 = v29;
  }
  return result;
}

void __RealityFileARReferenceProvidingPlugin.__fetchReferenceImage(group:name:physicalWidth:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v6;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a6 <= 0.0)
    goto LABEL_9;
  v13 = __RealityFileARReferenceProvidingPlugin.arReferenceRawData(group:name:)(a1, a2, a3, a4);
  if (v14 >> 60 == 15)
    goto LABEL_9;
  v15 = v13;
  v16 = v14;
  specialized static CGImageRef.image(with:)(v13, v14);
  if (!v17)
  {
    outlined consume of Data?(v15, v16);
LABEL_9:
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return;
  }
  v31 = v17;
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1538]), sel_initWithCGImage_orientation_physicalWidth_, v17, 1, a6);
  v18 = type metadata accessor for __RealityFileURLResolver();
  outlined init with copy of __REAssetService(v6 + 16, (uint64_t)&v32);
  v19 = v34;
  v20 = v35;
  v21 = __swift_project_boxed_opaque_existential_1(&v32, v34);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v21, v18, v19, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  v22._countAndFlagsBits = 47;
  v22._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v22)
    || (v23 = 47,
        v24 = (void *)0xE100000000000000,
        v25._countAndFlagsBits = 47,
        v25._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v25)))
  {
    v23 = 0;
    v24 = (void *)0xE000000000000000;
  }
  v32 = a1;
  v33 = a2;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = v23;
  v26._object = v24;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = a3;
  v27._object = a4;
  String.append(_:)(v27);
  swift_release();
  swift_bridgeObjectRelease();
  v28 = (void *)MEMORY[0x220768C3C](v32, v33);
  swift_bridgeObjectRelease();
  objc_msgSend(v30, sel_setName_, v28);

  *(_QWORD *)(a5 + 24) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARReferenceImage);
  v29 = v30;
  outlined consume of Data?(v15, v16);

  *(_QWORD *)a5 = v29;
}

uint64_t __RealityFileARReferenceProvidingPlugin.arReferenceRawData(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  v10 = type metadata accessor for __RealityFileURLResolver();
  outlined init with copy of __REAssetService(v5 + 16, (uint64_t)&v28);
  v11 = v30;
  v12 = v31;
  v13 = __swift_project_boxed_opaque_existential_1(&v28, v30);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v13, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v14._countAndFlagsBits = 47;
  v14._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v14)
    || (v15 = 47,
        v16 = (void *)0xE100000000000000,
        v17._countAndFlagsBits = 47,
        v17._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v17)))
  {
    v15 = 0;
    v16 = (void *)0xE000000000000000;
  }
  v28 = a1;
  v29 = a2;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v15;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = a3;
  v19._object = a4;
  String.append(_:)(v19);
  swift_release();
  swift_bridgeObjectRelease();
  v21 = v28;
  v20 = v29;
  swift_beginAccess();
  v22 = *(_QWORD *)(v5 + 72);
  if (!*(_QWORD *)(v22 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain();
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v25 = *(_QWORD *)(v22 + 56) + 16 * v23;
  v26 = *(_QWORD *)v25;
  outlined copy of Data._Representation(*(_QWORD *)v25, *(_QWORD *)(v25 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t __RealityFileARReferenceProvidingPlugin.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RealityFileARReferenceProvidingPlugin()
{
  return objc_opt_self();
}

uint64_t protocol witness for __ARReferenceProvidingPlugin.schemePrefix.getter in conformance __RealityFileARReferenceProvidingPlugin()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for __ARReferenceProviding.__fetchReferenceObject(group:name:) in conformance __RealityFileARReferenceProvidingPlugin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  return __RealityFileARReferenceProvidingPlugin.__fetchReferenceObject(group:name:)(a1, a2, a3, a4, a5);
}

void protocol witness for __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:) in conformance __RealityFileARReferenceProvidingPlugin(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  __RealityFileARReferenceProvidingPlugin.__fetchReferenceImage(group:name:physicalWidth:)(a1, a2, a3, a4, a5, a6);
}

uint64_t EntityAction.isReversible.getter()
{
  return 1;
}

uint64_t ActionEvent.animationState.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;

  v4 = *(int *)(result + 76);
  v5 = v2 + *(int *)(result + 72);
  if (*(_BYTE *)(v5 + 8))
    v6 = -1.0;
  else
    v6 = *(double *)v5;
  if (*(_BYTE *)(v2 + v4 + 8))
    v7 = -1.0;
  else
    v7 = *(double *)(v2 + v4);
  v8 = v2 + *(int *)(result + 68);
  if (*(_BYTE *)(v8 + 8))
    v9 = -1.0;
  else
    v9 = *(double *)v8;
  v10 = *(_QWORD *)(v2 + *(int *)(result + 64));
  if (v10)
  {
    result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        v11 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        v11 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        v11 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        v11 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        v11 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        v11 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        v11 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        v11 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(_QWORD *)(a2 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v12, v11);
    result = swift_allocObject();
    *(_QWORD *)a2 = result;
    *(double *)(result + 16) = v9;
    *(double *)(result + 24) = v6;
    *(double *)(result + 32) = v7;
    *(_QWORD *)(result + 40) = v10;
  }
  else
  {
LABEL_13:
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_21BBB0BB8()
{
  return swift_deallocObject();
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance EmphasizeActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(_QWORD *)(a1 + 48));
}

uint64_t ActionHandlerProtocol.actionEnded(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 4uLL);
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance EmphasizeActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(_QWORD *)(a1 + 48));
}

uint64_t ActionHandlerProtocol.actionSkipped(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 8uLL);
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance EmphasizeActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(_QWORD *)(a1 + 48));
}

uint64_t ActionHandlerProtocol.actionPaused(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 0x10uLL);
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance EmphasizeActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(_QWORD *)(a1 + 48));
}

uint64_t ActionHandlerProtocol.actionResumed(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 0x20uLL);
}

uint64_t ActionHandlerProtocol.actionTerminated(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, a3);
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t static ActionHandlerProtocol<>.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static ActionHandlerProtocol<>.__register(engine:_:)(0, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t EntityAction.isAdditive.getter()
{
  return 0;
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance BillboardActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(_QWORD *)(a1 + 216));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance BillboardActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(_QWORD *)(a1 + 216));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance BillboardActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(_QWORD *)(a1 + 216));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance BillboardActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance NotificationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(2uLL, *(_QWORD *)(a1 + 72));
}

uint64_t ActionHandlerProtocol.actionUpdated(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 2uLL);
}

{
  return ActionHandlerProtocol.actionUpdated(event:)(a1, a2, a3);
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance NotificationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(_QWORD *)(a1 + 72));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance NotificationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(_QWORD *)(a1 + 72));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance NotificationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(_QWORD *)(a1 + 72));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance NotificationActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance PlayAnimationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(2uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance PlayAnimationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance PlayAnimationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance PlayAnimationActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance OrbitEntityActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance OrbitEntityActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance OrbitEntityActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance OrbitEntityActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance OrbitEntityActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance ImpulseActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(2uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance ImpulseActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance ImpulseActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance ImpulseActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance ImpulseActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t static ActionHandlerProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static EntityAction.__register()(AssociatedTypeWitness, AssociatedConformanceWitness);
  static EntityAction<>.__registerCodable()(AssociatedTypeWitness, AssociatedConformanceWitness, a6, a7, a8, a9);
  return static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for ActionHandlerProtocol.actionStarted(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionStarted(event:)(a1, a2, a3);
}

uint64_t ActionHandlerProtocol.actionStarted(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 1uLL);
}

uint64_t ActionHandlerProtocol.actionEnded(event:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  return static EntityAction.__unsubscribe(from:_:)(&v11, *(_QWORD *)(a1 + *(int *)(v9 + 60)));
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3);
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionSkipped(event:)(a1, a2, a3);
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionPaused(event:)(a1, a2, a3);
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionResumed(event:)(a1, a2, a3);
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance FromToByActionHandler<A>(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for FromToByAction, (uint64_t)&protocol conformance descriptor for FromToByAction<A>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
}

uint64_t ActionEventData.parameter<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[56];
  _BYTE v28[16];
  uint64_t v29;
  char v30;
  _QWORD v31[8];

  v4 = v3;
  outlined init with take of Transform?(v4, (uint64_t)v28, &demangling cache variable for type metadata for Int?);
  outlined init with take of Transform?((uint64_t)v28, (uint64_t)&v29, &demangling cache variable for type metadata for Int?);
  if ((v30 & 1) != 0)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined init with take of Transform?(v4 + 24, (uint64_t)v27, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
    outlined init with take of Transform?((uint64_t)v27, (uint64_t)v31, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
    if (v31[0])
    {
      v10 = v31[4];
      v22 = v31[5];
      v23 = *(_QWORD *)(v4 + 16);
      v11 = swift_getAssociatedTypeWitness();
      v12 = type metadata accessor for Optional();
      v24 = &v21;
      v13 = *(_QWORD *)(v12 - 8);
      MEMORY[0x24BDAC7A8](v12);
      v15 = (char *)&v21 - v14;
      static EntityAction<>.loadParameter<A>(_:parameterType:eventID:)(v10, 0, v10, (uint64_t)&v21 - v14, v20, v22);
      v16 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v11) == 1)
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        v26 = 0u;
        v25 = 0u;
      }
      else
      {
        *((_QWORD *)&v26 + 1) = v11;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
        (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v15, v11);
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
      v18 = swift_getAssociatedTypeWitness();
      v19 = swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, v19 ^ 1u, 1, v18);
    }
    else
    {
      return static EntityAction.loadParameter(_:eventID:)(0, a1, a2, a3);
    }
  }
}

uint64_t static EntityAction<>.loadParameter<A>(_:parameterType:eventID:)@<X0>(uint64_t a1@<X1>, char a2@<W3>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t ParameterDataSize;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a6;
  v29 = type metadata accessor for Data.Deallocator();
  v10 = *(_QWORD *)(v29 - 8);
  v11 = MEMORY[0x24BDAC7A8](v29);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a3;
  v14 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v14);
  v30 = (char *)&v28 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if ((a2 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a4, 1, 1, AssociatedTypeWitness);
  v17 = a4;
  if (AssociatedTypeWitness != a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a4, 1, 1, AssociatedTypeWitness);
  ParameterDataSize = RETimelineEventGetParameterDataSize();
  if (ParameterDataSize >= 1 && (v20 = ParameterDataSize, RETimelineEventGetParameterData()))
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    v28 = JSONDecoder.init()();
    v21 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, *MEMORY[0x24BDCDB98], v29);
    Data.Deallocator._deallocator.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v22 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    v23 = specialized Data._Representation.init(_:count:)(v22, v20);
    v25 = v24;
    swift_release();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v21);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v23, v25);
    swift_release();
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
  }
  if (swift_dynamicCast())
  {
    v26 = v17;
    v27 = 0;
  }
  else
  {
    v26 = v17;
    v27 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v26, v27, 1, a1);
}

uint64_t static EntityAction.loadParameter(_:eventID:)@<X0>(char a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;

  if ((a1 & 1) != 0 || !(id)RETimelineEventGetSwiftParameter())
    goto LABEL_7;
  type metadata accessor for EntityActionParameterWrapper(0, a2, a3, v7);
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
LABEL_7:
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56);
    v13 = a4;
    v14 = 1;
    return v12(v13, v14, 1, AssociatedTypeWitness);
  }
  v9 = v8 + *(_QWORD *)(*(_QWORD *)v8 + 96);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a4, v9, v10);
  swift_unknownObjectRelease();
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v13 = a4;
  v14 = 0;
  AssociatedTypeWitness = v10;
  return v12(v13, v14, 1, AssociatedTypeWitness);
}

uint64_t ActionEventData.action<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  _BYTE v22[56];
  _QWORD v23[2];
  __int128 v24;

  outlined init with take of Transform?(v3 + 24, (uint64_t)v22, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v22, (uint64_t)v23, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v7 = v23[0];
  if (!v23[0])
    return static EntityAction.load(_:)(a1, a2, MEMORY[0x24BE25638], a3);
  v8 = v23[1];
  v18 = v24;
  v9 = *(_QWORD *)(v3 + 16);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  static EntityAction<>.load(_:)(v9, v7, v18, MEMORY[0x24BE25588], MEMORY[0x24BE25580], (uint64_t)&v18 - v12);
  v14 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v20 = 0u;
    memset(v21, 0, 24);
    v19 = 0u;
  }
  else
  {
    *((_QWORD *)&v20 + 1) = v7;
    *(_QWORD *)&v21[0] = v8;
    *(_OWORD *)((char *)v21 + 8) = v18;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
    (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  v17 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a3, v17 ^ 1u, 1, a1);
}

uint64_t static EntityAction<>.load(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static EntityAction<>.load(_:)(a1, a2, a3, MEMORY[0x24BE25588], MEMORY[0x24BE25580], a4);
}

uint64_t EntityActionWrapper.__allocating_init(action:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96), a1);
  return v2;
}

uint64_t EntityActionWrapper.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_deallocClassInstance();
}

uint64_t EntityActionParameterWrapper.__allocating_init(parameter:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v2;
}

uint64_t EntityActionParameterWrapper.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return swift_deallocClassInstance();
}

uint64_t ActionEvent.playbackController.getter()
{
  return swift_retain();
}

uint64_t ActionEvent.action.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t ActionEvent.targetEntity.getter()
{
  return swift_retain();
}

uint64_t ActionEvent.reversed.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

double ActionEvent.startTime.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 52));
}

double ActionEvent.duration.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 56));
}

__n128 ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, double a10@<D0>, double a11@<D1>, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __n128 result;

  *(_QWORD *)a9 = a1;
  v27 = (int *)type metadata accessor for ActionEvent(0, a19, a20, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a19 - 8) + 32))(&a9[v27[9]], a2, a19);
  v28 = &a9[v27[10]];
  swift_getAssociatedTypeWitness();
  v29 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, a3, v29);
  *(_QWORD *)&a9[v27[11]] = a4;
  a9[v27[12]] = a5;
  *(double *)&a9[v27[13]] = a10;
  *(double *)&a9[v27[14]] = a11;
  *(_QWORD *)&a9[v27[15]] = a6;
  *(_QWORD *)&a9[v27[16]] = a7;
  v30 = &a9[v27[17]];
  *(_QWORD *)v30 = a8;
  v30[8] = a12 & 1;
  v31 = &a9[v27[18]];
  *(_QWORD *)v31 = a13;
  v31[8] = a14 & 1;
  v32 = &a9[v27[19]];
  *(_QWORD *)v32 = a15;
  v32[8] = a16 & 1;
  v33 = &a9[v27[20]];
  v34 = *(_OWORD *)(a17 + 48);
  *((_OWORD *)v33 + 2) = *(_OWORD *)(a17 + 32);
  *((_OWORD *)v33 + 3) = v34;
  *((_OWORD *)v33 + 4) = *(_OWORD *)(a17 + 64);
  result = *(__n128 *)(a17 + 16);
  *(_OWORD *)v33 = *(_OWORD *)a17;
  *((__n128 *)v33 + 1) = result;
  *(_QWORD *)&a9[v27[21]] = a18;
  return result;
}

void static ActionEventType.started.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

RealityFoundation::ActionEventType __swiftcall ActionEventType.init(rawValue:)(RealityFoundation::ActionEventType rawValue)
{
  RealityFoundation::ActionEventType *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ActionEventType.updated.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ActionEventType.ended.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t type metadata accessor for ActionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionEvent);
}

void static ActionEventType.skipped.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ActionEventType.paused.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ActionEventType.resumed.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ActionEventType.terminated.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

uint64_t ActionEventType.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t static ActionHandlerProtocol.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ActionHandlerProtocol.__register(engine:_:)(0, a1, a2, a3, a4);
}

uint64_t static EntityAction.__unsubscribe(from:_:)(Swift::UInt *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v3 = v2;
  v5 = *a1;
  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v6 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v8 & 1) == 0)
    return swift_endAccess();
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v11 & 1) != 0))
  {
    v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
    v13 = *v12;
    v14 = v12[1];
    swift_bridgeObjectRetain();
    v15 = static EntityAction.eventBus(_:)(a2);
    MEMORY[0x22076D1F0](v15, v13, v14);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v9);
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_12;
  }
  else
  {
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v9 + 16))
    {
LABEL_12:
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v21 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v3, isUniquelyReferenced_nonNull_native);
      static AnimationResource.actionSubscriptions = v21;
      swift_bridgeObjectRelease();
      return swift_endAccess();
    }
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v3);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t static ActionHandlerProtocol.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static EntityAction.__register()(AssociatedTypeWitness, AssociatedConformanceWitness);
  return static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5);
}

uint64_t static EntityAction<>.registerAction()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  static EntityAction.__register()(a1, a2);
  return static EntityAction<>.__registerCodable()(a1, a2, a3, a4, a5, a6);
}

uint64_t static ActionHandlerProtocol.__registerCommon(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  char v10;
  char v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  _QWORD v19[2];

  static ActionHandlerProtocol.subscribe(_:)(a1, a4, a5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(AssociatedTypeWitness);
    v11 = v10;
    swift_endAccess();
    if ((v11 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v19, "Handler for ");
      BYTE5(v19[1]) = 0;
      HIWORD(v19[1]) = -5120;
      swift_getMetatypeMetadata();
      v12._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._object = (void *)0x800000021BE87FE0;
      v13._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v13);
      specialized static AnimationLogger.logError(_:)(v19[0], v19[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a2;
  v14[5] = a3;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v15 + 24) = v14;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)_s10RealityKit27AnimationPlaybackControllerC0A10Foundation15ActionEventDataVSbS2dAA8__EngineCSVAA6EntityCSgAD0G15HandlerProtocol_pSgIeggyyyygygr_AcFSbS2dAHSVAkMIegnnnnnnnnr_TRTA_0, v15, AssociatedTypeWitness, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v18;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t static EntityAction.registerAction()(uint64_t a1, uint64_t a2)
{
  return static EntityAction.__register()(a1, a2);
}

uint64_t static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  _QWORD *v9;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  Swift::UInt v19;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = 1;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #1 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  v19 = 2;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #2 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  v19 = 4;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #3 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v12, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  v19 = 8;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #4 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v13, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  v19 = 16;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #5 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  v19 = 32;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #6 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  v19 = 64;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #7 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  v19 = 128;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #8 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  return swift_release();
}

uint64_t creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(char *)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t result;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *);
  uint64_t v48;

  v46 = a8;
  v47 = a7;
  v44 = a6;
  v45 = a4;
  v42 = a5;
  v43 = a1;
  v41 = a3;
  v48 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v16);
  v38 = (uint64_t)&v37 - v17;
  v19 = type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18);
  v39 = *(_QWORD *)(v19 - 8);
  v40 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v37 - v20;
  v22 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v37 - v24;
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v37 - v31;
  ActionEventData.action<A>()(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v25, 1, AssociatedTypeWitness) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    v34 = (_OWORD *)v48;
    *(_QWORD *)(v48 + 32) = 0;
    *v34 = 0u;
    v34[1] = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v32, v25, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v29, v32, AssociatedTypeWitness);
    v35 = v43;
    swift_retain();
    v36 = v38;
    ActionEventData.parameter<A>(type:)(AssociatedTypeWitness, AssociatedConformanceWitness, v38);
    ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v35, (uint64_t)v29, v36, v44, v41 & 1, v45, 0, 0, v21, a10, a11, 1, 0, 1, 0, 1, a2, v42, AssociatedTypeWitness,
      AssociatedConformanceWitness);
    swift_retain();
    swift_retain();
    v47(v21);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v32, AssociatedTypeWitness);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)(uint64_t *a1, _OWORD *a2, unsigned __int8 *a3, double *a4, double *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, uint64_t (*a9)(uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, _QWORD, double, double))
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[5];

  v9 = *a1;
  v10 = a2[3];
  v13[2] = a2[2];
  v13[3] = v10;
  v13[4] = a2[4];
  v11 = a2[1];
  v13[0] = *a2;
  v13[1] = v11;
  return a9(v9, v13, *a3, *a6, *a7, *a8, *a4, *a5);
}

uint64_t static ActionHandlerProtocol.actionHandler(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  char v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t *, uint64_t *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[5];
  _OWORD v48[2];
  uint64_t v49;

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = (int *)type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = v9[21];
  v11 = *(_QWORD *)((char *)a1 + v10);
  swift_beginAccess();
  v12 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v14 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v12 + 56) + 40 * v13, (uint64_t)v48);
  }
  else
  {
    v49 = 0;
    memset(v48, 0, sizeof(v48));
  }
  swift_endAccess();
  outlined init with copy of ActionHandlerProtocol?((uint64_t)v48, (uint64_t)&v39);
  v15 = v42;
  outlined destroy of ActionHandlerProtocol?((uint64_t)&v39);
  if (v15)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v18 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(AssociatedTypeWitness);
    if ((v20 & 1) != 0)
    {
      v21 = *(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v18 + 56) + 16 * v19);
      swift_endAccess();
      v22 = *a1;
      v23 = (char *)a1 + v9[20];
      v24 = *(_QWORD *)v23;
      v25 = v23[8];
      v26 = *((_QWORD *)v23 + 2);
      v27 = *(_QWORD *)((char *)a1 + v9[13]);
      v28 = *((_BYTE *)a1 + v9[12]);
      v29 = *(_QWORD *)((char *)a1 + v9[14]);
      v30 = *(_QWORD *)((char *)a1 + v9[15]);
      v31 = *(_QWORD *)((char *)a1 + v10);
      v32 = *(_QWORD *)((char *)a1 + v9[11]);
      v45 = *((_QWORD *)v23 + 9);
      v46 = v22;
      v39 = v24;
      v40 = v25;
      v41 = v26;
      v42 = *(_OWORD *)(v23 + 24);
      v43 = *(_OWORD *)(v23 + 40);
      v44 = *(_OWORD *)(v23 + 56);
      v38 = v28;
      v36 = v29;
      v37 = v27;
      v34 = v31;
      v35 = v30;
      v33 = v32;
      swift_retain();
      v21(v47, &v46, &v39, &v38, &v37, &v36, &v35, &v34, &v33);
      swift_release();
      outlined destroy of ActionHandlerProtocol?((uint64_t)v48);
      outlined init with take of Transform?((uint64_t)v47, (uint64_t)v48, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v48, (uint64_t)&v39, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      v16 = swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v16 ^ 1u, 1, a2);
    }
  }
  swift_endAccess();
  outlined destroy of ActionHandlerProtocol?((uint64_t)v48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
}

uint64_t closure #1 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v21[24];
  uint64_t v22[5];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v21[-v9];
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 24))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = *(_QWORD *)((char *)a1
                  + *(int *)(type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18)+ 84));
  v22[3] = a3;
  v22[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v22, v19);
  swift_endAccess();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t static EntityAction.__subscribe(to:_:_:)(Swift::UInt *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[6];

  v7 = v6;
  v13 = *a1;
  if (!a2)
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
  }
  v14 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  v36 = a4;
  _typeName(_:qualified:)();
  switch(v13)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      goto LABEL_23;
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    default:
      if (v13 != 128)
        goto LABEL_23;
      specialized getEventID<A>(_:)();
LABEL_13:
      v15 = a3;
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v16 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v18 & 1) != 0))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
        swift_endAccess();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_endAccess();
        v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      }
      v35 = v7;
      if (*(_QWORD *)(v19 + 16))
      {
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
        if ((v21 & 1) != 0)
        {
          v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v20);
          v23 = *v22;
          v24 = v22[1];
          v25 = static EntityAction.eventBus(_:)(a2);
          MEMORY[0x22076D1F0](v25, v23, v24);
        }
      }
      static EntityAction.eventBus(_:)(a2);
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = a5;
      v26[3] = a6;
      v26[4] = v14;
      v26[5] = v13;
      v26[6] = v15;
      v26[7] = v36;
      aBlock[4] = partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_15;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      RETimelineEventFilter();
      swift_release();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v19;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, v13, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v37 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v35, v33);
      static AnimationResource.actionSubscriptions = v37;
      swift_bridgeObjectRelease();
      swift_endAccess();
LABEL_23:
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

uint64_t closure #2 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v21[24];
  uint64_t v22[5];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v21[-v9];
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 32))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = *(_QWORD *)((char *)a1
                  + *(int *)(type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18)+ 84));
  v22[3] = a3;
  v22[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v22, v19);
  swift_endAccess();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #3 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v21[24];
  uint64_t v22[5];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v21[-v9];
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 40))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = *(_QWORD *)((char *)a1
                  + *(int *)(type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18)+ 84));
  v22[3] = a3;
  v22[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v22, v19);
  swift_endAccess();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #4 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v21[24];
  uint64_t v22[5];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v21[-v9];
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 48))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = *(_QWORD *)((char *)a1
                  + *(int *)(type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18)+ 84));
  v22[3] = a3;
  v22[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v22, v19);
  swift_endAccess();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #5 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v21[24];
  uint64_t v22[5];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v21[-v9];
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 56))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = *(_QWORD *)((char *)a1
                  + *(int *)(type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18)+ 84));
  v22[3] = a3;
  v22[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v22, v19);
  swift_endAccess();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #6 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v21[24];
  uint64_t v22[5];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v21[-v9];
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 64))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = *(_QWORD *)((char *)a1
                  + *(int *)(type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18)+ 84));
  v22[3] = a3;
  v22[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v22, v19);
  swift_endAccess();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #7 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  _OWORD v21[2];
  uint64_t v22;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v21 - v9 + 16;
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, a3);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 72))(a1, a3, a4);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a3);
  }
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = *(_QWORD *)((char *)a1
                  + *(int *)(type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17)+ 84));
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v21, v18);
  return swift_endAccess();
}

uint64_t closure #8 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - v9;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = *(_QWORD *)((char *)a1
                  + *(int *)(type metadata accessor for ActionEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13)+ 84));
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  v15 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
  }
  else
  {
    *((_QWORD *)&v20 + 1) = a3;
    v21 = a4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
    (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v10, a3);
  }
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v19, v14);
  return swift_endAccess();
}

uint64_t static EntityAction.__register()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  __int128 v15;
  uint64_t v16;

  v4 = _typeName(_:qualified:)();
  v6 = v5;
  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  swift_beginAccess();
  v7 = static AnimationResource.actionTypeMap;
  if (!*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, (uint64_t)v6);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_endAccess();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = static AnimationResource.actionTypeMap;
    static AnimationResource.actionTypeMap = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionTypeMap = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  v15 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if ((_QWORD)v15 == a1)
    return swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = v4;
  v12._object = v6;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0xD00000000000001DLL;
  v13._object = (void *)0x800000021BE8A110;
  String.append(_:)(v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
  v14._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static EntityAction.subscribe(to:_:)(Swift::UInt *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v9;
  Swift::UInt v11;

  v9 = *a1;
  static EntityAction.__register()(a4, a5);
  v11 = v9;
  return static EntityAction.__subscribe(to:_:_:)(&v11, 0, a2, a3, a4, a5);
}

uint64_t static EntityAction.unsubscribe(from:)(Swift::UInt *a1)
{
  Swift::UInt v2;

  v2 = *a1;
  return static EntityAction.__unsubscribe(from:_:)(&v2, 0);
}

uint64_t static EntityAction.unsubscribeAll()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  if (one-time initialization token for actionSubscriptions != -1)
LABEL_33:
    swift_once();
  swift_beginAccess();
  v2 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
  if ((v4 & 1) == 0)
    return swift_endAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v6 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  result = MEMORY[0x22076FDA0](*(_QWORD *)(v6 + 16));
  if (result)
  {
    v8 = result;
    v9 = 0;
    v10 = v5 + 64;
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v12 = -1;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    while (1)
    {
      if (v13)
      {
        v15 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v16 = v15 | (v9 << 6);
      }
      else
      {
        v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (v17 >= v14)
          goto LABEL_26;
        v18 = *(_QWORD *)(v10 + 8 * v17);
        ++v9;
        if (!v18)
        {
          v9 = v17 + 1;
          if (v17 + 1 >= v14)
            goto LABEL_26;
          v18 = *(_QWORD *)(v10 + 8 * v9);
          if (!v18)
          {
            v9 = v17 + 2;
            if (v17 + 2 >= v14)
              goto LABEL_26;
            v18 = *(_QWORD *)(v10 + 8 * v9);
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v14)
              {
LABEL_26:
                swift_release();
                swift_beginAccess();
                v20 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
                if ((v21 & 1) != 0)
                {
                  v22 = v20;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v24 = static AnimationResource.actionSubscriptions;
                  v25 = static AnimationResource.actionSubscriptions;
                  static AnimationResource.actionSubscriptions = 0x8000000000000000;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    specialized _NativeDictionary.copy()();
                    v24 = v25;
                  }
                  specialized _NativeDictionary._delete(at:)(v22, v24);
                  static AnimationResource.actionSubscriptions = v24;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                return swift_endAccess();
              }
              v18 = *(_QWORD *)(v10 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  v9 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_32;
                  if (v9 >= v14)
                    goto LABEL_26;
                  v18 = *(_QWORD *)(v10 + 8 * v9);
                  ++v19;
                  if (v18)
                    goto LABEL_24;
                }
              }
              v9 = v19;
            }
          }
        }
LABEL_24:
        v13 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      MEMORY[0x22076D1F0](v8, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v16), *(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v16 + 8));
    }
  }
  __break(1u);
  return result;
}

uint64_t static EntityAction<>.__registerCodable()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26[8];

  v12 = _typeName(_:qualified:)();
  v14 = v13;
  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  swift_beginAccess();
  v15 = static AnimationResource.codableActionTypeMap;
  if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12, (uint64_t)v14);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_endAccess();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = static AnimationResource.codableActionTypeMap;
    static AnimationResource.codableActionTypeMap = 0x8000000000000000;
    v26[0] = a1;
    v26[1] = a2;
    v26[2] = a3;
    v26[3] = a4;
    v26[4] = AssociatedTypeWitness;
    v26[5] = a5;
    v26[6] = a6;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v12, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    static AnimationResource.codableActionTypeMap = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  v24 = *(_OWORD *)(*(_QWORD *)(v15 + 56) + 56 * v16);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if ((_QWORD)v24 == a1)
    return swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = v12;
  v21._object = v14;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD00000000000001DLL;
  v22._object = (void *)0x800000021BE8A110;
  String.append(_:)(v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static EntityAction<>.subscribe(to:_:)(Swift::UInt *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Swift::UInt v16;
  Swift::UInt v18;

  v16 = *a1;
  static EntityAction.__register()(a4, a5);
  static EntityAction<>.__registerCodable()(a4, a5, a6, a7, a8, a9);
  v18 = v16;
  return static EntityAction.__subscribe(to:_:_:)(&v18, 0, a2, a3, a4, a5);
}

uint64_t static EntityAction<>.load(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t (*a5)(uint64_t)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[4];

  v12 = type metadata accessor for Data.Deallocator();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a4(a1);
  if (v16 >= 1 && (v17 = v16, a5(a1)))
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    v23[2] = JSONDecoder.init()();
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDCDB98], v12);
    Data.Deallocator._deallocator.getter();
    v23[1] = a3;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v18 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    v19 = specialized Data._Representation.init(_:count:)(v18, v17);
    v21 = v20;
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v19, v21);
    swift_release();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a6, 0, 1, a2);
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a6, 0, 1, a2);
  }
}

uint64_t static EntityAction<>.loadParameterFromTimeline<A>(_:parameterType:eventID:)@<X0>(uint64_t a1@<X1>, char a2@<W3>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t EventParameterDataSize;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a6;
  v29 = type metadata accessor for Data.Deallocator();
  v10 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a3;
  MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v30 = (char *)&v28 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if ((a2 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a4, 1, 1, AssociatedTypeWitness);
  v17 = a4;
  if (AssociatedTypeWitness != a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a4, 1, 1, AssociatedTypeWitness);
  EventParameterDataSize = RETimelineDefinitionEventTimelineGetEventParameterDataSize();
  if (EventParameterDataSize >= 1
    && (v20 = EventParameterDataSize, RETimelineDefinitionEventTimelineGetEventParameterData()))
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    v28 = JSONDecoder.init()();
    v21 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDCDB98], v29);
    Data.Deallocator._deallocator.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v22 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    v23 = specialized Data._Representation.init(_:count:)(v22, v20);
    v25 = v24;
    swift_release();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v21);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v23, v25);
    swift_release();
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
  }
  if (swift_dynamicCast())
  {
    v26 = v17;
    v27 = 0;
  }
  else
  {
    v26 = v17;
    v27 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v26, v27, 1, a1);
}

uint64_t static EntityAction.makeActionAnimation(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;

  swift_retain();
  return ActionAnimation.init(_:)(a1, a2, v6, a3);
}

uint64_t ActionAnimation.init(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t v17;
  uint64_t ClipSourceRef;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v7 = type metadata accessor for ActionDefinition(255, a1, a2, a3);
  v8 = type metadata accessor for Optional();
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v24 - v9);
  v12 = a4 + *(int *)(type metadata accessor for ActionAnimation(0, a1, a2, v11) + 40);
  v26 = *(void (**)(void))(*(_QWORD *)(v7 - 8) + 56);
  v27 = v12;
  v26();
  type metadata accessor for TimelineDefinition();
  v13 = swift_allocObject();
  swift_retain_n();
  v14 = REAssetHandleAssetType();
  if (v14 != 11)
  {
    if (v14 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  RootTimeline = REAnimationSceneAssetGetRootTimeline();
  result = swift_release();
  if (!RootTimeline)
    goto LABEL_17;
LABEL_5:
  v17 = RETimelineDefinitionCreateFromTimeline();
  swift_release();
  *(_QWORD *)(v13 + 16) = v17;
  v25 = v8;
  if (v17)
  {
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      v36 = 1;
      v35 = 1;
      v34 = 1;
      v33 = 1;
      v32 = 1;
      v31 = 1;
      v30 = 1;
      v29 = 1;
      *(_QWORD *)a4 = 0;
      *(_WORD *)(a4 + 8) = 256;
      *(_QWORD *)(a4 + 16) = 0;
      *(_WORD *)(a4 + 24) = 256;
      *(_QWORD *)(a4 + 32) = 0;
      *(_WORD *)(a4 + 40) = 256;
      *(_QWORD *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 56) = 1;
      *(_QWORD *)(a4 + 64) = 0;
      *(_BYTE *)(a4 + 72) = 1;
      *(_DWORD *)(a4 + 76) = 0;
      *(_BYTE *)(a4 + 80) = v31;
      *(_BYTE *)(a4 + 81) = 4;
      *(_QWORD *)(a4 + 120) = 0;
      *(_OWORD *)(a4 + 104) = 0u;
      *(_OWORD *)(a4 + 88) = 0u;
      *(_BYTE *)(a4 + 128) = -1;
      *(_DWORD *)(a4 + 132) = 0;
      *(_BYTE *)(a4 + 136) = v30;
      *(_BYTE *)(a4 + 137) = 0;
      *(_BYTE *)(a4 + 138) = v29;
      *(_BYTE *)(a4 + 139) = 2;
      *(_QWORD *)(a4 + 144) = v13;
      swift_retain();
      ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
      v19 = swift_allocObject();
      if (ClipSourceRef)
      {
        *(_QWORD *)(v19 + 16) = ClipSourceRef;
        RERetain();
        RERelease();
      }
      else
      {
        *(_QWORD *)(v19 + 16) = 0;
      }
      goto LABEL_12;
    }
    swift_retain();
    RETimelineDefinitionGetName();
    v17 = String.init(cString:)();
    v20 = v21;
  }
  else
  {
    swift_retain();
    v20 = 0xE000000000000000;
  }
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = 0;
  v36 = 1;
  v35 = 1;
  v34 = 1;
  v33 = 1;
  v32 = 1;
  v31 = 1;
  v30 = 0;
  v29 = 0;
  *(_QWORD *)a4 = 0;
  *(_WORD *)(a4 + 8) = 256;
  *(_QWORD *)(a4 + 16) = 0;
  *(_WORD *)(a4 + 24) = 256;
  *(_QWORD *)(a4 + 32) = 0;
  *(_WORD *)(a4 + 40) = 256;
  *(_QWORD *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 56) = 1;
  *(_QWORD *)(a4 + 64) = 0;
  *(_BYTE *)(a4 + 72) = 1;
  *(_DWORD *)(a4 + 76) = 0;
  *(_WORD *)(a4 + 80) = 1025;
  *(_QWORD *)(a4 + 88) = v13;
  *(_QWORD *)(a4 + 96) = v17;
  *(_QWORD *)(a4 + 104) = v20;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 120) = 0;
  *(_BYTE *)(a4 + 128) = -1;
  *(_DWORD *)(a4 + 132) = 0;
  *(_BYTE *)(a4 + 136) = v30;
  *(_BYTE *)(a4 + 137) = 0;
  *(_WORD *)(a4 + 138) = v29;
  *(_QWORD *)(a4 + 144) = v22;
  v19 = v13;
  ClipSourceRef = *(_QWORD *)(v13 + 16);
LABEL_12:
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_BYTE *)(a4 + 184) = -1;
  *(_QWORD *)(a4 + 188) = 0x201000100000000;
  *(_QWORD *)(a4 + 200) = v19;
  swift_retain();
  if (ClipSourceRef)
  {
    ActionDefinition.init(fromCore:)(ClipSourceRef, a1, a2, v23, v10);
    swift_release();
    swift_release();
    ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v26)(v10, 0, 1, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v28 + 40))(v27, v10, v25);
  }
  else
  {
    swift_release();
    return swift_release();
  }
}

uint64_t static EntityAction.load(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!(id)a3())
    goto LABEL_5;
  type metadata accessor for EntityActionWrapper(0, a1, a2, v7);
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v9 = *(_QWORD *)(a1 - 8);
    v10 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1, a1);
  }
  v9 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a4, v8 + *(_QWORD *)(*(_QWORD *)v8 + 96), a1);
  swift_unknownObjectRelease();
  v10 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1, a1);
}

uint64_t static EntityAction.loadParameterFromTimeline(_:eventID:)@<X0>(char a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;

  if ((a1 & 1) != 0
    || !(id)RETimelineDefinitionEventTimelineGetEventSwiftParameter())
  {
    goto LABEL_7;
  }
  type metadata accessor for EntityActionParameterWrapper(0, a2, a3, v7);
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
LABEL_7:
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56);
    v13 = a4;
    v14 = 1;
    return v12(v13, v14, 1, AssociatedTypeWitness);
  }
  v9 = v8 + *(_QWORD *)(*(_QWORD *)v8 + 96);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a4, v9, v10);
  swift_unknownObjectRelease();
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v13 = a4;
  v14 = 0;
  AssociatedTypeWitness = v10;
  return v12(v13, v14, 1, AssociatedTypeWitness);
}

uint64_t dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t Strong;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  int v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  int v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  float v95;
  int v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t Entity;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  char v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  char v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void (*v355)(char *, uint64_t);
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  char *v412;
  uint64_t AssociatedTypeWitness;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  void (*v419)(char *);
  uint64_t v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;

  v418 = a6;
  v419 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v12);
  v417 = (uint64_t)&v401 - v13;
  v423 = a8;
  v422 = type metadata accessor for ActionEvent(0, a7, a8, v14);
  v420 = *(_QWORD *)(v422 - 8);
  MEMORY[0x24BDAC7A8](v422);
  v421 = (char *)&v401 - v15;
  v415 = type metadata accessor for Optional();
  v414 = *(_QWORD *)(v415 - 8);
  MEMORY[0x24BDAC7A8](v415);
  v411 = (char *)&v401 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v412 = (char *)&v401 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v401 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v401 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v401 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v401 - v29;
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v401 - v32;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v401 - v35;
  v424 = a7;
  v425 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v404 = (uint64_t)&v401 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v410 = (uint64_t)&v401 - v40;
  MEMORY[0x24BDAC7A8](v41);
  v409 = (uint64_t)&v401 - v42;
  MEMORY[0x24BDAC7A8](v43);
  v407 = (uint64_t)&v401 - v44;
  MEMORY[0x24BDAC7A8](v45);
  v408 = (uint64_t)&v401 - v46;
  MEMORY[0x24BDAC7A8](v47);
  v406 = (uint64_t)&v401 - v48;
  MEMORY[0x24BDAC7A8](v49);
  v405 = (uint64_t)&v401 - v50;
  MEMORY[0x24BDAC7A8](v51);
  v416 = (char *)&v401 - v52;
  MEMORY[0x24BDAC7A8](v53);
  v55 = (char *)&v401 - v54;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  v57 = Strong;
  switch(a4)
  {
    case 1:
      v403 = Strong;
      v58 = *(_QWORD *)a2;
      v59 = *(_QWORD *)(a2 + 8);
      v411 = *(char **)(a2 + 32);
      v412 = *(char **)(a2 + 40);
      v60 = *(_QWORD *)(a2 + 56);
      v408 = *(_QWORD *)(a2 + 48);
      v61 = *(_QWORD *)(a2 + 64);
      v62 = *(float *)(a2 + 72);
      v63 = *(float *)(a2 + 76);
      v64 = *(unsigned __int8 *)(a2 + 80);
      v65 = *(_QWORD *)(a2 + 88);
      v407 = *(_QWORD *)(a2 + 96);
      v66 = (id)REEntityGetSwiftObject();
      AssociatedTypeWitness = v61;
      if (v66)
      {
        type metadata accessor for Entity();
        v67 = swift_dynamicCastClassUnconditional();
LABEL_5:
        v68 = v67;
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_232;
      }
      v136 = specialized static Entity.entityInfoType(_:)();
      if (!v136)
      {
        v67 = makeEntity(for:)(v58);
        goto LABEL_5;
      }
      v137 = (*(uint64_t (**)(void))(v136 + 232))();
      v138 = *(_QWORD *)(v137 + 16);
      swift_retain();
      MEMORY[0x22076D160](v138, 0);
      *(_QWORD *)(v137 + 16) = v58;
      v139 = v58;
      v68 = v137;
      MEMORY[0x22076D160](v139, v137);
      swift_release();
LABEL_33:
      type metadata accessor for AnimationPlaybackController();
      v140 = swift_allocObject();
      swift_weakInit();
      v409 = v140;
      *(_QWORD *)(v140 + 16) = v59;
      swift_beginAccess();
      swift_weakAssign();
      v141 = String.init(cString:)();
      v143 = v142;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v144 = static AnimationResource.codableActionTypeMap;
      v145 = *(_QWORD *)(static AnimationResource.codableActionTypeMap + 16);
      v406 = v60;
      LODWORD(v405) = v64;
      v404 = v65;
      v410 = v68;
      if (v145)
      {
        swift_bridgeObjectRetain();
        v146 = specialized __RawDictionaryStorage.find<A>(_:)(v141, v143);
        if ((v147 & 1) != 0)
        {
          v148 = (uint64_t *)(*(_QWORD *)(v144 + 56) + 56 * v146);
          v149 = *v148;
          v150 = v148[1];
          v152 = v148[2];
          v151 = v148[3];
          v154 = v148[4];
          v153 = v148[5];
          v155 = v148[6];
          swift_bridgeObjectRelease();
          goto LABEL_88;
        }
        swift_bridgeObjectRelease();
      }
      v149 = 0;
      v150 = 0;
      v152 = 0;
      v151 = 0;
      v154 = 0;
      v153 = 0;
      v155 = 0;
LABEL_88:
      swift_endAccess();
      swift_bridgeObjectRelease();
      v426 = (uint64_t)v411;
      v427 = 0;
      v428 = (uint64_t)v412;
      v429 = v149;
      v430 = v150;
      v431 = v152;
      v432 = v151;
      v433 = v154;
      v434 = v153;
      v435 = v155;
      if (!AssociatedTypeWitness)
      {
        v267 = 0;
        v261 = v424;
        v262 = v425;
        v263 = v403;
        v264 = v423;
        goto LABEL_175;
      }
      v260 = REBindPointBoundComponent();
      v261 = v424;
      v262 = v425;
      v263 = v403;
      v264 = v423;
      if (!v260)
      {
        v267 = 0;
        goto LABEL_175;
      }
      Entity = REComponentGetEntity();
      if (!(id)REEntityGetSwiftObject())
      {
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v353 = specialized static Entity.entityInfoType(_:)();
          if (v353)
          {
            v267 = (*(uint64_t (**)(void))(v353 + 232))();
            v354 = *(_QWORD *)(v267 + 16);
            swift_retain();
            MEMORY[0x22076D160](v354, 0);
            *(_QWORD *)(v267 + 16) = Entity;
            MEMORY[0x22076D160](Entity, v267);
            swift_release();
            goto LABEL_175;
          }
          v266 = makeEntity(for:)(Entity);
          goto LABEL_92;
        }
        goto LABEL_240;
      }
      type metadata accessor for Entity();
      v266 = swift_dynamicCastClassUnconditional();
LABEL_92:
      v267 = v266;
LABEL_175:
      ActionEventData.action<A>()(v261, v264, (uint64_t)v36);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v262 + 48))(v36, 1, v261) == 1)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v355 = *(void (**)(char *, uint64_t))(v414 + 8);
        v356 = v36;
LABEL_208:
        v384 = v415;
        goto LABEL_209;
      }
      (*(void (**)(char *, char *, uint64_t))(v262 + 32))(v55, v36, v261);
      v357 = (uint64_t)v416;
      (*(void (**)(char *, char *, uint64_t))(v262 + 16))(v416, v55, v261);
      v358 = v409;
      swift_retain();
      v359 = v417;
      ActionEventData.parameter<A>(type:)(v261, v264, v417);
      v360 = v421;
      ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v358, v357, v359, v267, v405, v263, v406, 0xBFF0000000000000, v421, v62, v63, 0, v404, 0, v407, 0, (uint64_t)&v426, v408, v261,
        v264);
      swift_retain();
      swift_retain();
      v419(v360);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v420 + 8))(v360, v422);
      (*(void (**)(char *, uint64_t))(v425 + 8))(v55, v261);
      return 0;
    case 2:
      v77 = *(_QWORD *)a2;
      v78 = *(_QWORD *)(a2 + 8);
      v411 = *(char **)(a2 + 32);
      v412 = *(char **)(a2 + 40);
      v408 = *(_QWORD *)(a2 + 48);
      v79 = *(float *)(a2 + 56);
      v81 = *(_QWORD *)(a2 + 64);
      v80 = *(_QWORD *)(a2 + 72);
      v82 = *(_QWORD *)(a2 + 88);
      v407 = *(_QWORD *)(a2 + 80);
      v83 = *(float *)(a2 + 96);
      v84 = *(float *)(a2 + 100);
      v85 = *(unsigned __int8 *)(a2 + 104);
      v86 = (id)REEntityGetSwiftObject();
      AssociatedTypeWitness = v82;
      if (v86)
      {
        type metadata accessor for Entity();
        v87 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_232:
          __break(1u);
          goto LABEL_233;
        }
        v156 = specialized static Entity.entityInfoType(_:)();
        if (v156)
        {
          v157 = (*(uint64_t (**)(void))(v156 + 232))();
          v158 = *(_QWORD *)(v157 + 16);
          swift_retain();
          MEMORY[0x22076D160](v158, 0);
          *(_QWORD *)(v157 + 16) = v77;
          v159 = v77;
          v88 = v157;
          MEMORY[0x22076D160](v159, v157);
          swift_release();
LABEL_41:
          type metadata accessor for AnimationPlaybackController();
          v160 = swift_allocObject();
          swift_weakInit();
          v409 = v160;
          *(_QWORD *)(v160 + 16) = v78;
          swift_beginAccess();
          swift_weakAssign();
          v161 = String.init(cString:)();
          v163 = v162;
          if (one-time initialization token for codableActionTypeMap != -1)
            swift_once();
          v410 = v88;
          swift_beginAccess();
          v164 = static AnimationResource.codableActionTypeMap;
          v165 = *(_QWORD *)(static AnimationResource.codableActionTypeMap + 16);
          v406 = v80;
          LODWORD(v404) = v85;
          v402 = v81;
          v166 = v57;
          if (v165)
          {
            swift_bridgeObjectRetain();
            v167 = specialized __RawDictionaryStorage.find<A>(_:)(v161, v163);
            if ((v168 & 1) != 0)
            {
              v169 = (uint64_t *)(*(_QWORD *)(v164 + 56) + 56 * v167);
              v170 = *v169;
              v171 = v169[1];
              v173 = v169[2];
              v172 = v169[3];
              v174 = v169[4];
              v175 = v169[5];
              v176 = v169[6];
              swift_bridgeObjectRelease();
              goto LABEL_96;
            }
            swift_bridgeObjectRelease();
          }
          v170 = 0;
          v171 = 0;
          v173 = 0;
          v172 = 0;
          v174 = 0;
          v175 = 0;
          v176 = 0;
LABEL_96:
          swift_endAccess();
          swift_bridgeObjectRelease();
          v426 = (uint64_t)v411;
          v427 = 0;
          v428 = (uint64_t)v412;
          v429 = v170;
          v430 = v171;
          v431 = v173;
          v432 = v172;
          v433 = v174;
          v434 = v175;
          v435 = v176;
          if (AssociatedTypeWitness)
          {
            v268 = REBindPointBoundComponent();
            v269 = v424;
            v270 = v425;
            v271 = v166;
            v272 = v423;
            if (v268)
            {
              v273 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                v274 = swift_dynamicCastClassUnconditional();
              }
              else
              {
                if ((REEntityIsBeingDestroyed() & 1) != 0)
                {
LABEL_241:
                  __break(1u);
                  goto LABEL_242;
                }
                v361 = specialized static Entity.entityInfoType(_:)();
                if (v361)
                {
                  v275 = (*(uint64_t (**)(void))(v361 + 232))();
                  v362 = *(_QWORD *)(v275 + 16);
                  swift_retain();
                  MEMORY[0x22076D160](v362, 0);
                  *(_QWORD *)(v275 + 16) = v273;
                  MEMORY[0x22076D160](v273, v275);
                  swift_release();
                  goto LABEL_181;
                }
                v274 = makeEntity(for:)(v273);
              }
              v275 = v274;
            }
            else
            {
              v275 = 0;
            }
          }
          else
          {
            v275 = 0;
            v269 = v424;
            v270 = v425;
            v271 = v166;
            v272 = v423;
          }
LABEL_181:
          ActionEventData.action<A>()(v269, v272, (uint64_t)v33);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v270 + 48))(v33, 1, v269) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v355 = *(void (**)(char *, uint64_t))(v414 + 8);
            v356 = v33;
            goto LABEL_208;
          }
          v363 = v405;
          (*(void (**)(uint64_t, char *, uint64_t))(v270 + 32))(v405, v33, v269);
          v364 = (uint64_t)v416;
          (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v416, v363, v269);
          v365 = v409;
          swift_retain();
          v366 = v417;
          ActionEventData.parameter<A>(type:)(v269, v272, v417);
          v367 = v421;
          ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v365, v364, v366, v275, v404, v271, v406, COERCE__INT64(v79), v421, v83, v84, 0, v408, 0, v402, 0, (uint64_t)&v426, v407, v269,
            v272);
          swift_retain();
          swift_retain();
          v419(v367);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v420 + 8))(v367, v422);
          v355 = *(void (**)(char *, uint64_t))(v425 + 8);
          v356 = (char *)v363;
LABEL_196:
          v384 = v269;
LABEL_209:
          v355(v356, v384);
          return 0;
        }
        v87 = makeEntity(for:)(v77);
      }
      v88 = v87;
      goto LABEL_41;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_11;
    case 4:
      v89 = *(_QWORD *)a2;
      v90 = *(_QWORD *)(a2 + 8);
      v411 = *(char **)(a2 + 32);
      v91 = *(_QWORD *)(a2 + 48);
      v412 = *(char **)(a2 + 40);
      v92 = *(_QWORD *)(a2 + 56);
      v93 = *(_QWORD *)(a2 + 64);
      v94 = *(float *)(a2 + 72);
      v95 = *(float *)(a2 + 76);
      v96 = *(unsigned __int8 *)(a2 + 80);
      v97 = (id)REEntityGetSwiftObject();
      AssociatedTypeWitness = v93;
      if (v97)
      {
        type metadata accessor for Entity();
        v98 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_233:
          __break(1u);
          goto LABEL_234;
        }
        v177 = specialized static Entity.entityInfoType(_:)();
        if (v177)
        {
          v99 = (*(uint64_t (**)(void))(v177 + 232))();
          v178 = *(_QWORD *)(v99 + 16);
          swift_retain();
          MEMORY[0x22076D160](v178, 0);
          *(_QWORD *)(v99 + 16) = v89;
          MEMORY[0x22076D160](v89, v99);
          swift_release();
LABEL_49:
          type metadata accessor for AnimationPlaybackController();
          v179 = swift_allocObject();
          swift_weakInit();
          v409 = v179;
          *(_QWORD *)(v179 + 16) = v90;
          swift_beginAccess();
          swift_weakAssign();
          v180 = String.init(cString:)();
          v182 = v181;
          if (one-time initialization token for codableActionTypeMap != -1)
            swift_once();
          swift_beginAccess();
          v183 = static AnimationResource.codableActionTypeMap;
          v184 = *(_QWORD *)(static AnimationResource.codableActionTypeMap + 16);
          v408 = v92;
          LODWORD(v407) = v96;
          v405 = v91;
          v410 = v99;
          v185 = v57;
          if (v184)
          {
            swift_bridgeObjectRetain();
            v186 = specialized __RawDictionaryStorage.find<A>(_:)(v180, v182);
            if ((v187 & 1) != 0)
            {
              v188 = (uint64_t *)(*(_QWORD *)(v183 + 56) + 56 * v186);
              v189 = *v188;
              v190 = v188[1];
              v192 = v188[2];
              v191 = v188[3];
              v193 = v188[4];
              v194 = v188[5];
              v195 = v188[6];
              swift_bridgeObjectRelease();
              goto LABEL_104;
            }
            swift_bridgeObjectRelease();
          }
          v189 = 0;
          v190 = 0;
          v192 = 0;
          v191 = 0;
          v193 = 0;
          v194 = 0;
          v195 = 0;
LABEL_104:
          swift_endAccess();
          swift_bridgeObjectRelease();
          v426 = (uint64_t)v411;
          v427 = 0;
          v428 = (uint64_t)v412;
          v429 = v189;
          v430 = v190;
          v431 = v192;
          v432 = v191;
          v433 = v193;
          v434 = v194;
          v435 = v195;
          if (AssociatedTypeWitness)
          {
            v276 = REBindPointBoundComponent();
            v269 = v424;
            v277 = v425;
            v278 = v423;
            if (v276)
            {
              v279 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                v280 = swift_dynamicCastClassUnconditional();
              }
              else
              {
                if ((REEntityIsBeingDestroyed() & 1) != 0)
                {
LABEL_242:
                  __break(1u);
                  goto LABEL_243;
                }
                v368 = specialized static Entity.entityInfoType(_:)();
                if (v368)
                {
                  v281 = (*(uint64_t (**)(void))(v368 + 232))();
                  v369 = *(_QWORD *)(v281 + 16);
                  swift_retain();
                  MEMORY[0x22076D160](v369, 0);
                  *(_QWORD *)(v281 + 16) = v279;
                  MEMORY[0x22076D160](v279, v281);
                  swift_release();
                  goto LABEL_187;
                }
                v280 = makeEntity(for:)(v279);
              }
              v281 = v280;
            }
            else
            {
              v281 = 0;
            }
          }
          else
          {
            v281 = 0;
            v269 = v424;
            v277 = v425;
            v278 = v423;
          }
LABEL_187:
          ActionEventData.action<A>()(v269, v278, (uint64_t)v30);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v277 + 48))(v30, 1, v269) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v355 = *(void (**)(char *, uint64_t))(v414 + 8);
            v356 = v30;
            goto LABEL_208;
          }
          v370 = v406;
          (*(void (**)(uint64_t, char *, uint64_t))(v277 + 32))(v406, v30, v269);
          v371 = (uint64_t)v416;
          (*(void (**)(char *, uint64_t, uint64_t))(v277 + 16))(v416, v370, v269);
          v372 = v409;
          swift_retain();
          v373 = v185;
          v374 = v417;
          ActionEventData.parameter<A>(type:)(v269, v278, v417);
          v375 = v421;
          ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v372, v371, v374, v281, v407, v373, v408, 0xBFF0000000000000, v421, v94, v95, 0, 0xBFF0000000000000, 0, 0xBFF0000000000000, 0, (uint64_t)&v426, v405, v269,
            v278);
          swift_retain();
          swift_retain();
          v419(v375);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v420 + 8))(v375, v422);
          v355 = *(void (**)(char *, uint64_t))(v425 + 8);
          v356 = (char *)v370;
          goto LABEL_196;
        }
        v98 = makeEntity(for:)(v89);
      }
      v99 = v98;
      goto LABEL_49;
    case 8:
      v100 = *(_QWORD *)a2;
      v101 = *(_QWORD *)(a2 + 8);
      v411 = *(char **)(a2 + 32);
      v412 = *(char **)(a2 + 40);
      v102 = *(_QWORD *)(a2 + 56);
      v407 = *(_QWORD *)(a2 + 48);
      v103 = *(float *)(a2 + 64);
      v104 = *(float *)(a2 + 68);
      v105 = *(unsigned __int8 *)(a2 + 72);
      v106 = *(_QWORD *)(a2 + 80);
      v107 = *(_QWORD *)(a2 + 88);
      v108 = (id)REEntityGetSwiftObject();
      AssociatedTypeWitness = v102;
      if (v108)
      {
        type metadata accessor for Entity();
        v109 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_234:
          __break(1u);
          goto LABEL_235;
        }
        v196 = specialized static Entity.entityInfoType(_:)();
        if (v196)
        {
          v197 = (*(uint64_t (**)(void))(v196 + 232))();
          v198 = *(_QWORD *)(v197 + 16);
          swift_retain();
          MEMORY[0x22076D160](v198, 0);
          *(_QWORD *)(v197 + 16) = v100;
          v199 = v100;
          v110 = v197;
          MEMORY[0x22076D160](v199, v197);
          swift_release();
LABEL_57:
          type metadata accessor for AnimationPlaybackController();
          v200 = swift_allocObject();
          swift_weakInit();
          v409 = v200;
          *(_QWORD *)(v200 + 16) = v101;
          swift_beginAccess();
          swift_weakAssign();
          v201 = String.init(cString:)();
          v203 = v202;
          if (one-time initialization token for codableActionTypeMap != -1)
            swift_once();
          v410 = v110;
          swift_beginAccess();
          v204 = static AnimationResource.codableActionTypeMap;
          v205 = *(_QWORD *)(static AnimationResource.codableActionTypeMap + 16);
          LODWORD(v406) = v105;
          v405 = v106;
          v404 = v107;
          v206 = v57;
          if (v205)
          {
            swift_bridgeObjectRetain();
            v207 = specialized __RawDictionaryStorage.find<A>(_:)(v201, v203);
            if ((v208 & 1) != 0)
            {
              v209 = (uint64_t *)(*(_QWORD *)(v204 + 56) + 56 * v207);
              v210 = *v209;
              v211 = v209[1];
              v212 = v209[2];
              v213 = v209[3];
              v215 = v209[4];
              v214 = v209[5];
              v216 = v209[6];
              swift_bridgeObjectRelease();
              goto LABEL_112;
            }
            swift_bridgeObjectRelease();
          }
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v215 = 0;
          v214 = 0;
          v216 = 0;
LABEL_112:
          swift_endAccess();
          swift_bridgeObjectRelease();
          v426 = (uint64_t)v411;
          v427 = 0;
          v428 = (uint64_t)v412;
          v429 = v210;
          v430 = v211;
          v431 = v212;
          v432 = v213;
          v433 = v215;
          v434 = v214;
          v435 = v216;
          if (AssociatedTypeWitness)
          {
            v282 = REBindPointBoundComponent();
            v269 = v424;
            v283 = v425;
            v284 = v423;
            if (v282)
            {
              v285 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                v286 = swift_dynamicCastClassUnconditional();
              }
              else
              {
                if ((REEntityIsBeingDestroyed() & 1) != 0)
                {
LABEL_243:
                  __break(1u);
                  goto LABEL_244;
                }
                v376 = specialized static Entity.entityInfoType(_:)();
                if (v376)
                {
                  v287 = (*(uint64_t (**)(void))(v376 + 232))();
                  v377 = *(_QWORD *)(v287 + 16);
                  swift_retain();
                  MEMORY[0x22076D160](v377, 0);
                  *(_QWORD *)(v287 + 16) = v285;
                  MEMORY[0x22076D160](v285, v287);
                  swift_release();
                  goto LABEL_193;
                }
                v286 = makeEntity(for:)(v285);
              }
              v287 = v286;
            }
            else
            {
              v287 = 0;
            }
          }
          else
          {
            v287 = 0;
            v269 = v424;
            v283 = v425;
            v284 = v423;
          }
LABEL_193:
          ActionEventData.action<A>()(v269, v284, (uint64_t)v27);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v283 + 48))(v27, 1, v269) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v355 = *(void (**)(char *, uint64_t))(v414 + 8);
            v356 = v27;
            goto LABEL_208;
          }
          v378 = v408;
          (*(void (**)(uint64_t, char *, uint64_t))(v283 + 32))(v408, v27, v269);
          v379 = (uint64_t)v416;
          (*(void (**)(char *, uint64_t, uint64_t))(v283 + 16))(v416, v378, v269);
          v380 = v409;
          swift_retain();
          v381 = v206;
          v382 = v417;
          ActionEventData.parameter<A>(type:)(v269, v284, v417);
          v383 = v421;
          ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v380, v379, v382, v287, v406, v381, 0, 0, v421, v103, v104, 1, v405, 0, v404, 0, (uint64_t)&v426, v407, v269,
            v284);
          swift_retain();
          swift_retain();
          v419(v383);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v420 + 8))(v383, v422);
          v355 = *(void (**)(char *, uint64_t))(v425 + 8);
          v356 = (char *)v378;
          goto LABEL_196;
        }
        v109 = makeEntity(for:)(v100);
      }
      v110 = v109;
      goto LABEL_57;
    case 16:
      v111 = *(_QWORD *)a2;
      v112 = *(_QWORD *)(a2 + 8);
      v113 = *(_QWORD *)(a2 + 32);
      v115 = *(_QWORD *)(a2 + 40);
      v114 = *(_QWORD *)(a2 + 48);
      v116 = *(_QWORD *)(a2 + 56);
      v117 = (id)REEntityGetSwiftObject();
      v412 = (char *)v116;
      if (v117)
      {
        type metadata accessor for Entity();
        v118 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_235:
          __break(1u);
          goto LABEL_236;
        }
        v217 = specialized static Entity.entityInfoType(_:)();
        if (v217)
        {
          v119 = (*(uint64_t (**)(void))(v217 + 232))();
          v218 = *(_QWORD *)(v119 + 16);
          swift_retain();
          MEMORY[0x22076D160](v218, 0);
          *(_QWORD *)(v119 + 16) = v111;
          MEMORY[0x22076D160](v111, v119);
          swift_release();
LABEL_65:
          type metadata accessor for AnimationPlaybackController();
          v219 = swift_allocObject();
          swift_weakInit();
          v410 = v219;
          *(_QWORD *)(v219 + 16) = v112;
          swift_beginAccess();
          swift_weakAssign();
          v220 = String.init(cString:)();
          v222 = v221;
          if (one-time initialization token for codableActionTypeMap != -1)
            swift_once();
          swift_beginAccess();
          v223 = static AnimationResource.codableActionTypeMap;
          v224 = *(_QWORD *)(static AnimationResource.codableActionTypeMap + 16);
          v403 = v57;
          v409 = v113;
          v408 = v114;
          v411 = (char *)v119;
          v225 = v115;
          if (v224)
          {
            swift_bridgeObjectRetain();
            v226 = specialized __RawDictionaryStorage.find<A>(_:)(v220, v222);
            if ((v227 & 1) != 0)
            {
              v228 = (uint64_t *)(*(_QWORD *)(v223 + 56) + 56 * v226);
              v229 = *v228;
              v230 = v228[1];
              v231 = v228[2];
              v232 = v228[3];
              v234 = v228[4];
              v233 = v228[5];
              v235 = v228[6];
              swift_bridgeObjectRelease();
              goto LABEL_120;
            }
            swift_bridgeObjectRelease();
          }
          v229 = 0;
          v230 = 0;
          v231 = 0;
          v232 = 0;
          v234 = 0;
          v233 = 0;
          v235 = 0;
LABEL_120:
          swift_endAccess();
          swift_bridgeObjectRelease();
          v426 = 0;
          v427 = 0;
          v428 = v225;
          v429 = v229;
          v430 = v230;
          v431 = v231;
          v432 = v232;
          v433 = v234;
          v434 = v233;
          v435 = v235;
          if (v412)
          {
            v288 = REBindPointBoundComponent();
            v289 = v424;
            v290 = v425;
            v291 = v403;
            v292 = v423;
            if (v288)
            {
              v293 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                v294 = swift_dynamicCastClassUnconditional();
              }
              else
              {
                if ((REEntityIsBeingDestroyed() & 1) != 0)
                {
LABEL_244:
                  __break(1u);
                  goto LABEL_245;
                }
                v385 = specialized static Entity.entityInfoType(_:)();
                if (v385)
                {
                  v295 = (*(uint64_t (**)(void))(v385 + 232))();
                  v386 = *(_QWORD *)(v295 + 16);
                  swift_retain();
                  MEMORY[0x22076D160](v386, 0);
                  *(_QWORD *)(v295 + 16) = v293;
                  MEMORY[0x22076D160](v293, v295);
                  swift_release();
                  goto LABEL_200;
                }
                v294 = makeEntity(for:)(v293);
              }
              v295 = v294;
            }
            else
            {
              v295 = 0;
            }
          }
          else
          {
            v295 = 0;
            v289 = v424;
            v290 = v425;
            v291 = v403;
            v292 = v423;
          }
LABEL_200:
          ActionEventData.action<A>()(v289, v292, (uint64_t)v24);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v290 + 48))(v24, 1, v289) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v355 = *(void (**)(char *, uint64_t))(v414 + 8);
            v356 = v24;
            goto LABEL_208;
          }
          v387 = v407;
          (*(void (**)(uint64_t, char *, uint64_t))(v290 + 32))(v407, v24, v289);
          v388 = (uint64_t)v416;
          (*(void (**)(char *, uint64_t, uint64_t))(v290 + 16))(v416, v387, v289);
          v389 = v417;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v417, 1, 1);
          v390 = v421;
          ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v410, v388, v389, v295, 0, v291, 0, 0, v421, 0.0, 0.0, 1, v409, 0, 0, 1, (uint64_t)&v426, v408, v289,
            v292);
          swift_retain();
          swift_retain();
          v419(v390);
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v420 + 8))(v390, v422);
          (*(void (**)(uint64_t, uint64_t))(v290 + 8))(v387, v289);
          return 0;
        }
        v118 = makeEntity(for:)(v111);
      }
      v119 = v118;
      goto LABEL_65;
    case 32:
      v120 = *(_QWORD *)a2;
      v121 = *(_QWORD *)(a2 + 8);
      v122 = *(_QWORD *)(a2 + 32);
      v124 = *(_QWORD *)(a2 + 40);
      v123 = *(_QWORD *)(a2 + 48);
      v125 = *(_QWORD *)(a2 + 56);
      v126 = (id)REEntityGetSwiftObject();
      v412 = (char *)v125;
      if (v126)
      {
        type metadata accessor for Entity();
        v127 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_236:
          __break(1u);
          goto LABEL_237;
        }
        v236 = specialized static Entity.entityInfoType(_:)();
        if (v236)
        {
          v128 = (*(uint64_t (**)(void))(v236 + 232))();
          v237 = *(_QWORD *)(v128 + 16);
          swift_retain();
          MEMORY[0x22076D160](v237, 0);
          *(_QWORD *)(v128 + 16) = v120;
          MEMORY[0x22076D160](v120, v128);
          swift_release();
LABEL_73:
          type metadata accessor for AnimationPlaybackController();
          v238 = swift_allocObject();
          swift_weakInit();
          v410 = v238;
          *(_QWORD *)(v238 + 16) = v121;
          swift_beginAccess();
          swift_weakAssign();
          v239 = String.init(cString:)();
          v241 = v240;
          if (one-time initialization token for codableActionTypeMap != -1)
            swift_once();
          swift_beginAccess();
          v242 = static AnimationResource.codableActionTypeMap;
          v243 = *(_QWORD *)(static AnimationResource.codableActionTypeMap + 16);
          v403 = v57;
          v408 = v122;
          v407 = v123;
          v411 = (char *)v128;
          v244 = v124;
          if (v243)
          {
            swift_bridgeObjectRetain();
            v245 = specialized __RawDictionaryStorage.find<A>(_:)(v239, v241);
            if ((v246 & 1) != 0)
            {
              v247 = (uint64_t *)(*(_QWORD *)(v242 + 56) + 56 * v245);
              v248 = *v247;
              v249 = v247[1];
              v250 = v247[2];
              v251 = v247[3];
              v253 = v247[4];
              v252 = v247[5];
              v254 = v247[6];
              swift_bridgeObjectRelease();
              goto LABEL_128;
            }
            swift_bridgeObjectRelease();
          }
          v248 = 0;
          v249 = 0;
          v250 = 0;
          v251 = 0;
          v253 = 0;
          v252 = 0;
          v254 = 0;
LABEL_128:
          swift_endAccess();
          swift_bridgeObjectRelease();
          v426 = 0;
          v427 = 0;
          v428 = v244;
          v429 = v248;
          v430 = v249;
          v431 = v250;
          v432 = v251;
          v433 = v253;
          v434 = v252;
          v435 = v254;
          if (v412)
          {
            v296 = REBindPointBoundComponent();
            v297 = v424;
            v298 = v425;
            v299 = v403;
            v300 = v423;
            if (v296)
            {
              v301 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                v302 = swift_dynamicCastClassUnconditional();
LABEL_132:
                v303 = v302;
                goto LABEL_206;
              }
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_245:
                __break(1u);
                goto LABEL_246;
              }
              v391 = specialized static Entity.entityInfoType(_:)();
              if (!v391)
              {
                v302 = makeEntity(for:)(v301);
                goto LABEL_132;
              }
              v303 = (*(uint64_t (**)(void))(v391 + 232))();
              v392 = *(_QWORD *)(v303 + 16);
              swift_retain();
              MEMORY[0x22076D160](v392, 0);
              *(_QWORD *)(v303 + 16) = v301;
              MEMORY[0x22076D160](v301, v303);
              swift_release();
            }
            else
            {
              v303 = 0;
            }
          }
          else
          {
            v303 = 0;
            v297 = v424;
            v298 = v425;
            v299 = v403;
            v300 = v423;
          }
LABEL_206:
          ActionEventData.action<A>()(v297, v300, (uint64_t)v21);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v298 + 48))(v21, 1, v297) != 1)
          {
            v393 = v409;
            (*(void (**)(uint64_t, char *, uint64_t))(v298 + 32))(v409, v21, v297);
            v394 = (uint64_t)v416;
            (*(void (**)(char *, uint64_t, uint64_t))(v298 + 16))(v416, v393, v297);
            v395 = v299;
            v396 = v417;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v417, 1, 1);
            v397 = v421;
            ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v410, v394, v396, v303, 0, v395, 0, 0, v421, 0.0, 0.0, 1, v408, 0, 0, 1, (uint64_t)&v426, v407, v297,
              v300);
            swift_retain();
            swift_retain();
            v419(v397);
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v420 + 8))(v397, v422);
            (*(void (**)(uint64_t, uint64_t))(v298 + 8))(v393, v297);
            return 0;
          }
          goto LABEL_207;
        }
        v127 = makeEntity(for:)(v120);
      }
      v128 = v127;
      goto LABEL_73;
    case 64:
      v129 = *(_QWORD *)a2;
      v130 = *(_QWORD *)(a2 + 8);
      v131 = *(_QWORD *)(a2 + 24);
      v133 = *(_QWORD *)(a2 + 32);
      v132 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v134 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_237:
          __break(1u);
          goto LABEL_238;
        }
        v255 = specialized static Entity.entityInfoType(_:)();
        if (v255)
        {
          v135 = (*(uint64_t (**)(void))(v255 + 232))();
          v256 = *(_QWORD *)(v135 + 16);
          swift_retain();
          MEMORY[0x22076D160](v256, 0);
          *(_QWORD *)(v135 + 16) = v129;
          MEMORY[0x22076D160](v129, v135);
          swift_release();
LABEL_81:
          type metadata accessor for AnimationPlaybackController();
          v257 = swift_allocObject();
          swift_weakInit();
          *(_QWORD *)(v257 + 16) = v130;
          swift_beginAccess();
          swift_weakAssign();
          if (!v132)
            goto LABEL_162;
          if (REBindPointBoundComponent())
          {
            v258 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v259 = swift_dynamicCastClassUnconditional();
LABEL_85:
              v132 = v259;
              goto LABEL_162;
            }
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
LABEL_239:
              __break(1u);
LABEL_240:
              __break(1u);
              goto LABEL_241;
            }
            v332 = specialized static Entity.entityInfoType(_:)();
            if (!v332)
            {
              v259 = makeEntity(for:)(v258);
              goto LABEL_85;
            }
            v132 = (*(uint64_t (**)(void))(v332 + 232))();
            v333 = *(_QWORD *)(v132 + 16);
            swift_retain();
            MEMORY[0x22076D160](v333, 0);
            *(_QWORD *)(v132 + 16) = v258;
            MEMORY[0x22076D160](v258, v132);
            swift_release();
          }
          else
          {
            v132 = 0;
          }
LABEL_162:
          v334 = String.init(cString:)();
          v336 = v335;
          if (one-time initialization token for codableActionTypeMap != -1)
            swift_once();
          swift_beginAccess();
          v337 = static AnimationResource.codableActionTypeMap;
          v338 = *(_QWORD *)(static AnimationResource.codableActionTypeMap + 16);
          v403 = v57;
          v408 = v133;
          v411 = (char *)v135;
          v409 = v257;
          v339 = v131;
          if (v338)
          {
            swift_bridgeObjectRetain();
            v340 = specialized __RawDictionaryStorage.find<A>(_:)(v334, v336);
            if ((v341 & 1) != 0)
            {
              v342 = (uint64_t *)(*(_QWORD *)(v337 + 56) + 56 * v340);
              v343 = *v342;
              v344 = v342[1];
              v345 = v342[2];
              v346 = v342[3];
              v347 = v342[4];
              v348 = v342[5];
              v349 = v342[6];
              swift_bridgeObjectRelease();
              goto LABEL_169;
            }
            swift_bridgeObjectRelease();
          }
          v343 = 0;
          v344 = 0;
          v345 = 0;
          v346 = 0;
          v347 = 0;
          v348 = 0;
          v349 = 0;
LABEL_169:
          swift_endAccess();
          swift_bridgeObjectRelease();
          v426 = 0;
          v427 = 0;
          v428 = v339;
          v429 = v343;
          v430 = v344;
          v431 = v345;
          v432 = v346;
          v433 = v347;
          v434 = v348;
          v435 = v349;
          v21 = v412;
          v325 = v424;
          v350 = v423;
          ActionEventData.action<A>()(v424, v423, (uint64_t)v412);
          v327 = v425;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v425 + 48))(v21, 1, v325) != 1)
          {
            v328 = v410;
            (*(void (**)(uint64_t, char *, uint64_t))(v327 + 32))(v410, v21, v325);
            v351 = (uint64_t)v416;
            (*(void (**)(char *, uint64_t, uint64_t))(v327 + 16))(v416, v328, v325);
            v352 = v417;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v417, 1, 1);
            v331 = v421;
            ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v409, v351, v352, v132, 0, v403, 0, 0, v421, 0.0, 0.0, 1, 0, 1, 0, 1, (uint64_t)&v426, v408, v325,
              v350);
            swift_retain();
            swift_retain();
            v419(v331);
            swift_release();
            swift_release();
            goto LABEL_171;
          }
          goto LABEL_207;
        }
        v134 = makeEntity(for:)(v129);
      }
      v135 = v134;
      goto LABEL_81;
    default:
      if (a4 != 128)
      {
LABEL_11:
        swift_release();
        return 0;
      }
      v70 = *(_QWORD *)a2;
      v71 = *(_QWORD *)(a2 + 8);
      v72 = *(_QWORD *)(a2 + 24);
      v74 = *(_QWORD *)(a2 + 32);
      v73 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v75 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_238:
          __break(1u);
          goto LABEL_239;
        }
        v304 = specialized static Entity.entityInfoType(_:)();
        if (v304)
        {
          v76 = (*(uint64_t (**)(void))(v304 + 232))();
          v305 = *(_QWORD *)(v76 + 16);
          swift_retain();
          MEMORY[0x22076D160](v305, 0);
          *(_QWORD *)(v76 + 16) = v70;
          MEMORY[0x22076D160](v70, v76);
          swift_release();
          goto LABEL_137;
        }
        v75 = makeEntity(for:)(v70);
      }
      v76 = v75;
LABEL_137:
      type metadata accessor for AnimationPlaybackController();
      v306 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v306 + 16) = v71;
      swift_beginAccess();
      swift_weakAssign();
      if (v73 && REBindPointBoundComponent())
      {
        v307 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v308 = swift_dynamicCastClassUnconditional();
LABEL_141:
          v410 = v308;
          goto LABEL_143;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_246:
          __break(1u);
          JUMPOUT(0x21BBB7F5CLL);
        }
        v398 = specialized static Entity.entityInfoType(_:)();
        if (!v398)
        {
          v308 = makeEntity(for:)(v307);
          goto LABEL_141;
        }
        v399 = (*(uint64_t (**)(void))(v398 + 232))();
        v400 = *(_QWORD *)(v399 + 16);
        swift_retain();
        MEMORY[0x22076D160](v400, 0);
        *(_QWORD *)(v399 + 16) = v307;
        MEMORY[0x22076D160](v307, v399);
        v410 = v399;
        swift_release();
      }
      else
      {
        v410 = 0;
      }
LABEL_143:
      v309 = String.init(cString:)();
      v311 = v310;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v312 = static AnimationResource.codableActionTypeMap;
      v313 = *(_QWORD *)(static AnimationResource.codableActionTypeMap + 16);
      v403 = v57;
      v409 = v74;
      v412 = (char *)v76;
      v314 = v72;
      if (v313)
      {
        swift_bridgeObjectRetain();
        v315 = specialized __RawDictionaryStorage.find<A>(_:)(v309, v311);
        if ((v316 & 1) != 0)
        {
          v317 = (uint64_t *)(*(_QWORD *)(v312 + 56) + 56 * v315);
          v318 = *v317;
          v319 = v317[1];
          v320 = v317[2];
          v321 = v317[3];
          v322 = v317[4];
          v323 = v317[5];
          v324 = v317[6];
          swift_bridgeObjectRelease();
          goto LABEL_157;
        }
        swift_bridgeObjectRelease();
      }
      v318 = 0;
      v319 = 0;
      v320 = 0;
      v321 = 0;
      v322 = 0;
      v323 = 0;
      v324 = 0;
LABEL_157:
      swift_endAccess();
      swift_bridgeObjectRelease();
      v426 = 0;
      v427 = 0;
      v428 = v314;
      v429 = v318;
      v430 = v319;
      v431 = v320;
      v432 = v321;
      v433 = v322;
      v434 = v323;
      v435 = v324;
      v21 = v411;
      v325 = v424;
      v326 = v423;
      ActionEventData.action<A>()(v424, v423, (uint64_t)v411);
      v327 = v425;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v425 + 48))(v21, 1, v325) != 1)
      {
        v328 = v404;
        (*(void (**)(uint64_t, char *, uint64_t))(v327 + 32))(v404, v21, v325);
        v329 = (uint64_t)v416;
        (*(void (**)(char *, uint64_t, uint64_t))(v327 + 16))(v416, v328, v325);
        v330 = v417;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v417, 1, 1);
        v331 = v421;
        ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v306, v329, v330, v410, 0, v403, 0, 0, v421, 0.0, 0.0, 1, 0, 1, 0, 1, (uint64_t)&v426, v409, v325,
          v326);
        swift_retain();
        swift_retain();
        swift_retain();
        v419(v331);
        swift_release();
        swift_release();
        swift_release();
LABEL_171:
        swift_release();
        (*(void (**)(char *, uint64_t))(v420 + 8))(v331, v422);
        (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v328, v325);
        return 0;
      }
LABEL_207:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v355 = *(void (**)(char *, uint64_t))(v414 + 8);
      v356 = v21;
      goto LABEL_208;
  }
}

uint64_t static EntityAction.eventBus(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  if (a1)
    return REEngineGetEventBus();
  v2 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  result = MEMORY[0x22076FDA0](*(_QWORD *)(v2 + 16));
  if (!result)
    __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ActionEventParameterUnused.CodingKeys()
{
  lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ActionEventParameterUnused.CodingKeys()
{
  lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ActionEventParameterUnused.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ActionEventParameterUnused.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ActionEventParameterUnused.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ActionEventParameterUnused(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ActionEventParameterUnused(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ActionEventParameterUnused.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ActionEventDefinition.init(startTime:duration:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;

  v11 = (char *)a5 + *(int *)(type metadata accessor for ActionEventDefinition(0, a2, a3, a4) + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
  *a5 = a6;
  a5[1] = a7;
  v13 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, a1, v13);
}

double ActionEventDefinition.startTime.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ActionEventDefinition.startTime.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*ActionEventDefinition.startTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ActionEventDefinition.duration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void ActionEventDefinition.duration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*ActionEventDefinition.duration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ActionEvent.parameter.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t ActionEventDefinition.parameter.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*ActionEventDefinition.parameter.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ActionDefinition.init(action:events:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  *a5 = 0;
  v10 = type metadata accessor for ActionDefinition(0, a3, a4, a4);
  v11 = (char *)a5 + *(int *)(v10 + 36);
  v12 = *(_QWORD *)(a3 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(v11, 1, 1, a3);
  v14 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, a1, a3);
  v13(v11, 0, 1, a3);
  swift_bridgeObjectRelease();
  *a5 = a2;
  *(_QWORD *)((char *)a5 + *(int *)(v10 + 40)) = 0;
  static EntityAction.__register()(a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
}

uint64_t ActionDefinition.action.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v18 - v14, v3 + *(int *)(a1 + 36), v11, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
  v16 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    ActionDefinition.actionFromCore.getter(a1, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v15, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v10);
  }
}

uint64_t ActionDefinition.actionFromCore.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[4];

  v5 = *(_QWORD *)(v2 + *(int *)(a1 + 40));
  if (!v5 || !RETimelineDefinitionEventTimelineGetEventTypeName())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  v6 = String.init(cString:)();
  v8 = v7;
  swift_beginAccess();
  v9 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16)
    && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8), (v11 & 1) != 0))
  {
    v12 = (__int128 *)(*(_QWORD *)(v9 + 56) + 56 * v10);
    v13 = *v12;
    v24 = v12[1];
    v25 = v13;
    swift_endAccess();
    swift_bridgeObjectRelease();
    v14 = v25;
    v15 = type metadata accessor for Optional();
    v16 = *(_QWORD *)(v15 - 8);
    MEMORY[0x24BDAC7A8](v15);
    v18 = (char *)&v24 - v17;
    static EntityAction<>.load(_:)(v5, v25, v24, MEMORY[0x24BE25028], MEMORY[0x24BE25020], (uint64_t)&v24 - v17);
    v19 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v14) == 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      memset(v26, 0, 56);
    }
    else
    {
      *(_OWORD *)((char *)&v26[1] + 8) = v25;
      *(_OWORD *)((char *)&v26[2] + 8) = v24;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v26);
      (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v18, v14);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
    v22 = *(_QWORD *)(a1 + 16);
    v23 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, v23 ^ 1u, 1, v22);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
    return static EntityAction.load(_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), MEMORY[0x24BE25078], a2);
  }
}

uint64_t ActionDefinition.eventDefinitions.getter(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v6;
  (*(void (**)(char *, __n128))(v2 + 16))(v5, v3);
  if (v7)
  {
    v11 = v7;
  }
  else
  {
    if (*(_QWORD *)&v5[*(int *)(a1 + 40)])
    {
      ActionDefinition.eventDefinitionsFromCore.getter(a1, v8, v9, v10);
    }
    else
    {
      type metadata accessor for ActionEventDefinition(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v10);
      v12 = static Array._allocateUninitialized(_:)();
    }
    v11 = v12;
  }
  v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  swift_bridgeObjectRetain();
  v13(v5, a1);
  return v11;
}

void ActionDefinition.eventDefinitionsFromCore.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t ParameterCount;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::Int EventCount;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *boxed_opaque_existential_1;
  char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t EventTypeName;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v77 = type metadata accessor for ActionEventDefinition(0, v6, v7, a4);
  MEMORY[0x24BDAC7A8](v77);
  v63 = (double *)((char *)&v60 - v8);
  v75 = v7;
  v9 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v69 = (char *)&v60 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v60 - v17;
  v19 = *(_QWORD *)(v4 + *(int *)(a1 + 40));
  if (!v19 || (EventTypeName = RETimelineDefinitionEventTimelineGetEventTypeName()) == 0)
  {
    static Array._allocateUninitialized(_:)();
    return;
  }
  ParameterCount = RETimelineDefinitionEventTimelineGetParameterCount();
  v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ParameterCount & ~(ParameterCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (ParameterCount < 0)
    goto LABEL_31;
  v22 = v21;
  v70 = v13;
  v73 = v18;
  v64 = ParameterCount;
  if (ParameterCount)
  {
    v23 = 0;
    do
    {
      if (RETimelineDefinitionEventTimelineGetParameterName())
      {
        v25 = String.init(cString:)();
        v27 = v26;
        v29 = v22[2];
        v28 = v22[3];
        if (v29 >= v28 >> 1)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v22);
        v22[2] = v29 + 1;
        v24 = &v22[2 * v29];
        v24[4] = v25;
        v24[5] = v27;
        v13 = v70;
        v18 = v73;
      }
      ++v23;
    }
    while (v64 != v23);
  }
  swift_bridgeObjectRelease();
  EventCount = RETimelineDefinitionEventTimelineGetEventCount();
  v80 = static Array._allocateUninitialized(_:)();
  v62 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(EventCount);
  if (EventCount < 0)
    goto LABEL_32;
  if (EventCount)
  {
    v31 = 0;
    v67 = v10;
    v68 = v9;
    v65 = v19;
    v66 = v11;
    v61 = EventCount;
    while (v31 != EventCount)
    {
      RETimelineDefinitionEventTimelineGetEventStartTime();
      v35 = v34;
      v77 = v31;
      RETimelineDefinitionEventTimelineGetEventDuration();
      v37 = v36;
      v71 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56);
      v71(v18, 1, 1);
      if (v64)
      {
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        v38 = v64;
        do
        {
          while (1)
          {
            v39 = String.init(cString:)();
            v41 = v40;
            swift_beginAccess();
            v42 = static AnimationResource.codableActionTypeMap;
            if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
            {
              v43 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v41);
              if ((v44 & 1) != 0)
                break;
            }
            swift_bridgeObjectRelease();
            swift_endAccess();
            static EntityAction.loadParameterFromTimeline(_:eventID:)(0, v9, v75, (uint64_t)v13);
            (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
            (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v13, v10);
            if (!--v38)
              goto LABEL_15;
          }
          v45 = *(_QWORD *)(v42 + 56) + 56 * v43;
          v46 = *(_QWORD *)(v45 + 32);
          v47 = *(_QWORD *)(v45 + 40);
          swift_endAccess();
          swift_bridgeObjectRelease();
          v48 = swift_getAssociatedTypeWitness();
          v49 = type metadata accessor for Optional();
          v74 = &v60;
          v50 = *(_QWORD *)(v49 - 8);
          MEMORY[0x24BDAC7A8](v49);
          v52 = (char *)&v60 - v51;
          static EntityAction<>.loadParameterFromTimeline<A>(_:parameterType:eventID:)(v46, 0, v46, (uint64_t)&v60 - v51, v59, v47);
          v53 = *(_QWORD *)(v48 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v52, 1, v48) == 1)
          {
            v11 = v66;
            v10 = v67;
            v54 = v73;
            (*(void (**)(char *, uint64_t))(v66 + 8))(v73, v67);
            (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
            v78 = 0u;
            v79 = 0u;
          }
          else
          {
            *((_QWORD *)&v79 + 1) = v48;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v78);
            (*(void (**)(uint64_t *, char *, uint64_t))(v53 + 32))(boxed_opaque_existential_1, v52, v48);
            v11 = v66;
            v10 = v67;
            v54 = v73;
            (*(void (**)(char *, uint64_t))(v66 + 8))(v73, v67);
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
          v56 = v69;
          v57 = AssociatedTypeWitness;
          v58 = swift_dynamicCast();
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v71)(v56, v58 ^ 1u, 1, v57);
          (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v56, v10);
          v9 = v68;
          v13 = v70;
          v18 = v54;
          --v38;
        }
        while (v38);
      }
LABEL_15:
      v32 = v77 + 1;
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v18, v10);
      ActionEventDefinition.init(startTime:duration:parameter:)((uint64_t)v13, v9, v75, v33, v63, v35, v37);
      v18 = v73;
      Array.append(_:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
      v31 = v32;
      EventCount = v61;
      if (v31 == v61)
        return;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
}

uint64_t ActionDefinition.init(fromCore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);

  v8 = type metadata accessor for ActionDefinition(0, a2, a3, a4);
  v9 = (char *)a5 + *(int *)(v8 + 36);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56);
  v12(v9, 1, 1, a2);
  *(_QWORD *)((char *)a5 + *(int *)(v8 + 40)) = a1;
  *a5 = 0;
  v10 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v12)(v9, 1, 1, a2);
}

char *ActionDefinition.createTimelineDefinition(name:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t TypedEventTimeline;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  Swift::Bool IsNativeType;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  BOOL v87;
  Swift::Bool v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v120 = a2;
  v114 = a1;
  v131 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v123 = type metadata accessor for Optional();
  v121 = *(_QWORD *)(v123 - 8);
  MEMORY[0x24BDAC7A8](v123);
  v125 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v124 = (char *)&v100 - v10;
  v122 = AssociatedTypeWitness;
  v128 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v113 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v112 = (char *)&v100 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v119 = (char *)&v100 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v104 = (char *)&v100 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v106 = (char *)&v100 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v105 = (char *)&v100 - v22;
  v115 = v6;
  v24 = type metadata accessor for ActionEventDefinition(0, v5, v6, v23);
  v118 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v117 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v127 = (char *)&v100 - v27;
  v102 = v28;
  MEMORY[0x24BDAC7A8](v29);
  v126 = (char *)&v100 - v30;
  v116 = 0;
  v31 = type metadata accessor for Optional();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v100 - v33;
  v35 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v108 = (char *)&v100 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v107 = (char *)&v100 - v39;
  MEMORY[0x24BDAC7A8](v40);
  v110 = (char *)&v100 - v41;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v100 - v43;
  ActionDefinition.action.getter(a3, (uint64_t)v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v44, v34, v5);
  v103 = a3;
  ActionDefinition.eventDefinitions.getter(a3);
  v45 = MEMORY[0x220768FCC]();
  swift_bridgeObjectRelease();
  if (v45 < 1)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v44, v5);
    return 0;
  }
  v101 = v35;
  v46 = *(uint64_t (**)(uint64_t))(v115 + 32);
  v109 = v44;
  if (v46(v5))
  {
    v47 = swift_dynamicCastMetatype();
    v48 = v124;
    v49 = v118;
    if (!v47 && !swift_dynamicCastMetatype())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
      if (!swift_dynamicCastMetatype())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
        if (!swift_dynamicCastMetatype())
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
          if (!swift_dynamicCastMetatype())
          {
            type metadata accessor for simd_quatf(0);
            if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
              swift_dynamicCastMetatype();
          }
        }
      }
    }
  }
  else
  {
    v48 = v124;
    v49 = v118;
  }
  _typeName(_:qualified:)();
  String.utf8CString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  TypedEventTimeline = RETimelineDefinitionCreateTypedEventTimeline();
  swift_release();
  swift_release();
  v120 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
  v120(v110, v109, v5);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
  v111 = v5;
  v110 = (char *)v51;
  LODWORD(v114) = swift_dynamicCast();
  if ((_DWORD)v114)
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
  v100 = v3;
  v52 = ActionDefinition.eventDefinitions.getter(v103);
  v53 = MEMORY[0x220768FE4](v52, v24);
  v54 = v123;
  v55 = v125;
  v124 = (char *)TypedEventTimeline;
  if (v53)
  {
    v56 = 0;
    v57 = &v126[*(int *)(v24 + 40)];
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v126, v52+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v56, v24);
      }
      else
      {
        v62 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v102 != 8)
        {
          __break(1u);
          JUMPOUT(0x21BBBA358);
        }
        v129 = v62;
        (*(void (**)(char *, uint64_t *, uint64_t))(v49 + 16))(v126, &v129, v24);
        swift_unknownObjectRelease();
      }
      v59 = v56 + 1;
      v54 = v123;
      if (__OFADD__(v56, 1))
        goto LABEL_57;
      v60 = v121;
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v48, v57, v123);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v126, v24);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v48, 1, v122) != 1)
        break;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v54);
      v61 = MEMORY[0x220768FE4](v52, v24);
      ++v56;
      v55 = v125;
      if (v59 == v61)
        goto LABEL_28;
    }
    swift_bridgeObjectRelease();
    v70 = v128;
    v71 = *(void (**)(char *, char *, uint64_t))(v128 + 32);
    v72 = v105;
    v73 = v48;
    v74 = v122;
    v71(v105, v73, v122);
    v75 = v106;
    v71(v106, v72, v74);
    v55 = v125;
    v66 = v109;
    if ((_DWORD)v114)
    {
      v71(v104, v75, v74);
      if (swift_dynamicCast())
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
        v64 = 1;
        goto LABEL_29;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v75, v74);
    }
    v65 = 1;
  }
  else
  {
LABEL_28:
    swift_bridgeObjectRelease();
    v64 = 0;
    v65 = 0;
    v66 = v109;
    if ((_DWORD)v114)
    {
LABEL_29:
      LODWORD(v126) = v64;
      v67 = v111;
      v120(v107, v66, v111);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(&v129, v130);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      v68 = v116;
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      if (!v68)
      {
        v99 = v69;
        v116 = 0;
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
        __asm { BR              X10 }
      }

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v66, v67);
      return 0;
    }
  }
  LODWORD(v126) = v65;
  v76 = v111;
  v77 = v115;
  type metadata accessor for EntityActionWrapper(0, v111, v115, v63);
  v78 = v108;
  v120(v108, v66, v76);
  v79 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v79 + 80) - 8) + 32))(v79 + *(_QWORD *)(*(_QWORD *)v79 + 96), v78);
  RETimelineDefinitionEventTimelineSetAndRetainSwiftConstantData();
  swift_release();
  LODWORD(v114) = 0;
  LODWORD(v78) = (_DWORD)v126;
  (*(void (**)(uint64_t, uint64_t))(v77 + 16))(v76, v77);
  RETimelineDefinitionEventTimelineSetReversible();
  v80 = v117;
  if ((_DWORD)v78)
    RETimelineDefinitionEventTimelineAddParameter();
  v81 = ActionDefinition.eventDefinitions.getter(v103);
  v82 = MEMORY[0x220768FE4](v81, v24);
  v84 = v121;
  v83 = v122;
  if (!v82)
  {
LABEL_52:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v109, v111);
    return v124;
  }
  v85 = 0;
  v120 = (void (*)(char *, char *, uint64_t))v81;
  while (1)
  {
    v88 = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (v88)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v127, v81+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v85, v24);
    }
    else
    {
      v97 = _ArrayBuffer._getElementSlowPath(_:)();
      if (v102 != 8)
        __break(1u);
      v129 = v97;
      (*(void (**)(char *, uint64_t *, uint64_t))(v49 + 16))(v127, &v129, v24);
      swift_unknownObjectRelease();
    }
    v89 = v128;
    v90 = v85 + 1;
    if (__OFADD__(v85, 1))
    {
      __break(1u);
LABEL_57:
      __break(1u);
      JUMPOUT(0x21BBBA32CLL);
    }
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v80, v127, v24);
    v126 = (char *)RETimelineDefinitionEventTimelineAddEvent();
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v55, &v80[*(int *)(v24 + 40)], v54);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v55, 1, v83) != 1)
      break;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v80, v24);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v55, v54);
LABEL_41:
    v86 = v120;
    ++v85;
    v87 = v90 == MEMORY[0x220768FE4](v120, v24);
    v81 = (uint64_t)v86;
    if (v87)
      goto LABEL_52;
  }
  v91 = v119;
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v119, v55, v83);
  if (!(_DWORD)v114)
  {
    type metadata accessor for EntityActionParameterWrapper(0, v111, v115, v92);
    v96 = (uint64_t)v113;
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v113, v91, v83);
    EntityActionParameterWrapper.__allocating_init(parameter:)(v96);
    RETimelineDefinitionEventTimelineSetAndRetainSwiftParameter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v83);
    v80 = v117;
    v49 = v118;
    (*(void (**)(char *, uint64_t))(v118 + 8))(v117, v24);
    v55 = v125;
    goto LABEL_41;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v112, v91, v83);
  swift_dynamicCast();
  __swift_project_boxed_opaque_existential_1(&v129, v130);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v93 = v116;
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v93)
  {
    v95 = v94;
    v116 = 0;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
    __asm { BR              X9 }
  }

  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v119, v122);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v117, v24);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v109, v111);
  return 0;
}

uint64_t ActionDefinition.isModified.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v17;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - v7;
  v9 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v2;
  (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v9 + 16))(v13, v2, a1, v11);
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a1);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &v13[*(int *)(a1 + 36)], v5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a1);
    v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v8, 1, v4) != 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v15;
}

uint64_t ActionAnimation.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_BYTE *)(v0 + 184);
  if (*(_QWORD *)(v0 + 160))
  {
    v4 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_BYTE *)(v0 + 184));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_BYTE *)(v0 + 184));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path setter for ActionAnimation.name : <A>ActionAnimation<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return ActionAnimation.name.setter(v1, v2);
}

uint64_t ActionAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return result;
}

uint64_t (*ActionAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = ActionAnimation.name.getter();
  a1[1] = v3;
  return FromToByAnimation.name.modify;
}

uint64_t ActionAnimation.blendLayer.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 192) != 1)
    return *(unsigned int *)(v0 + 188);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 200) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t ActionAnimation.blendLayer.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 188) = result;
  *(_BYTE *)(v1 + 192) = 0;
  return result;
}

uint64_t (*ActionAnimation.blendLayer.modify(_QWORD *a1))()
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if (*(_BYTE *)(v1 + 192) == 1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (v3)
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 188);
  }
  *v2 = v3;
  return ActionAnimation.blendLayer.modify;
}

uint64_t ActionAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 176);
  v5 = *(unsigned __int8 *)(v1 + 184);
  if (v5 == 255)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = v11;
      v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v9 = 0;
      v8 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  return swift_release();
}

double key path getter for ActionAnimation.bindTarget : <A>ActionAnimation<A>@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  ActionAnimation.bindTarget.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for ActionAnimation.bindTarget : <A>ActionAnimation<A>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v4[2];
  unsigned __int8 v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 16);
  v4[0] = *(_QWORD *)a1;
  v4[1] = v1;
  v5 = v2;
  outlined copy of BindTarget(v4[0], v1, v2);
  return ActionAnimation.bindTarget.setter(v4);
}

uint64_t ActionAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_BYTE *)(v1 + 184));
  *(_QWORD *)(v1 + 168) = v2;
  *(_QWORD *)(v1 + 176) = v3;
  *(_BYTE *)(v1 + 184) = v4;
  return result;
}

uint64_t (*ActionAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  ActionAnimation.bindTarget.getter(a1);
  return FromToByAnimation.bindTarget.modify;
}

uint64_t ActionAnimation.fillMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 194) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 193);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *ActionAnimation.fillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 193) = *result;
  return result;
}

unsigned __int8 *(*ActionAnimation.fillMode.modify(_QWORD *a1))(unsigned __int8 *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 194) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (v3)
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)(v1 + 193);
  }
  *v2 = v3;
  return FromToByAnimation.fillMode.modify;
}

uint64_t ActionAnimation.trimStart.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipStart;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0)
    return *(_QWORD *)&v8[0];
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t ActionAnimation.trimStart.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  *(_BYTE *)(v2 + 9) = 0;
  return result;
}

uint64_t (*ActionAnimation.trimStart.modify(uint64_t a1))()
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = ActionAnimation.trimStart.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimStart.modify;
}

uint64_t ActionAnimation.trimEnd.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipEnd;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = v0[7];
  v14 = v0[6];
  v15 = v1;
  v16 = v0[8];
  v17 = *((_QWORD *)v0 + 18);
  v2 = v0[3];
  v10 = v0[2];
  v11 = v2;
  v3 = v0[5];
  v12 = v0[4];
  v13 = v3;
  v4 = v0[1];
  v8 = *v0;
  v9 = v4;
  if ((BYTE9(v4) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t ActionAnimation.trimEnd.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  *(_BYTE *)(v2 + 25) = 0;
  return result;
}

uint64_t (*ActionAnimation.trimEnd.modify(uint64_t a1))()
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = ActionAnimation.trimEnd.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimEnd.modify;
}

uint64_t ActionAnimation.trimDuration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipDuration;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_OWORD *)(v0 + 112);
  v13 = *(_OWORD *)(v0 + 96);
  v14 = v1;
  v15 = *(_OWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v9 = *(_OWORD *)(v0 + 32);
  v10 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v11 = *(_OWORD *)(v0 + 64);
  v12 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v9) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v16 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      v5 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t ActionAnimation.trimDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  *(_BYTE *)(v2 + 41) = 0;
  return result;
}

uint64_t (*ActionAnimation.trimDuration.modify(uint64_t a1))()
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = ActionAnimation.trimDuration.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimDuration.modify;
}

double ActionAnimation.offset.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_OWORD *)(v0 + 112);
  v12 = *(_OWORD *)(v0 + 96);
  v13 = v1;
  v14 = *(_OWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v9 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v10 = *(_OWORD *)(v0 + 64);
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void ActionAnimation.offset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
  *(_BYTE *)(v1 + 56) = 0;
}

double (*ActionAnimation.offset.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = ActionAnimation.offset.getter();
  return FromToByAnimation.offset.modify;
}

double ActionAnimation.delay.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 96);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v9 = *(_OWORD *)(v0 + 64);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void ActionAnimation.delay.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
  *(_BYTE *)(v1 + 72) = 0;
}

double (*ActionAnimation.delay.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = ActionAnimation.delay.getter();
  return FromToByAnimation.delay.modify;
}

float ActionAnimation.speed.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 96);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v9 = *(_OWORD *)(v0 + 64);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((v10 & 1) == 0)
    return *((float *)&v9 + 3);
  v5 = 1.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void ActionAnimation.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 76) = a1;
  *(_BYTE *)(v1 + 80) = 0;
}

float (*ActionAnimation.speed.modify(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = ActionAnimation.speed.getter();
  return FromToByAnimation.speed.modify;
}

void ActionAnimation.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int ClipLoopBehavior;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 112);
  v11 = *(_OWORD *)(v1 + 96);
  v12 = v3;
  v13 = *(_OWORD *)(v1 + 128);
  v14 = *(_QWORD *)(v1 + 144);
  v4 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(v1 + 80);
  v9[4] = *(_OWORD *)(v1 + 64);
  v10 = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    v7 = *(_QWORD *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

_BYTE *ActionAnimation.repeatMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = *result;
  return result;
}

uint64_t (*ActionAnimation.repeatMode.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  ActionAnimation.repeatMode.getter((_BYTE *)(a1 + 8));
  return ActionAnimation.repeatMode.modify;
}

double ActionAnimation.duration.getter()
{
  uint64_t v0;
  double result;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
    return 0.0;
  RETimelineDefinitionGetDuration();
  return result;
}

uint64_t ActionAnimation.init(for:events:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, _BYTE *a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v47[12];
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69[2];
  char v70;
  _OWORD v71[9];
  uint64_t v72;

  v65 = a6;
  v58 = a3;
  v66 = a2;
  v61 = a1;
  v53 = a13;
  v51 = a15;
  v49 = a17;
  v52 = a14 & 1;
  v50 = a16 & 1;
  v48 = a18 & 1;
  v62 = *(_QWORD *)(a19 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v29 = &v47[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = type metadata accessor for ActionDefinition(255, a19, a20, v30);
  v64 = type metadata accessor for Optional();
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v33 = &v47[-v32];
  v56 = *a5;
  v55 = a5[1];
  v54 = *((unsigned __int8 *)a5 + 16);
  LOBYTE(a5) = *a7;
  v57 = *a8;
  v60 = a9 + *(int *)(type metadata accessor for ActionAnimation(0, a19, a20, v34) + 40);
  v59 = *(void (**)(void))(*(_QWORD *)(v31 - 8) + 56);
  v59();
  v69[1] = 0;
  v69[0] = 0;
  v70 = -1;
  v68 = (char)a5;
  v67 = 0;
  v35 = v58;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(v58, a4, v69, 0, &v68, &v67, v53, v52, (uint64_t)v71, a10, a11, a12, v51, v50, v49, v48);
  v36 = v71[7];
  v37 = v71[8];
  *(_OWORD *)(a9 + 96) = v71[6];
  *(_OWORD *)(a9 + 112) = v36;
  *(_OWORD *)(a9 + 128) = v37;
  *(_QWORD *)(a9 + 144) = v72;
  v38 = v71[3];
  *(_OWORD *)(a9 + 32) = v71[2];
  *(_OWORD *)(a9 + 48) = v38;
  v39 = v71[5];
  *(_OWORD *)(a9 + 64) = v71[4];
  *(_OWORD *)(a9 + 80) = v39;
  v40 = v71[1];
  *(_OWORD *)a9 = v71[0];
  *(_OWORD *)(a9 + 16) = v40;
  v41 = *(uint64_t (**)(uint64_t, uint64_t))(a20 + 24);
  swift_bridgeObjectRetain();
  v42 = v61;
  LOBYTE(v41) = v41(a19, a20) & 1;
  type metadata accessor for TimelineDefinition();
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(a9 + 152) = v35;
  *(_QWORD *)(a9 + 160) = a4;
  v44 = v55;
  *(_QWORD *)(a9 + 168) = v56;
  *(_QWORD *)(a9 + 176) = v44;
  *(_BYTE *)(a9 + 184) = v54;
  *(_DWORD *)(a9 + 188) = v65;
  *(_BYTE *)(a9 + 192) = 0;
  *(_BYTE *)(a9 + 193) = v57;
  *(_BYTE *)(a9 + 194) = 0;
  *(_BYTE *)(a9 + 195) = (_BYTE)v41;
  *(_QWORD *)(a9 + 200) = v43;
  v45 = v62;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v62 + 16))(v29, v42, a19);
  ActionDefinition.init(action:events:)((uint64_t)v29, v66, a19, a20, v33);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v42, a19);
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v59)(v33, 0, 1, v31);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v63 + 40))(v60, v33, v64);
}

uint64_t ActionAnimation.action.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for ActionDefinition(255, v6, *(_QWORD *)(a1 + 24), a2);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v15 - v11, v3 + *(int *)(a1 + 40), v8, v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 1, 1, v6);
  }
  else
  {
    ActionDefinition.action.getter(v7, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v12, v7);
  }
}

uint64_t key path setter for ActionAnimation.action : <A>ActionAnimation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v7 = type metadata accessor for Optional();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, __n128))(v11 + 16))((char *)&v15 - v9, a1, v8);
  v13 = type metadata accessor for ActionAnimation(0, v5, v6, v12);
  return ActionAnimation.action.setter((uint64_t)v10, v13);
}

uint64_t ActionAnimation.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - v8;
  v10 = v2 + *(int *)(a2 + 40);
  v12 = type metadata accessor for ActionDefinition(0, v5, *(_QWORD *)(a2 + 24), v11);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    v14 = v10 + *(int *)(v12 + 36);
    v15 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v14, v9, v15);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

void (*ActionAnimation.action.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = type metadata accessor for Optional();
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  ActionAnimation.action.getter(a2, v10, (uint64_t)v9);
  return ActionAnimation.action.modify;
}

void ActionAnimation.action.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    ActionAnimation.action.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ActionAnimation.action.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t ActionAnimation.eventDefinitions.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for ActionDefinition(255, v6, v7, a4);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)&v18 - v12, v4 + *(int *)(a1 + 40), v9, v11);
  v14 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    type metadata accessor for ActionEventDefinition(0, v6, v7, v15);
    return static Array._allocateUninitialized(_:)();
  }
  else
  {
    v16 = ActionDefinition.eventDefinitions.getter(v8);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v8);
  }
  return v16;
}

uint64_t key path setter for ActionAnimation.eventDefinitions : <A>ActionAnimation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ActionAnimation(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  v5 = swift_bridgeObjectRetain();
  return ActionAnimation.eventDefinitions.setter(v5, v4, v6, v7);
}

uint64_t ActionAnimation.eventDefinitions.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)(v4 + *(int *)(a2 + 40));
  v7 = type metadata accessor for ActionDefinition(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    return swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  return result;
}

uint64_t (*ActionAnimation.eventDefinitions.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  a1[1] = a2;
  a1[2] = v4;
  *a1 = ActionAnimation.eventDefinitions.getter(a2, a2, a3, a4);
  return ActionAnimation.eventDefinitions.modify;
}

uint64_t ActionAnimation.eventDefinitions.modify(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  if ((a2 & 1) == 0)
    return ActionAnimation.eventDefinitions.setter(*a1, v4, a3, a4);
  v5 = swift_bridgeObjectRetain();
  ActionAnimation.eventDefinitions.setter(v5, v4, v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t ActionAnimation.createResource()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::OpaquePointer v19;
  uint64_t v20;
  Swift::OpaquePointer v21;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  Swift::OpaquePointer v30;
  uint64_t v31;

  v5 = v4;
  v7 = type metadata accessor for ActionDefinition(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - v10;
  v12 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - v14;
  if ((ActionAnimation.isModified.getter(a1, v16, v17, v18) & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, (char *)v4 + *(int *)(a1 + 40), v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v19._rawValue = *(void **)(v4[25] + 16);
      return ActionAnimation.createResource(timelineDefinition:)(v19);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, v7);
      v24 = (void (*)(char *, char *, uint64_t))v4[20];
      v23 = v4[21];
      v25 = v5[22];
      v26 = *((_BYTE *)v5 + 184);
      if (v24)
      {
        v27 = v5[19];
        swift_bridgeObjectRetain();
        outlined copy of BindTarget?(v23, v25, v26);
        swift_retain();
      }
      else if (*(_QWORD *)(v5[25] + 16))
      {
        outlined copy of BindTarget?(v5[21], v5[22], *((_BYTE *)v5 + 184));
        swift_retain();
        RETimelineDefinitionGetName();
        v27 = String.init(cString:)();
        v24 = v28;
      }
      else
      {
        outlined copy of BindTarget?(v5[21], v5[22], *((_BYTE *)v5 + 184));
        swift_retain();
        v27 = 0;
        v24 = (void (*)(char *, char *, uint64_t))0xE000000000000000;
      }
      outlined consume of BindTarget?(v23, v25, v26);
      swift_release();
      v29 = ActionDefinition.createTimelineDefinition(name:)(v27, v24, v7);
      swift_bridgeObjectRelease();
      if (v29)
      {
        v30._rawValue = v29;
        v20 = ActionAnimation.createResource(timelineDefinition:)(v30);
        RERelease();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v7);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v7);
        return 0;
      }
    }
    return v20;
  }
  else
  {
    v21._rawValue = 0;
    return ActionAnimation.createResource(timelineDefinition:)(v21);
  }
}

uint64_t ActionAnimation.isModified.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char v17;
  BOOL v18;
  char v19;
  uint64_t v21;

  v5 = v4;
  v7 = type metadata accessor for ActionDefinition(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(v7 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, v5 + *(int *)(a1 + 40), v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v17 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, v7);
    v17 = ActionDefinition.isModified.getter(v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v7);
  }
  if (*(_QWORD *)(v5 + 160))
    v18 = 0;
  else
    v18 = *(unsigned __int8 *)(v5 + 184) == 255;
  v19 = v18;
  return (*(_BYTE *)(v5 + 195) != 2
       || (v19 & (*(_BYTE *)(v5 + 192) & *(_BYTE *)(v5 + 194)) & 1) == 0) | v17 & 1u;
}

uint64_t ActionAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  __int128 *v1;
  char v3;
  int v4;
  char v5;
  char FillMode;
  int v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  __int16 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int16 v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t TimelineAsset;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  int v77;
  char v78;
  char v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  int v84;
  int v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;

  if (a1._rawValue)
  {
    v3 = *((_BYTE *)v1 + 184);
    v4 = *((_DWORD *)v1 + 47);
    v5 = *((_BYTE *)v1 + 192);
    FillMode = *((_BYTE *)v1 + 193);
    v7 = *((unsigned __int8 *)v1 + 194);
    v8 = *((_BYTE *)v1 + 195);
    v9 = *((_QWORD *)v1 + 25);
    v10 = *(__int128 *)((char *)v1 + 168);
    v114 = *(__int128 *)((char *)v1 + 152);
    v115 = v10;
    LOBYTE(v116) = v3;
    DWORD1(v116) = v4;
    BYTE8(v116) = v5;
    BYTE9(v116) = FillMode;
    BYTE10(v116) = v7;
    BYTE11(v116) = v8;
    *(_QWORD *)&v117 = v9;
    TimelineBaseProperties.writeProperties(_:)(a1);
    v11 = v1[7];
    v12 = v1[5];
    v110 = v1[6];
    v111 = v11;
    v13 = v1[7];
    v112 = v1[8];
    v14 = v1[3];
    v15 = v1[1];
    v106 = v1[2];
    v107 = v14;
    v16 = v1[3];
    v17 = v1[5];
    v108 = v1[4];
    v109 = v17;
    v18 = v1[1];
    v104 = *v1;
    v105 = v18;
    v120 = v110;
    v121 = v13;
    v122 = v1[8];
    v116 = v106;
    v117 = v16;
    v118 = v108;
    v119 = v12;
    v113 = *((_QWORD *)v1 + 18);
    v123 = *((_QWORD *)v1 + 18);
    v114 = v104;
    v115 = v15;
    if (!TimelineClipProperties.isClipped.getter())
    {
      type metadata accessor for TimelineDefinition();
      *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
      RERetain();
      v49 = TimelineDefinition.resource.getter();
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
      return (uint64_t)v49;
    }
    v19 = BYTE9(v112);
    v20 = BYTE10(v112);
    v91 = v113;
    v87 = BYTE8(v112);
    v89 = BYTE11(v112);
    v83 = v112;
    v85 = DWORD1(v112);
    v81 = v111;
    v80 = v110;
    if ((BYTE10(v112) & 1) != 0)
    {
      if (!*(_QWORD *)(v113 + 16))
      {
        outlined retain of TimelineClipProperties((uint64_t)&v104);
        if (!v7)
        {
LABEL_25:
          v59 = 0;
LABEL_26:
          v78 = FillMode;
          v79 = BYTE1(v109);
          v76 = v109;
          v77 = HIDWORD(v108);
          v75 = v108;
          v73 = v59;
          v74 = BYTE8(v108);
          v72 = v107;
          v71 = BYTE8(v107);
          v70 = v106;
          v68 = BYTE9(v106);
          v69 = BYTE8(v106);
          v61 = v105;
          v62 = BYTE8(v105);
          v63 = BYTE9(v105);
          v64 = v104;
          v65 = BYTE8(v104);
          v66 = BYTE9(v104);
          type metadata accessor for TimelineDefinition();
          v67 = swift_allocObject();
          *(Swift::OpaquePointer *)(v67 + 16) = a1;
          RERetain();
          swift_release();
          *(_QWORD *)&v94 = v64;
          BYTE8(v94) = v65;
          BYTE9(v94) = v66;
          *(_QWORD *)&v95 = v61;
          BYTE8(v95) = v62;
          BYTE9(v95) = v63;
          *(_QWORD *)&v96 = v70;
          BYTE8(v96) = v69;
          BYTE9(v96) = v68;
          *(_QWORD *)&v97 = v72;
          BYTE8(v97) = v71;
          *(_QWORD *)&v98 = v75;
          BYTE8(v98) = v74;
          HIDWORD(v98) = v77;
          LOBYTE(v99) = v76;
          BYTE1(v99) = v79;
          *((_QWORD *)&v99 + 1) = v67;
          v100 = v80;
          v101 = v81;
          LOBYTE(v102) = v83;
          DWORD1(v102) = v85;
          BYTE8(v102) = v87;
          BYTE9(v102) = v78;
          BYTE10(v102) = v73;
          BYTE11(v102) = v89;
          v103 = v91;
          v123 = v91;
          v121 = v81;
          v122 = v102;
          v114 = v94;
          v115 = v95;
          v119 = v99;
          v120 = v80;
          v117 = v97;
          v118 = v98;
          v116 = v96;
          outlined retain of TimelineClipProperties((uint64_t)&v94);
          swift_retain();
          closure #1 in TimelineClipProperties.createClip()((uint64_t)&v114, &v93);
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)&v94);
          outlined release of TimelineClipProperties((uint64_t)&v94);
          return v93;
        }
LABEL_19:
        if (*(_QWORD *)(v9 + 16))
          FillMode = RETimelineDefinitionGetFillMode();
        else
          FillMode = 0;
        goto LABEL_25;
      }
      outlined retain of TimelineClipProperties((uint64_t)&v104);
      v21 = RETimelineDefinitionGetFillMode();
    }
    else
    {
      outlined retain of TimelineClipProperties((uint64_t)&v104);
      v21 = v19;
    }
    if (v21)
    {
      FillMode = v19;
      v59 = v20;
    }
    else
    {
      v59 = 0;
    }
    if (v21 || ((v7 ^ 1) & 1) != 0)
      goto LABEL_26;
    goto LABEL_19;
  }
  v22 = *((_QWORD *)v1 + 12);
  v23 = *((_QWORD *)v1 + 13);
  v24 = *((_QWORD *)v1 + 14);
  v25 = *((_QWORD *)v1 + 15);
  v26 = *((_BYTE *)v1 + 128);
  v27 = *((_DWORD *)v1 + 33);
  v28 = *((_BYTE *)v1 + 136);
  v29 = *((_BYTE *)v1 + 137);
  v30 = *((_BYTE *)v1 + 138);
  v31 = *((_BYTE *)v1 + 139);
  v32 = *((_DWORD *)v1 + 35);
  v33 = *((_QWORD *)v1 + 18);
  v35 = (__int16 *)((char *)v1 + 129);
  v34 = *(_WORD *)((char *)v1 + 129);
  v36 = v1[3];
  v116 = v1[2];
  v117 = v36;
  v37 = v1[5];
  v118 = v1[4];
  v119 = v37;
  v38 = v1[1];
  v114 = *v1;
  v115 = v38;
  v39 = v27;
  v82 = v22;
  *(_QWORD *)&v120 = v22;
  *((_QWORD *)&v120 + 1) = v23;
  *(_QWORD *)&v121 = v24;
  *((_QWORD *)&v121 + 1) = v25;
  LOBYTE(v122) = v26;
  BYTE3(v122) = *((_BYTE *)v1 + 131);
  *(_WORD *)((char *)&v122 + 1) = v34;
  DWORD1(v122) = v27;
  v90 = v29;
  v92 = v28;
  BYTE8(v122) = v28;
  BYTE9(v122) = v29;
  v86 = v31;
  v88 = v30;
  BYTE10(v122) = v30;
  BYTE11(v122) = v31;
  v84 = v32;
  HIDWORD(v122) = v32;
  v123 = v33;
  if (TimelineClipProperties.isClipped.getter())
  {
    v40 = v1[3];
    v116 = v1[2];
    v117 = v40;
    v41 = v1[5];
    v118 = v1[4];
    v119 = v41;
    v42 = v1[1];
    v114 = *v1;
    v115 = v42;
    *(_QWORD *)&v120 = v82;
    *((_QWORD *)&v120 + 1) = v23;
    *(_QWORD *)&v121 = v24;
    *((_QWORD *)&v121 + 1) = v25;
    LOBYTE(v122) = v26;
    v43 = *v35;
    BYTE3(v122) = *((_BYTE *)v1 + 131);
    *(_WORD *)((char *)&v122 + 1) = v43;
    DWORD1(v122) = v39;
    BYTE8(v122) = v92;
    BYTE9(v122) = v90;
    BYTE10(v122) = v88;
    BYTE11(v122) = v86;
    HIDWORD(v122) = v84;
    v123 = v33;
    if ((TimelineClipProperties.isModified.getter() & 1) == 0)
    {
      swift_retain();
      v60 = TimelineDefinition.resource.getter();
      swift_release();
      return (uint64_t)v60;
    }
    v44 = v1[3];
    v116 = v1[2];
    v117 = v44;
    v45 = v1[5];
    v118 = v1[4];
    v119 = v45;
    v46 = v1[1];
    v114 = *v1;
    v115 = v46;
    *(_QWORD *)&v120 = v82;
    *((_QWORD *)&v120 + 1) = v23;
    *(_QWORD *)&v121 = v24;
    *((_QWORD *)&v121 + 1) = v25;
    LOBYTE(v122) = v26;
    v47 = *v35;
    BYTE3(v122) = *((_BYTE *)v1 + 131);
    *(_WORD *)((char *)&v122 + 1) = v47;
    DWORD1(v122) = v39;
    BYTE8(v122) = v92;
    BYTE9(v122) = v90;
    BYTE10(v122) = v88;
    BYTE11(v122) = v86;
    HIDWORD(v122) = v84;
    v123 = v33;
    return TimelineClipProperties.createClip()();
  }
  else
  {
    v48 = *(_QWORD **)(*((_QWORD *)v1 + 25) + 16);
    if (v48)
    {
      v51 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v51, (uint64_t)&v114);
      v52 = *((_QWORD *)&v115 + 1);
      v53 = v116;
      __swift_project_boxed_opaque_existential_1(&v114, *((uint64_t *)&v115 + 1));
      (*(void (**)(uint64_t, uint64_t))(v53 + 32))(v52, v53);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
      TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
      if (TimelineAsset)
      {
        v55 = TimelineAsset;
        RETimelineDefinitionGetName();
        v56 = String.init(cString:)();
        v58 = v57;
        type metadata accessor for AnimationResource();
        v48 = (_QWORD *)swift_allocObject();
        v48[2] = v55;
        v48[3] = v56;
        v48[4] = v58;
        RERetain();
        REAssetSetSwiftObject();
        RERelease();
      }
      else
      {
        return 0;
      }
    }
  }
  return (uint64_t)v48;
}

uint64_t ActionAnimation.generate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  result = ActionAnimation.createResource()(a1, a2, a3, a4);
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v5 = 0xD00000000000001CLL;
    *(_QWORD *)(v5 + 8) = 0x800000021BE822D0;
    *(_BYTE *)(v5 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance ActionAnimation<A>(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)ActionAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.blendLayer.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance ActionAnimation<A>(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return ActionAnimation.fillMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.fillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance ActionAnimation<A>()
{
  return ActionAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance ActionAnimation<A>(uint64_t a1, char a2)
{
  return ActionAnimation.trimStart.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.trimStart.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance ActionAnimation<A>()
{
  return ActionAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance ActionAnimation<A>(uint64_t a1, char a2)
{
  return ActionAnimation.trimEnd.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.trimEnd.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance ActionAnimation<A>()
{
  return ActionAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance ActionAnimation<A>(uint64_t a1, char a2)
{
  return ActionAnimation.trimDuration.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.trimDuration.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.offset.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.delay.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.speed.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_BYTE *protocol witness for AnimationDefinition.repeatMode.setter in conformance ActionAnimation<A>(char *a1)
{
  char v2;

  v2 = *a1;
  return ActionAnimation.repeatMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance ActionAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ActionAnimation.repeatMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinitionInternal.generate() in conformance ActionAnimation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ActionAnimation.generate()(a1, a2, a3, a4);
}

uint64_t AnyActionAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 176);
  v5 = *(unsigned __int8 *)(v1 + 184);
  if (v5 == 255)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = v11;
      v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v9 = 0;
      v8 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  return swift_release();
}

uint64_t AnyActionAnimation.trimStart.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipStart;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0)
    return *(_QWORD *)&v8[0];
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnyActionAnimation.trimEnd.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipEnd;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = v0[7];
  v14 = v0[6];
  v15 = v1;
  v16 = v0[8];
  v17 = *((_QWORD *)v0 + 18);
  v2 = v0[3];
  v10 = v0[2];
  v11 = v2;
  v3 = v0[5];
  v12 = v0[4];
  v13 = v3;
  v4 = v0[1];
  v8 = *v0;
  v9 = v4;
  if ((BYTE9(v4) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnyActionAnimation.trimDuration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipDuration;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_OWORD *)(v0 + 112);
  v13 = *(_OWORD *)(v0 + 96);
  v14 = v1;
  v15 = *(_OWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v9 = *(_OWORD *)(v0 + 32);
  v10 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v11 = *(_OWORD *)(v0 + 64);
  v12 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v9) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v16 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      v5 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

double AnyActionAnimation.offset.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_OWORD *)(v0 + 112);
  v12 = *(_OWORD *)(v0 + 96);
  v13 = v1;
  v14 = *(_OWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v9 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v10 = *(_OWORD *)(v0 + 64);
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

double AnyActionAnimation.delay.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 96);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v9 = *(_OWORD *)(v0 + 64);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

float AnyActionAnimation.speed.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 96);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v9 = *(_OWORD *)(v0 + 64);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((v10 & 1) == 0)
    return *((float *)&v9 + 3);
  v5 = 1.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnyActionAnimation.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int ClipLoopBehavior;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 112);
  v11 = *(_OWORD *)(v1 + 96);
  v12 = v3;
  v13 = *(_OWORD *)(v1 + 128);
  v14 = *(_QWORD *)(v1 + 144);
  v4 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(v1 + 80);
  v9[4] = *(_OWORD *)(v1 + 64);
  v10 = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    v7 = *(_QWORD *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

uint64_t AnyActionAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 9) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 25) = 1;
      *(_QWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 41) = 1;
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 81) = 4;
      *(_QWORD *)(a1 + 88) = v9;
      *(_QWORD *)(a1 + 96) = ClipSourceRef;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 104) = v10;
      *(_BYTE *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(_BYTE *)(a1 + 138) = v15;
      *(_BYTE *)(a1 + 139) = v14;
      *(_QWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_BYTE *)(a1 + 192) = 1;
      *(_BYTE *)(a1 + 193) = 0;
      *(_BYTE *)(a1 + 194) = 1;
      *(_BYTE *)(a1 + 195) = 2;
      *(_QWORD *)(a1 + 200) = v8;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AnyActionAnimation.createResource()()
{
  uint64_t v0;
  Swift::OpaquePointer v2;

  if (!*(_QWORD *)(v0 + 160)
    && *(unsigned __int8 *)(v0 + 184) == 255
    && (*(_BYTE *)(v0 + 192) & 1) != 0
    && (*(_BYTE *)(v0 + 194) & 1) != 0
    && *(_BYTE *)(v0 + 195) == 2)
  {
    if (TimelineClipProperties.isClipped.getter() && (TimelineClipProperties.isModified.getter() & 1) != 0)
      return (_QWORD *)TimelineClipProperties.createClip()();
    else
      return TimelineDefinition.resource.getter();
  }
  else
  {
    v2._rawValue = *(void **)(*(_QWORD *)(v0 + 200) + 16);
    return AnyActionAnimation.createResource(timelineDefinition:)(v2);
  }
}

_QWORD *AnyActionAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char FillMode;
  int v9;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TimelineAsset;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  int v46;
  char v47;
  char v48;
  char v49;
  int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v2 = v1[7];
  v84 = v1[6];
  v85 = v2;
  v86 = v1[8];
  v87 = *((_QWORD *)v1 + 18);
  v3 = v1[3];
  v80 = v1[2];
  v81 = v3;
  v4 = v1[5];
  v82 = v1[4];
  v83 = v4;
  v5 = v1[1];
  v78 = *v1;
  v79 = v5;
  v6 = *((_QWORD *)v1 + 25);
  if (a1._rawValue)
  {
    FillMode = *((_BYTE *)v1 + 193);
    v9 = *((unsigned __int8 *)v1 + 194);
    TimelineBaseProperties.writeProperties(_:)(a1);
    v74 = v84;
    v75 = v85;
    v76 = v86;
    v77 = v87;
    v70 = v80;
    v71 = v81;
    v72 = v82;
    v73 = v83;
    v68 = v78;
    v69 = v79;
    if (!TimelineClipProperties.isClipped.getter())
    {
      type metadata accessor for TimelineDefinition();
      *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
      RERetain();
      v18 = TimelineDefinition.resource.getter();
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
      return v18;
    }
    v10 = BYTE9(v86);
    v11 = BYTE10(v86);
    v55 = v84;
    v56 = v87;
    v53 = v85;
    v54 = *((_QWORD *)&v84 + 1);
    v52 = *((_QWORD *)&v85 + 1);
    v50 = DWORD1(v86);
    v51 = v86;
    v48 = BYTE11(v86);
    v49 = BYTE8(v86);
    if ((BYTE10(v86) & 1) != 0)
    {
      if (!*(_QWORD *)(v87 + 16))
      {
        outlined retain of TimelineClipProperties((uint64_t)&v78);
        if (!v9)
        {
LABEL_25:
          v28 = 0;
LABEL_26:
          v46 = HIDWORD(v82);
          v47 = BYTE1(v83);
          v44 = FillMode;
          v45 = v83;
          v43 = v82;
          v41 = v28;
          v42 = BYTE8(v82);
          v40 = v81;
          v39 = BYTE8(v81);
          v38 = v80;
          v36 = BYTE9(v80);
          v37 = BYTE8(v80);
          v29 = v79;
          v30 = BYTE8(v79);
          v31 = BYTE9(v79);
          v32 = v78;
          v33 = BYTE8(v78);
          v34 = BYTE9(v78);
          type metadata accessor for TimelineDefinition();
          v35 = swift_allocObject();
          *(Swift::OpaquePointer *)(v35 + 16) = a1;
          RERetain();
          swift_release();
          *(_QWORD *)&v58 = v32;
          BYTE8(v58) = v33;
          BYTE9(v58) = v34;
          *(_QWORD *)&v59 = v29;
          BYTE8(v59) = v30;
          BYTE9(v59) = v31;
          *(_QWORD *)&v60 = v38;
          BYTE8(v60) = v37;
          BYTE9(v60) = v36;
          *(_QWORD *)&v61 = v40;
          BYTE8(v61) = v39;
          *(_QWORD *)&v62 = v43;
          BYTE8(v62) = v42;
          HIDWORD(v62) = v46;
          LOBYTE(v63) = v45;
          BYTE1(v63) = v47;
          *((_QWORD *)&v63 + 1) = v35;
          *(_QWORD *)&v64 = v55;
          *((_QWORD *)&v64 + 1) = v54;
          *(_QWORD *)&v65 = v53;
          *((_QWORD *)&v65 + 1) = v52;
          LOBYTE(v66) = v51;
          DWORD1(v66) = v50;
          BYTE8(v66) = v49;
          BYTE9(v66) = v44;
          BYTE10(v66) = v41;
          BYTE11(v66) = v48;
          v67 = v56;
          v77 = v56;
          v75 = v65;
          v76 = v66;
          v68 = v58;
          v69 = v59;
          v73 = v63;
          v74 = v64;
          v71 = v61;
          v72 = v62;
          v70 = v60;
          outlined retain of TimelineClipProperties((uint64_t)&v58);
          swift_retain();
          closure #1 in TimelineClipProperties.createClip()((uint64_t)&v68, &v57);
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)&v58);
          outlined release of TimelineClipProperties((uint64_t)&v58);
          return (_QWORD *)v57;
        }
LABEL_19:
        if (*(_QWORD *)(v6 + 16))
          FillMode = RETimelineDefinitionGetFillMode();
        else
          FillMode = 0;
        goto LABEL_25;
      }
      outlined retain of TimelineClipProperties((uint64_t)&v78);
      v12 = RETimelineDefinitionGetFillMode();
    }
    else
    {
      outlined retain of TimelineClipProperties((uint64_t)&v78);
      v12 = v10;
    }
    if (v12)
    {
      FillMode = v10;
      v28 = v11;
    }
    else
    {
      v28 = 0;
    }
    if (v12 || ((v9 ^ 1) & 1) != 0)
      goto LABEL_26;
    goto LABEL_19;
  }
  v13 = v1[7];
  v74 = v1[6];
  v75 = v13;
  v76 = v1[8];
  v77 = *((_QWORD *)v1 + 18);
  v14 = v1[3];
  v70 = v1[2];
  v71 = v14;
  v15 = v1[5];
  v72 = v1[4];
  v73 = v15;
  v16 = v1[1];
  v68 = *v1;
  v69 = v16;
  if (TimelineClipProperties.isClipped.getter())
  {
    v74 = v84;
    v75 = v85;
    v76 = v86;
    v77 = v87;
    v70 = v80;
    v71 = v81;
    v72 = v82;
    v73 = v83;
    v68 = v78;
    v69 = v79;
    if ((TimelineClipProperties.isModified.getter() & 1) == 0)
      return TimelineDefinition.resource.getter();
    v74 = v84;
    v75 = v85;
    v76 = v86;
    v77 = v87;
    v70 = v80;
    v71 = v81;
    v72 = v82;
    v73 = v83;
    v68 = v78;
    v69 = v79;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    v17 = *(_QWORD **)(v6 + 16);
    if (v17)
    {
      v20 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v20, (uint64_t)&v68);
      v21 = *((_QWORD *)&v69 + 1);
      v22 = v70;
      __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
      (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
      if (TimelineAsset)
      {
        v24 = TimelineAsset;
        RETimelineDefinitionGetName();
        v25 = String.init(cString:)();
        v27 = v26;
        type metadata accessor for AnimationResource();
        v17 = (_QWORD *)swift_allocObject();
        v17[2] = v24;
        v17[3] = v25;
        v17[4] = v27;
        RERetain();
        REAssetSetSwiftObject();
        RERelease();
      }
      else
      {
        return 0;
      }
    }
  }
  return v17;
}

uint64_t protocol witness for AnimationDefinition.name.getter in conformance AnyActionAnimation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_BYTE *)(v0 + 184);
  if (*(_QWORD *)(v0 + 160))
  {
    v4 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_BYTE *)(v0 + 184));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_BYTE *)(v0 + 184));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t protocol witness for AnimationDefinition.name.setter in conformance AnyActionAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance AnyActionAnimation(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 160);
  v4 = *(_QWORD *)(v1 + 168);
  v5 = *(_QWORD *)(v1 + 176);
  v6 = *(_BYTE *)(v1 + 184);
  if (v3)
  {
    v7 = *(_QWORD *)(v1 + 152);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v5, v6);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_BYTE *)(v1 + 184));
    swift_retain();
    RETimelineDefinitionGetName();
    v7 = String.init(cString:)();
    v3 = v8;
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_BYTE *)(v1 + 184));
    swift_retain();
    v7 = 0;
    v3 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v4, v5, v6);
  swift_release();
  *a1 = v7;
  a1[1] = v3;
  return FromToByAnimation.name.modify;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance AnyActionAnimation()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 192) != 1)
    return *(unsigned int *)(v0 + 188);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 200) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance AnyActionAnimation(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 188) = result;
  *(_BYTE *)(v1 + 192) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance AnyActionAnimation(_QWORD *a1))()
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if (*(_BYTE *)(v1 + 192) == 1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (v3)
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 188);
  }
  *v2 = v3;
  return ActionAnimation.blendLayer.modify;
}

uint64_t protocol witness for AnimationDefinition.fillMode.getter in conformance AnyActionAnimation@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 194) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 193);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance AnyActionAnimation(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 193) = *result;
  return result;
}

unsigned __int8 *(*protocol witness for AnimationDefinition.fillMode.modify in conformance AnyActionAnimation(_QWORD *a1))(unsigned __int8 *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 194) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (v3)
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)(v1 + 193);
  }
  *v2 = v3;
  return FromToByAnimation.fillMode.modify;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance AnyActionAnimation(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_BYTE *)(v1 + 184));
  *(_QWORD *)(v1 + 168) = v2;
  *(_QWORD *)(v1 + 176) = v3;
  *(_BYTE *)(v1 + 184) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance AnyActionAnimation(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  AnyActionAnimation.bindTarget.getter(a1);
  return protocol witness for AnimationDefinition.bindTarget.modify in conformance AnyActionAnimation;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.modify in conformance AnyActionAnimation(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(v2 + 168);
  v7 = *(_QWORD *)(v2 + 176);
  v8 = *(_BYTE *)(v2 + 184);
  if ((a2 & 1) != 0)
  {
    outlined copy of BindTarget(*(_QWORD *)a1, v3, v5);
    outlined consume of BindTarget?(v6, v7, v8);
    *(_QWORD *)(v2 + 168) = v4;
    *(_QWORD *)(v2 + 176) = v3;
    *(_BYTE *)(v2 + 184) = v5;
    return outlined consume of BindTarget(v4, v3, v5);
  }
  else
  {
    result = outlined consume of BindTarget?(*(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176), *(_BYTE *)(v2 + 184));
    *(_QWORD *)(v2 + 168) = v4;
    *(_QWORD *)(v2 + 176) = v3;
    *(_BYTE *)(v2 + 184) = v5;
  }
  return result;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance AnyActionAnimation()
{
  return AnyActionAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance AnyActionAnimation(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  *(_BYTE *)(v2 + 9) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = AnyActionAnimation.trimStart.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimStart.modify;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance AnyActionAnimation()
{
  return AnyActionAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance AnyActionAnimation(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  *(_BYTE *)(v2 + 25) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = AnyActionAnimation.trimEnd.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimEnd.modify;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance AnyActionAnimation()
{
  return AnyActionAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance AnyActionAnimation(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  *(_BYTE *)(v2 + 41) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = AnyActionAnimation.trimDuration.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimDuration.modify;
}

void protocol witness for AnimationDefinition.offset.setter in conformance AnyActionAnimation(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
  *(_BYTE *)(v1 + 56) = 0;
}

_QWORD *(*protocol witness for AnimationDefinition.offset.modify in conformance AnyActionAnimation(uint64_t a1))(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = AnyActionAnimation.offset.getter();
  return protocol witness for AnimationDefinition.offset.modify in conformance AnyActionAnimation;
}

_QWORD *protocol witness for AnimationDefinition.offset.modify in conformance AnyActionAnimation(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 48) = *result;
  *(_BYTE *)(v1 + 56) = 0;
  return result;
}

void protocol witness for AnimationDefinition.delay.setter in conformance AnyActionAnimation(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
  *(_BYTE *)(v1 + 72) = 0;
}

_QWORD *(*protocol witness for AnimationDefinition.delay.modify in conformance AnyActionAnimation(uint64_t a1))(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = AnyActionAnimation.delay.getter();
  return protocol witness for AnimationDefinition.delay.modify in conformance AnyActionAnimation;
}

_QWORD *protocol witness for AnimationDefinition.delay.modify in conformance AnyActionAnimation(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 64) = *result;
  *(_BYTE *)(v1 + 72) = 0;
  return result;
}

void protocol witness for AnimationDefinition.speed.setter in conformance AnyActionAnimation(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 76) = a1;
  *(_BYTE *)(v1 + 80) = 0;
}

uint64_t *(*protocol witness for AnimationDefinition.speed.modify in conformance AnyActionAnimation(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = AnyActionAnimation.speed.getter();
  return protocol witness for AnimationDefinition.speed.modify in conformance AnyActionAnimation;
}

uint64_t *protocol witness for AnimationDefinition.speed.modify in conformance AnyActionAnimation(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_DWORD *)(v1 + 76) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 80) = 0;
  return result;
}

_BYTE *protocol witness for AnimationDefinition.repeatMode.setter in conformance AnyActionAnimation(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  AnyActionAnimation.repeatMode.getter((_BYTE *)(a1 + 8));
  return ActionAnimation.repeatMode.modify;
}

double protocol witness for AnimationDefinition.duration.getter in conformance AnyActionAnimation()
{
  uint64_t v0;
  double result;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
    return 0.0;
  RETimelineDefinitionGetDuration();
  return result;
}

_QWORD *protocol witness for AnimationDefinitionInternal.generate() in conformance AnyActionAnimation()
{
  _QWORD *result;
  uint64_t v1;

  result = AnyActionAnimation.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v1 = 0xD00000000000001CLL;
    *(_QWORD *)(v1 + 8) = 0x800000021BE822D0;
    *(_BYTE *)(v1 + 16) = 0;
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(2uLL, *(_QWORD *)(a1 + 64));
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(_QWORD *)(a1 + 64));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(_QWORD *)(a1 + 64));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(_QWORD *)(a1 + 64));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance SetEntityEnabledActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance SetEntityPropertyActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance FromToByActionHandler<A>(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for SetEntityPropertyAction, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a5(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  v14 = MEMORY[0x220772E3C](a6, v13);
  v15 = MEMORY[0x220772E3C](a7, v13);
  return static ActionHandlerProtocol<>.register(_:)(a1, a2, a3, a4, v14, v15, MEMORY[0x24BEE40A0], MEMORY[0x24BEE4080]);
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance SpinActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance SpinActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance SpinActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance SpinActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(_QWORD *)(a1 + 104));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance SpinActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance PlayAudioActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(_QWORD *)(a1 + 96));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance PlayAudioActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t), uint64_t (*a7)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v10;

  v10 = a5();
  a6(v10);
  return a7(0, a1, a2);
}

unint64_t lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys;
  if (!lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEventParameterUnused.CodingKeys, &unk_24DFB4668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys;
  if (!lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEventParameterUnused.CodingKeys, &unk_24DFB4668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys;
  if (!lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEventParameterUnused.CodingKeys, &unk_24DFB4668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for ActionEventDefinition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionEventDefinition);
}

uint64_t type metadata accessor for ActionDefinition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionDefinition);
}

uint64_t type metadata accessor for ActionAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActionAnimation);
}

unint64_t lazy protocol witness table accessor for type ActionEventType and conformance ActionEventType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType;
  if (!lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEventType, &type metadata for ActionEventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType;
  if (!lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEventType, &type metadata for ActionEventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType;
  if (!lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEventType, &type metadata for ActionEventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType;
  if (!lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEventType, &type metadata for ActionEventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType);
  }
  return result;
}

uint64_t sub_21BBBE734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ActionAnimation.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21BBBE760()
{
  return 16;
}

__n128 sub_21BBBE76C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BBBE778@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = ActionAnimation.blendLayer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BBBE7A0(unsigned int *a1)
{
  return ActionAnimation.blendLayer.setter(*a1);
}

uint64_t sub_21BBBE7C4()
{
  return 16;
}

__n128 sub_21BBBE7D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BBBE7E4()
{
  return 16;
}

__n128 sub_21BBBE7F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BBBE7FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = ActionAnimation.fillMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned __int8 *sub_21BBBE834(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return ActionAnimation.fillMode.setter(&v2);
}

uint64_t sub_21BBBE868()
{
  return 16;
}

__n128 sub_21BBBE874(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BBBE880@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = ActionAnimation.trimStart.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BBBE8B0(uint64_t a1)
{
  return ActionAnimation.trimStart.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BBBE8DC()
{
  return 16;
}

__n128 sub_21BBBE8E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BBBE8F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = ActionAnimation.trimEnd.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BBBE924(uint64_t a1)
{
  return ActionAnimation.trimEnd.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BBBE950()
{
  return 16;
}

__n128 sub_21BBBE95C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BBBE968@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = ActionAnimation.trimDuration.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BBBE998(uint64_t a1)
{
  return ActionAnimation.trimDuration.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BBBE9C4()
{
  return 16;
}

__n128 sub_21BBBE9D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BBBE9DC(double *a1@<X8>)
{
  *a1 = ActionAnimation.offset.getter();
}

void sub_21BBBEA04(double *a1)
{
  ActionAnimation.offset.setter(*a1);
}

uint64_t sub_21BBBEA28()
{
  return 16;
}

__n128 sub_21BBBEA34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BBBEA40(double *a1@<X8>)
{
  *a1 = ActionAnimation.delay.getter();
}

void sub_21BBBEA68(double *a1)
{
  ActionAnimation.delay.setter(*a1);
}

uint64_t sub_21BBBEA8C()
{
  return 16;
}

__n128 sub_21BBBEA98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BBBEAA4(float *a1@<X8>)
{
  *a1 = ActionAnimation.speed.getter();
}

void sub_21BBBEACC(float *a1)
{
  ActionAnimation.speed.setter(*a1);
}

uint64_t sub_21BBBEAF0()
{
  return 16;
}

__n128 sub_21BBBEAFC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BBBEB08(_BYTE *a1@<X8>)
{
  char v2;

  ActionAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

_BYTE *sub_21BBBEB40(char *a1)
{
  char v2;

  v2 = *a1;
  return ActionAnimation.repeatMode.setter(&v2);
}

uint64_t sub_21BBBEB74()
{
  return 16;
}

__n128 sub_21BBBEB80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BBBEB8C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for ActionAnimation(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  return ActionAnimation.action.getter(v5, v6, a4);
}

uint64_t sub_21BBBEBC8()
{
  return 16;
}

__n128 sub_21BBBEBD4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BBBEBE0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = type metadata accessor for ActionAnimation(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  result = ActionAnimation.eventDefinitions.getter(v5, v6, v7, v8);
  *a4 = result;
  return result;
}

uint64_t sub_21BBBEC1C()
{
  return 16;
}

__n128 sub_21BBBEC28(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for EntityActionWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for EntityActionWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EntityActionWrapper);
}

uint64_t type metadata completion function for EntityActionParameterWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for EntityActionParameterWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EntityActionParameterWrapper);
}

uint64_t type metadata instantiation function for ActionEvent()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ActionEvent()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  void *v21;
  const void *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v49;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v49 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  if (*(_DWORD *)(v10 + 84))
    v12 = *(_QWORD *)(v10 + 64);
  else
    v12 = *(_QWORD *)(v10 + 64) + 1;
  v13 = (*(_DWORD *)(v10 + 80) | v7) & 0x100000;
  v14 = *a2;
  *a1 = *a2;
  v15 = (v11 | v8) <= 7 && v13 == 0;
  if (v15
    && ((((((((((((((v49 + v11 + ((v8 + 8) & ~v8)) & ~v11) + v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 63) & 0xFFFFFFFFFFFFFFF8)
       + 87) & 0xFFFFFFFFFFFFFFF8)
     + 8 <= 0x18)
  {
    v16 = AssociatedTypeWitness;
    v17 = (char *)a2 + v8;
    v18 = ((unint64_t)a1 + v8 + 8) & ~v8;
    v19 = (unint64_t)(v17 + 8) & ~v8;
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    v20(v18, v19, v5);
    v21 = (void *)((v18 + v49 + v11) & ~v11);
    v22 = (const void *)((v19 + v49 + v11) & ~v11);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v22, 1, v16))
    {
      memcpy(v21, v22, v12);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v21, v22, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v16);
    }
    v24 = ((unint64_t)v21 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = ((unint64_t)v22 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
    v26 = (_QWORD *)(((unint64_t)v21 + v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    v27 = (_QWORD *)(((unint64_t)v22 + v12 + 23) & 0xFFFFFFFFFFFFF8);
    *v26 = *v27;
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
    v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v28 = *v29;
    v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8);
    *v30 = *v31;
    v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v32 = *v33;
    v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
    v36 = *(_QWORD *)v35;
    *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
    *(_QWORD *)v34 = v36;
    v37 = ((unint64_t)v32 + 31) & 0xFFFFFFFFFFFFFFF8;
    v38 = ((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8;
    v39 = *(_QWORD *)v38;
    *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
    *(_QWORD *)v37 = v39;
    v40 = ((unint64_t)v32 + 47) & 0xFFFFFFFFFFFFFFF8;
    v41 = ((unint64_t)v33 + 47) & 0xFFFFFFFFFFFFFFF8;
    v42 = *(_QWORD *)v41;
    *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
    *(_QWORD *)v40 = v42;
    v43 = (_OWORD *)(((unint64_t)v32 + 63) & 0xFFFFFFFFFFFFFFF8);
    v44 = (_OWORD *)(((unint64_t)v33 + 63) & 0xFFFFFFFFFFFFFFF8);
    v45 = v44[4];
    v47 = v44[1];
    v46 = v44[2];
    v43[3] = v44[3];
    v43[4] = v45;
    v43[1] = v47;
    v43[2] = v46;
    *v43 = *v44;
    *(_QWORD *)(((unint64_t)v43 + 87) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v44 + 87) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    v23 = a1;
  }
  else
  {
    v23 = (uint64_t *)(v14 + (((v11 | v8) & 0xF8 ^ 0x1F8) & ((v11 | v8) + 16)));
  }
  swift_retain();
  return v23;
}

uint64_t destroy for ActionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;

  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t, _QWORD))(v4 + 8))(v5, *(_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, AssociatedTypeWitness);
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for ActionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (char *)((v10 + v13 + v7) & ~v13);
  v15 = (char *)((v10 + v13 + v8) & ~v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v15, 1, AssociatedTypeWitness))
  {
    v16 = *(_DWORD *)(v12 + 84);
    v17 = *(_QWORD *)(v12 + 64);
    if (v16)
      v18 = *(_QWORD *)(v12 + 64);
    else
      v18 = v17 + 1;
    memcpy(v14, v15, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, AssociatedTypeWitness);
    v16 = *(_DWORD *)(v12 + 84);
    v17 = *(_QWORD *)(v12 + 64);
  }
  if (v16)
    v19 = v17;
  else
    v19 = v17 + 1;
  v20 = &v14[v19];
  v21 = &v15[v19];
  v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = (_QWORD *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((unint64_t)(v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v32 = v34;
  v35 = ((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((unint64_t)v31 + 31) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  *(_QWORD *)v35 = v37;
  v38 = ((unint64_t)v30 + 47) & 0xFFFFFFFFFFFFFFF8;
  v39 = ((unint64_t)v31 + 47) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v38 = v40;
  v41 = (_OWORD *)(((unint64_t)v30 + 63) & 0xFFFFFFFFFFFFFFF8);
  v42 = (_OWORD *)(((unint64_t)v31 + 63) & 0xFFFFFFFFFFFFFFF8);
  v43 = v42[4];
  v45 = v42[1];
  v44 = v42[2];
  v41[3] = v42[3];
  v41[4] = v43;
  v41[1] = v45;
  v41[2] = v44;
  *v41 = *v42;
  *(_QWORD *)(((unint64_t)v41 + 87) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v42 + 87) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ActionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 24))(v8, v9, *(_QWORD *)(a3 + 16));
  v10 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (char *)((v10 + v13 + v8) & ~v13);
  v15 = (char *)((v10 + v13 + v9) & ~v13);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v8) = v16(v14, 1, AssociatedTypeWitness);
  v17 = v16(v15, 1, AssociatedTypeWitness);
  if ((_DWORD)v8)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v14, v15, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v12 + 84))
    v18 = *(_QWORD *)(v12 + 64);
  else
    v18 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v18);
LABEL_10:
  if (*(_DWORD *)(v12 + 84))
    v19 = *(_QWORD *)(v12 + 64);
  else
    v19 = *(_QWORD *)(v12 + 64) + 1;
  v20 = &v14[v19];
  v21 = &v15[v19];
  v22 = (unint64_t)&v14[v19 + 7] & 0xFFFFFFFFFFFFFFF8;
  v23 = (unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  swift_retain();
  swift_release();
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = (_QWORD *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((unint64_t)(v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  v27 += 15;
  *(_QWORD *)v26 = v28;
  v26 += 15;
  v29 = (v27 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFF8);
  v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 63;
  *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
  v32 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((v29 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v32 = v34;
  v35 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((v29 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  *(_QWORD *)v35 = v37;
  v38 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v39 = ((v29 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v38 = v40;
  v41 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v41 + 8) = *(_BYTE *)((v31 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)v41 = v42;
  *(_QWORD *)(v41 + 16) = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 16);
  v43 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24);
  v44 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 40);
  v45 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_QWORD *)(v41 + 72) = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 72);
  *(_OWORD *)(v41 + 56) = v45;
  *(_OWORD *)(v41 + 40) = v44;
  *(_OWORD *)(v41 + 24) = v43;
  *(_QWORD *)((v41 + 87) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v31 & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for ActionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v4 + 32))(v6, v7, *(_QWORD *)(a3 + 16));
  v8 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (char *)((v8 + v11 + v6) & ~v11);
  v13 = (char *)((v8 + v11 + v7) & ~v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v13, 1, AssociatedTypeWitness))
  {
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
    if (v14)
      v16 = *(_QWORD *)(v10 + 64);
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v13, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, AssociatedTypeWitness);
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = &v12[v17];
  v19 = &v13[v17];
  v20 = (unint64_t)(v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = (_QWORD *)((unint64_t)(v19 + 23) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((unint64_t)(v18 + 23) & 0xFFFFFFFFFFFFF8);
  *v23 = *v22;
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v24;
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  *v27 = *v26;
  v28 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v30 = v32;
  v33 = ((unint64_t)v28 + 31) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_QWORD *)v34;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v33 = v35;
  v36 = ((unint64_t)v28 + 47) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((unint64_t)v29 + 47) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = v38;
  v39 = (_OWORD *)(((unint64_t)v28 + 63) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_OWORD *)(((unint64_t)v29 + 63) & 0xFFFFFFFFFFFFFFF8);
  v41 = v40[4];
  v43 = v40[1];
  v42 = v40[2];
  v39[3] = v40[3];
  v39[4] = v41;
  v39[1] = v43;
  v39[2] = v42;
  *v39 = *v40;
  *(_QWORD *)(((unint64_t)v39 + 87) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + 87) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ActionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 40))(v8, v9, *(_QWORD *)(a3 + 16));
  v10 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (char *)((v10 + v13 + v8) & ~v13);
  v15 = (char *)((v10 + v13 + v9) & ~v13);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v8) = v16(v14, 1, AssociatedTypeWitness);
  v17 = v16(v15, 1, AssociatedTypeWitness);
  if ((_DWORD)v8)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v15, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v14, v15, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v12 + 84))
    v18 = *(_QWORD *)(v12 + 64);
  else
    v18 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v18);
LABEL_10:
  if (*(_DWORD *)(v12 + 84))
    v19 = *(_QWORD *)(v12 + 64);
  else
    v19 = *(_QWORD *)(v12 + 64) + 1;
  v20 = &v14[v19];
  v21 = &v15[v19];
  v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  swift_release();
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = (_QWORD *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((unint64_t)(v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  v27 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  v27 += 15;
  *v26 = v28;
  v29 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v27 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)v29 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFF8);
  v29 += 15;
  swift_release();
  v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + 63;
  *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
  v32 = ((v29 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v32 = v34;
  v35 = ((v29 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  *(_QWORD *)v35 = v37;
  v38 = ((v29 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v39 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v38 = v40;
  v41 = ((v29 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v41 + 8) = *(_BYTE *)((v31 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)v41 = v42;
  *(_QWORD *)(v41 + 16) = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 16);
  v43 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24);
  v44 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 40);
  v45 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_QWORD *)(v41 + 72) = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 72);
  *(_OWORD *)(v41 + 56) = v45;
  *(_OWORD *)(v41 + 40) = v44;
  *(_OWORD *)(v41 + 24) = v43;
  *(_QWORD *)((v41 + 87) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v31 & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionEvent(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  if (v7 <= v10)
    v11 = v10;
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (v9)
    v13 = 23;
  else
    v13 = 24;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = *(_QWORD *)(v6 + 64);
  v16 = *(unsigned __int8 *)(v8 + 80);
  if (v12 < a2)
  {
    if (((((((((((((((v13 + *(_QWORD *)(v8 + 64) + ((v15 + v16 + ((v14 + 8) & ~v14)) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 63) & 0xFFFFFFFFFFFFFFF8)
           + 87) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v12 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X0 }
  }
  if ((v11 & 0x80000000) != 0)
  {
    v22 = ((unint64_t)a1 + v14 + 8) & ~v14;
    if ((_DWORD)v7 == v12)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v22, v7, v5);
    if (v9 >= 2)
    {
      v23 = (*(uint64_t (**)(uint64_t))(v8 + 48))((v22 + v15 + v16) & ~v16);
      if (v23 >= 2)
        return v23 - 1;
      else
        return 0;
    }
    return 0;
  }
  v20 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v20) = -1;
  return (v20 + 1);
}

void storeEnumTagSinglePayload for ActionEvent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v8 <= v12)
    v13 = v12;
  else
    v13 = v8;
  if (v13 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13;
  v15 = 23;
  if (!v11)
    v15 = 24;
  if (v14 < a3)
  {
    if ((((((((((((((_DWORD)v15
                   + *(_DWORD *)(v10 + 64)
                   + ((*(_DWORD *)(v7 + 64)
                     + *(unsigned __int8 *)(v10 + 80)
                     + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 63) & 0xFFFFFFF8)
         + 87) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v16 = a3 - v14 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v9 = v17;
    else
      v9 = 0;
  }
  if (a2 > v14)
  {
    if ((((((((((((((_DWORD)v15
                   + *(_DWORD *)(v10 + 64)
                   + ((*(_DWORD *)(v7 + 64)
                     + *(unsigned __int8 *)(v10 + 80)
                     + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 63) & 0xFFFFFFF8)
         + 87) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v18 = ~v14 + a2;
      bzero(a1, ((((((((((((v15+ *(_QWORD *)(v10 + 64)+ ((*(_QWORD *)(v7 + 64)+ *(unsigned __int8 *)(v10 + 80)+ ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 63) & 0xFFFFFFFFFFFFFFF8)+ 87) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v18;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_21BBBFFB0(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  *((_BYTE *)v10 + v14) = 0;
  if ((_DWORD)v11)
  {
    if (v6 < 0)
    {
      v17 = ((unint64_t)v10 + v7 + 8) & v9;
      if ((_DWORD)v13 == v3)
      {
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v19 = v11;
        a1 = v13;
        a2 = v12;
      }
      else
      {
        if (a1 < 2)
          return;
        v17 = (v17 + v5 + v4) & v8;
        v19 = (v11 + 1);
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
      }
      v18(v17, v19, a1, a2);
      return;
    }
    if ((v11 & 0x80000000) != 0)
      v16 = v11 ^ 0x80000000;
    else
      v16 = (v11 - 1);
    *v10 = v16;
  }
}

ValueMetadata *type metadata accessor for ActionEventType()
{
  return &type metadata for ActionEventType;
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionStarted(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionUpdated(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionEnded(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionSkipped(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionPaused(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionResumed(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionTerminated(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of static ActionHandlerProtocol.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of EntityAction.isReversible.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EntityAction.isAdditive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EntityAction.animatedValueType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for ActionEventParameterUnused()
{
  return &type metadata for ActionEventParameterUnused;
}

uint64_t type metadata completion function for ActionEventDefinition()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionEventDefinition(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  const void *v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = AssociatedTypeWitness;
    *a1 = *a2;
    v14 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v15;
    v16 = (void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    v17 = (const void *)(((unint64_t)v15 + v7 + 8) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v17, 1, AssociatedTypeWitness))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t destroy for ActionEventDefinition(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v1 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  return result;
}

_QWORD *initializeWithCopy for ActionEventDefinition(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  size_t v10;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84))
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_QWORD *assignWithCopy for ActionEventDefinition(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  size_t v13;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v11 = v10(v8, 1, AssociatedTypeWitness);
  v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v6 + 84))
    v13 = *(_QWORD *)(v6 + 64);
  else
    v13 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v8, v9, v13);
  return a1;
}

_QWORD *initializeWithTake for ActionEventDefinition(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  size_t v10;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84))
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_QWORD *assignWithTake for ActionEventDefinition(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  size_t v13;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v11 = v10(v8, 1, AssociatedTypeWitness);
  v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v6 + 84))
    v13 = *(_QWORD *)(v6 + 64);
  else
    v13 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v8, v9, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionEventDefinition(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  if (a2 > v6)
  {
    v9 = v7 + ((v8 + 16) & ~v8);
    v10 = 8 * v9;
    if (v9 > 3)
      goto LABEL_7;
    v12 = ((a2 - v6 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (v11)
        goto LABEL_14;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_23;
LABEL_7:
        v11 = *(unsigned __int8 *)(a1 + v9);
        if (!*(_BYTE *)(a1 + v9))
          goto LABEL_23;
LABEL_14:
        v13 = (v11 - 1) << v10;
        if (v9 > 3)
          v13 = 0;
        if ((_DWORD)v9)
        {
          if (v9 <= 3)
            v14 = v9;
          else
            v14 = 4;
          __asm { BR              X12 }
        }
        return v6 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (*(_WORD *)(a1 + v9))
        goto LABEL_14;
    }
  }
LABEL_23:
  if (v5 < 2)
    return 0;
  v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8);
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ActionEventDefinition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = 0;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  if (a3 > v9)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 >= a2)
LABEL_22:
        __asm { BR              X13 }
LABEL_15:
      v13 = ~v9 + a2;
      if (v11 < 4)
      {
        if ((_DWORD)v11)
        {
          v14 = v13 & ~(-1 << (8 * v11));
          bzero(a1, v11);
          if ((_DWORD)v11 == 3)
          {
            *(_WORD *)a1 = v14;
            a1[2] = BYTE2(v14);
          }
          else if ((_DWORD)v11 == 2)
          {
            *(_WORD *)a1 = v14;
          }
          else
          {
            *a1 = v14;
          }
        }
      }
      else
      {
        bzero(a1, v11);
        *(_DWORD *)a1 = v13;
      }
      __asm { BR              X10 }
    }
    v12 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v12))
    {
      v6 = 4u;
      if (v9 >= a2)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 >= 0x100)
      v6 = 2;
    else
      v6 = v12 > 1;
  }
  if (v9 >= a2)
    goto LABEL_22;
  goto LABEL_15;
}

void sub_21BBC0B0C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_21BBC0B14()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata completion function for ActionAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for ActionDefinition(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ActionAnimation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  unsigned int (*v35)(const void *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  size_t __n;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 8;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = v6 & 0x100000;
  if (v7 > 7
    || v11 != 0
    || ((v10 + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8 + (v8 & (v7 + 208)) > 0x18)
  {
    v14 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v14 + (v8 & (v7 + 16));
    swift_retain();
  }
  else
  {
    __n = v10;
    v40 = ((v10 + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v41 = *(_QWORD *)(v5 + 64);
    v42 = *(_QWORD *)(a3 + 16);
    v43 = *(_DWORD *)(v5 + 84);
    *(_QWORD *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 48) = a2[6];
    v15 = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_QWORD *)(a1 + 64) = v15;
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    v16 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = a2[13];
    v17 = *((unsigned __int8 *)a2 + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v17 == 255)
    {
      *(_OWORD *)(v4 + 112) = *((_OWORD *)a2 + 7);
      *(_BYTE *)(v4 + 128) = *((_BYTE *)a2 + 128);
    }
    else
    {
      v18 = a2[14];
      v19 = a2[15];
      outlined copy of BindTarget(v18, v19, v17);
      *(_QWORD *)(v4 + 112) = v18;
      *(_QWORD *)(v4 + 120) = v19;
      *(_BYTE *)(v4 + 128) = v17;
    }
    *(_DWORD *)(v4 + 132) = *((_DWORD *)a2 + 33);
    *(_BYTE *)(v4 + 136) = *((_BYTE *)a2 + 136);
    *(_WORD *)(v4 + 137) = *(_WORD *)((char *)a2 + 137);
    *(_BYTE *)(v4 + 139) = *((_BYTE *)a2 + 139);
    *(_QWORD *)(v4 + 144) = a2[18];
    v20 = (v4 + 159) & 0xFFFFFFFFFFFFFFF8;
    v21 = ((unint64_t)a2 + 159) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
    v22 = *(unsigned __int8 *)(v21 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v22 == 255)
    {
      v25 = *(_OWORD *)(v21 + 16);
      *(_BYTE *)(v20 + 32) = *(_BYTE *)(v21 + 32);
      *(_OWORD *)(v20 + 16) = v25;
    }
    else
    {
      v23 = *(_QWORD *)(v21 + 16);
      v24 = *(_QWORD *)(v21 + 24);
      outlined copy of BindTarget(v23, v24, v22);
      *(_QWORD *)(v20 + 16) = v23;
      *(_QWORD *)(v20 + 24) = v24;
      *(_BYTE *)(v20 + 32) = v22;
    }
    v26 = ~v7;
    v27 = *(_DWORD *)(v21 + 36);
    *(_BYTE *)(v20 + 40) = *(_BYTE *)(v21 + 40);
    *(_DWORD *)(v20 + 36) = v27;
    *(_WORD *)(v20 + 41) = *(_WORD *)(v21 + 41);
    *(_BYTE *)(v20 + 43) = *(_BYTE *)(v21 + 43);
    *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
    v28 = (_QWORD *)(v8 & (v20 + 63));
    v29 = (uint64_t *)(v8 & (v21 + 63));
    swift_retain();
    if ((v43 & 0x80000000) != 0)
    {
      v33 = (const void *)(((unint64_t)v29 + v9) & v26);
      v32 = v42;
      if ((*(unsigned int (**)(const void *, _QWORD, uint64_t))(v5 + 48))(v33, v43, v42) <= 1)
      {
        v30 = *v29;
LABEL_26:
        *v28 = v30;
        v34 = (void *)(((unint64_t)v28 + v9) & v26);
        v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
        swift_bridgeObjectRetain();
        if (v35(v33, 1, v32))
        {
          memcpy(v34, v33, __n);
          v36 = v41;
          if (v43)
          {
LABEL_28:
            v37 = v36 + 7;
LABEL_32:
            *(_QWORD *)(((unint64_t)v34 + v37) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v33 + v37) & 0xFFFFFFFFFFFFF8);
            return v4;
          }
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v34, v33, v32);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v34, 0, 1, v32);
          v36 = v41;
          if (v43)
            goto LABEL_28;
        }
        v37 = v36 + 8;
        goto LABEL_32;
      }
    }
    else
    {
      v30 = *v29;
      LODWORD(v31) = -1;
      if ((unint64_t)*v29 < 0xFFFFFFFF)
        v31 = *v29;
      v32 = v42;
      if ((v31 + 1) <= 1)
      {
        v33 = (const void *)(((unint64_t)v29 + v9) & v26);
        goto LABEL_26;
      }
    }
    memcpy(v28, v29, v40);
  }
  return v4;
}

uint64_t destroy for ActionAnimation(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  swift_release();
  swift_bridgeObjectRelease();
  v4 = *(unsigned __int8 *)(a1 + 128);
  if (v4 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4);
  swift_release();
  v5 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v6 = *(unsigned __int8 *)(v5 + 32);
  if (v6 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), v6);
  swift_release();
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (uint64_t *)((v5 + (v9 | 7) + 56) & ~(v9 | 7));
  v11 = ~v9;
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) != 0)
  {
    v14 = ((unint64_t)v10 + v9 + 8) & v11;
    result = (*(uint64_t (**)(uint64_t))(v8 + 48))(v14);
    if (result > 1)
      return result;
    goto LABEL_11;
  }
  result = *v10;
  LODWORD(v13) = -1;
  if ((unint64_t)*v10 < 0xFFFFFFFF)
    v13 = *v10;
  if ((v13 + 1) <= 1)
  {
    v14 = ((unint64_t)v10 + v9 + 8) & v11;
LABEL_11:
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v14, v7);
  }
  return result;
}

uint64_t initializeWithCopy for ActionAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  void *v29;
  unsigned int (*v30)(const void *, uint64_t, uint64_t);
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  size_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v8 = *(unsigned __int8 *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 112);
    v10 = *(_QWORD *)(a2 + 120);
    outlined copy of BindTarget(v9, v10, v8);
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v10;
    *(_BYTE *)(a1 + 128) = v8;
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v11 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  v13 = *(unsigned __int8 *)(v12 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13 == 255)
  {
    v16 = *(_OWORD *)(v12 + 16);
    *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
    *(_OWORD *)(v11 + 16) = v16;
  }
  else
  {
    v14 = *(_QWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 24);
    outlined copy of BindTarget(v14, v15, v13);
    *(_QWORD *)(v11 + 16) = v14;
    *(_QWORD *)(v11 + 24) = v15;
    *(_BYTE *)(v11 + 32) = v13;
  }
  v17 = *(_DWORD *)(v12 + 36);
  *(_BYTE *)(v11 + 40) = *(_BYTE *)(v12 + 40);
  *(_DWORD *)(v11 + 36) = v17;
  *(_WORD *)(v11 + 41) = *(_WORD *)(v12 + 41);
  *(_BYTE *)(v11 + 43) = *(_BYTE *)(v12 + 43);
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (_QWORD *)((v11 + (v20 | 7) + 56) & ~(v20 | 7));
  v22 = (uint64_t *)((v12 + (v20 | 7) + 56) & ~(v20 | 7));
  v23 = *(unsigned int *)(v19 + 84);
  v24 = ~v20;
  v25 = v20 + 8;
  v36 = *(_QWORD *)(v19 + 64);
  swift_retain();
  if ((v23 & 0x80000000) != 0)
  {
    v28 = (const void *)(((unint64_t)v22 + v25) & v24);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v28, v23, v18) <= 1)
    {
      v26 = *v22;
LABEL_14:
      *v21 = v26;
      v29 = (void *)(((unint64_t)v21 + v25) & v24);
      v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      if (v30(v28, 1, v18))
      {
        v31 = v36;
        if ((_DWORD)v23)
          v32 = v36;
        else
          v32 = v36 + 1;
        memcpy(v29, v28, v32);
        if ((_DWORD)v23)
          goto LABEL_19;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v29, v28, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v29, 0, 1, v18);
        v31 = v36;
        if ((_DWORD)v23)
        {
LABEL_19:
          v33 = v31 + 7;
LABEL_25:
          *(_QWORD *)(((unint64_t)v29 + v33) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28 + v33) & 0xFFFFFFFFFFFFF8);
          return a1;
        }
      }
      v33 = v31 + 8;
      goto LABEL_25;
    }
  }
  else
  {
    v26 = *v22;
    LODWORD(v27) = -1;
    if ((unint64_t)*v22 < 0xFFFFFFFF)
      v27 = *v22;
    if ((v27 + 1) <= 1)
    {
      v28 = (const void *)(((unint64_t)v22 + v25) & v24);
      goto LABEL_14;
    }
  }
  v34 = v36;
  if (!(_DWORD)v23)
    v34 = v36 + 1;
  memcpy(v21, v22, ((v34 + (v25 & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithCopy for ActionAnimation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  __int128 *v26;
  __int128 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(void);
  unsigned int v58;
  unsigned int v59;
  void *v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  char *v64;
  unint64_t v65;
  void *v66;
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  size_t v68;
  size_t v69;
  size_t v70;
  size_t v71;
  size_t v72;
  size_t v73;
  _QWORD *v74;
  char *v75;
  char *v77;
  uint64_t v78;
  size_t v79;

  v6 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 19);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v10;
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  *(_QWORD *)(a1 + 88) = a2[11];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (__int128 *)(a1 + 112);
  v12 = (__int128 *)(a2 + 14);
  v13 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v13 == 255)
    {
      v22 = *v12;
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      *v11 = v22;
    }
    else
    {
      v19 = a2[14];
      v20 = a2[15];
      outlined copy of BindTarget(v19, v20, *((_BYTE *)a2 + 128));
      *(_QWORD *)(a1 + 112) = v19;
      *(_QWORD *)(a1 + 120) = v20;
      *(_BYTE *)(a1 + 128) = v13;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
    v21 = *((_BYTE *)a2 + 128);
    *v11 = *v12;
    *(_BYTE *)(a1 + 128) = v21;
  }
  else
  {
    v14 = a2[14];
    v15 = a2[15];
    outlined copy of BindTarget(v14, v15, *((_BYTE *)a2 + 128));
    v16 = *(_QWORD *)(a1 + 112);
    v17 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = v15;
    v18 = *(_BYTE *)(a1 + 128);
    *(_BYTE *)(a1 + 128) = v13;
    outlined consume of BindTarget(v16, v17, v18);
  }
  v23 = *((_DWORD *)a2 + 33);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v23;
  *(_WORD *)(a1 + 137) = *(_WORD *)((char *)a2 + 137);
  *(_BYTE *)(a1 + 139) = *((_BYTE *)a2 + 139);
  *(_QWORD *)(a1 + 144) = a2[18];
  swift_retain();
  swift_release();
  v24 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = (__int128 *)(v24 + 16);
  v27 = (__int128 *)(v25 + 16);
  v28 = *(unsigned __int8 *)(v25 + 32);
  if (*(unsigned __int8 *)(v24 + 32) == 255)
  {
    if (v28 == 255)
    {
      v37 = *v27;
      *(_BYTE *)(v24 + 32) = *(_BYTE *)(v25 + 32);
      *v26 = v37;
    }
    else
    {
      v34 = *(_QWORD *)(v25 + 16);
      v35 = *(_QWORD *)(v25 + 24);
      outlined copy of BindTarget(v34, v35, *(_BYTE *)(v25 + 32));
      *(_QWORD *)(v24 + 16) = v34;
      *(_QWORD *)(v24 + 24) = v35;
      *(_BYTE *)(v24 + 32) = v28;
    }
  }
  else if (v28 == 255)
  {
    outlined destroy of BindTarget(v24 + 16);
    v36 = *(_BYTE *)(v25 + 32);
    *v26 = *v27;
    *(_BYTE *)(v24 + 32) = v36;
  }
  else
  {
    v29 = *(_QWORD *)(v25 + 16);
    v30 = *(_QWORD *)(v25 + 24);
    outlined copy of BindTarget(v29, v30, *(_BYTE *)(v25 + 32));
    v31 = *(_QWORD *)(v24 + 16);
    v32 = *(_QWORD *)(v24 + 24);
    *(_QWORD *)(v24 + 16) = v29;
    *(_QWORD *)(v24 + 24) = v30;
    v33 = *(_BYTE *)(v24 + 32);
    *(_BYTE *)(v24 + 32) = v28;
    outlined consume of BindTarget(v31, v32, v33);
  }
  v38 = *(_DWORD *)(v25 + 36);
  *(_BYTE *)(v24 + 40) = *(_BYTE *)(v25 + 40);
  *(_DWORD *)(v24 + 36) = v38;
  *(_WORD *)(v24 + 41) = *(_WORD *)(v25 + 41);
  *(_BYTE *)(v24 + 43) = *(_BYTE *)(v25 + 43);
  *(_QWORD *)(v24 + 48) = *(_QWORD *)(v25 + 48);
  swift_retain();
  swift_release();
  v39 = *(_QWORD *)(a3 + 16);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (uint64_t *)((v24 + (v41 | 7) + 56) & ~(v41 | 7));
  v43 = (uint64_t *)((v25 + (v41 | 7) + 56) & ~(v41 | 7));
  v44 = *(unsigned int *)(v40 + 84);
  v45 = ~v41;
  v46 = v41 + 8;
  v47 = (v41 + 8) & ~v41;
  v48 = *(_QWORD *)(v40 + 64);
  if ((v44 & 0x80000000) != 0)
  {
    v78 = (v41 + 8) & ~v41;
    v79 = *(_QWORD *)(v40 + 64);
    v55 = ((unint64_t)v42 + v46) & v45;
    v56 = ~v41;
    v57 = *(uint64_t (**)(void))(v40 + 48);
    v58 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v57)(v55, v44, v39);
    v77 = (char *)(((unint64_t)v43 + v46) & v56);
    v59 = v57();
    if (v58 < 2)
    {
      v45 = v56;
      v48 = v79;
      v47 = v78;
      if (v59 <= 1)
      {
        v51 = *v43;
        v54 = v77;
LABEL_27:
        *v42 = v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v60 = (void *)(((unint64_t)v42 + v46) & v45);
        v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
        v62 = v61(v60, 1, v39);
        v63 = v61(v54, 1, v39);
        if (v62)
        {
          if (!v63)
          {
            (*(void (**)(void *, char *, uint64_t))(v40 + 16))(v60, v54, v39);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v60, 0, 1, v39);
LABEL_52:
            if ((_DWORD)v44)
              v72 = v48;
            else
              v72 = v48 + 1;
            v73 = v72 + 7;
            v74 = (_QWORD *)(((unint64_t)v60 + v73) & 0xFFFFFFFFFFFFF8);
            v75 = &v54[v73];
            goto LABEL_59;
          }
        }
        else
        {
          if (!v63)
          {
            (*(void (**)(void *, char *, uint64_t))(v40 + 24))(v60, v54, v39);
            goto LABEL_52;
          }
          (*(void (**)(void *, uint64_t))(v40 + 8))(v60, v39);
        }
        if ((_DWORD)v44)
          v71 = v48;
        else
          v71 = v48 + 1;
        memcpy(v60, v54, v71);
        goto LABEL_52;
      }
      goto LABEL_32;
    }
    v45 = v56;
    v48 = v79;
    v47 = v78;
    if (v59 <= 1)
    {
      v51 = *v43;
      v64 = v77;
LABEL_36:
      *v42 = v51;
      v66 = (void *)(((unint64_t)v42 + v46) & v45);
      v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      swift_bridgeObjectRetain();
      if (v67(v64, 1, v39))
      {
        if ((_DWORD)v44)
          v68 = v48;
        else
          v68 = v48 + 1;
        memcpy(v66, v64, v68);
        if ((_DWORD)v44)
          goto LABEL_41;
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v40 + 16))(v66, v64, v39);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v66, 0, 1, v39);
        if ((_DWORD)v44)
        {
LABEL_41:
          v69 = v48 + 7;
LABEL_58:
          v74 = (_QWORD *)(((unint64_t)v66 + v69) & 0xFFFFFFFFFFFFF8);
          v75 = &v64[v69];
LABEL_59:
          *v74 = *(_QWORD *)((unint64_t)v75 & 0xFFFFFFFFFFFFF8);
          return a1;
        }
      }
      v69 = v48 + 8;
      goto LABEL_58;
    }
  }
  else
  {
    v49 = *v42;
    if ((unint64_t)*v42 >= 0xFFFFFFFF)
      LODWORD(v49) = -1;
    v50 = v49 + 1;
    v51 = *v43;
    if ((unint64_t)*v43 >= 0xFFFFFFFF)
      LODWORD(v52) = -1;
    else
      v52 = *v43;
    v53 = v52 + 1;
    if (v50 < 2)
    {
      if (v53 <= 1)
      {
        v54 = (char *)(((unint64_t)v43 + v46) & v45);
        goto LABEL_27;
      }
LABEL_32:
      swift_bridgeObjectRelease();
      v65 = ((unint64_t)v42 + v46) & v45;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v40 + 48))(v65, 1, v39))
        (*(void (**)(unint64_t, uint64_t))(v40 + 8))(v65, v39);
      goto LABEL_42;
    }
    if (v53 <= 1)
    {
      v64 = (char *)(((unint64_t)v43 + v46) & v45);
      goto LABEL_36;
    }
  }
LABEL_42:
  if ((_DWORD)v44)
    v70 = v48;
  else
    v70 = v48 + 1;
  memcpy(v42, v43, ((v70 + v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t initializeWithTake for ActionAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);
  const void *v26;
  void *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  size_t v34;

  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  v10 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)(v10 + 16);
  v11 = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 16) = v12;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)v9 = v13;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = *(_DWORD *)(v15 + 80);
  v18 = *(_DWORD *)(v15 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v19 = (_QWORD *)((v17 + 56 + v9) & v18);
  v20 = (uint64_t *)((v17 + 56 + v10) & v18);
  v21 = ~v17;
  v22 = v17 + 8;
  v34 = *(_QWORD *)(v15 + 64);
  if ((v16 & 0x80000000) != 0)
  {
    v26 = (const void *)(((unint64_t)v20 + v22) & v21);
    v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    if (v33(v26, v16, v14) <= 1)
    {
      v23 = *v20;
      v25 = v33;
LABEL_8:
      *v19 = v23;
      v27 = (void *)(((unint64_t)v19 + v22) & v21);
      if (v25(v26, 1, v14))
      {
        v28 = v34;
        if ((_DWORD)v16)
          v29 = v34;
        else
          v29 = v34 + 1;
        memcpy(v27, v26, v29);
        if ((_DWORD)v16)
          goto LABEL_13;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v27, v26, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v27, 0, 1, v14);
        v28 = v34;
        if ((_DWORD)v16)
        {
LABEL_13:
          v30 = v28 + 7;
LABEL_19:
          *(_QWORD *)(((unint64_t)v27 + v30) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v26 + v30) & 0xFFFFFFFFFFFFF8);
          return a1;
        }
      }
      v30 = v28 + 8;
      goto LABEL_19;
    }
  }
  else
  {
    v23 = *v20;
    LODWORD(v24) = -1;
    if ((unint64_t)*v20 < 0xFFFFFFFF)
      v24 = *v20;
    if ((v24 + 1) <= 1)
    {
      v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
      v26 = (const void *)(((unint64_t)v20 + v22) & v21);
      goto LABEL_8;
    }
  }
  v31 = v34;
  if (!(_DWORD)v16)
    v31 = v34 + 1;
  memcpy(v19, v20, ((v31 + (v22 & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithTake for ActionAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  uint64_t (*v40)(void);
  unsigned int v41;
  unsigned int v42;
  void *v43;
  uint64_t (*v44)(void *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  void *v50;
  size_t v51;
  size_t v52;
  size_t v53;
  size_t v54;
  size_t v55;
  size_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v60;
  size_t v61;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  v8 = (_OWORD *)(a2 + 112);
  v9 = *(unsigned __int8 *)(a1 + 128);
  if (v9 != 255)
  {
    v10 = *(unsigned __int8 *)(a2 + 128);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)(a1 + 112);
      v12 = *(_QWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 112) = *v8;
      *(_BYTE *)(a1 + 128) = v10;
      outlined consume of BindTarget(v11, v12, v9);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *v8;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
LABEL_6:
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  v13 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  v14 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  swift_bridgeObjectRelease();
  v15 = (__int128 *)(v13 + 16);
  v16 = (__int128 *)(v14 + 16);
  v17 = *(unsigned __int8 *)(v13 + 32);
  if (v17 == 255)
  {
    v21 = *v16;
    *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
    *v15 = v21;
  }
  else
  {
    v18 = *(unsigned __int8 *)(v14 + 32);
    if (v18 == 255)
    {
      outlined destroy of BindTarget(v13 + 16);
      v22 = *(_BYTE *)(v14 + 32);
      *v15 = *v16;
      *(_BYTE *)(v13 + 32) = v22;
    }
    else
    {
      v19 = *(_QWORD *)(v13 + 16);
      v20 = *(_QWORD *)(v13 + 24);
      *(_OWORD *)(v13 + 16) = *v16;
      *(_BYTE *)(v13 + 32) = v18;
      outlined consume of BindTarget(v19, v20, v17);
    }
  }
  v23 = *(_DWORD *)(v14 + 36);
  *(_BYTE *)(v13 + 40) = *(_BYTE *)(v14 + 40);
  *(_DWORD *)(v13 + 36) = v23;
  *(_WORD *)(v13 + 41) = *(_WORD *)(v14 + 41);
  *(_BYTE *)(v13 + 43) = *(_BYTE *)(v14 + 43);
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v14 + 48);
  swift_release();
  v24 = *(_QWORD *)(a3 + 16);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v14 + (v26 | 7);
  v28 = (uint64_t *)((v13 + (v26 | 7) + 56) & ~(v26 | 7));
  v29 = (uint64_t *)((v27 + 56) & ~(v26 | 7));
  v30 = *(unsigned int *)(v25 + 84);
  v31 = ~v26;
  v32 = v26 + 8;
  v33 = (v26 + 8) & ~v26;
  v61 = *(_QWORD *)(v25 + 64);
  if ((v30 & 0x80000000) != 0)
  {
    v60 = (v26 + 8) & ~v26;
    v40 = *(uint64_t (**)(void))(v25 + 48);
    v41 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v40)(((unint64_t)v28 + v32) & v31, v30, v24);
    v42 = v40();
    if (v41 < 2)
    {
      v33 = v60;
      if (v42 <= 1)
      {
        v37 = *v29;
        v39 = (char *)(((unint64_t)v29 + v32) & v31);
LABEL_22:
        *v28 = v37;
        swift_bridgeObjectRelease();
        v43 = (void *)(((unint64_t)v28 + v32) & v31);
        v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
        v45 = v44(v43, 1, v24);
        v46 = v44(v39, 1, v24);
        if (v45)
        {
          if (!v46)
          {
            (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v43, v39, v24);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v43, 0, 1, v24);
            goto LABEL_46;
          }
        }
        else
        {
          if (!v46)
          {
            (*(void (**)(void *, char *, uint64_t))(v25 + 40))(v43, v39, v24);
            goto LABEL_46;
          }
          (*(void (**)(void *, uint64_t))(v25 + 8))(v43, v24);
        }
        if ((_DWORD)v30)
          v54 = v61;
        else
          v54 = v61 + 1;
        memcpy(v43, v39, v54);
LABEL_46:
        v55 = v61;
        if (!(_DWORD)v30)
          v55 = v61 + 1;
        v56 = v55 + 7;
        v57 = (_QWORD *)(((unint64_t)v43 + v56) & 0xFFFFFFFFFFFFF8);
        v58 = &v39[v56];
        goto LABEL_52;
      }
      goto LABEL_27;
    }
    v47 = v31;
    v33 = v60;
    if (v42 <= 1)
    {
      v37 = *v29;
      v48 = (char *)(((unint64_t)v29 + v32) & v31);
LABEL_31:
      *v28 = v37;
      v50 = (void *)(((unint64_t)v28 + v32) & v47);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v40)(v48, 1, v24))
      {
        if ((_DWORD)v30)
          v51 = v61;
        else
          v51 = v61 + 1;
        memcpy(v50, v48, v51);
        if ((_DWORD)v30)
          goto LABEL_36;
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v50, v48, v24);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v50, 0, 1, v24);
        if ((_DWORD)v30)
        {
LABEL_36:
          v52 = v61 + 7;
LABEL_51:
          v57 = (_QWORD *)(((unint64_t)v50 + v52) & 0xFFFFFFFFFFFFF8);
          v58 = &v48[v52];
LABEL_52:
          *v57 = *(_QWORD *)((unint64_t)v58 & 0xFFFFFFFFFFFFF8);
          return a1;
        }
      }
      v52 = v61 + 8;
      goto LABEL_51;
    }
  }
  else
  {
    v34 = *v28;
    LODWORD(v35) = -1;
    if ((unint64_t)*v28 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    v36 = v34 + 1;
    v37 = *v29;
    if ((unint64_t)*v29 < 0xFFFFFFFF)
      v35 = *v29;
    v38 = v35 + 1;
    if (v36 < 2)
    {
      if (v38 <= 1)
      {
        v39 = (char *)(((unint64_t)v29 + v32) & v31);
        goto LABEL_22;
      }
LABEL_27:
      swift_bridgeObjectRelease();
      v49 = ((unint64_t)v28 + v32) & v31;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v25 + 48))(v49, 1, v24))
        (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v49, v24);
      goto LABEL_37;
    }
    if (v38 <= 1)
    {
      v40 = *(uint64_t (**)(void))(v25 + 48);
      v47 = v31;
      v48 = (char *)(((unint64_t)v29 + v32) & v31);
      goto LABEL_31;
    }
  }
LABEL_37:
  v53 = v61;
  if (!(_DWORD)v30)
    v53 = v61 + 1;
  memcpy(v28, v29, ((v53 + v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionAnimation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = v7 - 1;
  if ((v7 - 1) <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = v7 - 1;
  if (v5)
    v10 = 7;
  else
    v10 = 8;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = v11 | 7;
  v13 = v11 + 8;
  if (v9 < a2)
  {
    if (((((v11 + 208) & ~v12) + ((v10 + *(_QWORD *)(v4 + 64) + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v14 = 2;
    else
      v14 = a2 - v9 + 1;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X4 }
  }
  if (v8 < 0)
  {
    v19 = (unint64_t *)((((a1 + 159) & 0xFFFFFFFFFFFFFFF8) + v12 + 56) & ~v12);
    if (v6 > 0x7FFFFFFE)
    {
      v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v19 + v13) & ~v11);
      LODWORD(v20) = v21 - 1;
    }
    else
    {
      v20 = *v19;
      if (v20 >= 0xFFFFFFFF)
        LODWORD(v20) = -1;
      v21 = v20 + 1;
    }
    if (v21 < 2)
      LODWORD(v20) = 0;
    if (v20 >= 2)
      return (v20 - 1);
    else
      return 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 144);
    if (v18 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    return (v18 + 1);
  }
}

void storeEnumTagSinglePayload for ActionAnimation(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  if ((v10 - 1) <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10 - 1;
  v12 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v12;
  if (v11 < a3)
  {
    v13 = a3 - v11;
    if (((*(unsigned __int8 *)(v7 + 80) + 208) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
       + ((((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80)) + (_DWORD)v12 + 7) & 0xFFFFFFF8) == -8)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (a2 > v11)
  {
    if (((*(unsigned __int8 *)(v7 + 80) + 208) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
       + ((((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80)) + (_DWORD)v12 + 7) & 0xFFFFFFF8) != -8)
    {
      v16 = ~v11 + a2;
      bzero(a1, ((*(unsigned __int8 *)(v7 + 80) + 208) & ~(*(unsigned __int8 *)(v7 + 80) | 7))+ ((((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v12 + 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X5 }
}

void sub_21BBC2344(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  int v25;

  *(_BYTE *)(v19 + v20) = 0;
  if (a1)
  {
    if ((v15 & 0x80000000) != 0)
    {
      v21 = (_QWORD *)((((v19 + 159) & 0xFFFFFFFFFFFFFFF8) + v16 + 56) & v10);
      if (v15 >= a1 && (v22 = a1 + 1, v22 <= v13))
      {
        if (a1 != -1)
        {
          if (v11 > 0x7FFFFFFE)
          {
            v24 = (void *)(((unint64_t)v21 + v14) & v18);
            if (v22 <= v11)
            {
              (*(void (**)(void *, _QWORD))(v12 + 56))(v24, a1 + 2);
            }
            else if ((_DWORD)a2)
            {
              if (a2 <= 3)
                v25 = a2;
              else
                v25 = 4;
              bzero(v24, a2);
              __asm { BR              X10 }
            }
          }
          else if (v22 > 0x7FFFFFFE)
          {
            *v21 = 0;
            *(_DWORD *)v21 = a1 - 2147483646;
          }
          else
          {
            *v21 = v22;
          }
        }
      }
      else if (((v17 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
      {
        v23 = a1 - v13;
        bzero(v21, ((v17 + 7) & 0xFFFFFFF8) + 8);
        *(_DWORD *)v21 = v23;
      }
    }
    else if ((a1 & 0x80000000) != 0)
    {
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 8) = 0u;
      *(_QWORD *)v19 = a1 ^ 0x80000000;
    }
    else
    {
      *(_QWORD *)(v19 + 144) = a1 - 1;
    }
  }
}

void sub_21BBC24A0()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_21BBC24E0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21BBC24E8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ActionEventData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionEventData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionEventData()
{
  return &type metadata for ActionEventData;
}

uint64_t type metadata completion function for ActionDefinition()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionDefinition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v10;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  v10 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v9 != 0 || ((v8 + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
    v14 = (const void *)(((unint64_t)a2 + v7 + 8) & ~v7);
    v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v15(v14, 1, v4))
    {
      memcpy(v13, v14, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
    *(_QWORD *)(((unint64_t)v13 + v8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for ActionDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

_QWORD *initializeWithCopy for ActionDefinition(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);
  int v10;
  size_t v11;
  size_t v12;
  size_t v13;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  if (v9(v8, 1, v4))
  {
    v10 = *(_DWORD *)(v5 + 84);
    v11 = *(_QWORD *)(v5 + 64);
    if (v10)
      v12 = v11;
    else
      v12 = v11 + 1;
    memcpy(v7, v8, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v10 = *(_DWORD *)(v5 + 84);
    v11 = *(_QWORD *)(v5 + 64);
  }
  if (v10)
    v13 = v11;
  else
    v13 = v11 + 1;
  *(_QWORD *)(((unint64_t)v7 + v13 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + v13 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithCopy for ActionDefinition(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  *(_QWORD *)(((unint64_t)v9 + v15 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *initializeWithTake for ActionDefinition(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  *(_QWORD *)(((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ActionDefinition(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  *(_QWORD *)(((unint64_t)v9 + v15 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionDefinition(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  if (v6 > 0x7FFFFFFE)
  {
    v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
  else
  {
    v14 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((v14 + 1) >= 2)
      return v14;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for ActionDefinition(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

uint64_t sub_21BBC2EF8@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t result;

  *((_BYTE *)v14 + v15) = 0;
  if (a1)
  {
    if (v11 > 0x7FFFFFFE)
    {
      v16 = (void *)(((unint64_t)v14 + v13 + 8) & v10);
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v16, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v17 = a2;
        else
          v17 = 4;
        bzero(v16, a2);
        __asm { BR              X10 }
      }
    }
    else if (a1 > 0x7FFFFFFE)
    {
      *v14 = 0;
      *(_DWORD *)v14 = a1 - 0x7FFFFFFF;
    }
    else
    {
      *v14 = a1;
    }
  }
  return result;
}

void sub_21BBC3000()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_21BBC3010()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21BBC3018()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void *type metadata accessor for ActionEventParameterUnused.CodingKeys()
{
  return &unk_24DFB4668;
}

uint64_t destroy for AnyActionAnimation(uint64_t a1)
{
  int v2;
  int v3;

  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 128);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v2);
  swift_release();
  swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v3);
  return swift_release();
}

uint64_t initializeWithCopy for AnyActionAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v6 = *(unsigned __int8 *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 112);
    v8 = *(_QWORD *)(a2 + 120);
    outlined copy of BindTarget(v7, v8, v6);
    *(_QWORD *)(a1 + 112) = v7;
    *(_QWORD *)(a1 + 120) = v8;
    *(_BYTE *)(a1 + 128) = v6;
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v10 = *(unsigned __int8 *)(a2 + 184);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 168);
    v12 = *(_QWORD *)(a2 + 176);
    outlined copy of BindTarget(v11, v12, v10);
    *(_QWORD *)(a1 + 168) = v11;
    *(_QWORD *)(a1 + 176) = v12;
    *(_BYTE *)(a1 + 184) = v10;
  }
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyActionAnimation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  int v21;
  __int128 *v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  int v34;

  v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 19);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v8;
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  *(_QWORD *)(a1 + 88) = a2[11];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (__int128 *)(a1 + 112);
  v10 = (__int128 *)(a2 + 14);
  v11 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v11 == 255)
    {
      v20 = *v10;
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      *v9 = v20;
    }
    else
    {
      v17 = a2[14];
      v18 = a2[15];
      outlined copy of BindTarget(v17, v18, *((_BYTE *)a2 + 128));
      *(_QWORD *)(a1 + 112) = v17;
      *(_QWORD *)(a1 + 120) = v18;
      *(_BYTE *)(a1 + 128) = v11;
    }
  }
  else if (v11 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
    v19 = *((_BYTE *)a2 + 128);
    *v9 = *v10;
    *(_BYTE *)(a1 + 128) = v19;
  }
  else
  {
    v12 = a2[14];
    v13 = a2[15];
    outlined copy of BindTarget(v12, v13, *((_BYTE *)a2 + 128));
    v14 = *(_QWORD *)(a1 + 112);
    v15 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 112) = v12;
    *(_QWORD *)(a1 + 120) = v13;
    v16 = *(_BYTE *)(a1 + 128);
    *(_BYTE *)(a1 + 128) = v11;
    outlined consume of BindTarget(v14, v15, v16);
  }
  v21 = *((_DWORD *)a2 + 33);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(_WORD *)(a1 + 137) = *(_WORD *)((char *)a2 + 137);
  *(_BYTE *)(a1 + 139) = *((_BYTE *)a2 + 139);
  *(_QWORD *)(a1 + 144) = a2[18];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (__int128 *)(a1 + 168);
  v23 = (__int128 *)(a2 + 21);
  v24 = *((unsigned __int8 *)a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v24 == 255)
    {
      v33 = *v23;
      *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
      *v22 = v33;
    }
    else
    {
      v30 = a2[21];
      v31 = a2[22];
      outlined copy of BindTarget(v30, v31, *((_BYTE *)a2 + 184));
      *(_QWORD *)(a1 + 168) = v30;
      *(_QWORD *)(a1 + 176) = v31;
      *(_BYTE *)(a1 + 184) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    v32 = *((_BYTE *)a2 + 184);
    *v22 = *v23;
    *(_BYTE *)(a1 + 184) = v32;
  }
  else
  {
    v25 = a2[21];
    v26 = a2[22];
    outlined copy of BindTarget(v25, v26, *((_BYTE *)a2 + 184));
    v27 = *(_QWORD *)(a1 + 168);
    v28 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = v25;
    *(_QWORD *)(a1 + 176) = v26;
    v29 = *(_BYTE *)(a1 + 184);
    *(_BYTE *)(a1 + 184) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  v34 = *((_DWORD *)a2 + 47);
  *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
  *(_DWORD *)(a1 + 188) = v34;
  *(_WORD *)(a1 + 193) = *(_WORD *)((char *)a2 + 193);
  *(_BYTE *)(a1 + 195) = *((_BYTE *)a2 + 195);
  *(_QWORD *)(a1 + 200) = a2[25];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for AnyActionAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a2 + 112);
  v7 = *(unsigned __int8 *)(a1 + 128);
  if (v7 != 255)
  {
    v8 = *(unsigned __int8 *)(a2 + 128);
    if (v8 != 255)
    {
      v9 = *(_QWORD *)(a1 + 112);
      v10 = *(_QWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 112) = *v6;
      *(_BYTE *)(a1 + 128) = v8;
      outlined consume of BindTarget(v9, v10, v7);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *v6;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
LABEL_6:
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  v12 = (_OWORD *)(a2 + 168);
  v13 = *(unsigned __int8 *)(a1 + 184);
  if (v13 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 168) = *v12;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    goto LABEL_11;
  }
  v14 = *(unsigned __int8 *)(a2 + 184);
  if (v14 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *v12;
  *(_BYTE *)(a1 + 184) = v14;
  outlined consume of BindTarget(v15, v16, v13);
LABEL_11:
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyActionAnimation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyActionAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 144) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyActionAnimation()
{
  return &type metadata for AnyActionAnimation;
}

uint64_t sub_21BBC3834()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BBC3858()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void (**)(char *))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t sub_21BBC38AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v9;

  return creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(char *))(v9 + 32), *(_QWORD *)(v9 + 40), a7, a8, a9);
}

uint64_t sub_21BBC38F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s10RealityKit27AnimationPlaybackControllerC0A10Foundation15ActionEventDataVSbS2dAA8__EngineCSVAA6EntityCSgAD0G15HandlerProtocol_pSgIeggyyyygygr_AcFSbS2dAHSVAkMIegnnnnnnnnr_TRTA_0(uint64_t *a1, _OWORD *a2, unsigned __int8 *a3, double *a4, double *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, _QWORD, double, double);
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[5];

  v9 = *(uint64_t (**)(uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, _QWORD, double, double))(v8 + 16);
  v10 = *a1;
  v11 = a2[3];
  v14[2] = a2[2];
  v14[3] = v11;
  v14[4] = a2[4];
  v12 = a2[1];
  v14[0] = *a2;
  v14[1] = v12;
  return v9(v10, v14, *a3, *a6, *a7, *a8, *a4, *a5);
}

uint64_t sub_21BBC397C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21BBC3998()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21BBC39B4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21BBC39D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #4 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21BBC39EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #5 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21BBC3A08()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #6 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21BBC3A24()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #7 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21BBC3A40()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #8 in static ActionHandlerProtocol.subscribe(_:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t outlined init with copy of ActionHandlerProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ActionHandlerProtocol?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __RKVisibilityHidePopAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityHidePopAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityHidePopAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 73, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 117, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 151, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AudioMixGroup.init(_name:id:gain:speed:isMuted:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v12;

  v12 = result;
  if ((a4 & 1) != 0)
  {
    result = REAudioMixGroupsComponentCreateMixGroupID();
    a3 = result;
  }
  *(_QWORD *)a6 = a3;
  *(_QWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 16) = 1;
  *(_QWORD *)(a6 + 24) = 0;
  *(_WORD *)(a6 + 32) = 1;
  *(_QWORD *)(a6 + 40) = v12;
  *(_QWORD *)(a6 + 48) = a2;
  *(double *)(a6 + 56) = a7;
  *(double *)(a6 + 64) = a8;
  *(_BYTE *)(a6 + 72) = a5 & 1;
  return result;
}

uint64_t AudioMixGroup.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

double AudioMixGroup.gain.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void AudioMixGroup.gain.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
  *(_BYTE *)(v1 + 33) = 1;
}

uint64_t (*AudioMixGroup.gain.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return AudioMixGroup.gain.modify;
}

uint64_t AudioMixGroup.gain.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    *(_BYTE *)(*(_QWORD *)result + 33) = 1;
  return result;
}

double AudioMixGroup.speed.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void AudioMixGroup.speed.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*AudioMixGroup.speed.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioMixGroup.isMuted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t AudioMixGroup.isMuted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

uint64_t (*AudioMixGroup.isMuted.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double AudioMixGroup.init(name:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)a3 = REAudioMixGroupsComponentCreateMixGroupID();
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 1;
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = a2;
  result = 0.0;
  *(_OWORD *)(a3 + 56) = xmmword_21BE638F0;
  *(_BYTE *)(a3 + 72) = 0;
  return result;
}

Swift::Void __swiftcall AudioMixGroup.fade(to:duration:)(Swift::Double to, Swift::Double duration)
{
  uint64_t v2;

  *(Swift::Double *)(v2 + 8) = to;
  *(_BYTE *)(v2 + 16) = 0;
  *(Swift::Double *)(v2 + 24) = duration;
  *(_BYTE *)(v2 + 32) = 0;
}

void AudioMixGroup.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt8 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 72);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
}

Swift::Int AudioMixGroup.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt8 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 72);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioMixGroup()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt8 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 72);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t AudioMixGroup.customMirror.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v6) = *((_BYTE *)v0 + 16);
  v8 = *((_QWORD *)v0 + 3);
  v9 = *((_BYTE *)v0 + 32);
  v10 = *((_BYTE *)v0 + 33);
  v12 = *((_QWORD *)v0 + 5);
  v11 = *((_QWORD *)v0 + 6);
  v13 = *((_QWORD *)v0 + 7);
  v14 = *((_QWORD *)v0 + 8);
  v15 = *((_BYTE *)v0 + 72);
  v21 = *v0;
  v22 = v6;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = v12;
  v27 = v11;
  v28 = v13;
  v29 = v14;
  v30 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v16 + 32) = 1701667182;
  *(_QWORD *)(v16 + 40) = 0xE400000000000000;
  v17 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v16 + 48) = v12;
  *(_QWORD *)(v16 + 56) = v11;
  *(_QWORD *)(v16 + 72) = v17;
  *(_QWORD *)(v16 + 80) = 1852399975;
  *(_QWORD *)(v16 + 88) = 0xE400000000000000;
  v18 = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v16 + 96) = v13;
  *(_QWORD *)(v16 + 120) = v18;
  *(_QWORD *)(v16 + 128) = 0x6465657073;
  *(_QWORD *)(v16 + 136) = 0xE500000000000000;
  *(_QWORD *)(v16 + 144) = v14;
  *(_QWORD *)(v16 + 168) = v18;
  *(_QWORD *)(v16 + 176) = 0x646574754D7369;
  *(_QWORD *)(v16 + 184) = 0xE700000000000000;
  *(_QWORD *)(v16 + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v16 + 192) = v15;
  v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v7, 1, 1, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  swift_bridgeObjectRetain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static AudioMixGroup.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;
  double v5;
  double v6;
  int v7;
  char v9;
  uint64_t result;

  v3 = *(double *)(a1 + 56);
  v2 = *(double *)(a1 + 64);
  v4 = *(unsigned __int8 *)(a1 + 72);
  v6 = *(double *)(a2 + 56);
  v5 = *(double *)(a2 + 64);
  v7 = *(unsigned __int8 *)(a2 + 72);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48))
  {
    if (v3 != v6 || v2 != v5)
      return 0;
    return v4 ^ v7 ^ 1u;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v9 & 1) != 0 && v3 == v6 && v2 == v5)
    return v4 ^ v7 ^ 1u;
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioMixGroup and conformance AudioMixGroup()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioMixGroup and conformance AudioMixGroup;
  if (!lazy protocol witness table cache variable for type AudioMixGroup and conformance AudioMixGroup)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioMixGroup, &type metadata for AudioMixGroup);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioMixGroup and conformance AudioMixGroup);
  }
  return result;
}

double sub_21BBC43CC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 56);
  *a2 = result;
  return result;
}

double sub_21BBC43D8(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 56) = *a1;
  *(_BYTE *)(a2 + 33) = 1;
  return result;
}

uint64_t initializeWithCopy for AudioMixGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioMixGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AudioMixGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioMixGroup(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioMixGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioMixGroup()
{
  return &type metadata for AudioMixGroup;
}

float DockingRegionComponent.width.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

double DockingRegionComponent.width.setter(float32_t a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  double result;

  v1[2].f32[0] = a1;
  REAABBInit();
  *v1 = v2;
  v1[1] = v3;
  *(_QWORD *)&result = vsubq_f32(v3, v2).u64[0];
  v1[2].i32[0] = LODWORD(result);
  return result;
}

double DockingRegionComponent.setBounds()()
{
  float32x4_t *v0;
  float32x4_t v1;
  float32x4_t v2;
  double result;

  REAABBInit();
  *v0 = v1;
  v0[1] = v2;
  *(_QWORD *)&result = vsubq_f32(v2, v1).u64[0];
  v0[2].i32[0] = LODWORD(result);
  return result;
}

uint64_t (*DockingRegionComponent.width.modify(uint64_t a1))(_DWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 32);
  return DockingRegionComponent.width.modify;
}

uint64_t DockingRegionComponent.width.modify(_DWORD *a1)
{
  float32x4_t *v1;
  uint64_t result;
  float32x4_t v3;
  float32x4_t v4;

  v1 = *(float32x4_t **)a1;
  *(_DWORD *)(*(_QWORD *)a1 + 32) = a1[2];
  result = REAABBInit();
  *v1 = v3;
  v1[1] = v4;
  v1[2].i32[0] = vsubq_f32(v4, v3).u32[0];
  return result;
}

uint64_t DockingRegionComponent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;

  result = REAABBEmpty();
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance DockingRegionComponent@<X0>(float32x4_t *a1@<X8>)
{
  uint64_t result;
  float32x4_t v3;
  float32x4_t v4;

  REAABBEmpty();
  result = REDockingRegionComponentGetBounds();
  *a1 = v3;
  a1[1] = v4;
  a1[2].i32[0] = vsubq_f32(v4, v3).u32[0];
  return result;
}

uint64_t static DockingRegionComponent.__fromCore(_:)@<X0>(float32x4_t *a1@<X8>)
{
  uint64_t result;
  float32x4_t v3;
  float32x4_t v4;

  REAABBEmpty();
  result = REDockingRegionComponentGetBounds();
  *a1 = v3;
  a1[1] = v4;
  a1[2].i32[0] = vsubq_f32(v4, v3).u32[0];
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance DockingRegionComponent()
{
  REDockingRegionComponentSetBounds();
  return RENetworkMarkComponentDirty();
}

uint64_t DockingRegionComponent.__toCore(_:)()
{
  REDockingRegionComponentSetBounds();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance DockingRegionComponent(_DWORD *a1@<X8>)
{
  *a1 = 5005;
}

void static DockingRegionComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5005;
}

uint64_t DockingRegionComponent.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[2];
  int v14;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_OWORD *)(v0 + 16);
  v9 = *(_DWORD *)(v0 + 32);
  v13[0] = *(_OWORD *)v0;
  v13[1] = v8;
  v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v10 + 32) = 0x6874646977;
  *(_QWORD *)(v10 + 40) = 0xE500000000000000;
  *(_QWORD *)(v10 + 72) = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v10 + 48) = v9;
  v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

float sub_21BBC49E4@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 32);
  *a2 = result;
  return result;
}

double sub_21BBC49F0(_DWORD *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *a1;
  return DockingRegionComponent.setBounds()();
}

__n128 __swift_memcpy36_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DockingRegionComponent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DockingRegionComponent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 36) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DockingRegionComponent()
{
  return &type metadata for DockingRegionComponent;
}

uint64_t __RKEntityGlobalTapTrigger.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityGlobalTapTrigger.matches(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;

  type metadata accessor for __RKEntityGlobalTapTrigger();
  if (swift_dynamicCastClass())
    return 1;
  type metadata accessor for __RKEntityTriggerGroup();
  v1 = swift_dynamicCastClass();
  if (!v1)
    return 0;
  v2 = v1;
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 >> 62)
  {
LABEL_30:
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v0 = result;
    if (!result)
      goto LABEL_14;
  }
  else
  {
    v0 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (!v0)
    {
LABEL_14:
      swift_bridgeObjectRelease();
      swift_release();
      return v0;
    }
  }
  v5 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x220769770](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain();
  }
  v7 = __RKEntityGlobalTapTrigger.matches(with:)(v6);
  result = swift_release();
  if ((v7 & 1) != 0)
  {
LABEL_10:
    v0 = 1;
    goto LABEL_14;
  }
  if (v0 == 1)
  {
    v0 = 0;
    goto LABEL_14;
  }
  if (v5)
  {
    v8 = MEMORY[0x220769770](1, v3);
    goto LABEL_20;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v8 = *(_QWORD *)(v3 + 40);
    swift_retain();
LABEL_20:
    v9 = __RKEntityGlobalTapTrigger.matches(with:)(v8);
    result = swift_release();
    if ((v9 & 1) == 0)
    {
      v10 = 0;
      v11 = v0 - 2;
      while (1)
      {
        v0 = v11 != v10;
        if (v11 == v10)
          goto LABEL_14;
        v14 = v10 + 2;
        if (v5)
        {
          v12 = MEMORY[0x220769770](v10 + 2, v3);
          if (__OFADD__(v14, 1))
            goto LABEL_29;
        }
        else
        {
          if (v14 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_34;
          v12 = *(_QWORD *)(v3 + 8 * v10 + 48);
          swift_retain();
          if (__OFADD__(v14, 1))
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        v13 = __RKEntityGlobalTapTrigger.matches(with:)(v12);
        result = swift_release();
        ++v10;
        if ((v13 & 1) != 0)
          goto LABEL_14;
      }
    }
    goto LABEL_10;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t __RKEntityGlobalTapTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKEntityTapPointTrigger.matches(with:)()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;

  type metadata accessor for __RKEntityTapPointTrigger();
  v1 = swift_dynamicCastClass();
  if (v1 && vabdd_f64(*(double *)(v1 + 24), v0[3]) <= v0[5] && vabdd_f64(*(double *)(v1 + 32), v0[4]) <= v0[6])
    return 1;
  type metadata accessor for __RKEntityTriggerGroup();
  v2 = swift_dynamicCastClass();
  if (!v2)
    return 0;
  v3 = v2;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 >> 62)
  {
LABEL_32:
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v5 = result;
    if (!result)
      goto LABEL_15;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (!v5)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      swift_release();
      return v5;
    }
  }
  v7 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v8 = MEMORY[0x220769770](0, v4);
  }
  else
  {
    if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v8 = *(_QWORD *)(v4 + 32);
    swift_retain();
  }
  v9 = __RKEntityTapPointTrigger.matches(with:)(v8);
  result = swift_release();
  if ((v9 & 1) != 0)
  {
LABEL_11:
    v5 = 1;
    goto LABEL_15;
  }
  if (v5 == 1)
  {
    v5 = 0;
    goto LABEL_15;
  }
  if (v7)
  {
    v10 = MEMORY[0x220769770](1, v4);
    goto LABEL_22;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v10 = *(_QWORD *)(v4 + 40);
    swift_retain();
LABEL_22:
    v11 = __RKEntityTapPointTrigger.matches(with:)(v10);
    result = swift_release();
    if ((v11 & 1) == 0)
    {
      v12 = 0;
      v13 = v5 - 2;
      while (1)
      {
        v5 = v13 != v12;
        if (v13 == v12)
          goto LABEL_15;
        v16 = v12 + 2;
        if (v7)
        {
          v14 = MEMORY[0x220769770](v12 + 2, v4);
          if (__OFADD__(v16, 1))
            goto LABEL_31;
        }
        else
        {
          if (v16 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_36;
          v14 = *(_QWORD *)(v4 + 8 * v12 + 48);
          swift_retain();
          if (__OFADD__(v16, 1))
          {
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
        }
        v15 = __RKEntityTapPointTrigger.matches(with:)(v14);
        result = swift_release();
        ++v12;
        if ((v15 & 1) != 0)
          goto LABEL_15;
      }
    }
    goto LABEL_11;
  }
LABEL_37:
  __break(1u);
  return result;
}

__n128 __RKEntityTapPointTrigger.copy(with:)@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;

  v8 = *(__n128 *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = type metadata accessor for __RKEntityTapPointTrigger();
  v6 = swift_allocObject();
  result = v8;
  *(__n128 *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 40) = v3;
  *(_QWORD *)(v6 + 48) = v4;
  *(_WORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 18) = 0;
  a1[3] = v5;
  *a1 = v6;
  return result;
}

void __RKEntityTapPointTrigger.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityTapPointTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKEntityTapTrigger.targetEntity.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*__RKEntityTapTrigger.targetEntity.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityTapTrigger.__allocating_init(targetEntity:reversible:)(uint64_t a1, unsigned __int8 a2)
{
  int v4;
  uint64_t v5;

  v4 = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 24) = 0;
  swift_beginAccess();
  *(_QWORD *)(v5 + 24) = a1;
  swift_release();
  *(_WORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 18) = 0;
  if (v4 != 2)
  {
    swift_beginAccess();
    *(_BYTE *)(v5 + 16) = a2 & 1;
  }
  return v5;
}

uint64_t __RKEntityTapTrigger.init(targetEntity:reversible:)(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v5;

  v5 = a2;
  *(_QWORD *)(v2 + 24) = 0;
  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a1;
  swift_release();
  *(_WORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 18) = 0;
  if (v5 != 2)
  {
    swift_beginAccess();
    *(_BYTE *)(v2 + 16) = a2 & 1;
  }
  return v2;
}

uint64_t __RKEntityTapTrigger.matches(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  char v48;
  void (*v49)(char *, uint64_t);
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t v67;
  unint64_t v68;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  v63 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v58 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v64 = (uint64_t)&v56 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v56 - v16;
  v67 = 91;
  v68 = 0xE100000000000000;
  v66._countAndFlagsBits = 0;
  v66._object = (void *)0xE000000000000000;
  v65 = v1;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 8285;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 8250;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  swift_release();
  v22 = v67;
  v21 = v68;
  type metadata accessor for __RKEntityTapTrigger();
  v23 = swift_dynamicCastClass();
  if (!v23)
  {
    v67 = v22;
    v68 = v21;
    v31 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v31, &v67);
    goto LABEL_16;
  }
  v24 = v23;
  v60 = v7;
  v67 = v22;
  v68 = v21;
  swift_retain();
  v25 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v25, &v67);
  v67 = v22;
  v68 = v21;
  v26 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v26, &v67, partial apply for implicit closure #2 in __RKEntityTapTrigger.matches(with:), v1);
  v67 = v22;
  v68 = v21;
  v27 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v27, &v67, partial apply for implicit closure #4 in __RKEntityTapTrigger.matches(with:), v1);
  v67 = v22;
  v68 = v21;
  v28 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v28, &v67, partial apply for implicit closure #6 in __RKEntityTapTrigger.matches(with:), v24);
  v67 = v22;
  v68 = v21;
  v29 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v29, &v67, partial apply for implicit closure #8 in __RKEntityTapTrigger.matches(with:), v24);
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 24))
  {
    swift_retain();
    v30 = (uint64_t)v17;
    Entity.__interactionIdentifier.getter((uint64_t)v17);
    swift_release();
  }
  else
  {
    v30 = (uint64_t)v17;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))(v17, 1, 1, v62);
  }
  v57 = v12;
  swift_beginAccess();
  v32 = *(_QWORD *)(v24 + 24);
  v59 = a1;
  v61 = v2;
  if (v32)
  {
    swift_retain();
    v33 = v64;
    Entity.__interactionIdentifier.getter(v64);
    swift_release();
    v34 = v62;
    v35 = v63;
  }
  else
  {
    v35 = v63;
    v33 = v64;
    v34 = v62;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v64, 1, 1, v62);
  }
  v36 = (uint64_t)&v9[*(int *)(v60 + 48)];
  outlined init with copy of UUID?(v30, (uint64_t)v9);
  outlined init with copy of UUID?(v33, v36);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v37((uint64_t)v9, 1, v34) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v33, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?(v30, &demangling cache variable for type metadata for UUID?);
    if (v37(v36, 1, v34) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
LABEL_25:
      v67 = v22;
      v68 = v21;
      v50 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v50, &v67);
      swift_bridgeObjectRelease();
      swift_release();
      return 1;
    }
  }
  else
  {
    v63 = v30;
    v38 = (uint64_t)v57;
    outlined init with copy of UUID?((uint64_t)v9, (uint64_t)v57);
    if (v37(v36, 1, v34) != 1)
    {
      v47 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v58, v36, v34);
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49 = *(void (**)(char *, uint64_t))(v35 + 8);
      v49(v47, v34);
      outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?(v63, &demangling cache variable for type metadata for UUID?);
      v49((char *)v38, v34);
      outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      if ((v48 & 1) != 0)
        goto LABEL_25;
      goto LABEL_15;
    }
    outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?(v63, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v34);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_15:
  v67 = v22;
  v68 = v21;
  v39 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v39, &v67);
  swift_release();
LABEL_16:
  v67 = v22;
  v68 = v21;
  v40 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v40, &v67);
  swift_bridgeObjectRelease();
  type metadata accessor for __RKEntityTriggerGroup();
  result = swift_dynamicCastClass();
  if (!result)
    return result;
  v42 = result;
  swift_beginAccess();
  v43 = *(_QWORD *)(v42 + 24);
  if (v43 >> 62)
  {
LABEL_40:
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v44 = result;
    if (result)
      goto LABEL_19;
  }
  else
  {
    v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v44)
    {
LABEL_19:
      if ((v43 & 0xC000000000000001) != 0)
      {
        v45 = MEMORY[0x220769770](0, v43);
      }
      else
      {
        if (!*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        v45 = *(_QWORD *)(v43 + 32);
        swift_retain();
      }
      v46 = __RKEntityTapTrigger.matches(with:)(v45);
      swift_release();
      if ((v46 & 1) != 0)
      {
LABEL_35:
        swift_release();
        swift_bridgeObjectRelease();
        return 1;
      }
      v51 = 0;
      v52 = v44 - 1;
      while (v52 != v51)
      {
        v53 = v51 + 1;
        if ((v43 & 0xC000000000000001) != 0)
        {
          v54 = MEMORY[0x220769770](v51 + 1, v43);
          if (__OFADD__(v53, 1))
            goto LABEL_38;
        }
        else
        {
          if (v53 >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_39;
          v54 = *(_QWORD *)(v43 + 8 * v51 + 40);
          swift_retain();
          if (__OFADD__(v53, 1))
          {
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
        }
        v55 = __RKEntityTapTrigger.matches(with:)(v54);
        swift_release();
        ++v51;
        if ((v55 & 1) != 0)
          goto LABEL_35;
      }
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for __RKEntityTapTrigger()
{
  return objc_opt_self();
}

uint64_t implicit closure #2 in __RKEntityTapTrigger.matches(with:)(uint64_t a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;

  _StringGuts.grow(_:)(a2);
  v7._countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 24))
  {
    _print_unlocked<A, B>(_:_:)();
    v8 = 0;
    v9 = 0xE000000000000000;
  }
  else
  {
    v9 = 0xE300000000000000;
    v8 = 7104878;
  }
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t implicit closure #4 in __RKEntityTapTrigger.matches(with:)(uint64_t a1, Swift::Int a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  void *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v25 - v16;
  v26 = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(a2);
  v28 = v26;
  v29 = v27;
  v18._countAndFlagsBits = a3;
  v18._object = a4;
  String.append(_:)(v18);
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v17);
    swift_release();
    outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
    {
      v19 = (void *)0xE300000000000000;
      v20 = 7104878;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
      v20 = UUID.description.getter();
      v19 = v21;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    v19 = (void *)0xE300000000000000;
    v20 = 7104878;
  }
  v22._countAndFlagsBits = v20;
  v22._object = v19;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  return v28;
}

uint64_t __RKEntityTapTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  swift_beginAccess();
  v4 = *(_BYTE *)(v1 + 16);
  v5 = type metadata accessor for __RKEntityTapTrigger();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  swift_beginAccess();
  *(_QWORD *)(v6 + 24) = v3;
  swift_retain();
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 18) = 0;
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 16) = v4;
  a1[3] = v5;
  *a1 = v6;
  return result;
}

uint64_t __RKEntityTapTrigger.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  if (!v5 || *(_QWORD *)(v5 + 16) != *(_QWORD *)(a1 + 16))
    return 0;
  swift_beginAccess();
  v7 = *(_BYTE *)(v2 + 16);
  type metadata accessor for __RKEntityTapTrigger();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  swift_beginAccess();
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 18) = 0;
  swift_beginAccess();
  *(_BYTE *)(v6 + 16) = v7;
  return v6;
}

void __RKEntityTapTrigger.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityTapTrigger.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityTapTrigger.__ivar_destroyer()
{
  return swift_release();
}

uint64_t __RKEntityTapTrigger.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t __RKEntityTapTrigger.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t partial apply for implicit closure #2 in __RKEntityTapTrigger.matches(with:)()
{
  uint64_t v0;

  return implicit closure #2 in __RKEntityTapTrigger.matches(with:)(v0, 22, 0xD000000000000014, (void *)0x800000021BE8A360);
}

uint64_t partial apply for implicit closure #4 in __RKEntityTapTrigger.matches(with:)()
{
  uint64_t v0;

  return implicit closure #4 in __RKEntityTapTrigger.matches(with:)(v0, 31, 0xD00000000000001DLL, (void *)0x800000021BE8A340);
}

uint64_t partial apply for implicit closure #6 in __RKEntityTapTrigger.matches(with:)()
{
  uint64_t v0;

  return implicit closure #2 in __RKEntityTapTrigger.matches(with:)(v0, 24, 0xD000000000000016, (void *)0x800000021BE8A320);
}

uint64_t partial apply for implicit closure #8 in __RKEntityTapTrigger.matches(with:)()
{
  uint64_t v0;

  return implicit closure #4 in __RKEntityTapTrigger.matches(with:)(v0, 33, 0xD00000000000001FLL, (void *)0x800000021BE8A300);
}

uint64_t sub_21BBC5FDC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_retain();
}

uint64_t type metadata accessor for __RKEntityGlobalTapTrigger()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __RKEntityTapPointTrigger()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityTapTrigger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityTapTrigger.targetEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of __RKEntityTapTrigger.targetEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of __RKEntityTapTrigger.targetEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityTapTrigger.__allocating_init(targetEntity:reversible:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t __RKEntityOrbitEntityAction.__allocating_init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(uint64_t a1, uint64_t a2, char a3, char *a4, char a5, char a6, float a7, float a8, __n128 a9, float a10, float a11)
{
  uint64_t v21;

  swift_allocObject();
  v21 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  return v21;
}

uint64_t __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(uint64_t a1, uint64_t a2, char a3, char *a4, char a5, char a6, float a7, float a8, __n128 a9, float a10, float a11)
{
  uint64_t v11;

  v11 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  return v11;
}

uint64_t __RKEntityOrbitEntityAction.perform(with:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  BOOL v25;
  float v26;
  float v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int MotionType;
  char *v36;
  char v37;
  uint64_t result;
  uint64_t ServiceLocator;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  double v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t ComponentByClass;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _UNKNOWN **v87;
  uint64_t v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  __int128 v92;
  double v93;
  char v94;
  char v95;
  _BYTE v96[32];
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[8];
  _BYTE v103[64];
  _BYTE v104[64];
  uint64_t v105[6];
  char v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  char v112;

  v1 = v0;
  swift_beginAccess();
  v2 = v0[2];
  v88 = 91;
  v89 = (const char *)0xE100000000000000;
  if (v2)
  {
    v107 = 0;
    v108 = 0xE000000000000000;
    v105[0] = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v10 = (char *)v88;
  v9 = v89;
  v11 = v0[2];
  if (!v11)
  {
    v14 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v14, &v88);
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = v0[14];
  if (!v12)
  {
    swift_retain();
    v18 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v18, &v88);
    swift_bridgeObjectRelease();
LABEL_38:
    swift_release();
    return 0;
  }
  v13 = v0 + 12;
  swift_beginAccess();
  if (*((_BYTE *)v1 + 104) == 1 && *v13 == 1)
  {
    swift_beginAccess();
    if (*((_BYTE *)v1 + 105) == 1)
    {
      swift_retain();
      swift_retain();
LABEL_17:
      v19 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v19, &v88);
      swift_bridgeObjectRelease();
LABEL_37:
      swift_release();
      goto LABEL_38;
    }
  }
  swift_retain();
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_17;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v96);
  v16 = v97;
  v15 = v98;
  swift_release();
  outlined init with take of Transform?((uint64_t)v96, (uint64_t)v105);
  if ((v106 & 1) != 0)
  {
    if (one-time initialization token for identity != -1)
      swift_once();
    v17 = xmmword_2551B1060;
  }
  else
  {
    *(_QWORD *)&v17 = v16;
    *((_QWORD *)&v17 + 1) = v15;
  }
  v81 = v17;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v99);
  v20 = v100;
  v21 = v101;
  swift_release();
  outlined init with take of Transform?((uint64_t)v99, (uint64_t)v104);
  if ((v104[48] & 1) != 0)
  {
    v22 = v81;
    if (one-time initialization token for identity != -1)
    {
      swift_once();
      v22 = v81;
    }
    v23 = xmmword_2551B1060;
  }
  else
  {
    *(_QWORD *)&v23 = v20;
    *((_QWORD *)&v23 + 1) = v21;
    v22 = v81;
  }
  v24 = 0;
  while (1)
  {
    v83 = v22;
    v26 = *(float *)((unint64_t)&v83 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    v84 = v23;
    v27 = *(float *)((unint64_t)&v84 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    v25 = v26 == v27;
    if (v24 == 2)
      break;
    while (1)
    {
      ++v24;
      if (v25)
        break;
      if (v24 == 2)
        goto LABEL_31;
      v25 = 0;
    }
  }
  if (v26 == v27)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    v36 = (char *)v1[12];
    v37 = *((_BYTE *)v1 + 104);
    v1[12] = 4;
    *((_BYTE *)v1 + 104) = 1;
    v88 = (uint64_t)v36;
    LOBYTE(v89) = v37;
    __RKEntityAction.state.didset((uint64_t)&v88);
    goto LABEL_37;
  }
LABEL_31:
  if (*((float *)v1 + 30) <= 0.0)
    goto LABEL_36;
  v28 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v28, &v88);
  v29 = (char *)v1[12];
  v30 = *((_BYTE *)v1 + 104);
  v1[12] = 1;
  *((_BYTE *)v1 + 104) = 1;
  v88 = (uint64_t)v29;
  LOBYTE(v89) = v30;
  __RKEntityAction.state.didset((uint64_t)&v88);
  v31 = *(_QWORD *)(v11 + 16);
  RETransformComponentGetComponentType();
  if (!REEntityGetComponentByClass())
    goto LABEL_52;
  RETransformComponentGetLocalPose();
  *((_OWORD *)v1 + 20) = v32;
  *((_OWORD *)v1 + 21) = v33;
  *((_BYTE *)v1 + 352) = 0;
  RERigidBodyComponentGetComponentType();
  v34 = v31;
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    MotionType = RERigidBodyComponentGetMotionType();
    if (MotionType != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
  }
  else
  {
    MotionType = 0;
  }
  if (!REEntityGetSceneNullable()
    || !RESceneGetECSManagerNullable()
    || (ServiceLocator = REECSManagerGetServiceLocator(), !MEMORY[0x22076FD58](ServiceLocator)))
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_38;
  }
  v78 = MotionType;
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  v40 = Entity.rcSceneEntity.getter();
  if (!v40)
  {
LABEL_52:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  v41 = v40;
  v80 = type metadata accessor for Entity();
  swift_allocObject();
  v1[38] = Entity.init()();
  result = swift_release();
  if (!v1[38])
  {
    __break(1u);
    goto LABEL_63;
  }
  v77 = v34;
  swift_retain();
  v42 = swift_retain();
  specialized HasHierarchy.setParent(_:preservingWorldTransform:)(v42, 1);
  swift_release();
  result = swift_release();
  if (!v1[38])
  {
LABEL_63:
    __break(1u);
    return result;
  }
  swift_retain();
  swift_retain();
  *(double *)v43.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v12, v41);
  *(float32x2_t *)&v47 = simd_float4x4.transform(position:)((float32x4_t)0, v43, v44, v45, v46);
  v76 = v47;
  v79 = v41;
  swift_release();
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v102);
  v48 = v102[0];
  v49 = v102[1];
  v75 = v102[2];
  v50 = v102[3];
  swift_release();
  outlined init with take of Transform?((uint64_t)v102, (uint64_t)v103);
  if (v103[48] == 1)
  {
    if (one-time initialization token for identity != -1)
      swift_once();
    v49 = *((_QWORD *)&static Transform.identity + 1);
    v48 = static Transform.identity;
    v50 = *((_QWORD *)&xmmword_2551B1050 + 1);
    v51 = xmmword_2551B1050;
  }
  else
  {
    v51 = v75;
  }
  v107 = v48;
  v108 = v49;
  v109 = v51;
  v110 = v50;
  v111 = v76;
  v112 = 0;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v107);
  swift_release_n();
  v1[37] = specialized HasHierarchy.parent.getter();
  swift_release();
  RETransformComponentGetWorldUnanimatedMatrix4x4F();
  RETransformComponentGetWorldMatrix4x4F();
  v52 = swift_retain();
  specialized HasHierarchy.setParent(_:preservingWorldTransform:)(v52, 0);
  swift_release();
  RETransformComponentSetWorldMatrix4x4F();
  RETransformComponentSetWorldAnimatedMatrix4x4F();
  RENetworkMarkComponentDirty();
  specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v79, 0);
  *(double *)v53.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v12, 0);
  simd_float4x4.transform(position:)((float32x4_t)0, v53, v54, v55, v56);
  *(double *)v57.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v11, 0);
  simd_float4x4.transform(position:)((float32x4_t)0, v57, v58, v59, v60);
  RETransformComponentGetLocalUnanimatedSRT();
  if ((*((_BYTE *)v1 + 145) & 1) != 0)
    _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  REAssetManagerTimelineAssetCreateOrbitAnimation();
  REAnimationClipDefaultParametersEx();
  if ((*((_BYTE *)v1 + 354) & 1) != 0)
  {
    v61 = v93;
    v62 = 1;
  }
  else
  {
    v62 = v94;
    v61 = *((float *)v1 + 30);
  }
  v89 = "Transform.transform";
  v93 = v61;
  v94 = v62;
  v95 = 1;
  if (REAssetManagerTimelineAssetCreateSRTAnimationClipEx())
  {
    v88 = 4;
    LODWORD(v89) = 4096;
    v90 = "ORBIT";
    LOBYTE(v91) = 0;
    v1[35] = REAnimationComponentPlay();
    *((_BYTE *)v1 + 288) = 0;
    RERelease();
  }
  v63 = swift_allocObject();
  swift_weakInit();
  v64 = swift_allocObject();
  *(_QWORD *)(v64 + 16) = v63;
  *(_QWORD *)(v64 + 24) = v77;
  *(_DWORD *)(v64 + 32) = v78;
  *(_BYTE *)(v64 + 36) = ComponentByClass == 0;
  v65 = v1[4];
  v1[4] = (uint64_t)partial apply for specialized closure #1 in __RKEntityOrbitEntityAction.perform(with:);
  v1[5] = v64;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v65);
  v87 = 0;
  v85 = 0u;
  v86 = 0u;
  v66 = swift_allocObject();
  swift_weakInit();
  specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v85, (uint64_t)partial apply for closure #2 in __RKEntityOrbitEntityAction.perform(with:), v66, &v88);
  swift_release();
  outlined destroy of BodyTrackingComponent?((uint64_t)&v85, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v88, (uint64_t)(v1 + 20));
  swift_endAccess();
  *((_QWORD *)&v86 + 1) = v80;
  v87 = &protocol witness table for Entity;
  *(_QWORD *)&v85 = v11;
  v67 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v85, 0, (char **)&v88);
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = partial apply for closure #3 in __RKEntityOrbitEntityAction.perform(with:);
  *(_QWORD *)(v68 + 24) = v67;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  v69 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v70 = type metadata accessor for AnyCancellable();
  v91 = v70;
  *(_QWORD *)&v92 = MEMORY[0x24BDB9B58];
  swift_release();
  v88 = (uint64_t)v69;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v85, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v88, (uint64_t)(v1 + 25));
  swift_endAccess();
  *((_QWORD *)&v86 + 1) = v80;
  v87 = &protocol witness table for Entity;
  *(_QWORD *)&v85 = v11;
  v71 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v85, 0, (char **)&v88);
  v72 = swift_allocObject();
  *(_QWORD *)(v72 + 16) = partial apply for closure #3 in __RKEntityOrbitEntityAction.perform(with:);
  *(_QWORD *)(v72 + 24) = v71;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  v73 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v91 = v70;
  *(_QWORD *)&v92 = MEMORY[0x24BDB9B58];
  swift_release();
  v88 = (uint64_t)v73;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v85, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v88, (uint64_t)(v1 + 30));
  swift_endAccess();
  v88 = (uint64_t)v10;
  v89 = v9;
  v74 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v74, &v88);
  swift_bridgeObjectRelease();
  RERelease();
  swift_release();
  swift_release();
  swift_release();
  return 1;
}

uint64_t specialized HasHierarchy.setParent(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  void *v18;
  uint64_t SceneNullable;
  uint64_t v20;
  id v21;
  float32x4_t v22;
  _OWORD v23[3];
  char v24;

  v3 = v2;
  result = REEntityGetParent();
  if (!result)
  {
    if (!a1)
      return result;
LABEL_11:
    if ((a2 & 1) == 0)
    {
      swift_retain();
      goto LABEL_15;
    }
    v11 = one-time initialization token for identity;
    swift_retain();
    if (v11 == -1)
    {
LABEL_13:
      v22 = (float32x4_t)static simd_quatf.identity;
      specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v3, a1);
      specialized simd_float4x4.init(translation:rotation:scale:)(0.0, v22, 1.0);
      REMakeSRTFromMatrix();
      v23[0] = v12;
      v23[1] = v13;
      v23[2] = v14;
      v24 = 0;
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v23);
      swift_release();
LABEL_15:
      REEntitySetParent();
      if (swift_conformsToProtocol2())
        v15 = v3;
      else
        v15 = 0;
      if (v15)
      {
        swift_beginAccess();
        v16 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v16[2])
          {
            swift_retain();
            v17 = (id)RFServiceManagerGetAnchorManagementService();
            if (v17)
            {
              v18 = v17;
              SceneNullable = REEntityGetSceneNullable();
              if (SceneNullable)
              {
                v20 = SceneNullable;
                v21 = (id)RESceneGetSwiftObject();
                type metadata accessor for Scene();
                if (v21)
                {
                  swift_dynamicCastClassUnconditional();
                }
                else
                {
                  swift_allocObject();
                  Scene.init(coreScene:)(v20);
                }
                swift_release();
                RFAnchorManagementUpdateAnchoringInScene();
              }

            }
            swift_release();
          }
        }
      }
      type metadata accessor for Entity();
      static Entity.updateInteractions(root:)(v3);
      Entity.updateSceneGravityIfNeeded()();
      swift_release();
      return swift_release();
    }
LABEL_36:
    swift_once();
    goto LABEL_13;
  }
  v7 = result;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v8 = swift_dynamicCastClassUnconditional();
    if (!a1)
      goto LABEL_27;
    goto LABEL_10;
  }
  if ((REEntityIsBeingDestroyed() & 1) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  v9 = specialized static Entity.entityInfoType(_:)();
  if (v9)
  {
    v8 = (*(uint64_t (**)(void))(v9 + 232))();
    v10 = *(_QWORD *)(v8 + 16);
    swift_retain();
    MEMORY[0x22076D160](v10, 0);
    *(_QWORD *)(v8 + 16) = v7;
    MEMORY[0x22076D160](v7, v8);
    swift_release();
    if (a1)
      goto LABEL_10;
  }
  else
  {
    v8 = makeEntity(for:)(v7);
    if (a1)
    {
LABEL_10:
      if (*(_QWORD *)(v8 + 16) == *(_QWORD *)(a1 + 16))
        return swift_release();
      goto LABEL_11;
    }
  }
LABEL_27:
  *(_QWORD *)&v23[0] = v8;
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v3, a2 & 1);
  return swift_release();
}

uint64_t specialized closure #1 in __RKEntityOrbitEntityAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    v6 = result + 160;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v6);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v5 + 200, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v5 + 200);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v5 + 240, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v5 + 240);
    swift_endAccess();
    v7 = (_QWORD *)(v5 + 16);
    swift_beginAccess();
    if (*(_QWORD *)(v5 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(_BYTE *)(v5 + 104) == 1) && *(_QWORD *)(v5 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(_QWORD *)(v5 + 280) = 0;
      *(_BYTE *)(v5 + 288) = 1;
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a3 & 0x100000000) == 0 && (_DWORD)a3 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    if (*v7)
    {
      swift_retain();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RETransformComponentGetWorldUnanimatedMatrix4x4F();
        RETransformComponentGetWorldMatrix4x4F();
        if (*v7)
        {
          v8 = *(_QWORD *)(v5 + 296);
          swift_retain();
          swift_retain();
          specialized HasHierarchy.setParent(_:preservingWorldTransform:)(v8, 0);
          swift_release();
          swift_release();
        }
        RETransformComponentSetWorldMatrix4x4F();
        RETransformComponentSetWorldAnimatedMatrix4x4F();
        RENetworkMarkComponentDirty();
        if (*(_QWORD *)(v5 + 304))
        {
          swift_retain();
          specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
          *(_QWORD *)(v5 + 304) = 0;
          swift_release();
          swift_release();
        }
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityOrbitEntityAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[8];
  _BYTE v14[64];
  _QWORD v15[4];
  __int128 v16;
  char v17;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_QWORD *)(result + 304))
    {
      v1 = *(_QWORD *)(result + 112);
      if (v1)
      {
        swift_retain();
        swift_retain();
        v2 = Entity.rcSceneEntity.getter();
        if (v2)
        {
          *(double *)v3.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v1, v2);
          *(float32x2_t *)&v7 = simd_float4x4.transform(position:)((float32x4_t)0, v3, v4, v5, v6);
          v12 = v7;
          swift_retain();
          specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v13);
          v8 = v13[0];
          v9 = v13[1];
          v10 = v13[2];
          v11 = v13[3];
          swift_release();
          outlined init with take of Transform?((uint64_t)v13, (uint64_t)v14);
          if ((v14[48] & 1) != 0)
          {
            if (one-time initialization token for identity != -1)
              swift_once();
            v9 = *((_QWORD *)&static Transform.identity + 1);
            v8 = static Transform.identity;
            v11 = *((_QWORD *)&xmmword_2551B1050 + 1);
            v10 = xmmword_2551B1050;
          }
          v15[0] = v8;
          v15[1] = v9;
          v15[2] = v10;
          v15[3] = v11;
          v16 = v12;
          v17 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v15);
          swift_release();
          swift_release();
          swift_release_n();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in __RKEntityOrbitEntityAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 288) & 1) != 0 || *(_QWORD *)(v1 + 16) != *(_QWORD *)(result + 280))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      v4 = *(_QWORD *)(v3 + 96);
      v5 = *(_BYTE *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 2;
      *(_BYTE *)(v3 + 104) = 1;
      v6 = v4;
      v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntityOrbitEntityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  __n128 *v1;
  uint64_t v3;
  float v4;
  float v5;
  char v6;
  char v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __n128 v14;
  char v15;

  swift_beginAccess();
  v3 = v1[7].n128_i64[0];
  v4 = v1[7].n128_f32[2];
  v5 = v1[7].n128_f32[3];
  v14 = v1[8];
  v6 = v1[9].n128_i8[0];
  v15 = v1[9].n128_i8[1];
  v7 = v1[9].n128_i8[2];
  v8 = v1[9].n128_f32[1];
  v9 = v1[9].n128_f32[2];
  v10 = type metadata accessor for __RKEntityOrbitEntityAction();
  swift_allocObject();
  swift_retain();
  v11 = swift_retain();
  v12 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(v11, v3, v6, &v15, v7, 0, v4, v5, v14, v8, v9);
  result = swift_release();
  a1[3] = v10;
  *a1 = v12;
  return result;
}

uint64_t __RKEntityOrbitEntityAction.clone(matching:newEntity:)(uint64_t a1)
{
  __n128 *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  char v8;
  char v9;
  float v10;
  float v11;
  uint64_t v12;
  __n128 v14;
  uint64_t v15;
  uint64_t v16[4];

  swift_beginAccess();
  v3 = v1[1].n128_u64[0];
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v5 = v1[7].n128_i64[0];
    v6 = v1[7].n128_f32[2];
    v7 = v1[7].n128_f32[3];
    v14 = v1[8];
    v8 = v1[9].n128_i8[0];
    LOBYTE(v16[0]) = v1[9].n128_u8[1];
    v9 = v1[9].n128_i8[2];
    v10 = v1[9].n128_f32[1];
    v11 = v1[9].n128_f32[2];
    type metadata accessor for __RKEntityOrbitEntityAction();
    swift_allocObject();
    swift_retain();
    v12 = swift_retain();
    v4 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(v12, v5, v8, (char *)v16, v9, 0, v6, v7, v14, v10, v11);
    swift_release();
  }
  else
  {
    __RKEntityOrbitEntityAction.copy(with:)(v16);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v15;
    else
      return 0;
  }
  return v4;
}

void __RKEntityOrbitEntityAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityOrbitEntityAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityOrbitEntityAction.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 200, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 240, &demangling cache variable for type metadata for Cancellable?);
  swift_release();
  return swift_release();
}

uint64_t __RKEntityOrbitEntityAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 200, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 240, &demangling cache variable for type metadata for Cancellable?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t __RKEntityOrbitEntityAction.__deallocating_deinit()
{
  __RKEntityOrbitEntityAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(uint64_t a1, uint64_t a2, char a3, char *a4, char a5, char a6, float a7, float a8, __n128 a9, float a10, float a11)
{
  uint64_t v11;
  char v13;

  v13 = *a4;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 208) = 0u;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_BYTE *)(v11 + 288) = 1;
  *(_QWORD *)(v11 + 296) = 0;
  *(_QWORD *)(v11 + 304) = 0;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(_BYTE *)(v11 + 352) = 1;
  *(_WORD *)(v11 + 353) = 0;
  *(_QWORD *)(v11 + 112) = a2;
  *(float *)(v11 + 120) = a7;
  *(float *)(v11 + 124) = a8;
  *(__n128 *)(v11 + 128) = a9;
  *(_BYTE *)(v11 + 144) = a3;
  *(_BYTE *)(v11 + 145) = v13;
  *(float *)(v11 + 148) = a10;
  *(float *)(v11 + 152) = a11;
  *(_BYTE *)(v11 + 146) = a5;
  *(_BYTE *)(v11 + 354) = a6;
  swift_retain();
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t sub_21BBC7E8C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BBC7EB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in __RKEntityOrbitEntityAction.perform(with:)()
{
  uint64_t v0;

  return specialized closure #1 in __RKEntityOrbitEntityAction.perform(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32));
}

uint64_t partial apply for closure #2 in __RKEntityOrbitEntityAction.perform(with:)()
{
  return closure #2 in __RKEntityOrbitEntityAction.perform(with:)();
}

uint64_t partial apply for closure #3 in __RKEntityOrbitEntityAction.perform(with:)(uint64_t *a1)
{
  return closure #3 in __RKEntityOrbitEntityAction.perform(with:)(a1);
}

uint64_t sub_21BBC7F18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for __RKEntityOrbitEntityAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityOrbitEntityAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityOrbitEntityAction.__allocating_init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1024))();
}

void static SpatialAudioComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3010;
}

double SpatialAudioComponent.gain.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void SpatialAudioComponent.gain.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*SpatialAudioComponent.gain.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SpatialAudioComponent.directLevel.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void SpatialAudioComponent.directLevel.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpatialAudioComponent.directLevel.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SpatialAudioComponent.reverbLevel.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void SpatialAudioComponent.reverbLevel.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*SpatialAudioComponent.reverbLevel.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 SpatialAudioComponent.directivity.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 40);
  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 SpatialAudioComponent.directivity.setter(__n128 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*SpatialAudioComponent.directivity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 SpatialAudioComponent.init(gain:directLevel:reverbLevel:directivity:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  unsigned __int8 v5;
  __n128 result;

  v5 = a1[1].n128_u8[0];
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  result = *a1;
  *(__n128 *)(a2 + 24) = *a1;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = 0x3FF0000000000000;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpatialAudioComponent.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BBC8064 + 4 * byte_21BE63B60[*v0]))(1852399975, 0xE400000000000000);
}

uint64_t sub_21BBC8064()
{
  return 0x654C746365726964;
}

uint64_t sub_21BBC8094()
{
  return 0x7669746365726964;
}

unint64_t sub_21BBC80B4()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpatialAudioComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SpatialAudioComponent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialAudioComponent.CodingKeys()
{
  lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialAudioComponent.CodingKeys()
{
  lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Entity.spatialAudio.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

double key path getter for Entity.spatialAudio : Entity@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v5);
  swift_release();
  v2 = v7;
  v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = v2;
  return result;
}

uint64_t key path setter for Entity.spatialAudio : Entity(uint64_t a1)
{
  _BYTE v2[56];

  outlined init with take of SpatialAudioComponent?(a1, (uint64_t)v2);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
  return swift_release();
}

uint64_t Entity.spatialAudio.setter(uint64_t a1)
{
  _BYTE v2[56];

  outlined init with take of SpatialAudioComponent?(a1, (uint64_t)v2);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
  return swift_release();
}

uint64_t outlined init with take of SpatialAudioComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialAudioComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*Entity.spatialAudio.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  char *v3;
  _OWORD *v4;

  v3 = (char *)malloc(0xB0uLL);
  *a1 = v3;
  v4 = v3 + 112;
  *((_QWORD *)v3 + 21) = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    static SpatialAudioComponent.__fromCore(_:)((uint64_t)v4);
  }
  else
  {
    *((_QWORD *)v3 + 18) = 0;
    *v4 = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *(_OWORD *)(v3 + 152) = xmmword_21BE56B80;
  }
  swift_release();
  return Entity.spatialAudio.modify;
}

void Entity.spatialAudio.modify(void **a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = (uint64_t)*a1 + 56;
  v4 = (uint64_t)*a1 + 112;
  if ((a2 & 1) != 0)
    v5 = (uint64_t)v2;
  else
    v5 = v3;
  outlined init with take of SpatialAudioComponent?(v4, v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5);
  swift_release();
  free(v2);
}

uint64_t static SpatialAudioComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  int SourceDirectivityMode;
  uint64_t result;
  float v10;
  float v11;
  float64x2_t v12;
  char v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  RESpatialAudioComponentGetDecibelGain();
  v3 = v2;
  RESpatialAudioComponentGetDirectSendLevel();
  v5 = v4;
  RESpatialAudioComponentGetReverbSendLevel();
  v7 = v6;
  SourceDirectivityMode = RESpatialAudioComponentGetSourceDirectivityMode();
  result = RESpatialAudioComponentGetRolloffFactor();
  v11 = v10;
  v12 = (float64x2_t)xmmword_21BE41200;
  v13 = 2;
  switch(SourceDirectivityMode)
  {
    case 0:
      break;
    case 1:
      result = RESpatialAudioComponentGetDirectivityFocus();
      v13 = 0;
      v12.f64[1] = 0.0;
      v12.f64[0] = v14;
      break;
    case 2:
      goto LABEL_4;
    case 3:
      RESpatialAudioComponentGetDirectivitySphericalCapDiameter();
      v17 = v15;
      result = RESpatialAudioComponentGetDirectivitySphericalCapOpeningAngle();
      v12 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v16, v17));
      v13 = 1;
      break;
    default:
      v13 = 0;
LABEL_4:
      v12 = 0uLL;
      break;
  }
  *(double *)a1 = v3;
  *(double *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = v7;
  *(float64x2_t *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  *(double *)(a1 + 48) = v11;
  return result;
}

__n128 SpatialAudioComponent.init(gain:directLevel:reverbLevel:directivity:distanceAttenuation:)@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  unsigned __int8 v6;
  uint64_t v7;
  __n128 result;

  v6 = a1[1].n128_u8[0];
  v7 = *a2;
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  result = *a1;
  *(__n128 *)(a3 + 24) = *a1;
  *(_BYTE *)(a3 + 40) = v6;
  *(_QWORD *)(a3 + 48) = v7;
  return result;
}

uint64_t SpatialAudioComponent.__toCore(_:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 40);
  RESpatialAudioComponentSetDecibelGain();
  RESpatialAudioComponentSetDirectSendLevel();
  RESpatialAudioComponentSetReverbSendLevel();
  if (v1)
  {
    RESpatialAudioComponentSetSourceDirectivityMode();
    if (v1 == 1)
      RESpatialAudioComponentSetDirectivitySphericalCap();
  }
  else
  {
    RESpatialAudioComponentSetSourceDirectivityMode();
    RESpatialAudioComponentSetDirectivityFocus();
  }
  RESpatialAudioComponentSetRolloffFactor();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance SpatialAudioComponent(_DWORD *a1@<X8>)
{
  *a1 = 3010;
}

void SpatialAudioComponent.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  int v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt v12;
  Swift::UInt64 v13;

  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(unsigned __int8 *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *(_QWORD *)v0;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v1;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v3;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if (!v5)
  {
    Hasher._combine(_:)(0);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v11 = v2;
    else
      v11 = 0;
LABEL_18:
    Hasher._combine(_:)(v11);
    goto LABEL_26;
  }
  if (v5 == 1)
  {
    Hasher._combine(_:)(3uLL);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v10 = v2;
    else
      v10 = 0;
    Hasher._combine(_:)(v10);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v11 = v4;
    else
      v11 = 0;
    goto LABEL_18;
  }
  if (v2 | v4)
    v12 = 2;
  else
    v12 = 1;
  Hasher._combine(_:)(v12);
LABEL_26:
  Hasher._combine(_:)(0);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v13 = v6;
  else
    v13 = 0;
  Hasher._combine(_:)(v13);
}

uint64_t SpatialAudioComponent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialAudioComponent.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 24);
  v17 = *(_QWORD *)(v1 + 32);
  v18 = v8;
  v9 = *(_BYTE *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12 = v9;
  v13 = v5;
  v15 = v17;
  v14 = v18;
  LOBYTE(v19) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v19) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v19 = v14;
  v20 = v15;
  v21 = v12;
  v22 = 3;
  lazy protocol witness table accessor for type Audio.Directivity and conformance Audio.Directivity();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v19 = v10;
  v22 = 4;
  lazy protocol witness table accessor for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v7, v4);
}

Swift::Int SpatialAudioComponent.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  int v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt v13;
  Swift::UInt64 v14;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v1;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v2;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v4;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if (!v6)
  {
    Hasher._combine(_:)(0);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v3;
    else
      v12 = 0;
LABEL_21:
    Hasher._combine(_:)(v12);
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    Hasher._combine(_:)(3uLL);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v11 = v3;
    else
      v11 = 0;
    Hasher._combine(_:)(v11);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v5;
    else
      v12 = 0;
    goto LABEL_21;
  }
  if (v3 | v5)
    v13 = 2;
  else
    v13 = 1;
  Hasher._combine(_:)(v13);
LABEL_26:
  Hasher._combine(_:)(0);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = v7;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  return Hasher._finalize()();
}

uint64_t SpatialAudioComponent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialAudioComponent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v21) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    LOBYTE(v21) = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    v12 = v11;
    LOBYTE(v21) = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    v14 = v13;
    v20 = 3;
    lazy protocol witness table accessor for type Audio.Directivity and conformance Audio.Directivity();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v16 = v21;
    v17 = v22;
    v19 = v23;
    v20 = 4;
    lazy protocol witness table accessor for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = v21;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 32) = v17;
    *(_BYTE *)(a2 + 40) = v19;
    *(_QWORD *)(a2 + 48) = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialAudioComponent()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  int v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt v13;
  Swift::UInt64 v14;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v1;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v2;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v4;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if (!v6)
  {
    Hasher._combine(_:)(0);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v3;
    else
      v12 = 0;
LABEL_21:
    Hasher._combine(_:)(v12);
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    Hasher._combine(_:)(3uLL);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v11 = v3;
    else
      v11 = 0;
    Hasher._combine(_:)(v11);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v5;
    else
      v12 = 0;
    goto LABEL_21;
  }
  if (v3 | v5)
    v13 = 2;
  else
    v13 = 1;
  Hasher._combine(_:)(v13);
LABEL_26:
  Hasher._combine(_:)(0);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = v7;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpatialAudioComponent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SpatialAudioComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpatialAudioComponent(_QWORD *a1)
{
  return SpatialAudioComponent.encode(to:)(a1);
}

double SpatialAudioComponent.distanceAttenuation.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 48) = *a1;
  return result;
}

double SpatialAudioComponent.distanceAttenuation.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 48);
  *a1 = result;
  return result;
}

double (*SpatialAudioComponent.distanceAttenuation.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 48);
  return SpatialAudioComponent.distanceAttenuation.modify;
}

double SpatialAudioComponent.distanceAttenuation.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)a1;
  return result;
}

uint64_t SpatialAudioComponent.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0[1];
  v10 = v0[2];
  v11 = v0[3];
  v12 = v0[4];
  v13 = *((_BYTE *)v0 + 40);
  v14 = v0[6];
  v20 = *v0;
  v8 = v20;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v25 = v13;
  v26 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21BE50910;
  *(_QWORD *)(v15 + 32) = 1852399975;
  *(_QWORD *)(v15 + 40) = 0xE400000000000000;
  v16 = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v15 + 48) = v8;
  *(_QWORD *)(v15 + 72) = v16;
  *(_QWORD *)(v15 + 80) = 0x654C746365726964;
  *(_QWORD *)(v15 + 88) = 0xEB000000006C6576;
  *(_QWORD *)(v15 + 96) = v9;
  *(_QWORD *)(v15 + 120) = v16;
  *(_QWORD *)(v15 + 128) = 0x654C627265766572;
  *(_QWORD *)(v15 + 136) = 0xEB000000006C6576;
  *(_QWORD *)(v15 + 144) = v10;
  *(_QWORD *)(v15 + 168) = v16;
  *(_QWORD *)(v15 + 176) = 0x7669746365726964;
  *(_QWORD *)(v15 + 184) = 0xEB00000000797469;
  *(_QWORD *)(v15 + 192) = v11;
  *(_QWORD *)(v15 + 200) = v12;
  *(_BYTE *)(v15 + 208) = v13;
  *(_QWORD *)(v15 + 216) = &type metadata for Audio.Directivity;
  *(_QWORD *)(v15 + 224) = 0xD000000000000013;
  *(_QWORD *)(v15 + 232) = 0x800000021BE8A4D0;
  *(_QWORD *)(v15 + 264) = &type metadata for Audio.DistanceAttenuation;
  *(_QWORD *)(v15 + 240) = v14;
  v17 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL specialized static SpatialAudioComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  double v5;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;

  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  v5 = *(double *)(a1 + 24);
  v6 = *(double *)(a1 + 48);
  v7 = *(double *)(a2 + 24);
  v8 = *(unsigned __int8 *)(a2 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    result = 0;
    if (*(_BYTE *)(a2 + 40) || v5 != v7)
      return result;
    return v6 == *(double *)(a2 + 48);
  }
  v9 = *(double *)(a1 + 32);
  v10 = *(double *)(a2 + 32);
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    if (v8 != 1)
      return 0;
    if (v5 != v7 || v9 != v10)
      return 0;
    return v6 == *(double *)(a2 + 48);
  }
  if (!(*(_QWORD *)&v5 | *(_QWORD *)&v9))
  {
    result = 0;
    if (v8 != 2 || *(_QWORD *)&v10 | *(_QWORD *)&v7)
      return result;
    return v6 == *(double *)(a2 + 48);
  }
  if (v8 != 2)
    return 0;
  result = 0;
  if (*(_QWORD *)&v7 == 1 && v10 == 0.0)
    return v6 == *(double *)(a2 + 48);
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpatialAudioComponent.CodingKeys, &unk_24DFB50A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpatialAudioComponent.CodingKeys, &unk_24DFB50A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpatialAudioComponent.CodingKeys, &unk_24DFB50A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpatialAudioComponent.CodingKeys, &unk_24DFB50A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity and conformance Audio.Directivity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity;
  if (!lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity, &type metadata for Audio.Directivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity;
  if (!lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity, &type metadata for Audio.Directivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity;
  if (!lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity, &type metadata for Audio.Directivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialAudioComponent and conformance SpatialAudioComponent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialAudioComponent and conformance SpatialAudioComponent;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent and conformance SpatialAudioComponent)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpatialAudioComponent, &type metadata for SpatialAudioComponent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent and conformance SpatialAudioComponent);
  }
  return result;
}

double sub_21BBC9250@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 48);
  *a2 = result;
  return result;
}

double sub_21BBC925C(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 48) = *a1;
  return result;
}

uint64_t getEnumTagSinglePayload for SpatialAudioComponent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialAudioComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialAudioComponent()
{
  return &type metadata for SpatialAudioComponent;
}

uint64_t storeEnumTagSinglePayload for SpatialAudioComponent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BBC935C + 4 * byte_21BE63B6E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BBC9390 + 4 * byte_21BE63B69[v4]))();
}

uint64_t sub_21BBC9390(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBC9398(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBC93A0);
  return result;
}

uint64_t sub_21BBC93AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBC93B4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BBC93B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBC93C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SpatialAudioComponent.CodingKeys()
{
  return &unk_24DFB50A0;
}

uint64_t specialized SpatialAudioComponent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1852399975 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654C746365726964 && a2 == 0xEB000000006C6576
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654C627265766572 && a2 == 0xEB000000006C6576
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7669746365726964 && a2 == 0xEB00000000797469
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000021BE8A4F0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit9__REAssetC_Say0D10Foundation02__F10DescriptorCGs13OpaquePointerVtG_AH_AlI07RESceneH0CtsAE_pTg5(void (*a1)(__int128 *__return_ptr, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _OWORD *i;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v22;
    for (i = (_OWORD *)(a3 + 40); ; i = (_OWORD *)((char *)i + 24))
    {
      v18 = *((_QWORD *)i - 1);
      v19 = *i;
      swift_retain();
      swift_bridgeObjectRetain();
      a1(&v20, &v18, &v17);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      swift_release();
      v10 = v20;
      v11 = v21;
      v22 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        v16 = v20;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v10 = v16;
        v6 = v22;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 24 * v13;
      *(_OWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 48) = v11;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation17RESceneDescriptorCG_AF23SceneResourceLoadResultVs5NeverOTg5(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  _QWORD v25[2];
  __int128 v26;
  char v27;
  uint64_t v28;

  v4 = v3;
  v5 = a3;
  if (a3 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x24BEE4AF8];
    if (!v6)
      return v7;
    v28 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v9 = 0;
    v7 = v28;
    v21 = v5;
    v22 = v5 & 0xC000000000000001;
    while (v6 != v9)
    {
      if (v22)
      {
        v10 = MEMORY[0x220769770](v9, v5);
      }
      else
      {
        v10 = *(_QWORD *)(v5 + 8 * v9 + 32);
        swift_retain();
      }
      v24 = v10;
      a1(v25, &v24);
      if (v4)
      {
        swift_release();
        swift_release();
        return v7;
      }
      v11 = v6;
      swift_release();
      v13 = v25[0];
      v12 = v25[1];
      v14 = v26;
      v15 = v27;
      v28 = v7;
      v17 = *(_QWORD *)(v7 + 16);
      v16 = *(_QWORD *)(v7 + 24);
      if (v17 >= v16 >> 1)
      {
        v20 = v26;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v14 = v20;
        v7 = v28;
      }
      ++v9;
      *(_QWORD *)(v7 + 16) = v17 + 1;
      v18 = v7 + 40 * v17;
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 40) = v12;
      *(_OWORD *)(v18 + 48) = v14;
      *(_BYTE *)(v18 + 64) = v15;
      v6 = v11;
      v19 = v11 == v9;
      v5 = v21;
      v4 = 0;
      if (v19)
        return v7;
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation5Shape33_958D9063BE5145611DD1DCE0DF8621CFLLVyAF20PiecewiseBezierCurveAHLLVGG_AF08ExtrudedF10DescriptorVsAE_pTg5(void (*a1)(_QWORD *__return_ptr, __int128 *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  __int128 *i;
  unint64_t v10;
  unint64_t v11;
  _BYTE __dst[520];
  uint64_t v14;
  __int128 v15;
  _QWORD __src[66];
  uint64_t v17;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v17;
    for (i = (__int128 *)(a3 + 32); ; ++i)
    {
      v15 = *i;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1(__src, &v15, &v14);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      memcpy(__dst, __src, sizeof(__dst));
      v17 = v6;
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v6 = v17;
      }
      *(_QWORD *)(v6 + 16) = v11 + 1;
      memcpy((void *)(v6 + 520 * v11 + 32), __dst, 0x208uLL);
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays13OpaquePointerVG_AGs5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v16;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v14 = *i;
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

void LoadTracer.beginLoad(loadType:logMsgTarget:)(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Trace;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x24BDAC7A8](Trace);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  RESignpostEmitREAssetEntityLoadStartedImpulse();
  v13 = *(_DWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  static DispatchTime.now()();
  *(_DWORD *)a4 = v13;
  *(_BYTE *)(a4 + 4) = a1;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v14 = *(_DWORD *)(v5 + 16);
  v15 = __CFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v5 + 16) = v16;
    if (a1 == 1)
    {
      v17 = 0xEB0000000073756FLL;
      v18 = 0x6E6F7268636E7973;
    }
    else if (a1 == 2)
    {
      v17 = 0xEC00000073756F6ELL;
      v18 = 0x6F7268636E797361;
    }
    else
    {
      v18 = *(_QWORD *)(v5 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg);
      v17 = *(_QWORD *)(v5 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg + 8);
      swift_bridgeObjectRetain();
    }
    outlined init with copy of __RKEntityActionSpecification(a4, (uint64_t)v12, type metadata accessor for LoadTrace);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v29 = v18;
      v22 = v21;
      v23 = swift_slowAlloc();
      v31 = v23;
      *(_DWORD *)v22 = 136315650;
      v25 = *(_QWORD *)(v5 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix);
      v24 = *(_QWORD *)(v5 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix + 8);
      swift_bridgeObjectRetain();
      v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v17, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 22) = 2080;
      v26 = *((_QWORD *)v12 + 3);
      v27 = *((_QWORD *)v12 + 4);
      swift_bridgeObjectRetain();
      v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of __RKEntityActionSpecification((uint64_t)v12, type metadata accessor for LoadTrace);
      _os_log_impl(&dword_21B9AA000, v19, v20, "%sStarted loading %s %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v23, -1, -1);
      MEMORY[0x220772F44](v22, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      outlined destroy of __RKEntityActionSpecification((uint64_t)v12, type metadata accessor for LoadTrace);
    }
  }
}

unint64_t LoadTracer.endLoad(of:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Trace;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t result;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[5];

  v3 = v2;
  Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x24BDAC7A8](Trace);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()();
  v13 = DispatchTime.uptimeNanoseconds.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  result = DispatchTime.uptimeNanoseconds.getter();
  v15 = v13 - result;
  if (v13 < result)
  {
    __break(1u);
  }
  else
  {
    v16 = *(unsigned __int8 *)(a2 + 4);
    if (v16 == 1)
    {
      v17 = 0xEB0000000073756FLL;
      v18 = 0x6E6F7268636E7973;
    }
    else if (v16 == 2)
    {
      v17 = 0xEC00000073756F6ELL;
      v18 = 0x6F7268636E797361;
    }
    else
    {
      v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg);
      v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg + 8);
      swift_bridgeObjectRetain();
    }
    outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v8, type metadata accessor for LoadTrace);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      *(double *)&v21 = (double)v15 / 1000000000.0;
      v22 = swift_slowAlloc();
      v30 = v18;
      v23 = v22;
      v31 = swift_slowAlloc();
      v34[0] = v31;
      *(_DWORD *)v23 = 136315906;
      v32 = a1;
      v24 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix);
      v25 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix + 8);
      swift_bridgeObjectRetain();
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v17, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 22) = 2080;
      v26 = *((_QWORD *)v8 + 3);
      v27 = *((_QWORD *)v8 + 4);
      swift_bridgeObjectRetain();
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for LoadTrace);
      *(_WORD *)(v23 + 32) = 2048;
      v33 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v19, v20, "%sFinished loading %s %s in %fs", (uint8_t *)v23, 0x2Au);
      v28 = v31;
      swift_arrayDestroy();
      MEMORY[0x220772F44](v28, -1, -1);
      MEMORY[0x220772F44](v23, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for LoadTrace);
    }
    RECreateLoadTraceTypeBitFieldSignpostArg();
    REEntityGetLocalId();
    RESignpostEmitREAssetEntityLoadEndedImpulse();
    v29 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v29, (uint64_t)v34);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetService);
    type metadata accessor for __REAssetManager();
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      if (_REAssetManagerIsFullLoadTracingEnabled())
        REEntityAddLoadTraceComponent();
      return swift_release();
    }
  }
  return result;
}

void closure #1 in LoadTracer.subscribe<A>(to:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Trace;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x24BDAC7A8](Trace);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()();
  v12 = DispatchTime.uptimeNanoseconds.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v13 = DispatchTime.uptimeNanoseconds.getter();
  v14 = v12 >= v13;
  v15 = v12 - v13;
  if (v14)
  {
    v16 = *(unsigned __int8 *)(a2 + 4);
    if (v16 == 1)
    {
      v17 = 0xEB0000000073756FLL;
      v18 = 0x6E6F7268636E7973;
    }
    else if (v16 == 2)
    {
      v17 = 0xEC00000073756F6ELL;
      v18 = 0x6F7268636E797361;
    }
    else
    {
      v18 = *(_QWORD *)(a3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg);
      v17 = *(_QWORD *)(a3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg + 8);
      swift_bridgeObjectRetain();
    }
    outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v7, type metadata accessor for LoadTrace);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      *(double *)&v21 = (double)v15 / 1000000000.0;
      v22 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v32 = v30;
      *(_DWORD *)v22 = 136315906;
      v23 = v18;
      v25 = *(_QWORD *)(a3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix);
      v24 = *(_QWORD *)(a3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix + 8);
      swift_bridgeObjectRetain();
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v17, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 22) = 2080;
      v26 = *((_QWORD *)v7 + 3);
      v27 = *((_QWORD *)v7 + 4);
      swift_bridgeObjectRetain();
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of __RKEntityActionSpecification((uint64_t)v7, type metadata accessor for LoadTrace);
      *(_WORD *)(v22 + 32) = 2048;
      v31 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v19, v20, "%sFinished loading %s %s in %fs", (uint8_t *)v22, 0x2Au);
      v28 = v30;
      swift_arrayDestroy();
      MEMORY[0x220772F44](v28, -1, -1);
      MEMORY[0x220772F44](v22, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      outlined destroy of __RKEntityActionSpecification((uint64_t)v7, type metadata accessor for LoadTrace);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t LoadTracer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logger;
  v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t LoadManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t LoadManager.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v2);
  v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE5758], v5);
  static DispatchQoS.unspecified.getter();
  v9 = MEMORY[0x24BEE4AF8];
  v16[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v3, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for LoadTracer(0);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 1;
  *(_QWORD *)(v10 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v9);
  Logger.init(subsystem:category:)();
  v11 = (_QWORD *)(v10 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix);
  *v11 = 0;
  v11[1] = 0xE000000000000000;
  v12 = (_QWORD *)(v10 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg);
  *v12 = 0xD000000000000018;
  v12[1] = 0x800000021BE8A730;
  *(_QWORD *)(v1 + 24) = v10;
  type metadata accessor for __SceneResourceCache();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = specialized __SceneResourceCache.CachedEntries.init()();
  *(_QWORD *)(v13 + 24) = v14;
  *(_QWORD *)(v1 + 32) = v13;
  return v1;
}

Swift::Void __swiftcall Entity.__setLoadContext(_:)(RealityKit::__SceneResourceLoadResultLoadContext_optional a1)
{
  void *v1;
  void *v2;

  if (*(_QWORD *)(a1.value.fileName._countAndFlagsBits + 8))
  {
    swift_bridgeObjectRetain();
    v2 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  }
  else
  {
    v2 = 0;
  }
  swift_beginAccess();
  objc_setAssociatedObject(v1, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v2, (void *)0x301);
  swift_endAccess();
  swift_unknownObjectRelease();
}

RealityKit::__SceneResourceLoadResultLoadContext_optional __swiftcall Entity.__fetchLoadContext()()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  void *v5;
  RealityKit::__SceneResourceLoadResultLoadContext_optional result;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v2 = v0;
  swift_beginAccess();
  v3 = objc_getAssociatedObject(v1, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey);
  swift_endAccess();
  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v9)
  {
    v4 = swift_dynamicCast();
    if ((v4 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v4 = outlined destroy of BodyTrackingComponent?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  *v2 = 0;
  v2[1] = 0;
LABEL_9:
  result.value.fileName._object = v5;
  result.value.fileName._countAndFlagsBits = v4;
  return result;
}

uint64_t Entity.__setSceneResourceCacheEntry(_:)(void *a1)
{
  void *v1;

  swift_beginAccess();
  objc_setAssociatedObject(v1, &static __SceneResourceCache.Entry.cacheEntryForEntityKey, a1, (void *)0x301);
  return swift_endAccess();
}

uint64_t Entity.__fetchSceneResourceCacheEntry()()
{
  void *v0;
  id v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static __SceneResourceCache.Entry.cacheEntryForEntityKey);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Transform?((uint64_t)v4, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v6)
  {
    type metadata accessor for __SceneResourceCache.Entry();
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t type metadata accessor for __SceneResourceCache.Entry()
{
  return objc_opt_self();
}

Swift::Void __swiftcall Entity.setLoadContext(fileName:)(Swift::String fileName)
{
  void *v1;
  void *v2;

  swift_bridgeObjectRetain_n();
  v2 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  swift_beginAccess();
  objc_setAssociatedObject(v1, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v2, (void *)0x301);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t protocol witness for SceneResourceLoadResultBase.cacheHit.getter in conformance UncachedSceneResourceLoadResult()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t protocol witness for SceneResourceLoadResultBase.cacheHit.getter in conformance SceneResourceLoadResult()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t __SceneResourceCache.Entry.activeSceneAssets.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(_BYTE *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _OWORD v46[4];
  _OWORD v47[3];
  __int128 v48;
  char v49;

  v1 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v40 = (uint64_t)&v37 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v37 - v8;
  result = outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v0 + 16, (uint64_t)v47);
  if ((v49 & 1) == 0)
  {
    v46[0] = v47[0];
    v46[1] = v47[1];
    v46[2] = v47[2];
    v46[3] = v48;
    v20 = *((_QWORD *)&v48 + 1);
    if ((*((_QWORD *)&v48 + 1) & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v21 = __CocoaSet.count.getter();
      if (v21)
      {
LABEL_15:
        v45 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray.reserveCapacity(_:)();
        result = specialized Dictionary.startIndex.getter(v20);
        v42 = result;
        v43 = v22;
        v44 = v23 & 1;
        if (v21 < 0)
          goto LABEL_36;
        do
        {
          while (1)
          {
            v29 = v42;
            v30 = v43;
            v31 = v44;
            specialized Dictionary.subscript.getter((uint64_t)v41, v42, v43, v44, v20);
            swift_release();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            result = specialized ContiguousArray._endMutation()();
            if ((v20 & 0xC000000000000001) != 0)
              break;
            v24 = specialized _NativeDictionary.index(after:)(v29, v30, v31, v20);
            v26 = v25;
            v28 = v27;
            outlined consume of [String : AnimationResource].Index._Variant(v29, v30, v31);
            v42 = v24;
            v43 = v26;
            v44 = v28 & 1;
            if (!--v21)
              goto LABEL_23;
          }
          if ((v31 & 1) == 0)
            goto LABEL_37;
          if (__CocoaDictionary.Index.handleBitPattern.getter())
            swift_isUniquelyReferenced_nonNull_native();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAsset : RESceneDescriptor].Index);
          v32 = (void (*)(_BYTE *, _QWORD))Dictionary.Index._asCocoa.modify();
          __CocoaDictionary.formIndex(after:isUnique:)();
          v32(v41, 0);
          --v21;
        }
        while (v21);
LABEL_23:
        outlined consume of [String : AnimationResource].Index._Variant(v42, v43, v44);
        v12 = v45;
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    else
    {
      v21 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 16);
      swift_bridgeObjectRetain();
      if (v21)
        goto LABEL_15;
    }
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x24BEE4AF8];
LABEL_33:
    outlined destroy of __REAssetBundle((uint64_t)v46);
    return v12;
  }
  v11 = *(_QWORD *)&v47[0];
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v46[0] = MEMORY[0x24BEE4AF8];
  v13 = *(_QWORD *)(*(_QWORD *)&v47[0] + 16);
  if (!v13)
  {
    v33 = MEMORY[0x24BEE4AF8];
LABEL_26:
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v33 + 16);
    if (v34)
    {
      *(_QWORD *)&v46[0] = v12;
      specialized ContiguousArray.reserveCapacity(_:)();
      v35 = v33 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v36 = *(_QWORD *)(v2 + 72);
      do
      {
        outlined init with copy of __RKEntityActionSpecification(v35, (uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        swift_retain();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v35 += v36;
        --v34;
      }
      while (v34);
      v12 = *(_QWORD *)&v46[0];
    }
    swift_release();
    return v12;
  }
  v37 = v4;
  v14 = 0;
  v39 = v2;
  v38 = v13;
  while (v14 < *(_QWORD *)(v11 + 16))
  {
    v15 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v16 = *(_QWORD *)(v2 + 72);
    outlined init with copy of __RKEntityActionSpecification(v11 + v15 + v16 * v14, (uint64_t)v9, type metadata accessor for __SceneImportOperation.ImportedScene);
    if (v9[*(int *)(v1 + 28)] == 1)
    {
      v17 = v1;
      outlined init with take of __SceneImportOperation.ImportedScene((uint64_t)v9, v40);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v12 = *(_QWORD *)&v46[0];
      v19 = *(_QWORD *)(*(_QWORD *)&v46[0] + 16);
      v18 = *(_QWORD *)(*(_QWORD *)&v46[0] + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v12 = *(_QWORD *)&v46[0];
      }
      *(_QWORD *)(v12 + 16) = v19 + 1;
      result = outlined init with take of __SceneImportOperation.ImportedScene(v40, v12 + v15 + v19 * v16);
      v1 = v17;
      v2 = v39;
      v13 = v38;
    }
    else
    {
      result = outlined destroy of __RKEntityActionSpecification((uint64_t)v9, type metadata accessor for __SceneImportOperation.ImportedScene);
    }
    if (v13 == ++v14)
    {
      v33 = *(_QWORD *)&v46[0];
      v12 = MEMORY[0x24BEE4AF8];
      v4 = v37;
      goto LABEL_26;
    }
  }
  __break(1u);
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.Entry.attach(toEntity:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t result;
  _BYTE v12[24];

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 24);
  swift_unownedRetainStrong();
  v9 = *(void **)(v8 + 32);
  swift_retain();
  v10 = v9;
  swift_release();
  *v6 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5610], v3);
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    __SceneResourceCache.Entry.registerWithSceneLookupTable()();
    swift_beginAccess();
    objc_setAssociatedObject(a1, &static __SceneResourceCache.Entry.cacheEntryForEntityKey, v1, (void *)0x301);
    swift_endAccess();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __SceneResourceCache.Entry.registerWithSceneLookupTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  uint64_t v21;
  id v22;
  Class isa;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  Class v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  _OWORD v44[4];
  _OWORD v45[4];
  char v46;

  v1 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v41 = (char *)&v37 - v12;
  if (one-time initialization token for shared != -1)
LABEL_25:
    swift_once();
  v13 = (id *)static __RKSceneAssetLookupTable.shared;
  v14 = outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v0 + 16, (uint64_t)v45);
  if ((v46 & 1) != 0)
  {
    v15 = *(_QWORD *)(*(_QWORD *)&v45[0] + 16);
    if (v15)
    {
      v16 = v13;
      v17 = *(int *)(v1 + 24);
      v18 = *(unsigned __int8 *)(v2 + 80);
      v41 = *(char **)&v45[0];
      v19 = *(_QWORD *)&v45[0] + ((v18 + 32) & ~v18);
      v42 = *(char **)(v2 + 72);
      v43 = v17;
      v20 = v16;
      do
      {
        outlined init with copy of __RKEntityActionSpecification(v19, (uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        v21 = *(_QWORD *)&v4[v43];
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v4, v7);
        swift_retain();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        v22 = v20[2];
        isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v22, sel_setObject_forKey_, v21, isa);
        swift_release();

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        v19 += (uint64_t)v42;
        --v15;
      }
      while (v15);
    }
    return swift_bridgeObjectRelease();
  }
  v40 = v13;
  v44[0] = v45[0];
  v44[1] = v45[1];
  v44[2] = v45[2];
  v44[3] = v45[3];
  v25 = *((_QWORD *)&v45[0] + 1);
  MEMORY[0x24BDAC7A8](v14);
  *(&v37 - 2) = (uint64_t)v44;
  swift_bridgeObjectRetain();
  v26 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in __REAssetBundle.getSceneDescriptors()partial apply, (uint64_t)(&v37 - 4), v25);
  swift_bridgeObjectRelease();
  if (!(v26 >> 62))
  {
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = v42;
    if (v27)
      goto LABEL_9;
LABEL_27:
    swift_bridgeObjectRelease();
    return outlined destroy of __REAssetBundle((uint64_t)v44);
  }
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v10 = v42;
  if (!v27)
    goto LABEL_27;
LABEL_9:
  v28 = v8;
  v43 = v26 & 0xC000000000000001;
  v1 = 4;
  v39 = v27;
  v38 = v26;
  while (1)
  {
    v8 = v28;
    v0 = v1 - 4;
    if (v43)
    {
      v2 = MEMORY[0x220769770](v1 - 4, v26);
      v4 = (char *)(v1 - 3);
      if (__OFADD__(v0, 1))
        goto LABEL_24;
    }
    else
    {
      v2 = *(_QWORD *)(v26 + 8 * v1);
      swift_retain();
      v4 = (char *)(v1 - 3);
      if (__OFADD__(v0, 1))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    result = __REAssetBundle.sceneAsset(for:)(v2);
    if (!result)
      break;
    v29 = result;
    RESceneDescriptorGetSceneIdentifier();
    v30 = String.init(cString:)();
    v32 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0)
      v32 = v30 & 0xFFFFFFFFFFFFLL;
    if (v32)
    {
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      v28 = v8;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7) == 1)
      {
        swift_release();
        swift_release();
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        v33 = v41;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v10, v7);
        v34 = v40[2];
        v35 = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v34, sel_setObject_forKey_, v29, v35);
        swift_release();
        swift_release();

        v10 = v42;
        v28 = v8;
        v36 = v33;
        v26 = v38;
        v27 = v39;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v36, v7);
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v28 = v8;
    }
    ++v1;
    if (v4 == (char *)v27)
      goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.Entry.deinit()
{
  uint64_t v0;

  outlined destroy of __SceneResourceCache.Entry.EntryHolder(v0 + 16);
  return v0;
}

uint64_t outlined destroy of __SceneResourceCache.Entry.EntryHolder(uint64_t a1)
{
  destroy for __SceneResourceCache.Entry.EntryHolder(a1);
  return a1;
}

uint64_t __SceneResourceCache.Entry.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of __SceneResourceCache.Entry.EntryHolder(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t static __SceneResourceCache.attachImportedScenesForSceneChangeToEntity(importedScenes:entity:)(uint64_t a1, void *a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a2;
  v3 = (int *)type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  v4 = *((_QWORD *)v3 - 1);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v8 = *((_QWORD *)v7 - 1);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v27 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v26 = *(_QWORD *)(v4 + 72);
    do
    {
      outlined init with copy of __RKEntityActionSpecification(v13, (uint64_t)v6, type metadata accessor for __SceneImportOperation.__ImportedScene);
      v14 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v6, v14);
      v15 = &v6[v3[5]];
      v17 = *(_QWORD *)v15;
      v16 = *((_QWORD *)v15 + 1);
      v18 = *(_QWORD *)&v6[v3[6]];
      LOBYTE(v15) = v6[v3[7]];
      v19 = &v10[v7[5]];
      *(_QWORD *)v19 = v17;
      *((_QWORD *)v19 + 1) = v16;
      *(_QWORD *)&v10[v7[6]] = v18;
      v10[v7[7]] = (char)v15;
      swift_bridgeObjectRetain();
      swift_retain();
      outlined destroy of __RKEntityActionSpecification((uint64_t)v6, type metadata accessor for __SceneImportOperation.__ImportedScene);
      v12 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v27;
      }
      v21 = *(_QWORD *)(v12 + 16);
      v20 = *(_QWORD *)(v12 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v12 = v27;
      }
      *(_QWORD *)(v12 + 16) = v21 + 1;
      outlined init with take of __SceneImportOperation.ImportedScene((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v21);
      v13 += v26;
      --v11;
    }
    while (v11);
  }
  type metadata accessor for __SceneResourceCache.Entry();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v12;
  *(_BYTE *)(v22 + 80) = 1;
  __SceneResourceCache.Entry.attach(toEntity:)(v25);
  return swift_release();
}

id closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  id result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  result = objc_msgSend(a1, sel_objectForKey_);
  v9 = (uint64_t)result;
  if (!result)
  {
    outlined init with copy of __REAssetBundle(a3, (uint64_t)v12);
    type metadata accessor for __SceneResourceCache.Entry();
    v9 = swift_allocObject();
    v10 = v12[1];
    *(_OWORD *)(v9 + 16) = v12[0];
    *(_OWORD *)(v9 + 32) = v10;
    v11 = v12[3];
    *(_OWORD *)(v9 + 48) = v12[2];
    *(_OWORD *)(v9 + 64) = v11;
    *(_BYTE *)(v9 + 80) = 0;
    result = objc_msgSend(a1, sel_setObject_forKey_, v9, a2);
  }
  *a4 = v9;
  return result;
}

id closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:importedScenes:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  id result;
  uint64_t v9;

  result = objc_msgSend(a1, sel_objectForKey_);
  v9 = (uint64_t)result;
  if (!result)
  {
    type metadata accessor for __SceneResourceCache.Entry();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a3;
    *(_BYTE *)(v9 + 80) = 1;
    swift_bridgeObjectRetain();
    result = objc_msgSend(a1, sel_setObject_forKey_, v9, a2);
  }
  *a4 = v9;
  return result;
}

uint64_t static __SceneResourceCache.__init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = specialized __SceneResourceCache.CachedEntries.init()();
  *(_QWORD *)(v0 + 24) = v1;
  return v0;
}

void __SceneResourceCache.findSceneResource(named:bundle:options:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, unint64_t, void **);
  NSURL *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t AssetDescriptorCount;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void (*v66)(char *, void **);
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  void *v78;
  Swift::String v79;
  Swift::String v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  char *v86;
  _QWORD *v87;
  Swift::String v88;
  Swift::String v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t, void **);
  void *v94;
  void *v95;
  id v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, void **);
  uint64_t v100;
  NSURL *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  Swift::String v107;
  __int128 v108;
  void *v109;
  Swift::String v110;
  __int128 v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  char *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  void **v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  Swift::String v164;
  Swift::String v165;
  void *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  Swift::String v187;
  Swift::String v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  void (*v192)(char *, void **);
  uint64_t v193;
  unint64_t v194;
  void (*v195)(char *, char *, void **);
  void **v196;
  uint64_t *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  void *v208;
  id v209;
  void (*v210)(char *, uint64_t, uint64_t, void **);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  void *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  char v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  void *v244;
  uint64_t v245;

  v205 = a4;
  v245 = *MEMORY[0x24BDAC8D0];
  v9 = (void **)type metadata accessor for URL();
  v219 = (uint64_t)*(v9 - 1);
  MEMORY[0x24BDAC7A8](v9);
  v198 = (char *)&v193 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v200 = (char *)&v193 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v201 = (char *)&v193 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v199 = (char *)&v193 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v218 = (char *)&v193 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v19);
  v204 = (char *)&v193 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v214 = (char *)&v193 - v23;
  v24 = (void *)MEMORY[0x220768C3C](0x7974696C616572, 0xE700000000000000, v22);
  v208 = a3;
  v25 = objc_msgSend(a3, sel_URLsForResourcesWithExtension_subdirectory_, v24, 0);

  if (!v25)
  {
    *(_QWORD *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return;
  }
  v197 = (uint64_t *)a5;
  v213 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v224 = a2;
  v225 = a1;
  v26 = (void *)MEMORY[0x220768C3C](a1, a2);
  v27 = objc_msgSend(v26, sel_pathExtension);

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  if (v28 == 0x7974696C616572 && v30 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
  }
  v31 = v224;
  swift_bridgeObjectRetain();
  v32 = String.count.getter();
  v33 = __OFADD__(v32, 1);
  v34 = v32 + 1;
  if (v33)
    goto LABEL_141;
  v35 = specialized BidirectionalCollection.dropLast(_:)(v34);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  swift_bridgeObjectRelease();
  v42 = MEMORY[0x220768CFC](v35, v37, v39, v41);
  v224 = v43;
  v225 = v42;
  swift_bridgeObjectRelease();
LABEL_10:
  v44 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v44 + 120, (uint64_t)&v239);
  v45 = v241;
  v46 = v242;
  __swift_project_boxed_opaque_existential_1(&v239, v241);
  v47 = *(uint64_t (**)(uint64_t, uint64_t))(v46 + 32);
  v202 = v44;
  swift_retain();
  v215 = v47(v45, v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v239);
  v48 = v213;
  v203 = *(_QWORD *)(v213 + 16);
  if (!v203)
  {
    v93 = *(void (**)(char *, uint64_t, uint64_t, void **))(v219 + 56);
    v209 = 0;
    v210 = v93;
    v50 = v214;
LABEL_75:
    v210(v50, 1, 1, v9);
LABEL_76:
    swift_bridgeObjectRelease();
    v94 = (void *)MEMORY[0x220768C3C](v225, v224);
    v95 = (void *)MEMORY[0x220768C3C](0x7974696C616572, 0xE700000000000000);
    v96 = objc_msgSend(v208, sel_URLForResource_withExtension_subdirectory_, v94, v95, 0);

    if (v96)
    {
      v97 = v200;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v98 = v219;
      v99 = *(void (**)(char *, char *, void **))(v219 + 32);
      v100 = (uint64_t)v204;
      v99(v204, v97, v9);
      v210((char *)v100, 0, 1, v9);
      if ((*(unsigned int (**)(uint64_t, uint64_t, void **))(v98 + 48))(v100, 1, v9) != 1)
      {
        v99(v201, (char *)v100, v9);
        v244 = 0;
        URL._bridgeToObjectiveC()(v101);
        v103 = v102;
        v104 = RERealityFileMountFileAtURL();

        if (v104)
        {
          v105 = RERealityFileGetCertifiedFreeOfChangeSceneActions();
          v106 = v224;
          if (v105)
          {
            outlined init with copy of __REAssetBundle.LoadOptions(v205, (uint64_t)&v239);
            outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v243, *((unint64_t *)&v243 + 1));
            v243 = xmmword_21BE56B70;
            *(_QWORD *)&v226 = v225;
            *((_QWORD *)&v226 + 1) = v106;
            swift_bridgeObjectRetain();
            v107._countAndFlagsBits = 46;
            v107._object = (void *)0xE100000000000000;
            String.append(_:)(v107);
            v108 = v226;
            v109 = v208;
            swift_bridgeObjectRelease();
            v226 = v108;
            swift_bridgeObjectRetain();
            v110._countAndFlagsBits = 0x7974696C616572;
            v110._object = (void *)0xE700000000000000;
            String.append(_:)(v110);
            swift_bridgeObjectRelease();
            v111 = v226;
            v112 = specialized static __ServiceLocator.shared.getter();
            outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)&v239, (uint64_t)&v226);
            swift_retain();
            v113 = v216;
            __REAssetBundle.init(bundle:entryName:serviceLocator:_:)(v109, v111, *((void **)&v111 + 1), v112, (uint64_t)&v226, (uint64_t *)&v235);
            if (!v113)
            {
              v216 = 0;
              v31 = *((_QWORD *)&v235 + 1);
              v28 = v219;
              if (*((_QWORD *)&v235 + 1) >> 62)
                goto LABEL_143;
              v114 = *(_QWORD *)((*((_QWORD *)&v235 + 1) & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v114)
                goto LABEL_83;
LABEL_144:
              swift_bridgeObjectRelease();
              outlined destroy of __REAssetBundle((uint64_t)&v235);
              outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
              goto LABEL_145;
            }
LABEL_117:
            outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
            RERealityFileUnmount();
            swift_release();

            (*(void (**)(char *, void **))(v219 + 8))(v201, v9);
            return;
          }
          outlined init with copy of __REAssetBundle.LoadOptions(v205, (uint64_t)&v239);
          outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v243, *((unint64_t *)&v243 + 1));
          v243 = 0uLL;
          *(_QWORD *)&v226 = v225;
          *((_QWORD *)&v226 + 1) = v106;
          swift_bridgeObjectRetain();
          v164._countAndFlagsBits = 46;
          v164._object = (void *)0xE100000000000000;
          String.append(_:)(v164);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v165._countAndFlagsBits = 0x7974696C616572;
          v165._object = (void *)0xE700000000000000;
          String.append(_:)(v165);
          swift_bridgeObjectRelease();
          v166 = v216;
          v167 = __SceneResourceCache.loadAssetBundle(bundle:entryName:options:)(v208, (void *)v226, *((void **)&v226 + 1), (uint64_t)&v239);
          if (v166)
          {
            swift_bridgeObjectRelease();
            goto LABEL_117;
          }
          v28 = v167;
          swift_bridgeObjectRelease();
          outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v28 + 16, (uint64_t)&v226);
          if (v230 == 1)
          {
            outlined destroy of __SceneResourceCache.Entry.EntryHolder((uint64_t)&v226);
            v231 = 0u;
            v232 = 0u;
            v233 = 0u;
            v234 = 0u;
          }
          else
          {
            v231 = v226;
            v232 = v227;
            v233 = v228;
            v234 = v229;
            if ((_QWORD)v226)
            {
              v216 = 0;
              v235 = v231;
              v236 = v232;
              v237 = v233;
              v238 = v234;
              v31 = *((_QWORD *)&v231 + 1);
              if (*((_QWORD *)&v231 + 1) >> 62)
                goto LABEL_148;
              v177 = *(_QWORD *)((*((_QWORD *)&v231 + 1) & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v177)
                goto LABEL_128;
LABEL_149:
              swift_bridgeObjectRelease();
              outlined destroy of __REAssetBundle((uint64_t)&v235);
              swift_release();
              goto LABEL_133;
            }
          }
          swift_release();
          outlined destroy of BodyTrackingComponent?((uint64_t)&v231, &demangling cache variable for type metadata for __REAssetBundle?);
LABEL_133:
          outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
          v28 = v219;
LABEL_145:
          RERealityFileUnmount();
          (*(void (**)(char *, void **))(v28 + 8))(v201, v9);
          goto LABEL_89;
        }
        swift_bridgeObjectRelease();
        v146 = v244;
        v147 = v216;
        specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(v244);
        if (v147)
        {
          (*(void (**)(char *, void **))(v98 + 8))(v201, v9);

          goto LABEL_91;
        }
        if (v146)
        {
          type metadata accessor for CFErrorRef(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
          v173 = v219;
          v174 = swift_allocError();
          *v175 = v146;
          v176 = v198;
          (*(void (**)(char *, char *, void **))(v173 + 16))(v198, v201, v9);
          if (v174)
          {
LABEL_136:
            v192 = *(void (**)(char *, void **))(v173 + 8);
            v192(v176, v9);
            swift_willThrow();
            swift_release();

            v192(v201, v9);
            return;
          }
        }
        else
        {
          v176 = v198;
          (*(void (**)(char *, char *, void **))(v98 + 16))(v198, v201, v9);
        }
        v239 = 0;
        v240 = 0xE000000000000000;
        _StringGuts.grow(_:)(34);
        swift_bridgeObjectRelease();
        v239 = 0xD00000000000001FLL;
        v240 = 0x800000021BE8A6C0;
        v187._countAndFlagsBits = URL.path.getter();
        String.append(_:)(v187);
        swift_bridgeObjectRelease();
        v188._countAndFlagsBits = 46;
        v188._object = (void *)0xE100000000000000;
        String.append(_:)(v188);
        v189 = v239;
        v190 = v240;
        lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
        swift_allocError();
        *(_QWORD *)v191 = v189;
        *(_QWORD *)(v191 + 8) = v190;
        v173 = v219;
        *(_BYTE *)(v191 + 16) = 3;
        goto LABEL_136;
      }
    }
    else
    {
      v100 = (uint64_t)v204;
      v210(v204, 1, 1, v9);
    }
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?(v100, &demangling cache variable for type metadata for URL?);
LABEL_89:
    v123 = v197;
    if (!v209)
    {
      swift_release();
      v123[4] = 0;
      *(_OWORD *)v123 = 0u;
      *((_OWORD *)v123 + 1) = 0u;
      return;
    }
    swift_willThrow();
LABEL_91:
    swift_release();
    return;
  }
  v209 = 0;
  v49 = 0;
  v28 = (uint64_t)v218;
  v31 = v219;
  v206 = v213 + ((*(unsigned __int8 *)(v219 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80));
  v194 = 0x800000021BE8A6C0;
  v50 = v214;
  while (1)
  {
    if (v49 >= *(_QWORD *)(v48 + 16))
      goto LABEL_139;
    v51 = *(_QWORD *)(v31 + 72);
    v207 = v49;
    v52 = *(void (**)(char *, unint64_t, void **))(v31 + 16);
    v52(v50, v206 + v51 * v49, v9);
    v210 = *(void (**)(char *, uint64_t, uint64_t, void **))(v31 + 56);
    v210(v50, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, void **))(v31 + 48))(v50, 1, v9) == 1)
      goto LABEL_76;
    (*(void (**)(uint64_t, char *, void **))(v31 + 32))(v28, v50, v9);
    *(_QWORD *)&v226 = 0;
    URL._bridgeToObjectiveC()(v53);
    v31 = v54;
    v55 = RERealityFileMountFileAtURL();

    if (!v55)
    {
      v63 = v226;
      v64 = v216;
      specialized static __REAssetBundle.checkForUnsupportedVersion(_:)((void *)v226);
      if (v64)
      {
        v65 = v64;
        v66 = *(void (**)(char *, void **))(v219 + 8);
LABEL_68:
        v216 = 0;
        v66(v218, v9);
        v48 = v213;
        v50 = v214;
        if (v209)

        else
          v209 = v65;
        v28 = (uint64_t)v218;
        v31 = v219;
        goto LABEL_72;
      }
      v86 = v199;
      if (v63)
      {
        type metadata accessor for CFErrorRef(0);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
        v65 = (void *)swift_allocError();
        *v87 = v63;
        v52(v86, (unint64_t)v218, v9);
        if (v65)
        {
LABEL_67:
          v66 = *(void (**)(char *, void **))(v219 + 8);
          v66(v86, v9);
          swift_willThrow();
          goto LABEL_68;
        }
      }
      else
      {
        v52(v199, (unint64_t)v218, v9);
      }
      v239 = 0;
      v240 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v239 = 0xD00000000000001FLL;
      v240 = v194;
      v88._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      v89._countAndFlagsBits = 46;
      v89._object = (void *)0xE100000000000000;
      String.append(_:)(v89);
      v90 = v239;
      v91 = v240;
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      v65 = (void *)swift_allocError();
      *(_QWORD *)v92 = v90;
      *(_QWORD *)(v92 + 8) = v91;
      *(_BYTE *)(v92 + 16) = 3;
      goto LABEL_67;
    }
    AssetDescriptorCount = RERealityFileGetAssetDescriptorCount();
    if (AssetDescriptorCount < 0)
      goto LABEL_140;
    v57 = AssetDescriptorCount;
    v195 = (void (*)(char *, char *, void **))v52;
    if (AssetDescriptorCount)
    {
      v58 = 0;
      v28 = MEMORY[0x24BEE4AF8];
      do
      {
        if (RERealityFileGetAssetDescriptorAtIndex())
        {
          v59 = RERealityFileAssetDescriptorAsSceneDescriptor();
          if (v59)
          {
            v60 = v59;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v28 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, (_QWORD *)v28);
            v62 = *(_QWORD *)(v28 + 16);
            v61 = *(_QWORD *)(v28 + 24);
            if (v62 >= v61 >> 1)
              v28 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v62 + 1, 1, (_QWORD *)v28);
            *(_QWORD *)(v28 + 16) = v62 + 1;
            *(_QWORD *)(v28 + 8 * v62 + 32) = v60;
          }
        }
        ++v58;
      }
      while (v57 != v58);
    }
    else
    {
      v28 = MEMORY[0x24BEE4AF8];
    }
    v211 = *(_QWORD *)(v28 + 16);
    if (v211)
      break;
LABEL_61:
    swift_bridgeObjectRelease();
    RERealityFileUnmount();
    v28 = (uint64_t)v218;
    v31 = v219;
    (*(void (**)(char *, void **))(v219 + 8))(v218, v9);
    v48 = v213;
    v50 = v214;
LABEL_72:
    v49 = v207 + 1;
    if (v207 + 1 == v203)
      goto LABEL_75;
  }
  v67 = 0;
  v212 = v28 + 32;
  v31 = v224;
  v220 = v55;
  v196 = v9;
  while (1)
  {
    if (v67 >= *(_QWORD *)(v28 + 16))
      goto LABEL_138;
    v68 = *(_QWORD *)(v212 + 8 * v67);
    if (RESceneDescriptorGetSceneName())
    {
      v69 = String.init(cString:)();
      v71 = v70;
    }
    else
    {
      v69 = 0;
      v71 = 0xE000000000000000;
    }
    if (v69 == v225 && v71 == v31)
    {
      v69 = v225;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71 = v31;
      goto LABEL_98;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_98;
    }
    v217 = v67;
    if (one-time initialization token for usdExtensions != -1)
      swift_once();
    v72 = (_QWORD *)static LoadUtilities.usdExtensions;
    v222 = *(_QWORD *)(static LoadUtilities.usdExtensions + 16);
    if (v222)
      break;
    swift_bridgeObjectRelease();
LABEL_32:
    v67 = v217 + 1;
    if (v217 + 1 == v211)
      goto LABEL_61;
  }
  v221 = v71;
  v223 = v69;
  v74 = *(_QWORD *)(static LoadUtilities.usdExtensions + 32);
  v73 = *(void **)(static LoadUtilities.usdExtensions + 40);
  v239 = v225;
  v240 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75._countAndFlagsBits = 46;
  v75._object = (void *)0xE100000000000000;
  String.append(_:)(v75);
  swift_bridgeObjectRetain();
  v76._countAndFlagsBits = v74;
  v71 = v221;
  v76._object = v73;
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  v69 = v223;
  swift_bridgeObjectRelease();
  v31 = v240;
  if (v69 == v239 && v71 == v240 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_97;
  swift_bridgeObjectRelease();
  if (v222 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v224;
    goto LABEL_32;
  }
  if (v72[2] < 2uLL)
    goto LABEL_142;
  v77 = v72[6];
  v78 = (void *)v72[7];
  v239 = v225;
  v240 = v224;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79._countAndFlagsBits = 46;
  v79._object = (void *)0xE100000000000000;
  String.append(_:)(v79);
  swift_bridgeObjectRetain();
  v80._countAndFlagsBits = v77;
  v69 = v223;
  v80._object = v78;
  String.append(_:)(v80);
  v71 = v221;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 != v239 || v71 != v240) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (v222 == 2)
    {
      v31 = v224;
LABEL_60:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v196;
      goto LABEL_32;
    }
    v193 = v68;
    v9 = (void **)(v72 + 9);
    v81 = 2;
    v31 = v224;
    while (v81 < v72[2])
    {
      v83 = (uint64_t)*(v9 - 1);
      v82 = *v9;
      v239 = v225;
      v240 = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v84._countAndFlagsBits = 46;
      v84._object = (void *)0xE100000000000000;
      String.append(_:)(v84);
      swift_bridgeObjectRetain();
      v85._countAndFlagsBits = v83;
      v85._object = v82;
      String.append(_:)(v85);
      v71 = v221;
      swift_bridgeObjectRelease();
      v69 = v223;
      swift_bridgeObjectRelease();
      if (v69 == v239 && v71 == v240)
      {
        v9 = v196;
        v68 = v193;
        goto LABEL_97;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v9 = v196;
        v68 = v193;
        goto LABEL_97;
      }
      ++v81;
      swift_bridgeObjectRelease();
      v9 += 2;
      v31 = v224;
      if (v222 == v81)
        goto LABEL_60;
    }
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_144;
LABEL_83:
    if ((v31 & 0xC000000000000001) != 0)
    {
      v115 = MEMORY[0x220769770](0, v31);
LABEL_86:
      swift_bridgeObjectRelease();
      swift_retain();
      v116 = v201;
      v225 = URL.lastPathComponent.getter();
      v118 = v117;
      v119 = *(_QWORD *)(v115 + 16);
      RERetain();
      type metadata accessor for __SceneResource();
      v120 = swift_allocObject();
      *(_QWORD *)(v120 + 16) = v119;
      swift_release();
      v121 = v197;
      v197[3] = (uint64_t)&type metadata for UncachedSceneResourceLoadResult;
      v121[4] = (uint64_t)&protocol witness table for UncachedSceneResourceLoadResult;
      v122 = swift_allocObject();
      *v121 = v122;
      swift_release();
      *(_QWORD *)(v122 + 16) = v120;
      *(_BYTE *)(v122 + 24) = 0;
      *(_QWORD *)(v122 + 32) = v225;
      *(_QWORD *)(v122 + 40) = v118;
      outlined destroy of __REAssetBundle((uint64_t)&v235);
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
LABEL_105:
      RERealityFileUnmount();
      swift_release();

      (*(void (**)(char *, void **))(v219 + 8))(v116, v9);
      return;
    }
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v115 = *(_QWORD *)(v31 + 32);
      swift_retain();
      goto LABEL_86;
    }
    __break(1u);
LABEL_148:
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_149;
LABEL_128:
    v196 = v9;
    if ((v31 & 0xC000000000000001) != 0)
    {
      v178 = MEMORY[0x220769770](0, v31);
    }
    else
    {
      if (!*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      v178 = *(_QWORD *)(v31 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    v179 = v201;
    v225 = URL.lastPathComponent.getter();
    v181 = v180;
    v182 = v197;
    v197[3] = (uint64_t)&type metadata for SceneResourceLoadResult;
    v182[4] = (uint64_t)&protocol witness table for SceneResourceLoadResult;
    v183 = swift_allocObject();
    *v182 = v183;
    v184 = *(_QWORD *)(v178 + 16);
    RERetain();
    type metadata accessor for __SceneResource();
    v185 = swift_allocObject();
    *(_QWORD *)(v185 + 16) = v184;
    swift_release();
    v186 = v225;
    *(_QWORD *)(v183 + 16) = v185;
    *(_QWORD *)(v183 + 24) = v186;
    *(_QWORD *)(v183 + 32) = v181;
    *(_QWORD *)(v183 + 40) = v28;
    *(_BYTE *)(v183 + 48) = 0;
    outlined destroy of __REAssetBundle((uint64_t)&v235);
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
    RERealityFileUnmount();
    swift_release();

    (*(void (**)(char *, void **))(v219 + 8))(v179, v196);
    return;
  }
LABEL_97:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v224;
LABEL_98:
  v223 = v69;
  RERetain();
  type metadata accessor for RESceneDescriptor();
  v124 = swift_allocObject();
  *(_QWORD *)(v124 + 16) = v68;
  if (!RERealityFileGetCertifiedFreeOfChangeSceneActions())
  {
    swift_bridgeObjectRelease();
    outlined init with copy of __REAssetBundle.LoadOptions(v205, (uint64_t)&v239);
    outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v243, *((unint64_t *)&v243 + 1));
    v243 = 0uLL;
    v132 = v218;
    v133 = (void *)URL.lastPathComponent.getter();
    v134 = v216;
    v136 = __SceneResourceCache.loadAssetBundle(bundle:entryName:options:)(v208, v133, v135, (uint64_t)&v239);
    if (v134)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
      RERealityFileUnmount();
      swift_release();

      (*(void (**)(char *, void **))(v219 + 8))(v132, v9);
      return;
    }
    v145 = v136;
    swift_bridgeObjectRelease();
    outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v145 + 16, (uint64_t)&v226);
    if (v230 == 1)
    {
      outlined destroy of __SceneResourceCache.Entry.EntryHolder((uint64_t)&v226);
      v231 = 0u;
      v232 = 0u;
      v233 = 0u;
      v234 = 0u;
    }
    else
    {
      v231 = v226;
      v232 = v227;
      v233 = v228;
      v234 = v229;
      if ((_QWORD)v226)
      {
        v216 = 0;
        v235 = v231;
        v236 = v232;
        v237 = v233;
        v238 = v234;
        v148 = __REAssetBundle.sceneAsset(for:)(v124);
        if (v148)
        {
          v149 = v148;
          swift_bridgeObjectRelease();
          v150 = v218;
          v151 = URL.lastPathComponent.getter();
          v224 = v152;
          v225 = v151;
          v153 = v197;
          v197[3] = (uint64_t)&type metadata for SceneResourceLoadResult;
          v153[4] = (uint64_t)&protocol witness table for SceneResourceLoadResult;
          v154 = swift_allocObject();
          *v153 = v154;
          v155 = *(_QWORD *)(v149 + 16);
          RERetain();
          type metadata accessor for __SceneResource();
          v156 = v9;
          v157 = swift_allocObject();
          *(_QWORD *)(v157 + 16) = v155;
          swift_release();
          swift_release();
          v158 = v225;
          *(_QWORD *)(v154 + 16) = v157;
          *(_QWORD *)(v154 + 24) = v158;
          *(_QWORD *)(v154 + 32) = v224;
          *(_QWORD *)(v154 + 40) = v145;
          *(_BYTE *)(v154 + 48) = 1;
          outlined destroy of __REAssetBundle((uint64_t)&v235);
          outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
          RERealityFileUnmount();
          swift_release();

          (*(void (**)(char *, void **))(v219 + 8))(v150, v156);
          return;
        }
        outlined destroy of __REAssetBundle((uint64_t)&v235);
        goto LABEL_114;
      }
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)&v231, &demangling cache variable for type metadata for __REAssetBundle?);
LABEL_114:
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    v160 = v159;
    v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    v162 = (char *)v160 + *(int *)(v161 + 48);
    *v160 = v223;
    v160[1] = v71;
    v163 = v218;
    v195(v162, v218, v9);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v160, 0, 2, v161);
    swift_willThrow();
    swift_release();
    swift_release();
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
    RERealityFileUnmount();
    swift_release();

    (*(void (**)(char *, void **))(v219 + 8))(v163, v9);
    return;
  }
  outlined init with copy of __REAssetBundle.LoadOptions(v205, (uint64_t)&v239);
  outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v243, *((unint64_t *)&v243 + 1));
  *(_QWORD *)&v243 = v225;
  *((_QWORD *)&v243 + 1) = v31;
  v125 = v208;
  v126 = v218;
  v127 = URL.lastPathComponent.getter();
  v129 = v128;
  v130 = specialized static __ServiceLocator.shared.getter();
  outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)&v239, (uint64_t)&v226);
  swift_retain();
  v131 = v216;
  __REAssetBundle.init(bundle:entryName:serviceLocator:_:)(v125, v127, v129, v130, (uint64_t)&v226, (uint64_t *)&v235);
  if (v131)
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
    RERealityFileUnmount();
    swift_release();

    (*(void (**)(char *, void **))(v219 + 8))(v126, v9);
    return;
  }
  v216 = 0;
  v137 = __REAssetBundle.sceneAsset(for:)(v124);
  if (v137)
  {
    v138 = v137;
    swift_bridgeObjectRelease();
    swift_retain();
    v116 = v218;
    v225 = URL.lastPathComponent.getter();
    v140 = v139;
    v141 = *(_QWORD *)(v138 + 16);
    RERetain();
    type metadata accessor for __SceneResource();
    v142 = swift_allocObject();
    *(_QWORD *)(v142 + 16) = v141;
    swift_release();
    v143 = v197;
    v197[3] = (uint64_t)&type metadata for UncachedSceneResourceLoadResult;
    v143[4] = (uint64_t)&protocol witness table for UncachedSceneResourceLoadResult;
    v144 = swift_allocObject();
    *v143 = v144;
    swift_release();
    swift_release();
    *(_QWORD *)(v144 + 16) = v142;
    *(_BYTE *)(v144 + 24) = 0;
    *(_QWORD *)(v144 + 32) = v225;
    *(_QWORD *)(v144 + 40) = v140;
    outlined destroy of __REAssetBundle((uint64_t)&v235);
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
    goto LABEL_105;
  }
  type metadata accessor for SceneResourceLoadResult.InternalError(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
  swift_allocError();
  v169 = v168;
  v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  v171 = (char *)v169 + *(int *)(v170 + 48);
  *v169 = v223;
  v169[1] = v71;
  v172 = v218;
  v195(v171, v218, v9);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v170 - 8) + 56))(v169, 0, 2, v170);
  swift_willThrow();
  swift_release();
  outlined destroy of __REAssetBundle((uint64_t)&v235);
  outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v239);
  RERealityFileUnmount();
  swift_release();

  (*(void (**)(char *, void **))(v219 + 8))(v172, v9);
}

uint64_t __SceneResourceCache.loadAssetBundle(bundle:entryName:options:)(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t result;
  NSURL *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t *v32;
  uint64_t *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  _QWORD v46[16];
  uint64_t v47[9];
  uint64_t *v48;

  v5 = v4;
  v43 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v41 - v18;
  v45 = a2;
  v20 = (void *)MEMORY[0x220768C3C](a2, a3, v17);
  v44 = a1;
  v21 = objc_msgSend(a1, sel_URLForResource_withExtension_subdirectory_, v20, 0, 0);

  if (v21)
  {
    v42 = a3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v11, v15, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
    if ((_DWORD)result != 1)
    {
      v22(v19, v11, v12);
      URL._bridgeToObjectiveC()(v24);
      v26 = v25;
      v27 = *(void **)(v5 + 24);
      MEMORY[0x24BDAC7A8](v25);
      *(&v41 - 4) = (uint64_t)v28;
      *(&v41 - 3) = (uint64_t)v27;
      *(&v41 - 2) = v29;
      v30 = v28;
      v31 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneResourceCache.Entry?);
      v32 = v48;
      OS_dispatch_queue.sync<A>(execute:)();
      v33 = v32;

      v34 = (void *)v46[0];
      if (!v46[0])
      {
        v35 = specialized static __ServiceLocator.shared.getter();
        outlined init with copy of __REAssetBundle.LoadOptions(v43, (uint64_t)v46);
        swift_retain_n();
        v36 = v44;
        v34 = v42;
        swift_bridgeObjectRetain();
        v37 = __REAssetBundle.init(bundle:entryName:serviceLocator:_:)(v36, (uint64_t)v45, v34, v35, (uint64_t)v46, v47);
        if (v33)
        {
          swift_release();

          (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
          return (uint64_t)v34;
        }
        v48 = &v41;
        v38 = *(void **)(v5 + 16);
        v39 = *(void **)(v5 + 24);
        MEMORY[0x24BDAC7A8](v37);
        *(&v41 - 4) = (uint64_t)v38;
        *(&v41 - 3) = (uint64_t)v39;
        *(&v41 - 2) = (uint64_t)v26;
        *(&v41 - 1) = (uint64_t)v47;
        v44 = (id)type metadata accessor for __SceneResourceCache.Entry();
        v45 = v38;
        v40 = v39;
        OS_dispatch_queue.sync<A>(execute:)();
        swift_release();

        v34 = (void *)v46[0];
        outlined destroy of __REAssetBundle((uint64_t)v47);
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);

      return (uint64_t)v34;
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  NSURL *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  Swift::String v66;
  Swift::String v67;
  __int128 v68;
  uint64_t v69;
  uint64_t result;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char v104;
  _OWORD v105[4];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  void *v110;
  _BYTE v111[104];
  uint64_t v112;
  unint64_t v113;
  _OWORD v114[4];
  uint64_t v115;

  v6 = v5;
  v95 = a2;
  v98 = a3;
  v93 = a5;
  v115 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for URL();
  v96 = *(_QWORD *)(v9 - 8);
  v97 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v92 - v13;
  memset(v114, 0, sizeof(v114));
  outlined init with copy of __REAssetBundle.LoadOptions(a4, (uint64_t)v111);
  v15 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v15 + 120, (uint64_t)&v100);
  v16 = *((_QWORD *)&v101 + 1);
  v17 = v102;
  __swift_project_boxed_opaque_existential_1(&v100, *((uint64_t *)&v101 + 1));
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 32);
  v99 = v15;
  swift_retain();
  v19 = v16;
  v20 = a1;
  v18(v19, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
  v110 = 0;
  URL._bridgeToObjectiveC()(v21);
  v23 = v22;
  v24 = RERealityFileMountFileAtURL();

  if (!v24)
  {
    v32 = v110;
    specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(v110);
    if (v6)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v114, &demangling cache variable for type metadata for __REAssetBundle?);
      swift_release();
      return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v111);
    }
    if (v32)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v34 = swift_allocError();
      *v35 = v32;
      v37 = v96;
      v36 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v11, v20, v97);
      if (v34)
      {
LABEL_38:
        (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v36);
        swift_willThrow();
        goto LABEL_39;
      }
    }
    else
    {
      v37 = v96;
      v36 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v11, v20, v97);
    }
    *(_QWORD *)&v100 = 0;
    *((_QWORD *)&v100 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v100 = 0xD00000000000001FLL;
    *((_QWORD *)&v100 + 1) = 0x800000021BE8A6C0;
    v66._countAndFlagsBits = URL.path.getter();
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    v67._countAndFlagsBits = 46;
    v67._object = (void *)0xE100000000000000;
    String.append(_:)(v67);
    v68 = v100;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_OWORD *)v69 = v68;
    *(_BYTE *)(v69 + 16) = 3;
    goto LABEL_38;
  }
  v25 = RERealityFileGetCertifiedFreeOfChangeSceneActions();
  if (v25)
  {
    if (v98)
      v26 = v95;
    else
      v26 = 0;
    v94 = v20;
    if (v98 <= 1)
      v27 = 1;
    else
      v27 = v98;
    v29 = v112;
    v28 = v113;
    swift_bridgeObjectRetain();
    outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v29, v28);
    v112 = v26;
    v113 = v27;
    v30 = specialized static __ServiceLocator.shared.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v14, v94, v97);
    outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)v111, (uint64_t)&v100);
    swift_retain();
    __REAssetBundle.init(url:serviceLocator:_:)((uint64_t)v14, v30, (uint64_t)&v100, (uint64_t *)v105);
    if (!v6)
    {
      v106 = v105[0];
      v107 = v105[1];
      v108 = v105[2];
      v109 = v105[3];
      outlined destroy of BodyTrackingComponent?((uint64_t)v114, &demangling cache variable for type metadata for __REAssetBundle?);
      outlined init with take of Transform?((uint64_t)&v106, (uint64_t)v114, &demangling cache variable for type metadata for __REAssetBundle?);
      v31 = 0;
      goto LABEL_22;
    }
LABEL_14:
    RERealityFileUnmount();
LABEL_39:
    swift_release();
    goto LABEL_40;
  }
  outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v112, v113);
  v112 = 0;
  v113 = 0;
  v33 = __SceneResourceCache.loadAssetBundle(url:loadOptions:)(a1, (uint64_t)v111);
  if (v6)
    goto LABEL_14;
  v31 = v33;
  v94 = a1;
  outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v33 + 16, (uint64_t)&v100);
  if ((v104 & 1) != 0)
  {
    swift_retain();
    outlined destroy of __SceneResourceCache.Entry.EntryHolder((uint64_t)&v100);
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    swift_release();
  }
  else
  {
    v106 = v100;
    v107 = v101;
    v108 = v102;
    v109 = v103;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v114, &demangling cache variable for type metadata for __REAssetBundle?);
  outlined init with take of Transform?((uint64_t)&v106, (uint64_t)v114, &demangling cache variable for type metadata for __REAssetBundle?);
LABEL_22:
  outlined init with copy of __REAssetBundle?((uint64_t)v114, (uint64_t)&v106);
  if (!(_QWORD)v106)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v106, &demangling cache variable for type metadata for __REAssetBundle?);
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    v54 = v53;
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 2, v55);
    swift_willThrow();
    RERealityFileUnmount();
    swift_release();
    swift_release();
LABEL_40:
    outlined destroy of BodyTrackingComponent?((uint64_t)v114, &demangling cache variable for type metadata for __REAssetBundle?);
    return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v111);
  }
  v100 = v106;
  v101 = v107;
  v102 = v108;
  v103 = v109;
  if (v98)
  {
    v38 = *((_QWORD *)&v100 + 1);
    MEMORY[0x24BDAC7A8](v98);
    *(&v92 - 2) = (uint64_t)&v100;
    v92 = v31;
    v40 = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in __REAssetBundle.getSceneDescriptors()partial apply, (uint64_t)(&v92 - 4), v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v42 = v95;
    v43 = specialized Sequence.first(where:)(v41, v95, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v43)
    {
      v44 = __REAssetBundle.sceneAsset(for:)(v43);
      if (v44)
      {
        v45 = v44;
        v97 = v43;
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
        {
          swift_retain();
          v46 = URL.lastPathComponent.getter();
          v98 = v47;
          v48 = *(_QWORD *)(v45 + 16);
          RERetain();
          type metadata accessor for __SceneResource();
          v49 = swift_allocObject();
          *(_QWORD *)(v49 + 16) = v48;
          swift_release();
          v50 = v93;
          v93[3] = (uint64_t)&type metadata for UncachedSceneResourceLoadResult;
          v50[4] = (uint64_t)&protocol witness table for UncachedSceneResourceLoadResult;
          v51 = swift_allocObject();
          *v50 = v51;
          swift_release();
          swift_release();
          *(_QWORD *)(v51 + 16) = v49;
          *(_BYTE *)(v51 + 24) = 0;
          v52 = v98;
          *(_QWORD *)(v51 + 32) = v46;
          *(_QWORD *)(v51 + 40) = v52;
LABEL_44:
          outlined destroy of __REAssetBundle((uint64_t)&v100);
          RERealityFileUnmount();
          swift_release();
          goto LABEL_39;
        }
        v98 = v24;
        result = URL.lastPathComponent.getter();
        v96 = result;
        v78 = v92;
        if (v92)
        {
          v79 = v77;
          v80 = v93;
          v93[3] = (uint64_t)&type metadata for SceneResourceLoadResult;
          v80[4] = (uint64_t)&protocol witness table for SceneResourceLoadResult;
          v81 = swift_allocObject();
          *v80 = v81;
          v82 = *(_QWORD *)(v45 + 16);
          swift_retain();
          RERetain();
          type metadata accessor for __SceneResource();
          v83 = swift_allocObject();
          *(_QWORD *)(v83 + 16) = v82;
          swift_release();
          swift_release();
          *(_QWORD *)(v81 + 16) = v83;
          v84 = v96;
LABEL_49:
          *(_QWORD *)(v81 + 24) = v84;
          *(_QWORD *)(v81 + 32) = v79;
          *(_QWORD *)(v81 + 40) = v78;
          *(_BYTE *)(v81 + 48) = 0;
          outlined destroy of __REAssetBundle((uint64_t)&v100);
          RERealityFileUnmount();
          swift_release();
          goto LABEL_39;
        }
        __break(1u);
        goto LABEL_55;
      }
      swift_release();
    }
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    v72 = v71;
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    v74 = (char *)v72 + *(int *)(v73 + 48);
    v75 = v97;
    v76 = v98;
    *v72 = v42;
    v72[1] = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v74, v94, v75);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 0, 2, v73);
    swift_willThrow();
    goto LABEL_44;
  }
  v56 = *((_QWORD *)&v100 + 1);
  if (!(*((_QWORD *)&v100 + 1) >> 62))
  {
    v57 = *(_QWORD *)((*((_QWORD *)&v100 + 1) & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v57)
      goto LABEL_31;
LABEL_51:
    swift_bridgeObjectRelease();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    v90 = v89;
    v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v90, 1, 2, v91);
    swift_willThrow();
    outlined destroy of __REAssetBundle((uint64_t)&v100);
    RERealityFileUnmount();
    swift_release();
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_51;
LABEL_31:
  if ((v56 & 0xC000000000000001) != 0)
  {
    v58 = MEMORY[0x220769770](0, v56);
  }
  else
  {
    if (!*(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v58 = *(_QWORD *)(v56 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  if (v25)
  {
    swift_retain();
    v59 = URL.lastPathComponent.getter();
    v97 = v60;
    v98 = v59;
    v61 = *(_QWORD *)(v58 + 16);
    RERetain();
    type metadata accessor for __SceneResource();
    v62 = swift_allocObject();
    *(_QWORD *)(v62 + 16) = v61;
    swift_release();
    v63 = v93;
    v93[3] = (uint64_t)&type metadata for UncachedSceneResourceLoadResult;
    v63[4] = (uint64_t)&protocol witness table for UncachedSceneResourceLoadResult;
    v64 = swift_allocObject();
    *v63 = v64;
    swift_release();
    *(_QWORD *)(v64 + 16) = v62;
    *(_BYTE *)(v64 + 24) = 0;
    v65 = v97;
    *(_QWORD *)(v64 + 32) = v98;
    *(_QWORD *)(v64 + 40) = v65;
    outlined destroy of __REAssetBundle((uint64_t)&v100);
    RERealityFileUnmount();
    swift_release();
    goto LABEL_39;
  }
  v98 = v24;
  result = URL.lastPathComponent.getter();
  v97 = result;
  if (v31)
  {
    v79 = v85;
    v78 = v31;
    v86 = v93;
    v93[3] = (uint64_t)&type metadata for SceneResourceLoadResult;
    v86[4] = (uint64_t)&protocol witness table for SceneResourceLoadResult;
    v81 = swift_allocObject();
    *v86 = v81;
    v87 = *(_QWORD *)(v58 + 16);
    swift_retain();
    RERetain();
    type metadata accessor for __SceneResource();
    v88 = swift_allocObject();
    *(_QWORD *)(v88 + 16) = v87;
    swift_release();
    *(_QWORD *)(v81 + 16) = v88;
    v84 = v97;
    goto LABEL_49;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.loadAssetBundle(url:loadOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSURL *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t *v25;
  id v26;
  void *v27;
  void *v28;
  _QWORD v29[16];
  _OWORD v30[4];
  _OWORD v31[5];
  id v32;

  v4 = v2;
  v25 = (uint64_t *)a2;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - v10;
  URL.standardizedFileURL.getter();
  URL._bridgeToObjectiveC()(v12);
  v13 = *(void **)(v2 + 24);
  v26 = *(id *)(v4 + 16);
  v27 = v13;
  v32 = v14;
  v28 = v14;
  v15 = v26;
  v16 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneResourceCache.Entry?);
  OS_dispatch_queue.sync<A>(execute:)();

  v17 = v29[0];
  if (!v29[0])
  {
    v17 = specialized static __ServiceLocator.shared.getter();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
    outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)v25, (uint64_t)v29);
    swift_retain();
    v18 = __REAssetBundle.init(url:serviceLocator:_:)((uint64_t)v8, v17, (uint64_t)v29, (uint64_t *)v30);
    if (v3)
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return v17;
    }
    v25 = &v24;
    v31[0] = v30[0];
    v31[1] = v30[1];
    v31[2] = v30[2];
    v31[3] = v30[3];
    v20 = *(void **)(v4 + 16);
    v21 = *(void **)(v4 + 24);
    MEMORY[0x24BDAC7A8](v18);
    *(&v24 - 4) = (uint64_t)v20;
    *(&v24 - 3) = (uint64_t)v21;
    *(&v24 - 2) = (uint64_t)v32;
    *(&v24 - 1) = (uint64_t)v31;
    type metadata accessor for __SceneResourceCache.Entry();
    v22 = v20;
    v23 = v21;
    OS_dispatch_queue.sync<A>(execute:)();

    v17 = v29[0];
    outlined destroy of __REAssetBundle((uint64_t)v31);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);

  return v17;
}

uint64_t __SceneResourceCache.loadSceneResources(url:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ResultVs5NeverOTg5;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[2];
  _OWORD *v15;
  _OWORD v16[4];
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[4];

  ResultVs5NeverOTg5 = a1;
  v4 = __SceneResourceCache.loadAssetBundle(url:loadOptions:)(a1, a2);
  if (!v2)
  {
    v5 = (_OWORD *)v4;
    v6 = outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v4 + 16, (uint64_t)v16);
    if (v17 == 1)
    {
      outlined destroy of __SceneResourceCache.Entry.EntryHolder((uint64_t)v16);
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
LABEL_6:
      outlined destroy of BodyTrackingComponent?((uint64_t)&v18, &demangling cache variable for type metadata for __REAssetBundle?);
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      ResultVs5NeverOTg5 = v10;
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(ResultVs5NeverOTg5, 1, 2, v11);
      swift_willThrow();
      swift_release();
      return ResultVs5NeverOTg5;
    }
    v18 = v16[0];
    v19 = v16[1];
    v20 = v16[2];
    v21 = v16[3];
    if (!*(_QWORD *)&v16[0])
      goto LABEL_6;
    v22[0] = v18;
    v22[1] = v19;
    v22[2] = v20;
    v22[3] = v21;
    v7 = *((_QWORD *)&v18 + 1);
    MEMORY[0x24BDAC7A8](v6);
    v15 = v22;
    swift_bridgeObjectRetain();
    v8 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in __REAssetBundle.getSceneDescriptors(), (uint64_t)v14, v7);
    v9 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v9);
    v14[0] = v22;
    v14[1] = ResultVs5NeverOTg5;
    v15 = v5;
    ResultVs5NeverOTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation17RESceneDescriptorCG_AF23SceneResourceLoadResultVs5NeverOTg5((void (*)(_QWORD *__return_ptr, uint64_t *))partial apply for closure #1 in __SceneResourceCache.loadSceneResources(url:options:), (uint64_t)&v13, v8);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of __REAssetBundle((uint64_t)v22);
  }
  return ResultVs5NeverOTg5;
}

uint64_t closure #1 in __SceneResourceCache.loadSceneResources(url:options:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __REAssetBundle.sceneAsset(for:)(*a1);
  if (result)
  {
    v6 = result;
    v7 = URL.lastPathComponent.getter();
    v9 = v8;
    v10 = *(_QWORD *)(v6 + 16);
    swift_retain();
    RERetain();
    type metadata accessor for __SceneResource();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v10;
    result = swift_release();
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = a2;
    *(_BYTE *)(a3 + 32) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 __SceneResourceCache.__registerImportedScenes(url:importedScenes:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 result;
  unint64_t v25;
  unsigned __int8 v26;
  __n128 *v27;
  _QWORD v28[2];
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __n128 v35;
  unsigned __int8 v36;
  int *v37;

  v30 = a1;
  v29 = a3;
  v37 = (int *)type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  v5 = *((_QWORD *)v37 - 1);
  MEMORY[0x24BDAC7A8](v37);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v33 = *((_QWORD *)v8 - 1);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v28[1] = v3;
    v34[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v14 = *(_QWORD *)(v5 + 72);
    v32 = v14;
    do
    {
      outlined init with copy of __RKEntityActionSpecification(v13, (uint64_t)v7, type metadata accessor for __SceneImportOperation.__ImportedScene);
      v15 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v10, v7, v15);
      v16 = &v7[v37[5]];
      v18 = *(_QWORD *)v16;
      v17 = *((_QWORD *)v16 + 1);
      v19 = *(_QWORD *)&v7[v37[6]];
      LOBYTE(v16) = v7[v37[7]];
      v20 = &v10[v8[5]];
      *(_QWORD *)v20 = v18;
      *((_QWORD *)v20 + 1) = v17;
      *(_QWORD *)&v10[v8[6]] = v19;
      v10[v8[7]] = (char)v16;
      swift_bridgeObjectRetain();
      swift_retain();
      outlined destroy of __RKEntityActionSpecification((uint64_t)v7, type metadata accessor for __SceneImportOperation.__ImportedScene);
      v12 = v34[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v14 = v32;
        v12 = v34[0];
      }
      v22 = *(_QWORD *)(v12 + 16);
      v21 = *(_QWORD *)(v12 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v14 = v32;
        v12 = v34[0];
      }
      *(_QWORD *)(v12 + 16) = v22 + 1;
      outlined init with take of __SceneImportOperation.ImportedScene((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v22);
      v13 += v14;
      --v11;
    }
    while (v11);
  }
  v23 = v31;
  __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v12, (uint64_t)v34);
  swift_bridgeObjectRelease();
  if (!v23)
  {
    v25 = v34[1];
    v26 = v36;
    result = v35;
    v27 = v29;
    v29->n128_u64[0] = v34[0];
    v27->n128_u64[1] = v25;
    v27[1] = result;
    v27[2].n128_u8[0] = v26;
  }
  return result;
}

unint64_t __SceneResourceCache.registerImportedScenes(url:importedScenes:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSURL *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  v5 = type metadata accessor for URL();
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.standardizedFileURL.getter();
  URL._bridgeToObjectiveC()(v8);
  v10 = *(void **)(v2 + 24);
  v36 = *(void **)(v2 + 16);
  v9 = v36;
  v37 = v10;
  v33 = v11;
  v38 = v11;
  v39 = a1;
  type metadata accessor for __SceneResourceCache.Entry();
  v12 = v9;
  v13 = v10;
  OS_dispatch_queue.sync<A>(execute:)();

  v14 = v40;
  result = __SceneResourceCache.Entry.activeSceneAssets.getter();
  v16 = result;
  if (!(result >> 62))
  {
    v17 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17 < 2)
    {
      if (v17)
        goto LABEL_4;
      goto LABEL_10;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    v30 = v29;
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 2, 2, v31);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v24 > 1)
    goto LABEL_11;
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    v27 = v26;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 2, v28);
LABEL_12:
    swift_willThrow();
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  }
LABEL_4:
  if ((v16 & 0xC000000000000001) != 0)
  {
    v18 = MEMORY[0x220769770](0, v16);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v18 = *(_QWORD *)(v16 + 32);
    swift_retain();
LABEL_7:
    swift_bridgeObjectRelease();
    v19 = URL.lastPathComponent.getter();
    v21 = v20;
    v22 = *(_QWORD *)(v18 + 16);
    RERetain();
    type metadata accessor for __SceneResource();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v22;

    swift_release();
    *(_QWORD *)a2 = v23;
    *(_QWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 16) = v21;
    *(_QWORD *)(a2 + 24) = v14;
    *(_BYTE *)(a2 + 32) = 0;
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  }
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);

  return v0;
}

uint64_t __SceneResourceCache.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t outlined init with take of __SceneImportOperation.ImportedScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id specialized __SceneResourceCache.CachedEntries.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  id v7;
  _QWORD v9[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v4);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v6);
  v7 = objc_msgSend((id)objc_opt_self(), sel_strongToWeakObjectsMapTable);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v9[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v7;
}

uint64_t ObjC metadata update function for LoadTracer()
{
  return type metadata accessor for LoadTracer(0);
}

uint64_t type metadata accessor for LoadTracer(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for LoadTracer);
}

uint64_t type metadata completion function for LoadTracer()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for LoadManager()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for __SceneResourceLoadResultLoadContext()
{
  return &type metadata for __SceneResourceLoadResultLoadContext;
}

ValueMetadata *type metadata accessor for __SceneResourceLoadResult()
{
  return &type metadata for __SceneResourceLoadResult;
}

uint64_t type metadata accessor for __SceneResourceCache()
{
  return objc_opt_self();
}

uint64_t method lookup function for __SceneResourceCache()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for __SceneResourceCache.Entry()
{
  return swift_lookUpClassMethod();
}

_QWORD *initializeBufferWithCopyOfBuffer for __SceneResourceCache.CachedEntries(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for __SceneResourceCache.CachedEntries(id *a1)
{

}

uint64_t assignWithCopy for __SceneResourceCache.CachedEntries(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for __SceneResourceCache.CachedEntries(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for __SceneResourceCache.CachedEntries()
{
  return &type metadata for __SceneResourceCache.CachedEntries;
}

uint64_t *initializeBufferWithCopyOfBuffer for SceneResourceLoadResult.InternalError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = *(int *)(v7 + 48);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for URL();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for SceneResourceLoadResult.InternalError(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v4 = a1 + *(int *)(v2 + 48);
    v5 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  return result;
}

_QWORD *initializeWithCopy for SceneResourceLoadResult.InternalError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = *(int *)(v6 + 48);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

_QWORD *assignWithCopy for SceneResourceLoadResult.InternalError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17 = *(int *)(v6 + 48);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
      return a1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (String, URL));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v11 = *(int *)(v6 + 48);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

_OWORD *initializeWithTake for SceneResourceLoadResult.InternalError(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v8 = *(int *)(v6 + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

_QWORD *assignWithTake for SceneResourceLoadResult.InternalError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      swift_bridgeObjectRelease();
      v17 = *(int *)(v6 + 48);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
      return a1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (String, URL));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v11 = *(int *)(v6 + 48);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneResourceLoadResult.InternalError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBCFA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SceneResourceLoadResult.InternalError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBCFAE8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for SceneResourceLoadResult.InternalError(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for SceneResourceLoadResult.InternalError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t type metadata accessor for SceneResourceLoadResult.InternalError(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for SceneResourceLoadResult.InternalError);
}

uint64_t type metadata completion function for SceneResourceLoadResult.InternalError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LoadTrace(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v5 = a2[4];
    v6 = *(int *)(a3 + 36);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v5;
    v9 = type metadata accessor for DispatchTime();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for LoadTrace(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for DispatchTime();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 36);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v8 = type metadata accessor for DispatchTime();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadTrace()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBCFFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DispatchTime();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LoadTrace()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBD0050(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DispatchTime();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LoadTrace(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for LoadTrace);
}

uint64_t type metadata completion function for LoadTrace()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for __SceneResourceCache.Entry.EntryHolder(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 64);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 != 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __SceneResourceCache.Entry.EntryHolder(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v4 = *(unsigned __int8 *)(a2 + 64);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4 == 1)
  {
    v5 = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v6;
    v7 = v6;
    v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
    swift_retain();
    swift_bridgeObjectRetain();
    v8(a1 + 16, a2 + 16, v7);
    v5 = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  }
  swift_bridgeObjectRetain();
  *(_BYTE *)(a1 + 64) = v5;
  return a1;
}

uint64_t assignWithCopy for __SceneResourceCache.Entry.EntryHolder(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    }
    swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a2 + 64);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5 != 1)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v6 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
      swift_retain();
      swift_bridgeObjectRetain();
      v7(a1 + 16, a2 + 16, v6);
      LOBYTE(v5) = 0;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    }
    *(_BYTE *)(a1 + 64) = v5;
    swift_bridgeObjectRetain();
  }
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for __SceneResourceCache.Entry.EntryHolder(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    }
    swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a2 + 64);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
    }
    *(_BYTE *)(a1 + 64) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for __SceneResourceCache.Entry.EntryHolder(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for __SceneResourceCache.Entry.EntryHolder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for __SceneResourceCache.Entry.EntryHolder(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for __SceneResourceCache.Entry.EntryHolder(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

void *type metadata accessor for __SceneResourceCache.Entry.EntryHolder()
{
  return &unk_24DFB53A0;
}

uint64_t outlined init with copy of __SceneResourceCache.Entry.EntryHolder(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for __SceneResourceCache.Entry.EntryHolder(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in __REAssetBundle.getSceneDescriptors()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in __REAssetBundle.getSceneDescriptors()(*(_QWORD *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in __SceneResourceCache.loadSceneResources(url:options:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in __SceneResourceCache.loadSceneResources(url:options:)(a1, *(_QWORD *)(v2 + 32), a2);
}

id partial apply for closure #1 in __SceneResourceCache.CachedEntries.getCacheEntry(for:)@<X0>(_QWORD *a1@<X8>)
{
  return partial apply for closure #1 in __SceneResourceCache.CachedEntries.getCacheEntry(for:)(a1);
}

{
  uint64_t v1;
  id result;

  result = objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *(_QWORD *)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t outlined init with copy of __REAssetBundle.LoadOptions(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for __REAssetBundle.LoadOptions(a2, a1);
  return a2;
}

id partial apply for closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)(*(void **)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = 4;
      do
      {
        v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x220769770](v7 - 4, a1);
          v10 = v7 - 3;
          if (__OFADD__(v8, 1))
            goto LABEL_19;
        }
        else
        {
          v9 = *(_QWORD *)(a1 + 8 * v7);
          swift_retain();
          v10 = v7 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        if (RESceneDescriptorGetSceneName())
        {
          v11 = String.init(cString:)();
          v13 = v12;
          if (v11 != a2)
            goto LABEL_14;
        }
        else
        {
          v13 = 0xE000000000000000;
          if (a2)
            goto LABEL_14;
        }
        if (v13 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v9;
        }
LABEL_14:
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
          goto LABEL_18;
        swift_release();
        ++v7;
      }
      while (v10 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = 4;
      do
      {
        v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x220769770](v7 - 4, a1);
          v10 = v7 - 3;
          if (__OFADD__(v8, 1))
            goto LABEL_18;
        }
        else
        {
          v9 = *(_QWORD *)(a1 + 8 * v7);
          swift_retain();
          v10 = v7 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        RESceneGetName();
        if (String.init(cString:)() == a2 && v11 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_17:
          swift_bridgeObjectRelease();
          return v9;
        }
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v13 & 1) != 0)
          goto LABEL_17;
        swift_release();
        ++v7;
      }
      while (v10 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined destroy of __REAssetBundle.LoadOptions(uint64_t a1)
{
  destroy for __REAssetBundle.LoadOptions(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError;
  if (!lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RealityFileError, &type metadata for __RealityFileError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError);
  }
  return result;
}

uint64_t outlined consume of __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_21BBD0830()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBD0864()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

id partial apply for closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:importedScenes:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:importedScenes:)(*(void **)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t destroy for __SceneResourceLoadResult()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for __SceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for __SceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for __SceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for SceneResourceLoadResult()
{
  return &type metadata for SceneResourceLoadResult;
}

uint64_t destroy for UncachedSceneResourceLoadResult()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UncachedSceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UncachedSceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UncachedSceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UncachedSceneResourceLoadResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UncachedSceneResourceLoadResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UncachedSceneResourceLoadResult()
{
  return &type metadata for UncachedSceneResourceLoadResult;
}

id closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)(a1);
}

uint64_t closure #1 in __REAssetBundle.getSceneDescriptors()partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in __REAssetBundle.getSceneDescriptors()(a1);
}

void static OpacityComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2005;
}

float OpacityComponent.opacity.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void OpacityComponent.opacity.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*OpacityComponent.opacity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::OpacityComponent __swiftcall OpacityComponent.init(opacity:)(RealityFoundation::OpacityComponent opacity)
{
  RealityFoundation::OpacityComponent *v1;

  v1->opacity = opacity.opacity;
  return opacity;
}

BOOL static OpacityComponent.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t static OpacityComponent.__fromCore(_:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  result = REHierarchicalFadeComponentGetOpacity();
  *a1 = v3;
  return result;
}

uint64_t OpacityComponent.__toCore(_:)()
{
  REHierarchicalFadeComponentSetOpacity();
  return RENetworkMarkComponentDirty();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance OpacityComponent@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  result = REHierarchicalFadeComponentGetOpacity();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance OpacityComponent()
{
  REHierarchicalFadeComponentSetOpacity();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance OpacityComponent(_DWORD *a1@<X8>)
{
  *a1 = 2005;
}

float static OpacityComponent.getComputedOpacity(_:)()
{
  uint64_t v0;
  float result;

  v0 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (!MEMORY[0x22076FDC4](*(_QWORD *)(v0 + 16)))
    return -1.0;
  REOpacityServiceGetComputedOpacity();
  return result;
}

ValueMetadata *type metadata accessor for OpacityComponent()
{
  return &type metadata for OpacityComponent;
}

uint64_t Sequence.count(where:)()
{
  uint64_t v1;

  Sequence.reduce<A>(_:_:)();
  return v1;
}

uint64_t partial apply for closure #1 in Sequence.count(where:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v5 = *a1;
  result = (*(uint64_t (**)(uint64_t))(v3 + 32))(a2);
  if ((result & 1) != 0 && (v7 = __OFADD__(v5, 1), ++v5, v7))
    __break(1u);
  else
    *a3 = v5;
  return result;
}

void static ProjectiveTransformCameraComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 56;
}

__n128 ProjectiveTransformCameraComponent.transform.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void ProjectiveTransformCameraComponent.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ProjectiveTransformCameraComponent.transform.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __swiftcall ProjectiveTransformCameraComponent.init(projectionMatrix:)(RealityFoundation::ProjectiveTransformCameraComponent *__return_ptr retstr, simd_float4x4 *projectionMatrix)
{
  simd_float4 v2;
  simd_float4 v3;
  simd_float4 v4;
  simd_float4 v5;

  retstr->transform.columns[0] = v2;
  retstr->transform.columns[1] = v3;
  retstr->transform.columns[2] = v4;
  retstr->transform.columns[3] = v5;
}

uint64_t static ProjectiveTransformCameraComponent.__fromCore(_:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = RECustomMatrixCameraComponentGetProjectionMatrix();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t ProjectiveTransformCameraComponent.__toCore(_:)()
{
  RECustomMatrixCameraComponentSetProjectionFromMatrix();
  return RENetworkMarkComponentDirty();
}

uint64_t static ProjectiveTransformCameraComponent.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[1], a2[1]), (int8x16_t)vceqq_f32(*a1, *a2)), vandq_s8((int8x16_t)vceqq_f32(a1[2], a2[2]), (int8x16_t)vceqq_f32(a1[3], a2[3])))) >> 31;
}

uint64_t simd_equal(simd_float4x4 a1, simd_float4x4 a2)
{
  return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32((float32x4_t)a1.columns[0], (float32x4_t)a2.columns[0]), (int8x16_t)vceqq_f32((float32x4_t)a1.columns[1], (float32x4_t)a2.columns[1])), vandq_s8((int8x16_t)vceqq_f32((float32x4_t)a1.columns[2], (float32x4_t)a2.columns[2]), (int8x16_t)vceqq_f32((float32x4_t)a1.columns[3], (float32x4_t)a2.columns[3])))) >> 31;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance ProjectiveTransformCameraComponent@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = RECustomMatrixCameraComponentGetProjectionMatrix();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ProjectiveTransformCameraComponent()
{
  RECustomMatrixCameraComponentSetProjectionFromMatrix();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ProjectiveTransformCameraComponent(_DWORD *a1@<X8>)
{
  *a1 = 56;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProjectiveTransformCameraComponent(simd_float4x4 *a1, simd_float4x4 *a2)
{
  return simd_equal(*a1, *a2);
}

ValueMetadata *type metadata accessor for ProjectiveTransformCameraComponent()
{
  return &type metadata for ProjectiveTransformCameraComponent;
}

void __REAnchoringType.isEqualToARAnchor(anchor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  _BYTE v8[32];

  v3 = type metadata accessor for __REAnchoringType();
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of Any(a1, (uint64_t)v8);
  type metadata accessor for ARAnchor();
  swift_dynamicCast();
  outlined init with copy of __REAnchoringType(v1, (uint64_t)v5);
  v6 = (char *)sub_21BBD115C + 4 * byte_21BE640B4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BBD115C()
{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  char v8;

  v3 = *v1;
  v4 = v1[1];
  objc_opt_self();
  v5 = swift_dynamicCastObjCClass();
  if (v5)
  {
    v6 = (void *)v5;
    *(_QWORD *)(v2 - 88) = v3;
    *(_QWORD *)(v2 - 56) = v4;
    v7 = v0;
    v8 = __REAnchoringType.isEqualToARPlaneAnchor(_:alignment:classification:)(v6, (uint64_t *)(v2 - 88), (unint64_t *)(v2 - 56));

  }
  else
  {

    v8 = 0;
  }
  return v8 & 1;
}

unint64_t type metadata accessor for ARAnchor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ARAnchor;
  if (!lazy cache variable for type metadata for ARAnchor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  }
  return result;
}

uint64_t __REAnchoringType.isEqualToARPlaneAnchor(_:alignment:classification:)(void *a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  char v7;
  BOOL v8;
  unint64_t v10;

  v4 = *a2;
  v5 = *a3;
  v6 = objc_msgSend(a1, sel_alignment);
  if (v6 == (id)1)
  {
    if (v4)
      v8 = (v4 & 2) == 0;
    else
      v8 = 0;
    if (v8)
      goto LABEL_5;
LABEL_10:
    v10 = v5;
    v7 = __REAnchoringType.isEqualToARPlaneAnchorClassification(_:classification:)(a1, &v10);
    return v7 & 1;
  }
  if (!v6 && (!v4 || (v4 & 1) != 0))
    goto LABEL_10;
LABEL_5:
  v7 = 0;
  return v7 & 1;
}

uint64_t __REAnchoringType.isEqualToARPlaneAnchorClassification(_:classification:)(void *a1, unint64_t *a2)
{
  unint64_t v3;
  BOOL v4;
  uint64_t result;

  v3 = *a2;
  if (objc_msgSend((id)objc_opt_self(), sel_isClassificationSupported))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return 1;
  switch((unint64_t)objc_msgSend(a1, sel_classification))
  {
    case 1uLL:
      result = v3 & 1;
      break;
    case 2uLL:
      result = (v3 >> 1) & 1;
      break;
    case 3uLL:
      result = (v3 >> 2) & 1;
      break;
    case 4uLL:
      result = (v3 >> 3) & 1;
      break;
    case 5uLL:
      result = (v3 >> 4) & 1;
      break;
    default:
      result = objc_msgSend(a1, sel_classificationStatus) == 0;
      break;
  }
  return result;
}

void Entity.ConfigurationCatalog.RealityFileConfigurationReaderError.errorDescription.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_21BBD1434()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(108);
  v2._countAndFlagsBits = 0xD00000000000004ALL;
  v2._object = (void *)0x800000021BE8A880;
  String.append(_:)(v2);
  v3._countAndFlagsBits = v0;
  v3._object = v1;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x6E69207461202C27;
  v4._object = (void *)0xEC00000020786564;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0xD000000000000012;
  v6._object = (void *)0x800000021BE8A8D0;
  String.append(_:)(v6);
  return 0;
}

unint64_t lazy protocol witness table accessor for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError;
  if (!lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError, &type metadata for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError);
  }
  return result;
}

uint64_t outlined copy of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 <= 4u)
  {
    if (((1 << a5) & 0xD) == 0)
      swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1)
{
  return outlined consume of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 <= 4u)
  {
    if (((1 << a5) & 0xD) == 0)
      swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(v4, v6, v5, v7, v9);
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError()
{
  return &type metadata for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError;
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.init(contentsOf:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  NSURL *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v2;
  v25 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = v4;
  *(_QWORD *)(v3 + 32) = a1;
  v7 = type metadata accessor for URL();
  *(_QWORD *)(v3 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 64) = v8;
  v9 = swift_task_alloc();
  *(_QWORD *)(v3 + 72) = v9;
  swift_defaultActor_initialize();
  *(_QWORD *)(v3 + 16) = 0;
  v10 = (uint64_t *)(v3 + 16);
  v23 = a1;
  URL._bridgeToObjectiveC()(v11);
  v13 = v12;
  v14 = RERealityFileCreateByOpeningFileAtURL();

  if (v14)
  {
    RERealityFileCopyConfigurationSetNames();
    v24 = 0;
    result = static Array._forceBridgeFromObjectiveC(_:result:)();
    __break(1u);
    __break(1u);
    __break(1u);
    return result;
  }
  v16 = *v10;
  if (!*v10)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v23, v7);
LABEL_7:
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v21 = v20;
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(_QWORD *)v22 = v19;
    *(_QWORD *)(v22 + 8) = v21;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_BYTE *)(v22 + 32) = 2;
    goto LABEL_8;
  }
  type metadata accessor for CFErrorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
  v17 = swift_allocError();
  *v18 = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v23, v7);
  if (!v17)
    goto LABEL_7;
LABEL_8:
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
  swift_willThrow();
  type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReader();
  swift_defaultActor_destroy();
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v23, v7);
  swift_deallocPartialClassInstance();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.init(contentsOf:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  swift_release();
  outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  RERelease();
  outlined destroy of BodyTrackingComponent?(v0 + 112, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_release();
  v1 = v0
     + OBJC_IVAR____TtCVE17RealityFoundationC10RealityKit6Entity20ConfigurationCatalog30RealityFileConfigurationReader_loadingUrl;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ObjC metadata update function for Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  return type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReader();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Entity.ConfigurationCatalog.RealityFileConfigurationReader;
  if (!type metadata singleton initialization cache for Entity.ConfigurationCatalog.RealityFileConfigurationReader)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 152) = a2;
  *(_QWORD *)(v4 + 160) = v3;
  *(_BYTE *)(v4 + 232) = a3;
  *(_QWORD *)(v4 + 144) = a1;
  v5 = type metadata accessor for URL();
  *(_QWORD *)(v4 + 168) = v5;
  *(_QWORD *)(v4 + 176) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 184) = swift_task_alloc();
  *(_QWORD *)(v4 + 192) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  if (*(_BYTE *)(v0 + 232) == 1)
  {
    v5 = v0 + 80;
    v6 = *(_QWORD *)(v0 + 192);
    type metadata accessor for AnchorEntity();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v4, v1);
    outlined init with copy of Entity.__LoadOptions(v3, v0 + 80);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v7;
    *v7 = v0;
    v7[1] = Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:);
    v8 = *(_QWORD *)(v0 + 192);
  }
  else
  {
    v5 = v0 + 16;
    v9 = *(_QWORD *)(v0 + 184);
    type metadata accessor for Entity();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v9, v4, v1);
    outlined init with copy of Entity.__LoadOptions(v3, v0 + 16);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v10;
    *v10 = v0;
    v10[1] = Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:);
    v8 = *(_QWORD *)(v0 + 184);
  }
  return Entity.init(contentsOf:withName:options:)(v8, 0, 0, v5);
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 208) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 224) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[93] = v3;
  v4[92] = a3;
  v4[91] = a2;
  v4[90] = a1;
  v5 = type metadata accessor for URL.DirectoryHint();
  v4[94] = v5;
  v4[95] = *(_QWORD *)(v5 - 8);
  v4[96] = swift_task_alloc();
  v6 = type metadata accessor for URL();
  v4[97] = v6;
  v4[98] = *(_QWORD *)(v6 - 8);
  v4[99] = swift_task_alloc();
  type metadata accessor for String.Encoding();
  v4[100] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t M0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n;
  uint64_t v37;
  Class isa;
  uint64_t RealityFileAssetDescriptorWithConfigurationSpecifications;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = v0;
  v2 = (_OWORD *)(v0 + 432);
  v3 = (_QWORD *)(v0 + 560);
  outlined init with copy of (Int, URL)(*(_QWORD *)(v0 + 736), v0 + 192, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(_QWORD *)(v0 + 192) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v0 + 192, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    *(_QWORD *)(v0 + 568) = 0;
    *(_QWORD *)(v0 + 576) = 0;
    *v3 = 0;
    *(_QWORD *)(v0 + 584) = 1;
    *(_OWORD *)(v0 + 592) = 0u;
    *(_OWORD *)(v0 + 608) = 0u;
  }
  else
  {
    outlined init with copy of (Int, URL)(v0 + 216, v0 + 560, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    outlined destroy of Entity.ConfigurationCatalog.LoadOptions((_QWORD *)(v0 + 192));
    if (*(_QWORD *)(v0 + 584) != 1)
    {
      v7 = *(_OWORD *)(v0 + 576);
      *v2 = *(_OWORD *)v3;
      *(_OWORD *)(v0 + 448) = v7;
      v8 = *(_OWORD *)(v0 + 608);
      *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 592);
      *(_OWORD *)(v0 + 480) = v8;
      goto LABEL_11;
    }
  }
  v4 = (_QWORD *)(v0 + 368);
  outlined init with copy of (Int, URL)(*(_QWORD *)(v0 + 744) + 112, v0 + 280, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(_QWORD *)(v0 + 280) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v0 + 280, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    *(_QWORD *)(v0 + 376) = 0;
    *(_QWORD *)(v0 + 384) = 0;
    *v4 = 0;
    *(_QWORD *)(v0 + 392) = 1;
    *(_OWORD *)(v0 + 400) = 0u;
    *(_OWORD *)(v0 + 416) = 0u;
  }
  else
  {
    outlined init with copy of (Int, URL)(v0 + 304, v0 + 368, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    outlined destroy of Entity.ConfigurationCatalog.LoadOptions((_QWORD *)(v0 + 280));
    if (*(_QWORD *)(v0 + 392) != 1)
    {
      v9 = *(_OWORD *)(v0 + 384);
      *v2 = *(_OWORD *)v4;
      *(_OWORD *)(v0 + 448) = v9;
      v10 = *(_OWORD *)(v0 + 416);
      *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 400);
      *(_OWORD *)(v0 + 480) = v10;
      goto LABEL_10;
    }
  }
  *(_QWORD *)(v0 + 656) = 0;
  *(_OWORD *)(v0 + 624) = 0u;
  *(_OWORD *)(v0 + 640) = 0u;
  *(_OWORD *)(v0 + 496) = 0u;
  *(_OWORD *)(v0 + 512) = 0u;
  *(_OWORD *)(v0 + 528) = 0u;
  *(_BYTE *)(v0 + 544) = 0;
  *(_BYTE *)(v0 + 545) = 2;
  *(_QWORD *)(v0 + 552) = 0;
  outlined assign with take of __DownsamplingStrategy?(v0 + 624, v0 + 496);
  *(_QWORD *)(v0 + 536) = 0;
  v5 = *(_OWORD *)(v0 + 512);
  *v2 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 448) = v5;
  v6 = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 480) = v6;
  swift_beginAccess();
  *(_BYTE *)(v0 + 480) = static RKARSystemCore.generateDecimatedMeshes;
  outlined destroy of BodyTrackingComponent?(v0 + 368, &demangling cache variable for type metadata for Entity.__LoadOptions?);
LABEL_10:
  outlined destroy of BodyTrackingComponent?(v0 + 560, &demangling cache variable for type metadata for Entity.__LoadOptions?);
LABEL_11:
  outlined init with copy of (Int, URL)(*(_QWORD *)(v0 + 736), v0 + 104, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(_QWORD *)(v0 + 104) != 1)
  {
    v12 = *(_BYTE *)(v0 + 120);
    v14 = (_QWORD *)(v0 + 104);
    goto LABEL_17;
  }
  v11 = *(_QWORD *)(v0 + 744);
  outlined destroy of BodyTrackingComponent?(v0 + 104, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  outlined init with copy of (Int, URL)(v11 + 112, v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(_QWORD *)(v0 + 16) != 1)
  {
    v12 = *(_BYTE *)(v0 + 32);
    v14 = (_QWORD *)(v0 + 16);
LABEL_17:
    outlined destroy of Entity.ConfigurationCatalog.LoadOptions(v14);
    v13 = *(_QWORD *)(v0 + 728);
    if (!v13)
      goto LABEL_21;
    goto LABEL_18;
  }
  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v12 = 0;
  v13 = *(_QWORD *)(v0 + 728);
  if (!v13)
    goto LABEL_21;
LABEL_18:
  if (*(_QWORD *)(v13 + 16))
  {
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
  }
LABEL_21:
  v17 = MEMORY[0x24BEE4B00];
LABEL_22:
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 744) + 208) + 24);
  if (!*(_QWORD *)(v18 + 16))
  {
LABEL_36:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_OWORD *)v35 = xmmword_21BE64240;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 32) = 0;
    *(_QWORD *)(v35 + 16) = 0;
    *(_BYTE *)(v35 + 40) = 0;
    swift_willThrow();
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  v67 = v12;
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  *(_QWORD *)(v0 + 808) = v21;
  swift_retain();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v21 + 32);
  v71 = v17;
  if (!(v22 >> 62))
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v23)
      goto LABEL_26;
LABEL_39:
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
LABEL_40:
    swift_bridgeObjectRetain();
    M0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSsAE_pTg5166_s10RealityKit6EntityC0A10FoundationE20ConfigurationCatalogV0a4FileE6ReaderC04loadC04into18withConfigurations0I7OptionsyAC_SDySSSDyS2SGGSgAF04LoadM0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n(v26, v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = *(_QWORD *)(v1 + 744);
    if (!*(_QWORD *)(M0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48 = v37
          + OBJC_IVAR____TtCVE17RealityFoundationC10RealityKit6Entity20ConfigurationCatalog30RealityFileConfigurationReader_loadingUrl;
      v49 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v1 + 816) = v49;
      *v49 = v1;
      v49[1] = Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
      v47 = v48;
      return Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)(v47, (uint64_t)v2, v67);
    }
    isa = Array._bridgeToObjectiveC()().super.isa;
    RealityFileAssetDescriptorWithConfigurationSpecifications = RERealityFileGetRealityFileAssetDescriptorWithConfigurationSpecifications();

    if (!RealityFileAssetDescriptorWithConfigurationSpecifications)
    {
      *(_QWORD *)(v1 + 704) = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v50 = BidirectionalCollection<>.joined(separator:)();
      v70 = (uint64_t)v2;
      v52 = v51;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v1 + 712) = M0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n;
      v53 = BidirectionalCollection<>.joined(separator:)();
      v55 = v54;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError();
      swift_allocError();
      *(_QWORD *)v56 = v50;
      *(_QWORD *)(v56 + 8) = v52;
      *(_QWORD *)(v56 + 16) = v53;
      *(_QWORD *)(v56 + 24) = v55;
      *(_BYTE *)(v56 + 32) = 1;
      swift_willThrow();
      swift_release();
      outlined destroy of Entity.__LoadOptions(v70);
      goto LABEL_41;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (RERealityFileAssetDescriptorAsSceneDescriptor())
    {
      if (RESceneDescriptorGetSceneName())
      {
        static String.Encoding.utf8.getter();
        v40 = String.init(cString:encoding:)();
        if (v41)
        {
          v42 = HIBYTE(v41) & 0xF;
          if ((v41 & 0x2000000000000000) == 0)
            v42 = v40 & 0xFFFFFFFFFFFFLL;
          if (v42)
          {
            v43 = *(_QWORD *)(v1 + 768);
            v44 = *(_QWORD *)(v1 + 760);
            v45 = *(_QWORD *)(v1 + 752);
            *(_QWORD *)(v1 + 688) = v40;
            *(_QWORD *)(v1 + 696) = v41;
            (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v43, *MEMORY[0x24BDCD7A0], v45);
            lazy protocol witness table accessor for type String and conformance String();
            URL.appending<A>(component:directoryHint:)();
            (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
            swift_bridgeObjectRelease();
            v46 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v1 + 848) = v46;
            *v46 = v1;
            v46[1] = Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
            v47 = *(_QWORD *)(v1 + 792);
            return Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)(v47, (uint64_t)v2, v67);
          }
          swift_bridgeObjectRelease();
        }
      }
      RERealityFileAssetDescriptorGetFilename();
      static String.Encoding.utf8.getter();
      v63 = String.init(cString:encoding:)();
      if (v64)
        v65 = v63;
      else
        v65 = 0xD000000000000010;
      if (v64)
        v66 = v64;
      else
        v66 = 0x800000021BE8A9D0;
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError();
      swift_allocError();
      *(_QWORD *)v61 = v65;
      *(_QWORD *)(v61 + 8) = v66;
      *(_QWORD *)(v61 + 16) = 0;
      *(_QWORD *)(v61 + 24) = 0;
      v62 = 3;
    }
    else
    {
      RERealityFileAssetDescriptorGetFilename();
      static String.Encoding.utf8.getter();
      v57 = String.init(cString:encoding:)();
      if (v58)
        v59 = v57;
      else
        v59 = 0xD000000000000010;
      if (v58)
        v60 = v58;
      else
        v60 = 0x800000021BE8A9D0;
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError();
      swift_allocError();
      *(_QWORD *)v61 = v59;
      *(_QWORD *)(v61 + 8) = v60;
      *(_QWORD *)(v61 + 16) = 0;
      *(_QWORD *)(v61 + 24) = 0;
      v62 = 2;
    }
    *(_BYTE *)(v61 + 32) = v62;
    swift_willThrow();
    swift_release();
LABEL_37:
    outlined destroy of Entity.__LoadOptions((uint64_t)v2);
LABEL_41:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  if (!v23)
    goto LABEL_39;
LABEL_26:
  v69 = v2;
  v68 = v1;
  v72 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
  if ((v23 & 0x8000000000000000) == 0)
  {
    v25 = 0;
    v26 = v72;
    v27 = v22 & 0xC000000000000001;
    v28 = v22;
    do
    {
      if (v27)
      {
        v29 = MEMORY[0x220769770](v25, v22);
      }
      else
      {
        v29 = *(_QWORD *)(v22 + 8 * v25 + 32);
        swift_retain();
      }
      v31 = *(_QWORD *)(v29 + 32);
      v30 = *(_QWORD *)(v29 + 40);
      swift_bridgeObjectRetain();
      swift_release();
      v33 = *(_QWORD *)(v72 + 16);
      v32 = *(_QWORD *)(v72 + 24);
      if (v33 >= v32 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
      ++v25;
      *(_QWORD *)(v72 + 16) = v33 + 1;
      v34 = v72 + 16 * v33;
      *(_QWORD *)(v34 + 32) = v31;
      *(_QWORD *)(v34 + 40) = v30;
      v22 = v28;
    }
    while (v23 != v25);
    swift_bridgeObjectRelease();
    v1 = v68;
    v2 = v69;
    goto LABEL_40;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 840) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 720);
  swift_release();
  Entity.copy(to:recursive:)(v1, 1);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of Entity.__LoadOptions(v0 + 432);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 872) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 720);
  swift_release();
  Entity.copy(to:recursive:)(v1, 1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 784);
  v3 = *(_QWORD *)(v0 + 776);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of Entity.__LoadOptions(v0 + 432);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  outlined destroy of Entity.__LoadOptions(v0 + 432);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 784);
  v3 = *(_QWORD *)(v0 + 776);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of Entity.__LoadOptions(v0 + 432);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 824) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 832) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 856) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 864) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.getDefaultSourcePath() in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  return 47;
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.configurationMapCache.getter in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  return swift_retain();
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.loadEntity(into:withConfigurations:loadOptions:) in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(a1, a2, a3);
}

uint64_t outlined assign with take of __DownsamplingStrategy?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __DownsamplingStrategy?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError;
  if (!lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ConfigurationCatalog.ConfigurableEntityError, &type metadata for Entity.ConfigurationCatalog.ConfigurableEntityError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError);
  }
  return result;
}

uint64_t outlined destroy of Entity.__LoadOptions(uint64_t a1)
{
  destroy for Entity.__LoadOptions(a1);
  return a1;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSsAE_pTg5166_s10RealityKit6EntityC0A10FoundationE20ConfigurationCatalogV0a4FileE6ReaderC04loadC04into18withConfigurations0I7OptionsyAC_SDySSSDyS2SGGSgAF04LoadM0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v20 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v20;
    v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v9 = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
      if (!v9)
        break;
      swift_bridgeObjectRetain();
      v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v11 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        break;
      }
      v12 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      v16 = *(_QWORD *)(v20 + 16);
      v15 = *(_QWORD *)(v20 + 24);
      if (v16 >= v15 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v6 += 2;
      *(_QWORD *)(v20 + 16) = v16 + 1;
      v17 = v20 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v14;
      *(_QWORD *)(v17 + 40) = v13;
      if (!--v2)
        return v3;
    }
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_QWORD *)v18 = v8;
    *(_QWORD *)(v18 + 8) = v7;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_BYTE *)(v18 + 40) = 4;
    swift_willThrow();
    swift_release();
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

_QWORD *outlined destroy of Entity.ConfigurationCatalog.LoadOptions(_QWORD *a1)
{
  destroy for Entity.ConfigurationCatalog.LoadOptions(a1);
  return a1;
}

uint64_t outlined init with copy of Entity.__LoadOptions(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Entity.__LoadOptions(a2, a1);
  return a2;
}

RealityKit::__Downsampling::Factor __swiftcall __Downsampling.Factor.init(mipmapOffset:)(RealityKit::__Downsampling::Factor mipmapOffset)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = 1 << SLOBYTE(mipmapOffset.value);
  if ((unint64_t)mipmapOffset.value >= 0x40)
    v2 = 0;
  if ((unint64_t)mipmapOffset.value > 0x40)
    v2 = 0;
  *v1 = v2;
  return mipmapOffset;
}

RealityKit::__Downsampling::Factor __swiftcall __Downsampling.Factor.init(value:)(RealityKit::__Downsampling::Factor value)
{
  RealityKit::__Downsampling::Factor *v1;

  v1->value = value.value;
  return value;
}

uint64_t __DownsamplingStrategyClosure.resolve(_:)()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

uint64_t protocol witness for __DownsamplingStrategy.resolve(_:) in conformance __DownsamplingStrategyClosure()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

void __Downsampling.Minimal.resolve(_:)(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  if (a1 >> 62)
    goto LABEL_22;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x24BEE4AF8];
    if (!v6)
    {
LABEL_20:
      *(_QWORD *)a2 = v7;
      return;
    }
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v16 = (_QWORD *)a2;
    v17 = v3;
    v8 = 0;
    v7 = v18;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x220769770](v8, a1) : *(id *)(a1 + 8 * v8 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, sel_mipmapLevelCount, v16, v17);

      v12 = (unint64_t)v11 - 1;
      if (__OFSUB__(v11, 1))
        break;
      v13 = v12 > 0x40;
      if (v12 >= 0x40)
        v14 = 0;
      else
        v14 = 1 << v12;
      if (v13)
        v3 = 0;
      else
        v3 = v14;
      a2 = *(_QWORD *)(v18 + 16);
      v15 = *(_QWORD *)(v18 + 24);
      if (a2 >= v15 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, a2 + 1, 1);
      ++v8;
      *(_QWORD *)(v18 + 16) = a2 + 1;
      *(_QWORD *)(v18 + 8 * a2 + 32) = v3;
      if (v6 == v8)
      {
        a2 = (unint64_t)v16;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
}

void protocol witness for __DownsamplingStrategy.resolve(_:) in conformance __Downsampling.Minimal(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  __Downsampling.Minimal.resolve(_:)(a1, a2);
}

unint64_t __Downsampling.Error.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;
  Swift::String v7;

  _StringGuts.grow(_:)(58);
  v0._countAndFlagsBits = 0x6764756220656874;
  v0._object = (void *)0xEE0020666F207465;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x800000021BE8AA30;
  v2._countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v7._object = v4;
  v5._countAndFlagsBits = 0x2E736574796220;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000037;
}

uint64_t __Downsampling.Budgeted.init(availableBytes:device:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t __Downsampling.Budgeted.resolve(_:)@<X0>(unint64_t a1@<X0>, int64x2_t **a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64x2_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int8x8_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  unint64_t v52;
  int64x2_t v53;
  int8x16_t v54;
  uint64_t v55;
  unint64_t v56;
  int8x8_t *v57;
  int8x8_t v58;
  int8x8_t v59;
  int64x2_t *v60;
  uint64_t v61;
  int64_t v62;
  int64x2_t *v63;
  int64_t v64;
  int64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int64_t v71;
  int64x2_t *v72;
  int64x2_t *v73;
  int64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64x2_t *v84;
  unint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t *v103;
  int64x2_t *v104;
  int64x2_t **v105;
  int64_t v106;
  int64_t v107;
  unint64_t v108;
  int64_t v109;
  uint64_t v110;
  int8x8_t v111;
  unint64_t v112;
  uint64_t v113;
  int64_t v114;
  int64x2_t *v115;
  int64x2_t *v116;

  v105 = a2;
  v4 = *v2;
  swift_unknownObjectRetain();
  v112 = v4;
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20MTLTextureDescriptorCG_Says6UInt64VGs5NeverOTg5072_s10RealityKit14__DownsamplingV8BudgetedV7resolveyAC10ResolutionOSaySo20de9CGKFSays6F9VGAJXEfU_0I3Kit02__K0V0M0VTf1cn_nTf4ng_n(a1);
  swift_unknownObjectRelease();
  v6 = *(_QWORD *)(v5 + 16);
  v7 = (int64x2_t *)MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v116 = (int64x2_t *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v8 = 0;
    v7 = v116;
    while (1)
    {
      v9 = *(_QWORD *)(v5 + 32 + 8 * v8);
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
        break;
      v11 = 0;
LABEL_9:
      v116 = v7;
      v16 = v7[1].u64[0];
      v15 = v7[1].u64[1];
      v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v7 = v116;
      }
      ++v8;
      v7[1].i64[0] = v17;
      v7[2].i64[v16] = v11;
      if (v8 == v6)
        goto LABEL_14;
    }
    v11 = 0;
    v12 = (uint64_t *)(v9 + 32);
    while (1)
    {
      v13 = *v12++;
      v14 = __CFADD__(v11, v13);
      v11 += v13;
      if (v14)
        break;
      if (!--v10)
        goto LABEL_9;
    }
    __break(1u);
    goto LABEL_48;
  }
  v17 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (v17)
  {
LABEL_14:
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = v7[2].i64[v18];
      v14 = __CFADD__(v19, v20);
      v19 = (int64x2_t *)((char *)v19 + v20);
      if (v14)
        goto LABEL_66;
      ++v18;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
    if (v112 >= (unint64_t)v19)
      goto LABEL_49;
    v19 = (int64x2_t *)MEMORY[0x24BEE4AF8];
    v113 = v5;
    if (v6)
    {
      v116 = (int64x2_t *)MEMORY[0x24BEE4AF8];
      v106 = v6;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      v19 = (int64x2_t *)MEMORY[0x24BEE4AF8];
      v21 = 0;
      v6 = (int64_t)v116;
      v108 = a1;
      v110 = v5 + 32;
      while (1)
      {
        v22 = *(_QWORD *)(v110 + 8 * v21);
        a1 = *(_QWORD *)(v22 + 16);
        if (a1)
          break;
        swift_bridgeObjectRetain();
        v28 = v19[1].u64[0];
        v23 = v19;
LABEL_30:
        a1 = v108;
        if (v28 >= 2)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v23 = (int64x2_t *)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
          v31 = 0;
          v32 = v23 + 2;
          do
          {
            v36 = v31 + 1;
            v37 = v28 - (v31 + 1);
            if (__OFSUB__(v28, v31 + 1))
              goto LABEL_65;
            if (v31 != v37)
            {
              if ((v31 & 0x8000000000000000) != 0)
                goto LABEL_67;
              v38 = v23[1].u64[0];
              if (v31 >= v38)
                goto LABEL_68;
              if (v37 >= v38)
                goto LABEL_69;
              v33 = &v23->i64[v31];
              v34 = v33[4];
              v35 = v37;
              v33[4] = v32->i64[v35];
              v32->i64[v35] = v34;
            }
            v31 = v36;
          }
          while (v28 >> 1 != v36);
        }
        swift_bridgeObjectRelease();
        v116 = (int64x2_t *)v6;
        v30 = *(_QWORD *)(v6 + 16);
        v29 = *(_QWORD *)(v6 + 24);
        if (v30 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
          v19 = (int64x2_t *)MEMORY[0x24BEE4AF8];
          v6 = (int64_t)v116;
        }
        ++v21;
        *(_QWORD *)(v6 + 16) = v30 + 1;
        *(_QWORD *)(v6 + 8 * v30 + 32) = v23;
        if (v21 == v106)
          goto LABEL_51;
      }
      v114 = v6;
      v115 = v19;
      swift_bridgeObjectRetain();
      v19 = (int64x2_t *)&v115;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1, 0);
      v6 = 0;
      v23 = v115;
      v5 = v22 + 24;
      while (a1)
      {
        v24 = a1 - 1;
        if (a1 - 1 >= *(_QWORD *)(v22 + 16))
          goto LABEL_63;
        v25 = *(_QWORD *)(v5 + 8 * a1);
        v14 = __CFADD__(v6, v25);
        v6 += v25;
        if (v14)
          goto LABEL_64;
        v115 = v23;
        v27 = v23[1].u64[0];
        v26 = v23[1].u64[1];
        v28 = v27 + 1;
        if (v27 >= v26 >> 1)
        {
          v19 = (int64x2_t *)&v115;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          v23 = v115;
        }
        v23[1].i64[0] = v28;
        v23[2].i64[v27] = v6;
        a1 = v24;
        if (!v24)
        {
          v5 = v113;
          v6 = v114;
          v19 = (int64x2_t *)MEMORY[0x24BEE4AF8];
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
LABEL_51:
      v114 = v6;
      if (!(a1 >> 62))
      {
        v40 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v40)
          goto LABEL_71;
        goto LABEL_53;
      }
    }
    swift_bridgeObjectRetain();
    v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v40)
    {
LABEL_71:
      v47 = v19[1].u64[0];
      if (!v47)
      {
        swift_bridgeObjectRelease();
        goto LABEL_121;
      }
LABEL_72:
      if (v47 >= 4)
      {
        v48 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        v50 = v19 + 3;
        v51 = 0uLL;
        v52 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        v53 = 0uLL;
        do
        {
          v51 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v50[-1], v51), (int8x16_t)v50[-1], (int8x16_t)v51);
          v53 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(*v50, v53), *(int8x16_t *)v50, (int8x16_t)v53);
          v50 += 2;
          v52 -= 4;
        }
        while (v52);
        v54 = vbslq_s8((int8x16_t)vcgtq_s64(v51, v53), (int8x16_t)v51, (int8x16_t)v53);
        v55 = vextq_s8(v54, v54, 8uLL).u64[0];
        v49 = vbsl_s8((int8x8_t)vcgtd_s64(v54.i64[0], v55), *(int8x8_t *)v54.i8, (int8x8_t)v55);
        if (v47 == v48)
          goto LABEL_81;
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
      v56 = v47 - v48;
      v57 = (int8x8_t *)&v19[2] + v48;
      do
      {
        v59 = *v57++;
        v58 = v59;
        if (*(_QWORD *)&v59 > *(_QWORD *)&v49)
          v49 = v58;
        --v56;
      }
      while (v56);
LABEL_81:
      result = swift_bridgeObjectRelease();
      v60 = (int64x2_t *)MEMORY[0x24BEE4AF8];
      if (v49)
      {
        v61 = 0;
        v62 = *(_QWORD *)(v6 + 16);
        v107 = v6 + 32;
        v109 = v62;
        v111 = v49;
        while (v61 != *(_QWORD *)&v49)
        {
          if (v62)
          {
            v116 = v60;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62, 0);
            v63 = v116;
            v64 = v107;
            v65 = v62;
            while (1)
            {
              v66 = *(_QWORD *)(*(_QWORD *)v64 + 16);
              v67 = (uint64_t)(v66 - 1) >= v61 ? v61 : v66 - 1;
              if (v67 >= v66)
                break;
              v68 = *(_QWORD *)(*(_QWORD *)v64 + 8 * v67 + 32);
              v116 = v63;
              v70 = v63[1].u64[0];
              v69 = v63[1].u64[1];
              v71 = v70 + 1;
              if (v70 >= v69 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
                v63 = v116;
              }
              v63[1].i64[0] = v71;
              v72 = &v63[v70];
              v72[2].i64[0] = v68;
              v72[2].i64[1] = v67;
              v64 += 8;
              if (!--v65)
              {
                v60 = (int64x2_t *)MEMORY[0x24BEE4AF8];
                goto LABEL_96;
              }
            }
LABEL_140:
            __break(1u);
LABEL_141:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v104 = (int64x2_t *)MEMORY[0x24BEE4AF8];
            result = swift_bridgeObjectRelease();
            *v105 = v104;
            return result;
          }
          v71 = v60[1].i64[0];
          if (v71)
          {
            v63 = v60;
LABEL_96:
            v116 = v60;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
            v73 = v116;
            v74 = v116[1].i64[0];
            v75 = 2;
            v76 = v71;
            do
            {
              v77 = v74;
              v78 = v63[v75].i64[0];
              v116 = v73;
              v79 = v73[1].u64[1];
              ++v74;
              if (v77 >= v79 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v74, 1);
                v73 = v116;
              }
              v73[1].i64[0] = v74;
              v73[2].i64[v77] = v78;
              ++v75;
              --v76;
            }
            while (v76);
            v80 = 0;
            v81 = 0;
            v62 = v109;
            v49 = v111;
            do
            {
              v82 = v73[2].i64[v80];
              v14 = __CFADD__(v81, v82);
              v81 += v82;
              if (v14)
              {
                __break(1u);
                goto LABEL_140;
              }
              ++v80;
            }
            while (v77 + 1 != v80);
            swift_bridgeObjectRelease();
            if (v81 >= v112)
            {
              result = swift_bridgeObjectRelease();
              v5 = v113;
              v60 = (int64x2_t *)MEMORY[0x24BEE4AF8];
              goto LABEL_105;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v116 = (int64x2_t *)MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
            v83 = 5;
            v84 = v116;
            do
            {
              v85 = v63->u64[v83];
              v86 = v85 > 0x40;
              if (v85 >= 0x40)
                v87 = 0;
              else
                v87 = 1 << v85;
              if (v86)
                v88 = 0;
              else
                v88 = v87;
              v116 = v84;
              v90 = v84[1].u64[0];
              v89 = v84[1].u64[1];
              if (v90 >= v89 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
                v84 = v116;
              }
              v84[1].i64[0] = v90 + 1;
              v84[2].i64[v90] = v88;
              v83 += 2;
              --v71;
            }
            while (v71);
            result = swift_bridgeObjectRelease();
            *v105 = v84;
            return result;
          }
          swift_bridgeObjectRelease();
          if (v112)
            goto LABEL_141;
          result = swift_bridgeObjectRelease();
LABEL_105:
          if (++v61 == *(_QWORD *)&v49)
            goto LABEL_121;
        }
LABEL_143:
        __break(1u);
        goto LABEL_144;
      }
LABEL_121:
      swift_bridgeObjectRelease();
      v91 = *(_QWORD *)(v5 + 16);
      if (v91)
      {
        swift_bridgeObjectRetain();
        v92 = 0;
        v93 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v94 = *(_QWORD *)(v5 + 8 * v92 + 32);
          v95 = *(_QWORD *)(v94 + 16);
          if (v95)
          {
            v96 = *(_QWORD *)(v94 + 8 * v95 + 24);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93[2] + 1, 1, v93);
            v98 = v93[2];
            v97 = v93[3];
            if (v98 >= v97 >> 1)
              v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v97 > 1), v98 + 1, 1, v93);
            v93[2] = v98 + 1;
            v93[v98 + 4] = v96;
          }
          ++v92;
        }
        while (v91 != v92);
        swift_bridgeObjectRelease();
      }
      else
      {
        v93 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      result = swift_bridgeObjectRelease();
      v99 = v93[2];
      if (!v99)
      {
        v100 = 0;
LABEL_138:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type __Downsampling.Error and conformance __Downsampling.Error();
        swift_allocError();
        *v103 = v112;
        v103[1] = v100;
        return swift_willThrow();
      }
      v100 = 0;
      v101 = v93 + 4;
      while (1)
      {
        v102 = *v101++;
        v14 = __CFADD__(v100, v102);
        v100 += v102;
        if (v14)
          break;
        if (!--v99)
          goto LABEL_138;
      }
      __break(1u);
      goto LABEL_143;
    }
LABEL_53:
    v116 = v19;
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 & ~(v40 >> 63), 0);
    if (v40 < 0)
    {
LABEL_144:
      __break(1u);
      return result;
    }
    v41 = 0;
    v19 = v116;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v42 = (id)MEMORY[0x220769770](v41, a1);
      else
        v42 = *(id *)(a1 + 8 * v41 + 32);
      v43 = v42;
      v44 = objc_msgSend(v42, sel_mipmapLevelCount, v105);

      v116 = v19;
      v46 = v19[1].u64[0];
      v45 = v19[1].u64[1];
      v47 = v46 + 1;
      if (v46 >= v45 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
        v19 = v116;
      }
      ++v41;
      v19[1].i64[0] = v47;
      v19[2].i64[v46] = (uint64_t)v44;
    }
    while (v40 != v41);
    v5 = v113;
    v6 = v114;
    goto LABEL_72;
  }
LABEL_48:
  swift_bridgeObjectRelease();
LABEL_49:
  result = swift_bridgeObjectRelease();
  *v105 = 0;
  return result;
}

uint64_t protocol witness for __DownsamplingStrategy.resolve(_:) in conformance __Downsampling.Budgeted@<X0>(unint64_t a1@<X0>, int64x2_t **a2@<X8>)
{
  return __Downsampling.Budgeted.resolve(_:)(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So19MTLTextureLevelInfoVs5NeverOTg5076_s10RealityKit14__DownsamplingV18getMipmapByteSizes_6deviceSays6UInt64VGSo20d34DescriptorC_So9MTLDevice_ptFZSo0J9eF8VSiXEfU_So0V0_pSo0dT0CTf1cn_nTf4ngg_n(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v8 = result;
  v25 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v8 && (v4 & 0x8000000000000000) == 0)
  {
    v5 = v25;
    while (a2 != v8)
    {
      objc_msgSend(a4, sel_pixelFormat);
      objc_msgSend(a4, sel_width);
      objc_msgSend(a4, sel_height);
      objc_msgSend(a4, sel_depth);
      objc_msgSend(a4, sel_sampleCount);
      result = MTLGetTextureLevelInfoForDeviceWithOptions();
      v9 = v18;
      v10 = v19;
      v11 = v20;
      v12 = v21;
      v13 = v22;
      v14 = v23;
      v16 = *(_QWORD *)(v25 + 16);
      v15 = *(_QWORD *)(v25 + 24);
      if (v16 >= v15 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v14 = v23;
        v13 = v22;
        v12 = v21;
        v11 = v20;
        v10 = v19;
        v9 = v18;
      }
      *(_QWORD *)(v25 + 16) = v16 + 1;
      v17 = v25 + 104 * v16;
      *(_OWORD *)(v17 + 32) = v9;
      *(_OWORD *)(v17 + 48) = v10;
      *(_OWORD *)(v17 + 64) = v11;
      *(_OWORD *)(v17 + 80) = v12;
      *(_OWORD *)(v17 + 96) = v13;
      *(_OWORD *)(v17 + 112) = v14;
      *(_QWORD *)(v17 + 128) = v24;
      if (a2 == ++v8)
        return v5;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized static __Downsampling.getMipmapByteSizes(_:device:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;

  v4 = (uint64_t)objc_msgSend(a1, sel_mipmapLevelCount);
  if (v4 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v5 = v4;
  swift_unknownObjectRetain();
  v6 = a1;
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So19MTLTextureLevelInfoVs5NeverOTg5076_s10RealityKit14__DownsamplingV18getMipmapByteSizes_6deviceSays6UInt64VGSo20d34DescriptorC_So9MTLDevice_ptFZSo0J9eF8VSiXEfU_So0V0_pSo0dT0CTf1cn_nTf4ngg_n(0, v5, a2, v6);
  swift_unknownObjectRelease();

  if (objc_msgSend(v6, sel_textureType) == (id)5)
    v8 = 6;
  else
    v8 = 1;
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = 128;
    v11 = v17;
    while (1)
    {
      v12 = *(_QWORD *)(v7 + v10);
      v13 = v8 * v12;
      if ((unsigned __int128)(v8 * (__int128)v12) >> 64 != (v8 * v12) >> 63)
        break;
      if (v13 < 0)
        goto LABEL_17;
      v15 = *(_QWORD *)(v17 + 16);
      v14 = *(_QWORD *)(v17 + 24);
      if (v15 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v17 + 16) = v15 + 1;
      *(_QWORD *)(v17 + 8 * v15 + 32) = v13;
      v10 += 104;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20MTLTextureDescriptorCG_Says6UInt64VGs5NeverOTg5072_s10RealityKit14__DownsamplingV8BudgetedV7resolveyAC10ResolutionOSaySo20de9CGKFSays6F9VGAJXEfU_0I3Kit02__K0V0M0VTf1cn_nTf4ng_n(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t result;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_39;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v46 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v35 = v1 & 0xC000000000000001;
    v3 = v46;
    v32 = v1 + 32;
    v5 = MEMORY[0x24BEE4AF8];
    v33 = v2;
    v34 = v1;
    while (v4 != v2)
    {
      if (v35)
        v6 = (id)MEMORY[0x220769770](v4, v1);
      else
        v6 = *(id *)(v32 + 8 * v4);
      v7 = v6;
      v8 = (int64_t)objc_msgSend(v6, sel_mipmapLevelCount);
      if (v8 < 0)
        goto LABEL_38;
      v9 = v8;
      v37 = v3;
      v38 = v4;
      if (v8)
      {
        swift_unknownObjectRetain();
        v1 = (unint64_t)v7;
        v10 = v7;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
        v11 = 0;
        v12 = v5;
        while (v9 != v11)
        {
          objc_msgSend(v10, sel_pixelFormat);
          objc_msgSend(v10, sel_width);
          objc_msgSend(v10, sel_height);
          objc_msgSend(v10, sel_depth);
          objc_msgSend(v10, sel_sampleCount);
          MTLGetTextureLevelInfoForDeviceWithOptions();
          v13 = v39;
          v14 = v40;
          v15 = v41;
          v16 = v42;
          v17 = v43;
          v18 = v44;
          v20 = *(_QWORD *)(v5 + 16);
          v19 = *(_QWORD *)(v5 + 24);
          if (v20 >= v19 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            v18 = v44;
            v17 = v43;
            v16 = v42;
            v15 = v41;
            v14 = v40;
            v13 = v39;
          }
          ++v11;
          *(_QWORD *)(v5 + 16) = v20 + 1;
          v21 = v5 + 104 * v20;
          *(_OWORD *)(v21 + 32) = v13;
          *(_OWORD *)(v21 + 48) = v14;
          *(_OWORD *)(v21 + 64) = v15;
          *(_OWORD *)(v21 + 80) = v16;
          *(_OWORD *)(v21 + 96) = v17;
          *(_OWORD *)(v21 + 112) = v18;
          *(_QWORD *)(v21 + 128) = v45;
          if (v9 == v11)
          {
            swift_unknownObjectRelease();

            v5 = MEMORY[0x24BEE4AF8];
            v7 = (void *)v1;
            goto LABEL_19;
          }
        }
        __break(1u);
        goto LABEL_36;
      }
      v12 = v5;
LABEL_19:
      if (objc_msgSend(v7, sel_textureType) == (id)5)
        v22 = 6;
      else
        v22 = 1;
      v23 = *(_QWORD *)(v12 + 16);
      if (v23)
      {
        v36 = v7;
        *(_QWORD *)&v39 = v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
        v24 = v5;
        v25 = 128;
        while (1)
        {
          v26 = *(_QWORD *)(v12 + v25);
          v27 = v22 * v26;
          if ((unsigned __int128)(v22 * (__int128)v26) >> 64 != (v22 * v26) >> 63)
            break;
          if (v27 < 0)
            goto LABEL_41;
          *(_QWORD *)&v39 = v5;
          v1 = *(_QWORD *)(v5 + 16);
          v28 = *(_QWORD *)(v5 + 24);
          if (v1 >= v28 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v1 + 1, 1);
          *(_QWORD *)(v5 + 16) = v1 + 1;
          *(_QWORD *)(v5 + 8 * v1 + 32) = v27;
          v25 += 104;
          if (!--v23)
          {

            swift_bridgeObjectRelease();
            v5 = MEMORY[0x24BEE4AF8];
            goto LABEL_31;
          }
        }
LABEL_36:
        __break(1u);
        break;
      }

      swift_bridgeObjectRelease();
      v24 = v5;
LABEL_31:
      v3 = v37;
      v30 = *(_QWORD *)(v37 + 16);
      v29 = *(_QWORD *)(v37 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v5 = MEMORY[0x24BEE4AF8];
        v3 = v37;
      }
      v4 = v38 + 1;
      *(_QWORD *)(v3 + 16) = v30 + 1;
      *(_QWORD *)(v3 + 8 * v30 + 32) = v24;
      v2 = v33;
      v1 = v34;
      if (v38 + 1 == v33)
        return v3;
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_41:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type __Downsampling.Error and conformance __Downsampling.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __Downsampling.Error and conformance __Downsampling.Error;
  if (!lazy protocol witness table cache variable for type __Downsampling.Error and conformance __Downsampling.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __Downsampling.Error, &type metadata for __Downsampling.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __Downsampling.Error and conformance __Downsampling.Error);
  }
  return result;
}

ValueMetadata *type metadata accessor for __Downsampling()
{
  return &type metadata for __Downsampling;
}

ValueMetadata *type metadata accessor for __Downsampling.Factor()
{
  return &type metadata for __Downsampling.Factor;
}

_QWORD *initializeBufferWithCopyOfBuffer for __Downsampling.Resolution(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for __Downsampling.Resolution(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for __Downsampling.Resolution(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __Downsampling.Resolution()
{
  return &type metadata for __Downsampling.Resolution;
}

uint64_t dispatch thunk of __DownsamplingStrategy.resolve(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

_QWORD *initializeBufferWithCopyOfBuffer for __DownsamplingStrategyClosure(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for __DownsamplingStrategyClosure(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for __DownsamplingStrategyClosure(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __DownsamplingStrategyClosure()
{
  return &type metadata for __DownsamplingStrategyClosure;
}

ValueMetadata *type metadata accessor for __Downsampling.Minimal()
{
  return &type metadata for __Downsampling.Minimal;
}

ValueMetadata *type metadata accessor for __Downsampling.Error()
{
  return &type metadata for __Downsampling.Error;
}

_QWORD *initializeBufferWithCopyOfBuffer for __Downsampling.Budgeted(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for __Downsampling.Budgeted()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for __Downsampling.Budgeted(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for __Downsampling.Budgeted(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __Downsampling.Budgeted()
{
  return &type metadata for __Downsampling.Budgeted;
}

uint64_t VideoPlaybackController.init(fromCore:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int AudioInputMode;
  unsigned int v6;
  float v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int DesiredViewingMode;
  uint64_t result;
  uint64_t v21;

  v2 = v1;
  *(_BYTE *)(v1 + 24) = 1;
  v4 = v1 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)(v4 - 8) = a1;
  swift_retain();
  AudioInputMode = REVideoAssetGetAudioInputMode();
  if (AudioInputMode >= 3)
    goto LABEL_36;
  v6 = 0x20001u >> (8 * AudioInputMode);
  swift_beginAccess();
  *(_BYTE *)(v2 + 24) = v6;
  REVideoAssetGetReverbSendLevelDecibels();
  *(double *)(v2 + 32) = v7;
  REVideoAssetSetReverbSendLevelDecibels();
  v8 = (uint64_t *)(a1 + 24);
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 24);
  v21 = MEMORY[0x24BEE4AF8];
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10)
      goto LABEL_4;
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_4:
      if (v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          if ((v9 & 0xC000000000000001) != 0)
            MEMORY[0x220769770](i, v9);
          else
            swift_retain();
          Strong = swift_weakLoadStrong();
          swift_release();
          if (Strong)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        v13 = v21;
        goto LABEL_16;
      }
      __break(1u);
LABEL_36:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  v13 = MEMORY[0x24BEE4AF8];
LABEL_16:
  *v8 = v13;
  swift_bridgeObjectRelease();
  v14 = *v8;
  if ((unint64_t)*v8 >> 62)
    goto LABEL_32;
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v15)
  {
    v16 = 4;
    while (1)
    {
      v17 = v16 - 4;
      if ((v14 & 0xC000000000000001) == 0)
        break;
      MEMORY[0x220769770](v16 - 4, v14);
      v18 = v16 - 3;
      if (__OFADD__(v17, 1))
        goto LABEL_31;
LABEL_27:
      if (!swift_weakLoadStrong())
        goto LABEL_20;
      REVideoComponentGetComponentType();
      if (!REEntityGetComponentByClass())
      {
        swift_release();
LABEL_20:
        swift_release();
        goto LABEL_21;
      }
      DesiredViewingMode = REVideoComponentGetDesiredViewingMode();
      swift_release();
      swift_release();
      if (DesiredViewingMode == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        *(_BYTE *)(v2 + 40) = 0;
        return v2;
      }
LABEL_21:
      ++v16;
      if (v18 == v15)
        goto LABEL_33;
    }
    swift_retain();
    v18 = v16 - 3;
    if (!__OFADD__(v17, 1))
      goto LABEL_27;
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_33:
  swift_release();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t VideoPlaybackController.reverbSendLevel.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
  return REVideoAssetSetReverbSendLevelDecibels();
}

uint64_t VideoPlaybackController.init(videoResource:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t i;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(v1 + 24) = 1;
  v2 = v1 + 24;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  *(_QWORD *)(v2 - 8) = a1;
  swift_beginAccess();
  swift_retain();
  REVideoAssetSetAudioInputMode();
  REVideoAssetSetReverbSendLevelDecibels();
  v3 = (uint64_t *)(*(_QWORD *)(v2 - 8) + 24);
  swift_beginAccess();
  v4 = *v3;
  v14 = MEMORY[0x24BEE4AF8];
  if ((unint64_t)*v3 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v5 = result;
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  result = swift_bridgeObjectRetain();
  if (!v5)
    goto LABEL_14;
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      MEMORY[0x220769770](i, v4);
    else
      swift_retain();
    Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  v9 = v14;
LABEL_15:
  *v3 = v9;
  swift_bridgeObjectRelease();
  v10 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_17;
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return v13;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v11 = result;
  if (!result)
    goto LABEL_29;
LABEL_17:
  if (v11 >= 1)
  {
    for (j = 0; j != v11; ++j)
    {
      if ((v10 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](j, v10);
      else
        swift_retain();
      if (swift_weakLoadStrong())
      {
        REVideoComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REVideoComponentSetDesiredViewingMode();
          RENetworkMarkComponentDirty();
        }
        swift_release();
      }
      swift_release();
    }
    goto LABEL_29;
  }
LABEL_31:
  __break(1u);
  return result;
}

double VideoPlaybackController.reverbSendLevel.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t VideoPlaybackController.audioInputMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 24);
  return result;
}

uint64_t VideoPlaybackController.audioInputMode.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  swift_beginAccess();
  *(_BYTE *)(v1 + 24) = v2;
  return REVideoAssetSetAudioInputMode();
}

uint64_t (*VideoPlaybackController.audioInputMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return VideoPlaybackController.audioInputMode.modify;
}

uint64_t VideoPlaybackController.audioInputMode.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return REVideoAssetSetAudioInputMode();
  return result;
}

uint64_t VideoPlaybackController._preferredViewingMode.didset()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 16) + 24);
  swift_beginAccess();
  v2 = *v1;
  v11 = MEMORY[0x24BEE4AF8];
  if ((unint64_t)*v1 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v3 = result;
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  result = swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_14;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  for (i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
      MEMORY[0x220769770](i, v2);
    else
      swift_retain();
    Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  v7 = v11;
LABEL_15:
  *v1 = v7;
  swift_bridgeObjectRelease();
  v8 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_17;
LABEL_29:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v9 = result;
  if (!result)
    goto LABEL_29;
LABEL_17:
  if (v9 >= 1)
  {
    for (j = 0; j != v9; ++j)
    {
      if ((v8 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](j, v8);
      else
        swift_retain();
      if (swift_weakLoadStrong())
      {
        REVideoComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REVideoComponentSetDesiredViewingMode();
          RENetworkMarkComponentDirty();
        }
        swift_release();
      }
      swift_release();
    }
    goto LABEL_29;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t VideoPlaybackController.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t VideoPlaybackController.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t static VideoPlaybackController.ViewingMode.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  uint64_t result;

  if ((*a1 & 1) == 0 && (*a2 & 1) == 0)
    return 1;
  result = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void VideoPlaybackController.ViewingMode.hash(into:)()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
  {
    _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int VideoPlaybackController.ViewingMode.hashValue.getter()
{
  char *v0;
  char v1;
  Swift::Int result;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 1) != 0)
  {
    result = _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VideoPlaybackController.ViewingMode(_BYTE *a1, _BYTE *a2)
{
  uint64_t result;

  if ((*a1 & 1) == 0 && (*a2 & 1) == 0)
    return 1;
  result = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VideoPlaybackController.ViewingMode()
{
  char *v0;
  char v1;
  Swift::Int result;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 1) != 0)
  {
    result = _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance VideoPlaybackController.ViewingMode()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
  {
    _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VideoPlaybackController.ViewingMode()
{
  char *v0;
  char v1;
  Swift::Int result;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 1) != 0)
  {
    result = _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  return result;
}

uint64_t (*VideoPlaybackController.preferredViewingMode.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 40);
  return VideoPlaybackController.preferredViewingMode.modify;
}

uint64_t VideoPlaybackController.currentViewingMode.getter@<X0>(char *a1@<X8>)
{
  swift_retain();
  __VideoResource.currentViewingMode.getter(a1);
  return swift_release();
}

uint64_t VideoPlaybackController.currentImageSize.getter()
{
  uint64_t v0;

  swift_retain();
  v0 = __VideoResource.currentImageSize.getter();
  swift_release();
  return v0;
}

void VideoPlaybackController.desiredViewingMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

uint64_t VideoPlaybackController.desiredViewingMode.setter(_BYTE *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = *a1;
  return VideoPlaybackController._preferredViewingMode.didset();
}

uint64_t (*VideoPlaybackController.desiredViewingMode.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 40);
  return VideoPlaybackController.preferredViewingMode.modify;
}

uint64_t VideoPlaybackController.preferredViewingMode.modify(_BYTE *a1)
{
  *(_BYTE *)(*(_QWORD *)a1 + 40) = a1[8];
  return VideoPlaybackController._preferredViewingMode.didset();
}

uint64_t (*VideoPlaybackController.reverbSendLevel.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 32);
  return VideoPlaybackController.reverbSendLevel.modify;
}

uint64_t VideoPlaybackController.reverbSendLevel.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 32) = *a1;
  return REVideoAssetSetReverbSendLevelDecibels();
}

unint64_t lazy protocol witness table accessor for type VideoPlaybackController.ViewingMode and conformance VideoPlaybackController.ViewingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VideoPlaybackController.ViewingMode and conformance VideoPlaybackController.ViewingMode;
  if (!lazy protocol witness table cache variable for type VideoPlaybackController.ViewingMode and conformance VideoPlaybackController.ViewingMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VideoPlaybackController.ViewingMode, &type metadata for VideoPlaybackController.ViewingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlaybackController.ViewingMode and conformance VideoPlaybackController.ViewingMode);
  }
  return result;
}

uint64_t sub_21BBD5F4C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

uint64_t sub_21BBD5F90(char *a1)
{
  char v2;

  v2 = *a1;
  return VideoPlaybackController.audioInputMode.setter(&v2);
}

uint64_t sub_21BBD5FC4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + 40);
  return result;
}

uint64_t keypath_set_2Tm_2(_BYTE *a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 40) = *a1;
  return VideoPlaybackController._preferredViewingMode.didset();
}

double sub_21BBD6004@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(*(_QWORD *)a1 + 32);
  *a2 = result;
  return result;
}

uint64_t sub_21BBD6014(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 32) = *a1;
  return REVideoAssetSetReverbSendLevelDecibels();
}

uint64_t type metadata accessor for VideoPlaybackController()
{
  return objc_opt_self();
}

uint64_t method lookup function for VideoPlaybackController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VideoPlaybackController.audioInputMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of VideoPlaybackController.audioInputMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of VideoPlaybackController.audioInputMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t storeEnumTagSinglePayload for VideoPlaybackController.ViewingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BBD60CC + 4 * byte_21BE64395[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BBD6100 + 4 * byte_21BE64390[v4]))();
}

uint64_t sub_21BBD6100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBD6108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBD6110);
  return result;
}

uint64_t sub_21BBD611C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBD6124);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BBD6128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBD6130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VideoPlaybackController.ViewingMode()
{
  return &type metadata for VideoPlaybackController.ViewingMode;
}

RealityKit::__RKEntityProximityTrigger::ExitType_optional __swiftcall __RKEntityProximityTrigger.ExitType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (RealityKit::__RKEntityProximityTrigger::ExitType_optional)rawValue;
}

uint64_t __RKEntityProximityTrigger.ExitType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

RealityKit::__RKEntityProximityTrigger::ExitType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityProximityTrigger.ExitType(Swift::Int *a1)
{
  return __RKEntityProximityTrigger.ExitType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityProximityTrigger.ExitType()
{
  lazy protocol witness table accessor for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityProximityTrigger.ExitType()
{
  lazy protocol witness table accessor for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType();
  return RawRepresentable<>.encode(to:)();
}

float __RKEntityProximityTrigger.distance.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 32);
}

uint64_t __RKEntityProximityTrigger.distance.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 32) = a1;
  return result;
}

uint64_t (*__RKEntityProximityTrigger.distance.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityProximityTrigger.type.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 36);
  return result;
}

uint64_t __RKEntityProximityTrigger.type.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 36) = v2;
  return result;
}

uint64_t (*__RKEntityProximityTrigger.type.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityProximityTrigger.enterFired.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t __RKEntityProximityTrigger.exitFired.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 38);
}

uint64_t __RKEntityProximityTrigger.__allocating_init(targetEntity:distance:type:)(uint64_t a1, char *a2, float a3)
{
  uint64_t v6;
  char v7;

  v6 = swift_allocObject();
  v7 = *a2;
  *(_QWORD *)(v6 + 24) = 0;
  *(_WORD *)(v6 + 37) = 0;
  swift_beginAccess();
  *(_QWORD *)(v6 + 24) = a1;
  swift_retain();
  swift_release();
  *(float *)(v6 + 32) = a3;
  *(_BYTE *)(v6 + 36) = v7;
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 18) = 0;
  return v6;
}

uint64_t __RKEntityProximityTrigger.init(targetEntity:distance:type:)(uint64_t a1, char *a2, float a3)
{
  uint64_t v3;
  char v6;

  v6 = *a2;
  *(_QWORD *)(v3 + 24) = 0;
  *(_WORD *)(v3 + 37) = 0;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = a1;
  swift_retain();
  swift_release();
  *(float *)(v3 + 32) = a3;
  *(_BYTE *)(v3 + 36) = v6;
  swift_release();
  *(_WORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 18) = 0;
  return v3;
}

uint64_t __RKEntityProximityTrigger.matches(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v32;
  char *v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[8];
  _BYTE v53[64];

  v4 = v1;
  v6 = type metadata accessor for UUID();
  *(_QWORD *)&v50 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v49 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v46 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v46 - v18;
  type metadata accessor for __RKEntityProximityTrigger();
  v51 = a1;
  v20 = swift_dynamicCastClass();
  if (!v20)
    goto LABEL_16;
  v2 = v20;
  v48 = (_BYTE *)(v4 + 36);
  swift_beginAccess();
  v21 = *(unsigned __int8 *)(v4 + 36);
  swift_beginAccess();
  if (v21 != *(unsigned __int8 *)(v2 + 36))
    goto LABEL_16;
  swift_beginAccess();
  v47 = v4;
  if (*(_QWORD *)(v4 + 24))
  {
    swift_retain();
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v19);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v19, 1, 1, v6);
    swift_retain();
  }
  v22 = (uint64_t)v13;
  swift_beginAccess();
  v23 = v50;
  if (*(_QWORD *)(v2 + 24))
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v16);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v16, 1, 1, v6);
  }
  v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v10);
  outlined init with copy of UUID?((uint64_t)v16, v24);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v25((uint64_t)v10, 1, v6) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    if (v25(v24, 1, v6) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
      goto LABEL_31;
    }
    goto LABEL_14;
  }
  outlined init with copy of UUID?((uint64_t)v10, v22);
  if (v25(v24, 1, v6) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v6);
LABEL_14:
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_15:
    swift_release();
    v4 = v47;
    goto LABEL_16;
  }
  v33 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v49, v24, v6);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  v35 = *(void (**)(char *, uint64_t))(v23 + 8);
  v35(v33, v6);
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
  v35((char *)v22, v6);
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
  if ((v34 & 1) == 0)
    goto LABEL_15;
LABEL_31:
  v4 = v47;
  swift_beginAccess();
  v3 = *(float *)(v4 + 32);
  if (!*(_QWORD *)(v4 + 24))
    goto LABEL_51;
  swift_retain();
  v36 = Entity.rcSceneEntity.getter();
  swift_release();
  if (!v36)
    goto LABEL_51;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v52);
  v38 = v52[0];
  v37 = v52[1];
  swift_release();
  outlined init with take of Transform?((uint64_t)v52, (uint64_t)v53);
  if ((v53[48] & 1) == 0)
  {
    *(_QWORD *)&v39 = v38;
    *((_QWORD *)&v39 + 1) = v37;
    goto LABEL_50;
  }
  if (one-time initialization token for identity != -1)
    goto LABEL_71;
  while (1)
  {
    v39 = static Transform.identity;
LABEL_50:
    v50 = v39;
    swift_release();
    v3 = v3 * fmaxf(fmaxf(*(float *)&v50, *((float *)&v50 + 2)), *((float *)&v50 + 1));
LABEL_51:
    swift_beginAccess();
    v45 = *(float *)(v2 + 32);
    swift_release();
    if (!*v48)
      break;
    if (v45 <= v3)
    {
      swift_beginAccess();
      *(_BYTE *)(v4 + 38) = 0;
      swift_beginAccess();
      v26 = 0;
      if ((*(_BYTE *)(v4 + 37) & 1) == 0)
      {
        *(_BYTE *)(v4 + 37) = 1;
        return 1;
      }
      return v26;
    }
    swift_beginAccess();
    *(_BYTE *)(v4 + 37) = 0;
    swift_beginAccess();
    if ((*(_BYTE *)(v4 + 38) & 1) == 0)
    {
      *(_BYTE *)(v4 + 38) = 1;
      return 1;
    }
LABEL_16:
    type metadata accessor for __RKEntityTriggerGroup();
    v26 = swift_dynamicCastClass();
    if (!v26)
      return v26;
    swift_beginAccess();
    v27 = *(_QWORD *)(v26 + 24);
    if (v27 >> 62)
    {
LABEL_65:
      swift_retain();
      swift_bridgeObjectRetain();
      v28 = _CocoaArrayWrapper.endIndex.getter();
      if (!v28)
        goto LABEL_25;
    }
    else
    {
      v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (!v28)
        goto LABEL_25;
    }
    v29 = v27 & 0xC000000000000001;
    if ((v27 & 0xC000000000000001) != 0)
    {
      v2 = MEMORY[0x220769770](0, v27);
    }
    else
    {
      if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      v2 = *(_QWORD *)(v27 + 32);
      swift_retain();
    }
    v30 = __RKEntityProximityTrigger.matches(with:)(v2);
    swift_release();
    if ((v30 & 1) != 0)
      goto LABEL_23;
    if (v28 == 1)
      goto LABEL_25;
    if (v29)
    {
      v32 = MEMORY[0x220769770](1, v27);
LABEL_38:
      v40 = __RKEntityProximityTrigger.matches(with:)(v32);
      swift_release();
      if ((v40 & 1) != 0)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        swift_release();
        return 1;
      }
      v2 = 0;
      v41 = v28 - 2;
      while (v41 != v2)
      {
        v42 = v2 + 2;
        if (v29)
        {
          v43 = MEMORY[0x220769770](v2 + 2, v27);
          if (__OFADD__(v42, 1))
            goto LABEL_64;
        }
        else
        {
          if (v42 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_69;
          v43 = *(_QWORD *)(v27 + 8 * v2 + 48);
          swift_retain();
          if (__OFADD__(v42, 1))
          {
LABEL_64:
            __break(1u);
            goto LABEL_65;
          }
        }
        v44 = __RKEntityProximityTrigger.matches(with:)(v43);
        swift_release();
        ++v2;
        if ((v44 & 1) != 0)
          goto LABEL_23;
      }
LABEL_25:
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v32 = *(_QWORD *)(v27 + 40);
      swift_retain();
      goto LABEL_38;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    swift_once();
  }
  swift_beginAccess();
  *(_BYTE *)(v4 + 38) = 0;
  if (v45 > v3 || (v26 = 1, swift_beginAccess(), (*(_BYTE *)(v4 + 37) & 1) != 0))
  {
    if (v3 >= v45)
      return 0;
    swift_beginAccess();
    if (*(_BYTE *)(v4 + 37) != 1)
      return 0;
    v26 = 0;
    *(_BYTE *)(v4 + 37) = 0;
  }
  else
  {
    *(_BYTE *)(v4 + 37) = 1;
  }
  return v26;
}

uint64_t type metadata accessor for __RKEntityProximityTrigger()
{
  return objc_opt_self();
}

uint64_t __RKEntityProximityTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  swift_beginAccess();
  v4 = *(_DWORD *)(v1 + 32);
  swift_beginAccess();
  v5 = *(_BYTE *)(v1 + 36);
  v6 = type metadata accessor for __RKEntityProximityTrigger();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 24) = 0;
  *(_WORD *)(v7 + 37) = 0;
  swift_beginAccess();
  *(_QWORD *)(v7 + 24) = v3;
  swift_retain();
  swift_retain();
  swift_release();
  *(_DWORD *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 36) = v5;
  result = swift_release();
  *(_WORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 18) = 0;
  a1[3] = v6;
  *a1 = v7;
  return result;
}

uint64_t __RKEntityProximityTrigger.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  if (!v5 || *(_QWORD *)(v5 + 16) != *(_QWORD *)(a1 + 16))
    return 0;
  swift_beginAccess();
  v7 = *(_DWORD *)(v2 + 32);
  swift_beginAccess();
  v8 = *(_BYTE *)(v2 + 36);
  type metadata accessor for __RKEntityProximityTrigger();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  *(_WORD *)(v6 + 37) = 0;
  swift_beginAccess();
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  swift_retain();
  swift_release();
  *(_DWORD *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 36) = v8;
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 18) = 0;
  return v6;
}

void __RKEntityProximityTrigger.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityProximityTrigger.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityProximityTrigger.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t __RKEntityProximityTrigger.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_21BBD70B4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_retain();
}

float sub_21BBD7100@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *a1;
  swift_beginAccess();
  result = *(float *)(v3 + 32);
  *a2 = result;
  return result;
}

uint64_t sub_21BBD7144(int *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_DWORD *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_21BBD718C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 36);
  return result;
}

uint64_t sub_21BBD71D0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 36) = v2;
  return result;
}

uint64_t sub_21BBD7210@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 37);
  return result;
}

uint64_t sub_21BBD7254(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 37) = v2;
  return result;
}

uint64_t sub_21BBD7294@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 38);
  return result;
}

uint64_t sub_21BBD72D8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 38) = v2;
  return result;
}

uint64_t method lookup function for __RKEntityProximityTrigger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.targetEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.targetEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.targetEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.__targetEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.distance.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.distance.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.distance.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.type.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.type.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.type.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.enterFired.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.exitFired.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.__allocating_init(targetEntity:distance:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t storeEnumTagSinglePayload for __RKEntityProximityTrigger.ExitType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BBD7408 + 4 * byte_21BE64485[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BBD743C + 4 * byte_21BE64480[v4]))();
}

uint64_t sub_21BBD743C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBD7444(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBD744CLL);
  return result;
}

uint64_t sub_21BBD7458(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBD7460);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BBD7464(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBD746C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityProximityTrigger.ExitType()
{
  return &type metadata for __RKEntityProximityTrigger.ExitType;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for DirectionalLightComponent.Shadow.Type);
}

uint64_t static Component.__typeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

{
  return static Component.__typeName.getter(a1, a2);
}

uint64_t static Component.componentName.getter()
{
  swift_getMetatypeMetadata();
  return String.init<A>(reflecting:)();
}

{
  return static Component.componentName.getter();
}

uint64_t protocol witness for static Component.__size.getter in conformance DirectionalLightComponent.Shadow()
{
  return 25;
}

uint64_t static Component.__size.getter(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
}

{
  return static Component.__size.getter(a1);
}

double protocol witness for static Component.__load(from:) in conformance DirectionalLightComponent.Shadow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  double result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_BYTE *)(a1 + 24);
  result = *(double *)a1;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  *(_BYTE *)(a2 + 24) = v5;
  return result;
}

uint64_t static Component.__load(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

{
  return static Component.__load(from:)(a1, a2, a3);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized static Component.__store(attribute:to:offset:deinitialize:)(a1, a2, a4, a5);
}

{
  return specialized static Component.__store(attribute:to:offset:deinitialize:)(a1, a2, a4, a5);
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  double result;
  double v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;
  _BYTE v9[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v4;
  *(double *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  *(_BYTE *)(a2 + 24) = v8;
  return result;
}

uint64_t static Component.__store(attribute:to:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 40))(a1, a2, a3, 1, a4);
}

void static Component.__free(to:offset:)()
{
  specialized static Component.__free(to:offset:)();
}

{
  specialized static Component.__free(to:offset:)();
}

double protocol witness for static Component.__load(from:offset:) in conformance DirectionalLightComponent.Shadow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  double result;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a1 + 20);
  v10 = *(_BYTE *)(a1 + 24);
  result = *(double *)a1;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_BYTE *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 28) = v8;
  *(_DWORD *)(v6 + 36) = v9;
  *(_BYTE *)(v6 + 40) = v10;
  return result;
}

uint64_t static Component.__load(from:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 32);
  a4[3] = a2;
  a4[4] = a3;
  __swift_allocate_boxed_opaque_existential_1(a4);
  return v7(a1, a2, a3);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for DirectionalLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance DirectionalLightComponent()
{
  return 13;
}

id protocol witness for static Component.__load(from:) in conformance DirectionalLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  int v3;
  char v4;

  v2 = *(void **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 12);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 12) = v4;
  return v2;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

id protocol witness for static Component.__load(from:offset:) in conformance DirectionalLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v4;
  int v5;
  char v6;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(void **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 12);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_DWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 12) = v6;
  return v4;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __AmbientLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance __AmbientLightComponent()
{
  return 12;
}

id protocol witness for static Component.__load(from:) in conformance __AmbientLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  int v3;

  v2 = *(void **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  return v2;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance __AmbientLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  float result;
  uint64_t v5;
  float v6;
  _BYTE v7[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v6;
  *(_QWORD *)a2 = v5;
  *(float *)(a2 + 8) = v6;
  return result;
}

id protocol witness for static Component.__load(from:offset:) in conformance __AmbientLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v4;
  int v5;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(void **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_DWORD *)(a4 + 8) = v5;
  return v4;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ReverbComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ReverbComponent.Type);
}

_BYTE *protocol witness for static Component.__load(from:) in conformance ReverbComponent@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ReverbComponent(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  char v4;
  _BYTE v5[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ReverbComponent(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  char v4;
  _BYTE v5[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AudioLibraryComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AudioLibraryComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance AudioLibraryComponent()
{
  return 8;
}

uint64_t protocol witness for static Component.__load(from:) in conformance AudioLibraryComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ImageBasedLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ImageBasedLightComponent()
{
  return 29;
}

uint64_t protocol witness for static Component.__load(from:) in conformance ImageBasedLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  char v7;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 20);
  v6 = *(_DWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 28);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 20) = v5;
  *(_DWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 28) = v7;
  return outlined copy of ImageBasedLightComponent.Source(v3, v2);
}

float protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ImageBasedLightComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  float result;
  __int128 v7;
  int v8;
  char v9;
  float v10;
  char v11;
  _BYTE v12[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v10;
  *(_OWORD *)a2 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 20) = v9;
  *(float *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 28) = v11;
  return result;
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  float result;
  __int128 v5;
  int v6;
  char v7;
  float v8;
  char v9;
  _BYTE v10[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v8;
  *(_OWORD *)a2 = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 20) = v7;
  *(float *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 28) = v9;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ImageBasedLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  char v12;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v8 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 20);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 28);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 36) = v10;
  *(_DWORD *)(v6 + 40) = v11;
  *(_BYTE *)(v6 + 44) = v12;
  return outlined copy of ImageBasedLightComponent.Source(v8, v7);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ImageBasedLightReceiverComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ImageBasedLightReceiverComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __ImageBasedLightComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance __ImageBasedLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  return swift_retain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance __ImageBasedLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance __ImageBasedLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v4;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_DWORD *)(a4 + 8) = v4;
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SceneUnderstandingComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SceneUnderstandingComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SceneUnderstandingComponent()
{
  return 16;
}

uint64_t protocol witness for static Component.__load(from:) in conformance SceneUnderstandingComponent@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_BYTE *)a2 = *(_BYTE *)result;
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SceneUnderstandingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SceneUnderstandingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance SceneUnderstandingComponent@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(_QWORD *)(result + 8);
  *(_BYTE *)a4 = *(_BYTE *)result;
  *(_QWORD *)(a4 + 8) = v4;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PhysicsBodyComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance PhysicsBodyComponent()
{
  return 172;
}

uint64_t protocol witness for static Component.__load(from:) in conformance PhysicsBodyComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_BYTE *)(a1 + 88);
  v8 = *(_BYTE *)(a1 + 89);
  v9 = *(_BYTE *)(a1 + 90);
  v10 = *(_BYTE *)(a1 + 91);
  v11 = *(_BYTE *)(a1 + 92);
  v12 = *(_BYTE *)(a1 + 93);
  v13 = *(_BYTE *)(a1 + 94);
  v14 = *(_BYTE *)(a1 + 95);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_BYTE *)(a1 + 160);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_DWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 80) = v6;
  *(_BYTE *)(a2 + 88) = v7;
  *(_BYTE *)(a2 + 89) = v8;
  *(_BYTE *)(a2 + 90) = v9;
  *(_BYTE *)(a2 + 91) = v10;
  *(_BYTE *)(a2 + 92) = v11;
  *(_BYTE *)(a2 + 93) = v12;
  *(_BYTE *)(a2 + 94) = v13;
  *(_BYTE *)(a2 + 95) = v14;
  *(_OWORD *)(a2 + 96) = v15;
  *(_OWORD *)(a2 + 112) = v16;
  *(_OWORD *)(a2 + 128) = v17;
  *(_OWORD *)(a2 + 144) = v18;
  *(_BYTE *)(a2 + 160) = v19;
  *(_QWORD *)(a2 + 164) = *(_QWORD *)(a1 + 164);
  return swift_retain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PhysicsBodyComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  double result;
  char v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  double v24;
  _BYTE v25[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_BYTE *)a2 = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v8;
  *(_OWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 80) = v10;
  *(_BYTE *)(a2 + 88) = v11;
  *(_BYTE *)(a2 + 89) = v12;
  *(_BYTE *)(a2 + 90) = v13;
  *(_BYTE *)(a2 + 91) = v14;
  *(_BYTE *)(a2 + 92) = v15;
  *(_BYTE *)(a2 + 93) = v16;
  *(_BYTE *)(a2 + 94) = v17;
  *(_BYTE *)(a2 + 95) = v18;
  *(_OWORD *)(a2 + 96) = v19;
  *(_OWORD *)(a2 + 112) = v20;
  *(_OWORD *)(a2 + 128) = v21;
  *(_OWORD *)(a2 + 144) = v22;
  *(_BYTE *)(a2 + 160) = v23;
  result = v24;
  *(double *)(a2 + 164) = v24;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance PhysicsBodyComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_BYTE *)(a1 + 88);
  v13 = *(_BYTE *)(a1 + 89);
  v14 = *(_BYTE *)(a1 + 90);
  v15 = *(_BYTE *)(a1 + 91);
  v16 = *(_BYTE *)(a1 + 92);
  v17 = *(_BYTE *)(a1 + 93);
  v18 = *(_BYTE *)(a1 + 94);
  v19 = *(_BYTE *)(a1 + 95);
  v20 = *(_OWORD *)(a1 + 96);
  v21 = *(_OWORD *)(a1 + 112);
  v22 = *(_OWORD *)(a1 + 128);
  v23 = *(_OWORD *)(a1 + 144);
  v24 = *(_BYTE *)(a1 + 160);
  *(_BYTE *)(v6 + 16) = *(_BYTE *)a1;
  *(_DWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v8;
  *(_OWORD *)(v6 + 64) = v9;
  *(_OWORD *)(v6 + 80) = v10;
  *(_QWORD *)(v6 + 96) = v11;
  *(_BYTE *)(v6 + 104) = v12;
  *(_BYTE *)(v6 + 105) = v13;
  *(_BYTE *)(v6 + 106) = v14;
  *(_BYTE *)(v6 + 107) = v15;
  *(_BYTE *)(v6 + 108) = v16;
  *(_BYTE *)(v6 + 109) = v17;
  *(_BYTE *)(v6 + 110) = v18;
  *(_BYTE *)(v6 + 111) = v19;
  *(_OWORD *)(v6 + 112) = v20;
  *(_OWORD *)(v6 + 128) = v21;
  *(_OWORD *)(v6 + 144) = v22;
  *(_OWORD *)(v6 + 160) = v23;
  *(_BYTE *)(v6 + 176) = v24;
  *(_QWORD *)(v6 + 180) = *(_QWORD *)(a1 + 164);
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PreviewSupportComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PreviewSupportComponent.Type);
}

void protocol witness for static Component.__fromCore(_:) in conformance PreviewSupportComponent()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static Component.__fromCore(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  static Component.__fromCore(_:)();
}

void protocol witness for Component.__toCore(_:) in conformance PreviewSupportComponent()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Component.__toCore(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static Component.__coreComponentType.getter in conformance PreviewSupportComponent(_DWORD *a1@<X8>)
{
  *a1 = 36;
}

void static Component.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 36;
}

{
  static Component.__coreComponentType.getter(a1);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SelectableSceneContentIdentifierComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SelectableSceneContentIdentifierComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SelectableSceneContentIdentifierComponent(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v4;
  _BYTE v5[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SelectableSceneContentIdentifierComponent(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v4;
  _BYTE v5[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *a2 = v4;
  return result;
}

_DWORD *protocol witness for static Component.__load(from:offset:) in conformance SelectableSceneContentIdentifierComponent@<X0>(_DWORD *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  *(_DWORD *)a4 = *result;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance EnvironmentLightingConfigurationComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for EnvironmentLightingConfigurationComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SynchronizationComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SynchronizationComponent()
{
  return 40;
}

void protocol witness for static Component.__load(from:) in conformance SynchronizationComponent(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 9);
  v4 = *(_BYTE *)(a1 + 10);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 9) = v3;
  *(_BYTE *)(a2 + 10) = v4;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v7;
  outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v6, v5);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SynchronizationComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SynchronizationComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

void protocol witness for static Component.__load(from:offset:) in conformance SynchronizationComponent(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 9);
  v9 = *(_BYTE *)(a1 + 10);
  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_BYTE *)(v6 + 24) = v7;
  *(_BYTE *)(v6 + 25) = v8;
  *(_BYTE *)(v6 + 26) = v9;
  *(_QWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 40) = v10;
  *(_QWORD *)(v6 + 48) = v12;
  outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, v10);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance CustomComponentProxy(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for CustomComponentProxy.Type);
}

_QWORD *protocol witness for static Component.__load(from:offset:) in conformance CustomComponentProxy@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  *a4 = *result;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PortalComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PortalComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance PortalComponent()
{
  return 97;
}

uint64_t protocol witness for static Component.__load(from:) in conformance PortalComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 48) = v2;
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(_BYTE *)(a2 + 96) = v3;
  return swift_retain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PortalComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;
  _BYTE v14[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_BYTE *)(a2 + 48) = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 80) = v12;
  *(_BYTE *)(a2 + 96) = v13;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance PortalComponent(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  char v11;
  _BYTE v12[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 48) = v8;
  result = *(double *)&v9;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v10;
  *(_BYTE *)(a2 + 96) = v11;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance PortalComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_BYTE *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  v9 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 48) = v9;
  *(_BYTE *)(v6 + 64) = v7;
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v6 + 96) = v10;
  *(_BYTE *)(v6 + 112) = v8;
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AdaptiveResolutionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AdaptiveResolutionComponent.Type);
}

float protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance EnvironmentLightingConfigurationComponent(uint64_t a1, float *a2)
{
  float result;
  float v4;
  _BYTE v5[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v4;
  *a2 = v4;
  return result;
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance EnvironmentLightingConfigurationComponent(uint64_t a1, float *a2)
{
  float result;
  float v4;
  _BYTE v5[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v4;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SpotLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SpotLightComponent.Shadow.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SpotLightComponent.Shadow()
{
  return 21;
}

float protocol witness for static Component.__load(from:) in conformance SpotLightComponent.Shadow@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;
  char v3;
  int v4;
  char v5;
  int v6;
  char v7;

  result = *(float *)a1;
  v3 = *(_BYTE *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 12);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 20);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_BYTE *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 20) = v7;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SpotLightComponent.Shadow(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance SpotLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  float result;
  float v4;
  char v5;
  int v6;
  char v7;
  int v8;
  char v9;
  _BYTE v10[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v4;
  *(float *)a2 = v4;
  *(_BYTE *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 12) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 20) = v9;
  return result;
}

void protocol witness for static Component.__free(to:offset:) in conformance SpotLightComponent.Shadow()
{
  JUMPOUT(0x220772F44);
}

float protocol witness for static Component.__load(from:offset:) in conformance SpotLightComponent.Shadow@<S0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  float result;
  char v5;
  int v6;
  char v7;
  int v8;
  char v9;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  result = *(float *)a1;
  v5 = *(_BYTE *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 20);
  *(_DWORD *)a4 = *(_DWORD *)a1;
  *(_BYTE *)(a4 + 4) = v5;
  *(_DWORD *)(a4 + 8) = v6;
  *(_BYTE *)(a4 + 12) = v7;
  *(_DWORD *)(a4 + 16) = v8;
  *(_BYTE *)(a4 + 20) = v9;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SpotLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SpotLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SpotLightComponent()
{
  return 28;
}

id protocol witness for static Component.__load(from:) in conformance SpotLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  int v3;

  v2 = *(void **)a1;
  v3 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = v3;
  return v2;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SpotLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SpotLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

id protocol witness for static Component.__load(from:offset:) in conformance SpotLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  void *v7;
  int v8;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(void **)a1;
  v8 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(v6 + 40) = v8;
  return v7;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AudioMixGroupsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AudioMixGroupsComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance RKARSegmentationComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for RKARSegmentationComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance RKARSegmentationComponent()
{
  return 32;
}

uint64_t protocol witness for static Component.__load(from:) in conformance RKARSegmentationComponent@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance RKARSegmentationComponent(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  double result;
  __int128 v7;
  __int128 v8;
  _BYTE v9[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v7;
  *a2 = v7;
  a2[1] = v8;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance RKARSegmentationComponent(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v5;
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance RKARSegmentationComponent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  a4[3] = a2;
  a4[4] = a3;
  v6 = (_QWORD *)swift_allocObject();
  *a4 = v6;
  v7 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  v6[2] = *a1;
  v6[3] = v7;
  v6[4] = v9;
  v6[5] = v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

_QWORD *static Component.registerComponent()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(a2 + 80))(&v5);
  if ((_DWORD)v5 == 36)
    return (_QWORD *)specialized static SceneManager.customComponentType(_:)(v2, a2);
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance VFXComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for VFXComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance VFXComponent()
{
  return 58;
}

uint64_t protocol witness for static Component.__load(from:) in conformance VFXComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 57);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 56) = v5;
  *(_BYTE *)(a2 + 57) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance VFXComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance VFXComponent(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  char v10;
  char v11;
  _BYTE v12[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = v8;
  result = *(double *)&v9;
  *(_OWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 57) = v11;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance VFXComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 56);
  v11 = *(_BYTE *)(a1 + 57);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v8;
  *(_QWORD *)(v6 + 48) = v9;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(v6 + 72) = v10;
  *(_BYTE *)(v6 + 73) = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for HoverEffectComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance HoverEffectComponent()
{
  return 17;
}

id protocol witness for static Component.__load(from:) in conformance HoverEffectComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  v4 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a2 + 16) = v4;
  return outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(v3, v2, v4);
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance HoverEffectComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;
  __int128 v7;
  char v8;
  _BYTE v9[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_BYTE *)(a2 + 16) = v8;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v5;
  char v6;
  _BYTE v7[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

id protocol witness for static Component.__load(from:offset:) in conformance HoverEffectComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v5 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v4;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a4 + 16) = v6;
  return outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(v5, v4, v6);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SkeletalPosesComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SkeletalPosesComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance SkeletalPosesComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SkeletalPosesComponent(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *a2 = v7;
  a2[1] = v8;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SkeletalPosesComponent(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance SkeletalPosesComponent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  a4[3] = a2;
  a4[4] = a3;
  v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PointLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PointLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance PointLightComponent()
{
  return 20;
}

id protocol witness for static Component.__load(from:) in conformance PointLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  int v3;

  v2 = *(void **)a1;
  v3 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = v3;
  return v2;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PointLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance PointLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

id protocol witness for static Component.__load(from:offset:) in conformance PointLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v4;
  int v5;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(void **)a1;
  v5 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a4 + 16) = v5;
  return v4;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PointLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PointLightComponent.Shadow.Type);
}

double protocol witness for static Component.__load(from:) in conformance PointLightComponent.Shadow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  int v3;
  char v4;
  int v5;
  char v6;
  double result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(_BYTE *)(a1 + 24);
  result = *(double *)a1;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  *(_BYTE *)(a2 + 24) = v6;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PointLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  double result;
  double v4;
  char v5;
  int v6;
  char v7;
  int v8;
  char v9;
  _BYTE v10[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v4;
  *(double *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v6;
  *(_BYTE *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v8;
  *(_BYTE *)(a2 + 24) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance PointLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  double result;
  double v4;
  char v5;
  int v6;
  char v7;
  int v8;
  char v9;
  _BYTE v10[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v4;
  *(double *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v6;
  *(_BYTE *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v8;
  *(_BYTE *)(a2 + 24) = v9;
  return result;
}

double protocol witness for static Component.__load(from:offset:) in conformance PointLightComponent.Shadow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  int v10;
  char v11;
  double result;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_BYTE *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 20);
  v11 = *(_BYTE *)(a1 + 24);
  result = *(double *)a1;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_BYTE *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 28) = v8;
  *(_BYTE *)(v6 + 32) = v9;
  *(_DWORD *)(v6 + 36) = v10;
  *(_BYTE *)(v6 + 40) = v11;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance WorldComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for WorldComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ImageBasedLightReceiverComponent(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v7;
  _BYTE v8[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *a2 = v7;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ImageBasedLightReceiverComponent(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE v6[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *a2 = v5;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ImageBasedLightReceiverComponent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  *a4 = *a1;
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DockingRegionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for DockingRegionComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance DockingRegionComponent()
{
  return 36;
}

__n128 protocol witness for static Component.__load(from:) in conformance DockingRegionComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;
  int v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DockingRegionComponent(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v4;
  __int128 v5;
  int v6;
  _BYTE v7[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance DockingRegionComponent(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v4;
  __int128 v5;
  int v6;
  _BYTE v7[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance DockingRegionComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;
  int v9;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v8;
  *(_DWORD *)(v6 + 48) = v9;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SpatialAudioComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SpatialAudioComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SpatialAudioComponent()
{
  return 56;
}

__n128 protocol witness for static Component.__load(from:) in conformance SpatialAudioComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v3;
  *(_QWORD *)(a2 + 48) = v4;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SpatialAudioComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance SpatialAudioComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __n128 result;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v6 + 32) = v7;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v6 + 40) = result;
  *(_BYTE *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 64) = v9;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance OpacityComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for OpacityComponent.Type);
}

float protocol witness for static Component.__load(from:) in conformance OpacityComponent@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance OpacityComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance OpacityComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

float protocol witness for static Component.__load(from:offset:) in conformance OpacityComponent@<S0>(float *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  float result;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  result = *a1;
  *(float *)a4 = *a1;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ProjectiveTransformCameraComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ProjectiveTransformCameraComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ProjectiveTransformCameraComponent()
{
  return 64;
}

__n128 protocol witness for static Component.__load(from:) in conformance ProjectiveTransformCameraComponent@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ProjectiveTransformCameraComponent(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance ProjectiveTransformCameraComponent(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance ProjectiveTransformCameraComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _OWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  a4[3] = a2;
  a4[4] = a3;
  v6 = (_OWORD *)swift_allocObject();
  *a4 = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  v6[1] = *(_OWORD *)a1;
  v6[2] = v8;
  v6[3] = v9;
  v6[4] = v10;
  return result;
}

uint64_t static Component.registerComponentProxy(componentName:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 80))(&v9, a3, a4);
  if ((_DWORD)v9 == 36)
    return specialized static SceneManager.customComponentTypeHelper(_:typeName:)(v4, a4, a1, a2);
  else
    return 0;
}

void one-time initialization function for baseTraitSetups()
{
  baseTraitSetups._rawValue = &outlined read-only object #0 of one-time initialization function for baseTraitSetups;
}

uint64_t one-time initialization function for traitSetups()
{
  _QWORD *rawValue;
  uint64_t result;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  if (one-time initialization token for baseTraitSetups != -1)
    swift_once();
  rawValue = baseTraitSetups._rawValue;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
    rawValue = (_QWORD *)result;
  }
  v3 = rawValue[2];
  v2 = rawValue[3];
  if (v3 >= v2 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v2 > 1), v3 + 1, 1, rawValue);
    rawValue = (_QWORD *)result;
  }
  rawValue[2] = v3 + 1;
  v4 = &rawValue[2 * v3];
  v4[4] = specialized closure #1 in SetupPair.init<A, B>(_:_:);
  v4[5] = 0;
  traitSetups._rawValue = rawValue;
  return result;
}

uint64_t Component.update<A>(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AREnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AREnvironmentProbeComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance AREnvironmentProbeComponent()
{
  return 33;
}

uint64_t protocol witness for static Component.__load(from:) in conformance AREnvironmentProbeComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  char v3;

  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(_BYTE *)(a2 + 32) = v3;
  return swift_retain();
}

__n128 protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AREnvironmentProbeComponent(uint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  __n128 result;
  unint64_t v7;
  __n128 v8;
  unsigned __int8 v9;
  char v10[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v8;
  a2->n128_u64[0] = v7;
  a2[1] = v8;
  a2[2].n128_u8[0] = v9;
  return result;
}

__n128 protocol witness for static Component.__store(attribute:to:offset:) in conformance AREnvironmentProbeComponent(uint64_t a1, __n128 *a2)
{
  __n128 result;
  unint64_t v5;
  __n128 v6;
  unsigned __int8 v7;
  char v8[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v6;
  a2->n128_u64[0] = v5;
  a2[1] = v6;
  a2[2].n128_u8[0] = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AREnvironmentProbeComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_OWORD *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 48) = v8;
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance StateMachineComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for StateMachineComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance StateMachineComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance StateMachineComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v9;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance StateMachineComponent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance StateMachineComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v4;
  *(_BYTE *)(a4 + 16) = v5;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __SkyboxComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __SkyboxComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance TextComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for TextComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance TextComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of __RKEntityActionSpecification(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for TextComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance TextComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD))type metadata accessor for TextComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance TextComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD))type metadata accessor for TextComponent);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance TextComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance TextComponent(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for TextComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ModelComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ModelComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance ModelComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = v3;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ModelComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ModelComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

void protocol witness for static Component.__free(to:offset:) in conformance ModelComponent()
{
  swift_arrayDestroy();
  JUMPOUT(0x220772F44);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ModelComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance IKComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for IKComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance IKComponent()
{
  return 24;
}

uint64_t protocol witness for static Component.__load(from:) in conformance IKComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance IKComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;
  uint64_t v7;
  __int128 v8;
  _BYTE v9[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v7;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance IKComponent(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  __int128 v6;
  _BYTE v7[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v5;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance IKComponent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  a4[3] = a2;
  a4[4] = a3;
  v4 = a1[1];
  v5 = a1[2];
  *a4 = *a1;
  a4[1] = v4;
  a4[2] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for GroundingShadowComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance GroundingShadowComponent@<X0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of GroundingShadowComponent(a1, a2);
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance GroundingShadowComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _BYTE v8[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))outlined init with copy of GroundingShadowComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AcousticModelComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AcousticModelComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance AcousticModelComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AcousticModelComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v7;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance AcousticModelComponent(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _BYTE v8[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v5;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AcousticModelComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  a4[3] = a2;
  a4[4] = a3;
  v6 = (_QWORD *)swift_allocObject();
  *a4 = v6;
  v7 = *a1;
  v8 = a1[1];
  v10 = a1[2];
  v9 = a1[3];
  v6[2] = v7;
  v6[3] = v8;
  v6[4] = v10;
  v6[5] = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance InputTargetComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for InputTargetComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance InputTargetComponent@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(result + 4);
  *(_BYTE *)a2 = *(_BYTE *)result;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance InputTargetComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance InputTargetComponent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_BYTE *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance InputTargetComponent@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v4;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(_DWORD *)(result + 4);
  *(_BYTE *)a4 = *(_BYTE *)result;
  *(_DWORD *)(a4 + 4) = v4;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ModelSortGroupComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance ModelSortGroupComponent@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int16 v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 2);
  *(_DWORD *)a2 = v2;
  *(_WORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  return swift_retain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ModelSortGroupComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  int v7;
  __int16 v8;
  uint64_t v9;
  _BYTE v10[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_DWORD *)a2 = v7;
  *(_WORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  __int16 v6;
  uint64_t v7;
  _BYTE v8[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_DWORD *)a2 = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ModelSortGroupComponent@<X0>(int *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v4;
  __int16 v5;
  uint64_t v6;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *a1;
  v5 = *((_WORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 2);
  *(_DWORD *)a4 = v4;
  *(_WORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = v6;
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance CharacterControllerStateComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for CharacterControllerStateComponent.Type);
}

__n128 protocol witness for static Component.__load(from:) in conformance CharacterControllerStateComponent@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unsigned __int8 v3;

  result = *a1;
  v3 = a1[1].n128_u8[0];
  *a2 = *a1;
  a2[1].n128_u8[0] = v3;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance CharacterControllerStateComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance CharacterControllerStateComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance CharacterControllerStateComponent@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  __n128 result;
  unsigned __int8 v8;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  result = *a1;
  v8 = a1[1].n128_u8[0];
  *(__n128 *)(v6 + 16) = *a1;
  *(_BYTE *)(v6 + 32) = v8;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PhysicsMotionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PhysicsMotionComponent.Type);
}

__n128 protocol witness for static Component.__load(from:) in conformance PhysicsMotionComponent@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PhysicsMotionComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance PhysicsMotionComponent(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance PhysicsMotionComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v8;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AnimationLibraryComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AnimationLibraryComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance AnimationLibraryComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v3, v4);
  return swift_bridgeObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnimationLibraryComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance AnimationLibraryComponent(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _BYTE v8[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AnimationLibraryComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance AnimationLibraryComponent(a1, a2, a3, a4);
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  a4[3] = a2;
  a4[4] = a3;
  v6 = (_QWORD *)swift_allocObject();
  *a4 = v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v11 = a1[4];
  v6[2] = v8;
  v6[3] = v7;
  v6[4] = v9;
  v6[5] = v10;
  v6[6] = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v9, v10);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance _Proto_AnimationLibraryComponent_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for _Proto_AnimationLibraryComponent_v1.Type);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance _Proto_AnimationLibraryComponent_v1@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance AnimationLibraryComponent(a1, a2, a3, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance VideoComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for VideoComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance VideoComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of VideoComponent(a1, a2);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance VideoComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance VideoComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance VideoComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent(a1, a2, a3, outlined init with copy of VideoComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance VirtualEnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for VirtualEnvironmentProbeComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance VirtualEnvironmentProbeComponent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  return outlined copy of VirtualEnvironmentProbeComponent.Source(v3, v2, v4);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance VirtualEnvironmentProbeComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  a4[3] = a2;
  a4[4] = a3;
  v6 = (_QWORD *)swift_allocObject();
  *a4 = v6;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  v6[2] = *a1;
  v6[3] = v7;
  v6[4] = v9;
  v6[5] = v10;
  return outlined copy of VirtualEnvironmentProbeComponent.Source(v8, v7, v9);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ChannelAudioComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ChannelAudioComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ChannelAudioComponent(_QWORD *a1, _QWORD *a2)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ChannelAudioComponent(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  return specialized static Component.__store(attribute:to:offset:deinitialize:)((uint64_t)v5, a2, v3, v4);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ChannelAudioComponent(_QWORD *a1, _QWORD *a2)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance ChannelAudioComponent(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  return specialized static Component.__store(attribute:to:offset:deinitialize:)((uint64_t)v5, a2, v3, v4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance OrthographicCameraComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for OrthographicCameraComponent.Type);
}

float protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance OrthographicCameraComponent(uint64_t a1, uint64_t a2)
{
  float result;
  uint64_t v4;
  float v5;
  char v6;
  _BYTE v7[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v5;
  *(_QWORD *)a2 = v4;
  *(float *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 12) = v6;
  return result;
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance OrthographicCameraComponent(uint64_t a1, uint64_t a2)
{
  float result;
  uint64_t v4;
  float v5;
  char v6;
  _BYTE v7[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v5;
  *(_QWORD *)a2 = v4;
  *(float *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 12) = v6;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance BillboardComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for BillboardComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance BillboardComponent()
{
  return 84;
}

__n128 protocol witness for static Component.__load(from:) in conformance BillboardComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;
  __n128 result;
  int v5;

  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 48);
  result = *(__n128 *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 48) = v3;
  *(__n128 *)(a2 + 64) = result;
  *(_DWORD *)(a2 + 80) = v5;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance BillboardComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance BillboardComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance BillboardComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  __n128 result;
  int v10;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 48);
  result = *(__n128 *)(a1 + 64);
  v10 = *(_DWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_BYTE *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v6 + 64) = v8;
  *(__n128 *)(v6 + 80) = result;
  *(_DWORD *)(v6 + 96) = v10;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for _proto_StereoProjectiveTransformCameraComponent_v1.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  a4[3] = a2;
  a4[4] = a3;
  v4 = a1[1];
  v5 = a1[2];
  *a4 = *a1;
  a4[1] = v4;
  a4[2] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SceneOriginComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SceneOriginComponent.Type);
}

void protocol witness for static Component.__load(from:offset:) in conformance SceneOriginComponent(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = a1;
  *(_QWORD *)(a3 + 32) = a2;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DynamicLightShadowComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for DynamicLightShadowComponent.Type);
}

_BYTE *protocol witness for static Component.__load(from:offset:) in conformance DynamicLightShadowComponent@<X0>(_BYTE *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)a4 = *result;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ParticleEmitterComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ParticleEmitterComponent()
{
  return 898;
}

uint64_t protocol witness for static Component.__load(from:) in conformance ParticleEmitterComponent@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  _BYTE v5[912];

  memcpy(v5, __src, 0x382uLL);
  memcpy(a2, __src, 0x382uLL);
  return outlined retain of ParticleEmitterComponent((uint64_t)v5);
}

void *protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ParticleEmitterComponent(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  _BYTE v7[40];
  _BYTE __src[898];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return memcpy(a2, __src, 0x382uLL);
}

void *protocol witness for static Component.__store(attribute:to:offset:) in conformance ParticleEmitterComponent(uint64_t a1, void *a2)
{
  _BYTE v5[40];
  _BYTE __src[898];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return memcpy(a2, __src, 0x382uLL);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ParticleEmitterComponent@<X0>(const void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  void *v7;
  _BYTE v9[912];

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  v7 = (void *)(v6 + 16);
  *a4 = v6;
  memcpy(v9, a1, 0x382uLL);
  memcpy(v7, a1, 0x382uLL);
  return outlined retain of ParticleEmitterComponent((uint64_t)v9);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ForceEffectComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ForceEffectComponent()
{
  return 9;
}

uint64_t protocol witness for static Component.__load(from:) in conformance ForceEffectComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ForceEffectComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  _BYTE v9[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  _BYTE v7[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  result = swift_dynamicCast();
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ForceEffectComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v4;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_BYTE *)(a4 + 8) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance GeometricPinsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for GeometricPinsComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AudioLibraryComponent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  *a4 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for VideoPlayerComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance VideoPlayerComponent()
{
  return 117;
}

uint64_t protocol witness for static Component.__load(from:) in conformance VideoPlayerComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  int v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 28);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 81);
  v10 = *(_BYTE *)(a1 + 82);
  v11 = *(_BYTE *)(a1 + 83);
  v12 = *(_BYTE *)(a1 + 84);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_DWORD *)(a1 + 112);
  v15 = *(_BYTE *)(a1 + 116);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 28) = v5;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 80) = v8;
  *(_BYTE *)(a2 + 81) = v9;
  *(_BYTE *)(a2 + 82) = v10;
  *(_BYTE *)(a2 + 83) = v11;
  *(_BYTE *)(a2 + 84) = v12;
  *(_OWORD *)(a2 + 96) = v13;
  *(_DWORD *)(a2 + 112) = v14;
  *(_BYTE *)(a2 + 116) = v15;
  swift_retain();
  swift_unknownObjectRetain();
  return swift_retain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance VideoPlayerComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  int v22;
  char v23;
  _BYTE v24[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_BYTE *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 28) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v14;
  result = *(double *)&v15;
  *(_OWORD *)(a2 + 64) = v15;
  *(_BYTE *)(a2 + 80) = v16;
  *(_BYTE *)(a2 + 81) = v17;
  *(_BYTE *)(a2 + 82) = v18;
  *(_BYTE *)(a2 + 83) = v19;
  *(_BYTE *)(a2 + 84) = v20;
  *(_OWORD *)(a2 + 96) = v21;
  *(_DWORD *)(a2 + 112) = v22;
  *(_BYTE *)(a2 + 116) = v23;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  double result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  __int128 v19;
  int v20;
  char v21;
  _BYTE v22[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_BYTE *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = v8;
  *(_DWORD *)(a2 + 28) = v9;
  *(_OWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v12;
  result = *(double *)&v13;
  *(_OWORD *)(a2 + 64) = v13;
  *(_BYTE *)(a2 + 80) = v14;
  *(_BYTE *)(a2 + 81) = v15;
  *(_BYTE *)(a2 + 82) = v16;
  *(_BYTE *)(a2 + 83) = v17;
  *(_BYTE *)(a2 + 84) = v18;
  *(_OWORD *)(a2 + 96) = v19;
  *(_DWORD *)(a2 + 112) = v20;
  *(_BYTE *)(a2 + 116) = v21;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance VideoPlayerComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  int v19;
  char v20;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 80);
  v14 = *(_BYTE *)(a1 + 81);
  v15 = *(_BYTE *)(a1 + 82);
  v16 = *(_BYTE *)(a1 + 83);
  v17 = *(_BYTE *)(a1 + 84);
  v18 = *(_OWORD *)(a1 + 96);
  v19 = *(_DWORD *)(a1 + 112);
  v20 = *(_BYTE *)(a1 + 116);
  *(_BYTE *)(v6 + 16) = *(_BYTE *)a1;
  *(_QWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 32) = v8;
  *(_BYTE *)(v6 + 40) = v9;
  *(_DWORD *)(v6 + 44) = v10;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v6 + 64) = v11;
  *(_QWORD *)(v6 + 72) = v12;
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v6 + 96) = v13;
  *(_BYTE *)(v6 + 97) = v14;
  *(_BYTE *)(v6 + 98) = v15;
  *(_BYTE *)(v6 + 99) = v16;
  *(_BYTE *)(v6 + 100) = v17;
  *(_OWORD *)(v6 + 112) = v18;
  *(_DWORD *)(v6 + 128) = v19;
  *(_BYTE *)(v6 + 132) = v20;
  swift_retain();
  swift_unknownObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __AccessibilityComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance __AccessibilityComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(_BYTE *)(a1 + 1);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_BYTE *)(a2 + 1) = v2;
  *(_QWORD *)(a2 + 8) = v3;
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance __AccessibilityComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance __AccessibilityComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance __AccessibilityComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_BYTE *)(a1 + 1);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(v6 + 16) = *(_BYTE *)a1;
  *(_BYTE *)(v6 + 17) = v7;
  *(_QWORD *)(v6 + 24) = v8;
  v11 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 48) = v11;
  *(_QWORD *)(v6 + 64) = v9;
  *(_QWORD *)(v6 + 72) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AccessibilityComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance AccessibilityComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of __RKEntityActionSpecification(a1, a2, type metadata accessor for AccessibilityComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AccessibilityComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance TextComponent(a1, a2, a3, a4, a5, a6, type metadata accessor for AccessibilityComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v10;
  char *v11;
  char v12;
  _BYTE v15[40];

  MEMORY[0x24BDAC7A8](a1);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((v12 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v11, a2, a7);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance AccessibilityComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance TextComponent(a1, a2, a3, a4, a5, type metadata accessor for AccessibilityComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v9;
  char *v10;
  _BYTE v13[40];

  MEMORY[0x24BDAC7A8](a1);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v10, a2, a6);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AccessibilityComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance TextComponent(a1, a2, a3, type metadata accessor for AccessibilityComponent, a4);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance TextComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(_QWORD)@<X4>, uint64_t *a5@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a5[3] = a2;
  a5[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  return outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)boxed_opaque_existential_1, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AmbientAudioComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AmbientAudioComponent.Type);
}

double protocol witness for static Component.__load(from:) in conformance AmbientAudioComponent@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AmbientAudioComponent(_QWORD *a1, _QWORD *a2)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ChannelAudioComponent(a1, a2);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance AmbientAudioComponent(_QWORD *a1, _QWORD *a2)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance ChannelAudioComponent(a1, a2);
}

double protocol witness for static Component.__load(from:offset:) in conformance AmbientAudioComponent@<D0>(double *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  double result;

  a4[3] = a2;
  a4[4] = a3;
  result = *a1;
  *a4 = *(_QWORD *)a1;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PerspectiveCameraComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PerspectiveCameraComponent.Type);
}

float protocol witness for static Component.__load(from:) in conformance PerspectiveCameraComponent@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;
  char v3;

  result = *(float *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 12);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(float *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 12) = v3;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PerspectiveCameraComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance PerspectiveCameraComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

float protocol witness for static Component.__load(from:offset:) in conformance OrthographicCameraComponent@<S0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  float result;
  char v5;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  result = *(float *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 12);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(float *)(a4 + 8) = result;
  *(_BYTE *)(a4 + 12) = v5;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __EntityInfoComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __EntityInfoComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance __EntityInfoComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance __EntityInfoComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ReferenceComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ReferenceComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ReferenceComponent()
{
  return 48;
}

uint64_t protocol witness for static Component.__load(from:) in conformance ReferenceComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *((_BYTE *)a1 + 32);
  v7 = *((_BYTE *)a1 + 33);
  v8 = a1[5];
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 33) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ReferenceComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ReferenceComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ReferenceComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 33);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v9;
  *(_BYTE *)(v6 + 48) = v10;
  *(_BYTE *)(v6 + 49) = v11;
  *(_QWORD *)(v6 + 56) = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PhysicsSimulationComponent.Type);
}

id protocol witness for static Component.__load(from:) in conformance PhysicsSimulationComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  void *v3;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  return v3;
}

__n128 protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PhysicsSimulationComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __n128 result;
  __int128 v7;
  __n128 v8;
  char v9;
  uint64_t v10;
  _BYTE v11[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v8;
  *(_OWORD *)a2 = v7;
  *(__n128 *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v10;
  return result;
}

__n128 protocol witness for static Component.__store(attribute:to:offset:) in conformance PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v5;
  __n128 v6;
  char v7;
  uint64_t v8;
  _BYTE v9[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  return result;
}

id protocol witness for static Component.__load(from:offset:) in conformance PhysicsSimulationComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  char v7;
  void *v8;
  __int128 v9;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 48) = v7;
  *(_QWORD *)(v6 + 56) = v8;
  return v8;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance CollisionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for CollisionComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance CollisionComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  int v3;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 12) = *(_QWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 20) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance CollisionComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance CollisionComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance CollisionComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v4;
  int v5;

  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_BYTE *)(a4 + 8) = v4;
  *(_QWORD *)(a4 + 12) = *(_QWORD *)(a1 + 12);
  *(_DWORD *)(a4 + 20) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AnchoringComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AnchoringComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance AnchoringComponent(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
}

uint64_t protocol witness for static Component.__load(from:) in conformance AnchoringComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of __RKEntityActionSpecification(a1, a2, type metadata accessor for AnchoringComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnchoringComponent(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnchoringComponent(a1, a2, a3, a4, a5, a6, type metadata accessor for AnchoringComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance AnchoringComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance AnchoringComponent(a1, a2, a3, a4, a5, type metadata accessor for AnchoringComponent);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AnchoringComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance TextComponent(a1, a2, a3, type metadata accessor for AnchoringComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance CharacterControllerComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for CharacterControllerComponent.Type);
}

double protocol witness for static Component.__load(from:) in conformance CharacterControllerComponent@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int128 v3;
  double result;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_DWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance CharacterControllerComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance CharacterControllerComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__load(from:offset:) in conformance CharacterControllerComponent@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  int v7;
  __int128 v8;
  double result;

  a4[3] = a2;
  a4[4] = a3;
  v6 = swift_allocObject();
  *a4 = v6;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_DWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v8;
  result = *(double *)(a1 + 48);
  *(double *)(v6 + 64) = result;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance BodyTrackingComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for BodyTrackingComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance BodyTrackingComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of __RKEntityActionSpecification(a1, a2, type metadata accessor for BodyTrackingComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance BodyTrackingComponent(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnchoringComponent(a1, a2, a3, a4, a5, a6, type metadata accessor for BodyTrackingComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnchoringComponent(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = a1[3];
  v11 = a1[4];
  v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  return specialized static Component.__store(attribute:to:offset:deinitialize:)((uint64_t)v12, a2, a4, v10, v11, a7);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance BodyTrackingComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance AnchoringComponent(a1, a2, a3, a4, a5, type metadata accessor for BodyTrackingComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance AnchoringComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = a1[3];
  v9 = a1[4];
  v10 = __swift_project_boxed_opaque_existential_1(a1, v8);
  return specialized static Component.__store(attribute:to:offset:deinitialize:)((uint64_t)v10, a2, 1, v8, v9, a6);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance BodyTrackingComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance TextComponent(a1, a2, a3, type metadata accessor for BodyTrackingComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance EventSubscriptionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for EventSubscriptionComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance EventSubscriptionComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of EventSubscriptionComponent(a1, a2);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance EventSubscriptionComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance EventSubscriptionComponent(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v5;
  a2[1] = v6;
  result = *(double *)&v7;
  a2[2] = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance EventSubscriptionComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent(a1, a2, a3, outlined init with copy of EventSubscriptionComponent, a4);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(uint64_t, uint64_t)@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v7;

  a5[3] = a2;
  a5[4] = a3;
  v7 = swift_allocObject();
  *a5 = v7;
  return a4(a1, v7 + 16);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance _Proto_BlendShapeWeightsComponent_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for _Proto_BlendShapeWeightsComponent_v1.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance _Proto_BlendShapeWeightsComponent_v1@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_bridgeObjectRetain();
  return swift_retain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance _Proto_BlendShapeWeightsComponent_v1(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  double result;
  __int128 v7;
  _BYTE v8[40];

  if ((a4 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance _Proto_BlendShapeWeightsComponent_v1(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v5;
  _BYTE v6[40];

  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v5;
  *a2 = v5;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance _Proto_BlendShapeWeightsComponent_v1@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  a4[3] = a2;
  a4[4] = a3;
  v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance BlendShapeWeightsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for BlendShapeWeightsComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance BlendShapeWeightsComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance BlendShapeWeightsComponent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  a4[3] = a2;
  a4[4] = a3;
  v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance Transform(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t protocol witness for static Component.componentName.getter in conformance Transform(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for Transform.Type);
}

__n128 protocol witness for static Component.__load(from:) in conformance Transform@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance Transform(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance Transform(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance Transform@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _OWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  a4[3] = a2;
  a4[4] = a3;
  v6 = (_OWORD *)swift_allocObject();
  *a4 = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  v6[1] = *(_OWORD *)a1;
  v6[2] = v8;
  v6[3] = v9;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ModelDebugOptionsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ModelDebugOptionsComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ModelDebugOptionsComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = a1[3];
  v9 = a1[4];
  v10 = __swift_project_boxed_opaque_existential_1(a1, v8);
  return a7(v10, a2, v8, v9);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ModelDebugOptionsComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = a1[3];
  v8 = a1[4];
  v9 = __swift_project_boxed_opaque_existential_1(a1, v7);
  return a6(v9, a2, v7, v8);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PortalCrossingComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PortalCrossingComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SceneOriginComponent(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  return swift_dynamicCast();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SceneOriginComponent(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  return swift_dynamicCast();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PhysicsJointsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PhysicsJointsComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return String.init<A>(reflecting:)();
}

uint64_t protocol witness for static Component.__load(from:) in conformance PhysicsJointsComponent@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PhysicsJointsComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v9 = a1[3];
  v10 = a1[4];
  v11 = __swift_project_boxed_opaque_existential_1(a1, v9);
  return a7(v11, a2, a4, v9, v10);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance PhysicsJointsComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = a1[3];
  v8 = a1[4];
  v9 = __swift_project_boxed_opaque_existential_1(a1, v7);
  return a6(v9, a2, 1, v7, v8);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance PhysicsJointsComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  a4[3] = a2;
  a4[4] = a3;
  v5 = *a1;
  v4 = a1[1];
  *a4 = v5;
  a4[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  char v13;
  _BYTE v14[40];
  uint64_t v15[5];

  v15[3] = a3;
  v15[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v9;
  *(_BYTE *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 20) = v12;
  *(_BYTE *)(a2 + 24) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t v7;
  char *v8;
  char v9;
  _BYTE v12[40];

  MEMORY[0x24BDAC7A8](a1);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((v9 & 1) != 0)
    UnsafeMutablePointer.deinitialize(count:)();
  outlined init with copy of __REAssetService(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v8, a2, a4);
}

{
  uint64_t *boxed_opaque_existential_1;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  _BYTE v15[40];
  uint64_t v16[5];

  v16[3] = a3;
  v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v16, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_DWORD *)a2 = v9;
  *(_BYTE *)(a2 + 4) = v10;
  *(_DWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 12) = v12;
  *(_DWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 20) = v14;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  int v10;
  char v11;
  _BYTE v12[40];
  uint64_t v13[5];

  v13[3] = a3;
  v13[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v13, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 12) = v11;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

{
  uint64_t *boxed_opaque_existential_1;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;
  __int128 v13;
  int v14;
  _BYTE v15[40];
  uint64_t v16[5];

  v16[3] = a3;
  v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v16, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v9;
  *(_BYTE *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v13;
  *(_DWORD *)(a2 + 80) = v14;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

{
  uint64_t *boxed_opaque_existential_1;
  char v9;
  int v10;
  _BYTE v11[40];
  uint64_t v12[5];

  v12[3] = a3;
  v12[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v12, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_BYTE *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v10;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

{
  uint64_t *boxed_opaque_existential_1;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  _BYTE v14[40];
  uint64_t v15[5];

  v15[3] = a3;
  v15[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t *boxed_opaque_existential_1;
  __int128 v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[40];
  uint64_t v14[5];

  v14[3] = a3;
  v14[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v9;
  *(_DWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 48) = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

{
  uint64_t *boxed_opaque_existential_1;
  __int128 v9;
  char v10;
  _BYTE v11[40];
  uint64_t v12[5];

  v12[3] = a3;
  v12[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v12, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v9;
  *(_BYTE *)(a2 + 16) = v10;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t specialized static Component.__store(attribute:to:offset:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8[5];

  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  v3 = CustomComponentProxy.getJSONData()();
  v5 = v4;
  v8[0] = 0;
  CustomComponentProxy.updateJSON(with:)(v3, v4);
  outlined consume of Data?(v3, v5);
  v6 = v8[0];
  result = *a2;
  if (*a2)
    result = RECIntrospectionFree();
  *a2 = v6;
  return result;
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  __int128 v11;
  int v12;
  _BYTE v13[40];
  uint64_t v14[5];

  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v11;
  *(_DWORD *)(a2 + 16) = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  _BYTE v15[40];
  uint64_t v16[5];

  v16[3] = a4;
  v16[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v16, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v11;
  *(_BYTE *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 12) = v13;
  *(_DWORD *)(a2 + 20) = v14;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  __int128 v12;
  int v13;
  _BYTE v14[40];
  uint64_t v15[5];

  v15[3] = a4;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v11;
  *(_OWORD *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 24) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[40];
  uint64_t v15[5];

  v15[3] = a4;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 16) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t *boxed_opaque_existential_1;
  char v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  _BYTE v31[40];
  uint64_t v32[5];

  v32[3] = a4;
  v32[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v32);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v32, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_BYTE *)a2 = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  *(_OWORD *)(a2 + 64) = v15;
  *(_QWORD *)(a2 + 80) = v16;
  *(_BYTE *)(a2 + 88) = v17;
  *(_BYTE *)(a2 + 89) = v18;
  *(_BYTE *)(a2 + 90) = v19;
  *(_BYTE *)(a2 + 91) = v20;
  *(_BYTE *)(a2 + 92) = v21;
  *(_BYTE *)(a2 + 93) = v22;
  *(_BYTE *)(a2 + 94) = v23;
  *(_BYTE *)(a2 + 95) = v24;
  *(_OWORD *)(a2 + 96) = v25;
  *(_OWORD *)(a2 + 112) = v26;
  *(_OWORD *)(a2 + 128) = v27;
  *(_OWORD *)(a2 + 144) = v28;
  *(_BYTE *)(a2 + 160) = v29;
  *(_QWORD *)(a2 + 164) = v30;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  int v12;
  _BYTE v13[40];
  uint64_t v14[5];

  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18[5];

  v18[3] = a4;
  v18[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v18, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v11;
  *(_BYTE *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 9) = v13;
  *(_BYTE *)(a2 + 10) = v14;
  *(_OWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 32) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  int v12;
  char v13;
  _BYTE v14[40];
  uint64_t v15[5];

  v15[3] = a4;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 12) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  _BYTE v18[40];
  uint64_t v19[5];

  v19[3] = a4;
  v19[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 16) = v13;
  *(_OWORD *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 40) = v15;
  *(_BYTE *)(a2 + 56) = v16;
  *(_BYTE *)(a2 + 57) = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

{
  uint64_t *boxed_opaque_existential_1;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[40];
  uint64_t v16[5];

  v16[3] = a4;
  v16[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v16, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 48) = v14;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

{
  uint64_t *boxed_opaque_existential_1;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18[5];

  v18[3] = a4;
  v18[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v18, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 33) = v15;
  *(_QWORD *)(a2 + 40) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

{
  uint64_t *boxed_opaque_existential_1;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18[5];

  v18[3] = a4;
  v18[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v18, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_BYTE *)a2 = v11;
  *(_BYTE *)(a2 + 1) = v12;
  *(_OWORD *)(a2 + 8) = v13;
  *(_OWORD *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 56) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  int v12;
  _BYTE v13[40];
  uint64_t v14[5];

  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v17[40];
  uint64_t v18[5];

  v12 = a6(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v17[-v13];
  v18[3] = a4;
  v18[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v18, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v14, a2, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _OWORD *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  __int128 v11;
  _BYTE v12[40];
  uint64_t v13[5];

  v13[3] = a4;
  v13[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v13, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v11;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

{
  uint64_t *boxed_opaque_existential_1;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[40];
  uint64_t v15[5];

  v15[3] = a4;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  __int128 v9;
  __int128 v10;
  _BYTE v11[40];
  uint64_t v12[5];

  v12[3] = a3;
  v12[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v12, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v9;
  a2[1] = v10;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  char v9;
  _BYTE v10[40];
  uint64_t v11[5];

  v11[3] = a3;
  v11[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v9;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  int v9;
  _BYTE v10[40];
  uint64_t v11[5];

  v11[3] = a3;
  v11[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v9;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  _BYTE v10[40];
  uint64_t v11[5];

  v11[3] = a3;
  v11[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v9;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[40];
  uint64_t v14[5];

  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a3 & 1) != 0)
    swift_arrayDestroy();
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v11;
  a2[1] = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

void specialized static Component.__free(to:offset:)()
{
  UnsafeMutablePointer.deinitialize(count:)();
  JUMPOUT(0x220769464);
}

uint64_t dispatch thunk of static Component.__typeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static Component.componentName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static Component.__size.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Component.__load(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of static Component.__store(attribute:to:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of static Component.__free(to:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of static Component.__fromCore(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of Component.__toCore(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of static Component.__coreComponentType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of static Component.__addIntrospectionData(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of static Component.__load(from:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t sub_21BBDD724()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BBDD760()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BBDD794()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t outlined init with copy of VideoComponent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for VideoComponent(a2, a1);
  return a2;
}

uint64_t sub_21BBDD7FC()
{
  return swift_deallocObject();
}

uint64_t sub_21BBDD80C()
{
  return swift_deallocObject();
}

uint64_t sub_21BBDD81C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21BBDD840()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBDD874()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBDD8A8()
{
  uint64_t v0;
  void *v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  v1 = *(void **)(v0 + 640);
  if (v1)
  {

    swift_release();
  }
  return swift_deallocObject();
}

uint64_t outlined retain of ParticleEmitterComponent(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  __int128 v11;
  __int128 v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(void **)(a1 + 288);
  v3 = *(void **)(a1 + 296);
  v5 = *(void **)(a1 + 312);
  v4 = *(void **)(a1 + 320);
  v19 = *(_QWORD *)(a1 + 584);
  v20 = *(_QWORD *)(a1 + 576);
  v17 = *(_QWORD *)(a1 + 600);
  v18 = *(_QWORD *)(a1 + 592);
  v15 = *(_QWORD *)(a1 + 616);
  v16 = *(_QWORD *)(a1 + 608);
  v13 = *(void **)(a1 + 632);
  v14 = *(void **)(a1 + 624);
  v11 = *(_OWORD *)(a1 + 656);
  v12 = *(_OWORD *)(a1 + 640);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v2;
  v7 = v3;
  v8 = v5;
  v9 = v4;
  outlined copy of ParticleEmitterComponent.ParticleEmitter?(v20, v19, v18, v17, v16, v15, v14, v13, v12, *((void **)&v12 + 1), (void *)v11);
  return a1;
}

id outlined copy of ParticleEmitterComponent.ParticleEmitter?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, void *a10, void *a11)
{
  id v13;
  id v14;
  id v15;
  id result;

  if (a7)
  {
    swift_retain();
    v13 = a7;
    v14 = a8;
    v15 = a10;
    return a11;
  }
  return result;
}

uint64_t sub_21BBDDB1C()
{
  return swift_deallocObject();
}

uint64_t sub_21BBDDB2C()
{
  uint64_t v0;

  outlined consume of VirtualEnvironmentProbeComponent.Source(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t outlined consume of VirtualEnvironmentProbeComponent.Source(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 62)
  {
    if (a3 >> 62 != 1)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t outlined copy of VirtualEnvironmentProbeComponent.Source(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 62)
  {
    if (a3 >> 62 != 1)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t objectdestroy_32Tm()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 40) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BBDDC10()
{
  return swift_deallocObject();
}

uint64_t sub_21BBDDC20()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8], (void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21BBDDC34()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t outlined init with copy of GroundingShadowComponent(__int16 *a1, uint64_t a2)
{
  initializeWithCopy for GroundingShadowComponent(a2, a1);
  return a2;
}

uint64_t sub_21BBDDC9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBDDCC0()
{
  return swift_deallocObject();
}

uint64_t sub_21BBDDCD0()
{
  return swift_deallocObject();
}

uint64_t sub_21BBDDCE0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBDDD1C()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4F70], (void (*)(_QWORD))MEMORY[0x24BEE4F70]);
}

uint64_t objectdestroy_42Tm(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  a1(v2[2]);
  a2(v2[3]);
  a2(v2[4]);
  a2(v2[5]);
  return swift_deallocObject();
}

uint64_t sub_21BBDDD78()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21BBDDD9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBDDDC0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 2uLL)
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBDDDF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BBDDE14()
{
  uint64_t v0;

  outlined consume of ImageBasedLightComponent.Source(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for SetupPair()
{
  return &type metadata for SetupPair;
}

uint64_t __RKVisibilityBaseAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityBaseAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityBaseAnimation()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKVisibilityBaseAnimation()
{
  return swift_lookUpClassMethod();
}

uint64_t specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)(uint64_t result, uint64_t *a2, float a3, float32x4_t a4)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  _OWORD *v8;
  float v9;
  uint64_t v10;
  __int128 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  __int32 v25;
  unint64_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  unint64_t v35;
  float *v36;
  float32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;

  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 16);
  v7 = 1.0;
  if (v6)
  {
    v8 = (_OWORD *)(v5 + 64);
    v9 = 0.0;
    v10 = *(_QWORD *)(*a2 + 16);
    do
    {
      v11 = *v8;
      v12 = fabsf(COERCE_FLOAT(*v8));
      if ((LODWORD(v12) & 0x7FFFFF) != 0)
        v13 = v9;
      else
        v13 = v12;
      if ((~LODWORD(v12) & 0x7F800000) != 0)
        v13 = v12;
      if (v12 >= v9)
        v9 = v13;
      v14 = fabsf(*((float *)&v11 + 1));
      if (v14 >= v9)
      {
        if ((LODWORD(v14) & 0x7FFFFF) == 0)
          v9 = v14;
        if ((~LODWORD(v14) & 0x7F800000) != 0)
          v9 = v14;
      }
      v15 = fabsf(*((float *)&v11 + 2));
      if (v15 >= v9)
      {
        if ((~LODWORD(v15) & 0x7F800000) != 0)
        {
          v9 = v15;
        }
        else if ((LODWORD(v15) & 0x7FFFFF) == 0)
        {
          v9 = v15;
        }
      }
      v8 += 3;
      --v10;
    }
    while (v10);
    if (v9 > 0.0)
      v7 = a3 / v9;
  }
  if (v6)
  {
    v16 = *(float32x4_t *)(result + 16);
    v17 = vmulq_f32(v16, (float32x4_t)xmmword_21BE516F0);
    v18 = (int8x16_t)vmulq_f32(v16, v16);
    *(float32x2_t *)v18.i8 = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
    v18.i32[0] = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1)).u32[0];
    v19 = vrecpe_f32((float32x2_t)v18.u32[0]);
    v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v18.u32[0], v19));
    v21 = vmulq_n_f32(v17, vmul_f32(v20, vrecps_f32((float32x2_t)v18.u32[0], v20)).f32[0]);
    v22 = (int32x4_t)vnegq_f32(a4);
    v23 = (int8x16_t)vtrn2q_s32((int32x4_t)a4, vtrn1q_s32((int32x4_t)a4, v22));
    v24 = (float32x4_t)vrev64q_s32((int32x4_t)a4);
    v24.i32[0] = v22.i32[1];
    v24.i32[3] = v22.i32[2];
    v43 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)a4, (int8x16_t)v22, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v23, v23, 8uLL), v21.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(a4, v21, 3), v24, v21, 2));
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_32:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v5);
      v5 = result;
    }
    v26 = 0;
    v27 = vmulq_f32(v43, (float32x4_t)xmmword_21BE516F0);
    v28 = (int32x4_t)vnegq_f32(v27);
    v29 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v28));
    v30 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
    v31 = (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v28, 8uLL);
    v32 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
    v32.i32[0] = v28.i32[1];
    v32.i32[3] = v28.i32[2];
    v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0);
    v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2);
    v35 = *(_QWORD *)(v5 + 16);
    v36 = (float *)(v5 + 64);
    do
    {
      if (v26 >= v35)
      {
        __break(1u);
        goto LABEL_32;
      }
      v37 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v31, v7 * (float)(v36[1] - *(float *)(v5 + 68))), v30, v7 * (float)(*v36 - *(float *)(v5 + 64))), v32, v7 * (float)(v36[2] - *(float *)(v5 + 72)));
      v38 = (int32x4_t)vnegq_f32(v37);
      v39 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v38));
      v40 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), *(float32x2_t *)v43.f32, 1), (float32x4_t)vextq_s8(v39, v39, 8uLL), v33);
      v41 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
      v41.i32[0] = v38.i32[1];
      ++v26;
      v41.i32[3] = v38.i32[2];
      v42 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v37, v43, 3), v41, v34), v40);
      v42.i32[3] = v25;
      *(float32x4_t *)v36 = v42;
      v36 += 12;
    }
    while (v6 != v26);
    *a2 = v5;
  }
  return result;
}

uint64_t specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)(uint64_t result, uint64_t a2, float a3, float32x4_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  float v7;
  _OWORD *v8;
  float v9;
  uint64_t v10;
  __int128 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  unint64_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  unint64_t v34;
  float *v35;
  float32x4_t v36;
  int32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;

  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v7 = 1.0;
  if (v6)
  {
    v8 = v5 + 8;
    v9 = 0.0;
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    do
    {
      v11 = *v8;
      v12 = fabsf(COERCE_FLOAT(*v8));
      if ((LODWORD(v12) & 0x7FFFFF) != 0)
        v13 = v9;
      else
        v13 = v12;
      if ((~LODWORD(v12) & 0x7F800000) != 0)
        v13 = v12;
      if (v12 >= v9)
        v9 = v13;
      v14 = fabsf(*((float *)&v11 + 1));
      if (v14 >= v9)
      {
        if ((LODWORD(v14) & 0x7FFFFF) == 0)
          v9 = v14;
        if ((~LODWORD(v14) & 0x7F800000) != 0)
          v9 = v14;
      }
      v15 = fabsf(*((float *)&v11 + 2));
      if (v15 >= v9)
      {
        if ((~LODWORD(v15) & 0x7F800000) != 0)
        {
          v9 = v15;
        }
        else if ((LODWORD(v15) & 0x7FFFFF) == 0)
        {
          v9 = v15;
        }
      }
      v8 += 3;
      --v10;
    }
    while (v10);
    if (v9 > 0.0)
      v7 = a3 / v9;
  }
  if (v6)
  {
    v16 = *(float32x4_t *)(result + 16);
    v17 = vmulq_f32(v16, (float32x4_t)xmmword_21BE516F0);
    v18 = (int8x16_t)vmulq_f32(v16, v16);
    *(float32x2_t *)v18.i8 = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
    v18.i32[0] = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1)).u32[0];
    v19 = vrecpe_f32((float32x2_t)v18.u32[0]);
    v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v18.u32[0], v19));
    v21 = vmulq_n_f32(v17, vmul_f32(v20, vrecps_f32((float32x2_t)v18.u32[0], v20)).f32[0]);
    v22 = (int32x4_t)vnegq_f32(a4);
    v23 = (int8x16_t)vtrn2q_s32((int32x4_t)a4, vtrn1q_s32((int32x4_t)a4, v22));
    v24 = (float32x4_t)vrev64q_s32((int32x4_t)a4);
    v24.i32[0] = v22.i32[1];
    v24.i32[3] = v22.i32[2];
    v42 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)a4, (int8x16_t)v22, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v23, v23, 8uLL), v21.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(a4, v21, 3), v24, v21, 2));
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_32:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      v5 = (_QWORD *)result;
    }
    v25 = 0;
    v26 = vmulq_f32(v42, (float32x4_t)xmmword_21BE516F0);
    v27 = (int32x4_t)vnegq_f32(v26);
    v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v26, vtrn1q_s32((int32x4_t)v26, v27));
    v29 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
    v30 = (float32x4_t)vrev64q_s32((int32x4_t)v26);
    v30.i32[0] = v27.i32[1];
    v30.i32[3] = v27.i32[2];
    v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 0);
    v32 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2);
    v33 = (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v27, 8uLL);
    v34 = v5[2];
    v35 = (float *)(v5 + 8);
    do
    {
      if (v25 >= v34)
      {
        __break(1u);
        goto LABEL_32;
      }
      v36 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v33, v7 * (float)(v35[1] - *((float *)&v5[6 * v34 + 2] + 1))), v29, v7 * (float)(*v35 - *(float *)&v5[6 * v34 + 2])), v30, v7 * (float)(v35[2] - *(float *)&v5[6 * v34 + 3]));
      v37 = (int32x4_t)vnegq_f32(v36);
      v38 = (int8x16_t)vtrn2q_s32((int32x4_t)v36, vtrn1q_s32((int32x4_t)v36, v37));
      v39 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v37, 8uLL), *(float32x2_t *)v42.f32, 1), (float32x4_t)vextq_s8(v38, v38, 8uLL), v31);
      v40 = (float32x4_t)vrev64q_s32((int32x4_t)v36);
      v40.i32[0] = v37.i32[1];
      ++v25;
      v40.i32[3] = v37.i32[2];
      v41 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v36, v42, 3), v40, v32), v39);
      v41.i32[3] = v27.i32[3];
      *(float32x4_t *)v35 = v41;
      v35 += 12;
    }
    while (v6 != v25);
    *(_QWORD *)a2 = v5;
  }
  return result;
}

uint64_t dispatch thunk of ARKitRunnable.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ARKitRunnable.getSupportedCapabilities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ARKitRunnable.runARKitSession(withSupportedCapabilities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ARKitRunnable.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ARKitRunnable.stop()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 40) + *(_QWORD *)(a2 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return v7(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS10RealityKit6EntityC0E10FoundationE20ConfigurationCatalogV0I3SetV_G_AM0iK5CacheCs5NeverOTg504_s10e4Kit6g5C0A10h3E20ij63V06CachedC6ReaderC17configurationSets12combinationsAHSDySSAF0E3k36VG_SayAF0E11CombinationVGtKcfcAF0eL5L9CALXEfU0_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (!v2)
    return result;
  v39 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray.reserveCapacity(_:)();
  result = specialized Dictionary.Values.startIndex.getter(v1);
  v5 = result;
  v6 = 0;
  v8 = v7 & 1;
  v9 = v1 + 64;
  v31 = v4;
  v32 = v2;
  v28 = v1 + 96;
  v29 = v1;
  v33 = v1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && (uint64_t)v5 < 1 << *(_BYTE *)(v1 + 32))
  {
    if ((*(_QWORD *)(v9 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_33;
    if (*(_DWORD *)(v1 + 36) != (_DWORD)v4)
      goto LABEL_34;
    v37 = v5 >> 6;
    v30 = v8;
    v35 = v6;
    v36 = v4;
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 40 * v5);
    v13 = *v11;
    v12 = v11[1];
    v15 = v11[2];
    v14 = v11[3];
    v16 = v11[4];
    type metadata accessor for Entity.ConfigurationCatalog.ConfigurationSetCache();
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = v13;
    v17[3] = v12;
    v17[4] = v15;
    v17[5] = v14;
    v17[6] = v16;
    v18 = *(_QWORD *)(v16 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Entity.ConfigurationCatalog.Configuration>);
      v19 = (_QWORD *)swift_allocObject();
      v20 = _swift_stdlib_malloc_size(v19);
      v21 = v20 - 32;
      if (v20 < 32)
        v21 = v20 - 17;
      v19[2] = v18;
      v19[3] = 2 * (v21 >> 4);
      v34 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v38, v19 + 4, v18, v16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      result = outlined consume of [String : AnimationResource].Iterator._Variant();
      if (v34 != v18)
        goto LABEL_38;
      swift_bridgeObjectRelease();
      v1 = v29;
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v17[7] = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17[8] = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = specialized ContiguousArray._endMutation()();
    v10 = 1 << *(_BYTE *)(v1 + 32);
    if ((uint64_t)v5 >= v10)
      goto LABEL_35;
    v9 = v33;
    v22 = v5 >> 6;
    v23 = *(_QWORD *)(v33 + 8 * v37);
    if ((v23 & (1 << v5)) == 0)
      goto LABEL_36;
    if (*(_DWORD *)(v1 + 36) != (_DWORD)v36)
      goto LABEL_37;
    v24 = v23 & (-2 << (v5 & 0x3F));
    if (v24)
    {
      v10 = __clz(__rbit64(v24)) | v5 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = v37 + 1;
      v26 = (unint64_t)(v10 + 63) >> 6;
      if (v37 + 1 < v26)
      {
        v27 = *(_QWORD *)(v33 + 8 * v25);
        if (!v27)
        {
          v25 = v37 + 2;
          if (v37 + 2 >= v26)
            goto LABEL_4;
          v27 = *(_QWORD *)(v33 + 8 * v25);
          if (!v27)
          {
            v25 = v37 + 3;
            if (v37 + 3 >= v26)
              goto LABEL_4;
            v27 = *(_QWORD *)(v33 + 8 * v25);
            if (!v27)
            {
              while (v26 - 4 != v22)
              {
                v27 = *(_QWORD *)(v28 + 8 * v22++);
                if (v27)
                {
                  result = outlined consume of [String : AnimationResource].Index._Variant(v5, v36, v30 & 1);
                  v25 = v22 + 3;
                  goto LABEL_21;
                }
              }
              result = outlined consume of [String : AnimationResource].Index._Variant(v5, v36, v30 & 1);
              goto LABEL_4;
            }
          }
        }
LABEL_21:
        v10 = __clz(__rbit64(v27)) + (v25 << 6);
      }
    }
LABEL_4:
    v8 = 0;
    v6 = v35 + 1;
    v5 = v10;
    v4 = v31;
    if (v35 + 1 == v32)
      return v39;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void Entity.ConfigurationCatalog.CachedEntityError.errorDescription.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_21BBDEAA0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  _StringGuts.grow(_:)(188);
  v5._countAndFlagsBits = v4 + 4;
  v5._object = (void *)0x800000021BE8AF30;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v1;
  v6._object = v0;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v4 + 130;
  v7._object = (void *)0x800000021BE8AF50;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v2;
  v8._object = v3;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 11815;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 0;
}

unint64_t lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError;
  if (!lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ConfigurationCatalog.CachedEntityError, &type metadata for Entity.ConfigurationCatalog.CachedEntityError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError);
  }
  return result;
}

uint64_t outlined copy of Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  result = a2;
  if (a7 - 2 >= 2)
  {
    if (a7)
    {
      if (a7 != 1)
        return result;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1)
{
  return outlined consume of Entity.ConfigurationCatalog.CachedEntityError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t outlined consume of Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  result = a2;
  if (a7 - 2 >= 2)
  {
    if (a7)
    {
      if (a7 != 1)
        return result;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of Entity.ConfigurationCatalog.CachedEntityError(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of Entity.ConfigurationCatalog.CachedEntityError(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of Entity.ConfigurationCatalog.CachedEntityError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  outlined consume of Entity.ConfigurationCatalog.CachedEntityError(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.ConfigurationCatalog.CachedEntityError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 4u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for Entity.ConfigurationCatalog.CachedEntityError(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.CachedEntityError()
{
  return &type metadata for Entity.ConfigurationCatalog.CachedEntityError;
}

uint64_t Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45[3];
  uint64_t v46;

  v4 = v2;
  v7 = REGetMaxRealityFileConfigurationSceneCount();
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v7;
  if (v8 > v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_QWORD *)v10 = v8;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    v11 = 11;
LABEL_7:
    *(_BYTE *)(v10 + 40) = v11;
    swift_willThrow();
    goto LABEL_8;
  }
  v12 = (_QWORD *)specialized Sequence.compactMap<A>(_:)(a1);
  v13 = v12;
  if (v12[2])
  {
    v15 = v12[4];
    v14 = v12[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v16 = v13[2];
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 16))
    {
      swift_bridgeObjectRetain();
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(a1 + 56) + 40 * v17;
        v20 = *(_QWORD *)(v19 + 16);
        v21 = *(_QWORD *)(v19 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(_QWORD *)v10 = v16;
        *(_QWORD *)(v10 + 8) = v15;
        *(_QWORD *)(v10 + 16) = v14;
        *(_QWORD *)(v10 + 24) = v20;
        *(_QWORD *)(v10 + 32) = v21;
        v11 = 8;
        goto LABEL_7;
      }
LABEL_47:
      swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v23 = swift_bridgeObjectRetain();
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS10RealityKit6EntityC0E10FoundationE20ConfigurationCatalogV0I3SetV_G_AM0iK5CacheCs5NeverOTg504_s10e4Kit6g5C0A10h3E20ij63V06CachedC6ReaderC17configurationSets12combinationsAHSDySSAF0E3k36VG_SayAF0E11CombinationVGtKcfcAF0eL5L9CALXEfU0_Tf1cn_n(v23);
  swift_bridgeObjectRelease();
  type metadata accessor for Entity.ConfigurationCatalog.ConfigurationCollectionCache();
  swift_allocObject();
  v25 = Entity.ConfigurationCatalog.ConfigurationCollectionCache.init(sourcePath:configurationSetCaches:)(47, 0xE100000000000000, v24);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v26 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v27 + 32) = v26;
  v45[0] = v27;
  specialized Array._endMutation()();
  type metadata accessor for Entity.ConfigurationCatalog.ConfigurationMapCache();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(v4 + 16) = Entity.ConfigurationCatalog.ConfigurationMapCache.init(configurationCollectionCaches:)(v45[0]);
  if (!*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_39:
    v46 = MEMORY[0x24BEE4B00];
    v43 = *(_QWORD *)(a2 + 16);
    if (v43)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v43; ++i)
      {
        *(_OWORD *)v45 = *(_OWORD *)(a2 + 16 * i + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        closure #3 in Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)(&v46, v45, v26);
        swift_bridgeObjectRelease();
        swift_release();
      }
      swift_release();
      swift_bridgeObjectRelease_n();
      *(_QWORD *)(v4 + 24) = v46;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v4 + 24) = MEMORY[0x24BEE4B00];
    }
    return v4;
  }
  v28 = 0;
  v29 = a1 + 64;
  v30 = 1;
  v31 = 1 << *(_BYTE *)(a1 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(a1 + 64);
  v34 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      v35 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v36 = v35 | (v28 << 6);
      goto LABEL_18;
    }
    v39 = v28 + 1;
    if (__OFADD__(v28, 1))
      goto LABEL_45;
    if (v39 >= v34)
      break;
    v40 = *(_QWORD *)(v29 + 8 * v39);
    ++v28;
    if (!v40)
    {
      v28 = v39 + 1;
      if (v39 + 1 >= v34)
        break;
      v40 = *(_QWORD *)(v29 + 8 * v28);
      if (!v40)
      {
        v28 = v39 + 2;
        if (v39 + 2 >= v34)
          break;
        v40 = *(_QWORD *)(v29 + 8 * v28);
        if (!v40)
        {
          v28 = v39 + 3;
          if (v39 + 3 >= v34)
            break;
          v40 = *(_QWORD *)(v29 + 8 * v28);
          if (!v40)
          {
            v41 = v39 + 4;
            if (v41 >= v34)
              break;
            v40 = *(_QWORD *)(v29 + 8 * v41);
            if (!v40)
            {
              while (1)
              {
                v28 = v41 + 1;
                if (__OFADD__(v41, 1))
                  goto LABEL_46;
                if (v28 >= v34)
                  goto LABEL_36;
                v40 = *(_QWORD *)(v29 + 8 * v28);
                ++v41;
                if (v40)
                  goto LABEL_35;
              }
            }
            v28 = v41;
          }
        }
      }
    }
LABEL_35:
    v33 = (v40 - 1) & v40;
    v36 = __clz(__rbit64(v40)) + (v28 << 6);
LABEL_18:
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 40 * v36 + 32) + 16);
    v38 = (unsigned __int128)(v30 * (__int128)v37) >> 64;
    v30 *= v37;
    if (v38 != v30 >> 63)
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
  }
LABEL_36:
  swift_release();
  if ((uint64_t)v8 >= v30)
    goto LABEL_39;
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
  swift_allocError();
  *(_QWORD *)v42 = v8;
  *(_QWORD *)(v42 + 8) = v30;
  *(_OWORD *)(v42 + 16) = 0u;
  *(_OWORD *)(v42 + 32) = 0u;
  *(_BYTE *)(v42 + 48) = 4;
  swift_willThrow();
  swift_release();
  swift_release();
LABEL_8:
  type metadata accessor for Entity.ConfigurationCatalog.CachedEntityReader();
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t closure #3 in Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  Swift::Int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = a2[1];
  v60 = *a2;
  v5 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v4 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  v63 = v4;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * i);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 16);
    swift_bridgeObjectRetain();
    if (!v20
      || (swift_bridgeObjectRetain(),
          specialized __RawDictionaryStorage.find<A>(_:)(v19, v18),
          v22 = v21,
          swift_bridgeObjectRelease(),
          (v22 & 1) == 0))
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.ConfigurationSetCache].Keys);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : Entity.ConfigurationCatalog.ConfigurationSetCache].Keys and conformance [A : B].Keys, &demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.ConfigurationSetCache].Keys, MEMORY[0x24BEE0310]);
      lazy protocol witness table accessor for type String and conformance String();
      v23 = Sequence<>.joined(separator:)();
      v25 = v24;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
      swift_allocError();
      *(_QWORD *)v26 = v19;
      *(_QWORD *)(v26 + 8) = v18;
      *(_QWORD *)(v26 + 16) = v23;
      *(_QWORD *)(v26 + 24) = v25;
      *(_QWORD *)(v26 + 32) = 0;
      *(_QWORD *)(v26 + 40) = 0;
      *(_BYTE *)(v26 + 48) = 0;
      swift_willThrow();
      return swift_release();
    }
    result = swift_bridgeObjectRelease();
    v4 = v63;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v14 >= v9)
      goto LABEL_29;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_29;
      v15 = *(_QWORD *)(v5 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_29;
        v15 = *(_QWORD *)(v5 + 8 * v11);
        if (!v15)
        {
          v11 = v14 + 3;
          if (v14 + 3 >= v9)
            goto LABEL_29;
          v15 = *(_QWORD *)(v5 + 8 * v11);
          if (!v15)
          {
            v11 = v14 + 4;
            if (v14 + 4 >= v9)
              goto LABEL_29;
            v15 = *(_QWORD *)(v5 + 8 * v11);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_22:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 5;
  if (v16 >= v9)
    goto LABEL_29;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      return result;
    }
    if (v11 >= v9)
      break;
    v15 = *(_QWORD *)(v5 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_29:
  swift_release();
  Hasher.init()();
  v5 = *(_QWORD *)(a3 + 32);
  if (!(v5 >> 62))
  {
    v27 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v27)
      goto LABEL_31;
LABEL_41:
    swift_bridgeObjectRelease();
    v41 = Hasher.finalize()();
    v42 = v41;
    if (*(_QWORD *)(*a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v41), (v43 & 1) != 0))
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String].Values);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : String].Values and conformance [A : B].Values, &demangling cache variable for type metadata for [String : String].Values, MEMORY[0x24BEE03C0]);
      lazy protocol witness table accessor for type String and conformance String();
      v44 = Sequence<>.joined(separator:)();
      v46 = v45;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
      swift_allocError();
      *(_QWORD *)v47 = v44;
      *(_QWORD *)(v47 + 8) = v46;
      *(_OWORD *)(v47 + 16) = 0u;
      *(_OWORD *)(v47 + 32) = 0u;
      *(_BYTE *)(v47 + 48) = 2;
      return swift_willThrow();
    }
    else
    {
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v64 = *a1;
      *a1 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v60, v42, isUniquelyReferenced_nonNull_native);
      *a1 = v64;
      return swift_bridgeObjectRelease();
    }
  }
LABEL_61:
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  if (!v27)
    goto LABEL_41;
LABEL_31:
  v62 = v27;
  v28 = 0;
  if ((v5 & 0xC000000000000001) != 0)
  {
    while (2)
    {
      v29 = MEMORY[0x220769770](v28, v5);
      v30 = v28 + 1;
      if (__OFADD__(v28, 1))
        goto LABEL_59;
      v31 = (_QWORD *)v29;
      v32 = *(_QWORD *)(v29 + 32);
      v33 = *(_QWORD *)(v29 + 40);
      v34 = *(_QWORD *)(v4 + 16);
      swift_bridgeObjectRetain();
      if (v34)
      {
        swift_bridgeObjectRetain();
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
        if ((v36 & 1) != 0)
        {
          v37 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v35);
          v38 = *v37;
          v39 = v37[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
LABEL_38:
          if (!*(_QWORD *)(v31[8] + 16))
            goto LABEL_54;
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
          if ((v40 & 1) == 0)
            goto LABEL_55;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          ++v28;
          v4 = v63;
          if (v30 == v62)
            goto LABEL_41;
          continue;
        }
        swift_bridgeObjectRelease();
      }
      break;
    }
    v38 = v31[2];
    v39 = v31[3];
    swift_bridgeObjectRetain();
    goto LABEL_38;
  }
  while (2)
  {
    v49 = v28 + 1;
    if (__OFADD__(v28, 1))
      goto LABEL_60;
    v50 = *(_QWORD **)(v5 + 8 * v28 + 32);
    v32 = v50[4];
    v33 = v50[5];
    if (*(_QWORD *)(v4 + 16))
    {
      swift_bridgeObjectRetain_n();
      swift_retain();
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
      if ((v52 & 1) != 0)
      {
        v53 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v51);
        v38 = *v53;
        v39 = v53[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    v38 = v50[2];
    v39 = v50[3];
    swift_bridgeObjectRetain();
LABEL_53:
    if (!*(_QWORD *)(v50[8] + 16))
    {
LABEL_54:
      v54 = v32;
      goto LABEL_56;
    }
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
    if ((v48 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_release();
      ++v28;
      v4 = v63;
      if (v49 == v27)
        goto LABEL_41;
      continue;
    }
    break;
  }
LABEL_55:
  v54 = v32;
  swift_bridgeObjectRelease();
LABEL_56:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.Configuration].Keys);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : Entity.ConfigurationCatalog.Configuration].Keys and conformance [A : B].Keys, &demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.Configuration].Keys, MEMORY[0x24BEE0310]);
  lazy protocol witness table accessor for type String and conformance String();
  v55 = Sequence<>.joined(separator:)();
  v57 = v56;
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
  swift_allocError();
  *(_QWORD *)v58 = v38;
  *(_QWORD *)(v58 + 8) = v39;
  *(_QWORD *)(v58 + 16) = v54;
  *(_QWORD *)(v58 + 24) = v33;
  *(_QWORD *)(v58 + 32) = v55;
  *(_QWORD *)(v58 + 40) = v57;
  *(_BYTE *)(v58 + 48) = 1;
  swift_willThrow();
  return swift_release();
}

uint64_t Entity.ConfigurationCatalog.CachedEntityReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.CachedEntityReader.loadEntity(into:withConfigurations:loadOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 176);
  if (!v1)
  {
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
    swift_allocError();
    *(_OWORD *)v27 = 0u;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_BYTE *)(v27 + 48) = 5;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(v1 + 16)
    || (v2 = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000), (v3 & 1) == 0))
  {
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_OWORD *)v26 = xmmword_21BE64240;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 32) = 0;
    *(_QWORD *)(v26 + 16) = 0;
    *(_BYTE *)(v26 + 40) = 1;
LABEL_28:
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 184) + 16) + 24);
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_27:
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_OWORD *)v28 = xmmword_21BE64240;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)(v28 + 16) = 0;
    *(_BYTE *)(v28 + 40) = 0;
    goto LABEL_28;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6);
  *(_QWORD *)(v0 + 192) = v8;
  swift_retain();
  swift_bridgeObjectRelease();
  Hasher.init()();
  v9 = *(_QWORD *)(v8 + 32);
  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_8;
LABEL_32:
    v29 = *(_QWORD *)(v0 + 184);
    swift_bridgeObjectRelease();
    v30 = *(_OWORD *)(v0 + 136);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 64) = v30;
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 152);
    v31 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 88);
    *(_OWORD *)(v0 + 32) = v31;
    v32 = Hasher.finalize()();
    v33 = *(_QWORD *)(v29 + 24);
    if (*(_QWORD *)(v33 + 16))
    {
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
      if ((v35 & 1) != 0)
      {
        *(_QWORD *)(v0 + 200) = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v34);
        swift_retain();
        swift_bridgeObjectRelease();
        type metadata accessor for MainActor();
        *(_QWORD *)(v0 + 208) = static MainActor.shared.getter();
        dispatch thunk of Actor.unownedExecutor.getter();
        return swift_task_switch();
      }
    }
    *(_QWORD *)(v0 + 160) = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String].Values);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : String].Values and conformance [A : B].Values, &demangling cache variable for type metadata for [String : String].Values, MEMORY[0x24BEE03C0]);
    lazy protocol witness table accessor for type String and conformance String();
    v36 = Sequence<>.joined(separator:)();
    v38 = v37;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
    swift_allocError();
    *(_QWORD *)v39 = v36;
    *(_QWORD *)(v39 + 8) = v38;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_BYTE *)(v39 + 48) = 3;
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_31:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v10 = result;
  if (!result)
    goto LABEL_32;
LABEL_8:
  if ((v9 & 0xC000000000000001) != 0)
  {
LABEL_37:
    v12 = MEMORY[0x220769770](0, v9);
    if (!*(_QWORD *)(v5 + 16))
      goto LABEL_23;
LABEL_11:
    v13 = *(_QWORD *)(v12 + 32);
    v14 = *(_QWORD *)(v12 + 40);
    swift_bridgeObjectRetain();
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
    if ((v16 & 1) != 0)
    {
      v17 = 0;
      v18 = v10 - 1;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v15 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        String.hash(into:)();
        swift_release();
        swift_bridgeObjectRelease();
        if (v18 == v17)
          goto LABEL_32;
        v19 = v17 + 1;
        if ((v9 & 0xC000000000000001) != 0)
        {
          v12 = MEMORY[0x220769770](v17 + 1, v9);
          if (__OFADD__(v19, 1))
            goto LABEL_30;
        }
        else
        {
          if (v19 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_37;
          }
          v12 = *(_QWORD *)(v9 + 8 * v17 + 40);
          swift_retain();
          if (__OFADD__(v19, 1))
          {
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
        }
        if (!*(_QWORD *)(v5 + 16))
          goto LABEL_23;
        v20 = *(_QWORD *)(v12 + 32);
        v21 = *(_QWORD *)(v12 + 40);
        swift_bridgeObjectRetain();
        v15 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        ++v17;
      }
      while ((v22 & 1) != 0);
    }
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v12 + 32);
    v24 = *(_QWORD *)(v12 + 40);
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_QWORD *)v25 = v23;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(v25 + 24) = 0;
    *(_QWORD *)(v25 + 32) = 0;
    *(_QWORD *)(v25 + 16) = 0;
    *(_BYTE *)(v25 + 40) = 4;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(_QWORD *)(v9 + 32);
    swift_retain();
    if (!*(_QWORD *)(v5 + 16))
      goto LABEL_23;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release();
  Entity.copy(to:recursive:)(v1, 1);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.CachedEntityReader()
{
  return objc_opt_self();
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.configurationMapCache.getter in conformance Entity.ConfigurationCatalog.CachedEntityReader()
{
  return swift_retain();
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.loadEntity(into:withConfigurations:loadOptions:) in conformance Entity.ConfigurationCatalog.CachedEntityReader(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  v6[22] = a2;
  v6[23] = v2;
  v6[21] = a1;
  return swift_task_switch();
}

uint64_t QueryType.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t QueryType.evaluate(value:)()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

uint64_t type metadata accessor for QueryType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryType);
}

void static AREnvironmentProbeComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 42;
}

uint64_t AREnvironmentProbeComponent.texture.getter()
{
  return swift_retain();
}

uint64_t AREnvironmentProbeComponent.texture.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AREnvironmentProbeComponent.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 AREnvironmentProbeComponent.extent.getter()
{
  __n128 *v0;

  return v0[1];
}

void AREnvironmentProbeComponent.extent.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*AREnvironmentProbeComponent.extent.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AREnvironmentProbeComponent.useAsBackground.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t AREnvironmentProbeComponent.useAsBackground.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*AREnvironmentProbeComponent.useAsBackground.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t AREnvironmentProbeComponent.init(texture:extent:useAsBackground:)@<X0>(unint64_t result@<X0>, unsigned __int8 a2@<W1>, __n128 *a3@<X8>, __n128 a4@<Q0>)
{
  a3->n128_u64[0] = result;
  a3[1] = a4;
  a3[2].n128_u8[0] = a2;
  return result;
}

__n128 static AREnvironmentProbeComponent.__fromCore(_:)@<Q0>(__n128 *a1@<X8>)
{
  uint64_t Texture;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  unsigned __int8 UseAsBackground;
  __n128 result;
  __n128 v8;

  Texture = REAREnvironmentProbeComponentGetTexture();
  if (Texture)
  {
    v3 = Texture;
    type metadata accessor for TextureResource();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  else
  {
    v4 = 0;
  }
  REAREnvironmentProbeComponentGetExtents();
  v8 = v5;
  UseAsBackground = REAREnvironmentProbeComponentGetUseAsBackground();
  a1->n128_u64[0] = v4;
  result = v8;
  a1[1] = v8;
  a1[2].n128_u8[0] = UseAsBackground;
  return result;
}

uint64_t AREnvironmentProbeComponent.__toCore(_:)()
{
  REAREnvironmentProbeComponentSetTexture();
  REAREnvironmentProbeComponentSetExtents();
  REAREnvironmentProbeComponentSetUseAsBackground();
  return RENetworkMarkComponentDirty();
}

uint64_t protocol witness for Component.__toCore(_:) in conformance AREnvironmentProbeComponent()
{
  REAREnvironmentProbeComponentSetTexture();
  REAREnvironmentProbeComponentSetExtents();
  REAREnvironmentProbeComponentSetUseAsBackground();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance AREnvironmentProbeComponent(_DWORD *a1@<X8>)
{
  *a1 = 42;
}

uint64_t initializeWithCopy for AREnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AREnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for AREnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AREnvironmentProbeComponent(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AREnvironmentProbeComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AREnvironmentProbeComponent()
{
  return &type metadata for AREnvironmentProbeComponent;
}

uint64_t __RKActiveSceneManager.__allocating_init()()
{
  uint64_t result;
  uint64_t v1;

  result = swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  return result;
}

uint64_t static __RKActiveSceneManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t __RKActiveSceneManager.init()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = v0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v2;
  return result;
}

uint64_t __RKActiveSceneManager.activeScene.setter(uint64_t a1)
{
  specialized __RKActiveSceneManager.activeScene.setter(a1);
  return swift_release();
}

uint64_t (*__RKActiveSceneManager.activeScene.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return __RKActiveSceneManager.activeScene.modify;
}

uint64_t __RKActiveSceneManager.activeScene.modify(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    result = swift_beginAccess();
    v6 = *(_QWORD *)(v5 + 24);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain();
      v8 = (uint64_t *)(v6 + 40);
      do
      {
        v9 = *(_QWORD *)(a1 + 24);
        v10 = *v8;
        ObjectType = swift_getObjectType();
        v12 = *(_QWORD *)(v9 + 16);
        v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8);
        swift_retain();
        swift_unknownObjectRetain();
        v13(v9, v12, ObjectType, v10);
        swift_release();
        swift_unknownObjectRelease();
        v8 += 2;
        --v7;
      }
      while (v7);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t __RKActiveSceneManager.addObserver(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v5 = (_QWORD **)(v2 + 24);
  result = swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(v7 + 32);
    while (*v9 != a1)
    {
      v9 += 2;
      if (!--v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    swift_beginAccess();
    v10 = *v5;
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v5 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *v5 = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *v5 = v10;
    }
    v10[2] = v13 + 1;
    v14 = &v10[2 * v13];
    v14[4] = a1;
    v14[5] = a2;
    return swift_endAccess();
  }
  return result;
}

uint64_t __RKActiveSceneManager.removeObserver(observer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *i;

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = 0;
    for (i = (_QWORD *)(v4 + 32); *i != a1; i += 2)
    {
      if (v5 == ++v6)
        return result;
    }
    swift_beginAccess();
    specialized Array.remove(at:)(v6);
    swift_endAccess();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t __RKActiveSceneManager.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKActiveSceneManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized __RKActiveSceneManager.activeScene.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v1;
  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  swift_release();
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = (uint64_t *)(v5 + 40);
    do
    {
      v8 = *v7;
      ObjectType = swift_getObjectType();
      v10 = *(_QWORD *)(v2 + 16);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8);
      swift_retain();
      swift_unknownObjectRetain();
      v11(v2, v10, ObjectType, v8);
      swift_unknownObjectRelease();
      swift_release();
      v7 += 2;
      --v6;
    }
    while (v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21BBE0C50@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_21BBE0C98()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized __RKActiveSceneManager.activeScene.setter(v0);
  return swift_release();
}

uint64_t dispatch thunk of __RKActiveSceneObserver.manager(_:activeSceneDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for __RKActiveSceneManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKActiveSceneManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKActiveSceneManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.activeScene.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.activeScene.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.activeScene.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.addObserver(observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.removeObserver(observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t HasModel.blendWeights.getter()
{
  uint64_t BlendShapeWeightsCount;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t BlendWeightCount;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  REBlendShapeWeightsComponentGetComponentType();
  if (REEntityGetComponentByClass()
    && (BlendShapeWeightsCount = REBlendShapeWeightsComponentGetBlendShapeWeightsCount()) != 0)
  {
    v1 = BlendShapeWeightsCount;
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsCount & ~(BlendShapeWeightsCount >> 63), 0, MEMORY[0x24BEE4AF8]);
    if (v1 < 0)
    {
      __break(1u);
    }
    else
    {
      v3 = v2;
      v4 = 0;
      v5 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        BlendWeightCount = REBlendShapeWeightsComponentGetBlendWeightCount();
        if (BlendWeightCount < 0)
          break;
        v7 = BlendWeightCount;
        if (BlendWeightCount)
        {
          v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v8 + 16) = v7;
        }
        else
        {
          v8 = v5;
        }
        REBlendShapeWeightsComponentGetBlendWeights();
        *(_QWORD *)(v8 + 16) = v7;
        v10 = v3[2];
        v9 = v3[3];
        if (v10 >= v9 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v3);
        ++v4;
        v3[2] = v10 + 1;
        v3[v10 + 4] = v8;
        if (v1 == v4)
          return (uint64_t)v3;
      }
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
    v3 = (_QWORD *)swift_allocObject();
    *((_OWORD *)v3 + 1) = xmmword_21BE411F0;
    v3[4] = MEMORY[0x24BEE4AF8];
    return (uint64_t)v3;
  }
  return result;
}

uint64_t HasModel.blendWeights.setter(uint64_t a1)
{
  int64_t v2;
  uint64_t BlendShapeWeightsCount;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return swift_bridgeObjectRelease();
  REBlendShapeWeightsComponentGetComponentType();
  if (!REEntityGetComponentByClass())
    return swift_bridgeObjectRelease();
  BlendShapeWeightsCount = REBlendShapeWeightsComponentGetBlendShapeWeightsCount();
  if (!BlendShapeWeightsCount || BlendShapeWeightsCount != v2)
    return swift_bridgeObjectRelease();
  result = REBlendShapeWeightsComponentGetBlendWeightCount();
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = a1 + 32;
    if (result == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
    {
      v6 = 0;
      while (v2 - 1 != v6)
      {
        result = REBlendShapeWeightsComponentGetBlendWeightCount();
        if ((unint64_t)(v6 + 1) >= *(_QWORD *)(a1 + 16))
        {
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v6++ + 40) + 16);
        if (result != v7)
          return swift_bridgeObjectRelease();
      }
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, MEMORY[0x24BEE4AF8]);
      result = swift_bridgeObjectRelease();
      v8 = 0;
      while (v8 != v2)
      {
        if (v8 >= *(_QWORD *)(a1 + 16))
          goto LABEL_25;
        v9 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v8) + 16);
        if (v9)
        {
          v10 = 0;
          while (v10 < *(_QWORD *)(*(_QWORD *)(v5 + 8 * v8) + 16))
          {
            v11 = v10 + 1;
            result = REBlendShapeWeightsComponentSetBlendWeight();
            v10 = v11;
            if (v9 == v11)
              goto LABEL_13;
          }
          __break(1u);
          goto LABEL_23;
        }
LABEL_13:
        if (++v8 == v2)
        {
          swift_bridgeObjectRelease();
          return RENetworkMarkComponentDirty();
        }
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t (*HasModel.blendWeights.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = HasModel.blendWeights.getter();
  return HasModel.blendWeights.modify;
}

uint64_t HasModel.blendWeights.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return HasModel.blendWeights.setter(*a1);
  v2 = swift_bridgeObjectRetain();
  HasModel.blendWeights.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t HasModel.blendWeightNames.getter()
{
  uint64_t BlendShapeWeightsCount;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t BlendWeightCount;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  REBlendShapeWeightsComponentGetComponentType();
  if (REEntityGetComponentByClass()
    && REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition()
    && (BlendShapeWeightsCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount()) != 0)
  {
    v1 = BlendShapeWeightsCount;
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsCount & ~(BlendShapeWeightsCount >> 63), 0, MEMORY[0x24BEE4AF8]);
    if ((v1 & 0x8000000000000000) == 0)
    {
      v3 = (_QWORD *)result;
      v4 = 0;
      v16 = v1;
      while (v4 != v1)
      {
        BlendWeightCount = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendWeightCount & ~(BlendWeightCount >> 63), 0, MEMORY[0x24BEE4AF8]);
        if (BlendWeightCount < 0)
          goto LABEL_20;
        v6 = (_QWORD *)result;
        if (BlendWeightCount)
        {
          v7 = 0;
          do
          {
            REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
            result = String.init(cString:)();
            v8 = result;
            v10 = v9;
            v12 = v6[2];
            v11 = v6[3];
            if (v12 >= v11 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            ++v7;
            v6[2] = v12 + 1;
            v13 = &v6[2 * v12];
            v13[4] = v8;
            v13[5] = v10;
          }
          while (BlendWeightCount != v7);
        }
        v15 = v3[2];
        v14 = v3[3];
        if (v15 >= v14 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v3);
          v3 = (_QWORD *)result;
        }
        v1 = v16;
        ++v4;
        v3[2] = v15 + 1;
        v3[v15 + 4] = v6;
        if (v4 == v16)
          return (uint64_t)v3;
      }
      __break(1u);
LABEL_20:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>);
    v3 = (_QWORD *)swift_allocObject();
    *((_OWORD *)v3 + 1) = xmmword_21BE411F0;
    v3[4] = MEMORY[0x24BEE4AF8];
    return (uint64_t)v3;
  }
  return result;
}

uint64_t sub_21BBE12E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = HasModel.blendWeights.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BBE130C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return HasModel.blendWeights.setter(v0);
}

uint64_t sub_21BBE1334()
{
  return 16;
}

__n128 sub_21BBE1340(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void StateMachineComponent.init()(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v1;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t StateMachineComponent.init(stateMachine:explicitParameterBindings:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t StateMachineComponent.stateMachineResource.getter()
{
  return swift_retain();
}

uint64_t StateMachineComponent.stateMachineResource.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)v1 = a1;
  *(_BYTE *)(v1 + 16) = 0;
  return result;
}

Swift::Void __swiftcall StateMachineComponent.setParametersOutOfSync()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 16) = 0;
}

uint64_t (*StateMachineComponent.stateMachineResource.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return StateMachineComponent.stateMachineResource.modify;
}

uint64_t StateMachineComponent.stateMachineResource.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    *(_BYTE *)(*(_QWORD *)result + 16) = 0;
  return result;
}

uint64_t StateMachineComponent.parameters.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  if ((v0[2] & 1) != 0)
    return swift_bridgeObjectRetain();
  v1 = *v0;
  if (!*v0)
    return swift_bridgeObjectRetain();
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
    goto LABEL_5;
  static StateMachineGraphCreator.createGraph(from:)();
  v3 = *(_QWORD *)&v8[16];
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = v7;
  *(_OWORD *)(v1 + 24) = *(_OWORD *)v8;
  *(_QWORD *)(v1 + 40) = v3;
  result = outlined consume of StateMachineGraph?(v4, v5);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
LABEL_5:
    v7 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)v8 = v2;
    *(_OWORD *)&v8[8] = *(_OWORD *)(v1 + 32);
    specialized static StateMachineParametersCreator.syncUp(parameters:with:)(v0 + 1, (uint64_t)&v7);
    *((_BYTE *)v0 + 16) = 1;
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t StateMachineComponent.parameters.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  *(_BYTE *)(v1 + 16) = 0;
  return result;
}

uint64_t (*StateMachineComponent.parameters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*result)(uint64_t *, char);
  uint64_t v9;
  _BYTE v10[24];

  a1[1] = v1;
  if ((v1[2] & 1) != 0)
    goto LABEL_6;
  v3 = *v1;
  if (!*v1)
    goto LABEL_6;
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
    goto LABEL_5;
  static StateMachineGraphCreator.createGraph(from:)();
  v5 = *(_QWORD *)&v10[16];
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 16) = v9;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)v10;
  *(_QWORD *)(v3 + 40) = v5;
  result = (uint64_t (*)(uint64_t *, char))outlined consume of StateMachineGraph?(v6, v7);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
  {
LABEL_5:
    v9 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)v10 = v4;
    *(_OWORD *)&v10[8] = *(_OWORD *)(v3 + 32);
    specialized static StateMachineParametersCreator.syncUp(parameters:with:)(v1 + 1, (uint64_t)&v9);
    *((_BYTE *)v1 + 16) = 1;
LABEL_6:
    *a1 = v1[1];
    swift_bridgeObjectRetain();
    return StateMachineComponent.parameters.modify;
  }
  __break(1u);
  return result;
}

uint64_t StateMachineComponent.parameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 8) = v2;
    *(_BYTE *)(v3 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 8) = v2;
    *(_BYTE *)(v3 + 16) = 0;
  }
  return result;
}

_QWORD *static StateMachineComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t StateMachineAsset;
  uint64_t v3;
  _QWORD *result;

  StateMachineAsset = REStateMachineComponentGetStateMachineAsset();
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_4;
  type metadata accessor for StateMachineResource();
  v3 = swift_dynamicCastClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for StateMachineResource();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 48) = StateMachineAsset;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    outlined consume of StateMachineGraph?(0, 0);
    RERetain();
    REAssetSetSwiftObject();
  }
  result = specialized static StateMachineParametersCreator.createBoundParameters(from:)();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance StateMachineComponent(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (!*v1)
    return specialized static StateMachineUtils.logError(_:)(0xD000000000000025, 0x800000021BE8B0D0);
  v2 = v1[1];
  v3 = *a1;
  REStateMachineComponentAssignAsset();
  return specialized static StateMachineParametersCreator.updateInCoreComponent(coreComponent:from:)(v3, v2);
}

uint64_t StateMachineComponent.__toCore(_:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (!*v1)
    return specialized static StateMachineUtils.logError(_:)(0xD000000000000025, 0x800000021BE8B0D0);
  v2 = v1[1];
  v3 = *a1;
  REStateMachineComponentAssignAsset();
  return specialized static StateMachineParametersCreator.updateInCoreComponent(coreComponent:from:)(v3, v2);
}

void protocol witness for static Component.__coreComponentType.getter in conformance StateMachineComponent(_DWORD *a1@<X8>)
{
  *a1 = 2015;
}

void static StateMachineComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2015;
}

uint64_t sub_21BBE176C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_21BBE1778(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_retain();
  result = swift_release();
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t destroy for StateMachineComponent()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for StateMachineComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StateMachineComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for StateMachineComponent(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineComponent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineComponent()
{
  return &type metadata for StateMachineComponent;
}

uint64_t __SkyboxComponent.environment.getter()
{
  return swift_retain();
}

uint64_t __SkyboxComponent.environment.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*__SkyboxComponent.environment.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __SkyboxComponent.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t __SkyboxComponent.init(environment:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static __SkyboxComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RESkyboxComponentGetMaterial();
  if (result)
  {
    type metadata accessor for EnvironmentResource();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    result = swift_beginAccess();
    *(_QWORD *)(v3 + 24) = 0;
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance __SkyboxComponent()
{
  return __SkyboxComponent.__toCore(_:)();
}

uint64_t __SkyboxComponent.__toCore(_:)()
{
  void *v0;

  v0 = (void *)REMaterialParameterBlockValueCreate();
  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x800000021BE8B100);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  RESkyboxComponentSetMaterial();
  RENetworkMarkComponentDirty();
  return swift_release();
}

void protocol witness for static Component.__coreComponentType.getter in conformance __SkyboxComponent(_DWORD *a1@<X8>)
{
  *a1 = 23;
}

void static __SkyboxComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 23;
}

BOOL specialized static __SkyboxComponent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
    return v3 == 0;
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_9;
    return 0;
  }
  if (v5)
    v6 = v4 == v5;
  else
    v6 = 0;
  if (!v6)
    return 0;
LABEL_9:
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 24);
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 24);
  result = (v7 | v8) == 0;
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
    return v7 == v8;
  return result;
}

ValueMetadata *type metadata accessor for __SkyboxComponent()
{
  return &type metadata for __SkyboxComponent;
}

uint64_t static StateMachineCommandExecutionTiming.== infix(_:_:)()
{
  return 1;
}

void StateMachineCommandExecutionTiming.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int StateMachineCommandExecutionTiming.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t StateMachineCommand.parameters.getter()
{
  return MEMORY[0x24BEE4AF8];
}

{
  return MEMORY[0x24BEE4AF8];
}

__n128 StateMachineAnimationPlayCommand.init(targetEntity:animationName:playToCompletion:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unsigned __int8 a4@<W3>, __n128 *a5@<X8>)
{
  unsigned __int8 v5;
  __n128 result;

  v5 = a1[1].n128_u8[0];
  result = *a1;
  *a5 = *a1;
  a5[1].n128_u8[0] = v5;
  a5[1].n128_u64[1] = a2;
  a5[2].n128_u64[0] = a3;
  a5[2].n128_u8[8] = a4;
  return result;
}

uint64_t StateMachineAnimationPlayCommand.parameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_BYTE *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommandParameterProtocol>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v7 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
  *(_QWORD *)(v7 + 64) = &protocol witness table for StateMachineCommandParameter<A>;
  v8 = swift_allocObject();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v4;
  strcpy((char *)(v8 + 16), "AnimationName");
  *(_WORD *)(v8 + 30) = -4864;
  *(_QWORD *)(v7 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
  *(_QWORD *)(v7 + 104) = &protocol witness table for StateMachineCommandParameter<A>;
  *(_BYTE *)(v7 + 88) = v6;
  *(_QWORD *)(v7 + 72) = 0xD000000000000018;
  *(_QWORD *)(v7 + 80) = 0x800000021BE8B120;
  swift_bridgeObjectRetain();
  if (v3 != 255)
  {
    outlined copy of BindTarget?(v1, v2, v3);
    v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)v7);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
    v13 = &protocol witness table for StateMachineCommandParameter<A>;
    v9 = swift_allocObject();
    *(_QWORD *)&v11 = v9;
    strcpy((char *)(v9 + 16), "TargetEntity");
    *(_BYTE *)(v9 + 29) = 0;
    *(_WORD *)(v9 + 30) = -5120;
    *(_QWORD *)(v9 + 32) = v1;
    *(_QWORD *)(v9 + 40) = v2;
    *(_BYTE *)(v9 + 48) = v3;
    *(_QWORD *)(v7 + 16) = 3;
    outlined init with take of BindableDataInternal(&v11, v7 + 112);
  }
  return v7;
}

uint64_t sub_21BBE1E00()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t StateMachineAnimationPlayCommand.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of BindTarget?(v2, v3, v4);
}

uint64_t StateMachineAnimationPlayCommand.targetEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*StateMachineAnimationPlayCommand.targetEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineAnimationPlayCommand.animationName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineAnimationPlayCommand.animationName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*StateMachineAnimationPlayCommand.animationName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineAnimationPlayCommand.playToCompletion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t StateMachineAnimationPlayCommand.playToCompletion.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*StateMachineAnimationPlayCommand.playToCompletion.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 StateMachineAnimationStopCommand.init(targetEntity:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = v2;
  return result;
}

uint64_t StateMachineAnimationStopCommand.targetEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*StateMachineAnimationStopCommand.targetEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineAnimationStopCommand.parameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 255)
  {
    v4 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommandParameterProtocol>);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_21BE411F0;
    *(_QWORD *)(v4 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
    *(_QWORD *)(v4 + 64) = &protocol witness table for StateMachineCommandParameter<A>;
    v5 = swift_allocObject();
    *(_QWORD *)(v4 + 32) = v5;
    *(_QWORD *)(v5 + 32) = v2;
    *(_QWORD *)(v5 + 40) = v1;
    *(_BYTE *)(v5 + 48) = v3;
    strcpy((char *)(v5 + 16), "TargetEntity");
    *(_BYTE *)(v5 + 29) = 0;
    *(_WORD *)(v5 + 30) = -5120;
  }
  outlined copy of BindTarget?(v2, v1, v3);
  return v4;
}

uint64_t StateMachineAnimationStopCommand.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of BindTarget?(v2, v3, v4);
}

uint64_t StateMachineAnimationSetPlaybackTimeCommand.init(targetEntity:playbackTime:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3;

  v3 = *(_BYTE *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_BYTE *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = a3;
  return result;
}

uint64_t StateMachineAnimationSetPlaybackTimeCommand.parameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommandParameterProtocol>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v5 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
  *(_QWORD *)(v5 + 64) = &protocol witness table for StateMachineCommandParameter<A>;
  *(_QWORD *)(v5 + 48) = v4;
  strcpy((char *)(v5 + 32), "PlaybackTime");
  *(_BYTE *)(v5 + 45) = 0;
  *(_WORD *)(v5 + 46) = -5120;
  if (v3 != 255)
  {
    outlined copy of BindTarget(v1, v2, v3);
    v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 2, 1, (_QWORD *)v5);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
    v10 = &protocol witness table for StateMachineCommandParameter<A>;
    v6 = swift_allocObject();
    *(_QWORD *)&v8 = v6;
    strcpy((char *)(v6 + 16), "TargetEntity");
    *(_BYTE *)(v6 + 29) = 0;
    *(_WORD *)(v6 + 30) = -5120;
    *(_QWORD *)(v6 + 32) = v1;
    *(_QWORD *)(v6 + 40) = v2;
    *(_BYTE *)(v6 + 48) = v3;
    *(_QWORD *)(v5 + 16) = 2;
    outlined init with take of BindableDataInternal(&v8, v5 + 72);
  }
  return v5;
}

uint64_t StateMachineAnimationSetPlaybackTimeCommand.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of BindTarget?(v2, v3, v4);
}

uint64_t StateMachineAnimationSetPlaybackTimeCommand.targetEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*StateMachineAnimationSetPlaybackTimeCommand.targetEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double StateMachineAnimationSetPlaybackTimeCommand.playbackTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void StateMachineAnimationSetPlaybackTimeCommand.playbackTime.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*StateMachineAnimationSetPlaybackTimeCommand.playbackTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t sub_21BBE225C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of BindTarget(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type StateMachineCommandExecutionTiming and conformance StateMachineCommandExecutionTiming()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StateMachineCommandExecutionTiming and conformance StateMachineCommandExecutionTiming;
  if (!lazy protocol witness table cache variable for type StateMachineCommandExecutionTiming and conformance StateMachineCommandExecutionTiming)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for StateMachineCommandExecutionTiming, &type metadata for StateMachineCommandExecutionTiming);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateMachineCommandExecutionTiming and conformance StateMachineCommandExecutionTiming);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StateMachineCommandExecutionTiming(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BBE2314 + 4 * asc_21BE64960[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BBE2334 + 4 * byte_21BE64965[v4]))();
}

_BYTE *sub_21BBE2314(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BBE2334(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BBE233C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BBE2344(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BBE234C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BBE2354(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StateMachineCommandExecutionTiming()
{
  return &type metadata for StateMachineCommandExecutionTiming;
}

uint64_t dispatch thunk of StateMachineCommand.parameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of StateMachineCommand.timing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t destroy for StateMachineAnimationPlayCommand(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StateMachineAnimationPlayCommand(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of BindTarget(*a2, v6, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v4;
  }
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StateMachineAnimationPlayCommand(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      v13 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v13;
    }
    else
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      outlined copy of BindTarget(*(_QWORD *)a2, v11, v4);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 16) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of BindTarget(a1);
    v12 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v12;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    outlined copy of BindTarget(*(_QWORD *)a2, v6, v4);
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    v9 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v4;
    outlined consume of BindTarget(v7, v8, v9);
  }
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t assignWithTake for StateMachineAnimationPlayCommand(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 255)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 255)
  {
    outlined destroy of BindTarget(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of BindTarget(v6, v7, v4);
LABEL_6:
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineAnimationPlayCommand(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineAnimationPlayCommand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineAnimationPlayCommand()
{
  return &type metadata for StateMachineAnimationPlayCommand;
}

uint64_t destroy for StateMachineAnimationStopCommand(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 != 255)
    return outlined consume of BindTarget(*(_QWORD *)result, *(_QWORD *)(result + 8), v1);
  return result;
}

ValueMetadata *type metadata accessor for StateMachineAnimationStopCommand()
{
  return &type metadata for StateMachineAnimationStopCommand;
}

uint64_t initializeBufferWithCopyOfBuffer for StateMachineAnimationStopCommand(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v4 = *a2;
    v5 = a2[1];
    outlined copy of BindTarget(*a2, v5, v3);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for StateMachineAnimationStopCommand(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      v13 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v13;
    }
    else
    {
      v11 = *(_QWORD *)a2;
      v10 = *((_QWORD *)a2 + 1);
      outlined copy of BindTarget(*(_QWORD *)a2, v10, v4);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v10;
      *(_BYTE *)(a1 + 16) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of BindTarget(a1);
    v12 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v12;
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 1);
    outlined copy of BindTarget(*(_QWORD *)a2, v5, v4);
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    v9 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v4;
    outlined consume of BindTarget(v7, v8, v9);
  }
  return a1;
}

uint64_t assignWithTake for StateMachineAnimationStopCommand(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 255)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 255)
  {
    outlined destroy of BindTarget(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    return a1;
  }
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of BindTarget(v6, v7, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineAnimationStopCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineAnimationStopCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineAnimationStopAllCommand()
{
  return &type metadata for StateMachineAnimationStopAllCommand;
}

uint64_t initializeWithCopy for StateMachineAnimationSetPlaybackTimeCommand(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of BindTarget(*a2, v6, v4);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v4;
  }
  *(_QWORD *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t assignWithCopy for StateMachineAnimationSetPlaybackTimeCommand(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      v13 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v13;
    }
    else
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      outlined copy of BindTarget(*(_QWORD *)a2, v11, v4);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 16) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of BindTarget(a1);
    v12 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v12;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    outlined copy of BindTarget(*(_QWORD *)a2, v6, v4);
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    v9 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v4;
    outlined consume of BindTarget(v7, v8, v9);
  }
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  return a1;
}

uint64_t assignWithTake for StateMachineAnimationSetPlaybackTimeCommand(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 255)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 255)
  {
    outlined destroy of BindTarget(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of BindTarget(v6, v7, v4);
LABEL_6:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineAnimationSetPlaybackTimeCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineAnimationSetPlaybackTimeCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineAnimationSetPlaybackTimeCommand()
{
  return &type metadata for StateMachineAnimationSetPlaybackTimeCommand;
}

uint64_t BlendShapeWeightsMapping.__allocating_init(meshResource:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ServiceLocator;
  uint64_t result;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)(a1 + 16);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  ServiceLocator = REEngineGetServiceLocator();
  result = MEMORY[0x22076FD58](ServiceLocator);
  if (result)
  {
    if (v3)
    {
      *(_QWORD *)(v2 + 16) = REBlendShapeWeightsDefinitionAssetCreateAssetForMesh();
      RERetain();
      swift_retain();
      REAssetSetSwiftObject();
      swift_release();
      swift_release();
      return v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeightsMapping.init(meshResource:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ServiceLocator;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  ServiceLocator = REEngineGetServiceLocator();
  result = MEMORY[0x22076FD58](ServiceLocator);
  if (result)
  {
    if (v2)
    {
      *(_QWORD *)(v1 + 16) = REBlendShapeWeightsDefinitionAssetCreateAssetForMesh();
      RERetain();
      swift_retain();
      REAssetSetSwiftObject();
      swift_release();
      swift_release();
      return v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeightsMapping.__allocating_init(blendShapeName:weightNames:)(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  BlendShapeWeightsMapping.init(blendShapeName:weightNames:)(a1, a2, a3);
  return v6;
}

uint64_t BlendShapeWeightsMapping.init(blendShapeName:weightNames:)(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t ServiceLocator;
  unint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  id v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t AssetWithDefinitionsAndWeightNames;
  uint64_t v36;
  uint64_t i;
  void *v38;
  uint64_t v39;
  uint64_t v41;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  ServiceLocator = REEngineGetServiceLocator();
  if (!MEMORY[0x22076FD58](ServiceLocator))
  {
    __break(1u);
LABEL_41:
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UnsafePointer<Int8>]>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(inited + 32) = MEMORY[0x24BEE4AF8];
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = a3 + 40;
    do
    {
      v11 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      v12 = strdup(v11);
      swift_release();
      swift_bridgeObjectRelease();
      if (v12)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v14 = v8[2];
        v13 = v8[3];
        if (v14 >= v13 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v8);
        v8[2] = v14 + 1;
        v8[v14 + 4] = v12;
      }
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v15 = v8[2];
  v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v18 = v16[2];
  v17 = v16[3];
  v19 = (_QWORD *)(v18 + 1);
  if (v18 >= v17 >> 1)
    goto LABEL_39;
  while (1)
  {
    v16[2] = v19;
    v20 = &v16[2 * v18 + 4];
    *v20 = v15;
    v20[1] = v8 + 4;
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 2, 1, (_QWORD *)inited);
    v19[2] = 2;
    v19[5] = v8;
    type metadata accessor for NSString();
    v21 = (void *)NSString.init(stringLiteral:)();
    v22 = objc_msgSend(v21, sel_UTF8String);
    v23 = v21;
    if (!v22)
      goto LABEL_41;
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
    v24[2] = v26 + 1;
    v8 = v24 + 4;
    v27 = (uint64_t)&v24[4 * v26 + 4];
    *(_BYTE *)v27 = 3;
    *(_QWORD *)(v27 + 8) = v22;
    *(_QWORD *)(v27 + 16) = 0;
    *(_DWORD *)(v27 + 24) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v28 = swift_initStackObject();
    *(_OWORD *)(v28 + 16) = xmmword_21BE411F0;
    *(_QWORD *)(v28 + 32) = a1;
    *(_QWORD *)(v28 + 40) = a2;
    v29 = (const char *)(String.utf8CString.getter() + 32);
    swift_bridgeObjectRetain();
    v30 = strdup(v29);
    swift_release();
    if (v30)
    {
      swift_bridgeObjectRelease();
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v32 = a2[2];
      v31 = a2[3];
      if (v32 >= v31 >> 1)
        a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, a2);
      a2[2] = v32 + 1;
      a2[v32 + 4] = v30;
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      a2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v34 = a1[2];
    v33 = a1[3];
    if (v34 >= v33 >> 1)
      a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, a1);
    a1[2] = v34 + 1;
    a1[v34 + 4] = a2 + 4;
    swift_bridgeObjectRetain();
    AssetWithDefinitionsAndWeightNames = REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitionsAndWeightNames();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v41 + 16) = AssetWithDefinitionsAndWeightNames;
    v36 = a2[2];
    if (v36)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v36; ++i)
      {
        v38 = (void *)a2[i + 4];
        free(v38);
      }
      swift_bridgeObjectRelease();
      a1 = a2;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v19[2];
    if (!v15)
      break;
    inited = 0;
    v18 = (unint64_t)(v19 + 4);
    while (1)
    {
      v17 = v19[2];
      if (inited >= v17)
        break;
      a2 = *(_QWORD **)(*(_QWORD *)(v18 + 8 * inited) + 16);
      if (a2)
      {
        v17 = 0;
        while (1)
        {
          v39 = *(_QWORD *)(v18 + 8 * inited);
          if (v17 >= *(_QWORD *)(v39 + 16))
            break;
          a1 = (_QWORD *)(v17 + 1);
          free(*(void **)(v39 + 8 * v17 + 32));
          v17 = (unint64_t)a1;
          if (a2 == a1)
            goto LABEL_29;
        }
        __break(1u);
        break;
      }
LABEL_29:
      if (++inited == v15)
        goto LABEL_36;
    }
    __break(1u);
LABEL_39:
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), (int64_t)v19, 1, v16);
  }
LABEL_36:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t BlendShapeWeightsMapping.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t BlendShapeWeightsMapping.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v1;
}

uint64_t BlendShapeWeightsMapping.deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t BlendShapeWeightsMapping.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t _Proto_BlendShapeWeightsMappingResource_v1.definition.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_retain();
  return _Proto_BlendShapeWeightsMappingDefinition_v1.init(_:)(v2, a1);
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

uint64_t type metadata accessor for BlendShapeWeightsMapping()
{
  return objc_opt_self();
}

uint64_t method lookup function for BlendShapeWeightsMapping()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BlendShapeWeightsMapping.__allocating_init(meshResource:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of BlendShapeWeightsMapping.__allocating_init(blendShapeName:weightNames:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of BlendShapeWeightsMapping.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of BlendShapeWeightsMapping.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for _Proto_BlendShapeWeightsMappingResource_v1()
{
  return objc_opt_self();
}

uint64_t method lookup function for _Proto_BlendShapeWeightsMappingResource_v1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _Proto_BlendShapeWeightsMappingResource_v1.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of _Proto_BlendShapeWeightsMappingResource_v1.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeWeightsMappingError_v1()
{
  return &type metadata for _Proto_BlendShapeWeightsMappingError_v1;
}

uint64_t one-time initialization function for ecsCoreLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, ecsCoreLogger);
  __swift_project_value_buffer(v0, (uint64_t)ecsCoreLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t static AnalyticsManager.shared.getter()
{
  type metadata accessor for AnalyticsManager();
  return swift_initStaticObject();
}

uint64_t type metadata accessor for AnalyticsManager()
{
  return objc_opt_self();
}

uint64_t AnalyticsManager.ObjectCaptureSessionInitEvent.init(sessionID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t AnalyticsManager.ObjectCaptureSessionImageStatsEvent.init(sessionID:numImages:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
}

uint64_t AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)(a1, a2, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent, a3);
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
}

RealityFoundation::AnalyticsManager::ObjectCaptureSessionCaptureModeEvent::CaptureMode_optional __swiftcall AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (RealityFoundation::AnalyticsManager::ObjectCaptureSessionCaptureModeEvent::CaptureMode_optional)rawValue;
}

uint64_t AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

RealityFoundation::AnalyticsManager::ObjectCaptureSessionCaptureModeEvent::CaptureMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode(Swift::Int *a1)
{
  return AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode.init(rawValue:)(*a1);
}

uint64_t AnalyticsManager.ObjectCaptureSessionStatusEvent.init(sessionID:status:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)(a1, a2, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent, a3);
}

uint64_t AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t result;

  v7 = *a2;
  v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = a3(0);
  *(_BYTE *)(a4 + *(int *)(result + 20)) = v7;
  return result;
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionStatusEvent);
}

uint64_t AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent.init(sessionID:bundleID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;

  v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(0);
  v10 = (_QWORD *)(a4 + *(int *)(result + 20));
  *v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
}

void AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[6];

  inited = type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent(0);
  v3 = *(_QWORD *)(inited - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](inited);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v26 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v25 = v3;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
    v16 = String.init<A>(describing:)();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
    _os_log_impl(&dword_21B9AA000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v15;
    v3 = v25;
    MEMORY[0x220772F44](v18, -1, -1);
    v19 = v13;
    a1 = v26;
    MEMORY[0x220772F44](v19, -1, -1);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
  }

  v20 = (void *)MEMORY[0x220768C3C](0xD000000000000030, 0x800000021BE8B1D0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
  v21 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v5, v22 + v21, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_16;
  v23 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);

}

uint64_t closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;

  v0 = UUID.uuidString.getter();
  v1 = MEMORY[0x220768C3C](v0);
  swift_bridgeObjectRelease();
  v2 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  return v2;
}

void AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[6];

  v2 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v26 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v25 = v3;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
    v16 = String.init<A>(describing:)();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
    _os_log_impl(&dword_21B9AA000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v15;
    v3 = v25;
    MEMORY[0x220772F44](v18, -1, -1);
    v19 = v13;
    a1 = v26;
    MEMORY[0x220772F44](v19, -1, -1);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
  }

  v20 = (void *)MEMORY[0x220768C3C](0xD000000000000036, 0x800000021BE8B210);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
  v21 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v5, v22 + v21, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_6_0;
  v23 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);

}

uint64_t closure #1 in AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  char v5;

  v0 = UUID.uuidString.getter();
  v1 = MEMORY[0x220768C3C](v0);
  swift_bridgeObjectRelease();
  v2 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(0);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v5 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, 0x6567616D496D756ELL, 0xE900000000000073, v5);
  swift_bridgeObjectRelease();
  return v2;
}

void AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[6];

  v2 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v26 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v25 = v3;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
    v16 = String.init<A>(describing:)();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
    _os_log_impl(&dword_21B9AA000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v15;
    v3 = v25;
    MEMORY[0x220772F44](v18, -1, -1);
    v19 = v13;
    a1 = v26;
    MEMORY[0x220772F44](v19, -1, -1);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
  }

  v20 = (void *)MEMORY[0x220768C3C](0xD000000000000037, 0x800000021BE8B250);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
  v21 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v5, v22 + v21, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_12_0;
  v23 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);

}

void AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[6];

  v2 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v26 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v25 = v3;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
    v16 = String.init<A>(describing:)();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
    _os_log_impl(&dword_21B9AA000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v15;
    v3 = v25;
    MEMORY[0x220772F44](v18, -1, -1);
    v19 = v13;
    a1 = v26;
    MEMORY[0x220772F44](v19, -1, -1);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
  }

  v20 = (void *)MEMORY[0x220768C3C](0xD000000000000032, 0x800000021BE8B290);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
  v21 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v5, v22 + v21, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_18_1;
  v23 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);

}

uint64_t closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  char v12;

  v7 = UUID.uuidString.getter();
  v8 = MEMORY[0x220768C3C](v7);
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  a2(0);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v12 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, a3, a4, v12);
  swift_bridgeObjectRelease();
  return v9;
}

void AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[6];

  v2 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v26 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v25 = v3;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
    v16 = String.init<A>(describing:)();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
    _os_log_impl(&dword_21B9AA000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v15;
    v3 = v25;
    MEMORY[0x220772F44](v18, -1, -1);
    v19 = v13;
    a1 = v26;
    MEMORY[0x220772F44](v19, -1, -1);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
  }

  v20 = (void *)MEMORY[0x220768C3C](0xD00000000000003CLL, 0x800000021BE8B2D0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
  v21 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v5, v22 + v21, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_24;
  v23 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);

}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7265646C6F66;
  if (*v1)
    v2 = 0x65636E6575716573;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t closure #1 in AnalyticsManager.sendPhotogrammetrySessionInitEvent(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t inited;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  v2 = UUID.uuidString.getter();
  v3 = MEMORY[0x220768C3C](v2);
  swift_bridgeObjectRelease();
  v4 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  inited = type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(0);
  v7 = *(_BYTE *)(a1 + *(int *)(inited + 20)) == 0;
  if (*(_BYTE *)(a1 + *(int *)(inited + 20)))
    v8 = 0x65636E6575716573;
  else
    v8 = 0x7265646C6F66;
  if (v7)
    v9 = 0xE600000000000000;
  else
    v9 = 0xE800000000000000;
  v10 = MEMORY[0x220768C3C](v8, v9);
  swift_bridgeObjectRelease();
  v11 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, 0x7954656372756F73, 0xEA00000000006570, v11);
  swift_bridgeObjectRelease();
  return v4;
}

void closure #1 in AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char *v10;
  _QWORD v11[2];

  v2 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = UUID.uuidString.getter();
  v6 = MEMORY[0x220768C3C](v5);
  swift_bridgeObjectRelease();
  v7 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11[1] = v7;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0);
  outlined init with copy of __RKEntityActionSpecification(a1 + *(int *)(v9 + 20), (uint64_t)v4, type metadata accessor for PhotogrammetrySession.Request);
  v10 = (char *)sub_21BBE4DDC + 4 * byte_21BE64C70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BBE4DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  Swift::Int v15;
  Class isa;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  v8 = MEMORY[0x220768C3C](0x6C69466C65646F6DLL, 0xE900000000000065);
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 - 88) = v1;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 0x5474736575716572, 0xEB00000000657079, isUniquelyReferenced_nonNull_native);
  v10 = *(_QWORD *)(v6 - 88);
  swift_bridgeObjectRelease();
  v11 = String.init<A>(describing:)();
  v12 = MEMORY[0x220768C3C](v11);
  swift_bridgeObjectRelease();
  v13 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 - 88) = v10;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0x6C6961746564, 0xE600000000000000, v13);
  v14 = *(_QWORD *)(v6 - 88);
  swift_bridgeObjectRelease();
  v15 = *(unsigned __int8 *)(v0 + *(int *)(v4 + 28));
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber);
  isa = NSNumber.init(integerLiteral:)(v15).super.super.isa;
  v17 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 - 88) = v14;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, 0x73736563637573, 0xE700000000000000, v17);
  v18 = *(_QWORD *)(v6 - 88);
  swift_bridgeObjectRelease();
  v19 = MEMORY[0x220768C3C](v3, v2);
  v20 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 - 88) = v18;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0x707954726F727265, 0xE900000000000065, v20);
  v21 = *(_QWORD *)(v6 - 88);
  v22 = swift_bridgeObjectRelease();
  v23 = MEMORY[0x220769140](v22, *(double *)(v0 + *(int *)(v4 + 36)));
  v24 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 - 88) = v21;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0xD000000000000019, 0x800000021BE8B380, v24);
  v25 = *(_QWORD *)(v6 - 88);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = UUID.uuidString.getter();
  v5 = MEMORY[0x220768C3C](v4);
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v8 = a2(0);
  v9 = MEMORY[0x220768C3C](*(_QWORD *)(a1 + *(int *)(v8 + 20)), *(_QWORD *)(a1 + *(int *)(v8 + 20) + 8));
  v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, 0x4449656C646E7562, 0xE800000000000000, v10);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t AnalyticsManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnalyticsManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionInitEvent);
}

uint64_t sub_21BBE5158()
{
  return objectdestroyTm_1(type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)(type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent, (uint64_t (*)(uint64_t))closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:));
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t sub_21BBE5190()
{
  return objectdestroyTm_1(type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
}

uint64_t objectdestroyTm_1(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  v3 = v1 + ((v2 + 16) & ~v2);
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)(type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent, (uint64_t (*)(uint64_t))closure #1 in AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:));
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + ((v3 + 16) & ~v3));
}

uint64_t sub_21BBE5264()
{
  return objectdestroyTm_1(type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)((void (*)(_QWORD))type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent, 0x4D65727574706163, 0xEB0000000065646FLL);
}

uint64_t sub_21BBE5298()
{
  return objectdestroyTm_1(type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)((void (*)(_QWORD))type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent, 0x737574617473, 0xE600000000000000);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a1)(0) - 8) + 80);
  return closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(v3 + ((v7 + 16) & ~v7), a1, a2, a3);
}

uint64_t sub_21BBE5318()
{
  return objectdestroy_20Tm(type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
}

unint64_t lazy protocol witness table accessor for type AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode and conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode and conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode;
  if (!lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode and conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode, &type metadata for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode and conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnalyticsManager.ObjectCaptureSessionStatusEvent.Status and conformance AnalyticsManager.ObjectCaptureSessionStatusEvent.Status()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionStatusEvent.Status and conformance AnalyticsManager.ObjectCaptureSessionStatusEvent.Status;
  if (!lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionStatusEvent.Status and conformance AnalyticsManager.ObjectCaptureSessionStatusEvent.Status)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status, &type metadata for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionStatusEvent.Status and conformance AnalyticsManager.ObjectCaptureSessionStatusEvent.Status);
  }
  return result;
}

uint64_t method lookup function for AnalyticsManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionInitEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionInitEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionImageStatsEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionImageStatsEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent()
{
  return type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent()
{
  return type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
}

ValueMetadata *type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode()
{
  return &type metadata for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionStatusEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_27Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionStatusEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_28Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BBE59F8 + 4 * byte_21BE64C7A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BBE5A2C + 4 * byte_21BE64C75[v4]))();
}

uint64_t sub_21BBE5A2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBE5A34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBE5A3CLL);
  return result;
}

uint64_t sub_21BBE5A48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBE5A50);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BBE5A54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBE5A5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status()
{
  return &type metadata for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent()
{
  return type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
}

void specialized AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[4];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t aBlock[6];

  v2 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v63 = (uint64_t)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v59 - v9;
  v62 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v59 - v13;
  if (one-time initialization token for logger != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v16 = __swift_project_value_buffer(v15, (uint64_t)logger);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v14, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  v19 = os_log_type_enabled(v17, v18);
  v61 = v6;
  if (v19)
  {
    v20 = swift_slowAlloc();
    v64 = v16;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v60 = a1;
    v23 = v22;
    aBlock[0] = v22;
    v59[3] = v2;
    *(_DWORD *)v21 = 136315138;
    v59[2] = v21 + 4;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v14, (uint64_t)v10, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    v24 = String.init<A>(describing:)();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v14, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    _os_log_impl(&dword_21B9AA000, v17, v18, "Sending PhotogrammetrySessionReconstructionResultEvent: %s...", v21, 0xCu);
    swift_arrayDestroy();
    v26 = v23;
    a1 = v60;
    MEMORY[0x220772F44](v26, -1, -1);
    v16 = v64;
    MEMORY[0x220772F44](v21, -1, -1);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v14, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
  }

  outlined init with copy of __RKEntityActionSpecification(a1 + *(int *)(v5 + 20), (uint64_t)v4, type metadata accessor for PhotogrammetrySession.Request);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for PhotogrammetrySession.Request);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_21B9AA000, v27, v28, "sendPhotogrammetrySessionReconstructionResultEvent got non .modelFile request! Punting...", v29, 2u);
      MEMORY[0x220772F44](v29, -1, -1);
    }

  }
  else
  {
    v30 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v4, v30);
    v31 = *(int *)(v5 + 32);
    v32 = *(void **)(a1 + v31);
    if (v32)
    {
      aBlock[0] = *(_QWORD *)(a1 + v31);
      v33 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v34 = String.init<A>(describing:)();
      v36 = v35;
    }
    else
    {
      v34 = 0;
      v36 = 0xE000000000000000;
    }
    v64 = v16;
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.default.getter();
    v39 = os_log_type_enabled(v37, v38);
    v59[1] = v5;
    if (v39)
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      aBlock[0] = v41;
      *(_DWORD *)v40 = 136315138;
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x800000021BE8B340, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v37, v38, "AnalyticsManaLogging eventName: %s...", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v41, -1, -1);
      MEMORY[0x220772F44](v40, -1, -1);
    }

    v43 = v61;
    v42 = v62;
    v44 = (void *)MEMORY[0x220768C3C](0xD000000000000033, 0x800000021BE8B340);
    outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v10, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    v45 = a1;
    v46 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    v47 = (v42 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    v48 = swift_allocObject();
    outlined init with take of __RKEntityActionSpecification((uint64_t)v10, v48 + v46, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    v49 = (uint64_t *)(v48 + v47);
    *v49 = v34;
    v49[1] = v36;
    aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:);
    aBlock[5] = v48;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = (uint64_t)&block_descriptor_38;
    v50 = _Block_copy(aBlock);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v50);

    v51 = v45;
    v52 = v63;
    outlined init with copy of __RKEntityActionSpecification(v51, v63, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      v56 = swift_slowAlloc();
      aBlock[0] = v56;
      *(_DWORD *)v55 = 136315138;
      outlined init with copy of __RKEntityActionSpecification(v52, (uint64_t)v10, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
      v57 = String.init<A>(describing:)();
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of __RKEntityActionSpecification(v52, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
      _os_log_impl(&dword_21B9AA000, v53, v54, "... event sent! PhotogrammetrySessionReconstructionResultEvent: %s.", v55, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v56, -1, -1);
      MEMORY[0x220772F44](v55, -1, -1);
    }
    else
    {
      outlined destroy of __RKEntityActionSpecification(v52, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    }

  }
}

uint64_t type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
}

uint64_t sub_21BBE61C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = v2 + *(int *)(v1 + 20);
  type metadata accessor for PhotogrammetrySession.Request(0);
  if (!swift_getEnumCaseMultiPayload())
  {
    v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0)
                                      - 8)
                          + 80);
  closure #1 in AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)(v0 + ((v1 + 16) & ~v1));
}

void specialized AnalyticsManager.sendPhotogrammetrySessionBundleIdentifierEvent(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[6];

  v2 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v26 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v25 = v3;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
    v16 = String.init<A>(describing:)();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
    _os_log_impl(&dword_21B9AA000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v15;
    v3 = v25;
    MEMORY[0x220772F44](v18, -1, -1);
    v19 = v13;
    a1 = v26;
    MEMORY[0x220772F44](v19, -1, -1);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
  }

  v20 = (void *)MEMORY[0x220768C3C](0xD00000000000003DLL, 0x800000021BE8B3A0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
  v21 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v5, v22 + v21, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionBundleIdentifierEvent(event:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_44;
  v23 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);

}

uint64_t type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
}

uint64_t sub_21BBE6600()
{
  return objectdestroy_20Tm(type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
}

uint64_t objectdestroy_20Tm(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  v3 = v1 + ((v2 + 16) & ~v2);
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionBundleIdentifierEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.PhotogrammetrySessionInitEvent);
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionInitEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBE6708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionInitEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBE678C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for AnalyticsManager.PhotogrammetrySessionInitEvent()
{
  return type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  id v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      v15 = &v9[v14];
      v16 = &v10[v14];
      v17 = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 5) = v17;
      v15[96] = v16[96];
      v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      v19 = *((_OWORD *)v16 + 3);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v19;
      swift_storeEnumTagMultiPayload();
    }
    v20 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v21 = *(void **)((char *)a2 + v20);
    v22 = v21;
    *(_QWORD *)((char *)a1 + v20) = v21;
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  }
  return a1;
}

void destroy for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for PhotogrammetrySession.Request(0);
  if (!swift_getEnumCaseMultiPayload())
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }

}

uint64_t initializeWithCopy for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  id v20;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for PhotogrammetrySession.Request(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                 + 64);
    v13 = &v8[v12];
    v14 = &v9[v12];
    v15 = *((_OWORD *)v14 + 5);
    *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
    *((_OWORD *)v13 + 5) = v15;
    v13[96] = v14[96];
    v16 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v16;
    v17 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v17;
    swift_storeEnumTagMultiPayload();
  }
  v18 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v19 = *(void **)(a2 + v18);
  v20 = v19;
  *(_QWORD *)(a1 + v18) = v19;
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)(a1 + v7);
    v9 = (char *)(a2 + v7);
    outlined destroy of __RKEntityActionSpecification(a1 + v7, type metadata accessor for PhotogrammetrySession.Request);
    v10 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = *((_OWORD *)v14 + 3);
      v16 = *((_OWORD *)v14 + 4);
      v17 = *((_OWORD *)v14 + 5);
      v13[96] = v14[96];
      *((_OWORD *)v13 + 4) = v16;
      *((_OWORD *)v13 + 5) = v17;
      *((_OWORD *)v13 + 3) = v15;
      v19 = *((_OWORD *)v14 + 1);
      v18 = *((_OWORD *)v14 + 2);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v19;
      *((_OWORD *)v13 + 2) = v18;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v20 = a3[8];
  v21 = *(void **)(a1 + v20);
  v22 = *(void **)(a2 + v20);
  v23 = v22;
  *(_QWORD *)(a1 + v20) = v22;

  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for PhotogrammetrySession.Request(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                 + 64);
    v13 = &v8[v12];
    v14 = &v9[v12];
    v15 = *((_OWORD *)v14 + 5);
    *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
    *((_OWORD *)v13 + 5) = v15;
    v13[96] = v14[96];
    v16 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v16;
    v17 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v17;
    swift_storeEnumTagMultiPayload();
  }
  v18 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)(a1 + v7);
    v9 = (char *)(a2 + v7);
    outlined destroy of __RKEntityActionSpecification(a1 + v7, type metadata accessor for PhotogrammetrySession.Request);
    v10 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = *((_OWORD *)v14 + 5);
      *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
      *((_OWORD *)v13 + 5) = v15;
      v13[96] = v14[96];
      v16 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v16;
      v17 = *((_OWORD *)v14 + 3);
      *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
      *((_OWORD *)v13 + 3) = v17;
      swift_storeEnumTagMultiPayload();
    }
  }
  v18 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v19 = *(void **)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);

  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBE71A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for PhotogrammetrySession.Request(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BBE7264(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for PhotogrammetrySession.Request(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = a2;
  return result;
}

uint64_t type metadata completion function for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PhotogrammetrySession.Request(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BBE7408 + 4 * byte_21BE64C84[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BBE743C + 4 * byte_21BE64C7F[v4]))();
}

uint64_t sub_21BBE743C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBE7444(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BBE744CLL);
  return result;
}

uint64_t sub_21BBE7458(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BBE7460);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BBE7464(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BBE746C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  return &type metadata for AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType;
}

unint64_t lazy protocol witness table accessor for type AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType and conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType and conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType;
  if (!lazy protocol witness table cache variable for type AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType and conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType, &type metadata for AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType and conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType);
  }
  return result;
}

__n128 Transform.init(_:)(__n128 *a1)
{
  __n128 v1;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 result;
  __n128 v9;
  __int128 v10;
  _OWORD v11[8];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v11[0] = *a1;
  v11[1] = v1;
  v11[2] = v2;
  v11[3] = v3;
  v11[4] = v4;
  v11[5] = v5;
  v11[6] = v6;
  v11[7] = v7;
  SPAffineTransform3DGet4x4Matrix((uint64_t)v11, (uint64_t)&v10, v1, v3, v5);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v9 = result;
    swift_once();
    return v9;
  }
  return result;
}

__n128 SPAffineTransform3DGet4x4Matrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q1>, __n128 a4@<Q3>, __n128 a5@<Q5>)
{
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = *(__n128 *)a1;
  a3.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  a4.n128_u64[0] = *(_QWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  a5.n128_u64[0] = *(_QWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  __asm { FMOV            V7.2D, #1.0 }
  *(_QWORD *)&_Q7 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = a3;
  *(_OWORD *)(a2 + 32) = v6;
  *(__n128 *)(a2 + 48) = a4;
  *(_OWORD *)(a2 + 64) = v7;
  *(__n128 *)(a2 + 80) = a5;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = _Q7;
  return result;
}

double SPAffineTransform3D.init(_:)@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q2>)
{
  simd_quatd *v4;
  SPRotation3D *v5;
  float64x2_t v6;
  __int128 v7;
  float64x2_t v8;
  float64x2_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float64x2_t v19;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float64x2_t v29[2];
  SPVector3D v30;
  SPSize3D v31;
  SPRotation3D v32;

  v21 = (__n128)vcvtq_f64_f32((float32x2_t)a2.n128_u64[0]);
  v22 = COERCE_UNSIGNED_INT64(a2.n128_f32[2]);
  SPSize3DMakeWithVector(&v21, (__n128 *)&v31);
  SPRotation3D.init(_:)(v5, v4);
  v18 = v7;
  v19 = v6;
  v21 = (__n128)vcvtq_f64_f32((float32x2_t)a3.n128_u64[0]);
  v22 = COERCE_UNSIGNED_INT64(a3.n128_f32[2]);
  SPSize3DMakeWithVector(&v21, (__n128 *)v29);
  *(_OWORD *)v32.vector.f64 = v18;
  *(float64x2_t *)&v30.x = v19;
  *(_OWORD *)&v30.vector.f64[2] = v18;
  SPAffineTransform3DMake(&v31, v32, &v30, v29, (__int128 *)&v21, v19, v8, v9);
  result = v21.n128_f64[0];
  v11 = v22;
  v12 = v23;
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = v28;
  *(__n128 *)a1 = v21;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 96) = v16;
  *(_OWORD *)(a1 + 112) = v17;
  return result;
}

__n128 SPSize3DMakeWithVector@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v3;

  result = *a1;
  v3 = a1[1].n128_u64[0];
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  return result;
}

float64_t *SPAffineTransform3DMake@<X0>(SPSize3D *a1@<X0>, SPRotation3D a2@<0:Q0, 16:Q1>, SPVector3D *a3@<X1>, float64x2_t *a4@<X2>, __int128 *a5@<X8>, float64x2_t a6@<Q3>, float64x2_t _Q5@<Q5>, float64x2_t _Q6@<Q6>)
{
  float64x2_t v8;
  float64_t *result;
  float64x2_t v10;
  float64x2_t v11;
  float64_t v19;
  float64x2_t v20;
  double v22;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  __int128 v41;
  __int128 v42;
  int64x2_t v44;
  int8x16_t v45;
  int64x2_t v46;
  int64x2_t v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  float64x2_t v69;
  __int128 v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;

  v8.f64[0] = a1->depth;
  v10 = (float64x2_t)*(unint64_t *)&a1->width;
  result = &a1->height;
  v11.f64[0] = 0.0;
  v11.f64[1] = *result;
  _Q1 = *(float64x2_t *)&a3->x;
  _Q0 = *(float64x2_t *)&a3->vector.f64[2];
  _Q6.f64[0] = a3->y;
  __asm { FMLS            D2, D0, V0.D[0] }
  _D7 = a3->vector.f64[3];
  __asm { FMLA            D2, D7, V0.D[1] }
  a6.f64[0] = vmlad_n_f64(vmuld_lane_f64(_Q0.f64[0], _Q0, 1), _Q6.f64[0], a3->x);
  v19 = a6.f64[0] + a6.f64[0];
  v20.f64[0] = vmuld_lane_f64(_Q6.f64[0], _Q0, 1);
  a6.f64[0] = vmlad_n_f64(-(_Q6.f64[0] * _D7), _Q0.f64[0], a3->x);
  a6.f64[0] = a6.f64[0] + a6.f64[0];
  _Q2.f64[1] = v19;
  v22 = vmlad_n_f64(-(_Q0.f64[0] * _D7), _Q6.f64[0], a3->x);
  v23.f64[0] = v22 + v22;
  __asm
  {
    FMLA            D5, D6, V1.D[1]
    FMLA            D5, D7, V0.D[1]
    FMLS            D5, D1, V1.D[0]
  }
  v23.f64[1] = _Q5.f64[0];
  __asm
  {
    FMLA            D19, D0, V1.D[1]
    FMLS            D5, D1, V1.D[0]
    FMLS            D5, D6, V1.D[1]
  }
  _Q1.f64[0] = a3->z;
  v20.f64[1] = -(a3->x * _D7);
  _Q6.f64[0] = _D19 + _D19;
  v25 = vmlaq_f64(v20, (float64x2_t)vzip1q_s64(*(int64x2_t *)&a3->x, (int64x2_t)_Q0), _Q1);
  v26 = vaddq_f64(v25, v25);
  v27 = *a4;
  _Q0.f64[0] = a4[1].f64[0];
  *a5 = 0u;
  a5[1] = 0u;
  a5[2] = 0u;
  a5[3] = 0u;
  a5[4] = 0u;
  a5[5] = 0u;
  a5[6] = 0u;
  a5[7] = 0u;
  v30 = *(float64x2_t *)MEMORY[0x24BDAEDE0];
  v29 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 16);
  v32 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 32);
  v31 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 48);
  v34 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 64);
  v33 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 80);
  v35 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v34, v26), (int8x16_t)vceqq_f64(v32, v23)), (int8x16_t)vceqq_f64(*MEMORY[0x24BDAEDE0], _Q2));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v35, 1), vandq_s8(vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v33, _Q5), (int8x16_t)vceqq_f64(v31, _Q6)), (int8x16_t)vceqq_f64(v29, a6)), (int8x16_t)v35)).u64[0] & 0x8000000000000000) == 0|| (v36 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v32, v11), vandq_s8((int8x16_t)vceqq_f64(v30, v10), (int8x16_t)vceqq_f64(v34, (float64x2_t)0))), (vandq_s8((int8x16_t)vdupq_laneq_s64(v36, 1), vandq_s8(vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v31, (float64x2_t)0), (int8x16_t)vceqq_f64(v29, (float64x2_t)0)), (int8x16_t)vceqq_f64(v33, v8)), (int8x16_t)v36)).u64[0] & 0x8000000000000000) == 0))
  {
    v37 = 0;
    v59 = v10;
    v60 = 0uLL;
    v61 = v11;
    v62 = 0uLL;
    v63 = 0uLL;
    v64 = v8;
    v68 = 0uLL;
    v69 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    *(_QWORD *)&_Q2.f64[1] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
    *(_QWORD *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    *(_QWORD *)&v26.f64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    do
    {
      v39 = *(float64x2_t *)((char *)&v59 + v37);
      v38 = *(float64x2_t *)((char *)&v59 + v37 + 16);
      v40 = (float64x2_t *)((char *)&v68 + v37);
      *v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q2, v39.f64[0]), v23, v39, 1), v26, v38.f64[0]);
      v40[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(a6, v39), _Q6, v39, 1), v38, _Q5);
      v37 += 32;
    }
    while (v37 != 96);
    _Q2 = (float64x2_t)v68;
    a6 = v69;
    v23 = (float64x2_t)v70;
    _Q6 = v71;
    v26 = v72;
    _Q5 = v73;
    *a5 = v68;
    a5[1] = (__int128)a6;
  }
  v41 = xmmword_21BE650B0;
  v42 = xmmword_21BE638F0;
  __asm { FMOV            V24.2D, #1.0 }
  v44 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v32, (float64x2_t)xmmword_21BE638F0), (int8x16_t)vceqq_f64(v30, (float64x2_t)xmmword_21BE650B0)), (int8x16_t)vceqzq_f64(v34));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v44, 1), vandq_s8(vandq_s8(vandq_s8((int8x16_t)vceqzq_f64(v31), (int8x16_t)vceqzq_f64(v29)), (int8x16_t)vceqq_f64(v33, _Q24)), (int8x16_t)v44)).u64[0] & 0x8000000000000000) != 0&& (v45 = vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v31, _Q6), (int8x16_t)vceqq_f64(v29, a6)), (int8x16_t)vceqq_f64(v33, _Q5)), v46 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v32, v23), (int8x16_t)vceqq_f64(v30, _Q2)), (int8x16_t)vceqq_f64(v34, v26)), (vandq_s8((int8x16_t)vdupq_laneq_s64(v46, 1), vandq_s8(v45, (int8x16_t)v46)).u64[0] & 0x8000000000000000) != 0))
  {
    v54 = 0uLL;
    v27 = vaddq_f64(v27, (float64x2_t)0);
    _Q0 = vaddq_f64(_Q0, (float64x2_t)0);
    v53 = 0uLL;
    v52 = 0uLL;
  }
  else
  {
    v47 = vceqzq_f64(v27);
    if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v47, 1), vandq_s8((int8x16_t)vceqzq_f64(_Q0), (int8x16_t)v47)).u64[0] & 0x8000000000000000) != 0)
    {
      v55 = 0;
      v59 = _Q2;
      v60 = a6;
      v61 = v23;
      v62 = _Q6;
      v63 = v26;
      v64 = _Q5;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      do
      {
        v57 = *(float64x2_t *)((char *)&v59 + v55);
        v56 = *(float64x2_t *)((char *)&v59 + v55 + 16);
        v58 = (float64x2_t *)((char *)&v68 + v55);
        *v58 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21BE650B0, v57.f64[0]), (float64x2_t)xmmword_21BE638F0, v57, 1), (float64x2_t)0, v56.f64[0]);
        v58[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v57, (float64x2_t)0), (float64x2_t)0, v57, 1), _Q24, v56);
        v55 += 32;
      }
      while (v55 != 96);
      v41 = v68;
      v52 = v69;
      v42 = v70;
      v53 = v71;
      v54 = v72;
      _Q24 = v73;
    }
    else
    {
      v48 = 0;
      _Q0.f64[1] = 1.0;
      v59 = _Q2;
      v60 = (float64x2_t)*(unint64_t *)&a6.f64[0];
      v61 = v23;
      v62 = (float64x2_t)*(unint64_t *)&_Q6.f64[0];
      v63 = v26;
      v64 = (float64x2_t)*(unint64_t *)&_Q5.f64[0];
      v65 = 0;
      v66 = 0;
      v67 = xmmword_21BE638F0;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      do
      {
        v50 = *(float64x2_t *)((char *)&v59 + v48);
        v49 = *(float64x2_t *)((char *)&v59 + v48 + 16);
        v51 = (float64x2_t *)((char *)&v68 + v48);
        *v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21BE650B0, v50.f64[0]), (float64x2_t)xmmword_21BE638F0, v50, 1), (float64x2_t)0, v49.f64[0]), v27, v49, 1);
        v51[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v50.f64[0]), (float64x2_t)0, v50, 1), (float64x2_t)xmmword_21BE650B0, v49.f64[0]), _Q0, v49, 1);
        v48 += 32;
      }
      while (v48 != 128);
      v41 = v68;
      v52 = v69;
      v42 = v70;
      v53 = v71;
      v54 = v72;
      _Q24 = v73;
      v27 = v74;
      _Q0 = v75;
    }
  }
  *a5 = v41;
  a5[1] = (__int128)v52;
  a5[2] = v42;
  a5[3] = (__int128)v53;
  a5[4] = (__int128)v54;
  a5[5] = (__int128)_Q24;
  a5[6] = (__int128)v27;
  a5[7] = (__int128)_Q0;
  return result;
}

uint64_t PhotogrammetrySample.init(_:)(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  id v9;
  id v10;
  id v11;
  _BYTE v13[24];
  uint64_t v14;
  _BYTE v15[72];
  uint64_t v16;

  outlined init with copy of PhotogrammetrySample((uint64_t)a1, (uint64_t)v15);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of (Int, URL)((uint64_t)&v16, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v14)
  {
    v5 = type metadata accessor for PhotogrammetrySample();
    v6 = swift_dynamicCast();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, v6 ^ 1u, 1, v5);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v5 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  outlined destroy of PhotogrammetrySample((uint64_t)v15);
  type metadata accessor for PhotogrammetrySample();
  v7 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  result = outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for PhotogrammetrySample?);
  if (v7 == 1)
  {
    v9 = a1[1];
    PhotogrammetrySample.init(id:image:)();
    swift_bridgeObjectRetain();
    PhotogrammetrySample.metadata.setter();
    v10 = a1[3];
    PhotogrammetrySample.depthDataMap.setter();
    PhotogrammetrySample.gravity.setter();
    v11 = a1[8];
    PhotogrammetrySample.objectMask.setter();
    return outlined destroy of PhotogrammetrySample((uint64_t)a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PhotogrammetrySessionImpl.init(id:using:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t *boxed_opaque_existential_1;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  _BYTE v45[16];
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 aBlock;
  __int128 v56;
  void (*v57)();
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _UNKNOWN **v61;
  uint64_t v62;

  v4 = v3;
  v54 = a3;
  v50 = a2;
  v62 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  MEMORY[0x24BDAC7A8](v5);
  v49 = &v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v46 = &v45[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v11);
  v13 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v13);
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_activeRequests) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_outputMonitor) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession) = 0;
  v15 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_requestMap;
  type metadata accessor for PhotogrammetrySessionImpl.RequestMap();
  v16 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[PhotogrammetrySessionImpl.RequestMap.Entry], os_unfair_lock_s>);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v3 + v15) = v16;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sortedImageFiles) = v14;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_invalidSamples) = v14;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_skippedSamples) = v14;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) = 0;
  v51 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_serialExecutor;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  *(_QWORD *)&aBlock = v14;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v12, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v52 + 104))(v10, *MEMORY[0x24BEE5750], v53);
  *(_QWORD *)(v3 + v51) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v18 = v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sessionID;
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v62, v19);
  type metadata accessor for PhotogrammetrySession();
  result = static PhotogrammetrySession.isSupported.getter();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v22 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession) = v50;
  swift_retain();
  swift_release();
  result = outlined init with copy of __RKEntityActionSpecification(v54, v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_configuration, type metadata accessor for PhotogrammetrySession.Configuration);
  if (!*(_QWORD *)(v4 + v22))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_retain();
  v23 = dispatch thunk of PhotogrammetrySession.outputPublisher.getter();
  swift_release();
  type metadata accessor for OutputPublisherMonitor(0);
  v24 = swift_allocObject();
  OutputPublisherMonitor.init(publisher:)(v23);
  v25 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_outputMonitor;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_outputMonitor) = v24;
  result = swift_release();
  v26 = *(_QWORD *)(v4 + v25);
  if (!v26)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v27 = v26 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs;
  swift_beginAccess();
  v28 = v27;
  v29 = v49;
  outlined init with copy of (Int, URL)(v28, (uint64_t)v49, &demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>);
  v31 = *(_QWORD *)(v30 - 8);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30);
  if ((_DWORD)result == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v32 = v46;
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v29, v30);
  v60 = type metadata accessor for AsyncOutputIterator(0);
  v61 = &protocol witness table for AsyncOutputIterator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v59);
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v47 + 32))(boxed_opaque_existential_1, v32, v48);
  result = outlined init with take of BindableDataInternal(&v59, (uint64_t)&aBlock);
  v34 = v56;
  *(_OWORD *)(v4 + 16) = aBlock;
  *(_OWORD *)(v4 + 32) = v34;
  *(_QWORD *)(v4 + 48) = v57;
  v35 = *(_QWORD *)(v4 + v25);
  if (!v35)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v36 = swift_allocObject();
  swift_weakInit();
  v37 = *(_QWORD *)(v35 + 24);
  *(_QWORD *)(v35 + 24) = partial apply for closure #1 in PhotogrammetrySessionImpl.init(id:using:configuration:);
  *(_QWORD *)(v35 + 32) = v36;
  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v37);
  v38 = *(_QWORD *)(v4 + v25);
  if (!v38)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v39 = swift_allocObject();
  swift_weakInit();
  v40 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)(v38 + 40) = partial apply for closure #2 in PhotogrammetrySessionImpl.init(id:using:configuration:);
  *(_QWORD *)(v38 + 48) = v39;
  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v40);
  if (*(_QWORD *)(v4 + v25))
  {
    swift_weakAssign();
    v41 = (void *)objc_opt_self();
    v57 = closure #3 in PhotogrammetrySessionImpl.init(id:using:configuration:);
    v58 = 0;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v56 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    *((_QWORD *)&v56 + 1) = &block_descriptor_41;
    v42 = _Block_copy(&aBlock);
    v43 = objc_msgSend(v41, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v42, 5.0);
    _Block_release(v42);
    swift_release();
    outlined destroy of __RKEntityActionSpecification(v54, type metadata accessor for PhotogrammetrySession.Configuration);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v62, v19);
    v44 = *(void **)(v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage);
    *(_QWORD *)(v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage) = v43;

    return v4;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t closure #1 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  uint64_t result;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(NSObject **)(result + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_serialExecutor);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = partial apply for closure #1 in PhotogrammetrySessionImpl.onProcessingComplete();
    *(_QWORD *)(v3 + 24) = v1;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_55;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    result = swift_release();
    if ((v2 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t closure #2 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  uint64_t result;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(NSObject **)(result + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_serialExecutor);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = partial apply for closure #1 in PhotogrammetrySessionImpl.onProcessingCancelled();
    *(_QWORD *)(v3 + 24) = v1;
    aBlock[4] = _sIg_Ieg_TRTA_0;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_47;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    result = swift_release();
    if ((v2 & 1) != 0)
      __break(1u);
  }
  return result;
}

void closure #3 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  kern_return_t v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  thread_act_t *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  mach_msg_type_number_t act_listCnt[2];
  thread_act_array_t act_list[2];

  act_list[1] = *(thread_act_array_t *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v3 = 134349056;
    act_list[0] = (thread_act_array_t)specialized static ResourceUsageHelper.memoryUsage(in:)(2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21B9AA000, v1, v2, "Memory usage: %{public}llu MB", v3, 0xCu);
    MEMORY[0x220772F44](v3, -1, -1);
  }

  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v6 = 134349056;
    act_list[0] = 0;
    act_listCnt[0] = 0;
    v7 = task_threads(*MEMORY[0x24BDAEC58], act_list, act_listCnt);
    if (act_list[0])
      v8 = v7 == 0;
    else
      v8 = 0;
    v9 = act_listCnt[0];
    if (!v8)
      v9 = -1;
    act_list[0] = (thread_act_array_t)v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21B9AA000, v4, v5, "Thread count: %{public}ld", v6, 0xCu);
    MEMORY[0x220772F44](v6, -1, -1);
  }

  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = (thread_act_t *)swift_slowAlloc();
    act_list[0] = v13;
    *(_DWORD *)v12 = 136446210;
    v14 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v15 = objc_msgSend(v14, sel_thermalState);

    *(_QWORD *)act_listCnt = v15;
    type metadata accessor for NSProcessInfoThermalState(0);
    v16 = String.init<A>(describing:)();
    *(_QWORD *)act_listCnt = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)act_list);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v10, v11, "Thermal state: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v13, -1, -1);
    MEMORY[0x220772F44](v12, -1, -1);
  }

}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t PhotogrammetrySession.Configuration.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PhotogrammetrySession.Configuration.init()();
  PhotogrammetrySession.Configuration.isObjectMaskingEnabled.setter();
  v5 = *(unsigned __int8 *)(a1 + 1);
  v6 = type metadata accessor for PhotogrammetrySession.Configuration.SampleOrdering();
  v9 = MEMORY[0x24BDAC7A8](v6);
  if (v5 == 1)
    v10 = (unsigned int *)MEMORY[0x24BE1EB38];
  else
    v10 = (unsigned int *)MEMORY[0x24BE1EB40];
  (*(void (**)(char *, _QWORD, __n128))(v8 + 104))((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), *v10, v9);
  PhotogrammetrySession.Configuration.sampleOrdering.setter();
  v11 = *(unsigned __int8 *)(a1 + 2);
  v12 = type metadata accessor for PhotogrammetrySession.Configuration.FeatureSensitivity();
  v15 = MEMORY[0x24BDAC7A8](v12);
  if (v11 == 1)
    v16 = (unsigned int *)MEMORY[0x24BE1EB68];
  else
    v16 = (unsigned int *)MEMORY[0x24BE1EB70];
  (*(void (**)(char *, _QWORD, __n128))(v14 + 104))((char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *v16, v15);
  PhotogrammetrySession.Configuration.featureSensitivity.setter();
  v17 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  outlined init with copy of (Int, URL)(a1 + *(int *)(v17 + 28), (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  PhotogrammetrySession.Configuration.snapshotURL.setter();
  PhotogrammetrySession.Configuration.ignoreBoundingBox.setter();
  if ((PhotogrammetrySession.Configuration.ignoreBoundingBox.getter() & 1) != 0)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_21B9AA000, v19, v20, "Setting PhotogrammetrySession.Configuration to ignore bounding box!", v21, 2u);
      MEMORY[0x220772F44](v21, -1, -1);
    }

  }
  return outlined destroy of __RKEntityActionSpecification(a1, type metadata accessor for PhotogrammetrySession.Configuration);
}

uint64_t closure #1 in PhotogrammetrySessionImpl.init<A>(id:input:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  id v13[13];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(a1 + 72, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v13[3])
  {
    v7 = type metadata accessor for PhotogrammetrySample();
    v8 = swift_dynamicCast();
    v9 = *(_QWORD *)(v7 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, v8 ^ 1u, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v6, v7);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v11 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for PhotogrammetrySample?);
  outlined init with copy of PhotogrammetrySample(a1, (uint64_t)v13);
  return PhotogrammetrySample.init(_:)(v13);
}

void PhotogrammetrySessionImpl.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_21B9AA000, v3, v4, "~~~ PhotogrammetrySession deinit was called! ~~~", v5, 2u);
    MEMORY[0x220772F44](v5, -1, -1);
  }

  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_outputMonitor);
  if (v6)
  {
    v7 = *(void (**)(uint64_t))(v6 + 56);
    if (v7)
    {
      v8 = swift_retain();
      v7(v8);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);
    }
    v9 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage;
    v10 = *(void **)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage);
    if (v10)
    {
      objc_msgSend(v10, sel_invalidate);
      v11 = *(void **)(v1 + v9);
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)(v1 + v9) = 0;

    v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_requestMap);
    swift_beginAccess();
    v13 = *(_QWORD *)(v12 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 16) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
    swift_endAccess();
    swift_release();
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession))
    {
      swift_retain();
      dispatch thunk of PhotogrammetrySession.close()();
      swift_release();
      outlined destroy of PhotogrammetrySession.Outputs(v1 + 16);
      outlined destroy of __RKEntityActionSpecification(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_configuration, type metadata accessor for PhotogrammetrySession.Configuration);
      swift_bridgeObjectRelease();
      v14 = v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sessionID;
      v15 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
      swift_release();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t PhotogrammetrySessionImpl.__deallocating_deinit()
{
  PhotogrammetrySessionImpl.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PhotogrammetrySessionImpl()
{
  return type metadata accessor for PhotogrammetrySessionImpl(0);
}

uint64_t type metadata accessor for PhotogrammetrySessionImpl(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySessionImpl);
}

uint64_t type metadata completion function for PhotogrammetrySessionImpl()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for PhotogrammetrySession.Configuration(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
      return swift_updateClassMetadata2();
  }
  return result;
}

void closure #1 in PhotogrammetrySessionImpl.process(requests:)(uint64_t a1, Swift::OpaquePointer a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int64_t v17;
  Swift::OpaquePointer v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *rawValue;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;

  v54 = type metadata accessor for PhotogrammetrySession.Request(0);
  v4 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v56 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v55 = (uint64_t)&v47 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v47 - v9;
  v11 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) == 2)
  {
    __break(1u);
    goto LABEL_30;
  }
  v17 = *((_QWORD *)a2._rawValue + 2);
  v18._rawValue = (void *)MEMORY[0x24BEE4AF8];
  if (!v17)
  {
LABEL_18:
    swift_retain();
    PhotogrammetrySessionImpl.RequestMap.addRequests(apiRequests:internalRequests:)(a2, v18);
    swift_release();
    if (*(_QWORD *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession))
    {
      swift_retain();
      v35 = v51;
      dispatch thunk of PhotogrammetrySession.process(requests:)();
      v34 = v35;
      if (!v35)
      {
        swift_release();
        swift_bridgeObjectRelease();
        *(_BYTE *)(a1 + v16) = 1;
        *(_BYTE *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing) = 1;
        return;
      }
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_21;
    }
LABEL_30:
    __break(1u);
    return;
  }
  v52 = v13;
  v53 = v12;
  v48 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state;
  v49 = a1;
  v19 = (uint64_t)a2._rawValue
      + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v57 = *(_QWORD *)(v4 + 72);
  rawValue = a2._rawValue;
  swift_bridgeObjectRetain();
  v20 = v19;
  v21 = v17;
  do
  {
    outlined init with copy of __RKEntityActionSpecification(v20, (uint64_t)v10, type metadata accessor for PhotogrammetrySession.Request);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of __RKEntityActionSpecification((uint64_t)v10, type metadata accessor for PhotogrammetrySession.Request);
    }
    else
    {
      v22 = v52;
      v23 = v53;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v15, v10, v53);
      if ((specialized PhotogrammetrySessionImpl.isValidModelUrl(_:)((uint64_t)v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for PhotogrammetrySession.Error(0);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, type metadata accessor for PhotogrammetrySession.Error, (uint64_t)&protocol conformance descriptor for PhotogrammetrySession.Error);
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v46, v15, v23);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
        return;
      }
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
    v20 += v57;
    --v21;
  }
  while (v21);
  swift_bridgeObjectRelease();
  v59 = v18._rawValue;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
  v24 = type metadata accessor for PhotogrammetrySession.Request();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 64);
  v53 = v24;
  v54 = v26;
  v27 = v51;
  while (1)
  {
    MEMORY[0x24BDAC7A8](v24);
    v29 = (char *)&v47 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = v55;
    outlined init with copy of __RKEntityActionSpecification(v19, v55, type metadata accessor for PhotogrammetrySession.Request);
    v31 = v56;
    outlined init with copy of __RKEntityActionSpecification(v30, v56, type metadata accessor for PhotogrammetrySession.Request);
    PhotogrammetrySession.Request.init(_:)(v31, (uint64_t)v29);
    if (v27)
      break;
    outlined destroy of __RKEntityActionSpecification(v30, type metadata accessor for PhotogrammetrySession.Request);
    v18._rawValue = v59;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18._rawValue + 2) + 1, 1);
      v27 = 0;
      v18._rawValue = v59;
    }
    v33 = *((_QWORD *)v18._rawValue + 2);
    v32 = *((_QWORD *)v18._rawValue + 3);
    if (v33 >= v32 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
      v18._rawValue = v59;
    }
    *((_QWORD *)v18._rawValue + 2) = v33 + 1;
    v24 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v25 + 32))((unint64_t)v18._rawValue+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v33, v29, v53);
    v59 = v18._rawValue;
    v19 += v57;
    if (!--v17)
    {
      v51 = v27;
      a1 = v49;
      a2._rawValue = rawValue;
      v16 = v48;
      goto LABEL_18;
    }
  }
  v34 = v27;
  outlined destroy of __RKEntityActionSpecification(v30, type metadata accessor for PhotogrammetrySession.Request);
  swift_release();
LABEL_21:
  if (one-time initialization token for logger != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)logger);
  v37 = v34;
  v38 = v34;
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc();
    v42 = swift_slowAlloc();
    v59 = (void *)v42;
    *(_DWORD *)v41 = 136446210;
    v58 = (uint64_t)v34;
    v43 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v44 = String.init<A>(describing:)();
    v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, (uint64_t *)&v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21B9AA000, v39, v40, "process() error: %{public}s", v41, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v42, -1, -1);
    MEMORY[0x220772F44](v41, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
}

void PhotogrammetrySession.Request.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  _QWORD v13[42];

  v13[31] = a2;
  v13[40] = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v13[27] = v4;
  v13[28] = v5;
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v6);
  v13[26] = (char *)v13 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x24BDAC7A8](v9);
  v13[32] = a1;
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v12 = (char *)&loc_21BBE984C + *((int *)qword_21BBEA320 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_21BBE985C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[96];

  *(_QWORD *)(v3 - 216) = v2;
  v4 = v1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
              + 64);
  *(_QWORD *)(v3 - 400) = *(_QWORD *)v4;
  *(_QWORD *)(v3 - 384) = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v3 - 392) = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v3 - 352) = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v3 - 360) = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v3 - 320) = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v3 - 336) = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v3 - 288) = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v3 - 304) = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v3 - 256) = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v3 - 272) = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v4 + 88);
  v5 = *(_BYTE *)(v4 + 96);
  v6 = *(_QWORD *)(v3 - 192);
  v7 = v1;
  v8 = *(_QWORD *)(v3 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v0, v7, v8);
  v9 = type metadata accessor for PhotogrammetrySession.Request();
  *(_QWORD *)(v3 - 208) = v31;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?));
  v14 = &v12[*(int *)(v13 + 48)];
  v15 = &v12[*(int *)(v13 + 64)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v12, v0, v8);
  v16 = *MEMORY[0x24BE1ED20];
  v17 = type metadata accessor for PhotogrammetrySession.Request.Detail();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v14, v16, v17);
  if ((v5 & 1) != 0)
  {
    v18 = type metadata accessor for PhotogrammetrySession.Request.Geometry();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
    v19 = *(_QWORD *)(v3 - 168);
  }
  else
  {
    *(_QWORD *)&v20 = *(_QWORD *)(v3 - 400);
    *((_QWORD *)&v20 + 1) = *(_QWORD *)(v3 - 384);
    *(_OWORD *)(v3 - 384) = v20;
    *(_QWORD *)&v20 = *(_QWORD *)(v3 - 392);
    *((_QWORD *)&v20 + 1) = *(_QWORD *)(v3 - 352);
    *(_OWORD *)(v3 - 352) = v20;
    *(_QWORD *)&v20 = *(_QWORD *)(v3 - 360);
    *((_QWORD *)&v20 + 1) = *(_QWORD *)(v3 - 320);
    *(_OWORD *)(v3 - 320) = v20;
    *(_QWORD *)&v20 = *(_QWORD *)(v3 - 336);
    *((_QWORD *)&v20 + 1) = *(_QWORD *)(v3 - 288);
    *(_OWORD *)(v3 - 288) = v20;
    *(_QWORD *)&v20 = *(_QWORD *)(v3 - 304);
    *((_QWORD *)&v20 + 1) = *(_QWORD *)(v3 - 256);
    *(_OWORD *)(v3 - 256) = v20;
    *(_QWORD *)&v21 = *(_QWORD *)(v3 - 272);
    *((_QWORD *)&v21 + 1) = *(_QWORD *)(v3 - 240);
    *(_OWORD *)(v3 - 272) = v21;
    REAABBExtents();
    *(_OWORD *)(v3 - 240) = v22;
    REAABBCenter();
    v19 = *(_QWORD *)(v3 - 168);
    if (one-time initialization token for identity != -1)
    {
      *(_OWORD *)(v3 - 256) = v23;
      swift_once();
      v23 = *(_OWORD *)(v3 - 256);
    }
    *(double *)&v24 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v23, *(float32x4_t *)(v3 - 288), COERCE_FLOAT(*(_OWORD *)(v3 - 240)));
    *(_OWORD *)(v3 - 256) = v25;
    *(_OWORD *)(v3 - 240) = v24;
    *(_OWORD *)(v3 - 272) = v26;
    *(_OWORD *)(v3 - 288) = v27;
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(v3 - 320), *(float32x4_t *)(v3 - 352), COERCE_FLOAT(*(_OWORD *)(v3 - 384)));
    PhotogrammetrySession.Request.Geometry.init(orientedBoundsTransform:rootTransform:)();
    v28 = type metadata accessor for PhotogrammetrySession.Request.Geometry();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v15, 0, 1, v28);
  }
  v29 = *(_QWORD *)(v3 - 200);
  outlined destroy of __RKEntityActionSpecification(*(_QWORD *)(v3 - 160), type metadata accessor for PhotogrammetrySession.Request);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 8))(v0, v29);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BE1ED68], v9);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32))(v19, v12, v9);
}

uint64_t closure #1 in PhotogrammetrySessionImpl.cancel()(uint64_t result)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) = 2;
  if (*(_QWORD *)(result + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession))
  {
    swift_retain();
    dispatch thunk of PhotogrammetrySession.cancel()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PhotogrammetrySessionImpl.addImageMappingDictionary(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(NSObject *, unint64_t, uint64_t);
  NSObject *v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v50;
  char v51;
  unint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84[5];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v76 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v74 - v7;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v79 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v83 = ((char *)&v74 - v14);
  v82 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sortedImageFiles;
  if (*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sortedImageFiles)
                 + 16))
  {
    v80 = v13;
    v15 = swift_bridgeObjectRetain();
    v84[4] = specialized Set.init<A>(_:)(v15);
    v16 = (uint64_t *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_invalidSamples);
    swift_beginAccess();
    v17 = *v16;
    v18 = *(_QWORD *)(*v16 + 16);
    if (v18)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v18; ++i)
      {
        v20 = *(_QWORD *)(v17 + 8 * i + 32);
        specialized Set._Variant.insert(_:)(v84, v20);
      }
      swift_bridgeObjectRelease();
    }
    v21 = swift_bridgeObjectRetain();
    v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v21);
    swift_bridgeObjectRelease();
    v84[0] = (uint64_t)v22;
    specialized MutableCollection<>.sort(by:)(v84);
    swift_bridgeObjectRelease();
    v23 = v84[0];
    v24 = *(_QWORD *)(*(_QWORD *)(v1 + v82) + 16);
    v81 = *(_QWORD *)(v84[0] + 16);
    v75 = v1;
    v25 = v10;
    if (v81 != v24)
    {
      v26 = a1;
      if (one-time initialization token for logger != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)logger);
      swift_retain();
      swift_retain();
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = swift_slowAlloc();
        *(_DWORD *)v30 = 134218240;
        v84[0] = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v30 + 12) = 2048;
        v84[0] = *(_QWORD *)(*(_QWORD *)(v75 + v82) + 16);
        v2 = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_21B9AA000, v28, v29, "sortedSampleID count=%ld  sortedImageFiles count=%ld", (uint8_t *)v30, 0x16u);
        MEMORY[0x220772F44](v30, -1, -1);

      }
      else
      {

        swift_release();
        swift_release();
      }
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.error.getter();
      a1 = v26;
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_21B9AA000, v34, v35, "SampleID and sorted URL counts do not match!  The sampleID to URL mapping may be incorrect!", v36, 2u);
        MEMORY[0x220772F44](v36, -1, -1);
      }

      v25 = v10;
    }
    v74 = v23;
    v37 = v80;
    if (!v81)
    {
LABEL_42:
      swift_release();
      return;
    }
    v38 = 0;
    v77 = v25;
    v78 = v74 + 32;
    while (1)
    {
      v41 = *(_QWORD *)(v2 + v82);
      if (v38 >= *(_QWORD *)(v41 + 16))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v42 = v2;
      v43 = *(_QWORD *)(v78 + 8 * v38);
      v44 = v25;
      v45 = *(_QWORD *)(v25 + 72);
      v46 = v41
          + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
          + v45 * v38;
      v47 = *(void (**)(NSObject *, unint64_t, uint64_t))(v25 + 16);
      v48 = v83;
      v47(v83, v46, v37);
      v47(v8, (unint64_t)v48, v37);
      v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
      v49(v8, 0, 1, v37);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v8, 1, v37) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
        v50 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
        if ((v51 & 1) != 0)
        {
          v52 = v50;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v54 = *(_QWORD *)(a1 + 8);
          v84[0] = v54;
          *(_QWORD *)(a1 + 8) = 0x8000000000000000;
          v37 = v80;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v37 = v80;
            v54 = v84[0];
          }
          v55 = *(_QWORD *)(v54 + 56) + v52 * v45;
          v40 = (uint64_t)v76;
          v56 = v77;
          (*(void (**)(char *, unint64_t, uint64_t))(v77 + 32))(v76, v55, v37);
          specialized _NativeDictionary._delete(at:)(v52, v54);
          *(_QWORD *)(a1 + 8) = v54;
          v25 = v56;
          swift_bridgeObjectRelease();
          v39 = 0;
        }
        else
        {
          v39 = 1;
          v37 = v80;
          v40 = (uint64_t)v76;
          v25 = v77;
        }
        v49((char *)v40, v39, 1, v37);
        outlined destroy of BodyTrackingComponent?(v40, &demangling cache variable for type metadata for URL?);
        v2 = v42;
        goto LABEL_23;
      }
      v57 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
      v58 = v8;
      v57(v79, v8, v37);
      v59 = swift_isUniquelyReferenced_nonNull_native();
      v84[0] = *(_QWORD *)(a1 + 8);
      v60 = v84[0];
      v61 = a1;
      *(_QWORD *)(a1 + 8) = 0x8000000000000000;
      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
      v64 = *(_QWORD *)(v60 + 16);
      v65 = (v62 & 1) == 0;
      v66 = v64 + v65;
      if (__OFADD__(v64, v65))
        goto LABEL_44;
      v67 = v62;
      if (*(_QWORD *)(v60 + 24) >= v66)
      {
        v37 = v80;
        if ((v59 & 1) != 0)
          goto LABEL_36;
        specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, v59);
        v68 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
        if ((v67 & 1) != (v69 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          swift_release();
          __break(1u);
          return;
        }
        v63 = v68;
      }
      v37 = v80;
LABEL_36:
      v70 = (_QWORD *)v84[0];
      if ((v67 & 1) != 0)
      {
        v25 = v77;
        (*(void (**)(unint64_t, char *, uint64_t))(v77 + 40))(*(_QWORD *)(v84[0] + 56) + v63 * v45, v79, v37);
      }
      else
      {
        *(_QWORD *)(v84[0] + 8 * (v63 >> 6) + 64) |= 1 << v63;
        *(_QWORD *)(v70[6] + 8 * v63) = v43;
        v57((char *)(v70[7] + v63 * v45), v79, v37);
        v71 = v70[2];
        v72 = __OFADD__(v71, 1);
        v73 = v71 + 1;
        if (v72)
          goto LABEL_45;
        v70[2] = v73;
        v25 = v77;
      }
      a1 = v61;
      *(_QWORD *)(v61 + 8) = v84[0];
      swift_bridgeObjectRelease();
      v2 = v75;
      v8 = v58;
LABEL_23:
      ++v38;
      (*(void (**)(NSObject *, uint64_t))(v25 + 8))(v83, v37);
      if (v81 == v38)
        goto LABEL_42;
    }
  }
  if (one-time initialization token for logger != -1)
LABEL_46:
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)logger);
  v83 = Logger.logObject.getter();
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_21B9AA000, v83, v32, "There were no image files associated with this session -- not adding mapping.", v33, 2u);
    MEMORY[0x220772F44](v33, -1, -1);
  }

}

Swift::Void __swiftcall PhotogrammetrySessionImpl.RequestMap.addRequests(apiRequests:internalRequests:)(Swift::OpaquePointer apiRequests, Swift::OpaquePointer internalRequests)
{
  uint64_t v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t, char *);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s **v31;
  os_unfair_lock_s *v32;
  os_unfair_lock_s *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  os_unfair_lock_s *v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  char *v50;
  void (**v51)(char *, char *);
  char *v52;
  void *rawValue;
  uint64_t v54;
  void (**v55)(char *, uint64_t, char *);
  void *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (**v62)(uint64_t);
  uint64_t v63;
  os_unfair_lock_s **v64;
  uint64_t v65;
  uint64_t v66;

  v6 = type metadata accessor for Logger();
  v51 = *(void (***)(char *, char *))(v6 - 8);
  v52 = (char *)v6;
  MEMORY[0x24BDAC7A8](v6);
  v50 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v63 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PhotogrammetrySession.Request(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (void (**)(char *, uint64_t, char *))((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Request));
  MEMORY[0x24BDAC7A8](v59);
  v58 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = (uint64_t (*)(uint64_t))v2;
  v64 = (os_unfair_lock_s **)(v2 + 16);
  v15 = (char *)*((_QWORD *)apiRequests._rawValue + 2);
  rawValue = apiRequests._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = v15;
  if (v15)
  {
    v16 = 0;
    v17 = (uint64_t)rawValue
        + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v54 = *(_QWORD *)(v11 + 72);
    v55 = v13;
    v56 = internalRequests._rawValue;
    v18 = type metadata accessor for PhotogrammetrySession.Request;
    while (1)
    {
      outlined init with copy of __RKEntityActionSpecification(v17, (uint64_t)v13, type metadata accessor for PhotogrammetrySession.Request);
      v19 = (char *)*((_QWORD *)internalRequests._rawValue + 2);
      if (v16 == v19)
      {
        outlined destroy of __RKEntityActionSpecification((uint64_t)v13, type metadata accessor for PhotogrammetrySession.Request);
        goto LABEL_12;
      }
      if (v16 >= v19)
        break;
      v20 = type metadata accessor for PhotogrammetrySession.Request();
      v21 = *(_QWORD *)(v20 - 8);
      v22 = (char *)internalRequests._rawValue
          + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))
          + *(_QWORD *)(v21 + 72) * (_QWORD)v16;
      v23 = v58;
      v24 = v58 + *(int *)(v59 + 48);
      outlined init with take of __RKEntityActionSpecification((uint64_t)v13, v58, type metadata accessor for PhotogrammetrySession.Request);
      v25 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 16);
      v26 = v25(v24, v22, v20);
      v62 = &v49;
      v27 = MEMORY[0x24BDAC7A8](v26);
      v3 = (char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 32))(v3, v24, v20, v27);
      v29 = v23;
      v30 = v63;
      outlined init with take of __RKEntityActionSpecification(v29, v63, type metadata accessor for PhotogrammetrySession.Request);
      v25(v30 + *(int *)(v61 + 20), v3, v20);
      Date.init()();
      v31 = v64;
      swift_beginAccess();
      v32 = *v31;
      v33 = v32 + 6;
      os_unfair_lock_lock(v32 + 6);
      v34 = *(_QWORD *)&v32[4]._os_unfair_lock_opaque;
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
      v36 = *(_QWORD *)(v34 + 16);
      v35 = *(_QWORD *)(v34 + 24);
      if (v36 >= v35 >> 1)
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v34);
      ++v16;
      *(_QWORD *)(v34 + 16) = v36 + 1;
      outlined init with take of __RKEntityActionSpecification(v63, v34+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v36, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      v37 = *v64;
      v38 = *v64 + 6;
      os_unfair_lock_lock(v38);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v37[4]._os_unfair_lock_opaque = v34;
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v38);
      swift_bridgeObjectRelease();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v20);
      v13 = v55;
      v17 += v54;
      internalRequests._rawValue = v56;
      if (v57 == v16)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = (void (**)(char *, uint64_t, char *))v51;
    v3 = v52;
    v18 = v49;
    v16 = v50;
    if (one-time initialization token for logger == -1)
      goto LABEL_13;
  }
  swift_once();
LABEL_13:
  v39 = __swift_project_value_buffer((uint64_t)v3, (uint64_t)logger);
  v13[2](v16, v39, v3);
  swift_retain_n();
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    v43 = swift_slowAlloc();
    v66 = v43;
    *(_DWORD *)v42 = 136446210;
    swift_beginAccess();
    v44 = *((_QWORD *)v18 + 2);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 24));
    v45 = *(_QWORD *)(v44 + 16);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 24));
    swift_release();
    v46 = *(_QWORD *)(v45 + 16);
    swift_bridgeObjectRelease();
    v65 = v46;
    v47 = dispatch thunk of CustomStringConvertible.description.getter();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v40, v41, "Number of requests in the map: %{public}s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v43, -1, -1);
    MEMORY[0x220772F44](v42, -1, -1);

    v51[1](v50, v52);
  }
  else
  {

    swift_release_n();
    ((void (*)(char *, char *))v13[1])(v16, v3);
  }
}

