uint64_t specialized static ShapeResource.generateBox(size:)(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type ShapeResourceError and conformance ShapeResourceError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError;
  if (!lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShapeResourceError, &type metadata for ShapeResourceError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError;
  if (!lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShapeResourceError, &type metadata for ShapeResourceError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError);
  }
  return result;
}

uint64_t specialized static ShapeResource.generateStaticMesh(positions:faceIndices:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return swift_task_switch();
}

uint64_t specialized static ShapeResource.generateStaticMesh(positions:faceIndices:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v3;

  v1 = RECollisionMeshCreateFromSIMDPositions();
  *(_QWORD *)(v0 + 96) = v1;
  if (v1)
  {
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 104) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  else
  {
    lazy protocol witness table accessor for type ShapeResourceError and conformance ShapeResourceError();
    swift_allocError();
    *v3 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t CollisionMesh;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t (__cdecl *v10)();

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  REAssetManagerCollisionMeshAssetCreateFromMesh();
  CollisionMesh = REAssetManagerCollisionShapeAssetCreateCollisionMesh();
  type metadata accessor for ShapeResource();
  v5 = swift_allocObject();
  v0[14] = v5;
  *(_QWORD *)(v5 + 16) = CollisionMesh;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                              + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v8 = (_QWORD *)swift_task_alloc();
  v0[15] = v8;
  *v8 = v0;
  v8[1] = specialized static ShapeResource.generateStaticMesh(positions:faceIndices:);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 112));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t type metadata accessor for ARMeshAnchor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ARMeshAnchor;
  if (!lazy cache variable for type metadata for ARMeshAnchor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARMeshAnchor);
  }
  return result;
}

uint64_t sub_21BD5D460()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ShapeResource and conformance ShapeResource()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeResource and conformance ShapeResource;
  if (!lazy protocol witness table cache variable for type ShapeResource and conformance ShapeResource)
  {
    v1 = type metadata accessor for ShapeResource();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShapeResource, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeResource and conformance ShapeResource);
  }
  return result;
}

uint64_t method lookup function for ShapeResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ShapeResource.coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ShapeResource.bounds.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ShapeResource.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ShapeResource.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ShapeResource.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t storeEnumTagSinglePayload for ShapeResourceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD5D594 + 4 * byte_21BE78135[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD5D5C8 + 4 * asc_21BE78130[v4]))();
}

uint64_t sub_21BD5D5C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD5D5D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD5D5D8);
  return result;
}

uint64_t sub_21BD5D5E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD5D5ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD5D5F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD5D5F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShapeResourceError()
{
  return &type metadata for ShapeResourceError;
}

uint64_t static __RKEntityInteraction.interaction(for:entityLookupTable:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for __RKEntityTrigger();
  static __RKEntityTrigger.trigger(for:entityLookupTable:)(a1);
  v5 = v4;
  type metadata accessor for __RKEntityAction();
  v6 = type metadata accessor for __RKEntityInteractionSpecification(0);
  static __RKEntityAction.action(for:entityLookupTable:)(a1 + *(int *)(v6 + 20), a2);
  v8 = v7;
  v9 = (uint64_t *)(a1 + *(int *)(v6 + 24));
  v11 = *v9;
  v10 = v9[1];
  type metadata accessor for __RKEntityInteraction();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v12 = __RKEntityInteraction.init(trigger:action:)(v5, v8);
  swift_beginAccess();
  *(_QWORD *)(v12 + 48) = v11;
  *(_QWORD *)(v12 + 56) = v10;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t __RKEntityInteractionManager.areInteractionsEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t __RKEntityInteractionManager.areInteractionsEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1;
  return result;
}

uint64_t (*__RKEntityInteractionManager.areInteractionsEnabled.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityInteractionManager.interactionsDisabledForTests.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t __RKEntityInteractionManager.interactionsDisabledForTests.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 25) = a1;
  return result;
}

uint64_t (*__RKEntityInteractionManager.interactionsDisabledForTests.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityInteractionManager.customTriggerIdentifiers.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4B08];
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4B08];
LABEL_15:
    v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](i, v1);
      else
        swift_retain();
      swift_beginAccess();
      type metadata accessor for __RKCustomTrigger();
      v5 = swift_dynamicCastClass();
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        v7 = *(_QWORD *)(v5 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v10, v6, v7);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    v8 = v11;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.customActionIdentifiers.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4B08];
  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = specialized __RKEntityInteractionManager.actions(for:)(v0);
  result = swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4B08];
LABEL_15:
    v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_14;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](i, v1);
      else
        swift_retain();
      type metadata accessor for __RKEntityCustomAction();
      v5 = swift_dynamicCastClass();
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 128);
        v7 = *(_QWORD *)(v5 + 136);
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v10, v6, v7);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    v8 = v11;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  v20 = MEMORY[0x24BEE4AF8];
  v16 = v1;
  if (v1 >> 62)
    goto LABEL_29;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v2)
  {
LABEL_30:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x24BEE4AF8];
  }
LABEL_3:
  v3 = 0;
  v17 = v2;
  while (1)
  {
    if ((v16 & 0xC000000000000001) != 0)
    {
      MEMORY[0x220769770](v3, v16);
      v5 = __OFADD__(v3, 1);
      v6 = v3 + 1;
      if (v5)
        goto LABEL_28;
    }
    else
    {
      swift_retain();
      v5 = __OFADD__(v3, 1);
      v6 = v3 + 1;
      if (v5)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        swift_bridgeObjectRetain_n();
        v2 = _CocoaArrayWrapper.endIndex.getter();
        if (!v2)
          goto LABEL_30;
        goto LABEL_3;
      }
    }
    swift_beginAccess();
    swift_retain();
    v7 = getTapTriggers #1 (from:) in __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter();
    swift_release();
    if (v7 >> 62)
      break;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v18 = v6;
    if (v8)
      goto LABEL_13;
LABEL_4:
    v4 = MEMORY[0x24BEE4AF8];
LABEL_5:
    swift_bridgeObjectRelease_n();
    specialized Array.append<A>(contentsOf:)(v4);
    swift_release();
    v3 = v18;
    if (v18 == v17)
    {
      swift_bridgeObjectRelease_n();
      return v20;
    }
  }
  swift_bridgeObjectRetain_n();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v18 = v6;
  if (!v8)
    goto LABEL_4;
LABEL_13:
  v9 = 4;
  v4 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v11 = v9 - 4;
    if ((v7 & 0xC000000000000001) != 0)
    {
      v12 = MEMORY[0x220769770](v9 - 4, v7);
      v13 = v9 - 3;
      if (__OFADD__(v11, 1))
        goto LABEL_27;
    }
    else
    {
      v12 = *(_QWORD *)(v7 + 8 * v9);
      swift_retain();
      v13 = v9 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    v14 = (_QWORD *)(v12 + 24);
    swift_beginAccess();
    if (*(_QWORD *)(v12 + 24))
      break;
    v10 = MEMORY[0x24BEE4AF8];
LABEL_15:
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v10);
    swift_bridgeObjectRelease();
    swift_release();
    ++v9;
    if (v13 == v8)
      goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_21BE50AD0;
  if (*v14)
  {
    *(_QWORD *)(result + 32) = *v14;
    v19 = result;
    specialized Array._endMutation()();
    v10 = v19;
    swift_retain();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t getTapTriggers #1 (from:) in __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for __RKEntityTapTrigger();
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    v1 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_21BE50AD0;
    *(_QWORD *)(v2 + 32) = v1;
    v12 = v2;
    specialized Array._endMutation()();
    v3 = v12;
    swift_retain();
    return v3;
  }
  type metadata accessor for __RKEntityTriggerGroup();
  v5 = swift_dynamicCastClass();
  v3 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v3;
  v6 = v5;
  v13 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 24);
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_7;
LABEL_15:
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_retain();
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v8 = result;
  if (!result)
    goto LABEL_15;
LABEL_7:
  if (v8 >= 1)
  {
    v9 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        v10 = MEMORY[0x220769770](v9, v7);
      }
      else
      {
        v10 = *(_QWORD *)(v7 + 8 * v9 + 32);
        swift_retain();
      }
      ++v9;
      v11 = getTapTriggers #1 (from:) in __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter(v10);
      specialized Array.append<A>(contentsOf:)(v11);
      swift_release();
    }
    while (v8 != v9);
    swift_release();
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)(Swift::String matchingCustomTriggerWithIdentifier, Swift::OpaquePointer_optional customArguments, Swift::OpaquePointer_optional overrides)
{
  uint64_t v3;
  void *rawValue;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t k;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t j;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *__return_ptr, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD *);
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD v54[4];

  v47 = *(_QWORD *)&customArguments.is_nil;
  rawValue = customArguments.value._rawValue;
  object = matchingCustomTriggerWithIdentifier._object;
  countAndFlagsBits = matchingCustomTriggerWithIdentifier._countAndFlagsBits;
  swift_beginAccess();
  if (*(_BYTE *)(v3 + 24) == 1)
  {
    swift_beginAccess();
    v7 = *(_QWORD *)(v3 + 64);
    v52 = countAndFlagsBits;
    if (v7 >> 62)
      goto LABEL_30;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (i = v3; v8; i = v3)
    {
      v9 = 4;
      while (1)
      {
        v3 = v9 - 4;
        if ((v7 & 0xC000000000000001) == 0)
          break;
        v10 = MEMORY[0x220769770](v9 - 4, v7);
        v11 = v9 - 3;
        if (__OFADD__(v3, 1))
          goto LABEL_29;
LABEL_10:
        swift_beginAccess();
        v12 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v10 + 24) + 328);
        v13 = swift_retain();
        LOBYTE(v12) = v12(v13);
        swift_release();
        swift_release();
        if ((v12 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v16) = 0;
          return v16;
        }
        ++v9;
        if (v11 == v8)
          goto LABEL_12;
      }
      v10 = *(_QWORD *)(v7 + 8 * v9);
      swift_retain();
      v11 = v9 - 3;
      if (!__OFADD__(v3, 1))
        goto LABEL_10;
LABEL_29:
      __break(1u);
LABEL_30:
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
    }
LABEL_12:
    swift_bridgeObjectRelease();
    type metadata accessor for __RKCustomTrigger();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 24) = v52;
    *(_QWORD *)(v14 + 32) = object;
    swift_bridgeObjectRetain();
    swift_retain();
    if (rawValue)
      v15 = (unint64_t)rawValue;
    else
      v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)(v14 + 40) = v15;
    swift_bridgeObjectRetain();
    swift_release();
    *(_WORD *)(v14 + 16) = 0;
    *(_BYTE *)(v14 + 18) = 0;
    v46 = v14;
    v17 = __RKEntityInteractionManager.interactions(matching:entities:)(v14, 0);
    v18 = specialized __RKEntityInteractionManager.actions(for:)(v17);
    v54[0] = MEMORY[0x24BEE4AF8];
    if (v18 >> 62)
    {
      v19 = _CocoaArrayWrapper.endIndex.getter();
      if (v19)
        goto LABEL_19;
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v19)
      {
LABEL_19:
        if (v19 < 1)
        {
          __break(1u);
LABEL_81:
          swift_bridgeObjectRetain();
          v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
LABEL_39:
          v23 = 0;
          v49 = v17 & 0xC000000000000001;
          v45 = v17 & 0xFFFFFFFFFFFFFF8;
          while (1)
          {
            if (v49)
            {
              MEMORY[0x220769770](v23, v17);
              v24 = __OFADD__(v23++, 1);
              if (v24)
                goto LABEL_57;
            }
            else
            {
              if (v23 >= *(_QWORD *)(v45 + 16))
                goto LABEL_59;
              swift_retain();
              v24 = __OFADD__(v23++, 1);
              if (v24)
              {
LABEL_57:
                __break(1u);
LABEL_58:
                __break(1u);
LABEL_59:
                __break(1u);
LABEL_60:
                swift_bridgeObjectRetain();
                v8 = _CocoaArrayWrapper.endIndex.getter();
                v51 = v8;
                v52 = v17;
                if (!v8)
                  goto LABEL_61;
LABEL_36:
                if ((v19 & 0x8000000000000000) == 0 && (v19 & 0x4000000000000000) == 0)
                {
                  v22 = *(_QWORD *)(v19 + 16);
                  goto LABEL_39;
                }
                goto LABEL_81;
              }
            }
            if (v22)
            {
              if (v22 < 1)
                goto LABEL_58;
              swift_retain();
              swift_beginAccess();
              for (j = 0; j != v22; ++j)
              {
                if ((v19 & 0xC000000000000001) != 0)
                {
                  v26 = MEMORY[0x220769770](j, v19);
                }
                else
                {
                  v26 = *(_QWORD *)(v19 + 8 * j + 32);
                  swift_retain();
                }
                v27 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 456);
                v28 = swift_retain();
                LOBYTE(v27) = v27(v28);
                v29 = swift_release();
                if ((v27 & 1) != 0)
                  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 448))(v29);
                swift_release();
              }
              swift_release();
              v8 = v51;
              v17 = v52;
            }
            swift_release();
            if (v23 == v8)
              goto LABEL_61;
          }
        }
        for (k = 0; k != v19; ++k)
        {
          if ((v18 & 0xC000000000000001) != 0)
          {
            v21 = MEMORY[0x220769770](k, v18);
          }
          else
          {
            v21 = *(_QWORD *)(v18 + 8 * k + 32);
            swift_retain();
          }
          swift_beginAccess();
          if (*(_BYTE *)(v21 + 89) == 1)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        v19 = v54[0];
LABEL_34:
        v44 = v17 >> 62;
        if (v17 >> 62)
          goto LABEL_60;
        v8 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v51 = v8;
        v52 = v17;
        if (v8)
          goto LABEL_36;
LABEL_61:
        swift_release();
        swift_bridgeObjectRelease();
        v30 = *(_QWORD *)(i + 32);
        v31 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v31)
        {
          v16 = swift_dynamicCastClassUnconditional();
          v50 = v16;
          if (!v8)
            goto LABEL_63;
        }
        else
        {
          swift_allocObject();
          v16 = Scene.init(coreScene:)(v30);
          v50 = v16;
          if (!v8)
          {
LABEL_63:
            if (!v44)
            {
LABEL_64:
              v32 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRelease();
              swift_release();
LABEL_79:
              swift_release();
              LOBYTE(v16) = v32 > 0;
              return v16;
            }
LABEL_78:
            swift_bridgeObjectRetain();
            v32 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            swift_bridgeObjectRelease_n();
            goto LABEL_79;
          }
        }
        if (v8 < 1)
        {
          __break(1u);
          return v16;
        }
        v33 = v17 & 0xC000000000000001;
        swift_bridgeObjectRetain();
        v34 = 0;
        do
        {
          if (v33)
          {
            v35 = MEMORY[0x220769770](v34, v52);
          }
          else
          {
            v35 = *(_QWORD *)(v52 + 8 * v34 + 32);
            swift_retain();
          }
          swift_beginAccess();
          v36 = *(void (**)(_QWORD *__return_ptr, _QWORD))(**(_QWORD **)(v35 + 24) + 464);
          swift_retain();
          v36(v54, 0);
          swift_release();
          type metadata accessor for __RKEntityAction();
          if (swift_dynamicCast())
          {
            __RKEntityInteractionManager.applyOverrides(_:on:)(v47, (uint64_t)v53);
            swift_beginAccess();
            v37 = swift_retain();
            MEMORY[0x220768F0C](v37);
            if (*(_QWORD *)((*(_QWORD *)(i + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(i + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();
            v38 = swift_allocObject();
            swift_weakInit();
            v39 = swift_allocObject();
            swift_weakInit();
            v40 = swift_allocObject();
            *(_QWORD *)(v40 + 16) = v38;
            *(_QWORD *)(v40 + 24) = v39;
            swift_beginAccess();
            v41 = v53[9];
            v53[9] = partial apply for closure #2 in __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:);
            v53[10] = v40;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v41);
            v54[0] = v46;
            v54[1] = v50;
            v42 = *(void (**)(_QWORD *))(*v53 + 408);
            swift_retain();
            swift_retain();
            v42(v54);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          else
          {
            swift_release();
          }
          ++v34;
        }
        while (v51 != v34);
        v17 = v52;
        swift_bridgeObjectRelease();
        if (!v44)
          goto LABEL_64;
        goto LABEL_78;
      }
    }
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
    goto LABEL_34;
  }
  LOBYTE(v16) = 0;
  return v16;
}

uint64_t closure #2 in __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (!Strong)
      return swift_release();
    v3 = Strong;
    swift_beginAccess();
    swift_retain();
    v4 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((unint64_t *)(v1 + 16), v3);
    result = swift_release();
    v5 = *(_QWORD *)(v1 + 16);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v6 >= v4)
        goto LABEL_5;
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v6 >= v4)
      {
LABEL_5:
        specialized Array.replaceSubrange<A>(_:with:)(v4, v6);
        swift_endAccess();
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t __RKEntityInteractionManager.setCustomActionHandler(for:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  swift_beginAccess();
  v6 = swift_bridgeObjectRetain();
  v7 = specialized __RKEntityInteractionManager.actions(for:)(v6);
  result = swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v9)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](i, v7);
      else
        swift_retain();
      type metadata accessor for __RKEntityCustomAction();
      v12 = swift_dynamicCastClass();
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)(v12 + 128) == a1 && *(_QWORD *)(v12 + 136) == a2;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_beginAccess();
          v11 = *(_QWORD *)(v13 + 112);
          *(_QWORD *)(v13 + 112) = a3;
          *(_QWORD *)(v13 + 120) = a4;
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a3);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
        }
      }
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.applyOverrides(_:on:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;

  if (result)
  {
    v2 = result;
    if (*(_QWORD *)(result + 16))
    {
      type metadata accessor for __RKEntityActionGroup();
      v4 = swift_dynamicCastClass();
      if (!v4)
      {
        result = swift_beginAccess();
        if (!*(_QWORD *)(a2 + 16))
          return result;
        swift_retain();
        REEntityGetName();
        v10 = String.init(cString:)();
        if (*(_QWORD *)(v2 + 16))
        {
          v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
          if ((v13 & 1) != 0)
          {
            v14 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v12);
            swift_retain();
            swift_bridgeObjectRelease();
            *(_QWORD *)(a2 + 16) = v14;
            swift_release();
            return swift_release();
          }
        }
        goto LABEL_18;
      }
      v5 = v4;
      swift_beginAccess();
      v6 = *(_QWORD *)(v5 + 112);
      if (v6 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        result = _CocoaArrayWrapper.endIndex.getter();
        v7 = result;
        if (result)
          goto LABEL_6;
      }
      else
      {
        v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        result = swift_bridgeObjectRetain();
        if (v7)
        {
LABEL_6:
          if (v7 < 1)
          {
            __break(1u);
            return result;
          }
          for (i = 0; i != v7; ++i)
          {
            if ((v6 & 0xC000000000000001) != 0)
            {
              v9 = MEMORY[0x220769770](i, v6);
            }
            else
            {
              v9 = *(_QWORD *)(v6 + 8 * i + 32);
              swift_retain();
            }
            __RKEntityInteractionManager.applyOverrides(_:on:)(v2, v9);
            swift_release();
          }
        }
      }
LABEL_18:
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

Swift::Bool __swiftcall __RKEntityInteractionManager.__performInteractions(matchingCustomTriggerWithIdentifier:with:on:)(Swift::String matchingCustomTriggerWithIdentifier, Swift::OpaquePointer with, Swift::OpaquePointer_optional on)
{
  uint64_t v3;
  void *rawValue;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  char v9;

  rawValue = on.value._rawValue;
  object = matchingCustomTriggerWithIdentifier._object;
  countAndFlagsBits = matchingCustomTriggerWithIdentifier._countAndFlagsBits;
  swift_beginAccess();
  if (*(_BYTE *)(v3 + 24) == 1)
  {
    type metadata accessor for __RKCustomTrigger();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 24) = countAndFlagsBits;
    *(_QWORD *)(v8 + 32) = object;
    *(Swift::OpaquePointer *)(v8 + 40) = with;
    *(_WORD *)(v8 + 16) = 0;
    *(_BYTE *)(v8 + 18) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = __RKEntityInteractionManager.__performInteractions(matching:on:)(v8, (uint64_t)rawValue);
    swift_release();
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t __RKEntityInteractionManager.__setCustomPackageActionHandler(withIdentifier:actionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  swift_beginAccess();
  v6 = swift_bridgeObjectRetain();
  v7 = specialized __RKEntityInteractionManager.actions(for:)(v6);
  result = swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v9)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](i, v7);
      else
        swift_retain();
      type metadata accessor for __RKEntityCustomAction();
      v12 = swift_dynamicCastClass();
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)(v12 + 128) == a1 && *(_QWORD *)(v12 + 136) == a2;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_beginAccess();
          v11 = *(_QWORD *)(v13 + 152);
          *(_QWORD *)(v13 + 152) = a3;
          *(_QWORD *)(v13 + 160) = a4;
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a3);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
        }
      }
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(char a1)
{
  uint64_t v1;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v13 = 91;
  v14 = 0xE100000000000000;
  v11 = 0;
  v12 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  v9[16] = a1;
  v10 = v1;
  v7 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v7, &v13, implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didsetpartial apply, v9);
  v13 = 91;
  v14 = 0xE100000000000000;
  InteractionsLogger.dumpStack()();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(char a1, uint64_t a2)
{
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;

  _StringGuts.grow(_:)(27);
  v4._object = (void *)0x800000021BE91D80;
  v4._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v4);
  if ((a1 & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 544175136;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  swift_beginAccess();
  if (*(_BYTE *)(a2 + 26))
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (*(_BYTE *)(a2 + 26))
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t __RKEntityInteractionManager.automaticallyInvokesStartTrigger.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t __RKEntityInteractionManager.automaticallyInvokesStartTrigger.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = v1;
  swift_beginAccess();
  v4 = *(_BYTE *)(v2 + 26);
  *(_BYTE *)(v2 + 26) = a1;
  v16 = 91;
  v17 = 0xE100000000000000;
  v14 = 0;
  v15 = 0xE000000000000000;
  v13 = v2;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v11[16] = v4;
  v12 = v2;
  v9 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v9, &v16, partial apply for implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset, v11);
  v16 = 91;
  v17 = 0xE100000000000000;
  InteractionsLogger.dumpStack()();
  return swift_bridgeObjectRelease();
}

void (*__RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  swift_beginAccess();
  *((_BYTE *)v3 + 56) = *(_BYTE *)(v1 + 26);
  return __RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify;
}

void __RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 48);
  v3 = *(_BYTE *)(v2 + 26);
  *(_BYTE *)(v2 + 26) = *(_BYTE *)(*a1 + 56);
  v4 = *(_QWORD *)(v1 + 48);
  v14 = 91;
  v15 = 0xE100000000000000;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0xE000000000000000;
  *(_QWORD *)(v1 + 40) = v4;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(*(Swift::String *)(v1 + 24));
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8285;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8 = swift_release();
  v10 = v14;
  v9 = v15;
  MEMORY[0x24BDAC7A8](v8);
  v12[16] = v3;
  v13 = v4;
  v11 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v11, &v14, implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didsetpartial apply, v12);
  v14 = v10;
  v15 = v9;
  InteractionsLogger.dumpStack()();
  swift_bridgeObjectRelease();
  free((void *)v1);
}

uint64_t __RKEntityInteractionManager.proximityEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 27);
}

uint64_t __RKEntityInteractionManager.proximityEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 27) = result;
  return result;
}

_BYTE *(*__RKEntityInteractionManager.proximityEnabled.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 27);
  return __RKEntityInteractionManager.proximityEnabled.modify;
}

_BYTE *__RKEntityInteractionManager.proximityEnabled.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 27) = result[8];
  return result;
}

uint64_t __RKEntityInteractionManager.init(sceneRef:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  os_log_type_t v12;
  uint64_t v14[2];

  v2 = v1;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 16) = MEMORY[0x24BEE4AF8];
  type metadata accessor for __RKEntityLookupTable();
  *(_DWORD *)(v2 + 24) = 16843009;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_QWORD *)(v2 + 40) = v5;
  type metadata accessor for __RKSimulationSceneCoordinator();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v6 + 32) = 0;
  *(_QWORD *)(v2 + 48) = v6;
  type metadata accessor for __RKRuntimeSceneCoordinator();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v2 + 56) = v7;
  *(_QWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 32) = a1;
  v14[0] = 91;
  v14[1] = 0xE100000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8285;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8250;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  swift_release();
  v12 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v12, v14);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t __RKEntityInteractionManager.deinit()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  os_log_type_t v5;
  uint64_t v7[2];

  v7[0] = 91;
  v7[1] = 0xE100000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8285;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_release();
  v5 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityInteractionManager.__deallocating_deinit()
{
  __RKEntityInteractionManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t __RKEntityInteractionManager.__entityLookupTable.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*__RKEntityInteractionManager.__entityLookupTable.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t (*__RKEntityInteractionManager.__simulationSceneCoordinator.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path setter for __RKEntityInteractionManager.__runtimeSceneCoordinator : __RKEntityInteractionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 56) = v2;
  swift_retain();
  return swift_release();
}

uint64_t __RKEntityInteractionManager.__runtimeSceneCoordinator.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t __RKEntityInteractionManager.__runtimeSceneCoordinator.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t key path setter for __RKEntityInteractionManager.__interactions : __RKEntityInteractionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 64) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityInteractionManager.__interactions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityInteractionManager.__hasInteractionsForTrigger<A>(of:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_33:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_33;
LABEL_3:
  v4 = 0;
  v5 = v1 & 0xC000000000000001;
  v13 = v1 & 0xFFFFFFFFFFFFFF8;
  v15 = v2;
  v16 = v1;
  v14 = v1 & 0xC000000000000001;
  while (1)
  {
    if (v5)
    {
      MEMORY[0x220769770](v4, v1);
      v6 = __OFADD__(v4++, 1);
      if (v6)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      if (v4 >= *(_QWORD *)(v13 + 16))
      {
        __break(1u);
        return result;
      }
      swift_retain();
      v6 = __OFADD__(v4++, 1);
      if (v6)
        goto LABEL_31;
    }
    swift_beginAccess();
    type metadata accessor for __RKEntityTriggerGroup();
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = v7;
      swift_beginAccess();
      v9 = *(_QWORD *)(v8 + 24);
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain_n();
        swift_retain();
        v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v10)
        {
LABEL_13:
          v1 = 4;
          do
          {
            v11 = v1 - 4;
            if ((v9 & 0xC000000000000001) != 0)
            {
              MEMORY[0x220769770](v1 - 4, v9);
              v6 = __OFADD__(v11, 1);
              v12 = v1 - 3;
              if (v6)
                goto LABEL_30;
            }
            else
            {
              swift_retain();
              v6 = __OFADD__(v11, 1);
              v12 = v1 - 3;
              if (v6)
              {
LABEL_30:
                __break(1u);
                goto LABEL_31;
              }
            }
            if (swift_dynamicCastClass())
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              goto LABEL_28;
            }
            swift_release();
            ++v1;
          }
          while (v12 != v10);
        }
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_retain();
        if (v10)
          goto LABEL_13;
      }
      swift_release();
      swift_bridgeObjectRelease();
      v2 = v15;
      v1 = v16;
      v5 = v14;
    }
    swift_retain();
    swift_release();
    if (swift_dynamicCastClass())
      break;
    result = swift_release();
    if (v4 == v2)
      goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_28:
  swift_release();
  return 1;
}

uint64_t __RKEntityInteractionManager.__actions.getter()
{
  unint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = specialized __RKEntityInteractionManager.actions(for:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t __RKEntityInteractionManager.__addInteraction(_:)()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = swift_retain();
  MEMORY[0x220768F0C](v1);
  if (*(_QWORD *)((*(_QWORD *)(v0 + 64) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 64) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t __RKEntityInteractionManager.__removeInteraction(_:)(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;

  swift_beginAccess();
  swift_retain();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Collection.firstIndex(where:)(v2, a1);
  v5 = v4;
  swift_bridgeObjectRelease();
  result = swift_release();
  if ((v5 & 1) == 0)
  {
    swift_beginAccess();
    v7 = *(void (**)(uint64_t))(**(_QWORD **)(a1 + 24) + 448);
    v8 = swift_retain();
    v7(v8);
    swift_release();
    swift_beginAccess();
    specialized Array.remove(at:)(v3);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall __RKEntityInteractionManager.__removeAllInteractions()()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 64) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
}

uint64_t __RKEntityInteractionManager.__cloneInteractions(fromEntity:toEntity:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  void **v12;
  uint64_t (*v13)(uint64_t, unint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, unint64_t);
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t inited;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;

  v5 = v2 + 64;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 64);
  if (v6 >> 62)
    goto LABEL_109;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
    return swift_bridgeObjectRelease();
LABEL_3:
  v8 = 0;
  v70 = v6 & 0xC000000000000001;
  v63 = v6 + 32;
  v64 = v6 & 0xFFFFFFFFFFFFFF8;
  v67 = a1;
  v68 = a2;
  v65 = v6;
  v66 = (_QWORD *)v5;
  v69 = v7;
  while (1)
  {
    if (v70)
    {
      v9 = MEMORY[0x220769770](v8, v6);
      v10 = __OFADD__(v8, 1);
      v11 = v8 + 1;
      if (v10)
        goto LABEL_100;
    }
    else
    {
      if (v8 >= *(_QWORD *)(v64 + 16))
        goto LABEL_104;
      v9 = *(_QWORD *)(v63 + 8 * v8);
      swift_retain();
      v10 = __OFADD__(v8, 1);
      v11 = v8 + 1;
      if (v10)
      {
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.endIndex.getter();
        if (!v7)
          return swift_bridgeObjectRelease();
        goto LABEL_3;
      }
    }
    v74 = v11;
    v12 = (void **)(v9 + 16);
    swift_beginAccess();
    v13 = *(uint64_t (**)(uint64_t, unint64_t))(**(_QWORD **)(v9 + 16) + 200);
    swift_retain();
    v14 = v13(a1, a2);
    swift_release();
    swift_beginAccess();
    v73 = v9;
    v5 = *(_QWORD *)(v9 + 24);
    v15 = *(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 472);
    swift_retain();
    v16 = v15(a1, a2);
    v18 = v17;
    swift_release();
    if (v14)
    {
      if (!v16)
      {
LABEL_19:
        swift_release();
        goto LABEL_95;
      }
      type metadata accessor for __RKEntityInteraction();
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 32) = 0;
      *(_BYTE *)(v19 + 40) = 1;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 16) = v14;
      *(_QWORD *)(v19 + 24) = v16;
      v71 = (uint64_t *)(v19 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21BE50AD0;
      *(_QWORD *)(inited + 32) = v14;
      v76 = inited;
      specialized Array._endMutation()();
      v21 = v76;
      type metadata accessor for __RKEntityTriggerGroup();
      v22 = swift_dynamicCastClass();
      swift_retain_n();
      swift_retain();
      if (v22)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v21 = *(_QWORD *)(v22 + 24);
        swift_bridgeObjectRetain();
        swift_release();
      }
      if (!(v21 >> 62))
      {
        v5 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v5)
          goto LABEL_22;
        goto LABEL_91;
      }
      swift_bridgeObjectRetain();
      v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5)
      {
LABEL_91:
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_92;
      }
LABEL_22:
      if (v5 < 1)
        goto LABEL_105;
      v6 = v21 & 0xC000000000000001;
      swift_beginAccess();
      v28 = 0;
      while (1)
      {
        if (v6)
        {
          a2 = MEMORY[0x220769770](v28, v21);
        }
        else
        {
          a2 = *(_QWORD *)(v21 + 8 * v28 + 32);
          swift_retain();
        }
        type metadata accessor for __RKEntityProximityTrigger();
        v29 = swift_dynamicCastClass();
        if (!v29)
          goto LABEL_47;
        v30 = v29;
        v31 = swift_beginAccess();
        v32 = *(unsigned __int8 *)(v30 + 36);
        if (v32 == 1)
          break;
        if (v32 != 2)
          goto LABEL_47;
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 432))(v31);
        swift_release();
        if (v33)
        {
          swift_beginAccess();
          *(_BYTE *)(v33 + 88) = 1;
          *(_QWORD *)(v19 + 32) = v33;
LABEL_47:
          swift_release();
        }
        if (v5 == ++v28)
          goto LABEL_91;
      }
      type metadata accessor for __RKEntityActionGroup();
      v34 = swift_dynamicCastClass();
      if (!v34)
        goto LABEL_47;
      v35 = v34;
      v36 = v19;
      v37 = (uint64_t *)(v34 + 112);
      swift_beginAccess();
      v38 = *(_QWORD *)(v35 + 112);
      if (v38 >> 62)
      {
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        v44 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v44 == 2)
          goto LABEL_35;
      }
      else
      {
        v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        swift_retain();
        if (v39 == 2)
        {
LABEL_35:
          a1 = *v37;
          if ((*v37 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v40 = MEMORY[0x220769770](0, a1);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_101;
            v40 = *(_QWORD *)(a1 + 32);
            swift_retain();
          }
          *v71 = v40;
          swift_release();
          a1 = *v37;
          if ((*v37 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v41 = MEMORY[0x220769770](1, a1);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
              goto LABEL_102;
            v41 = *(_QWORD *)(a1 + 40);
            swift_retain();
          }
          swift_beginAccess();
          *(_BYTE *)(v41 + 88) = 1;
          swift_release();
          v42 = *v37;
          if ((v42 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v43 = MEMORY[0x220769770](1, v42);
          }
          else
          {
            if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
              goto LABEL_103;
            v43 = *(_QWORD *)(v42 + 40);
            swift_bridgeObjectRetain();
            swift_retain();
          }
          swift_release_n();
          swift_release();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v36 + 32) = v43;
          v19 = v36;
          goto LABEL_47;
        }
      }
      v19 = v36;
      swift_release();
      swift_release();
      goto LABEL_47;
    }
    if (!v16)
      goto LABEL_95;
    if ((v18 & 1) == 0)
      goto LABEL_19;
    v23 = *v12;
    swift_retain_n();
    objc_msgSend(v23, sel_copyWithZone_, 0);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for __RKEntityTrigger();
    if ((swift_dynamicCast() & 1) != 0)
      break;
    swift_release();
    swift_release_n();
LABEL_96:
    v8 = v74;
    if (v74 == v69)
      return swift_bridgeObjectRelease();
  }
  type metadata accessor for __RKEntityInteraction();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 32) = 0;
  *(_BYTE *)(v24 + 40) = 1;
  *(_QWORD *)(v24 + 48) = 0;
  *(_QWORD *)(v24 + 56) = 0;
  *(_QWORD *)(v24 + 16) = v75;
  *(_QWORD *)(v24 + 24) = v16;
  v72 = (uint64_t *)(v24 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v25 + 32) = v75;
  v77 = v25;
  specialized Array._endMutation()();
  a2 = v77;
  type metadata accessor for __RKEntityTriggerGroup();
  v26 = swift_dynamicCastClass();
  swift_retain();
  if (v26)
  {
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    a2 = *(_QWORD *)(v26 + 24);
    swift_bridgeObjectRetain();
    result = swift_release();
  }
  else
  {
    swift_retain();
    result = swift_retain();
  }
  if (!(a2 >> 62))
  {
    v45 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v45)
      goto LABEL_59;
LABEL_99:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();
LABEL_92:
    swift_beginAccess();
    v62 = swift_retain();
    MEMORY[0x220768F0C](v62);
    a1 = v67;
    a2 = v68;
    v6 = v65;
    v5 = v73;
    if (*(_QWORD *)((*v66 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v66 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
LABEL_95:
    swift_release();
    goto LABEL_96;
  }
  swift_bridgeObjectRetain();
  v45 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v45)
    goto LABEL_99;
LABEL_59:
  if (v45 >= 1)
  {
    v6 = a2 & 0xC000000000000001;
    swift_beginAccess();
    v5 = 0;
    while (1)
    {
      if (v6)
        MEMORY[0x220769770](v5, a2);
      else
        swift_retain();
      type metadata accessor for __RKEntityProximityTrigger();
      v46 = swift_dynamicCastClass();
      if (!v46)
        goto LABEL_84;
      v47 = v46;
      v48 = swift_beginAccess();
      v49 = *(unsigned __int8 *)(v47 + 36);
      if (v49 == 1)
        break;
      if (v49 != 2)
        goto LABEL_84;
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 432))(v48);
      swift_release();
      if (v50)
      {
        swift_beginAccess();
        *(_BYTE *)(v50 + 88) = 1;
        *(_QWORD *)(v24 + 32) = v50;
LABEL_84:
        swift_release();
      }
      if (v45 == ++v5)
        goto LABEL_99;
    }
    type metadata accessor for __RKEntityActionGroup();
    v51 = swift_dynamicCastClass();
    if (!v51)
      goto LABEL_84;
    v52 = v51;
    v53 = v24;
    v54 = (uint64_t *)(v51 + 112);
    swift_beginAccess();
    v55 = *(_QWORD *)(v52 + 112);
    if (v55 >> 62)
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v61 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v61 == 2)
        goto LABEL_72;
    }
    else
    {
      v56 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_retain();
      if (v56 == 2)
      {
LABEL_72:
        a1 = *v54;
        if ((*v54 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v57 = MEMORY[0x220769770](0, a1);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_106;
          v57 = *(_QWORD *)(a1 + 32);
          swift_retain();
        }
        *v72 = v57;
        swift_release();
        a1 = *v54;
        if ((*v54 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v58 = MEMORY[0x220769770](1, a1);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            goto LABEL_107;
          v58 = *(_QWORD *)(a1 + 40);
          swift_retain();
        }
        swift_beginAccess();
        *(_BYTE *)(v58 + 88) = 1;
        swift_release();
        v59 = *v54;
        if ((v59 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v60 = MEMORY[0x220769770](1, v59);
        }
        else
        {
          if (*(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            goto LABEL_108;
          v60 = *(_QWORD *)(v59 + 40);
          swift_bridgeObjectRetain();
          swift_retain();
        }
        swift_release_n();
        swift_release();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v53 + 32) = v60;
        v24 = v53;
        goto LABEL_84;
      }
    }
    v24 = v53;
    swift_release();
    swift_release();
    goto LABEL_84;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.__performInteractions(matching:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  os_log_type_t v34;
  os_log_type_t v35;
  uint64_t result;
  unint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unsigned __int8 v95;
  uint64_t v96;
  Swift::String v97;
  uint64_t v98;
  unint64_t v99;

  v4 = v2;
  v84 = a1;
  v6 = type metadata accessor for DispatchTime();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v77 - v11;
  v98 = 91;
  v99 = 0xE100000000000000;
  v97._countAndFlagsBits = 0;
  v97._object = (void *)0xE000000000000000;
  v96 = v2;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v97);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8285;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 8250;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  swift_release();
  v17 = v98;
  v16 = (void *)v99;
  swift_beginAccess();
  if (*(_BYTE *)(v4 + 24) != 1)
  {
    v97._countAndFlagsBits = v17;
    v97._object = v16;
    v34 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v34, &v97._countAndFlagsBits);
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
  v78 = v10;
  v82 = v17;
  v83 = v16;
  v18 = (uint64_t *)(v4 + 64);
  swift_beginAccess();
  v86 = v4;
  v19 = *(_QWORD *)(v4 + 64);
  v81 = v6;
  v80 = v12;
  v79 = v7;
  if (v19 >> 62)
  {
LABEL_43:
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20)
      goto LABEL_4;
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20)
    {
LABEL_4:
      v21 = 4;
      do
      {
        v22 = v21 - 4;
        if ((v19 & 0xC000000000000001) != 0)
        {
          v23 = MEMORY[0x220769770](v21 - 4, v19);
          v3 = v21 - 3;
          if (__OFADD__(v22, 1))
            goto LABEL_42;
        }
        else
        {
          v23 = *(_QWORD *)(v19 + 8 * v21);
          swift_retain();
          v3 = v21 - 3;
          if (__OFADD__(v22, 1))
          {
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
        }
        swift_beginAccess();
        v24 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v23 + 24) + 328);
        v25 = swift_retain();
        LOBYTE(v24) = v24(v25);
        swift_release();
        swift_release();
        if ((v24 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v93 = v82;
          v94 = v83;
          v35 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v35, &v93);
          goto LABEL_27;
        }
        ++v21;
      }
      while (v3 != v20);
    }
  }
  swift_bridgeObjectRelease();
  v26 = __RKEntityInteractionManager.interactions(matching:entities:)(v84, a2);
  v27 = (uint64_t)(&v77 - 4);
  *(&v77 - 2) = MEMORY[0x24BDAC7A8](v26);
  v93 = v82;
  v94 = v83;
  v28 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v28, &v93, partial apply for implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:), &v77 - 4);
  v95 = 0;
  v29 = specialized __RKEntityInteractionManager.actions(for:)(v26);
  v30 = MEMORY[0x24BEE4AF8];
  v92 = MEMORY[0x24BEE4AF8];
  if ((unint64_t)v29 >> 62)
    v31 = _CocoaArrayWrapper.endIndex.getter();
  else
    v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  v87 = v26;
  if (v31)
  {
    if (v31 < 1)
      goto LABEL_93;
    for (i = 0; i != v31; ++i)
    {
      if ((v29 & 0xC000000000000001) != 0)
      {
        v33 = MEMORY[0x220769770](i, v29);
      }
      else
      {
        v33 = *(_QWORD *)(v29 + 8 * i + 32);
        swift_retain();
      }
      swift_beginAccess();
      if (*(_BYTE *)(v33 + 89) == 1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    v3 = v92;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x24BEE4AF8];
  }
  v27 = *v18;
  v37 = swift_bridgeObjectRetain();
  v29 = specialized __RKEntityInteractionManager.actions(for:)(v37);
  swift_bridgeObjectRelease();
  v90 = v30;
  if (!((unint64_t)v29 >> 62))
  {
    v38 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v38)
      goto LABEL_31;
LABEL_50:
    swift_bridgeObjectRelease();
    v27 = MEMORY[0x24BEE4AF8];
    if (v3 < 0)
      goto LABEL_77;
    goto LABEL_51;
  }
  if (v29 < 0)
    v27 = v29;
  else
    v27 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v38 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v38)
    goto LABEL_50;
LABEL_31:
  if (v38 < 1)
    goto LABEL_94;
  for (j = 0; j != v38; ++j)
  {
    if ((v29 & 0xC000000000000001) != 0)
    {
      v40 = MEMORY[0x220769770](j, v29);
    }
    else
    {
      v40 = *(_QWORD *)(v29 + 8 * j + 32);
      swift_retain();
    }
    swift_beginAccess();
    if (*(_BYTE *)(v40 + 89) == 1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  v27 = v90;
  if ((v3 & 0x8000000000000000) == 0)
  {
LABEL_51:
    if ((v3 & 0x4000000000000000) == 0)
    {
      v29 = *(_QWORD *)(v3 + 16);
      if (!v29)
        goto LABEL_78;
      goto LABEL_53;
    }
  }
LABEL_77:
  while (1)
  {
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v29)
      break;
LABEL_53:
    if (v27 < 0 || (v27 & 0x4000000000000000) != 0)
      goto LABEL_95;
    v41 = *(_QWORD *)(v27 + 16);
LABEL_56:
    v42 = 0;
    v85 = v3 + 32;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v43 = MEMORY[0x220769770](v42, v3);
        v44 = __OFADD__(v42++, 1);
        if (v44)
          goto LABEL_74;
      }
      else
      {
        if (v42 >= *(_QWORD *)(v3 + 16))
          goto LABEL_76;
        v43 = *(_QWORD *)(v85 + 8 * v42);
        swift_retain();
        v44 = __OFADD__(v42++, 1);
        if (v44)
        {
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
      }
      if (v41)
        break;
LABEL_58:
      swift_release();
      if (v42 == v29)
        goto LABEL_78;
    }
    if (v41 >= 1)
    {
      swift_retain();
      v45 = 0;
      while ((v27 & 0xC000000000000001) == 0)
      {
        v46 = *(_QWORD *)(v27 + 8 * v45 + 32);
        swift_retain();
        if (v43 != v46)
          goto LABEL_73;
LABEL_68:
        swift_release();
        if (v41 == ++v45)
        {
          swift_release();
          goto LABEL_58;
        }
      }
      v46 = MEMORY[0x220769770](v45, v27);
      if (v43 == v46)
        goto LABEL_68;
LABEL_73:
      (*(void (**)(void))(*(_QWORD *)v46 + 448))();
      goto LABEL_68;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
  }
LABEL_78:
  swift_release();
  swift_release();
  v47 = *(_QWORD *)(v86 + 32);
  v48 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v48)
  {
    v49 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    v49 = Scene.init(coreScene:)(v47);
  }
  v3 = v49;
  v50 = v84;
  v51 = v87;
  type metadata accessor for __RKStartTrigger();
  v52 = swift_dynamicCastClass();
  v53 = v51 >> 62;
  if (!v52)
    goto LABEL_106;
  if (v53)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v29)
    {
      swift_bridgeObjectRetain();
      v59 = _CocoaArrayWrapper.endIndex.getter();
      if (v59)
      {
        v54 = v59;
        if ((v51 & 0xC000000000000001) == 0)
          goto LABEL_99;
        goto LABEL_85;
      }
LABEL_90:
      swift_release();
LABEL_104:
      v52 = swift_bridgeObjectRelease();
    }
    else
    {
LABEL_105:
      v52 = swift_release();
    }
LABEL_106:
    MEMORY[0x24BDAC7A8](v52);
    *(&v77 - 2) = v51;
    v88 = v82;
    v89 = (uint64_t)v83;
    v61 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v61, &v88, partial apply for implicit closure #4 in __RKEntityInteractionManager.__performInteractions(matching:on:), &v77 - 4);
    if (v53)
    {
LABEL_124:
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v62 = result;
    }
    else
    {
      v62 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
    }
    v63 = (uint64_t)v83;
    v64 = v82;
    if (v62)
    {
      if (v62 < 1)
      {
        __break(1u);
        return result;
      }
      v65 = 0;
      v66 = v51 & 0xC000000000000001;
      do
      {
        if (v66)
          MEMORY[0x220769770](v65, v87);
        else
          swift_retain();
        ++v65;
        v88 = v64;
        v89 = v63;
        swift_retain();
        swift_retain();
        v67 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v67, &v88);
        v88 = v50;
        v89 = v3;
        __RKEntityInteraction.fire(context:)(&v88);
        swift_release();
        swift_release();
        swift_release();
      }
      while (v62 != v65);
      v51 = v87;
      v68 = swift_bridgeObjectRelease();
      v95 = 1;
    }
    else
    {
      v68 = swift_bridgeObjectRelease();
    }
    MEMORY[0x24BDAC7A8](v68);
    *(&v77 - 2) = v51;
    v88 = v64;
    v89 = v63;
    v69 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v69, &v88, partial apply for implicit closure #6 in __RKEntityInteractionManager.__performInteractions(matching:on:), &v77 - 4);
    v70 = swift_bridgeObjectRelease();
    goto LABEL_118;
  }
  v54 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  if (!v54)
    goto LABEL_105;
  swift_bridgeObjectRetain();
  v29 = v54;
  if ((v51 & 0xC000000000000001) != 0)
  {
LABEL_85:
    v27 = 0;
    while (1)
    {
      MEMORY[0x220769770](v27, v51);
      v55 = v27 + 1;
      if (__OFADD__(v27, 1))
        break;
      swift_beginAccess();
      swift_retain();
      v56 = __RKEntityInteractionManager.containsChangeSceneAction(action:)();
      swift_unknownObjectRelease();
      swift_release();
      if ((v56 & 1) != 0)
      {
        v58 = swift_bridgeObjectRelease();
        goto LABEL_120;
      }
      ++v27;
      v57 = v55 == v54;
      v51 = v87;
      if (v57)
        goto LABEL_90;
    }
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    swift_bridgeObjectRetain();
    v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_56;
  }
LABEL_99:
  v51 = 0;
  while (1)
  {
    v50 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_124;
    }
    swift_beginAccess();
    swift_retain();
    swift_retain();
    v60 = __RKEntityInteractionManager.containsChangeSceneAction(action:)();
    swift_release();
    swift_release();
    if ((v60 & 1) != 0)
      break;
    ++v51;
    if (v50 == v54)
    {
      v50 = v84;
      swift_release();
      v51 = v87;
      goto LABEL_104;
    }
  }
  v58 = swift_bridgeObjectRelease();
  v50 = v84;
LABEL_120:
  v63 = (uint64_t)v83;
  v64 = v82;
  if (v29 >= 1)
    v95 = 1;
  specialized static __ServiceLocator.shared.getter(v58);
  swift_beginAccess();
  swift_unownedRetainStrong();
  v72 = v78;
  static DispatchTime.now()();
  v73 = (uint64_t)v80;
  MEMORY[0x220768A98](v72, 0.1);
  v74 = *(void (**)(char *, uint64_t))(v79 + 8);
  v75 = v81;
  v74(v72, v81);
  v76 = (_QWORD *)swift_allocObject();
  v76[2] = v87;
  v76[3] = v50;
  v76[4] = v3;
  swift_retain();
  swift_retain();
  __Engine.asyncAfterOnEngineQueue(deadline:_:)(v73, (uint64_t)partial apply for closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:), (uint64_t)v76);
  swift_release();
  swift_release();
  swift_release();
  v70 = ((uint64_t (*)(uint64_t, uint64_t))v74)(v73, v75);
LABEL_118:
  MEMORY[0x24BDAC7A8](v70);
  *(&v77 - 2) = (uint64_t)&v95;
  v91[0] = v64;
  v91[1] = v63;
  v71 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v71, v91, partial apply for implicit closure #7 in __RKEntityInteractionManager.__performInteractions(matching:on:), &v77 - 4);
  swift_bridgeObjectRelease();
  swift_release();
  return v95;
}

uint64_t closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9[2];

  if (!(a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v6 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v6 >= 1)
  {
    v8 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](v8, a1);
      else
        swift_retain();
      ++v8;
      v9[0] = a2;
      v9[1] = a3;
      swift_retain();
      swift_retain();
      __RKEntityInteraction.fire(context:)(v9);
      swift_release();
      swift_release();
      swift_release();
    }
    while (v6 != v8);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(unint64_t a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  _StringGuts.grow(_:)(a2);
  v7._countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x800000021BE91D60;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  return 0;
}

uint64_t implicit closure #7 in __RKEntityInteractionManager.__performInteractions(matching:on:)(_BYTE *a1)
{
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  _StringGuts.grow(_:)(32);
  v2._object = (void *)0x800000021BE91D40;
  v2._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v2);
  if (*a1)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if (*a1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t __RKEntityInteractionManager.performTapInteraction(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  _QWORD *v10;
  __objc2_class_ro *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t *v23;
  __objc2_class_ro *v24;
  _QWORD *v25;
  Swift::String v26;
  Swift::String v27;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Parent;
  uint64_t v37;
  uint64_t result;
  char v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  Swift::Int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  NSString *v54;
  Class v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint64_t v60;
  _QWORD v61[2];
  __int128 v62;
  uint64_t v63;
  void *v64;
  void *v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  uint64_t v71;
  unint64_t v72;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = 91;
  v72 = 0xE100000000000000;
  v70._countAndFlagsBits = 0;
  v70._object = (void *)0xE000000000000000;
  v68 = v1;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v70);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v61[0] = v1;
  swift_release();
  v9 = (void *)v72;
  v63 = v71;
  swift_retain();
  swift_beginAccess();
  v10 = &unk_25519A000;
  v11 = &RKChangeSceneActionRuntimeTechnique;
  v12 = &static __Engine.customComponents;
  v64 = (void *)0x800000021BE91AE0;
  v65 = (void *)0x800000021BE91AC0;
  *(_QWORD *)&v13 = 136315394;
  v62 = v13;
  v61[1] = MEMORY[0x24BEE4AD8] + 8;
  v66 = v5;
  v67 = v9;
  if (static __RKEntityUUIDComponent.registration)
    goto LABEL_4;
LABEL_10:
  v21 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 1, 1, v21);
  swift_retain();
LABEL_11:
  outlined destroy of UUID?((uint64_t)v5);
  v22 = static os_log_type_t.info.getter();
  if (*(_QWORD *)&v11[23].flags != -1)
    swift_once();
  if (*((_BYTE *)v12 + 648) == 1)
  {
    v23 = v12;
    v24 = v11;
    v25 = v10;
    v70._countAndFlagsBits = 0;
    v70._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(91);
    v26._countAndFlagsBits = 0xD000000000000017;
    v26._object = v65;
    String.append(_:)(v26);
    v69 = a1;
    _print_unlocked<A, B>(_:_:)();
    v27._countAndFlagsBits = 0xD000000000000042;
    v27._object = v64;
    String.append(_:)(v27);
    countAndFlagsBits = v70._countAndFlagsBits;
    object = v70._object;
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v31 = Logger.logObject.getter();
    v32 = v22;
    if (os_log_type_enabled(v31, v22))
    {
      v33 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v70._countAndFlagsBits = v34;
      *(_DWORD *)v33 = v62;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, (unint64_t)v67, &v70._countAndFlagsBits);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v33 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v70._countAndFlagsBits);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v31, v32, "%s%s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      v35 = v34;
      v9 = v67;
      MEMORY[0x220772F44](v35, -1, -1);
      MEMORY[0x220772F44](v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v10 = v25;
    v11 = v24;
    v12 = v23;
    v5 = v66;
  }
  while (1)
  {
    Parent = REEntityGetParent();
    if (!Parent)
    {
      swift_release_n();
      v70._countAndFlagsBits = v63;
      v70._object = v9;
      v59 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v59, &v70._countAndFlagsBits);
      swift_bridgeObjectRelease();
      return 0;
    }
    v37 = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release_n();
      type metadata accessor for Entity();
      a1 = swift_dynamicCastClassUnconditional();
      if (!v10[60])
        goto LABEL_10;
      goto LABEL_4;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      break;
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
      swift_once();
    swift_beginAccess();
    if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v39 & 1) == 0))
    {
      swift_endAccess();
      v40 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v69 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v40, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v69;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent())
      goto LABEL_50;
    v42 = RECustomComponentGetObject();
    if (!v42)
      goto LABEL_50;
    v43 = *(unsigned __int8 **)v42;
    if (*(_QWORD *)(v42 + 8) || !v43)
    {
      result = swift_retain();
    }
    else
    {
      v44 = *v43;
      v45 = String.init(utf8String:)();
      if (v46)
        v47 = v45;
      else
        v47 = 0;
      if (v46)
        v48 = v46;
      else
        v48 = 0xE000000000000000;
      v43 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v44 == 42, v47, v48);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v43;
    }
    if (!v43)
      goto LABEL_56;
    swift_retain();
    v49 = String.init(utf8String:)();
    v51 = v50;
    swift_release();
    v52 = v51 ? v49 : 0;
    v53 = v51 ? v51 : 0xE000000000000000;
    v54 = (NSString *)MEMORY[0x220768C3C](v52, v53);
    swift_bridgeObjectRelease();
    v55 = NSClassFromString(v54);

    swift_release();
    if (!v55)
      goto LABEL_50;
    swift_getObjCClassMetadata();
    type metadata accessor for Entity();
    v56 = swift_dynamicCastMetatype();
    if (v56)
    {
      v57 = (*(uint64_t (**)(void))(v56 + 232))();
      v58 = *(_QWORD *)(v57 + 16);
      swift_retain();
      MEMORY[0x22076D160](v58, 0);
      *(_QWORD *)(v57 + 16) = v37;
      MEMORY[0x22076D160](v37, v57);
      swift_release_n();
      swift_release();
    }
    else
    {
LABEL_50:
      v57 = makeEntity(for:)(v37);
      swift_release_n();
    }
    a1 = v57;
    v9 = v67;
    if (!v10[60])
      goto LABEL_10;
LABEL_4:
    swift_retain();
    if (!REEntityGetCustomComponent() || !RECustomComponentGetObject())
    {
      v20 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
      goto LABEL_11;
    }
    UUID.init(uuid:)();
    v14 = type metadata accessor for UUID();
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v5, 0, 1, v14);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    v9 = v67;
    if (v16(v5, 1, v14) == 1)
      goto LABEL_11;
    outlined destroy of UUID?((uint64_t)v5);
    type metadata accessor for __RKEntityTapTrigger();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 24) = 0;
    swift_beginAccess();
    *(_QWORD *)(v17 + 24) = a1;
    swift_retain();
    swift_release();
    *(_WORD *)(v17 + 16) = 0;
    *(_BYTE *)(v17 + 18) = 0;
    swift_beginAccess();
    *(_BYTE *)(v17 + 16) = 0;
    v18 = __RKEntityInteractionManager.__performInteractions(matching:on:)(v17, 0);
    swift_release();
    if ((v18 & 1) != 0)
    {
      v70._countAndFlagsBits = v63;
      v70._object = v9;
      v60 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v60, &v70, partial apply for implicit closure #1 in __RKEntityInteractionManager.performTapInteraction(for:), a1);
      swift_bridgeObjectRelease();
      swift_release_n();
      return 1;
    }
    v70._countAndFlagsBits = v63;
    v70._object = v9;
    v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, &v70, partial apply for implicit closure #2 in __RKEntityInteractionManager.performTapInteraction(for:), a1);
  }
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in __RKEntityInteractionManager.performTapInteraction(for:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(71);
  v0._countAndFlagsBits = 0xD000000000000035;
  v0._object = (void *)0x800000021BE91CA0;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._object = (void *)0x800000021BE91CE0;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityInteractionManager.performTapInteraction(for:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(65);
  v0._object = (void *)0x800000021BE91D00;
  v0._countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x676E69797274202CLL;
  v1._object = (void *)0xEF746E6572617020;
  String.append(_:)(v1);
  return 0;
}

uint64_t __RKEntityInteractionManager.containsChangeSceneAction(action:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  type metadata accessor for __RKChangeSceneAction();
  if (swift_dynamicCastClass())
    return 1;
  type metadata accessor for __RKEntityActionGroup();
  v1 = swift_dynamicCastClass();
  if (!v1)
    return 0;
  v2 = v1;
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 112);
  if (!(v3 >> 62))
  {
    v0 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v0)
      goto LABEL_6;
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();
    return v0;
  }
LABEL_25:
  swift_retain();
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v0 = result;
  if (!result)
    goto LABEL_21;
LABEL_6:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x220769770](0, v3);
LABEL_9:
    v6 = __RKEntityInteractionManager.containsChangeSceneAction(action:)(v5);
    swift_release();
    if ((v6 & 1) != 0)
    {
      v0 = 1;
    }
    else
    {
      v7 = 0;
      v8 = v0 - 1;
      while (1)
      {
        v0 = v8 != v7;
        if (v8 == v7)
          break;
        v9 = v7 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v10 = MEMORY[0x220769770](v7 + 1, v3);
          if (__OFADD__(v9, 1))
            goto LABEL_23;
        }
        else
        {
          if (v9 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_24;
          v10 = *(_QWORD *)(v3 + 8 * v7 + 40);
          swift_retain();
          if (__OFADD__(v9, 1))
          {
LABEL_23:
            __break(1u);
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
        }
        v11 = __RKEntityInteractionManager.containsChangeSceneAction(action:)(v10);
        swift_release();
        ++v7;
        if ((v11 & 1) != 0)
          goto LABEL_21;
      }
    }
    goto LABEL_21;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(_QWORD *)(v3 + 32);
    swift_retain();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

unint64_t __RKEntityInteractionManager.interactions(matching:entities:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t result;
  os_log_type_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t inited;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[6];
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD v105[2];
  unint64_t v106;

  v98 = a2;
  v89 = a1;
  v105[0] = 91;
  v105[1] = 0xE100000000000000;
  v101 = 0;
  v102 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  v7 = 91;
  v106 = MEMORY[0x24BEE4AF8];
  v90 = 0xE100000000000000;
  v8 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v8, v105, partial apply for implicit closure #1 in __RKEntityInteractionManager.interactions(matching:entities:), v2);
  swift_beginAccess();
  v95 = v2;
  v9 = *(_QWORD *)(v2 + 64);
  if (v9 >> 62)
    goto LABEL_191;
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v11 = v90;
    if (!v10)
    {
LABEL_177:
      v79 = swift_bridgeObjectRelease();
      MEMORY[0x24BDAC7A8](v79);
      v81[2] = &v106;
      v103 = v7;
      v104 = v11;
      v80 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v80, &v103, partial apply for implicit closure #9 in __RKEntityInteractionManager.interactions(matching:entities:), v81);
      swift_bridgeObjectRelease();
      return v106;
    }
    v12 = 0;
    v96 = v9 & 0xC000000000000001;
    v85 = v9 & 0xFFFFFFFFFFFFFF8;
    v84 = v9 + 32;
    v13 = v98 & 0xFFFFFFFFFFFFFF8;
    v94 = v98 & 0xFFFFFFFFFFFFFF8;
    if (v98 < 0)
      v13 = v98;
    v81[5] = v13;
    v100 = v98 & 0xC000000000000001;
    v97 = (_QWORD *)(v98 + 32);
    v82 = xmmword_21BE50AD0;
    v91 = v7;
    v88 = v9;
    v87 = v10;
LABEL_9:
    if (!v96)
      break;
    v16 = MEMORY[0x220769770](v12, v9);
    v17 = __OFADD__(v12++, 1);
    if (!v17)
      goto LABEL_15;
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  if (v12 >= *(_QWORD *)(v85 + 16))
    goto LABEL_185;
  v16 = *(_QWORD *)(v84 + 8 * v12);
  swift_retain();
  v17 = __OFADD__(v12++, 1);
  if (v17)
    goto LABEL_179;
LABEL_15:
  v103 = v7;
  v104 = v11;
  v18 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v103, partial apply for implicit closure #2 in __RKEntityInteractionManager.interactions(matching:entities:), v16);
  swift_beginAccess();
  if ((*(_BYTE *)(v16 + 40) & 1) == 0)
  {
    v103 = v7;
    v104 = v11;
    v14 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v14, (uint64_t *)&v103);
    v103 = v7;
    v104 = v11;
    v15 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v15, &v103, partial apply for implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:), v16);
    swift_release();
    goto LABEL_8;
  }
  swift_beginAccess();
  v19 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v16 + 16) + 184);
  swift_retain();
  LOBYTE(v19) = v19(v89);
  swift_release();
  if ((v19 & 1) == 0)
  {
    v103 = v7;
    v104 = v11;
    v28 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v28, (uint64_t *)&v103);
    v103 = v7;
    v104 = v11;
    v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v103, partial apply for implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:), v16);
    swift_release();
    v9 = v88;
    v10 = v87;
    goto LABEL_8;
  }
  v20 = v106;
  if (v106 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9)
      goto LABEL_22;
  }
  else
  {
    v9 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v9)
      goto LABEL_22;
  }
  if ((v20 & 0xC000000000000001) != 0)
  {
    v39 = MEMORY[0x220769770](0, v20);
    swift_unknownObjectRelease();
    if (v39 == v16)
    {
LABEL_41:
      swift_bridgeObjectRelease_n();
      v11 = v90;
      v103 = v7;
      v104 = v90;
      v34 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v34, (uint64_t *)&v103);
      v103 = v7;
      v104 = v90;
      v27 = static os_log_type_t.info.getter();
      goto LABEL_171;
    }
  }
  else if (*(_QWORD *)(v20 + 32) == v16)
  {
    goto LABEL_41;
  }
  if (v9 != 1)
  {
    v30 = 1;
    do
    {
      if ((v20 & 0xC000000000000001) != 0)
      {
        v31 = MEMORY[0x220769770](v30, v20);
        v17 = __OFADD__(v30++, 1);
        if (v17)
          goto LABEL_182;
        v32 = v31;
        swift_unknownObjectRelease();
        if (v32 == v16)
          goto LABEL_41;
      }
      else
      {
        if (__OFADD__(v30, 1))
          goto LABEL_186;
        v33 = *(_QWORD *)(v20 + 32 + 8 * v30++);
        if (v33 == v16)
          goto LABEL_41;
      }
    }
    while (v30 != v9);
  }
LABEL_22:
  swift_bridgeObjectRelease_n();
  v21 = v98;
  v99 = (unint64_t)v98 >> 62;
  v22 = v94;
  if (!v98)
    goto LABEL_57;
  if (v99)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9)
      goto LABEL_56;
  }
  else
  {
    v9 = *(_QWORD *)(v94 + 16);
    swift_retain();
    if (!v9)
    {
LABEL_56:
      swift_release();
      goto LABEL_57;
    }
  }
  v9 = v95;
  v23 = __RKEntityInteractionManager.targetEntity(for:)();
  if (!v23)
    goto LABEL_56;
  v9 = v23;
  if (v99)
  {
    swift_bridgeObjectRetain_n();
    result = _CocoaArrayWrapper.endIndex.getter();
    v24 = result;
    if (!result)
      goto LABEL_31;
  }
  else
  {
    v24 = *(_QWORD *)(v94 + 16);
    result = swift_bridgeObjectRetain_n();
    if (!v24)
      goto LABEL_31;
  }
  if (v100)
  {
    v78 = MEMORY[0x220769770](0, v98);
    result = swift_unknownObjectRelease();
    v52 = v78 == v9;
    v21 = v98;
    if (!v52)
    {
LABEL_30:
      if (v24 != 1)
      {
        v35 = 1;
        do
        {
          if (v100)
          {
            v36 = MEMORY[0x220769770](v35, v21);
            v17 = __OFADD__(v35++, 1);
            if (v17)
              goto LABEL_189;
            v37 = v36;
            result = swift_unknownObjectRelease();
            if (v37 == v9)
              goto LABEL_50;
          }
          else
          {
            if (__OFADD__(v35, 1))
              goto LABEL_194;
            v38 = v97[v35++];
            if (v38 == v9)
              goto LABEL_50;
          }
        }
        while (v35 != v24);
      }
LABEL_31:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      v11 = v90;
      v103 = v7;
      v104 = v90;
      v26 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v26, (uint64_t *)&v103);
      v103 = v7;
      v104 = v90;
      v27 = static os_log_type_t.info.getter();
      goto LABEL_171;
    }
  }
  else if (*v97 != v9)
  {
    goto LABEL_30;
  }
LABEL_50:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease_n();
  v22 = v94;
LABEL_57:
  v40 = *(_QWORD *)(v16 + 16);
  type metadata accessor for __RKEntityTriggerGroup();
  v83 = v40;
  v41 = swift_dynamicCastClass();
  if (!v41)
    goto LABEL_99;
  v42 = v41;
  swift_beginAccess();
  v43 = *(_QWORD *)(v42 + 24);
  if (!(v43 >> 62))
  {
    v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v44)
      goto LABEL_60;
    goto LABEL_98;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v44 = _CocoaArrayWrapper.endIndex.getter();
  if (v44)
  {
LABEL_60:
    v45 = 0;
    v7 = v43 & 0xC000000000000001;
    v93 = v43 & 0xFFFFFFFFFFFFFF8;
    v92 = v43 + 32;
    v86 = v43;
    while (1)
    {
      if (v7)
      {
        MEMORY[0x220769770](v45, v43);
        v17 = __OFADD__(v45++, 1);
        if (v17)
          goto LABEL_178;
      }
      else
      {
        if (v45 >= *(_QWORD *)(v93 + 16))
          goto LABEL_181;
        swift_retain();
        v17 = __OFADD__(v45++, 1);
        if (v17)
        {
LABEL_178:
          __break(1u);
          goto LABEL_179;
        }
      }
      if (!v21)
        goto LABEL_61;
      if (v99)
      {
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v9)
          goto LABEL_61;
LABEL_71:
        v9 = v95;
        v46 = __RKEntityInteractionManager.targetEntity(for:)();
        if (!v46)
          goto LABEL_61;
        v9 = v46;
        if (v99)
        {
          swift_bridgeObjectRetain_n();
          v47 = _CocoaArrayWrapper.endIndex.getter();
          if (!v47)
            goto LABEL_77;
        }
        else
        {
          v47 = *(_QWORD *)(v22 + 16);
          swift_bridgeObjectRetain_n();
          if (!v47)
            goto LABEL_77;
        }
        if (v100)
        {
          v54 = MEMORY[0x220769770](0, v21);
          swift_unknownObjectRelease();
          v52 = v54 == v9;
          v21 = v98;
          if (v52)
          {
LABEL_87:
            swift_release();
            swift_release();
            swift_bridgeObjectRelease_n();
            goto LABEL_88;
          }
        }
        else if (*v97 == v9)
        {
          goto LABEL_87;
        }
        if (v47 != 1)
        {
          v49 = 1;
          do
          {
            if (v100)
            {
              v50 = MEMORY[0x220769770](v49, v21);
              v17 = __OFADD__(v49++, 1);
              if (v17)
                goto LABEL_180;
              v51 = v50;
              swift_unknownObjectRelease();
              v52 = v51 == v9;
              v21 = v98;
              if (v52)
                goto LABEL_87;
            }
            else
            {
              if (__OFADD__(v49, 1))
                goto LABEL_183;
              v53 = v97[v49++];
              if (v53 == v9)
                goto LABEL_87;
            }
          }
          while (v49 != v47);
        }
LABEL_77:
        swift_release();
        swift_bridgeObjectRelease_n();
        v103 = v91;
        v104 = v90;
        v48 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v48, (uint64_t *)&v103);
        swift_release();
LABEL_88:
        v22 = v94;
        v43 = v86;
        if (v45 == v44)
          break;
      }
      else
      {
        v9 = *(_QWORD *)(v22 + 16);
        if (v9)
          goto LABEL_71;
LABEL_61:
        swift_release();
        if (v45 == v44)
          break;
      }
    }
  }
LABEL_98:
  swift_release();
  swift_bridgeObjectRelease();
  v7 = v91;
LABEL_99:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v82;
  *(_QWORD *)(inited + 32) = v16;
  v103 = inited;
  specialized Array._endMutation()();
  v56 = v103;
  v103 = MEMORY[0x24BEE4AF8];
  result = swift_retain();
  if ((v56 & 0xC000000000000001) != 0)
  {
    v57 = MEMORY[0x220769770](0, v56);
    goto LABEL_103;
  }
  if (*(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v57 = *(_QWORD *)(v56 + 32);
    swift_retain();
LABEL_103:
    swift_beginAccess();
    type metadata accessor for __RKEntityActionGroup();
    v58 = swift_dynamicCastClass();
    v59 = swift_retain();
    if (!v58)
    {
      MEMORY[0x220768F0C](v59);
      if (*(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      goto LABEL_122;
    }
    v92 = v57;
    v93 = v56;
    v60 = swift_retain();
    MEMORY[0x220768F0C](v60);
    if (*(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    result = __RKEntityActionGroup.allActions()();
    v61 = result;
    if (result >> 62)
    {
      result = _CocoaArrayWrapper.endIndex.getter();
      v62 = result;
      if (result)
        goto LABEL_108;
    }
    else
    {
      v62 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v62)
      {
LABEL_108:
        if (v62 < 1)
          goto LABEL_193;
        v63 = 0;
        do
        {
          if ((v61 & 0xC000000000000001) != 0)
            MEMORY[0x220769770](v63, v61);
          else
            swift_retain();
          v64 = swift_retain();
          MEMORY[0x220768F0C](v64);
          if (*(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          ++v63;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
        }
        while (v62 != v63);
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v21 = v98;
    v7 = v91;
    v22 = v94;
LABEL_122:
    v9 = v103;
    swift_bridgeObjectRelease();
    if (!v21)
      goto LABEL_168;
    if (v99)
    {
      swift_bridgeObjectRetain();
      v76 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v76)
        goto LABEL_168;
    }
    else if (!*(_QWORD *)(v22 + 16))
    {
      goto LABEL_168;
    }
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      v65 = _CocoaArrayWrapper.endIndex.getter();
      if (!v65)
      {
LABEL_167:
        swift_bridgeObjectRelease();
LABEL_168:
        swift_bridgeObjectRelease();
        v77 = swift_retain();
        MEMORY[0x220768F0C](v77);
        if (*(_QWORD *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v11 = v90;
        v103 = v7;
        v104 = v90;
        v27 = static os_log_type_t.info.getter();
        goto LABEL_171;
      }
    }
    else
    {
      v65 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v65)
        goto LABEL_167;
    }
    v66 = 0;
    v92 = v9 & 0xFFFFFFFFFFFFFF8;
    v86 = v9 + 32;
    v93 = v65;
    while (1)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x220769770](v66, v9);
        v17 = __OFADD__(v66++, 1);
        if (v17)
          goto LABEL_188;
      }
      else
      {
        if (v66 >= *(_QWORD *)(v92 + 16))
          goto LABEL_190;
        v7 = *(_QWORD *)(v86 + 8 * v66);
        swift_retain();
        v17 = __OFADD__(v66++, 1);
        if (v17)
          goto LABEL_188;
      }
      swift_beginAccess();
      v67 = *(_QWORD *)(v7 + 16);
      if (v67)
      {
        if (v99)
        {
          swift_bridgeObjectRetain_n();
          swift_retain();
          v68 = _CocoaArrayWrapper.endIndex.getter();
          if (!v68)
            goto LABEL_163;
        }
        else
        {
          v68 = *(_QWORD *)(v22 + 16);
          swift_bridgeObjectRetain_n();
          swift_retain();
          if (!v68)
            goto LABEL_163;
        }
        if (!v100)
        {
          if (*v97 == v67)
            goto LABEL_128;
          if (v68 == 1)
            goto LABEL_163;
          if (*(_QWORD *)(v21 + 40) == v67)
            goto LABEL_128;
LABEL_144:
          if (v68 != 2)
          {
            v69 = 2;
            do
            {
              if (v100)
              {
                v70 = MEMORY[0x220769770](v69, v21);
                v17 = __OFADD__(v69++, 1);
                if (v17)
                  goto LABEL_184;
                v71 = v70;
                swift_unknownObjectRelease();
                v52 = v71 == v67;
                v21 = v98;
                if (v52)
                  goto LABEL_154;
              }
              else
              {
                if (__OFADD__(v69, 1))
                  goto LABEL_187;
                v72 = v97[v69++];
                if (v72 == v67)
                {
LABEL_154:
                  swift_release();
                  v22 = v94;
                  goto LABEL_129;
                }
              }
            }
            while (v69 != v68);
          }
LABEL_163:
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release();
          v7 = v91;
          v11 = v90;
          v103 = v91;
          v104 = v90;
          v75 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v75, (uint64_t *)&v103);
          v103 = v91;
          v104 = v90;
          v27 = static os_log_type_t.info.getter();
LABEL_171:
          specialized InteractionsLogger.log(_:_:)(v27, &v103, partial apply for implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:), v16);
          swift_release();
          v9 = v88;
          v10 = v87;
LABEL_8:
          if (v12 == v10)
            goto LABEL_177;
          goto LABEL_9;
        }
        v73 = MEMORY[0x220769770](0, v21);
        swift_unknownObjectRelease();
        if (v73 != v67)
        {
          if (v68 == 1)
            goto LABEL_163;
          v74 = MEMORY[0x220769770](1, v98);
          swift_unknownObjectRelease();
          v52 = v74 == v67;
          v21 = v98;
          if (!v52)
            goto LABEL_144;
LABEL_128:
          swift_release();
          goto LABEL_129;
        }
        swift_release();
        v21 = v98;
LABEL_129:
        swift_bridgeObjectRelease_n();
        v65 = v93;
      }
      swift_release();
      v7 = v91;
      if (v66 == v65)
        goto LABEL_167;
    }
  }
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in __RKEntityInteractionManager.interactions(matching:entities:)(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(29);
  v2._countAndFlagsBits = 0x72656469736E6F43;
  v2._object = (void *)0xEC00000020676E69;
  String.append(_:)(v2);
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 64) >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x63617265746E6920;
  v4._object = (void *)0xEF2973286E6F6974;
  String.append(_:)(v4);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(19);
  v0._object = (void *)0x800000021BE91E00;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t implicit closure #9 in __RKEntityInteractionManager.interactions(matching:entities:)(_QWORD *a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(36);
  v2._countAndFlagsBits = 0x6E696E7275746552;
  v2._object = (void *)0xEA00000000002067;
  String.append(_:)(v2);
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000021BE91DE0;
  v4._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  return 0;
}

uint64_t __RKEntityInteractionManager.targetEntity(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for __RKEntityCollisionTrigger();
  v0 = swift_dynamicCastClass();
  if (!v0)
  {
    type metadata accessor for __RKEntityProximityTrigger();
    v0 = swift_dynamicCastClass();
    if (!v0)
    {
      type metadata accessor for __RKEntityTapTrigger();
      v0 = swift_dynamicCastClass();
      if (!v0)
      {
        type metadata accessor for __RKEntityTriggerGroup();
        v4 = swift_dynamicCastClass();
        if (v4)
        {
          v5 = v4;
          swift_beginAccess();
          v6 = *(_QWORD *)(v5 + 24);
          if (v6 >> 62)
            goto LABEL_21;
          v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_retain();
          swift_bridgeObjectRetain();
          for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter())
          {
            v8 = 4;
            while (1)
            {
              v9 = v8 - 4;
              if ((v6 & 0xC000000000000001) == 0)
                break;
              v10 = MEMORY[0x220769770](v8 - 4, v6);
              v11 = v8 - 3;
              if (__OFADD__(v9, 1))
                goto LABEL_20;
LABEL_15:
              v2 = __RKEntityInteractionManager.targetEntity(for:)(v10);
              swift_release();
              if (v2)
              {
                swift_release();
                swift_bridgeObjectRelease();
                return v2;
              }
              ++v8;
              if (v11 == v7)
                goto LABEL_17;
            }
            v10 = *(_QWORD *)(v6 + 8 * v8);
            swift_retain();
            v11 = v8 - 3;
            if (!__OFADD__(v9, 1))
              goto LABEL_15;
LABEL_20:
            __break(1u);
LABEL_21:
            swift_retain();
            swift_bridgeObjectRetain();
          }
LABEL_17:
          swift_release();
          swift_bridgeObjectRelease();
        }
        return 0;
      }
    }
  }
  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 24);
  swift_retain();
  return v2;
}

uint64_t __RKEntityInteractionManager.action(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for __RKEntityAction();
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 40);
  swift_retain();
  static __RKEntityAction.action(for:entityLookupTable:)(a1, v3);
  v5 = v4;
  swift_release();
  return v5;
}

void static __RKEntityAction.action(for:entityLookupTable:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t started;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD);
  char *v43;
  _QWORD v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v77 = a2;
  v78 = a1;
  v67 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x24BDAC7A8](v67);
  v68 = (char *)v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x24BDAC7A8](v61);
  v63 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v60);
  v66 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x24BDAC7A8](v62);
  v65 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v69);
  v70 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v59);
  v64 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x24BDAC7A8](v56);
  v58 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x24BDAC7A8](v57);
  v74 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x24BDAC7A8](v54);
  v55 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  v76 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v71 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x24BDAC7A8](v46);
  v51 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x24BDAC7A8](v47);
  v53 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v45);
  v50 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for __RKEntityHideActionArguments(0);
  v17 = MEMORY[0x24BDAC7A8](v72);
  v44[7] = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v52 = (char *)v44 - v19;
  v73 = type metadata accessor for __RKEntityShowActionArguments(0);
  v20 = MEMORY[0x24BDAC7A8](v73);
  v49 = (char *)v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v48 = (char *)v44 - v22;
  v23 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x24BDAC7A8](v23);
  v44[5] = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v25);
  v44[4] = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v44[3] = (char *)v44 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v44[1] = (char *)v44 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v44[6] = (char *)v44 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v44[0] = (char *)v44 - v35;
  MEMORY[0x24BDAC7A8](v34);
  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v37 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v37);
  v38 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v38);
  v39 = type metadata accessor for __RKEntityActionSpecification(0);
  v40 = MEMORY[0x24BDAC7A8](v39);
  MEMORY[0x24BDAC7A8](v40);
  outlined init with copy of __RKEntityActionSpecification(v78, (uint64_t)v44 - v41, v42);
  v43 = (char *)&loc_21BD642AC + dword_21BD659DC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BD642BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 - 440);
  outlined init with take of __RKEntityActionSpecification(v0, v2, type metadata accessor for __RKEntityAudioActionArguments);
  v3 = __RKEntityLookupTable.entity(for:)(v2);
  v4 = *(int **)(v1 - 480);
  v5 = v4[5];
  v6 = *(unsigned __int8 *)(v2 + v4[6]);
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *(_BYTE *)(v1 - 168) = v6;
  v7 = *(_QWORD *)(v2 + v5);
  v8 = *(_QWORD *)(v2 + v5 + 8);
  v9 = v2 + v4[7];
  if (*(_BYTE *)(v9 + 8))
    v10 = 1.0;
  else
    v10 = *(double *)v9;
  v11 = *(_BYTE *)(v2 + v4[8]) & 1;
  v12 = v4[10];
  v13 = *(unsigned __int8 *)(v2 + v4[9]);
  if (v13 == 3)
    LOBYTE(v13) = 0;
  *(_BYTE *)(v1 - 192) = v13;
  v14 = *(unsigned __int8 *)(v2 + v12);
  if (v14 == 3)
    LOBYTE(v14) = 1;
  *(_BYTE *)(v1 - 137) = v14;
  type metadata accessor for __RKEntityAudioAction();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v15 = __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(v3, (char *)(v1 - 168), v7, v8, v11, (char *)(v1 - 192), (char *)(v1 - 137), v10);
  outlined destroy of __RKEntityActionSpecification(v2, type metadata accessor for __RKEntityAudioActionArguments);
  return v15;
}

void sub_21BD65238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v1 - 296);
  outlined init with take of __RKEntityActionSpecification(v0, v2, type metadata accessor for __RKEntityPlayTimelineActionArguments);
  v3 = __RKEntityLookupTable.entity(for:)(v2);
  v4 = *(int **)(v1 - 304);
  v5 = __RKEntityLookupTable.entity(for:)(v2 + v4[5]);
  v6 = (uint64_t *)(v2 + v4[6]);
  v8 = *v6;
  v7 = v6[1];
  v9 = *(_QWORD *)(v1 - 520);
  outlined init with copy of UUID?(v2 + v4[7], v9);
  v10 = *(_QWORD *)(v1 - 240);
  v11 = *(_QWORD *)(v1 - 232);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    swift_bridgeObjectRetain();
    v12 = 0;
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    *(_QWORD *)(v1 - 208) = v8;
    v14 = v5;
    v15 = v3;
    v16 = *(_QWORD *)(v1 - 272);
    v13(v16, v9, v10);
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = __RKEntityLookupTable.entity(for:)(v16);
    v17 = v16;
    v3 = v15;
    v5 = v14;
    v8 = *(_QWORD *)(v1 - 208);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v17, v10);
    swift_release();
  }
  v18 = (uint64_t *)(v2 + v4[8]);
  v19 = *v18;
  v20 = v18[1];
  type metadata accessor for __RKEntityPlayTimelineAction();
  swift_allocObject();
  swift_bridgeObjectRetain();
  __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(v3, v5, v8, v7, v12, v19, v20);
  JUMPOUT(0x21BD65204);
}

void sub_21BD652CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v1 - 376);
  outlined init with take of __RKEntityActionSpecification(v0, v2, type metadata accessor for __RKEntityForceActionArguments);
  *(_QWORD *)(v1 - 208) = __RKEntityLookupTable.entity(for:)(v2);
  v3 = *(_QWORD *)(v1 - 392);
  v4 = *(int *)(v3 + 20);
  v5 = *(int *)(v3 + 24);
  v6 = (uint64_t *)(v2 + v4);
  v7 = *v6;
  v8 = v6[1];
  v9 = *((_BYTE *)v6 + 16);
  v10 = *(_QWORD *)(v2 + v5);
  v11 = *(_QWORD *)(v2 + v5 + 8);
  v12 = *(_BYTE *)(v2 + v5 + 16);
  type metadata accessor for __RKEntityForceAction();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 112) = 0;
  *(_QWORD *)(v13 + 120) = 0;
  *(_BYTE *)(v13 + 128) = 1;
  *(_QWORD *)(v13 + 144) = 0;
  *(_QWORD *)(v13 + 152) = 0;
  *(_BYTE *)(v13 + 160) = 1;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_QWORD *)(v13 + 200) = 0;
  swift_beginAccess();
  *(_QWORD *)(v13 + 112) = v7;
  *(_QWORD *)(v13 + 120) = v8;
  *(_BYTE *)(v13 + 128) = v9;
  swift_beginAccess();
  *(_QWORD *)(v13 + 144) = v10;
  *(_QWORD *)(v13 + 152) = v11;
  *(_BYTE *)(v13 + 160) = v12;
  __RKEntityAction.init(targetEntity:)(*(_QWORD *)(v1 - 208));
  JUMPOUT(0x21BD65204);
}

void sub_21BD653C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  float v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  outlined init with take of __RKEntityActionSpecification(v0, v1, type metadata accessor for __RKEntityStartAnimateActionArguments);
  v5 = __RKEntityLookupTable.entity(for:)(v1);
  v6 = v3[6];
  *(_QWORD *)(v4 - 208) = *(_QWORD *)(v1 + v3[5]);
  v7 = *(double *)(v1 + v3[7]);
  v8 = *(double *)(v1 + v3[8]);
  v9 = v3[12];
  v10 = *(float *)(v1 + v3[11]);
  v11 = *(_BYTE *)(v1 + v3[10]);
  v12 = *(_BYTE *)(v1 + v3[9]);
  *(_BYTE *)(v4 - 168) = *(_BYTE *)(v1 + v6);
  v13 = *(_BYTE *)(v1 + v9);
  v14 = v3[14];
  v15 = v1 + v3[13];
  if (*(_BYTE *)(v15 + 8))
    v16 = 1.0;
  else
    v16 = *(double *)v15;
  v17 = v1 + v14;
  outlined init with copy of UUID?(v1 + v14, v2);
  v18 = *(_QWORD *)(v4 - 240);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 232) + 48);
  v20 = v19(v2, 1, v18);
  outlined destroy of UUID?(v2);
  if (v20 == 1)
  {
    v21 = 0;
  }
  else
  {
    v22 = *(_QWORD *)(v4 - 544);
    outlined init with copy of UUID?(v17, v22);
    if (v19(v22, 1, v18) == 1)
    {
      __break(1u);
      JUMPOUT(0x21BD659DCLL);
    }
    v21 = __RKEntityLookupTable.entity(for:)(v22);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 232) + 8))(v22, v18);
  }
  v23 = *(_QWORD *)(v4 - 208);
  type metadata accessor for __RKEntityStartAnimateAction();
  swift_allocObject();
  __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v5, v23, (char *)(v4 - 168), v11, v12, v13 & 1, v21, v7, v8, v10, v16);
  JUMPOUT(0x21BD65204);
}

void sub_21BD65480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 - 312);
  outlined init with take of __RKEntityActionSpecification(v0, v2, type metadata accessor for __RKEntitySpinActionArguments);
  v3 = __RKEntityLookupTable.entity(for:)(v2);
  v4 = *(int **)(v1 - 360);
  v5 = v4[6];
  v6 = v2 + v4[5];
  if (*(_BYTE *)(v6 + 4))
    v7 = 1.0;
  else
    v7 = *(float *)v6;
  if (*(_BYTE *)(v2 + v5 + 4))
    v8 = 1.0;
  else
    v8 = *(float *)(v2 + v5);
  v9 = *(_BYTE *)(v2 + v4[7]) & 1;
  v10 = v2 + v4[8];
  if ((*(_BYTE *)(v10 + 16) & 1) != 0)
    v11 = *(_OWORD *)&zmmword_21BE41220[16];
  else
    v11 = *(_OWORD *)v10;
  *(_OWORD *)(v1 - 208) = v11;
  type metadata accessor for __RKEntitySpinAction();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 152) = 0;
  *(_BYTE *)(v12 + 160) = 1;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(float *)(v12 + 108) = v7;
  *(float *)(v12 + 112) = v8;
  *(_OWORD *)(v12 + 128) = *(_OWORD *)(v1 - 208);
  *(_BYTE *)(v12 + 144) = v9;
  __RKEntityAction.init(targetEntity:)(v3);
  JUMPOUT(0x21BD65204);
}

uint64_t closure #1 in __RKEntityInteractionManager.entitiesWithInteractionSpecifications()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Entity;
  uint64_t Object;
  unsigned __int8 *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSString *v18;
  Class v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = RESceneGetComponentsOfCustomType();
  if (v1 < 0)
    goto LABEL_37;
  v2 = result;
  v3 = v1;
  result = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    while (1)
    {
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        if (!REEntityGetCustomComponent())
          goto LABEL_32;
        Object = RECustomComponentGetObject();
        if (!Object)
          goto LABEL_32;
        v6 = *(unsigned __int8 **)Object;
        if (*(_QWORD *)(Object + 8))
          v7 = 1;
        else
          v7 = v6 == 0;
        if (v7)
        {
          result = swift_retain();
        }
        else
        {
          v8 = *v6;
          v9 = String.init(utf8String:)();
          if (v10)
            v11 = v9;
          else
            v11 = 0;
          if (v10)
            v12 = v10;
          else
            v12 = 0xE000000000000000;
          v6 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
          swift_bridgeObjectRelease();
          type metadata accessor for IntrospectionDataCleanupHelper();
          result = swift_allocObject();
          *(_QWORD *)(result + 16) = v6;
        }
        if (!v6)
          goto LABEL_38;
        swift_retain();
        v13 = String.init(utf8String:)();
        v15 = v14;
        swift_release();
        v16 = v15 ? v13 : 0;
        v17 = v15 ? v15 : 0xE000000000000000;
        v18 = (NSString *)MEMORY[0x220768C3C](v16, v17);
        swift_bridgeObjectRelease();
        v19 = NSClassFromString(v18);

        swift_release();
        if (!v19)
          goto LABEL_32;
        swift_getObjCClassMetadata();
        type metadata accessor for Entity();
        v20 = swift_dynamicCastMetatype();
        if (v20)
        {
          v21 = (*(uint64_t (**)(void))(v20 + 232))();
          v22 = *(_QWORD *)(v21 + 16);
          swift_retain();
          MEMORY[0x22076D160](v22, 0);
          *(_QWORD *)(v21 + 16) = Entity;
          MEMORY[0x22076D160](Entity, v21);
          swift_release();
        }
        else
        {
LABEL_32:
          makeEntity(for:)(Entity);
        }
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v2 += 8;
      if (!--v3)
        return v23;
    }
  }
  return result;
}

uint64_t protocol witness for __RKEntityInteractionService.automaticallyInvokesStartTrigger.setter in conformance __RKEntityInteractionManager(char a1)
{
  uint64_t v1;
  char v3;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 26);
  *(_BYTE *)(v1 + 26) = a1;
  return __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(v3);
}

void (*protocol witness for __RKEntityInteractionService.automaticallyInvokesStartTrigger.modify in conformance __RKEntityInteractionManager(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = __RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void static __RKEntityTrigger.trigger(for:entityLookupTable:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v2 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)&v8 - v5, v6);
  v7 = (char *)sub_21BD65E58 + 4 * byte_21BE78350[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BD65E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
  v5 = *(_DWORD *)(v0 + *(int *)(v4 + 48));
  v6 = *(_BYTE *)(v0 + *(int *)(v4 + 64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v0, v3);
  v7 = __RKEntityLookupTable.entity(for:)(v1);
  type metadata accessor for __RKEntityProximityTrigger();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 24) = 0;
  *(_WORD *)(v8 + 37) = 0;
  swift_beginAccess();
  *(_QWORD *)(v8 + 24) = v7;
  swift_retain();
  swift_release();
  *(_DWORD *)(v8 + 32) = v5;
  *(_BYTE *)(v8 + 36) = v6;
  swift_release();
  *(_WORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 18) = 0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return v8;
}

Swift::Bool __swiftcall Entity.applyTapForBehaviors()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t SceneNullable;
  uint64_t v7;
  id v8;
  os_log_type_t v9;
  char v10;
  os_log_type_t v11;
  uint64_t v13;
  unint64_t v14;

  v1 = v0;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8285;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_release();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
    goto LABEL_8;
  v7 = SceneNullable;
  v8 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v8)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v7);
  }
  Scene.__interactionService.getter();
  type metadata accessor for __RKEntityInteractionManager();
  if (!swift_dynamicCastClass())
  {
    swift_release();
    swift_unknownObjectRelease();
LABEL_8:
    v13 = 91;
    v14 = 0xE100000000000000;
    v11 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v11, &v13);
    swift_bridgeObjectRelease();
    v10 = 0;
    return v10 & 1;
  }
  v13 = 91;
  v14 = 0xE100000000000000;
  v9 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v9, &v13);
  swift_bridgeObjectRelease();
  v10 = __RKEntityInteractionManager.performTapInteraction(for:)(v1);
  swift_release();
  swift_unknownObjectRelease();
  return v10 & 1;
}

uint64_t implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(17);
  v0._countAndFlagsBits = 0x65746E6920646E45;
  v0._object = (void *)0xEF206E6F69746372;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a2;
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v20 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BEE4AF8];
  v9 = *(_QWORD *)(a1 + 16);
  v17 = a1;
  if (v9)
  {
    v10 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v18 = *(_QWORD *)(v4 + 72);
    v19 = v11;
    swift_bridgeObjectRetain();
    while (1)
    {
      v19(v8, v10, v3);
      v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v12(v8, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
        break;
      v13 = (uint64_t)v20;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v20, v8, v3);
      v14 = __RKEntityLookupTable.entity(for:)(v13);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v13, v3);
      if (v14)
      {
        MEMORY[0x220768F0C](v15);
        if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += v18;
      if (!--v9)
        goto LABEL_10;
    }
  }
  else
  {
    v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
LABEL_10:
    v12(v8, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t specialized __RKEntityInteractionManager.actions(for:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = a1;
  v17 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_35;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = 0;
    v15 = v1;
    v16 = v1 & 0xC000000000000001;
    v13 = v1 & 0xFFFFFFFFFFFFFF8;
    v14 = v2;
    while (1)
    {
      if (v16)
      {
        MEMORY[0x220769770](v3, v1);
        v4 = __OFADD__(v3++, 1);
        if (v4)
          break;
        goto LABEL_11;
      }
      if (v3 >= *(_QWORD *)(v13 + 16))
        goto LABEL_34;
      swift_retain();
      v4 = __OFADD__(v3++, 1);
      if (v4)
        break;
LABEL_11:
      swift_beginAccess();
      type metadata accessor for __RKEntityActionGroup();
      v5 = swift_dynamicCastClass();
      v6 = swift_retain();
      if (v5)
      {
        v7 = swift_retain();
        MEMORY[0x220768F0C](v7);
        if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v8 = __RKEntityActionGroup.allActions()();
        if (v8 >> 62)
        {
          v9 = _CocoaArrayWrapper.endIndex.getter();
          if (!v9)
            goto LABEL_4;
        }
        else
        {
          v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v9)
            goto LABEL_4;
        }
        if (v9 < 1)
          goto LABEL_33;
        v10 = 0;
        do
        {
          if ((v8 & 0xC000000000000001) != 0)
            MEMORY[0x220769770](v10, v8);
          else
            swift_retain();
          v11 = swift_retain();
          MEMORY[0x220768F0C](v11);
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          ++v10;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
        }
        while (v9 != v10);
LABEL_4:
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v2 = v14;
        v1 = v15;
        if (v3 == v14)
          goto LABEL_31;
      }
      else
      {
        MEMORY[0x220768F0C](v6);
        if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
        if (v3 == v2)
        {
LABEL_31:
          swift_bridgeObjectRelease();
          return v17;
        }
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21BD66A4C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BD66A70()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)()
{
  return closure #2 in __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)();
}

uint64_t partial apply for implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset()
{
  uint64_t v0;

  return implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  uint64_t v0;

  return implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(_QWORD *)(v0 + 16), 30, 0x20646E756F46, (void *)0xE600000000000000);
}

uint64_t partial apply for implicit closure #4 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  uint64_t v0;

  return implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(_QWORD *)(v0 + 16), 30, 0x207472617453, (void *)0xE600000000000000);
}

uint64_t partial apply for implicit closure #6 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  uint64_t v0;

  return implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(_QWORD *)(v0 + 16), 28, 543452741, (void *)0xE400000000000000);
}

uint64_t partial apply for implicit closure #7 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  uint64_t v0;

  return implicit closure #7 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(_BYTE **)(v0 + 16));
}

uint64_t sub_21BD66B38()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  uint64_t v0;

  return closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for implicit closure #2 in __RKEntityInteractionManager.performTapInteraction(for:)()
{
  return implicit closure #2 in __RKEntityInteractionManager.performTapInteraction(for:)();
}

uint64_t partial apply for implicit closure #1 in __RKEntityInteractionManager.performTapInteraction(for:)()
{
  return implicit closure #1 in __RKEntityInteractionManager.performTapInteraction(for:)();
}

uint64_t type metadata accessor for __RKEntityInteractionManager()
{
  return objc_opt_self();
}

uint64_t sub_21BD66BA8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

uint64_t sub_21BD66BEC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 24) = v2;
  return result;
}

uint64_t sub_21BD66C2C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 25);
  return result;
}

uint64_t sub_21BD66C70(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 25) = v2;
  return result;
}

uint64_t sub_21BD66CB0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 26);
  return result;
}

uint64_t sub_21BD66CF4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(_BYTE *)(v3 + 26);
  *(_BYTE *)(v3 + 26) = v2;
  return __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(v4);
}

uint64_t sub_21BD66D3C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + 27);
  return result;
}

_BYTE *sub_21BD66D4C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 27) = *result;
  return result;
}

uint64_t sub_21BD66D5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_21BD66DA8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_retain();
}

uint64_t sub_21BD66DF4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 56);
  return swift_retain();
}

uint64_t sub_21BD66E40@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 64);
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of __RKEntityInteractionService.areInteractionsEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.areInteractionsEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.areInteractionsEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.customTriggerIdentifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.customActionIdentifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.setCustomActionHandler(for:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.__performInteractions(matchingCustomTriggerWithIdentifier:with:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.__setCustomPackageActionHandler(withIdentifier:actionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.automaticallyInvokesStartTrigger.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.automaticallyInvokesStartTrigger.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.automaticallyInvokesStartTrigger.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t method lookup function for __RKEntityInteractionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.interactionsDisabledForTests.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.interactionsDisabledForTests.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.interactionsDisabledForTests.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.customTriggerIdentifiers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.customActionIdentifiers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.setCustomActionHandler(for:handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__performInteractions(matchingCustomTriggerWithIdentifier:with:on:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__setCustomPackageActionHandler(withIdentifier:actionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.proximityEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.proximityEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.proximityEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__entityLookupTable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__entityLookupTable.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__entityLookupTable.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__simulationSceneCoordinator.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__simulationSceneCoordinator.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__simulationSceneCoordinator.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__runtimeSceneCoordinator.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__runtimeSceneCoordinator.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__runtimeSceneCoordinator.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__interactions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__hasInteractionsForTrigger<A>(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__actions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__addInteraction(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__removeInteraction(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__removeAllInteractions()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__cloneInteractions(fromEntity:toEntity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.performTapInteraction(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.action(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t partial apply for implicit closure #1 in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  uint64_t v0;

  return implicit closure #1 in __RKEntityInteractionManager.interactions(matching:entities:)(v0);
}

uint64_t partial apply for implicit closure #2 in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  return implicit closure #2 in __RKEntityInteractionManager.interactions(matching:entities:)();
}

uint64_t partial apply for implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  return implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:)();
}

uint64_t partial apply for implicit closure #9 in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  uint64_t v0;

  return implicit closure #9 in __RKEntityInteractionManager.interactions(matching:entities:)(*(_QWORD **)(v0 + 16));
}

uint64_t static StateMachineUtils.getOrCreateEntityParameter<A>(entity:name:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  _UNKNOWN **v32;

  v28 = a4;
  v29 = a7;
  v11 = *(_QWORD *)(a6 + 8);
  v12 = type metadata accessor for BindableValue(255, a5, v11, a4);
  v13 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v13 - 8);
  v24 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v23 - v14;
  v16 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v23 - v18;
  v30[0] = a1;
  swift_retain();
  v25 = a2;
  v26 = a3;
  v20 = a3;
  v21 = v28;
  v27 = a5;
  Entity.ParameterSet.subscript.getter(a2, v20, v28, a5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v12) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, v12);
    swift_release();
    BindableValue.value.getter(v12, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v12);
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v24);
  swift_release();
  if (v21 == MEMORY[0x24BEE1768])
  {
    v31 = MEMORY[0x24BEE1768];
    v32 = &protocol witness table for Int;
    v30[0] = 0;
    __swift_project_boxed_opaque_existential_1(v30, MEMORY[0x24BEE1768]);
    swift_retain();
    swift_bridgeObjectRetain();
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddInt64Value();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    swift_bridgeObjectRelease();
    swift_release();
    v30[0] = 0;
    return swift_dynamicCast();
  }
  if (v21 == MEMORY[0x24BEE14E8])
  {
    v31 = MEMORY[0x24BEE14E8];
    v32 = &protocol witness table for Float;
    LODWORD(v30[0]) = 0;
    __swift_project_boxed_opaque_existential_1(v30, MEMORY[0x24BEE14E8]);
    swift_retain();
    swift_bridgeObjectRetain();
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddFloatValue();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    swift_bridgeObjectRelease();
    swift_release();
    LODWORD(v30[0]) = 0;
    return swift_dynamicCast();
  }
  if (v21 == MEMORY[0x24BEE1328])
  {
    v31 = MEMORY[0x24BEE1328];
    v32 = &protocol witness table for Bool;
    LOBYTE(v30[0]) = 0;
    __swift_project_boxed_opaque_existential_1(v30, MEMORY[0x24BEE1328]);
    swift_retain();
    swift_bridgeObjectRetain();
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddBoolValue();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    swift_bridgeObjectRelease();
    swift_release();
    LOBYTE(v30[0]) = 0;
    return swift_dynamicCast();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static StateMachineUtils.createEntityParameterIfDoesNotExist<A>(entity:name:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static StateMachineUtils.getOrCreateEntityParameter<A>(entity:name:type:)(v9, v10, v11, v12, v13, v14, (uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a5);
}

uint64_t static StateMachineUtils.convert(_:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  Swift::String v2;

  if (result >= 5u)
  {
    _StringGuts.grow(_:)(44);
    v2._object = (void *)0x800000021BE91E80;
    v2._countAndFlagsBits = 0xD00000000000002ALL;
    String.append(_:)(v2);
    type metadata accessor for REStateTransitionInterruptionType(0);
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t static StateMachineUtils.convert<A>(_:)(uint64_t a1)
{
  uint64_t result;

  if (a1 == MEMORY[0x24BEE1768])
    return 1;
  if (a1 == MEMORY[0x24BEE14E8])
    return 2;
  if (a1 == MEMORY[0x24BEE1328])
    return 3;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static StateMachineUtils.logError(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v18 = v5;
    v11 = v4;
    v12 = a1;
    v13 = (uint8_t *)v10;
    v14 = swift_slowAlloc();
    v20 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain();
    v15 = v12;
    v4 = v11;
    v5 = v18;
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_21B9AA000, v8, v9, "%s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v14, -1, -1);
    MEMORY[0x220772F44](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t static __USDARReferenceProvidingPlugin.instance(for:)(_QWORD *a1)
{
  if (one-time initialization token for instances != -1)
    swift_once();
  return specialized AssetServiceScopedRegistry.instance(for:)(a1);
}

uint64_t static __USDARReferenceProvidingPlugin.schemePrefix.getter()
{
  return 979661685;
}

uint64_t __USDARReferenceProvidingPlugin.schemePrefix.getter()
{
  return 979661685;
}

uint64_t __USDARReferenceProvidingPlugin.__fetchReferenceObject(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(a1, a2, a3, a4);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARReferenceObject?);
  a5[3] = result;
  *a5 = v6;
  return result;
}

uint64_t __USDARReferenceProvidingPlugin.__fetchReferenceImage(group:name:physicalWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(a1, a2, a3, a4);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARReferenceImage?);
  a5[3] = result;
  *a5 = v6;
  return result;
}

uint64_t __USDARReferenceProvidingPlugin.registerARReference(_:forFullSchemePath:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 16) = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

Swift::String __swiftcall __USDARReferenceProvidingPlugin.createSchemePrefix(with:)(Swift::String with)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  String.append(_:)(with);
  v1 = 979661685;
  v2 = (void *)0xE400000000000000;
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall __USDARReferenceProvidingPlugin.createSubAssetPath(with:)(Swift::String with)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  void *v4;
  Swift::String result;

  object = with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v3 = countAndFlagsBits;
  v4 = object;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t static __USDARReferenceProvidingPlugin.createFullSchemePath(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v7._countAndFlagsBits = 47;
  v7._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v7)
    || (v8 = 47,
        v9 = (void *)0xE100000000000000,
        v10._countAndFlagsBits = 47,
        v10._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v10)))
  {
    v8 = 0;
    v9 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v8;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  char v16;
  uint64_t result;

  v5 = v4;
  v10._countAndFlagsBits = 47;
  v10._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v10)
    || (v11 = 47,
        v12 = (void *)0xE100000000000000,
        v13._countAndFlagsBits = 47,
        v13._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v13)))
  {
    v11 = 0;
    v12 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v11;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = a3;
  v15._object = a4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v16 & 1) != 0)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_10:
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return result;
}

uint64_t __USDARReferenceProvidingPlugin.arReference<A>(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  char v20;
  int v21;

  v7 = v6;
  v14._countAndFlagsBits = 47;
  v14._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v14)
    || (v15 = 47,
        v16 = (void *)0xE100000000000000,
        v17._countAndFlagsBits = 47,
        v17._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v17)))
  {
    v15 = 0;
    v16 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v15;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = a3;
  v19._object = a4;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v7 + 16) + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  v21 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(a6, v21 ^ 1u, 1, a5);
}

uint64_t __USDARReferenceProvidingPlugin.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __USDARReferenceProvidingPlugin.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for __ARReferenceProviding.__fetchReferenceObject(group:name:) in conformance __USDARReferenceProvidingPlugin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(a1, a2, a3, a4);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARReferenceObject?);
  a5[3] = result;
  *a5 = v6;
  return result;
}

uint64_t protocol witness for __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:) in conformance __USDARReferenceProvidingPlugin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(a1, a2, a3, a4);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARReferenceImage?);
  a5[3] = result;
  *a5 = v6;
  return result;
}

uint64_t type metadata accessor for __USDARReferenceProvidingPlugin()
{
  return objc_opt_self();
}

uint64_t method lookup function for __USDARReferenceProvidingPlugin()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.schemePrefix.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.__fetchReferenceObject(group:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.__fetchReferenceImage(group:name:physicalWidth:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.registerARReference(_:forFullSchemePath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createSchemePrefix(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createSubAssetPath(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createFullSchemePath(group:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.arReference<A>(group:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t __AnyARKitObject.as<A>(type:)()
{
  uint64_t v0;
  uint64_t v2;

  outlined init with copy of Any(v0, (uint64_t)&v2);
  return swift_dynamicCast();
}

uint64_t __AnyARKitObject.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t initializeWithCopy for __AnyARKitObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for __AnyARKitObject(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  return a1;
}

_OWORD *assignWithTake for __AnyARKitObject(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for __AnyARKitObject()
{
  return &type metadata for __AnyARKitObject;
}

void *specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;

  v8 = (void *)MEMORY[0x220768C3C]();
  v9 = objc_msgSend(a4, sel_property_, v8);

  if (!v9)
  {
    v14 = 0xD000000000000012;
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v15 = swift_allocObject();
    v16 = (_QWORD *)v15;
    *(_OWORD *)(v15 + 16) = xmmword_21BE50950;
    if (a3)
    {
      if (a3 == 1)
      {
        v17 = "USD action loading";
      }
      else
      {
        v14 = 0xD000000000000013;
        v17 = "USD trigger loading";
      }
    }
    else
    {
      v14 = 0xD000000000000014;
      v17 = "USD behavior loading";
    }
    v18 = (unint64_t)(v17 - 32) | 0x8000000000000000;
    v19 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v15 + 56) = MEMORY[0x24BEE0D00];
    v20 = lazy protocol witness table accessor for type String and conformance String();
    v16[4] = v14;
    v16[5] = v18;
    v16[12] = v19;
    v16[13] = v20;
    v16[8] = v20;
    v16[9] = a1;
    v16[10] = a2;
    swift_bridgeObjectRetain();
    v21 = objc_msgSend(a4, sel_path);
    v22 = objc_msgSend(v21, sel_stringValue);

    if (v22)
    {
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

      v26 = v16 + 14;
      v16[17] = v19;
      v16[18] = v20;
      if (v25)
      {
        *v26 = v23;
LABEL_15:
        v16[15] = v25;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        v13 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
        swift_allocError();
        swift_willThrow();
        return v13;
      }
    }
    else
    {
      v26 = v16 + 14;
      v16[17] = v19;
      v16[18] = v20;
    }
    *v26 = 7104878;
    v25 = 0xE300000000000000;
    goto LABEL_15;
  }
  v10 = v9;
  v11 = objc_msgSend(v10, sel_stringValue);
  if (v11)
  {
    v12 = v11;
    v13 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {

    return 0;
  }
  return v13;
}

unint64_t lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError;
  if (!lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for USKNode.PropertyValueRequestError, &type metadata for USKNode.PropertyValueRequestError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError;
  if (!lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for USKNode.PropertyValueRequestError, &type metadata for USKNode.PropertyValueRequestError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError);
  }
  return result;
}

uint64_t specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  void *v27;

  v8 = (void *)MEMORY[0x220768C3C]();
  v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v10, sel_objectPathArray);
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return v12;
  }
  v14 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v15 = swift_allocObject();
  v16 = (_QWORD *)v15;
  *(_OWORD *)(v15 + 16) = xmmword_21BE50950;
  if (a3)
  {
    if (a3 == 1)
    {
      v17 = "USD action loading";
    }
    else
    {
      v14 = 0xD000000000000013;
      v17 = "USD trigger loading";
    }
  }
  else
  {
    v14 = 0xD000000000000014;
    v17 = "USD behavior loading";
  }
  v18 = (unint64_t)(v17 - 32) | 0x8000000000000000;
  v19 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v15 + 56) = MEMORY[0x24BEE0D00];
  v20 = lazy protocol witness table accessor for type String and conformance String();
  v16[4] = v14;
  v16[5] = v18;
  v16[12] = v19;
  v16[13] = v20;
  v16[8] = v20;
  v16[9] = a1;
  v16[10] = a2;
  swift_bridgeObjectRetain();
  v21 = objc_msgSend(a4, sel_path);
  v22 = objc_msgSend(v21, sel_stringValue);

  if (!v22)
  {
    v26 = v16 + 14;
    v16[17] = v19;
    v16[18] = v20;
    goto LABEL_12;
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  v26 = v16 + 14;
  v16[17] = v19;
  v16[18] = v20;
  if (!v25)
  {
LABEL_12:
    *v26 = 7104878;
    v25 = 0xE300000000000000;
    goto LABEL_13;
  }
  *v26 = v23;
LABEL_13:
  v16[15] = v25;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v27 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  return swift_willThrow();
}

{
  void *v8;
  id v9;
  id v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  void *v25;

  v8 = (void *)MEMORY[0x220768C3C]();
  v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    v10 = objc_msgSend(v9, sel_intValue);

    return (uint64_t)v10;
  }
  v12 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v13 = swift_allocObject();
  v14 = (_QWORD *)v13;
  *(_OWORD *)(v13 + 16) = xmmword_21BE50950;
  if (a3)
  {
    if (a3 == 1)
    {
      v15 = "USD action loading";
    }
    else
    {
      v12 = 0xD000000000000013;
      v15 = "USD trigger loading";
    }
  }
  else
  {
    v12 = 0xD000000000000014;
    v15 = "USD behavior loading";
  }
  v16 = (unint64_t)(v15 - 32) | 0x8000000000000000;
  v17 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
  v18 = lazy protocol witness table accessor for type String and conformance String();
  v14[4] = v12;
  v14[5] = v16;
  v14[12] = v17;
  v14[13] = v18;
  v14[8] = v18;
  v14[9] = a1;
  v14[10] = a2;
  swift_bridgeObjectRetain();
  v19 = objc_msgSend(a4, sel_path);
  v20 = objc_msgSend(v19, sel_stringValue);

  if (!v20)
  {
    v24 = v14 + 14;
    v14[17] = v17;
    v14[18] = v18;
    goto LABEL_12;
  }
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  v24 = v14 + 14;
  v14[17] = v17;
  v14[18] = v18;
  if (!v23)
  {
LABEL_12:
    *v24 = 7104878;
    v23 = 0xE300000000000000;
    goto LABEL_13;
  }
  *v24 = v21;
LABEL_13:
  v14[15] = v23;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v25 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  return swift_willThrow();
}

{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4) & 1;
}

{
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;

  v8 = (void *)MEMORY[0x220768C3C]();
  v9 = objc_msgSend(a4, sel_property_, v8);

  if (!v9)
  {
    v11 = 0xD000000000000012;
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v12 = swift_allocObject();
    v13 = (_QWORD *)v12;
    *(_OWORD *)(v12 + 16) = xmmword_21BE50950;
    if (a3)
    {
      if (a3 == 1)
      {
        v14 = "USD action loading";
      }
      else
      {
        v11 = 0xD000000000000013;
        v14 = "USD trigger loading";
      }
    }
    else
    {
      v11 = 0xD000000000000014;
      v14 = "USD behavior loading";
    }
    v15 = (unint64_t)(v14 - 32) | 0x8000000000000000;
    v16 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v12 + 56) = MEMORY[0x24BEE0D00];
    v17 = lazy protocol witness table accessor for type String and conformance String();
    v13[4] = v11;
    v13[5] = v15;
    v13[12] = v16;
    v13[13] = v17;
    v13[8] = v17;
    v13[9] = a1;
    v13[10] = a2;
    swift_bridgeObjectRetain();
    v18 = objc_msgSend(a4, sel_path);
    v19 = objc_msgSend(v18, sel_stringValue);

    if (v19)
    {
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v21;

      v23 = v13 + 14;
      v13[17] = v16;
      v13[18] = v17;
      if (v22)
      {
        *v23 = v20;
LABEL_13:
        v13[15] = v22;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        v10 = static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
        swift_allocError();
        swift_willThrow();
        return v10 & 1;
      }
    }
    else
    {
      v23 = v13 + 14;
      v13[17] = v16;
      v13[18] = v17;
    }
    *v23 = 7104878;
    v22 = 0xE300000000000000;
    goto LABEL_13;
  }
  LOBYTE(v10) = objc_msgSend(v9, sel_BOOLValue);

  return v10 & 1;
}

void specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;

  v8 = (void *)MEMORY[0x220768C3C]();
  v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_doubleValue);

    return;
  }
  v10 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v11 = swift_allocObject();
  v12 = (_QWORD *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_21BE50950;
  if (a3)
  {
    if (a3 == 1)
    {
      v13 = "USD action loading";
    }
    else
    {
      v10 = 0xD000000000000013;
      v13 = "USD trigger loading";
    }
  }
  else
  {
    v10 = 0xD000000000000014;
    v13 = "USD behavior loading";
  }
  v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  v15 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
  v16 = lazy protocol witness table accessor for type String and conformance String();
  v12[4] = v10;
  v12[5] = v14;
  v12[12] = v15;
  v12[13] = v16;
  v12[8] = v16;
  v12[9] = a1;
  v12[10] = a2;
  swift_bridgeObjectRetain();
  v17 = objc_msgSend(a4, sel_path);
  v18 = objc_msgSend(v17, sel_stringValue);

  if (!v18)
  {
    v22 = v12 + 14;
    v12[17] = v15;
    v12[18] = v16;
    goto LABEL_12;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22 = v12 + 14;
  v12[17] = v15;
  v12[18] = v16;
  if (!v21)
  {
LABEL_12:
    *v22 = 7104878;
    v21 = 0xE300000000000000;
    goto LABEL_13;
  }
  *v22 = v19;
LABEL_13:
  v12[15] = v21;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v23 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  swift_willThrow();
}

{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;

  v8 = (void *)MEMORY[0x220768C3C]();
  v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_floatValue);

    return;
  }
  v10 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v11 = swift_allocObject();
  v12 = (_QWORD *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_21BE50950;
  if (a3)
  {
    if (a3 == 1)
    {
      v13 = "USD action loading";
    }
    else
    {
      v10 = 0xD000000000000013;
      v13 = "USD trigger loading";
    }
  }
  else
  {
    v10 = 0xD000000000000014;
    v13 = "USD behavior loading";
  }
  v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  v15 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
  v16 = lazy protocol witness table accessor for type String and conformance String();
  v12[4] = v10;
  v12[5] = v14;
  v12[12] = v15;
  v12[13] = v16;
  v12[8] = v16;
  v12[9] = a1;
  v12[10] = a2;
  swift_bridgeObjectRetain();
  v17 = objc_msgSend(a4, sel_path);
  v18 = objc_msgSend(v17, sel_stringValue);

  if (!v18)
  {
    v22 = v12 + 14;
    v12[17] = v15;
    v12[18] = v16;
    goto LABEL_12;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22 = v12 + 14;
  v12[17] = v15;
  v12[18] = v16;
  if (!v21)
  {
LABEL_12:
    *v22 = 7104878;
    v21 = 0xE300000000000000;
    goto LABEL_13;
  }
  *v22 = v19;
LABEL_13:
  v12[15] = v21;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v23 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  swift_willThrow();
}

{
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;

  v8 = (void *)MEMORY[0x220768C3C]();
  v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_double3Value);

    return;
  }
  v10 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v11 = swift_allocObject();
  v12 = (_QWORD *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_21BE50950;
  if (a3)
  {
    if (a3 == 1)
    {
      v13 = "USD action loading";
    }
    else
    {
      v10 = 0xD000000000000013;
      v13 = "USD trigger loading";
    }
  }
  else
  {
    v10 = 0xD000000000000014;
    v13 = "USD behavior loading";
  }
  v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  v15 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
  v16 = lazy protocol witness table accessor for type String and conformance String();
  v12[4] = v10;
  v12[5] = v14;
  v12[12] = v15;
  v12[13] = v16;
  v12[8] = v16;
  v12[9] = a1;
  v12[10] = a2;
  swift_bridgeObjectRetain();
  v17 = objc_msgSend(a4, sel_path);
  v18 = objc_msgSend(v17, sel_stringValue);

  if (!v18)
  {
    v22 = v12 + 14;
    v12[17] = v15;
    v12[18] = v16;
    goto LABEL_12;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22 = v12 + 14;
  v12[17] = v15;
  v12[18] = v16;
  if (!v21)
  {
LABEL_12:
    *v22 = 7104878;
    v21 = 0xE300000000000000;
    goto LABEL_13;
  }
  *v22 = v19;
LABEL_13:
  v12[15] = v21;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v23 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  swift_willThrow();
}

{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;

  v8 = (void *)MEMORY[0x220768C3C]();
  v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_float3Value);

    return;
  }
  v10 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v11 = swift_allocObject();
  v12 = (_QWORD *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_21BE50950;
  if (a3)
  {
    if (a3 == 1)
    {
      v13 = "USD action loading";
    }
    else
    {
      v10 = 0xD000000000000013;
      v13 = "USD trigger loading";
    }
  }
  else
  {
    v10 = 0xD000000000000014;
    v13 = "USD behavior loading";
  }
  v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  v15 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
  v16 = lazy protocol witness table accessor for type String and conformance String();
  v12[4] = v10;
  v12[5] = v14;
  v12[12] = v15;
  v12[13] = v16;
  v12[8] = v16;
  v12[9] = a1;
  v12[10] = a2;
  swift_bridgeObjectRetain();
  v17 = objc_msgSend(a4, sel_path);
  v18 = objc_msgSend(v17, sel_stringValue);

  if (!v18)
  {
    v22 = v12 + 14;
    v12[17] = v15;
    v12[18] = v16;
    goto LABEL_12;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22 = v12 + 14;
  v12[17] = v15;
  v12[18] = v16;
  if (!v21)
  {
LABEL_12:
    *v22 = 7104878;
    v21 = 0xE300000000000000;
    goto LABEL_13;
  }
  *v22 = v19;
LABEL_13:
  v12[15] = v21;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v23 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  swift_willThrow();
}

id specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4, (SEL *)&selRef_objectPath);
}

{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4, (SEL *)&selRef_resourcePath);
}

id specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4, SEL *a5)
{
  void *v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;

  v10 = (void *)MEMORY[0x220768C3C]();
  v11 = objc_msgSend(a4, sel_property_, v10);

  if (!v11)
  {
    v13 = 0xD000000000000012;
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v14 = swift_allocObject();
    v15 = (_QWORD *)v14;
    *(_OWORD *)(v14 + 16) = xmmword_21BE50950;
    if (a3)
    {
      if (a3 == 1)
      {
        v16 = "USD action loading";
      }
      else
      {
        v13 = 0xD000000000000013;
        v16 = "USD trigger loading";
      }
    }
    else
    {
      v13 = 0xD000000000000014;
      v16 = "USD behavior loading";
    }
    v17 = (unint64_t)(v16 - 32) | 0x8000000000000000;
    v18 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE0D00];
    v19 = lazy protocol witness table accessor for type String and conformance String();
    v15[4] = v13;
    v15[5] = v17;
    v15[12] = v18;
    v15[13] = v19;
    v15[8] = v19;
    v15[9] = a1;
    v15[10] = a2;
    swift_bridgeObjectRetain();
    v20 = objc_msgSend(a4, sel_path);
    v21 = objc_msgSend(v20, sel_stringValue);

    if (v21)
    {
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v24 = v23;

      v25 = v15 + 14;
      v15[17] = v18;
      v15[18] = v19;
      if (v24)
      {
        *v25 = v22;
LABEL_13:
        v15[15] = v24;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        v12 = (id)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
        swift_allocError();
        swift_willThrow();
        return v12;
      }
    }
    else
    {
      v25 = v15 + 14;
      v15[17] = v18;
      v15[18] = v19;
    }
    *v25 = 7104878;
    v24 = 0xE300000000000000;
    goto LABEL_13;
  }
  v12 = objc_msgSend(v11, *a5);

  return v12;
}

void USKNode.setTransform(scale:orientation:translation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  Class isa;
  float64x2_t v19;
  float64x2_t v20;
  __int128 v21;
  float64x2_t v22;
  float64x2_t v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];
  char v28;
  float64x2_t v29;
  float64x2_t v30;
  char v31;
  _OWORD v32[2];
  char v33;

  v4 = v3;
  v26 = MEMORY[0x24BEE4AF8];
  outlined init with take of Transform?(a3, (uint64_t)v32, &demangling cache variable for type metadata for SIMD3<Double>?);
  if ((v33 & 1) == 0)
  {
    v19 = (float64x2_t)v32[1];
    v22 = (float64x2_t)v32[0];
    v7 = (void *)MEMORY[0x220768C3C](0xD000000000000011, 0x800000021BE91FA0);
    v8 = objc_msgSend(v4, sel_newPropertyWithName_type_role_, v7, *MEMORY[0x24BEBED28], 0);

    if (v8)
    {
      v29 = v22;
      v30 = v19;
      objc_msgSend(v8, sel_setDouble3Value_, &v29);
      v9 = objc_msgSend(v8, sel_name);
      MEMORY[0x220768F0C]();
      if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

    }
  }
  outlined init with take of Transform?(a2, (uint64_t)&v29, &demangling cache variable for type metadata for simd_quatd?);
  if ((v31 & 1) == 0)
  {
    v20 = v29;
    v23 = v30;
    v10 = (void *)MEMORY[0x220768C3C](0x3A704F6D726F6678, 0xEE00746E6569726FLL);
    v11 = objc_msgSend(v4, sel_newPropertyWithName_type_role_, v10, *MEMORY[0x24BEBED98], 0);

    if (v11)
    {
      objc_msgSend(v11, sel_setQuatfValue_, *(double *)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v20), v23).i64);
      v12 = objc_msgSend(v11, sel_name);
      MEMORY[0x220768F0C]();
      if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

    }
  }
  outlined init with take of Transform?(a1, (uint64_t)v27, &demangling cache variable for type metadata for SIMD3<Double>?);
  if ((v28 & 1) == 0)
  {
    v21 = v27[1];
    v24 = v27[0];
    v13 = (void *)MEMORY[0x220768C3C](0x3A704F6D726F6678, 0xED0000656C616373);
    v14 = objc_msgSend(v4, sel_newPropertyWithName_type_role_, v13, *MEMORY[0x24BEBED28], 0);

    if (v14)
    {
      v25[0] = v24;
      v25[1] = v21;
      objc_msgSend(v14, sel_setDouble3Value_, v25);
      v15 = objc_msgSend(v14, sel_name);
      MEMORY[0x220768F0C]();
      if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

    }
  }
  v16 = (void *)MEMORY[0x220768C3C](0x4F704F6D726F6678, 0xEC00000072656472);
  v17 = objc_msgSend(v4, sel_newPropertyWithName_type_role_, v16, *MEMORY[0x24BEBEDB8], 0);

  if (v17)
  {
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKToken);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setTokenArray_, isa);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t USKNode.NewPropertyError.debugDescription.getter()
{
  __int128 *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  id v16;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;

  outlined init with take of BindableDataInternal(v0, (uint64_t)&v20);
  v1 = v21;
  if (!v21)
    return 0x73692065756C6156;
  v2 = v20;
  v3 = v22;
  v4 = v24;
  v5 = v23;
  v6 = v3;
  v7 = v4;
  _StringGuts.grow(_:)(57);
  v8._object = (void *)0x800000021BE91FC0;
  v8._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v2;
  v9._object = v1;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x7974206874697720;
  v10._object = (void *)0xEB00000000206570;
  String.append(_:)(v10);
  type metadata accessor for USKDataType(0);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 0x20646E6120;
  v11._object = (void *)0xE500000000000000;
  String.append(_:)(v11);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v12 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USKRoleType?);
  v13._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x65646F6E206E6F20;
  v14._object = (void *)0xE900000000000020;
  String.append(_:)(v14);
  v15 = objc_msgSend(v7, sel_path);
  v16 = objc_msgSend(v15, sel_stringValue);

  if (v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 0x20656C6F72;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance USKNode.NewPropertyError()
{
  __int128 *v0;
  _BYTE v2[40];

  outlined init with take of BindableDataInternal(v0, (uint64_t)v2);
  return USKNode.NewPropertyError.debugDescription.getter();
}

id specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  return specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setTokenValue_);
}

{
  void *v12;
  id v13;
  id v14;
  Class isa;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;

  v12 = (void *)MEMORY[0x220768C3C]();
  v13 = objc_msgSend(a6, sel_newPropertyWithName_type_role_, v12, a3, a4);

  if (v13)
  {
    if (a5)
    {
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      v14 = v13;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v14, sel_setObjectPathArray_, isa);
      swift_bridgeObjectRelease();

    }
    else
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_QWORD *)(v20 + 32) = 0;
      swift_willThrow();

    }
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *v16 = a1;
    v16[1] = a2;
    v16[2] = a3;
    v16[3] = a4;
    v16[4] = a6;
    swift_bridgeObjectRetain();
    v17 = a3;
    v18 = a4;
    v19 = a6;
    swift_willThrow();
  }
  return v13;
}

{
  return specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setObjectPath_);
}

unint64_t lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError;
  if (!lazy protocol witness table cache variable for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for USKNode.NewPropertyError, &type metadata for USKNode.NewPropertyError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError);
  }
  return result;
}

id specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, char a6, void *a7)
{
  return specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  void *v13;
  id v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;

  v13 = (void *)MEMORY[0x220768C3C]();
  v14 = objc_msgSend(a7, sel_newPropertyWithName_type_role_, v13, a3, a4);

  if (v14)
  {
    if ((a6 & 1) != 0)
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_QWORD *)(v19 + 32) = 0;
      swift_willThrow();

    }
    else
    {
      objc_msgSend(v14, sel_setDoubleValue_, *(double *)&a5);
    }
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *v15 = a1;
    v15[1] = a2;
    v15[2] = a3;
    v15[3] = a4;
    v15[4] = a7;
    swift_bridgeObjectRetain();
    v16 = a3;
    v17 = a4;
    v18 = a7;
    swift_willThrow();
  }
  return v14;
}

id specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, SEL *a7)
{
  void *v13;
  id v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;

  v13 = (void *)MEMORY[0x220768C3C]();
  v14 = objc_msgSend(a6, sel_newPropertyWithName_type_role_, v13, a3, a4);

  if (v14)
  {
    if (a5)
    {
      objc_msgSend(v14, *a7, a5);
    }
    else
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_QWORD *)(v19 + 32) = 0;
      swift_willThrow();

    }
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *v15 = a1;
    v15[1] = a2;
    v15[2] = a3;
    v15[3] = a4;
    v15[4] = a6;
    swift_bridgeObjectRetain();
    v16 = a3;
    v17 = a4;
    v18 = a6;
    swift_willThrow();
  }
  return v14;
}

id specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5, void *a6)
{
  return specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(a1, a2, a3, a4, a5, a6);
}

{
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;

  v12 = (void *)MEMORY[0x220768C3C]();
  v13 = objc_msgSend(a6, sel_newPropertyWithName_type_role_, v12, a3, a4);

  if (v13)
  {
    if (a5 == 2)
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_QWORD *)(v14 + 32) = 0;
      swift_willThrow();

    }
    else
    {
      objc_msgSend(v13, sel_setBoolValue_, a5 & 1);
    }
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *v15 = a1;
    v15[1] = a2;
    v15[2] = a3;
    v15[3] = a4;
    v15[4] = a6;
    swift_bridgeObjectRetain();
    v16 = a3;
    v17 = a4;
    v18 = a6;
    swift_willThrow();
  }
  return v13;
}

unint64_t USKScene.NewNodeError.debugDescription.getter(void *a1, void *a2)
{
  id v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;

  v3 = a1;
  v4 = a2;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6874617020746120;
  v6._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v6);
  v7 = objc_msgSend(v3, sel_stringValue);
  if (!v7)
    v7 = objc_msgSend(v3, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 34;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);

  return 0xD000000000000021;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance USKScene.NewNodeError()
{
  void **v0;

  return USKScene.NewNodeError.debugDescription.getter(*v0, v0[1]);
}

void USKObjectPath.deletingLastPathComponent()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v19[5];
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = objc_msgSend(v0, sel_stringValue);
  if (!v1)
  {
    v18 = (id)v19[4];
    return;
  }
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v20 = 47;
  v21 = 0xE100000000000000;
  MEMORY[0x24BDAC7A8](v6);
  v19[2] = &v20;
  v7 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v19, v3, v5);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  v20 = v7;
  v21 = v7 + 32;
  v22 = 0;
  v23 = 2 * v8 - 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
  lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v9 = Sequence<>.joined(separator:)();
  v11 = v10;
  swift_bridgeObjectRelease();
  v20 = 47;
  v21 = 0xE100000000000000;
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13 = v20;
  v14 = v21;
  v15 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
  v16 = (void *)MEMORY[0x220768C3C](v13, v14);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v15, sel_initWithString_, v16);

  if (!v17)
LABEL_7:
    __break(1u);
}

void USKObjectPath.appendingPathComponent(_:)(uint64_t a1, void *a2)
{
  void *v2;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  void *v13;
  id v14;

  v5 = objc_msgSend(v2, sel_stringValue);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0xE000000000000000;
  }
  v10._countAndFlagsBits = 47;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  String.append(_:)(v11);
  v12 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
  v13 = (void *)MEMORY[0x220768C3C](v7, v9);
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithString_, v13);

  if (!v14)
    __break(1u);
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Substring>);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE2180], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>);
  }
  return result;
}

void destroy for USKNode.NewPropertyError(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t initializeWithCopy for USKNode.NewPropertyError(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  __int128 v10;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(void **)(a2 + 16);
    v5 = *(void **)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(void **)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v6;
    swift_bridgeObjectRetain();
    v7 = v4;
    v8 = v5;
    v9 = v6;
  }
  return a1;
}

uint64_t assignWithCopy for USKNode.NewPropertyError(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  __int128 v20;
  __int128 v21;

  v4 = a2[1];
  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      v14 = (void *)a2[2];
      *(_QWORD *)(a1 + 16) = v14;
      v15 = (void *)a2[3];
      *(_QWORD *)(a1 + 24) = v15;
      v16 = (void *)a2[4];
      *(_QWORD *)(a1 + 32) = v16;
      swift_bridgeObjectRetain();
      v17 = v14;
      v18 = v15;
      v19 = v16;
      return a1;
    }
LABEL_7:
    v20 = *(_OWORD *)a2;
    v21 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)a1 = v20;
    *(_OWORD *)(a1 + 16) = v21;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();

    goto LABEL_7;
  }
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (void *)a2[2];
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v7 = v5;

  v8 = *(void **)(a1 + 24);
  v9 = (void *)a2[3];
  *(_QWORD *)(a1 + 24) = v9;
  v10 = v9;

  v11 = (void *)a2[4];
  v12 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  v13 = v11;

  return a1;
}

uint64_t assignWithTake for USKNode.NewPropertyError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();

LABEL_5:
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for USKNode.NewPropertyError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for USKNode.NewPropertyError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

double destructiveInjectEnumTag for USKNode.NewPropertyError(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for USKNode.NewPropertyError()
{
  return &type metadata for USKNode.NewPropertyError;
}

ValueMetadata *type metadata accessor for USKScene.NewNodeError()
{
  return &type metadata for USKScene.NewNodeError;
}

uint64_t storeEnumTagSinglePayload for USKNode.PropertyValueRequestError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BD6B080 + 4 * asc_21BE784B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BD6B0A0 + 4 * byte_21BE784B5[v4]))();
}

_BYTE *sub_21BD6B080(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BD6B0A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD6B0A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD6B0B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD6B0B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD6B0C0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for USKNode.PropertyValueRequestError()
{
  return &type metadata for USKNode.PropertyValueRequestError;
}

uint64_t AudioBufferResource.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;

  v2 = *(_BYTE *)(v1 + 25);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_BYTE *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v9 = *(_DWORD *)(v1 + 80);
  v10 = *(_BYTE *)(v1 + 84);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(a1 + 1) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 60) = v10;
  return swift_bridgeObjectRetain();
}

uint64_t AudioBufferResource.__allocating_init(buffer:configuration:)(void *a1, char *a2)
{
  swift_allocObject();
  return AudioBufferResource.init(buffer:configuration:)(a1, a2);
}

uint64_t AudioBufferResource.init(buffer:configuration:)(void *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  Class isa;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  double v15;
  double v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  Class v30;
  id v32;
  id v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  void *v43;
  char v44;
  id v45;
  char v46;
  int v47;
  uint64_t v48;
  char v49;
  void *v50;
  char v51;
  uint64_t v52;
  char type;
  unsigned __int8 v54;
  id aBlock;
  uint64_t v56;
  id (*v57)(uint64_t, uint64_t, uint64_t);
  void *v58;
  void *(*v59)(uint64_t, _QWORD *);
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;

  v3 = v2;
  v64 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  type = a2[1];
  v52 = *((_QWORD *)a2 + 1);
  v51 = a2[16];
  v50 = (void *)*((_QWORD *)a2 + 3);
  v49 = a2[32];
  v6 = *((_QWORD *)a2 + 6);
  v48 = *((_QWORD *)a2 + 5);
  v46 = a2[60];
  v47 = *((_DWORD *)a2 + 14);
  objc_opt_self();
  v7 = (id)swift_dynamicCastObjCClass();
  swift_retain();
  if (v7)
  {
    v8 = a1;
    goto LABEL_3;
  }
  v12 = objc_msgSend(a1, sel_format);
  v13 = objc_msgSend(v12, sel_channelLayout);

  v14 = objc_msgSend(a1, sel_format);
  objc_msgSend(v14, sel_sampleRate);
  v16 = v15;

  if (!v13)
  {
    v32 = objc_msgSend(a1, sel_format);
    v33 = objc_msgSend(v32, sel_channelCount);

    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1818]), sel_initStandardFormatWithSampleRate_channels_, v33, v16);
    if (v17)
      goto LABEL_7;
LABEL_16:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *v34 = 2;
    swift_willThrow();
    swift_release();

    goto LABEL_13;
  }
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1818]), sel_initStandardFormatWithSampleRate_channelLayout_, v13, v16);

  if (!v17)
    goto LABEL_16;
LABEL_7:
  v44 = v5;
  v18 = v17;
  v19 = objc_msgSend(a1, sel_format);
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB17F8]), sel_initFromFormat_toFormat_, v19, v18);

  if (!v20)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *v41 = 2;
    swift_willThrow();
    swift_release();

    goto LABEL_13;
  }
  v45 = v20;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a1;
  v22 = a1;
  v23 = v18;
  v24 = *((unsigned int *)objc_msgSend(v22, sel_audioBufferList) + 3);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1838]), sel_initWithPCMFormat_frameCapacity_, v23, v24);

  if (!v7)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *v42 = 0;
    swift_willThrow();
    swift_release();

    swift_release();
    goto LABEL_13;
  }
  v43 = v22;
  v59 = partial apply for closure #1 in AudioBufferResource.init(buffer:configuration:);
  v60 = v21;
  aBlock = (id)MEMORY[0x24BDAC760];
  v56 = 1107296256;
  v57 = thunk for @escaping @callee_guaranteed (@unowned UInt32, @unowned UnsafeMutablePointer<AVAudioConverterInputStatus>) -> (@owned AVAudioBuffer?);
  v58 = &block_descriptor_40;
  v25 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  aBlock = 0;
  v26 = objc_msgSend(v45, sel_convertToBuffer_error_withInputFromBlock_, v7, &aBlock, v25);
  _Block_release(v25);
  v27 = aBlock;
  if (v26 == (id)3)
  {
    if (v27)
    {
      v28 = v27;
      swift_bridgeObjectRelease();
      v29 = v28;
      swift_willThrow();
      swift_release();

      swift_release();
      goto LABEL_13;
    }

    swift_release();
  }
  else
  {

    swift_release();
  }
  v5 = v44;
LABEL_3:
  v9 = v7;
  isa = AVAudioPCMBuffer.copyToDeinterleavedBuffer()().super.super.isa;
  if (v11)
  {
    swift_release();

    swift_bridgeObjectRelease();
LABEL_13:
    type metadata accessor for AudioBufferResource();
    swift_deallocPartialClassInstance();
    return v3;
  }
  v30 = isa;
  *(_BYTE *)(v3 + 24) = v5;
  *(_BYTE *)(v3 + 25) = type;
  *(_QWORD *)(v3 + 32) = v52;
  *(_BYTE *)(v3 + 40) = v51;
  *(_QWORD *)(v3 + 48) = v50;
  *(_BYTE *)(v3 + 56) = v49;
  *(_QWORD *)(v3 + 64) = v48;
  *(_QWORD *)(v3 + 72) = v6;
  *(_DWORD *)(v3 + 80) = v47;
  *(_BYTE *)(v3 + 84) = v46;
  LOBYTE(aBlock) = v5;
  BYTE1(aBlock) = type;
  v56 = v52;
  LOBYTE(v57) = v51;
  v58 = v50;
  LOBYTE(v59) = v49;
  v60 = v48;
  v61 = v6;
  v62 = v47;
  v63 = v46;
  v54 = 3;
  swift_bridgeObjectRetain();
  v35 = specialized static AudioBufferResource.bufferAssetRef(buffer:configuration:inputMode:)((uint64_t)v30, (char *)&aBlock, &v54);
  swift_bridgeObjectRelease();
  swift_release();
  v3 = AudioResource.init(fromCore:)(v35);
  v36 = one-time initialization token for audio;
  swift_retain();
  if (v36 != -1)
    swift_once();
  v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.audio);
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc();
    *(_DWORD *)v40 = 134218240;
    aBlock = (id)REAudioFileAssetGetAudioAssetID();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v40 + 12) = 2048;
    aBlock = (id)REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21B9AA000, v38, v39, "[API/RealityKit] Loading AudioBufferResource with audioAssetID: %llu and REAssetID: %llu", (uint8_t *)v40, 0x16u);
    MEMORY[0x220772F44](v40, -1, -1);
  }

  RERelease();
  swift_release();

  return v3;
}

uint64_t type metadata accessor for AudioBufferResource()
{
  return objc_opt_self();
}

uint64_t sub_21BD6B914()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for closure #1 in AudioBufferResource.init(buffer:configuration:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  v3 = *(void **)(v2 + 16);
  *a2 = 0;
  v4 = v3;
  return v3;
}

id thunk for @escaping @callee_guaranteed (@unowned UInt32, @unowned UnsafeMutablePointer<AVAudioConverterInputStatus>) -> (@owned AVAudioBuffer?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  void *v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v6 = (void *)v5(a2, a3);
  swift_release();
  return v6;
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

AVAudioPCMBuffer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AVAudioPCMBuffer.copyToDeinterleavedBuffer()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  unsigned __int8 v4;
  id v5;
  id v6;
  objc_class *v7;
  void *v8;
  id v9;
  AVAudioFormat *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  AVAudioPCMBuffer result;
  id v21[2];

  v2 = v0;
  v21[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = objc_msgSend(v0, sel_format);
  v4 = objc_msgSend(v3, sel_isInterleaved);

  if ((v4 & 1) != 0
    || (v5 = objc_msgSend(v2, sel_format),
        v6 = objc_msgSend(v5, sel_commonFormat),
        v5,
        v6 != (id)1))
  {
    v9 = objc_msgSend(v2, sel_format);
    AVAudioFormat.copyInterleavedFormatToDeinterleaved()(v10);
    v12 = v11;

    if (!v13)
    {
      v14 = objc_msgSend(v2, sel_format);
      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB17F8]), sel_initFromFormat_toFormat_, v14, v12);

      if (v15)
      {
        v16 = v12;
        v17 = objc_msgSend(v2, sel_frameCapacity);
        v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1838]), sel_initWithPCMFormat_frameCapacity_, v16, v17);

        if (v1)
        {
          v21[0] = 0;
          if ((objc_msgSend(v15, sel_convertToBuffer_fromBuffer_error_, v1, v2, v21) & 1) != 0)
          {
            v18 = v21[0];

          }
          else
          {
            v19 = v21[0];
            _convertNSErrorToError(_:)();

            swift_willThrow();
          }
          goto LABEL_12;
        }

      }
      lazy protocol witness table accessor for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors();
      swift_allocError();
      swift_willThrow();

    }
LABEL_12:
    v7 = (objc_class *)v1;
    goto LABEL_13;
  }
  v7 = v2;
LABEL_13:
  result.super._impl = v8;
  result.super.super.isa = v7;
  return result;
}

void *AudioBufferResource.__allocating_init(buffer:options:)(void *a1, uint64_t a2)
{
  swift_allocObject();
  return AudioBufferResource.init(buffer:options:)(a1, a2);
}

void *AudioBufferResource.init(buffer:options:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  Class isa;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  unsigned __int8 v37;

  v3 = v2;
  v5 = *(_BYTE *)a2;
  v6 = *(_BYTE *)(a2 + 1);
  v7 = *(_BYTE *)(a2 + 2);
  v9 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v21 = *(_QWORD *)(a2 + 24);
  v36 = *(unsigned __int8 *)(a2 + 32);
  v24 = *(_QWORD *)(a2 + 40);
  v23 = *(_BYTE *)(a2 + 48);
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *v15 = 0;
    swift_willThrow();

    goto LABEL_6;
  }
  v11 = (void *)v10;
  v22 = v8;
  swift_retain();
  v12 = a1;
  a1 = v11;
  isa = AVAudioPCMBuffer.copyToDeinterleavedBuffer()().super.super.isa;
  if (v14)
  {

    swift_release();
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for AudioBufferResource();
    swift_deallocPartialClassInstance();
    return a1;
  }
  v16 = (uint64_t)isa;
  *(_BYTE *)(v3 + 24) = v6;
  *(_BYTE *)(v3 + 25) = v7;
  *(_QWORD *)(v3 + 32) = v21;
  v17 = v36;
  *(_BYTE *)(v3 + 40) = v36;
  *(_QWORD *)(v3 + 48) = v24;
  *(_BYTE *)(v3 + 56) = v23;
  *(_QWORD *)(v3 + 64) = v9;
  *(_QWORD *)(v3 + 72) = v22;
  *(_DWORD *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 84) = 1;
  v25 = v6;
  v26 = v7;
  v28 = v21;
  LOBYTE(v29) = v17;
  v30 = v24;
  v31 = v23;
  v32 = v9;
  v33 = v22;
  v34 = 0;
  v35 = 1;
  v37 = v5;
  swift_bridgeObjectRetain_n();
  v19 = specialized static AudioBufferResource.bufferAssetRef(buffer:configuration:inputMode:)(v16, &v25, &v37);
  v20 = (void *)v16;
  swift_bridgeObjectRelease();
  swift_release();
  a1 = (void *)AudioResource.init(fromCore:)(v19);
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v9;
  v29 = v22;
  v30 = v21;
  v31 = v36;
  v32 = v24;
  LOBYTE(v33) = v23;
  swift_retain();
  AudioBufferResource.load(assetRef:buffer:options:)(v19, v12, (uint64_t)&v25);
  swift_bridgeObjectRelease();
  RERelease();
  swift_release();

  return a1;
}

void AudioBufferResource.load(assetRef:buffer:options:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  id v6;

  v5 = *(_QWORD *)(a3 + 16);
  if ((REAssetHandleIsLoaded() & 1) == 0)
    REAssetHandleLoadNow();
  REAudioFileAssetSetInputMode();
  REAudioFileAssetSetLoopCount();
  if (v5)
  {
    String.utf8CString.getter();
    REAudioFileAssetSetMixGroupName();
    swift_release();
  }
  v6 = objc_msgSend(a2, sel_format);
  specialized static AudioResource.supportedChannelLayoutTag(for:)(v6);

  if (!v3)
    REAudioFileAssetSetLayoutTag();
}

void *AudioBufferResource.__allocating_init(buffer:inputMode:shouldLoop:)(void *a1, unsigned __int8 *a2, char a3)
{
  swift_allocObject();
  return AudioBufferResource.init(buffer:inputMode:shouldLoop:)(a1, a2, a3);
}

void *AudioBufferResource.init(buffer:inputMode:shouldLoop:)(void *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  id v10;
  Class isa;
  uint64_t v12;
  _BYTE *v13;
  Class v14;
  uint64_t v16;
  char IsLoaded;
  id v18;
  unsigned __int8 v19;
  char v20[8];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;

  v4 = v3;
  v7 = *a2;
  objc_opt_self();
  v8 = swift_dynamicCastObjCClass();
  if (!v8)
  {
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *v13 = 0;
    swift_willThrow();

    goto LABEL_6;
  }
  v9 = (void *)v8;
  swift_retain();
  v10 = a1;
  a1 = v9;
  isa = AVAudioPCMBuffer.copyToDeinterleavedBuffer()().super.super.isa;
  if (v12)
  {

    swift_release();
LABEL_6:
    type metadata accessor for AudioBufferResource();
    swift_deallocPartialClassInstance();
    return a1;
  }
  v14 = isa;
  *(_BYTE *)(v4 + 24) = a3 & 1;
  *(_BYTE *)(v4 + 25) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = -1;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 84) = 1;
  v20[0] = a3 & 1;
  v20[1] = 0;
  v21 = 0;
  v22 = -1;
  v23 = 0;
  v24 = -1;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v19 = v7;
  v16 = specialized static AudioBufferResource.bufferAssetRef(buffer:configuration:inputMode:)((uint64_t)isa, v20, &v19);
  swift_release();
  a1 = (void *)AudioResource.init(fromCore:)(v16);
  swift_retain();
  IsLoaded = REAssetHandleIsLoaded();
  if ((IsLoaded & 1) == 0)
    REAssetHandleLoadNow();
  REAudioFileAssetSetInputMode();
  REAudioFileAssetSetLoopCount();
  v18 = objc_msgSend(v10, sel_format);
  specialized static AudioResource.supportedChannelLayoutTag(for:)(v18);

  REAudioFileAssetSetLayoutTag();
  RERelease();
  swift_release();

  return a1;
}

void AudioBufferResource.__allocating_init(fromCore:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AudioBufferResource.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t AudioBufferResource.deinit()
{
  uint64_t v0;

  v0 = AudioResource.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioBufferResource.__deallocating_deinit()
{
  AudioResource.deinit();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void AudioBufferResource.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

Swift::Int AudioBufferResource.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  return Hasher._finalize()();
}

uint64_t AudioBufferResource.duration.getter()
{
  REAudioFileAssetGetLengthInSeconds();
  return static Duration.seconds(_:)();
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AVAudioFormat.copyInterleavedFormatToDeinterleaved()(AVAudioFormat *__return_ptr retstr)
{
  void *v1;
  id v2;
  double v3;
  double v4;
  id v5;
  id v6;

  if ((objc_msgSend(v1, sel_isInterleaved) & 1) != 0)
  {
    v2 = objc_msgSend(v1, sel_channelLayout);
    objc_msgSend(v1, sel_sampleRate);
    v4 = v3;
    if (v2)
    {
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1818]), sel_initStandardFormatWithSampleRate_channelLayout_, v2, v3);

    }
    else
    {
      v6 = objc_msgSend(v1, sel_channelCount);
      if (!objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1818]), sel_initStandardFormatWithSampleRate_channels_, v6, v4))
      {
        lazy protocol witness table accessor for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors();
        swift_allocError();
        swift_willThrow();
      }
    }
  }
  else
  {
    v5 = v1;
  }
}

uint64_t AudioBufferResource.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v29 = a1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_21BE50940;
  strcpy((char *)(v7 + 32), "configuration");
  *(_WORD *)(v7 + 46) = -4864;
  v8 = *(_BYTE *)(v1 + 24);
  v9 = *(_BYTE *)(v1 + 25);
  v10 = *(_QWORD *)(v1 + 32);
  v11 = *(_BYTE *)(v1 + 40);
  v12 = *(_QWORD *)(v1 + 48);
  v13 = *(_BYTE *)(v1 + 56);
  v14 = *(_QWORD *)(v2 + 64);
  v15 = *(_QWORD *)(v2 + 72);
  v16 = *(_DWORD *)(v2 + 80);
  v23 = *(unsigned __int8 *)(v2 + 84);
  v24 = v16;
  *(_QWORD *)(v7 + 72) = &type metadata for AudioBufferResource.Configuration;
  v17 = swift_allocObject();
  *(_QWORD *)(v7 + 48) = v17;
  *(_BYTE *)(v17 + 16) = v8;
  *(_BYTE *)(v17 + 17) = v9;
  *(_QWORD *)(v17 + 24) = v10;
  *(_BYTE *)(v17 + 32) = v11;
  *(_QWORD *)(v17 + 40) = v12;
  *(_BYTE *)(v17 + 48) = v13;
  *(_QWORD *)(v17 + 56) = v14;
  *(_QWORD *)(v17 + 64) = v15;
  *(_DWORD *)(v17 + 72) = v24;
  *(_BYTE *)(v17 + 76) = v23;
  *(_QWORD *)(v7 + 80) = 0x6E6F697461727564;
  *(_QWORD *)(v7 + 88) = 0xE800000000000000;
  swift_bridgeObjectRetain();
  swift_retain();
  REAudioFileAssetGetLengthInSeconds();
  v18 = static Duration.seconds(_:)();
  *(_QWORD *)(v7 + 120) = MEMORY[0x24BEE48B8];
  *(_QWORD *)(v7 + 96) = v18;
  *(_QWORD *)(v7 + 104) = v19;
  v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v25, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v26, *MEMORY[0x24BEE43C0], v28);
  type metadata accessor for AudioBufferResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AudioBufferResource@<X0>(uint64_t a1@<X8>)
{
  return AudioBufferResource.customMirror.getter(a1);
}

uint64_t specialized static AudioBufferResource.bufferAssetRef(buffer:configuration:inputMode:)(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;

  v28 = a1;
  v3 = *a2;
  v4 = a2[1];
  v5 = *((_QWORD *)a2 + 1);
  v6 = a2[16];
  v7 = *((_QWORD *)a2 + 3);
  v18 = a2[32];
  v8 = *((_QWORD *)a2 + 6);
  v17 = *((_QWORD *)a2 + 5);
  v15 = a2[60];
  v16 = *((_DWORD *)a2 + 14);
  v19 = *a3;
  v9 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v9, (uint64_t)v20);
  v10 = v22;
  v11 = v23;
  __swift_project_boxed_opaque_existential_1(v20, v22);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  LOBYTE(v20[0]) = v3;
  BYTE1(v20[0]) = v4;
  v20[1] = v5;
  v21 = v6;
  v22 = v7;
  LOBYTE(v23) = v18;
  v24 = v17;
  v25 = v8;
  v26 = v16;
  v27 = v15;
  type metadata accessor for REAudioFileAssetConfigurationWrapper();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  REAudioFileAssetConfigurationWrapper.init(configuration:)((uint64_t)v20);
  if (v19 != 3)
    REAudioFileAssetConfigurationSetInputMode();
  v12 = REAudioFileAssetCreateWithBufferAndConfiguration();
  if (!v12)
  {
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *v13 = 1;
    swift_willThrow();
  }
  swift_release();
  return v12;
}

uint64_t sub_21BD6C978()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AudioBufferResource and conformance AudioResource()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AudioBufferResource and conformance AudioResource;
  if (!lazy protocol witness table cache variable for type AudioBufferResource and conformance AudioResource)
  {
    v1 = type metadata accessor for AudioBufferResource();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioBufferResource and conformance AudioResource);
  }
  return result;
}

uint64_t sub_21BD6C9E4@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = REAudioFileAssetGetLoopCount();
  *a1 = (_DWORD)result == -1;
  return result;
}

uint64_t sub_21BD6CA18()
{
  return REAudioFileAssetSetLoopCount();
}

uint64_t method lookup function for AudioBufferResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioBufferResource.__allocating_init(buffer:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of AudioBufferResource.shouldLoop.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of AudioBufferResource.__allocating_init(buffer:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of AudioBufferResource.__allocating_init(buffer:inputMode:shouldLoop:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

unint64_t lazy protocol witness table accessor for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors;
  if (!lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AVAudioPCMBuffer.AVAudioPCMBufferErrors, &type metadata for AVAudioPCMBuffer.AVAudioPCMBufferErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors;
  if (!lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AVAudioPCMBuffer.AVAudioPCMBufferErrors, &type metadata for AVAudioPCMBuffer.AVAudioPCMBufferErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors;
  if (!lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AVAudioFormat.AudioFormatErrors, &type metadata for AVAudioFormat.AudioFormatErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors;
  if (!lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AVAudioFormat.AudioFormatErrors, &type metadata for AVAudioFormat.AudioFormatErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors);
  }
  return result;
}

ValueMetadata *type metadata accessor for AVAudioFormat.AudioFormatErrors()
{
  return &type metadata for AVAudioFormat.AudioFormatErrors;
}

uint64_t storeEnumTagSinglePayload for AVAudioFormat.AudioFormatErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BD6CB6C + 4 * byte_21BE78680[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BD6CB8C + 4 * byte_21BE78685[v4]))();
}

_BYTE *sub_21BD6CB6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BD6CB8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD6CB94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD6CB9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD6CBA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD6CBAC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AVAudioPCMBuffer.AVAudioPCMBufferErrors()
{
  return &type metadata for AVAudioPCMBuffer.AVAudioPCMBufferErrors;
}

void static AmbientAudioComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3009;
}

double AmbientAudioComponent.gain.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void AmbientAudioComponent.gain.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*AmbientAudioComponent.gain.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::AmbientAudioComponent __swiftcall AmbientAudioComponent.init(gain:)(RealityFoundation::AmbientAudioComponent gain)
{
  RealityFoundation::AmbientAudioComponent *v1;

  v1->gain = gain.gain;
  return gain;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AmbientAudioComponent.CodingKeys()
{
  lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AmbientAudioComponent.CodingKeys()
{
  lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Entity.ambientAudio.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

uint64_t key path getter for Entity.ambientAudio : Entity@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v4);
  result = swift_release();
  v3 = v5;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

uint64_t key path setter for Entity.ambientAudio : Entity(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);
  return swift_release();
}

uint64_t Entity.ambientAudio.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);
  return swift_release();
}

uint64_t (*Entity.ambientAudio.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t Component;
  float v4;
  float v5;
  double v6;

  *(_QWORD *)(a1 + 16) = v1;
  swift_retain();
  Component = REEntityGetComponent();
  if (Component)
  {
    REAmbientAudioComponentGetDecibelGain();
    v5 = v4;
    swift_release();
    v6 = v5;
  }
  else
  {
    swift_release();
    v6 = 0.0;
  }
  *(double *)a1 = v6;
  *(_BYTE *)(a1 + 8) = Component == 0;
  return Entity.ambientAudio.modify;
}

uint64_t Entity.ambientAudio.modify(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);
  return swift_release();
}

double static AmbientAudioComponent.__fromCore(_:)@<D0>(double *a1@<X8>)
{
  float v2;
  double result;

  REAmbientAudioComponentGetDecibelGain();
  result = v2;
  *a1 = result;
  return result;
}

uint64_t AmbientAudioComponent.__toCore(_:)()
{
  REAmbientAudioComponentSetDecibelGain();
  return RENetworkMarkComponentDirty();
}

double protocol witness for static Component.__fromCore(_:) in conformance AmbientAudioComponent@<D0>(double *a1@<X8>)
{
  float v2;
  double result;

  REAmbientAudioComponentGetDecibelGain();
  result = v2;
  *a1 = result;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance AmbientAudioComponent()
{
  REAmbientAudioComponentSetDecibelGain();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance AmbientAudioComponent(_DWORD *a1@<X8>)
{
  *a1 = 3009;
}

BOOL static AmbientAudioComponent.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

void AmbientAudioComponent.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t AmbientAudioComponent.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AmbientAudioComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int AmbientAudioComponent.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t AmbientAudioComponent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AmbientAudioComponent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AmbientAudioComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AmbientAudioComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AmbientAudioComponent(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AmbientAudioComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AmbientAudioComponent.CodingKeys, &unk_24DFD1960);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AmbientAudioComponent.CodingKeys, &unk_24DFD1960);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AmbientAudioComponent.CodingKeys, &unk_24DFD1960);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AmbientAudioComponent.CodingKeys, &unk_24DFD1960);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AmbientAudioComponent and conformance AmbientAudioComponent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AmbientAudioComponent and conformance AmbientAudioComponent;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent and conformance AmbientAudioComponent)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AmbientAudioComponent, &type metadata for AmbientAudioComponent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent and conformance AmbientAudioComponent);
  }
  return result;
}

ValueMetadata *type metadata accessor for AmbientAudioComponent()
{
  return &type metadata for AmbientAudioComponent;
}

uint64_t storeEnumTagSinglePayload for AmbientAudioComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BD6D3F8 + 4 * byte_21BE788D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BD6D418 + 4 * byte_21BE788D5[v4]))();
}

_BYTE *sub_21BD6D3F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BD6D418(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD6D420(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD6D428(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD6D430(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD6D438(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for AmbientAudioComponent.CodingKeys()
{
  return &unk_24DFD1960;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v17;

  v5 = a4;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(swift_bridgeObjectRetain() + 80);
    while (1)
    {
      v9 = *(v7 - 6);
      v8 = *(v7 - 5);
      v17 = *((unsigned __int8 *)v7 - 32);
      v10 = *(v7 - 3);
      v11 = *(v7 - 2);
      v12 = *(v7 - 1);
      v13 = *v7;
      if (v10 == a2 && v11 == a3)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_12;
      v7 += 7;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        v5 = a4;
        goto LABEL_10;
      }
    }
    v10 = a2;
    v11 = a3;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a4 = v9;
    a4[1] = v8;
    a4[2] = v17;
    a4[3] = v10;
    a4[4] = v11;
    a4[5] = v12;
    a4[6] = v13;
  }
  else
  {
LABEL_10:
    result = swift_bridgeObjectRelease();
    v5[6] = 0;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_OWORD *)v5 = 0u;
  }
  return result;
}

RealityFoundation::SkeletalPoseSet __swiftcall SkeletalPoseSet.init()()
{
  _QWORD *v0;
  RealityFoundation::SkeletalPoseSet result;

  *v0 = MEMORY[0x24BEE4AF8];
  return result;
}

double SkeletalPoseSet.default.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v3 = *(_BYTE *)(v2 + 48);
    v4 = *(_QWORD *)(v2 + 56);
    v5 = *(_QWORD *)(v2 + 64);
    v6 = *(_QWORD *)(v2 + 72);
    v7 = *(_QWORD *)(v2 + 80);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 32);
    *(_BYTE *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

double key path getter for SkeletalPoseSet.default : SkeletalPoseSet@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;

  SkeletalPoseSet.default.getter((uint64_t)v5);
  v2 = v7;
  v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = v2;
  return result;
}

uint64_t key path setter for SkeletalPoseSet.default : SkeletalPoseSet(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v2 = *(_QWORD *)(result + 32);
  v3 = *a2;
  if (*(_QWORD *)(*a2 + 16))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v10 = *(_OWORD *)result;
    v6 = *(_QWORD *)(result + 40);
    v7 = *(_QWORD *)(result + 48);
    v9 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(result + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (*(_QWORD *)(v3 + 16))
      {
LABEL_7:
        *(_OWORD *)(v3 + 32) = v10;
        *(_BYTE *)(v3 + 48) = v9 & 1;
        *(_QWORD *)(v3 + 56) = v8;
        *(_QWORD *)(v3 + 64) = v2;
        *(_QWORD *)(v3 + 72) = v6;
        *(_QWORD *)(v3 + 80) = v7;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *a2 = v3;
        return result;
      }
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
      v3 = result;
      if (*(_QWORD *)(result + 16))
        goto LABEL_7;
    }
    __break(1u);
  }
  return result;
}

uint64_t *SkeletalPoseSet.default.setter(uint64_t *result)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *result;
  v2 = result[1];
  v5 = result[2];
  v4 = result[3];
  v7 = result[4];
  v6 = result[5];
  v8 = result[6];
  v9 = *v1;
  if (!(*v1)[2])
    return (uint64_t *)outlined consume of SkeletalPose?(*result, result[1], result[2], result[3], result[4]);
  if (v7)
  {
    result = (uint64_t *)swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (v9[2])
      {
LABEL_5:
        v9[4] = v3;
        v9[5] = v2;
        *((_BYTE *)v9 + 48) = v5 & 1;
        v9[7] = v4;
        v9[8] = v7;
        v9[9] = v6;
        v9[10] = v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (uint64_t *)swift_bridgeObjectRelease();
        *v1 = v9;
        return result;
      }
    }
    else
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      v9 = result;
      if (result[2])
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

void (*SkeletalPoseSet.default.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  v4 = v3;
  *a1 = v3;
  v3[7] = v1;
  v5 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v6 = *(_BYTE *)(v5 + 48);
    v7 = *(_QWORD *)(v5 + 56);
    v8 = *(_QWORD *)(v5 + 64);
    v9 = *(_QWORD *)(v5 + 72);
    v10 = *(_QWORD *)(v5 + 80);
    *(_OWORD *)v4 = *(_OWORD *)(v5 + 32);
    *((_BYTE *)v4 + 16) = v6;
    v4[3] = v7;
    v4[4] = v8;
    v4[5] = v9;
    v4[6] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v3[6] = 0;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  return SkeletalPoseSet.default.modify;
}

void SkeletalPoseSet.default.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[7];
  if ((a2 & 1) != 0)
  {
    v6 = (_QWORD *)v2[3];
    v7 = v2[4];
    v8 = v2[5];
    v9 = *(_QWORD **)v5;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
      v10 = v7 == 0;
    else
      v10 = 1;
    if (v10)
      goto LABEL_9;
    v11 = v2[6];
    v12 = v2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (v9[2])
      {
LABEL_8:
        v18 = (_QWORD *)v2[7];
        v9[4] = v4;
        v9[5] = v3;
        *((_BYTE *)v9 + 48) = v12 & 1;
        v9[7] = v6;
        v9[8] = v7;
        v9[9] = v8;
        v9[10] = v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v18 = v9;
        v4 = *v2;
        v3 = v2[1];
        v6 = (_QWORD *)v2[3];
        v7 = v2[4];
LABEL_9:
        v13 = v2[2];
        v14 = v4;
        v15 = v3;
        v16 = (uint64_t)v6;
        v17 = v7;
LABEL_16:
        outlined consume of SkeletalPose?(v14, v15, v13, v16, v17);
        goto LABEL_17;
      }
    }
    else
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      if (v9[2])
        goto LABEL_8;
    }
    __break(1u);
LABEL_20:
    v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    if (!v6[2])
      goto LABEL_21;
    goto LABEL_14;
  }
  v12 = v2[2];
  v11 = v2[3];
  v9 = (_QWORD *)v2[4];
  v8 = v2[5];
  v7 = v2[6];
  v6 = *(_QWORD **)v5;
  if (!*(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    v14 = **a1;
    v15 = v3;
    v13 = v2[2];
    v16 = v2[3];
    v17 = v2[4];
    goto LABEL_16;
  }
  if (!v9)
  {
LABEL_17:
    free(v2);
    return;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_20;
  if (v6[2])
  {
LABEL_14:
    v19 = (_QWORD *)v2[7];
    v6[4] = v4;
    v6[5] = v3;
    *((_BYTE *)v6 + 48) = v12 & 1;
    v6[7] = v11;
    v6[8] = v9;
    v6[9] = v8;
    v6[10] = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v19 = v6;
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
}

uint64_t SkeletalPoseSet.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

BOOL SkeletalPoseSet.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t SkeletalPoseSet.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6)
  {
    v8 = result;
    v9 = (_QWORD *)(v5 + 80);
    while (1)
    {
      v16 = *((_OWORD *)v9 - 3);
      v10 = *((unsigned __int8 *)v9 - 32);
      v12 = *(v9 - 3);
      v11 = *(v9 - 2);
      v14 = *(v9 - 1);
      v13 = *v9;
      if (v12 == v8 && v11 == a2)
        break;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_11;
      v9 += 7;
      if (!--v6)
        goto LABEL_9;
    }
    v12 = v8;
    v11 = a2;
LABEL_11:
    *(_OWORD *)a3 = v16;
    *(_QWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 40) = v14;
    *(_QWORD *)(a3 + 48) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_9:
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

double key path getter for SkeletalPoseSet.subscript(_:) : SkeletalPoseSet@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  double result;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v5, v3, v4, v9);
  swift_bridgeObjectRelease();
  v6 = v11;
  v7 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v7;
  result = *(double *)&v10;
  *(_OWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t key path setter for SkeletalPoseSet.subscript(_:) : SkeletalPoseSet(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[7];

  v3 = *a3;
  v4 = a3[1];
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v12[0] = *a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v9;
  v12[6] = v10;
  swift_bridgeObjectRetain();
  outlined copy of SkeletalPose?(v12[0], v5, v6, v7, v8);
  specialized SkeletalPoseSet.subscript.setter(v12, v3, v4);
  return swift_bridgeObjectRelease();
}

uint64_t SkeletalPoseSet.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  specialized SkeletalPoseSet.subscript.setter(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

void (*SkeletalPoseSet.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v18;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[8] = a3;
  v7[9] = v3;
  v7[7] = a2;
  v8 = *v3;
  v9 = *(_QWORD *)(*v3 + 16);
  if (v9)
  {
    v10 = (_QWORD *)(v8 + 80);
    while (1)
    {
      v18 = *((_OWORD *)v10 - 3);
      v11 = *((unsigned __int8 *)v10 - 32);
      v13 = *(v10 - 3);
      v12 = *(v10 - 2);
      v15 = *(v10 - 1);
      v14 = *v10;
      if (v13 == a2 && v12 == a3)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_11;
      v10 += 7;
      if (!--v9)
        goto LABEL_9;
    }
    v13 = a2;
    v12 = a3;
LABEL_11:
    *(_OWORD *)v7 = v18;
    v7[2] = v11;
    v7[3] = v13;
    v7[4] = v12;
    v7[5] = v15;
    v7[6] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_9:
    v7[6] = 0;
    *((_OWORD *)v7 + 1) = 0u;
    *((_OWORD *)v7 + 2) = 0u;
    *(_OWORD *)v7 = 0u;
  }
  return SkeletalPoseSet.subscript.modify;
}

void SkeletalPoseSet.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[7];

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v8 = (*a1)[4];
  v7 = (*a1)[5];
  v9 = (*a1)[8];
  v11 = (*a1)[6];
  v10 = (*a1)[7];
  v12[0] = v3;
  v12[1] = v4;
  v12[2] = v6;
  v12[3] = v5;
  v12[4] = v8;
  v12[5] = v7;
  v12[6] = v11;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    outlined copy of SkeletalPose?(v3, v4, v6, v5, v8);
    specialized SkeletalPoseSet.subscript.setter(v12, v10, v9);
    swift_bridgeObjectRelease();
    outlined consume of SkeletalPose?(*v2, v2[1], v2[2], v2[3], v2[4]);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized SkeletalPoseSet.subscript.setter(v12, v10, v9);
    swift_bridgeObjectRelease();
  }
  free(v2);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = *((_BYTE *)*a1 + 16);
  v7 = (*a1)[3];
  v6 = (*a1)[4];
  v9 = (*a1)[5];
  v8 = (*a1)[6];
  v10 = *(_QWORD **)(*a1)[8];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    v11 = v2[7];
    if (v10[2] > v11)
    {
      v12 = (_QWORD *)v2[8];
      v13 = &v10[7 * v11];
      v13[4] = v3;
      v13[5] = v4;
      *((_BYTE *)v13 + 48) = v5;
      v13[7] = v7;
      v13[8] = v6;
      v13[9] = v9;
      v13[10] = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v12 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_9:
      free(v2);
      return;
    }
    __break(1u);
  }
  else if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    goto LABEL_7;
  }
  v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
LABEL_7:
  v14 = v2[7];
  if (v10[2] > v14)
  {
    v15 = (_QWORD *)v2[8];
    v16 = &v10[7 * v14];
    v16[4] = v3;
    v16[5] = v4;
    *((_BYTE *)v16 + 48) = v5;
    v16[7] = v7;
    v16[8] = v6;
    v16[9] = v9;
    v16[10] = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v15 = v10;
    goto LABEL_9;
  }
  __break(1u);
}

Swift::Bool __swiftcall SkeletalPoseSet.contains(_:)(Swift::String a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *i;
  BOOL v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (!v3)
    return 0;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  for (i = (_QWORD *)(v2 + 64); ; i += 7)
  {
    v7 = *(i - 1) == countAndFlagsBits && *i == (_QWORD)object;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    if (!--v3)
      return 0;
  }
  return 1;
}

uint64_t SkeletalPoseSet.set(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (!v5)
  {
LABEL_9:
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v6 = 0;
  v7 = 0;
  v19 = *(_OWORD *)result;
  v8 = *(unsigned __int8 *)(result + 16);
  v9 = *(_QWORD *)(result + 24);
  v10 = *(_QWORD *)(result + 32);
  v20 = *(_QWORD *)(result + 48);
  v21 = *(_QWORD *)(result + 40);
  while (1)
  {
    v11 = &v4[v6];
    if (v4[v6 + 7] == v9 && v4[v6 + 8] == v10)
      break;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      break;
    ++v7;
    v6 += 7;
    if (v5 == v7)
      goto LABEL_9;
  }
  if (v7 >= v5)
  {
    __break(1u);
  }
  else
  {
    v18 = v8;
    v15 = v4[v6 + 5];
    v16 = v4[v6 + 4];
    v17 = LOBYTE(v4[v6 + 6]);
    v5 = v11[8];
    v14 = v11[7];
    v11 = (_QWORD *)v4[v6 + 9];
    v8 = v4[v6 + 10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_12;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v4 = (_QWORD *)result;
LABEL_12:
  if (v7 >= v4[2])
  {
    __break(1u);
  }
  else
  {
    v13 = &v4[v6];
    *((_OWORD *)v13 + 2) = v19;
    *((_BYTE *)v13 + 48) = v18;
    v13[7] = v9;
    v13[8] = v10;
    v13[9] = v21;
    v13[10] = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v2 = v4;
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v11;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

Swift::Int_optional __swiftcall SkeletalPoseSet.index(of:)(Swift::String of)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Int v6;
  _QWORD *v7;
  BOOL v8;
  Swift::Bool v9;
  Swift::Int v10;
  Swift::Int_optional result;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    object = of._object;
    countAndFlagsBits = of._countAndFlagsBits;
    v6 = 0;
    v7 = (_QWORD *)(v2 + 64);
    while (1)
    {
      v8 = *(v7 - 1) == countAndFlagsBits && *v7 == (_QWORD)object;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      ++v6;
      v7 += 7;
      if (v3 == v6)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v6 = 0;
    v9 = 1;
  }
  v10 = v6;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

uint64_t SkeletalPoseSet.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + 56 * v2;
    v5 = *(_BYTE *)(v4 + 48);
    v6 = *(_QWORD *)(v4 + 56);
    v7 = *(_QWORD *)(v4 + 64);
    v8 = *(_QWORD *)(v4 + 72);
    v9 = *(_QWORD *)(v4 + 80);
    *(_OWORD *)a1 = *(_OWORD *)(v4 + 32);
    *(_BYTE *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance SkeletalPoseSet.Iterator@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + 56 * v2;
    v5 = *(_BYTE *)(v4 + 48);
    v6 = *(_QWORD *)(v4 + 56);
    v7 = *(_QWORD *)(v4 + 64);
    v8 = *(_QWORD *)(v4 + 72);
    v9 = *(_QWORD *)(v4 + 80);
    *(_OWORD *)a1 = *(_OWORD *)(v4 + 32);
    *(_BYTE *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t SkeletalPoseSet.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
  return swift_bridgeObjectRetain();
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance SkeletalPoseSet()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance SkeletalPoseSet(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t SkeletalPoseSet.startIndex.getter()
{
  return 0;
}

unint64_t SkeletalPoseSet.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = *(_QWORD *)v2 + 56 * result;
    v4 = *(_BYTE *)(v3 + 48);
    v5 = *(_QWORD *)(v3 + 56);
    v6 = *(_QWORD *)(v3 + 64);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v3 + 80);
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 32);
    *(_BYTE *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = v6;
    *(_QWORD *)(a2 + 40) = v7;
    *(_QWORD *)(a2 + 48) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t key path getter for SkeletalPoseSet.subscript(_:) : SkeletalPoseSet@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    v4 = *(_QWORD *)result + 56 * v3;
    v5 = *(_BYTE *)(v4 + 48);
    v6 = *(_QWORD *)(v4 + 56);
    v7 = *(_QWORD *)(v4 + 64);
    v8 = *(_QWORD *)(v4 + 72);
    v9 = *(_QWORD *)(v4 + 80);
    *(_OWORD *)a3 = *(_OWORD *)(v4 + 32);
    *(_BYTE *)(a3 + 16) = v5;
    *(_QWORD *)(a3 + 24) = v6;
    *(_QWORD *)(a3 + 32) = v7;
    *(_QWORD *)(a3 + 40) = v8;
    *(_QWORD *)(a3 + 48) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t key path setter for SkeletalPoseSet.subscript(_:) : SkeletalPoseSet(uint64_t *a1, _QWORD **a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v4 = *a3;
  v5 = *a1;
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  v9 = a1[3];
  v8 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v12 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
  v12 = (_QWORD *)result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < v12[2])
  {
    v14 = &v12[7 * v4];
    v14[4] = v5;
    v14[5] = v6;
    *((_BYTE *)v14 + 48) = v7;
    v14[7] = v9;
    v14[8] = v8;
    v14[9] = v10;
    v14[10] = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a2 = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t SkeletalPoseSet.subscript.setter(__int128 *a1, unint64_t a2)
{
  _QWORD **v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;
  __int128 v12;

  v12 = *a1;
  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  v9 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  v9 = (_QWORD *)result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v9[2] > a2)
  {
    v11 = &v9[7 * a2];
    *((_OWORD *)v11 + 2) = v12;
    *((_BYTE *)v11 + 48) = v4;
    v11[7] = v5;
    v11[8] = v6;
    v11[9] = v7;
    v11[10] = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v2 = v9;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*SkeletalPoseSet.subscript.modify(void (**a1)(uint64_t **a1, char a2), unint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  void (*result)(uint64_t **, char);
  void (*v6)(uint64_t **, char);
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = (void (*)(uint64_t **, char))malloc(0x48uLL);
  *a1 = result;
  *((_QWORD *)result + 7) = a2;
  *((_QWORD *)result + 8) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = result;
    v7 = *(_QWORD *)v2 + 56 * a2;
    v8 = *(_BYTE *)(v7 + 48);
    v9 = *(_QWORD *)(v7 + 56);
    v10 = *(_QWORD *)(v7 + 64);
    v11 = *(_QWORD *)(v7 + 72);
    v12 = *(_QWORD *)(v7 + 80);
    *(_OWORD *)v6 = *(_OWORD *)(v7 + 32);
    *((_BYTE *)v6 + 16) = v8;
    *((_QWORD *)v6 + 3) = v9;
    *((_QWORD *)v6 + 4) = v10;
    *((_QWORD *)v6 + 5) = v11;
    *((_QWORD *)v6 + 6) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return SkeletalPoseSet.subscript.modify;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall SkeletalPoseSet.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SkeletalPoseSet(void (***a1)(void **a1), unint64_t *a2))(_QWORD *a1)
{
  void (**v4)(void **);

  v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = SkeletalPoseSet.subscript.read(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void (*SkeletalPoseSet.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t v2;
  void (*result)(void **);
  void (*v6)(void **);
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = result;
    v7 = *(_QWORD *)v2 + 56 * a2;
    v8 = *(_BYTE *)(v7 + 48);
    v9 = *(_QWORD *)(v7 + 56);
    v10 = *(_QWORD *)(v7 + 64);
    v11 = *(_QWORD *)(v7 + 72);
    v12 = *(_QWORD *)(v7 + 80);
    *(_OWORD *)v6 = *(_OWORD *)(v7 + 32);
    *((_BYTE *)v6 + 16) = v8;
    *((_QWORD *)v6 + 3) = v9;
    *((_QWORD *)v6 + 4) = v10;
    *((_QWORD *)v6 + 5) = v11;
    *((_QWORD *)v6 + 6) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return SkeletalPoseSet.subscript.read;
  }
  __break(1u);
  return result;
}

void SkeletalPoseSet.subscript.read(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t outlined consume of SkeletalPose?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *specialized SkeletalPoseSet.subscript.setter(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t *i;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = result[4];
  v6 = result[6];
  v7 = *(_QWORD **)v3;
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (!v8)
    return (uint64_t *)outlined consume of SkeletalPose?(*result, result[1], result[2], result[3], result[4]);
  if (v5)
  {
    v16 = result[3];
    v17 = result[2];
    v19 = *result;
    v18 = result[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_28:
      v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    v10 = 0;
    for (i = v7 + 10; ; i += 7)
    {
      if (v8 == v10)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (v10 >= v7[2])
        goto LABEL_27;
      v12 = *(i - 3) == a2 && *(i - 2) == a3;
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_6;
      v13 = *(_QWORD *)(*i + 16);
      v14 = *(_QWORD *)(v6 + 16);
      if (v13)
      {
        if (v13 != v14 || v14 == 0)
          goto LABEL_6;
      }
      else if (v14)
      {
        goto LABEL_6;
      }
      *i = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_6:
      if (v8 == ++v10)
      {
        result = (uint64_t *)outlined consume of SkeletalPose?(v19, v18, v17, v16, v5);
        *(_QWORD *)v3 = v7;
        return result;
      }
    }
  }
  return result;
}

uint64_t outlined copy of SkeletalPose?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SkeletalPoseSet.Iterator and conformance SkeletalPoseSet.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SkeletalPoseSet.Iterator and conformance SkeletalPoseSet.Iterator;
  if (!lazy protocol witness table cache variable for type SkeletalPoseSet.Iterator and conformance SkeletalPoseSet.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SkeletalPoseSet.Iterator, &type metadata for SkeletalPoseSet.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SkeletalPoseSet.Iterator and conformance SkeletalPoseSet.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SkeletalPoseSet and conformance SkeletalPoseSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SkeletalPoseSet and conformance SkeletalPoseSet;
  if (!lazy protocol witness table cache variable for type SkeletalPoseSet and conformance SkeletalPoseSet)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SkeletalPoseSet, &type metadata for SkeletalPoseSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SkeletalPoseSet and conformance SkeletalPoseSet);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in SkeletalPoseSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<SkeletalPoseSet> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<SkeletalPoseSet>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SkeletalPoseSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<SkeletalPoseSet> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<SkeletalPoseSet>, MEMORY[0x24BEE4238]);
}

uint64_t sub_21BD6ED08()
{
  return 0;
}

uint64_t sub_21BD6ED20()
{
  return 0;
}

ValueMetadata *type metadata accessor for SkeletalPoseSet()
{
  return &type metadata for SkeletalPoseSet;
}

ValueMetadata *type metadata accessor for SkeletalPoseSet.Iterator()
{
  return &type metadata for SkeletalPoseSet.Iterator;
}

double static CollisionFilter.sensor.getter@<D0>(_QWORD *a1@<X8>)
{
  double result;

  result = NAN;
  *a1 = -1;
  return result;
}

uint64_t CollisionGroup.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static CollisionGroup.all.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

BOOL static CollisionCastQueryType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void CollisionCastQueryType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int CollisionCastQueryType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CollisionGroup.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

void static CollisionGroup.default.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CollisionGroup.sceneUnderstanding.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x80000000;
}

_DWORD *CollisionFilter.init(group:mask:)@<X0>(_DWORD *result@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  int v3;

  v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

double static CollisionFilter.default.getter@<D0>(_QWORD *a1@<X8>)
{
  double result;

  result = NAN;
  *a1 = 0xFFFFFFFF00000001;
  return result;
}

void CollisionFilter.group.getter(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_DWORD *CollisionFilter.group.setter(_DWORD *result)
{
  _DWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CollisionFilter.group.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CollisionFilter.mask.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 4);
}

_DWORD *CollisionFilter.mask.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = *result;
  return result;
}

uint64_t (*CollisionFilter.mask.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static CollisionFilter.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t CollisionCastHit.entity.getter()
{
  return swift_retain();
}

__n128 CollisionCastHit.position.getter()
{
  __n128 *v0;

  return v0[1];
}

__n128 CollisionCastHit.normal.getter()
{
  __n128 *v0;

  return v0[2];
}

float CollisionCastHit.distance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 48);
}

uint64_t CollisionCastHit.TriangleHit.faceIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

double CollisionCastHit.TriangleHit.uv.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

__n128 CollisionCastHit.triangleHit.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 72);
  result = *(__n128 *)(v1 + 56);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t CollisionCastHit.shapeIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

float32x2_t *Scene.raycast(origin:direction:length:query:mask:relativeTo:)(unsigned __int8 *a1, int *a2, uint64_t a3, float32x4_t a4, float32x4_t a5, float a6)
{
  int v6;
  float v7;
  float32x4_t v8;
  int v10;
  unsigned __int8 v11;

  v6 = *a2;
  v7 = vmuls_lane_f32(a6, a5, 2);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)a4.f32, vmul_n_f32(*(float32x2_t *)a5.f32, a6));
  v8.f32[2] = a4.f32[2] + v7;
  v8.i32[3] = 0;
  v11 = *a1;
  v10 = v6;
  return Scene.raycast(from:to:query:mask:relativeTo:)(&v11, a4, v8, (uint64_t)&v10, a3);
}

float32x2_t *Scene.raycast(from:to:query:mask:relativeTo:)(unsigned __int8 *a1, float32x4_t a2, float32x4_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  unsigned __int32 v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float32x4_t v17;
  uint64_t v18;
  float32x2_t *v19;
  float32x2_t *v20;
  uint64_t v21;
  float32x2_t FaceIndex;
  float32x2_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  float32x2_t *v28;
  uint64_t Entity;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  float v37;
  float v38;
  unsigned int ShapeIndex;
  int HasTriangleMeshHitInfo;
  char v41;
  float32x2_t v42;
  float32x2_t v43;
  simd_float3x3 v44;
  float32x2_t v45;
  unint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  simd_float3x3 v49;
  float32x2_t v50;
  float32x2_t *v51;
  float32x4_t v52;
  __int128 v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x4_t v57;
  int v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t v66;
  int32x2_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v71;
  __int128 v72;
  float32x2_t v73;
  float32x4_t v74;
  __int128 v75;
  _OWORD v76[2];
  float v77;
  uint64_t v78;
  simd_float4x4 v79;
  simd_float4x4 v80;

  v63 = a2;
  v78 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = vsubq_f32(a3, a2);
  v8 = v7.f32[2];
  v73 = *(float32x2_t *)v7.f32;
  a2.f32[0] = sqrtf(vmuls_lane_f32(v7.f32[2], v7, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
  v67 = *(int32x2_t *)a2.f32;
  specialized static __ServiceLocator.shared.getter();
  if (a5)
  {
    *(double *)v79.columns[0].i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, a5);
    v60 = (float32x4_t)v79.columns[0];
    v61 = (float32x4_t)v79.columns[1];
    v62 = (float32x4_t)v79.columns[2];
    v57 = (float32x4_t)v79.columns[3];
    v80 = __invert_f4(v79);
    v68 = (float32x4_t)v80.columns[1];
    v69 = (float32x4_t)v80.columns[0];
    v64 = (float32x4_t)v80.columns[3];
    v66 = (float32x4_t)v80.columns[2];
    *(float32x2_t *)v9.f32 = simd_float4x4.transform(position:)(v63, (float32x4_t)v80.columns[0], (float32x4_t)v80.columns[1], (float32x4_t)v80.columns[2], (float32x4_t)v80.columns[3]);
    v74 = v9;
    *(float32x2_t *)v10.f32 = simd_float4x4.transform(position:)(a3, v69, v68, v66, v64);
    v11 = vsubq_f32(v10, v74);
    v12 = (int32x4_t)vmulq_f32(v11, v11);
    v13 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
    v14 = vrsqrte_f32((float32x2_t)v13);
    v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13, vmul_f32(v14, v14)));
    v71 = vmulq_n_f32(v11, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13, vmul_f32(v15, v15))).f32[0]);
    v16 = sqrtf(*(float *)&v12.i32[2] + (float)(*(float *)v12.i32
                                              + vmuls_lane_f32(v11.f32[1], *(float32x2_t *)v11.f32, 1)));
  }
  else
  {
    *(float32x2_t *)v17.f32 = vdiv_f32(v73, (float32x2_t)vdup_lane_s32(v67, 0));
    v17.f32[2] = v8 / *(float *)v67.i32;
    v17.i32[3] = 0;
    v71 = v17;
    v57 = *(float32x4_t *)&zmmword_21BE41220[48];
    v62 = *(float32x4_t *)&zmmword_21BE41220[32];
    v61 = *(float32x4_t *)&zmmword_21BE41220[16];
    v60 = *(float32x4_t *)zmmword_21BE41220;
    v16 = *(float *)v67.i32;
    v74 = v63;
  }
  RECollisionCastConfigurationInitToDefault();
  RECollisionCastConfigurationSetQueryType();
  RECollisionCastConfigurationSetFilter();
  RECollisionCastHitCollectionCreate();
  v76[0] = v74;
  v76[1] = v71;
  v77 = v16;
  if (a5)
    RECollisionCastRayVsEntitySimulation();
  else
    RECollisionCastRayVsScene();
  v18 = RECollisionCastHitCollectionCount();
  v19 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 & ~(v18 >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (v18 < 0)
    goto LABEL_36;
  v20 = v19;
  v59 = a5;
  v58 = v6;
  if (v18)
  {
    v21 = 0;
    v65 = v18;
    while (1)
    {
      if (RECollisionCastHitCollectionGetByIndex())
      {
        RECollisionCastHitGetObject();
        Entity = RECollisionObjectGetEntity();
        if (Entity)
          break;
      }
LABEL_14:
      if (v18 == ++v21)
        goto LABEL_26;
    }
    v30 = Entity;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v31 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_35;
      v33 = specialized static Entity.entityInfoType(_:)();
      if (v33)
      {
        v32 = (*(uint64_t (**)(void))(v33 + 232))();
        v34 = *(_QWORD *)(v32 + 16);
        swift_retain();
        MEMORY[0x22076D160](v34, 0);
        *(_QWORD *)(v32 + 16) = v30;
        MEMORY[0x22076D160](v30, v32);
        swift_release();
        goto LABEL_23;
      }
      v31 = makeEntity(for:)(v30);
    }
    v32 = v31;
LABEL_23:
    swift_retain();
    RECollisionCastHitGetPosition();
    v75 = v35;
    RECollisionCastHitGetNormal();
    v72 = v36;
    RECollisionCastHitGetHitPercentage();
    v38 = v37;
    ShapeIndex = RECollisionCastHitGetShapeIndex();
    HasTriangleMeshHitInfo = RECollisionCastHitHasTriangleMeshHitInfo();
    v41 = HasTriangleMeshHitInfo;
    if (HasTriangleMeshHitInfo)
    {
      FaceIndex = (float32x2_t)RECollisionCastHitGetFaceIndex();
      RECollisionCastHitGetFaceUV();
      v43 = v42;
      swift_release();
      v23 = v43;
    }
    else
    {
      swift_release();
      FaceIndex = 0;
      v23 = 0;
    }
    v24 = (unint64_t)v20[2];
    v25 = (unint64_t)v20[3];
    swift_retain();
    if (v24 >= v25 >> 1)
      v20 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v24 + 1, 1, v20);
    v26 = v72;
    v27 = v75;
    HIDWORD(v27) = v69.i32[3];
    HIDWORD(v26) = v68.i32[3];
    v20[2] = (float32x2_t)(v24 + 1);
    v28 = &v20[12 * v24];
    v28[4] = (float32x2_t)v32;
    *(_OWORD *)v28[6].f32 = v27;
    *(_OWORD *)v28[8].f32 = v26;
    v28[10].f32[0] = *(float *)v67.i32 * v38;
    v28[11] = FaceIndex;
    v28[12] = v23;
    v28[13].i8[0] = v41 ^ 1;
    v28[14] = (float32x2_t)ShapeIndex;
    swift_release();
    v18 = v65;
    goto LABEL_14;
  }
LABEL_26:
  RECollisionCastHitCollectionDestroy();
  v44.columns[2] = (simd_float3)v62;
  v44.columns[1] = (simd_float3)v61;
  if (v59)
  {
    v45 = v20[2];
    if (v45)
    {
      v44.columns[0] = (simd_float3)v60;
      v44.columns[0].i32[3] = 0;
      v44.columns[1].i32[3] = 0;
      v44.columns[2].i32[3] = 0;
      v49 = __invert_f3(v44);
      v46 = 0;
      v47 = (float32x4_t)vzip1q_s32((int32x4_t)v49.columns[0], (int32x4_t)v49.columns[1]);
      v47.i32[2] = v49.columns[2].i32[0];
      v48 = (float32x4_t)vtrn2q_s32((int32x4_t)v49.columns[0], (int32x4_t)v49.columns[1]);
      v48.i32[2] = v49.columns[2].i32[1];
      v49.columns[0] = (simd_float3)vzip2q_s32((int32x4_t)v49.columns[0], (int32x4_t)v49.columns[1]);
      v49.columns[0].i32[2] = v49.columns[2].i32[2];
      v50 = v20[2];
      v51 = v20 + 6;
      while (v46 < *(_QWORD *)&v50)
      {
        v49.columns[2] = (simd_float3)vaddq_f32(v57, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, COERCE_FLOAT(*(_OWORD *)v51->f32)), v61, *v51, 1), v62, *(float32x4_t *)v51->f32, 2));
        v52 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v49.columns[2], 3);
        *(float32x2_t *)&v53 = vdiv_f32(*(float32x2_t *)v49.columns[2].f32, *(float32x2_t *)v52.f32);
        v49.columns[2] = (simd_float3)vdivq_f32((float32x4_t)v49.columns[2], v52);
        v54 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(_OWORD *)v51[2].f32)), v48, v51[2], 1), (float32x4_t)v49.columns[0], *(float32x4_t *)v51[2].f32, 2);
        v55 = vsub_f32(*(float32x2_t *)&v53, *(float32x2_t *)v63.f32);
        *((_QWORD *)&v53 + 1) = v49.columns[2].u32[2];
        ++v46;
        v54.i32[3] = v49.columns[1].i32[3];
        *(_OWORD *)v51->f32 = v53;
        *(float32x4_t *)v51[2].f32 = v54;
        v51[4].f32[0] = sqrtf((float)((float)(v49.columns[2].f32[2] - v63.f32[2])* (float)(v49.columns[2].f32[2] - v63.f32[2]))+ vaddv_f32(vmul_f32(v55, v55)));
        v51 += 12;
        if (*(_QWORD *)&v45 == v46)
          goto LABEL_31;
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
  }
LABEL_31:
  if (v58 == 1)
  {
    *(_QWORD *)&v76[0] = v20;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v76);
    swift_bridgeObjectRelease_n();
    return *(float32x2_t **)&v76[0];
  }
  return v20;
}

uint64_t Scene.convexCast(convexShape:fromPosition:fromOrientation:toPosition:toOrientation:query:mask:relativeTo:)(int8x16_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned __int32 v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t CollisionShape;
  uint64_t v14;
  float32x2_t *v15;
  float32x2_t *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float32x2_t FaceIndex;
  float32x2_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  float32x2_t *v27;
  uint64_t Entity;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  float v36;
  float v37;
  unsigned int ShapeIndex;
  int HasTriangleMeshHitInfo;
  char v40;
  float32x2_t v41;
  float32x2_t v42;
  simd_float3x3 v43;
  float32x2_t v44;
  unint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  __int128 v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  uint64_t result;
  float32x4_t v59;
  int v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v66;
  float32x4_t v67;
  __int128 v70;
  __int128 v72;
  float32x2_t *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  simd_float3x3 v77;
  simd_float4x4 v78;

  v76 = *MEMORY[0x24BDAC8D0];
  v9 = *a6;
  specialized static __ServiceLocator.shared.getter();
  if (a8)
  {
    *(double *)v78.columns[0].i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, a8);
    v63 = (float32x4_t)v78.columns[1];
    v64 = (float32x4_t)v78.columns[0];
    v62 = (float32x4_t)v78.columns[2];
    v59 = (float32x4_t)v78.columns[3];
    __invert_f4(v78);
  }
  else
  {
    v63 = *(float32x4_t *)&zmmword_21BE41220[16];
    v64 = *(float32x4_t *)zmmword_21BE41220;
    v62 = *(float32x4_t *)&zmmword_21BE41220[32];
    v59 = *(float32x4_t *)&zmmword_21BE41220[48];
  }
  if (one-time initialization token for identity == -1)
  {
    if (a8)
    {
LABEL_6:
      specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)a1.i64, a2, 1.0);
      specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)a3.i64, a4, 1.0);
      REMakeSRTFromMatrix();
      v67 = v11;
      a2.i32[3] = v10;
      REMakeSRTFromMatrix();
      a3 = v12;
      goto LABEL_9;
    }
  }
  else
  {
    swift_once();
    if (a8)
      goto LABEL_6;
  }
  v67 = (float32x4_t)a1;
LABEL_9:
  v74 = 0u;
  v75 = 0u;
  RECollisionCastConfigurationInitToDefault();
  RECollisionCastConfigurationSetQueryType();
  RECollisionCastConfigurationSetFilter();
  CollisionShape = RECollisionShapeAssetGetCollisionShape();
  RECollisionCastHitCollectionCreate();
  if (!a8)
  {
    if (CollisionShape)
    {
      RECollisionCastConvexVsScene();
      goto LABEL_14;
    }
LABEL_45:
    __break(1u);
    result = swift_release();
    __break(1u);
    return result;
  }
  if (!CollisionShape)
  {
    __break(1u);
    goto LABEL_45;
  }
  RECollisionCastConvexVsEntitySimulation();
LABEL_14:
  v14 = RECollisionCastHitCollectionCount();
  v15 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (v14 < 0)
    goto LABEL_43;
  v16 = v15;
  v61 = a8;
  v60 = v9;
  if (v14)
  {
    v17 = 0;
    v18 = vsubq_f32(a3, v67);
    v19 = vmulq_f32(v18, v18);
    v20 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
    v66 = v14;
    while (1)
    {
      if (RECollisionCastHitCollectionGetByIndex())
      {
        RECollisionCastHitGetObject();
        Entity = RECollisionObjectGetEntity();
        if (Entity)
          break;
      }
LABEL_21:
      if (v14 == ++v17)
        goto LABEL_33;
    }
    v29 = Entity;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v30 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_42;
      v32 = specialized static Entity.entityInfoType(_:)();
      if (v32)
      {
        v31 = (*(uint64_t (**)(void))(v32 + 232))();
        v33 = *(_QWORD *)(v31 + 16);
        swift_retain();
        MEMORY[0x22076D160](v33, 0);
        *(_QWORD *)(v31 + 16) = v29;
        MEMORY[0x22076D160](v29, v31);
        swift_release();
        goto LABEL_30;
      }
      v30 = makeEntity(for:)(v29);
    }
    v31 = v30;
LABEL_30:
    swift_retain();
    RECollisionCastHitGetPosition();
    v72 = v34;
    RECollisionCastHitGetNormal();
    v70 = v35;
    RECollisionCastHitGetHitPercentage();
    v37 = v36;
    ShapeIndex = RECollisionCastHitGetShapeIndex();
    HasTriangleMeshHitInfo = RECollisionCastHitHasTriangleMeshHitInfo();
    v40 = HasTriangleMeshHitInfo;
    if (HasTriangleMeshHitInfo)
    {
      FaceIndex = (float32x2_t)RECollisionCastHitGetFaceIndex();
      RECollisionCastHitGetFaceUV();
      v42 = v41;
      swift_release();
      v22 = v42;
    }
    else
    {
      swift_release();
      FaceIndex = 0;
      v22 = 0;
    }
    v23 = (unint64_t)v16[2];
    v24 = (unint64_t)v16[3];
    swift_retain();
    if (v23 >= v24 >> 1)
      v16 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v23 + 1, 1, v16);
    v14 = v66;
    v26 = v70;
    v25 = v72;
    HIDWORD(v25) = v67.i32[3];
    HIDWORD(v26) = a2.i32[3];
    v16[2] = (float32x2_t)(v23 + 1);
    v27 = &v16[12 * v23];
    v27[4] = (float32x2_t)v31;
    *(_OWORD *)v27[6].f32 = v25;
    *(_OWORD *)v27[8].f32 = v26;
    v27[10].f32[0] = v20 * v37;
    v27[11] = FaceIndex;
    v27[12] = v22;
    v27[13].i8[0] = v40 ^ 1;
    v27[14] = (float32x2_t)ShapeIndex;
    swift_release();
    goto LABEL_21;
  }
LABEL_33:
  RECollisionCastHitCollectionDestroy();
  v43.columns[1] = (simd_float3)v63;
  v43.columns[0] = (simd_float3)v64;
  v43.columns[2] = (simd_float3)v62;
  if (v61)
  {
    v44 = v16[2];
    if (v44)
    {
      v43.columns[0].i32[3] = 0;
      v43.columns[1].i32[3] = 0;
      v43.columns[2].i32[3] = 0;
      v77 = __invert_f3(v43);
      v45 = 0;
      v46 = (float32x4_t)vzip1q_s32((int32x4_t)v77.columns[0], (int32x4_t)v77.columns[1]);
      v46.i32[2] = v77.columns[2].i32[0];
      v47 = (float32x4_t)vtrn2q_s32((int32x4_t)v77.columns[0], (int32x4_t)v77.columns[1]);
      v47.i32[2] = v77.columns[2].i32[1];
      v48 = (float32x4_t)vzip2q_s32((int32x4_t)v77.columns[0], (int32x4_t)v77.columns[1]);
      v48.i32[2] = v77.columns[2].i32[2];
      v49 = v16[2];
      v50.i32[0] = vextq_s8(a1, a1, 8uLL).u32[0];
      v50.i32[1] = a1.i32[0];
      v51 = v16 + 6;
      while (v45 < *(_QWORD *)&v49)
      {
        ++v45;
        v52 = vaddq_f32(v59, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, COERCE_FLOAT(*(_OWORD *)v51->f32)), v63, *v51, 1), v62, *(float32x4_t *)v51->f32, 2));
        v53 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3);
        *(float32x2_t *)&v54 = vdiv_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v53.f32);
        v55 = vdivq_f32(v52, v53);
        v56 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(*(_OWORD *)v51[2].f32)), v47, v51[2], 1), v48, *(float32x4_t *)v51[2].f32, 2);
        v56.i32[3] = a1.i32[3];
        v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v54, 0);
        *((_QWORD *)&v54 + 1) = v55.u32[2];
        *(_OWORD *)v51->f32 = v54;
        *(float32x4_t *)v51[2].f32 = v56;
        v57.i32[0] = v55.i32[2];
        *(float32x2_t *)v55.f32 = vsub_f32(v57, v50);
        *(float32x2_t *)v55.f32 = vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
        v51[4].f32[0] = sqrtf(v55.f32[0]+ (float)(v55.f32[1]+ (float)((float)(*((float *)&v54 + 1) - *(float *)&a1.i32[1])* (float)(*((float *)&v54 + 1) - *(float *)&a1.i32[1]))));
        v51 += 12;
        if (*(_QWORD *)&v44 == v45)
          goto LABEL_38;
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
  }
LABEL_38:
  if (v60 == 1)
  {
    v73 = v16;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v73);
    swift_bridgeObjectRelease_n();
    return (uint64_t)v73;
  }
  return (uint64_t)v16;
}

_QWORD *Scene.contact(position:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  simd_float3 v3;
  simd_float3 v4;
  simd_float3 v5;
  _QWORD *v6;
  float32x4_t *v7;
  uint64_t Entity;
  uint64_t v9;
  float v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  _QWORD *v38;
  __int32 v40;
  __int32 v41;
  __int32 v42;
  __int32 v43;
  __int32 v44;
  unsigned int v45;
  __int32 v46;
  float32x2_t v47;
  float v48;
  __int32 v49;
  __int32 v50;
  __int32 v51;
  __int32 v52;
  __int32 v53;
  unsigned int v54;
  __int32 v55;
  simd_float3x3 v56;
  __int32 v57;
  float32x4_t v59;
  float32x4_t v60;
  simd_float3x3 v61;
  simd_float3x3 v62;
  simd_float3x3 v63;
  simd_float4x4 v64;
  simd_float4x4 v65;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (a1)
  {
    *(double *)v64.columns[0].i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, a1);
    v56.columns[0] = (simd_float3)v64.columns[0];
    v56.columns[1] = (simd_float3)v64.columns[1];
    v56.columns[2] = (simd_float3)v64.columns[2];
    v65 = __invert_f4(v64);
    simd_float4x4.transform(position:)(a2, (float32x4_t)v65.columns[0], (float32x4_t)v65.columns[1], (float32x4_t)v65.columns[2], (float32x4_t)v65.columns[3]);
  }
  else
  {
    v56.columns[2] = *(simd_float3 *)&zmmword_21BE41220[32];
    v56.columns[1] = *(simd_float3 *)&zmmword_21BE41220[16];
    v56.columns[0] = *(simd_float3 *)zmmword_21BE41220;
  }
  RESphereShapeCreate();
  RECollisionObjectCreate();
  if (one-time initialization token for identity != -1)
    goto LABEL_39;
  while (1)
  {
    RECollisionObjectSetPose();
    REContactSetCollectionCreate();
    if (a1)
    {
      RECollisionWorldGetContactsObjectVsEntitySimulationAdHoc();
    }
    else if (REServiceLocatorGetECSService())
    {
      RECollisionWorldGetContactsObjectVsSceneAdHoc();
    }
    REContactSetCollectionGetIterator();
    if (!REContactSetCollectionIteratorCurrent())
      break;
    v3 = v56.columns[0];
    v3.i32[3] = 0;
    v56.columns[0] = v3;
    v4 = v56.columns[1];
    v4.i32[3] = 0;
    v56.columns[1] = v4;
    v5 = v56.columns[2];
    v5.i32[3] = 0;
    v56.columns[2] = v5;
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (!REContactSetHasContact())
        goto LABEL_12;
      REContactSetObjectB();
      if (REContactSetObjectA())
      {
        Entity = RECollisionObjectGetEntity();
        if (Entity)
          break;
      }
      v21 = RECollisionObjectGetEntity();
      if (v21)
      {
        v9 = v21;
        REContactSetGetNormal();
        v23 = v22;
        v23.i32[3] = v57;
        if (a1)
        {
          v62 = v56;
          v60 = (float32x4_t)v62.columns[2];
          v63 = __invert_f3(v56);
          v24 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v63.columns[0], 2);
          v63.columns[0].i32[3] = v40;
          v25 = vdupq_laneq_s32((int32x4_t)v63.columns[1], 2);
          v63.columns[1].i32[3] = v41;
          v24.i64[0] = vzip1q_s32((int32x4_t)v24, v25).u64[0];
          v24.i64[1] = __PAIR64__(v45, v63.columns[2].u32[2]);
          v63.columns[2].i32[3] = v42;
          v26 = (float32x4_t)vzip1q_s32((int32x4_t)v63.columns[0], (int32x4_t)v63.columns[2]);
          v27 = vzip1q_s32((int32x4_t)v63.columns[1], (int32x4_t)0);
          v28.i64[0] = vzip1q_s32((int32x4_t)v26, v27).u64[0];
          v26.i64[0] = vzip2q_s32((int32x4_t)v26, v27).u64[0];
          v28.i64[1] = __PAIR64__(v43, vdupq_lane_s32(*(int32x2_t *)(&v63 + 32), 0).u32[2]);
          v26.i64[1] = __PAIR64__(v44, vdupq_lane_s32(*(int32x2_t *)(&v63 + 32), 1).u32[2]);
          v29 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v60.f32[0]), v26, *(float32x2_t *)v60.f32, 1), v24, v60, 2);
          v29.i32[3] = v46;
          v59 = v29;
          v43 = v28.i32[3];
          v44 = v26.i32[3];
        }
        else
        {
          v59 = v23;
        }
        if ((id)REEntityGetSwiftObject())
        {
LABEL_26:
          type metadata accessor for Entity();
          v30 = swift_dynamicCastClassUnconditional();
          goto LABEL_27;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
          goto LABEL_38;
LABEL_29:
        v32 = specialized static Entity.entityInfoType(_:)();
        if (v32)
        {
          v31 = (*(uint64_t (**)(void))(v32 + 232))();
          v33 = *(_QWORD *)(v31 + 16);
          swift_retain();
          MEMORY[0x22076D160](v33, 0);
          *(_QWORD *)(v31 + 16) = v9;
          MEMORY[0x22076D160](v9, v31);
          swift_release();
        }
        else
        {
          v30 = makeEntity(for:)(v9);
LABEL_27:
          v31 = v30;
        }
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v35 = v6[2];
        v34 = v6[3];
        v36 = a2;
        v37 = v59;
        if (v35 >= v34 >> 1)
        {
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v6);
          v36 = a2;
          v37 = v59;
          v6 = v38;
        }
        v6[2] = v35 + 1;
        v7 = (float32x4_t *)&v6[12 * v35];
        v7[2].i64[0] = v31;
        v7 += 2;
        v7[1] = v36;
        v7[2] = v37;
        v7[3].i32[0] = 0;
        v7[3].i64[1] = 0;
        v7[4].i64[0] = 0;
        v7[4].i8[8] = 1;
        v7[5].i64[0] = -1;
        swift_release();
      }
LABEL_12:
      REContactSetCollectionIteratorNext();
      if (!REContactSetCollectionIteratorCurrent())
        goto LABEL_37;
    }
    v9 = Entity;
    REContactSetGetNormal();
    v12 = (float32x4_t)COERCE_UNSIGNED_INT(0.0 - v10);
    v12.f32[1] = 0.0 - v11;
    v13 = v12;
    v13.f32[2] = 0.0 - v14;
    v59 = v13;
    if (a1)
    {
      v48 = 0.0 - v10;
      v47 = *(float32x2_t *)v12.f32;
      v61 = __invert_f3(v56);
      v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v61.columns[0], 2);
      v61.columns[0].i32[3] = v49;
      v16 = vdupq_laneq_s32((int32x4_t)v61.columns[1], 2);
      v61.columns[1].i32[3] = v50;
      v15.i64[0] = vzip1q_s32((int32x4_t)v15, v16).u64[0];
      v15.i64[1] = __PAIR64__(v54, v61.columns[2].u32[2]);
      v61.columns[2].i32[3] = v51;
      v17 = (float32x4_t)vzip1q_s32((int32x4_t)v61.columns[0], (int32x4_t)v61.columns[2]);
      v18 = vzip1q_s32((int32x4_t)v61.columns[1], (int32x4_t)0);
      v19.i64[0] = vzip1q_s32((int32x4_t)v17, v18).u64[0];
      v17.i64[0] = vzip2q_s32((int32x4_t)v17, v18).u64[0];
      v19.i64[1] = __PAIR64__(v52, vdupq_lane_s32(*(int32x2_t *)(&v61 + 32), 0).u32[2]);
      v17.i64[1] = __PAIR64__(v53, vdupq_lane_s32(*(int32x2_t *)(&v61 + 32), 1).u32[2]);
      v20 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v48), v17, v47, 1), v15, v59, 2);
      v53 = v17.i32[3];
      v20.i32[3] = v55;
      v52 = v19.i32[3];
      v59 = v20;
    }
    if ((id)REEntityGetSwiftObject())
      goto LABEL_26;
    if ((REEntityIsBeingDestroyed() & 1) == 0)
      goto LABEL_29;
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_once();
  }
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_37:
  REContactSetCollectionDestroy();
  RECollisionObjectDestroy();
  RECollisionShapeDestroy();
  return v6;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(float *__dst, float *__src, unint64_t a3, float *a4)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t result;
  char *v23;
  float *v24;
  float *v25;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 96;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 96;
  v25 = __dst;
  v24 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -95)
    {
      v17 = 24 * v11;
      if (a4 != __src || &__src[v17] <= a4)
        memmove(a4, __src, 96 * v11);
      v18 = &v4[v17];
      v23 = (char *)&v4[v17];
      v25 = v6;
      if (v7 < v6 && v10 >= 96)
      {
        v19 = (float *)(a3 - 96);
        do
        {
          v20 = v19 + 24;
          if (*(v18 - 12) >= *(v6 - 12))
          {
            v23 = (char *)(v18 - 24);
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              memmove(v19, v18 - 24, 0x60uLL);
            v21 = v6;
            v18 -= 24;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 24;
            if (v20 != v6 || v19 >= v6)
              memmove(v19, v6 - 24, 0x60uLL);
            v25 = v6 - 24;
            if (v21 <= v7)
              break;
          }
          v19 -= 24;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -95)
  {
    v12 = 24 * v9;
    if (a4 != __dst || &__dst[v12] <= a4)
      memmove(a4, __dst, v12 * 4);
    v13 = &v4[v12];
    v23 = (char *)v13;
    if ((unint64_t)v6 < a3 && v8 >= 96)
    {
      v14 = v4;
      while (1)
      {
        if (v6[12] >= v14[12])
        {
          v4 = v14 + 24;
          v16 = v14;
          v15 = v6;
          if (v7 == v14)
          {
            v14 += 24;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v14 += 24;
          }
        }
        else
        {
          v15 = v6 + 24;
          v16 = v6;
          if (v7 == v6 && v7 < v15)
            goto LABEL_18;
        }
        memmove(v7, v16, 0x60uLL);
LABEL_18:
        v7 += 24;
        if (v14 < v13)
        {
          v6 = v15;
          if ((unint64_t)v15 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static CollisionCastHit.TriangleHit.== infix(_:_:)(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2;

  if (*a1 != *a2)
    return 0;
  v2 = vceq_f32(a1[1], a2[1]);
  return v2.i32[0] & v2.i32[1] & 1;
}

BOOL specialized static CollisionCastHit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  float v6;
  uint64_t v7;
  float32x2_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  float v13;
  uint64_t v14;
  float32x2_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  float v21;
  float v22;
  char v23;
  int32x2_t v24;
  float v25;
  float v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) != *(_QWORD *)(*(_QWORD *)a2 + 16))
    return 0;
  v3 = 0;
  v5 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v6 = *(float *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(float32x2_t *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  v13 = *(float *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(float32x2_t *)(a2 + 64);
  v16 = *(unsigned __int8 *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  while (1)
  {
    v29 = v5;
    v21 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v30 = v12;
    v22 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v18 = v21 == v22;
    if (v3 == 2)
      break;
    while (1)
    {
      ++v3;
      if (v18)
        break;
      v18 = 0;
      result = 0;
      if (v3 == 2)
        return result;
    }
  }
  if (v21 != v22)
    return 0;
  v19 = 0;
  while (1)
  {
    v27 = v4;
    v25 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    v28 = v11;
    v26 = *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    v20 = v25 == v26;
    if (v19 == 2)
      break;
    while (1)
    {
      ++v19;
      if (v20)
        break;
      v20 = 0;
      result = 0;
      if (v19 == 2)
        return result;
    }
  }
  result = 0;
  if (v25 == v26 && v6 == v13)
  {
    if ((v9 & 1) != 0)
    {
      if (!v16)
        return 0;
    }
    else
    {
      if (v7 == v14)
        v23 = v16;
      else
        v23 = 1;
      if ((v23 & 1) != 0)
        return 0;
      v24 = vceq_f32(v8, v15);
      if ((v24.i32[0] & v24.i32[1] & 1) == 0)
        return 0;
    }
    return v10 == v17;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionCastQueryType and conformance CollisionCastQueryType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionCastQueryType and conformance CollisionCastQueryType;
  if (!lazy protocol witness table cache variable for type CollisionCastQueryType and conformance CollisionCastQueryType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionCastQueryType, &type metadata for CollisionCastQueryType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionCastQueryType and conformance CollisionCastQueryType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionGroup and conformance CollisionGroup()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup;
  if (!lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionGroup, &type metadata for CollisionGroup);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup;
  if (!lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionGroup, &type metadata for CollisionGroup);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup;
  if (!lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionGroup, &type metadata for CollisionGroup);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup;
  if (!lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionGroup, &type metadata for CollisionGroup);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollisionCastQueryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BD70F60 + 4 * byte_21BE78C95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BD70F94 + 4 * byte_21BE78C90[v4]))();
}

uint64_t sub_21BD70F94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD70F9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD70FA4);
  return result;
}

uint64_t sub_21BD70FB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD70FB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BD70FBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD70FC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollisionCastQueryType()
{
  return &type metadata for CollisionCastQueryType;
}

ValueMetadata *type metadata accessor for CollisionGroup()
{
  return &type metadata for CollisionGroup;
}

ValueMetadata *type metadata accessor for CollisionFilter()
{
  return &type metadata for CollisionFilter;
}

uint64_t initializeWithCopy for CollisionCastHit(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CollisionCastHit(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy88_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CollisionCastHit(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollisionCastHit(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollisionCastHit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CollisionCastHit()
{
  return &type metadata for CollisionCastHit;
}

ValueMetadata *type metadata accessor for CollisionCastHit.TriangleHit()
{
  return &type metadata for CollisionCastHit.TriangleHit;
}

void static AudioFileResource.url(forAssetNamed:in:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t *v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v25 = a2;
  v26 = a3;
  v23 = a4;
  v24 = a1;
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = (uint64_t *)&unk_24DF97CD8;
  while (v11 < 8)
  {
    v15 = *(v12 - 1);
    v14 = *v12;
    swift_bridgeObjectRetain();
    v16 = (void *)MEMORY[0x220768C3C](v24, v25);
    if (v14)
    {
      v17 = (void *)MEMORY[0x220768C3C](v15, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
    }
    v18 = objc_msgSend(v26, sel_URLForResource_withExtension_, v16, v17, v23);

    if (v18)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v19 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v19(v10, v7, v4);
      v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v13(v10, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        swift_arrayDestroy();
        v20 = v23;
        v19(v23, v10, v4);
        v21 = v20;
        v22 = 0;
LABEL_12:
        v13(v21, v22, 1, v4);
        return;
      }
    }
    else
    {
      v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v13(v10, 1, 1, v4);
    }
    ++v11;
    outlined destroy of URL?((uint64_t)v10);
    v12 += 2;
    if (v11 == 8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      swift_arrayDestroy();
      v21 = v23;
      v22 = 1;
      goto LABEL_12;
    }
  }
  __break(1u);
}

uint64_t static AudioFileResource.makeAssetRef(bundle:name:configuration:inputMode:)(void *a1, uint64_t a2, void *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  void *v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  id v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  unint64_t v65;
  uint64_t *v66;
  _QWORD v67[3];
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  void *v93;

  v81 = a2;
  v93 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v78 = *(_QWORD *)(v11 - 8);
  v79 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (_QWORD *)((char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = *a4;
  v74 = a4[1];
  v73 = a4[2];
  v72 = *((_QWORD *)a4 + 1);
  v71 = a4[16];
  v70 = *((_QWORD *)a4 + 3);
  v69 = a4[32];
  v18 = *((_QWORD *)a4 + 6);
  v68 = *((_QWORD *)a4 + 5);
  v77 = *((unsigned int *)a4 + 14);
  v76 = a4[60];
  v19 = *a5;
  type metadata accessor for OS_dispatch_queue();
  *v17 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BEE5610], v14);
  LOBYTE(a5) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, v14);
  if ((a5 & 1) != 0)
  {
    v67[2] = v19;
    v21 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v21, (uint64_t)&v84);
    v22 = v87;
    v23 = v88;
    __swift_project_boxed_opaque_existential_1(&v84, v87);
    v67[1] = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
    if (a1)
      v24 = a1;
    else
      v24 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v25 = v93;
    v26 = v81;
    v27 = v18;
    v28 = a1;
    v29 = objc_msgSend(v24, sel_resourcePath);
    if (v29)
    {
      v30 = (uint64_t)v13;

      if (a1)
      {
        swift_bridgeObjectRetain_n();
        v31 = v28;
      }
      else
      {
        v43 = (void *)objc_opt_self();
        swift_bridgeObjectRetain_n();
        v31 = objc_msgSend(v43, sel_mainBundle);
      }
      v44 = v77;
      v45 = v28;
      static AudioFileResource.url(forAssetNamed:in:)(v26, (uint64_t)v25, v31, v10);

      v46 = v78;
      v40 = v79;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v10, 1, v79) == 1)
      {
        outlined destroy of URL?((uint64_t)v10);
        v47 = v76;
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v30, v10, v40);
        LOBYTE(v84) = v76;
        v48 = v80;
        v49 = specialized static AudioFileResource.layoutTag(for:layoutTagOverride:)(v30, v44 | ((unint64_t)v76 << 32));
        if (v48)
        {

          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v40);
          swift_bridgeObjectRelease();
          return v40;
        }
        LODWORD(v44) = v49;
        v80 = 0;
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v40);
        v47 = 0;
      }
      LOBYTE(v84) = v75;
      BYTE1(v84) = v74;
      BYTE2(v84) = v73;
      v85 = v72;
      v86 = v71;
      v87 = v70;
      LOBYTE(v88) = v69;
      v89 = v68;
      v90 = v27;
      v91 = v44;
      v92 = v47;
      type metadata accessor for REAudioFileAssetConfigurationWrapper();
      swift_initStackObject();
      REAudioFileAssetConfigurationWrapper.init(configuration:)((char *)&v84);
      REAudioFileAssetConfigurationSetInputMode();
      v50 = (void *)MEMORY[0x220768C3C](v26, v25);
      v51 = REAudioFileAssetDescriptorCreateWithBundleResource();

      swift_bridgeObjectRelease();
      if (v51)
      {
        v40 = REAudioFileAssetCreateWithDescriptor();
        RERelease();
        if (v40)
        {
          swift_release();

          return v40;
        }
        v82 = 0;
        v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(66);
        v56._countAndFlagsBits = 0xD000000000000032;
        v56._object = (void *)0x800000021BE92200;
        String.append(_:)(v56);
        v57._countAndFlagsBits = v26;
        v57._object = v25;
        String.append(_:)(v57);
        v58._countAndFlagsBits = 0x646E7562206E6920;
        v58._object = (void *)0xEB0000000020656CLL;
        String.append(_:)(v58);
        v55 = objc_msgSend(v24, sel_description);
      }
      else
      {
        v82 = 0;
        v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(71);
        v52._countAndFlagsBits = 0xD000000000000037;
        v52._object = (void *)0x800000021BE921C0;
        String.append(_:)(v52);
        v53._countAndFlagsBits = v26;
        v53._object = v25;
        String.append(_:)(v53);
        v54._countAndFlagsBits = 0x646E7562206E6920;
        v54._object = (void *)0xEB0000000020656CLL;
        String.append(_:)(v54);
        v55 = objc_msgSend(v24, sel_description);
      }
      v59 = v55;
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v62 = v61;

      v63._countAndFlagsBits = v60;
      v63._object = v62;
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._countAndFlagsBits = 46;
      v64._object = (void *)0xE100000000000000;
      String.append(_:)(v64);
      v40 = v82;
      v65 = v83;
      lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
      swift_allocError();
      *v66 = v40;
      v66[1] = v65;
      swift_willThrow();
      swift_release();
    }
    else
    {
      v84 = 0;
      v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      v84 = 0xD00000000000001DLL;
      v85 = 0x800000021BE921A0;
      v32._countAndFlagsBits = v26;
      v32._object = v25;
      String.append(_:)(v32);
      v33._countAndFlagsBits = 0x646E7562206E6920;
      v33._object = (void *)0xEB0000000020656CLL;
      String.append(_:)(v33);
      v34 = objc_msgSend(v24, sel_description);
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v37 = v36;

      v38._countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 46;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      v40 = v84;
      v41 = v85;
      lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
      swift_allocError();
      *v42 = v40;
      v42[1] = v41;
      swift_willThrow();
    }

    return v40;
  }
  __break(1u);
  return result;
}

void *static AudioFileResource.loadFromBundle(named:in:configuration:legacyInputMode:)(uint64_t a1, void *a2, void *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  id v19;
  id v20;
  void *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  void *v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  int v64;
  void *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  char v74;
  uint64_t v75;
  char v76;
  void *v77;
  uint64_t v78;
  int v79;
  char v80;
  int v81;
  unsigned __int8 v82;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a4;
  v67 = a4[1];
  v68 = v17;
  v66 = a4[2];
  v65 = (void *)*((_QWORD *)a4 + 1);
  v64 = a4[16];
  v63 = *((_QWORD *)a4 + 3);
  v62 = a4[32];
  v61 = (void *)*((_QWORD *)a4 + 5);
  v70 = *((_QWORD *)a4 + 6);
  v81 = *((_DWORD *)a4 + 14);
  v18 = a4[60];
  v69 = *a5;
  if (a3)
    v19 = a3;
  else
    v19 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v20 = a3;
  static AudioFileResource.url(forAssetNamed:in:)(a1, (uint64_t)a2, v19, v12);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of URL?((uint64_t)v12);
    v21 = v71;
    v22 = specialized static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(a1, a2, a3);
    if (!v21)
      return (void *)v22;
    lazy protocol witness table accessor for type AudioFileResource.Error and conformance AudioFileResource.Error();
    swift_allocError();
    *v23 = a1;
    v23[1] = (uint64_t)a2;
    swift_bridgeObjectRetain();
    swift_willThrow();

    return a3;
  }
  v59 = v18;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  v58 = v16;
  v24 = URL.pathExtension.getter();
  v26 = v25;
  v60 = a1;
  v27 = (void *)MEMORY[0x220768C3C](a1, a2);
  v28 = objc_msgSend(v27, sel_pathExtension);

  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v31 = v30;

  v32 = v24 == v29 && v26 == v31;
  v57 = v13;
  v56 = v14;
  v54 = (uint64_t)a2;
  v55 = a3;
  if (v32)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {
      v72 = v60;
      v73 = a2;
      swift_bridgeObjectRetain();
      v34._countAndFlagsBits = 46;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      v36 = v72;
      v35 = v73;
      v37 = URL.pathExtension.getter();
      v39 = v38;
      v72 = v36;
      v73 = v35;
      swift_bridgeObjectRetain();
      v40._countAndFlagsBits = v37;
      v40._object = v39;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v41 = v72;
      v42 = v73;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRetain();
  v41 = v60;
  v42 = a2;
LABEL_15:
  v44 = v67;
  v43 = v68;
  LOBYTE(v72) = v68;
  BYTE1(v72) = v67;
  v45 = v66;
  BYTE2(v72) = v66;
  v46 = v65;
  v73 = v65;
  v47 = v64;
  v74 = v64;
  v48 = v63;
  v75 = v63;
  v49 = v62;
  v76 = v62;
  a3 = v61;
  v77 = v61;
  v78 = v70;
  v79 = v81;
  v80 = v59;
  v82 = v69;
  v50 = (uint64_t)v71;
  v71 = (void *)static AudioFileResource.makeAssetRef(bundle:name:configuration:inputMode:)(v55, v41, v42, (unsigned __int8 *)&v72, &v82);
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v57);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    LOBYTE(v72) = v43;
    BYTE1(v72) = v44;
    BYTE2(v72) = v45;
    v73 = v46;
    v74 = v47;
    v75 = v48;
    v76 = v49;
    v77 = a3;
    v78 = v70;
    v79 = v81;
    v80 = v59;
    v82 = v69;
    swift_bridgeObjectRetain();
    v51 = (uint64_t)v58;
    a3 = (void *)specialized static AudioFileResource.load(assetRef:url:resourceName:configuration:legacyInputMode:)((uint64_t)v71, (uint64_t)v58, v60, v54, (unsigned __int8 *)&v72, &v82);
    swift_bridgeObjectRelease();
    RERelease();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v51, v57);
  }
  return a3;
}

uint64_t static AudioFileResource.load(contentsOf:withName:configuration:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t inited;
  unsigned __int8 v16;
  unsigned __int8 v17[8];
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  int v23;
  char v24;

  v5 = *(_BYTE *)(a4 + 1);
  v6 = *(_BYTE *)(a4 + 2);
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(_BYTE *)(a4 + 16);
  v9 = *(_QWORD *)(a4 + 24);
  v10 = *(_BYTE *)(a4 + 32);
  v11 = *(_DWORD *)(a4 + 56);
  v12 = *(_BYTE *)(a4 + 60);
  v17[0] = *(_BYTE *)a4;
  v17[1] = v5;
  v17[2] = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  v22 = *(_OWORD *)(a4 + 40);
  v23 = v11;
  v24 = v12;
  v16 = 1;
  v13 = specialized static AudioFileResource.loadFromURL(contentsOf:withName:configuration:legacyInputMode:)(a1, a2, a3, v17, &v16);
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = type metadata accessor for AudioFileResource();
    *(_QWORD *)(inited + 64) = &protocol witness table for AudioFileResource;
    *(_QWORD *)(inited + 32) = v13;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v13;
}

void *static AudioFileResource.load(named:in:configuration:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  id v15;
  char v16;
  id v17;
  id v18;
  void *v19;
  uint64_t inited;
  __int128 v22;
  uint64_t v25;
  unsigned __int8 v26[8];
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  int v32;
  char v33;
  int v34;
  unsigned __int8 v35;

  v5 = *(_BYTE *)a4;
  v6 = *(_BYTE *)(a4 + 1);
  v7 = *(_BYTE *)(a4 + 2);
  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_BYTE *)(a4 + 16);
  v10 = *(_QWORD *)(a4 + 24);
  v11 = *(_BYTE *)(a4 + 32);
  v12 = *(_OWORD *)(a4 + 40);
  v13 = *(_DWORD *)(a4 + 56);
  v14 = *(_BYTE *)(a4 + 60);
  if (a3)
  {
    v15 = a3;
  }
  else
  {
    v34 = *(_DWORD *)(a4 + 56);
    v22 = v12;
    v16 = v14;
    v17 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v14 = v16;
    v13 = v34;
    v12 = v22;
    v15 = v17;
  }
  v26[0] = v5;
  v26[1] = v6;
  v26[2] = v7;
  v27 = v8;
  v28 = v9;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  v33 = v14;
  v35 = 1;
  v18 = a3;
  v19 = static AudioFileResource.loadFromBundle(named:in:configuration:legacyInputMode:)(a1, a2, v15, v26, &v35);

  if (!v25)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = type metadata accessor for AudioFileResource();
    *(_QWORD *)(inited + 64) = &protocol witness table for AudioFileResource;
    *(_QWORD *)(inited + 32) = v19;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v19;
}

void *static AudioFileResource.load(named:from:in:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  uint64_t inited;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t AudioAssetID;
  uint64_t AssetId;
  os_log_type_t type;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;

  v28 = a3;
  v29 = (void *)a4;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 58;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v14 = v28;
  v13 = v29;
  if (a5)
    v15 = a5;
  else
    v15 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  LOWORD(v28) = 1;
  BYTE2(v28) = 0;
  v29 = 0;
  v30 = -1;
  v31 = 0;
  v32 = -1;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  LOBYTE(v37) = 1;
  v16 = a5;
  v17 = static AudioFileResource.loadFromBundle(named:in:configuration:legacyInputMode:)(v14, v13, v15, (unsigned __int8 *)&v28, (unsigned __int8 *)&v37);
  swift_bridgeObjectRelease();

  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = type metadata accessor for AudioFileResource();
    *(_QWORD *)(inited + 64) = &protocol witness table for AudioFileResource;
    *(_QWORD *)(inited + 32) = v17;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    if (one-time initialization token for audio != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.audio);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      type = v21;
      v22 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v28 = v27;
      *(_DWORD *)v22 = 136315906;
      swift_bridgeObjectRetain();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2048;
      AudioAssetID = REAudioFileAssetGetAudioAssetID();
      swift_release();
      v37 = AudioAssetID;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v22 + 22) = 2048;
      AssetId = REAssetGetAssetId();
      swift_release();
      v37 = AssetId;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v22 + 32) = 2080;
      swift_bridgeObjectRetain();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v20, type, "[API/RealityKit] Loading AudioFileResource %s with audioAssetID: %llu and REAssetID: %llu from scene: %s", (uint8_t *)v22, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v27, -1, -1);
      MEMORY[0x220772F44](v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
  }
  return v17;
}

void AudioFileResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t AudioFileResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

id @nonobjc AVAudioFile.init(forReading:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;
  NSURL *v15;

  v2 = v1;
  v15 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v15);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend(v2, sel_initForReading_error_, v4, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

uint64_t specialized static AudioFileResource.layoutTag(for:layoutTagOverride:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t result;
  void *v13;
  id v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v5 = type metadata accessor for URL();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 16))(v8, a1, v6);
  v10 = objc_allocWithZone(MEMORY[0x24BDB1810]);
  v11 = @nonobjc AVAudioFile.init(forReading:)((uint64_t)v8);
  if (v2)
    return a2;
  v13 = v11;
  v14 = objc_msgSend(v11, sel_fileFormat);

  if ((a2 & 0x100000000) != 0)
  {
    specialized static AudioResource.supportedChannelLayoutTag(for:)(v14);
    a2 = v15;

    return a2;
  }
  if ((_DWORD)a2 != 1668116578 && (_DWORD)a2)
  {
    if (objc_msgSend(v14, sel_channelCount) != (unsigned __int16)a2)
    {
      lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
      swift_allocError();
      *v16 = 1;
      swift_willThrow();
    }

    return a2;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AudioFileResource.makeAssetRef(from:withName:configuration:inputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  NSURL *v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t *v17;
  void *v19;
  void *v20;
  uint64_t FileNameAliasAssetDescriptor;
  int v22;
  NSURL *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;

  v45 = a2;
  v33 = a4[1];
  v34 = *a4;
  v32 = a4[2];
  v31 = *((_QWORD *)a4 + 1);
  v30 = a4[16];
  v29 = *((_QWORD *)a4 + 3);
  v28 = a4[32];
  v7 = *((_QWORD *)a4 + 6);
  v27 = *((_QWORD *)a4 + 5);
  v35 = *((unsigned int *)a4 + 14);
  v8 = a4[60];
  v9 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v9, (uint64_t)&v36);
  v10 = v39;
  v11 = v40;
  __swift_project_boxed_opaque_existential_1(&v36, v39);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  REEngineGetServiceLocator();
  if ((URL.isFileURL.getter() & 1) == 0)
    goto LABEL_6;
  if (URL.pathExtension.getter() == 0xD000000000000011 && v12 == 0x800000021BE92120)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      if (a3)
      {
        URL._bridgeToObjectiveC()(v14);
        v20 = v19;
        String.utf8CString.getter();
        FileNameAliasAssetDescriptor = REAssetManagerRegisterAndCreateFileNameAliasAssetDescriptor();

        swift_release();
        if (!FileNameAliasAssetDescriptor)
          goto LABEL_6;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        LOBYTE(v36) = v8;
        v22 = specialized static AudioFileResource.layoutTag(for:layoutTagOverride:)(a1, v35 | ((unint64_t)v8 << 32));
        if (v4)
        {
          swift_bridgeObjectRelease_n();
          return a1;
        }
        LOBYTE(v36) = v34;
        BYTE1(v36) = v33;
        BYTE2(v36) = v32;
        v37 = v31;
        v38 = v30;
        v39 = v29;
        LOBYTE(v40) = v28;
        v41 = v27;
        v42 = v7;
        v43 = v22;
        v44 = 0;
        type metadata accessor for REAudioFileAssetConfigurationWrapper();
        swift_initStackObject();
        REAudioFileAssetConfigurationWrapper.init(configuration:)((char *)&v36);
        REAudioFileAssetConfigurationSetInputMode();
        URL._bridgeToObjectiveC()(v23);
        v25 = v24;
        v26 = REAudioFileAssetDescriptorCreateWithURL();
        swift_release();
        swift_bridgeObjectRelease();

        if (!v26)
          goto LABEL_6;
      }
      REAssetRegistrationOptionsCreate();
      REAssetRegistrationOptionsSetIsMutable();
      a1 = REAssetHandleCreateFromAssetRegistrationOptions();
      RERelease();
      RERelease();
      return a1;
    }
  }
LABEL_6:
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v36 = 0xD00000000000001BLL;
  v37 = 0x800000021BE92100;
  v15._countAndFlagsBits = URL.path.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16 = v36;
  a1 = v37;
  lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
  swift_allocError();
  *v17 = v16;
  v17[1] = a1;
  swift_willThrow();
  return a1;
}

uint64_t specialized static AudioFileResource.load(assetRef:url:resourceName:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[12];
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38[8];
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  int v47;
  unsigned __int8 v48;

  v37 = a4;
  v35 = a1;
  v36 = a3;
  v34 = a2;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47 = *a5;
  v16 = a5[1];
  v32 = a5[2];
  v33 = v16;
  v31 = *((_QWORD *)a5 + 1);
  v30 = a5[16];
  v29 = *((_QWORD *)a5 + 3);
  v28 = a5[32];
  v17 = *((_QWORD *)a5 + 6);
  v27 = *((_QWORD *)a5 + 5);
  v26 = *((_DWORD *)a5 + 14);
  v25 = a5[60];
  v24 = *a6;
  v18 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v19 = *(_QWORD *)(v18 + 24);
  swift_unownedRetainStrong();
  v20 = *(id *)(v19 + 32);
  swift_release();
  *v15 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE5610], v12);
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v34, v8);
    v38[0] = v47;
    v38[1] = v33;
    v38[2] = v32;
    v39 = v31;
    v40 = v30;
    v41 = v29;
    v42 = v28;
    v43 = v27;
    v44 = v17;
    v45 = v26;
    v46 = v25;
    v48 = v24;
    type metadata accessor for AudioFileResource();
    swift_allocObject();
    swift_bridgeObjectRetain();
    v22 = v37;
    swift_bridgeObjectRetain();
    return AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(v35, v11, v36, v22, v38, &v48);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static AudioFileResource.loadFromURL(contentsOf:withName:configuration:legacyInputMode:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29;
  char v30;
  unsigned __int8 v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  int v68;
  unsigned __int8 v69;

  v54 = a5;
  v56 = a2;
  v8 = type metadata accessor for URL();
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a4;
  v11 = a4[1];
  v12 = a4[2];
  v13 = *((_QWORD *)a4 + 1);
  v14 = a4[16];
  v15 = *((_QWORD *)a4 + 3);
  v16 = a4[32];
  v17 = *((_QWORD *)a4 + 5);
  v18 = *((_QWORD *)a4 + 6);
  v19 = *((_DWORD *)a4 + 14);
  v20 = a4[60];
  v21 = *v54;
  v68 = v10;
  v57 = v10;
  v50 = v12;
  v51 = v11;
  v58 = v11;
  v59 = v12;
  v53 = v13;
  v54 = a1;
  v60 = v13;
  v52 = v14;
  v61 = v14;
  v62 = v15;
  v63 = v16;
  v64 = v17;
  v65 = v18;
  v66 = v19;
  v67 = v20;
  v69 = v21;
  v22 = v55;
  v49 = a3;
  v23 = specialized static AudioFileResource.makeAssetRef(from:withName:configuration:inputMode:)((uint64_t)a1, v56, a3, (char *)&v57);
  if (!v22)
  {
    v38 = 0;
    v39 = v20;
    v40 = v21;
    v41 = v19;
    v42 = v18;
    v43 = v17;
    v44 = v16;
    v45 = v15;
    v55 = v23;
    v24 = v46;
    v25 = v47;
    v26 = v48;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v47 + 16))(v46, v54, v48);
    if (v49)
    {
      v37 = v49;
    }
    else
    {
      v56 = URL.lastPathComponent.getter();
      v37 = v27;
    }
    v17 = v45;
    v28 = v44;
    v29 = v40;
    v30 = v39;
    v31 = v68;
    v32 = *(void (**)(char *, uint64_t))(v25 + 8);
    swift_bridgeObjectRetain();
    v32(v24, v26);
    v57 = v31;
    v58 = v51;
    v59 = v50;
    v60 = v53;
    v61 = v52;
    v62 = v17;
    v63 = v28;
    v64 = v43;
    v65 = v42;
    v66 = v41;
    v67 = v30;
    v69 = v29;
    v33 = v38;
    v34 = specialized static AudioFileResource.load(assetRef:url:resourceName:configuration:legacyInputMode:)(v55, (uint64_t)v54, v56, v37, &v57, &v69);
    if (!v33)
      v17 = v34;
    swift_bridgeObjectRelease();
    RERelease();
  }
  return v17;
}

uint64_t specialized Array.append(_:)()
{
  _QWORD *v0;

  MEMORY[0x220768F0C]();
  if (*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

void _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation32__RKAudioSpatialModeSelectionUSDO_s5NeverOSo8USKTokenCTg504_s10c101Kit29__RKEntityActionSpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k19C0A10Foundation32__efgH10USDOXEfU2_Tf1cn_n(char a1)
{
  __asm { BR              X10 }
}

id sub_21BD7337C()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v1 = (void *)MEMORY[0x220768C3C](0x69746170536E6F6ELL, 0xEA00000000006C61);
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithString_, v1);

  return v2;
}

void _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation42__RKEntityActionMultiplePerformBehaviorUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8l23C0A10Foundation02__cD26ghI10USDOXEfU4_Tf1cn_n(char a1)
{
  __asm { BR              X10 }
}

id sub_21BD73448()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v1 = (void *)MEMORY[0x220768C3C](0x776F6C6C61, 0xE500000000000000);
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithString_, v1);

  return v2;
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation26__RKEntityMoveSelectionUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__e86ActionSpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8j22C0A10Foundation02__C16fG11USDOXEfU20_Tf1cn_n(char a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;

  if (a1 == 2)
    return 0;
  if ((a1 & 1) != 0)
    v2 = 0x65766974616C6572;
  else
    v2 = 0x6574756C6F736261;
  v3 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v4 = (void *)MEMORY[0x220768C3C](v2, 0xE800000000000000);
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v3, sel_initWithString_, v4);

  return v1;
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation33__RKEntityActionVisibilityTypeUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k23C0A10Foundation02__cD17gH11USDOXEfU24_Tf1cn_nTm(unsigned __int8 a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;

  if (a1 == 10)
    return 0;
  v2 = __RKEntityActionVisibilityTypeUSD.rawValue.getter(a1);
  v4 = v3;
  v5 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v6 = (void *)MEMORY[0x220768C3C](v2, v4);
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v5, sel_initWithString_, v6);

  return v1;
}

void specialized EnumeratedSequence.Iterator.next()(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD, __n128)@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  v11 = v3[1];
  v13 = *(_QWORD *)(*v3 + 16);
  if (v11 == v13)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(a3, 1, 1, v6, v8);
    return;
  }
  if (v11 >= v13)
  {
    __break(1u);
  }
  else
  {
    v14 = a2(0, v8);
    v15 = v12
        + ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v11;
    v3[1] = v11 + 1;
    v16 = (uint64_t)&v10[*(int *)(v6 + 48)];
    v17 = v3[2];
    outlined init with copy of __RKEntityActionSpecification(v15, v16, (uint64_t (*)(_QWORD))a2);
    if (!__OFADD__(v17, 1))
    {
      v3[2] = v17 + 1;
      v18 = (uint64_t)a3 + *(int *)(v6 + 48);
      *a3 = v17;
      outlined init with take of __RKEntityActionSpecification(v16, v18, (uint64_t (*)(_QWORD))a2);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, v6);
      return;
    }
  }
  __break(1u);
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x220769770](i - 4, a1) : *(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = objc_msgSend(v4, sel_path);

      if (v7)
      {
        MEMORY[0x220768F0C]();
        if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

void setInfoId(_:on:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;

  v6 = (void *)*MEMORY[0x24BEBEDB0];
  v7 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  swift_bridgeObjectRetain();
  v8 = (void *)MEMORY[0x220768C3C](a1, a2);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initWithString_, v8);

  v10 = (void *)MEMORY[0x220768C3C](0x64693A6F666E69, 0xE700000000000000);
  v11 = objc_msgSend(a3, sel_newPropertyWithName_type_role_, v10, v6, 0);

  if (v11)
  {
    if (v9)
    {
      objc_msgSend(v11, sel_setTokenValue_, v9);

      return;
    }
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_QWORD *)(v15 + 32) = 0;
    v9 = v11;
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)v12 = xmmword_21BE79350;
    *(_QWORD *)(v12 + 16) = v6;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = a3;
    v13 = v6;
    v14 = a3;
  }
  swift_willThrow();

}

id USKToken.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)MEMORY[0x220768C3C](a1, a2);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithString_, v5);

  return v6;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __USDEncoder.resolveResourcePath(path:)(Swift::String path)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *);
  void *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  Swift::String_optional result;
  uint64_t v26;
  char *v27;
  void *v28;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - v12;
  v14 = *(void (**)(char *))v1;
  if (!*(_QWORD *)v1)
    goto LABEL_4;
  v27 = v11;
  v15 = *(void **)(v1 + 8);
  swift_retain();
  URL.init(string:)();
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v16(v7, 1, v8) == 1)
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
LABEL_4:
    v16 = 0;
    v15 = 0;
    goto LABEL_10;
  }
  v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v17(v13, v7, v8);
  v18 = v28;
  v14(v13);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
  }
  else
  {
    v28 = v15;
    if (v16(v4, 1, v8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
      v16 = 0;
      v15 = 0;
    }
    else
    {
      v19 = v27;
      v17(v27, v4, v8);
      v20 = v19;
      v16 = (unsigned int (*)(char *, uint64_t, uint64_t))URL.path.getter();
      v15 = v21;
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
      v22 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v22((uint64_t)v20, v8);
      v22((uint64_t)v13, v8);
    }
  }
LABEL_10:
  v23 = (uint64_t)v16;
  v24 = v15;
  result.value._object = v24;
  result.value._countAndFlagsBits = v23;
  return result;
}

void __RKEntityInteractionSpecification.encode(to:at:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __RKEntityInteractionSpecification.encode(to:at:)(a1, a2, (uint64_t (*)(_QWORD *))__RKEntityInteractionSpecification.encode(to:at:), (void (*)(void))lazy protocol witness table accessor for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:), a3);
}

unint64_t lazy protocol witness table accessor for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:))
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Error #1 in __RKEntityInteractionSpecification.encode(to:at:), &unk_24DFD2220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:))
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Error #1 in __RKEntityInteractionSpecification.encode(to:at:), &unk_24DFD2220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:));
  }
  return result;
}

id __RKEntityInteractionSpecification.encode(to:at:)(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t (*v17)(uint64_t);
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  int EnumCaseMultiPayload;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  id v40;
  void *v41;
  void *v42;
  Swift::String v43;
  void *v44;
  void *v45;
  id v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  Class isa;
  uint64_t v55;
  uint64_t v56;
  id result;
  uint64_t i;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  Class v69;
  void *v70;
  void *v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  id v76;
  id v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  Class v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  void *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  id v116;
  uint64_t (*v117)(uint64_t);
  unint64_t v118;

  v104 = a2;
  v99 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v99);
  v100 = (uint64_t)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
  MEMORY[0x24BDAC7A8](v5);
  v105 = (uint64_t *)((char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v9 = (unint64_t)&v98 - v8;
  v101 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v101);
  v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v98 - v13);
  v15 = *(_QWORD *)a1;
  v16 = *(void **)(a1 + 8);
  v17 = *(uint64_t (**)(uint64_t))(a1 + 24);
  v18 = *(id *)(a1 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v15);
  v19 = v18;
  swift_retain();
  v20 = (void *)MEMORY[0x220768C3C](0xD000000000000014, 0x800000021BE923E0);
  v109 = v19;
  v21 = v19;
  v22 = v104;
  v103 = objc_msgSend(v21, sel_newNodeAtPath_type_);
  if (!v103)
  {
    lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
    swift_allocError();
    *v30 = v22;
    v30[1] = v20;
    v31 = v22;
    swift_willThrow();
    v32 = v109;

    outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
    swift_release();

    return v103;
  }
  v106 = v15;
  v107 = v17;
  v108 = v16;

  outlined init with copy of __RKEntityActionSpecification(v102, (uint64_t)v14, type metadata accessor for __RKEntityTriggerSpecification);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v24 = v109;
  if (EnumCaseMultiPayload != 5)
  {
    v105 = v14;
    USKObjectPath.appendingPathComponent(_:)(0x5272656767697254, (void *)0xEB00000000746F6FLL);
    v34 = v33;
    v35 = v106;
    v114 = v106;
    v115 = v108;
    v116 = v24;
    v117 = v107;
    v36 = __RKEntityTriggerSpecification.encode(to:at:)((uint64_t)&v114, v33);
    v11 = v2;
    if (v2)
    {
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v35);

      v29 = v103;
      swift_release();
    }
    else
    {
      v48 = v36;
      v49 = (void *)*MEMORY[0x24BEBED90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_21BE50AD0;
      *(_QWORD *)(v50 + 32) = objc_msgSend(v48, sel_path);
      v114 = v50;
      specialized Array._endMutation()();
      v51 = (void *)MEMORY[0x220768C3C](0x7372656767697274, 0xE800000000000000);
      v29 = v103;
      v52 = objc_msgSend(v103, sel_newPropertyWithName_type_role_, v51, v49, 0);

      if (v52)
      {
        v101 = (uint64_t)v49;
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        swift_bridgeObjectRetain();
        v53 = v52;
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v53, sel_setObjectPathArray_, isa);

        swift_bridgeObjectRelease_n();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v105, type metadata accessor for __RKEntityTriggerSpecification);
        v55 = v106;
        v39 = v107;
        goto LABEL_38;
      }
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)v62 = xmmword_21BE79360;
      *(_QWORD *)(v62 + 16) = v49;
      *(_QWORD *)(v62 + 24) = 0;
      *(_QWORD *)(v62 + 32) = v29;
      v63 = v29;
      v64 = v49;
      swift_willThrow();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v106);
      swift_bridgeObjectRelease();

      swift_release();
      v24 = v109;
    }

    outlined destroy of __RKEntityActionSpecification((uint64_t)v105, type metadata accessor for __RKEntityTriggerSpecification);
    return v29;
  }
  v25 = *v14;
  v26 = MEMORY[0x24BEE4AF8];
  v118 = MEMORY[0x24BEE4AF8];
  v112 = 0;
  v113 = 0;
  v111 = v25;
  v27 = v105;
  specialized EnumeratedSequence.Iterator.next()(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification), (uint64_t (*)(_QWORD, __n128))type metadata accessor for __RKEntityTriggerSpecification, v105);
  outlined init with take of Transform?((uint64_t)v27, v9, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification));
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v9, 1, v28) == 1)
  {
    v9 = v26;
    v29 = v103;
LABEL_19:
    swift_bridgeObjectRelease();
    v114 = v26;
    v11 = v2;
    v39 = v107;
    if (!(v9 >> 62))
    {
      v56 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (id)swift_bridgeObjectRetain_n();
      if (v56)
        goto LABEL_21;
LABEL_35:
      swift_bridgeObjectRelease();
LABEL_36:
      v65 = (void *)*MEMORY[0x24BEBED90];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v66 = (void *)MEMORY[0x220768C3C](0x7372656767697274, 0xE800000000000000);
      v67 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v66, v65, 0);

      if (!v67)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v75 = xmmword_21BE79360;
        *(_QWORD *)(v75 + 16) = v65;
        *(_QWORD *)(v75 + 24) = 0;
        *(_QWORD *)(v75 + 32) = v29;
        v76 = v65;
        v77 = v29;
        swift_willThrow();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v106);
        swift_bridgeObjectRelease();

        goto LABEL_45;
      }
      v101 = (uint64_t)v65;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      v68 = v67;
      v69 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v68, sel_setObjectPathArray_, v69);
      swift_bridgeObjectRelease_n();

      v55 = v106;
LABEL_38:
      USKObjectPath.appendingPathComponent(_:)(0x6F526E6F69746341, (void *)0xEA0000000000746FLL);
      v71 = v70;
      v72 = v102 + *(int *)(type metadata accessor for __RKEntityInteractionSpecification(0) + 20);
      v73 = v109;
      v114 = v55;
      v115 = v108;
      v116 = v109;
      v117 = v39;
      v74 = __RKEntityActionSpecification.encode(to:at:)(&v114, v71);
      if (v11)
      {
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v55);

        v29 = v103;
        swift_release();
LABEL_46:

LABEL_47:
        return v29;
      }
      v78 = v74;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v79 = swift_allocObject();
      *(_OWORD *)(v79 + 16) = xmmword_21BE50AD0;
      *(_QWORD *)(v79 + 32) = objc_msgSend(v78, sel_path);
      v114 = v79;
      specialized Array._endMutation()();
      v80 = (void *)MEMORY[0x220768C3C](0x736E6F69746361, 0xE700000000000000);
      v29 = v103;
      v81 = (void *)v101;
      v82 = objc_msgSend(v103, sel_newPropertyWithName_type_role_, v80, v101, 0);

      if (v82)
      {
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        swift_bridgeObjectRetain();
        v83 = v82;
        v84 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v83, sel_setObjectPathArray_, v84);
        swift_bridgeObjectRelease_n();

        v85 = v100;
        outlined init with copy of __RKEntityActionSpecification(v72, v100, type metadata accessor for __RKEntityActionSpecification);
        if (swift_getEnumCaseMultiPayload() == 6)
        {
          v86 = *(_BYTE *)(v85 + 16);
          swift_bridgeObjectRelease();
          v87 = v86 & 1;
        }
        else
        {
          outlined destroy of __RKEntityActionSpecification(v85, type metadata accessor for __RKEntityActionSpecification);
          v87 = 0;
        }
        v91 = (void *)*MEMORY[0x24BEBED18];
        v92 = (void *)MEMORY[0x220768C3C](0x766973756C637865, 0xE900000000000065);
        v93 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v92, v91, 0);

        if (!v93)
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v94 = xmmword_21BE79370;
          *(_QWORD *)(v94 + 16) = v91;
          *(_QWORD *)(v94 + 24) = 0;
          *(_QWORD *)(v94 + 32) = v29;
          v95 = v29;
          v96 = v91;
          swift_willThrow();
          v97 = v109;

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v106);
          swift_release();

          return v29;
        }
        objc_msgSend(v93, sel_setBoolValue_, v87);

        v73 = v109;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v106);

        swift_release();
        goto LABEL_47;
      }
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)v88 = xmmword_21BE79380;
      *(_QWORD *)(v88 + 16) = v81;
      *(_QWORD *)(v88 + 24) = 0;
      *(_QWORD *)(v88 + 32) = v29;
      v89 = v29;
      v90 = v81;
      swift_willThrow();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v106);
      swift_bridgeObjectRelease();

LABEL_45:
      swift_release();
      v73 = v109;
      goto LABEL_46;
    }
  }
  else
  {
    v37 = type metadata accessor for __RKEntityTriggerSpecification;
    v29 = v103;
    while (1)
    {
      v38 = *(_QWORD *)v9;
      v39 = v37;
      outlined init with take of __RKEntityActionSpecification(v9 + *(int *)(v28 + 48), (uint64_t)v11, v37);
      v40 = objc_msgSend(v29, sel_path);
      v114 = 0x5F72656767697254;
      v115 = (void *)0xE800000000000000;
      if (__OFADD__(v38, 1))
        break;
      v41 = v40;
      v42 = v29;
      v110 = v38 + 1;
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      USKObjectPath.appendingPathComponent(_:)(v114, v115);
      v45 = v44;

      swift_bridgeObjectRelease();
      v46 = v109;
      v114 = v106;
      v115 = v108;
      v116 = v109;
      v117 = v107;
      __RKEntityTriggerSpecification.encode(to:at:)((uint64_t)&v114, v45);
      if (v2)
      {

        v29 = v42;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v106);
        swift_release();

        outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for __RKEntityTriggerSpecification);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v29;
      }
      MEMORY[0x220768F0C]();
      if (*(_QWORD *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v37 = v39;
      outlined destroy of __RKEntityActionSpecification((uint64_t)v11, v39);
      v47 = v105;
      specialized EnumeratedSequence.Iterator.next()(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification), (uint64_t (*)(_QWORD, __n128))v39, v105);
      outlined init with take of Transform?((uint64_t)v47, v9, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification));
      v29 = v42;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v9, 1, v28) == 1)
      {
        v9 = v118;
        v26 = MEMORY[0x24BEE4AF8];
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  swift_bridgeObjectRetain_n();
  result = (id)_CocoaArrayWrapper.endIndex.getter();
  v56 = (uint64_t)result;
  if (!result)
    goto LABEL_35;
LABEL_21:
  if (v56 >= 1)
  {
    for (i = 0; i != v56; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
        v59 = (id)MEMORY[0x220769770](i, v9);
      else
        v59 = *(id *)(v9 + 8 * i + 32);
      v60 = v59;
      v61 = objc_msgSend(v59, sel_path);

      if (v61)
      {
        MEMORY[0x220768F0C]();
        if (*(_QWORD *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v29 = v103;
    v39 = v107;
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(a1, a2, a3, (uint64_t (*)(_OWORD *))__RKEntityInteractionSpecification.encode(to:at:));
}

void protocol witness for __USDEncodablePublic.encode(to:at:) in conformance __RKEntityInteractionSpecification(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __RKEntityInteractionSpecification.encode(to:at:)(a1, a2, a3);
}

uint64_t protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(a1, a2, a3, a4, a5, (uint64_t (*)(_OWORD *))__RKEntityInteractionSpecification.encode(to:at:));
}

id __RKEntityTriggerSpecification.encode(to:at:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  Class isa;
  void *v49;
  void *v50;
  id v51;
  id v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  Class v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  void *v95;
  id v96;
  void *v97;
  id v98;
  void *v99;
  void *v100;
  id v101;
  char *v102;
  void *v103;
  uint64_t v104;
  char *v105;
  void *v106;
  id v107;
  id v108;
  uint64_t v109;
  id v110;
  Class v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  void *v118;
  id v119;
  uint64_t v120;
  id v121;
  Class v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  void *v127;
  id v128;
  id v129;
  void *v130;
  id v131;
  void *v132;
  id v133;
  void *v134;
  id v135;
  void *v136;
  void *v137;
  id v138;
  id v139;
  id v140;
  void *v141;
  _BYTE *v142;
  id v143;
  void *v144;
  id v145;
  void *v146;
  id v147;
  id v148;
  void *v149;
  id v150;
  void *v151;
  id v152;
  void *v153;
  id v154;
  id v155;
  void *v156;
  id v157;
  void *v158;
  id v159;
  id v160;
  _BYTE *v161;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;
  id v165;
  id v166;
  uint64_t v167;
  id v168;
  id v169;
  uint64_t v170;
  id v171;
  id v172;
  uint64_t v173;
  id v174;
  id v175;
  uint64_t v176;
  id v177;
  id v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  uint64_t v187;
  id v188;
  id v189;
  uint64_t v190;
  id v191;
  id v192;
  uint64_t v193;
  id v194;
  id v195;
  id v196;
  uint64_t v197;
  id v198;
  id v199;
  id v200;
  uint64_t v201;
  id v202;
  id v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  id v208;
  uint64_t v209;
  id v210;
  id v211;
  uint64_t v212;
  _BYTE *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  id v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  uint64_t v228;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v222 = v6;
  v223 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v215 = (char *)&v214 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v216 = (char *)&v214 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v217 = (char *)&v214 - v12;
  v13 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v214 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(id *)(a1 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v16);
  v20 = v19;
  swift_retain();
  v21 = (void *)MEMORY[0x220768C3C](0xD000000000000013, 0x800000021BE92340);
  v224 = objc_msgSend(v20, sel_newNodeAtPath_type_, a2, v21);
  if (!v224)
  {
    lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
    swift_allocError();
    *v53 = a2;
    v53[1] = v21;
    v54 = a2;
    swift_willThrow();

    outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
    swift_release();

    return v224;
  }
  v219 = v16;
  v220 = v20;
  v221 = v17;
  v218 = v18;

  outlined init with copy of __RKEntityActionSpecification(v3, (uint64_t)v15, type metadata accessor for __RKEntityTriggerSpecification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v22 = *(float *)((char *)v15
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType))
                              + 48));
      v23 = v222;
      v24 = v223;
      v25 = v216;
      (*(void (**)(char *, uint64_t *, uint64_t))(v223 + 32))(v216, v15, v222);
      v27 = v219;
      v26 = v220;
      v225 = v219;
      v226 = v221;
      v227 = v220;
      v228 = v218;
      v28 = __USDExportContext.pathTo(_:)((uint64_t)v25);
      v29 = v224;
      if (!v28)
      {
        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *v161 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v27);
        swift_release();

        (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v23);
        return v29;
      }
      v30 = (void *)v28;
      v31 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v32 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v33 = (void *)MEMORY[0x220768C3C](0xD000000000000019, 0x800000021BE923A0);
      v34 = objc_msgSend(v32, sel_initWithString_, v33);

      if (!v34)
        goto LABEL_75;
      v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v34);

      objc_msgSend(v29, sel_setMetadataWithKey_value_, v31, v35);
      v36 = (void *)*MEMORY[0x24BEBEDB0];
      v37 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v38 = (void *)MEMORY[0x220768C3C](0xD000000000000011, 0x800000021BE80ED0);
      v39 = objc_msgSend(v37, sel_initWithString_, v38);

      v40 = (void *)MEMORY[0x220768C3C](0x64693A6F666E69, 0xE700000000000000);
      v41 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v40, v36, 0);

      if (v41)
      {
        if (v39)
        {
          objc_msgSend(v41, sel_setTokenValue_, v39);

          v42 = (void *)*MEMORY[0x24BEBED90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v43 = swift_allocObject();
          *(_OWORD *)(v43 + 16) = xmmword_21BE50AD0;
          *(_QWORD *)(v43 + 32) = v30;
          v225 = v43;
          specialized Array._endMutation()();
          v44 = v30;
          v45 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
          v46 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v45, v42, 0);

          if (!v46)
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v193 = xmmword_21BE793C0;
            *(_QWORD *)(v193 + 16) = v42;
            *(_QWORD *)(v193 + 24) = 0;
            *(_QWORD *)(v193 + 32) = v29;
            v194 = v29;
            v195 = v42;
            swift_willThrow();

            v196 = v220;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
            swift_bridgeObjectRelease();
            swift_release();

            (*(void (**)(char *, uint64_t))(v223 + 8))(v216, v222);
            return v29;
          }
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          v47 = v46;
          isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v47, sel_setObjectPathArray_, isa);
          swift_bridgeObjectRelease_n();

          v49 = (void *)*MEMORY[0x24BEBED20];
          v50 = (void *)MEMORY[0x220768C3C](0x65636E6174736964, 0xE800000000000000);
          v51 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v50, v49, 0);

          if (v51)
          {
            objc_msgSend(v51, sel_setDoubleValue_, v22);

            v52 = v220;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);

            swift_release();
            (*(void (**)(char *, uint64_t))(v223 + 8))(v216, v222);
            return v29;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v206 = xmmword_21BE793D0;
          *(_QWORD *)(v206 + 16) = v49;
          *(_QWORD *)(v206 + 24) = 0;
          *(_QWORD *)(v206 + 32) = v29;
          v207 = v29;
          v208 = v49;
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v223 + 8))(v216, v222);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);

LABEL_59:
          swift_release();
          v185 = v220;

          return v29;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v182 = 0u;
        *(_OWORD *)(v182 + 16) = 0u;
        *(_QWORD *)(v182 + 32) = 0;
        swift_willThrow();
        v39 = v41;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v170 = xmmword_21BE79350;
        *(_QWORD *)(v170 + 16) = v36;
        *(_QWORD *)(v170 + 24) = 0;
        *(_QWORD *)(v170 + 32) = v29;
        v171 = v29;
        v172 = v36;
        swift_willThrow();
      }

      (*(void (**)(char *, uint64_t))(v223 + 8))(v216, v222);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v27);

      goto LABEL_59;
    case 1u:
      v56 = v222;
      v55 = v223;
      v57 = (uint64_t)v215;
      (*(void (**)(char *, uint64_t *, uint64_t))(v223 + 32))(v215, v15, v222);
      v59 = v219;
      v58 = v220;
      v225 = v219;
      v226 = v221;
      v227 = v220;
      v228 = v218;
      v60 = __USDExportContext.pathTo(_:)(v57);
      v29 = v224;
      if (!v60)
      {
        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *v162 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v59);
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v56);
        return v29;
      }
      v61 = (void *)v60;
      v62 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v63 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v64 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92360);
      v65 = objc_msgSend(v63, sel_initWithString_, v64);

      if (!v65)
        goto LABEL_76;
      v66 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v65);

      objc_msgSend(v29, sel_setMetadataWithKey_value_, v62, v66);
      v67 = (void *)*MEMORY[0x24BEBEDB0];
      v68 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v69 = (void *)MEMORY[0x220768C3C](0x7574736547706154, 0xEA00000000006572);
      v70 = objc_msgSend(v68, sel_initWithString_, v69);

      v71 = (void *)MEMORY[0x220768C3C](0x64693A6F666E69, 0xE700000000000000);
      v72 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v71, v67, 0);

      v73 = v56;
      if (v72)
      {
        if (v70)
        {
          objc_msgSend(v72, sel_setTokenValue_, v70);

          v74 = (void *)*MEMORY[0x24BEBED90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v75 = swift_allocObject();
          *(_OWORD *)(v75 + 16) = xmmword_21BE50AD0;
          *(_QWORD *)(v75 + 32) = v61;
          v225 = v75;
          specialized Array._endMutation()();
          v76 = v61;
          v77 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
          v78 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v77, v74, 0);

          if (v78)
          {
            type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
            swift_bridgeObjectRetain();
            v79 = v78;
            v80 = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v79, sel_setObjectPathArray_, v80);

            v81 = v220;
            swift_bridgeObjectRelease();

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
            swift_bridgeObjectRelease();

            swift_release();
          }
          else
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v197 = xmmword_21BE793C0;
            *(_QWORD *)(v197 + 16) = v74;
            *(_QWORD *)(v197 + 24) = 0;
            *(_QWORD *)(v197 + 32) = v29;
            v198 = v29;
            v199 = v74;
            swift_willThrow();

            v200 = v220;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
            swift_bridgeObjectRelease();
            swift_release();

          }
          (*(void (**)(char *, uint64_t))(v223 + 8))(v215, v222);
          return v29;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v183 = 0u;
        *(_OWORD *)(v183 + 16) = 0u;
        *(_QWORD *)(v183 + 32) = 0;
        swift_willThrow();
        v70 = v72;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v176 = xmmword_21BE79350;
        *(_QWORD *)(v176 + 16) = v67;
        *(_QWORD *)(v176 + 24) = 0;
        *(_QWORD *)(v176 + 32) = v29;
        v177 = v29;
        v178 = v67;
        v73 = v56;
        swift_willThrow();
      }

      (*(void (**)(char *, uint64_t))(v223 + 8))(v215, v73);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);

      goto LABEL_59;
    case 2u:
      v82 = *(uint64_t *)((char *)v15
                       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]))
                                + 48));
      swift_bridgeObjectRelease();
      v83 = v222;
      v84 = (uint64_t)v217;
      (*(void (**)(char *, uint64_t *, uint64_t))(v223 + 32))(v217, v15, v222);
      v86 = v219;
      v85 = v220;
      v225 = v219;
      v226 = v221;
      v227 = v220;
      v228 = v218;
      v87 = __USDExportContext.pathTo(_:)(v84);
      v88 = v224;
      if (!v87)
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *v163 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v86);
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v223 + 8))(v84, v83);
        return v88;
      }
      v89 = (void *)v87;
      v90 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v91 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v92 = (void *)MEMORY[0x220768C3C](0x6564696C6C6F432FLL, 0xEF72656767697254);
      v93 = objc_msgSend(v91, sel_initWithString_, v92);

      if (!v93)
        goto LABEL_77;
      v94 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v93);

      objc_msgSend(v88, sel_setMetadataWithKey_value_, v90, v94);
      v95 = (void *)*MEMORY[0x24BEBEDB0];
      v96 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v97 = (void *)MEMORY[0x220768C3C](0x6564696C6C6F43, 0xE700000000000000);
      v98 = objc_msgSend(v96, sel_initWithString_, v97);

      v99 = (void *)MEMORY[0x220768C3C](0x64693A6F666E69, 0xE700000000000000);
      v100 = v88;
      v101 = objc_msgSend(v88, sel_newPropertyWithName_type_role_, v99, v95, 0);

      v102 = v217;
      if (v101)
      {
        if (v98)
        {
          objc_msgSend(v101, sel_setTokenValue_, v98);

          v103 = (void *)*MEMORY[0x24BEBED90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v104 = swift_allocObject();
          *(_OWORD *)(v104 + 16) = xmmword_21BE50AD0;
          *(_QWORD *)(v104 + 32) = v89;
          v225 = v104;
          specialized Array._endMutation()();
          v105 = v89;
          v106 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
          v107 = v224;
          v108 = objc_msgSend(v224, sel_newPropertyWithName_type_role_, v106, v103, 0);

          if (!v108)
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v201 = xmmword_21BE793C0;
            *(_QWORD *)(v201 + 16) = v103;
            *(_QWORD *)(v201 + 24) = 0;
            *(_QWORD *)(v201 + 32) = v107;
            v202 = v107;
            v203 = v103;
            swift_willThrow();

            v204 = v220;
            swift_bridgeObjectRelease();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
            swift_bridgeObjectRelease();
            swift_release();

            (*(void (**)(char *, uint64_t))(v223 + 8))(v217, v222);
            return v107;
          }
          v216 = v105;
          v109 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          v110 = v108;
          v215 = (char *)v109;
          v111 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v110, sel_setObjectPathArray_, v111);
          swift_bridgeObjectRelease_n();

          v112 = v219;
          v113 = v221;
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v219);
          v114 = v220;
          v115 = v218;
          swift_retain();
          v116 = specialized Sequence.compactMap<A>(_:)(v82, v112, v113, (uint64_t)v114, v115);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v112);
          swift_bridgeObjectRelease();
          swift_release();

          if (v116 >> 62)
          {
            swift_bridgeObjectRetain();
            v212 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            v117 = v103;
            if (v212)
              goto LABEL_25;
          }
          else
          {
            v117 = v103;
            if (*(_QWORD *)((v116 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_25:
              v118 = (void *)MEMORY[0x220768C3C](0x726564696C6C6F63, 0xE900000000000073);
              v29 = v224;
              v119 = objc_msgSend(v224, sel_newPropertyWithName_type_role_, v118, v117, 0);

              v120 = v219;
              if (v119)
              {
                swift_bridgeObjectRetain();
                v121 = v119;
                v122 = Array._bridgeToObjectiveC()().super.isa;
                objc_msgSend(v121, sel_setObjectPathArray_, v122);

                swift_bridgeObjectRelease();
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v120);
                swift_bridgeObjectRelease();

                swift_release();
                (*(void (**)(char *, uint64_t))(v223 + 8))(v217, v222);
                return v29;
              }
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              swift_allocError();
              *(_OWORD *)v209 = xmmword_21BE793B0;
              *(_QWORD *)(v209 + 16) = v117;
              *(_QWORD *)(v209 + 24) = 0;
              *(_QWORD *)(v209 + 32) = v29;
              v210 = v29;
              v211 = v117;
              swift_willThrow();

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v120);
              swift_bridgeObjectRelease();
              swift_release();

LABEL_72:
              (*(void (**)(char *, uint64_t))(v223 + 8))(v217, v222);
              return v29;
            }
          }
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          swift_allocError();
          *v213 = 0;
          swift_willThrow();

          v29 = v224;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
          swift_release();

          goto LABEL_72;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v184 = 0u;
        *(_OWORD *)(v184 + 16) = 0u;
        *(_QWORD *)(v184 + 32) = 0;
        swift_willThrow();
        v98 = v101;
        v29 = v224;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v173 = xmmword_21BE79350;
        *(_QWORD *)(v173 + 16) = v95;
        *(_QWORD *)(v173 + 24) = 0;
        *(_QWORD *)(v173 + 32) = v100;
        v174 = v95;
        v175 = v100;
        swift_willThrow();
        v29 = v100;
      }

      (*(void (**)(char *, uint64_t))(v223 + 8))(v102, v222);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
      swift_bridgeObjectRelease();

      goto LABEL_59;
    case 3u:
      v124 = *v15;
      v123 = v15[1];
      v125 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v126 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v127 = (void *)MEMORY[0x220768C3C](0xD000000000000014, 0x800000021BE923C0);
      v128 = objc_msgSend(v126, sel_initWithString_, v127);

      v29 = v224;
      if (!v128)
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
        JUMPOUT(0x21BD7663CLL);
      }
      v129 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v128);

      objc_msgSend(v29, sel_setMetadataWithKey_value_, v125, v129);
      v130 = (void *)*MEMORY[0x24BEBEDB0];
      v131 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v132 = (void *)MEMORY[0x220768C3C](0x6163696669746F4ELL, 0xEC0000006E6F6974);
      v133 = objc_msgSend(v131, sel_initWithString_, v132);

      v134 = (void *)MEMORY[0x220768C3C](0x64693A6F666E69, 0xE700000000000000);
      v135 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v134, v130, 0);

      if (v135)
      {
        if (v133)
        {
          objc_msgSend(v135, sel_setTokenValue_, v133);

          v136 = (void *)*MEMORY[0x24BEBEDA8];
          v137 = (void *)MEMORY[0x220768C3C](0x696669746E656469, 0xEA00000000007265);
          v138 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v137, v136, 0);

          v139 = v220;
          if (v138)
          {
            swift_bridgeObjectRetain();
            v140 = v138;
            v141 = (void *)MEMORY[0x220768C3C](v124, v123);
            objc_msgSend(v140, sel_setStringValue_, v141);

            swift_bridgeObjectRelease();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
            swift_bridgeObjectRelease();

            swift_release();
          }
          else
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v187 = xmmword_21BE793A0;
            *(_QWORD *)(v187 + 16) = v136;
            *(_QWORD *)(v187 + 24) = 0;
            *(_QWORD *)(v187 + 32) = v29;
            v188 = v29;
            v189 = v136;
            swift_willThrow();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
            swift_bridgeObjectRelease();

            swift_release();
          }

          return v29;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v179 = 0u;
        *(_OWORD *)(v179 + 16) = 0u;
        *(_QWORD *)(v179 + 32) = 0;
        swift_willThrow();
        v133 = v135;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v164 = xmmword_21BE79350;
        *(_QWORD *)(v164 + 16) = v130;
        *(_QWORD *)(v164 + 24) = 0;
        *(_QWORD *)(v164 + 32) = v29;
        v165 = v29;
        v166 = v130;
        swift_willThrow();
      }
      v180 = v220;

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
      swift_release();

      swift_bridgeObjectRelease();
LABEL_52:

      return v29;
    case 0xCu:
      v144 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v145 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v146 = (void *)MEMORY[0x220768C3C](0xD000000000000017, 0x800000021BE92380);
      v147 = objc_msgSend(v145, sel_initWithString_, v146);

      v29 = v224;
      if (!v147)
        goto LABEL_74;
      v148 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v147);

      objc_msgSend(v29, sel_setMetadataWithKey_value_, v144, v148);
      v149 = (void *)*MEMORY[0x24BEBEDB0];
      v150 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v151 = (void *)MEMORY[0x220768C3C](0x617254656E656353, 0xEF6E6F697469736ELL);
      v152 = objc_msgSend(v150, sel_initWithString_, v151);

      v153 = (void *)MEMORY[0x220768C3C](0x64693A6F666E69, 0xE700000000000000);
      v154 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v153, v149, 0);

      if (!v154)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v167 = xmmword_21BE79350;
        *(_QWORD *)(v167 + 16) = v149;
        *(_QWORD *)(v167 + 24) = 0;
        *(_QWORD *)(v167 + 32) = v29;
        v168 = v29;
        v169 = v149;
        swift_willThrow();
LABEL_51:

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
        swift_release();
        v180 = v220;

        goto LABEL_52;
      }
      if (!v152)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v181 = 0u;
        *(_OWORD *)(v181 + 16) = 0u;
        *(_QWORD *)(v181 + 32) = 0;
        swift_willThrow();
        v152 = v154;
        goto LABEL_51;
      }
      objc_msgSend(v154, sel_setTokenValue_, v152);

      v155 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v156 = (void *)MEMORY[0x220768C3C](0x7265746E65, 0xE500000000000000);
      v157 = objc_msgSend(v155, sel_initWithString_, v156);

      v158 = (void *)MEMORY[0x220768C3C](1701869940, 0xE400000000000000);
      v159 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v158, v149, 0);

      if (v159)
      {
        v160 = v220;
        if (v157)
        {
          objc_msgSend(v159, sel_setTokenValue_, v157);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
          swift_release();

          return v224;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v205 = 0u;
        *(_OWORD *)(v205 + 16) = 0u;
        *(_QWORD *)(v205 + 32) = 0;
        swift_willThrow();

        v29 = v224;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v190 = xmmword_21BE79390;
        *(_QWORD *)(v190 + 16) = v149;
        *(_QWORD *)(v190 + 24) = 0;
        *(_QWORD *)(v190 + 32) = v29;
        v191 = v29;
        v192 = v149;
        swift_willThrow();
        v160 = v220;
      }
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
      swift_release();

      return v29;
    default:
      lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
      swift_allocError();
      *v142 = 1;
      swift_willThrow();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v219);
      v29 = v224;

      swift_release();
      v143 = v220;

      outlined destroy of __RKEntityActionSpecification((uint64_t)v15, type metadata accessor for __RKEntityTriggerSpecification);
      return v29;
  }
}

void *__RKEntityActionSpecification.encode(to:at:)(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t object;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  id *v52;
  uint64_t v53;
  uint64_t (*v54)(_QWORD);
  unint64_t v55;
  int *v56;
  __int128 v57;
  void *v58;
  unint64_t v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  float v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  id v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  uint64_t v86;
  void *v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  unint64_t v99;
  id v100;
  void *v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t (*v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  void *v111;
  unint64_t v112;
  void *v113;
  void *v114;
  id v115;
  void *v116;
  id v117;
  void *v118;
  uint64_t v119;
  __int128 v120;
  void *v121;
  unint64_t v122;
  void *v123;
  void *v124;
  id v125;
  void *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  unint64_t v131;
  id v132;
  void *v133;
  void *v134;
  id v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  unint64_t v142;
  void *v143;
  void *v144;
  id v145;
  void *v146;
  id v147;
  void *v148;
  unint64_t v149;
  void *v150;
  unint64_t v151;
  void *v152;
  void *v153;
  id v154;
  void *v155;
  void *v156;
  void *v157;
  unint64_t v158;
  void *v159;
  void *v160;
  id v161;
  void *v162;
  id v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  unint64_t v168;
  void *v169;
  void *v170;
  id v171;
  void *v172;
  id v173;
  void *v174;
  unint64_t v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(char *, unint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  void (*v187)(void);
  uint64_t v188;
  void *v189;
  id v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  void *v201;
  uint64_t v202;
  uint64_t (*v203)(uint64_t);
  uint64_t v204;
  uint64_t v205;
  void *v206;
  unint64_t v207;
  id v208;
  void *v209;
  void *v210;
  id v211;
  void *v212;
  id v213;
  void *v214;
  _BYTE *v215;
  uint64_t v216;
  unsigned __int32 v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  __int128 v229;
  void *v230;
  unint64_t v231;
  id v232;
  void *v233;
  void *v234;
  __int128 v235;
  void *v236;
  unint64_t v237;
  void *v238;
  void *v239;
  id v240;
  void *v241;
  void *v242;
  _QWORD *v243;
  id v244;
  id v245;
  _QWORD *v246;
  id v247;
  _QWORD *v248;
  id v249;
  id v250;
  _QWORD *v251;
  id v252;
  uint64_t (*v253)(uint64_t);
  _QWORD *v254;
  id v255;
  uint64_t v256;
  _QWORD *v257;
  id v258;
  _QWORD *v259;
  id v260;
  _QWORD *v261;
  id v262;
  uint64_t (*v263)(uint64_t);
  _QWORD *v264;
  id v265;
  _QWORD *v266;
  id v267;
  _QWORD *v268;
  id v269;
  _QWORD *v270;
  id v271;
  void *v272;
  id v273;
  void *v274;
  id v275;
  id v276;
  void *v277;
  void *v278;
  void *v279;
  id v280;
  uint64_t v281;
  void *v282;
  void *v283;
  id v284;
  void *v285;
  id v286;
  id v287;
  uint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  void *v293;
  uint64_t v294;
  id v295;
  void *v296;
  void *v297;
  id v298;
  id v299;
  Class v300;
  void *v301;
  int *v302;
  uint64_t v303;
  float *v304;
  int v305;
  double v306;
  uint64_t v307;
  void *v308;
  id v309;
  void *v310;
  id v311;
  void *v312;
  id v313;
  id v314;
  void *v315;
  void *v316;
  uint64_t v317;
  unint64_t v318;
  id v319;
  void *v320;
  id v321;
  id v322;
  void *v323;
  void *v324;
  void *v325;
  id v326;
  uint64_t v327;
  void *v328;
  id v329;
  _QWORD *v330;
  _QWORD *v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  void *v335;
  void *v336;
  id v337;
  void *v338;
  id v339;
  id v340;
  void *v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  void *v347;
  uint64_t v348;
  id v349;
  void *v350;
  id v351;
  id v352;
  Class v353;
  void *v354;
  int *v355;
  uint64_t v356;
  float *v357;
  int v358;
  double v359;
  uint64_t v360;
  void *v361;
  id v362;
  void *v363;
  id v364;
  void *v365;
  id v366;
  id v367;
  id v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  void *v372;
  uint64_t v373;
  id v374;
  void *v375;
  id v376;
  id v377;
  Class v378;
  void *v379;
  id v380;
  int *v381;
  uint64_t v382;
  void *v383;
  id v384;
  void *v385;
  uint64_t v386;
  int v387;
  double v388;
  uint64_t v389;
  void *v390;
  void *v391;
  id v392;
  uint64_t v393;
  void *v394;
  id v395;
  void *v396;
  id v397;
  id v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  void *v402;
  uint64_t v403;
  id v404;
  void *v405;
  id v406;
  id v407;
  Class v408;
  uint64_t v409;
  uint64_t v410;
  float *v411;
  int v412;
  double v413;
  uint64_t v414;
  void *v415;
  void *v416;
  id v417;
  void *v418;
  id v419;
  id v420;
  void *v421;
  uint64_t v422;
  void *v423;
  uint64_t v424;
  void *v425;
  void *v426;
  void *v427;
  id v428;
  uint64_t (*v429)(uint64_t);
  uint64_t v430;
  void *v431;
  void *v432;
  id v433;
  void *v434;
  id v435;
  void *v436;
  id v437;
  _BYTE *v438;
  uint64_t v439;
  void *v440;
  void *v441;
  uint64_t v442;
  id v443;
  void *v444;
  void *v445;
  id v446;
  id v447;
  Class v448;
  void *v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  id v454;
  void *v455;
  id v456;
  void *v457;
  void *v458;
  id v459;
  void *v460;
  id v461;
  void *v462;
  id v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  void *v468;
  void *v469;
  uint64_t v470;
  id v471;
  void *v472;
  id v473;
  id v474;
  Class v475;
  uint64_t v476;
  uint64_t v477;
  float *v478;
  int v479;
  double v480;
  uint64_t v481;
  void *v482;
  id v483;
  void *v484;
  id v485;
  void *v486;
  id v487;
  uint64_t v488;
  id v489;
  void *v490;
  uint64_t v491;
  void *v492;
  void *v493;
  uint64_t v494;
  void *v495;
  void *v496;
  id v497;
  id v498;
  Class v499;
  void *v500;
  float32x2_t *v501;
  float64x2_t v502;
  __n128 v503;
  void *v504;
  void *v505;
  id v506;
  void *v507;
  id v508;
  void *v509;
  id v510;
  id v511;
  void *v512;
  uint64_t v513;
  void *v514;
  uint64_t v515;
  uint64_t v516;
  void *v517;
  void *v518;
  uint64_t v519;
  id v520;
  void *v521;
  id v522;
  id v523;
  Class v524;
  void *v525;
  int *v526;
  uint64_t v527;
  float *v528;
  int v529;
  double v530;
  uint64_t v531;
  void *v532;
  id v533;
  void *v534;
  id v535;
  void *v536;
  id v537;
  id v538;
  id v539;
  uint64_t v540;
  void *v541;
  void *v542;
  uint64_t v543;
  id v544;
  void *v545;
  void *v546;
  id v547;
  id v548;
  Class v549;
  void *v550;
  uint64_t v551;
  float *v552;
  unsigned __int8 v553;
  double v554;
  double v555;
  void *v556;
  id v557;
  uint64_t v558;
  _QWORD *v559;
  id v560;
  void *v562;
  _QWORD *v563;
  id v564;
  void *v565;
  uint64_t v566;
  void *v567;
  id v568;
  void *v569;
  id v570;
  id v571;
  void *v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  void *v576;
  void *v577;
  uint64_t v578;
  id v579;
  void *v580;
  id v581;
  id v582;
  Class isa;
  uint64_t v584;
  uint64_t v585;
  uint64_t *v586;
  uint64_t v587;
  void *v588;
  Swift::String v589;
  Swift::String_optional v590;
  void *v591;
  void *v592;
  id v593;
  void *v594;
  id v595;
  id v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  void *v600;
  void *v601;
  uint64_t v602;
  id v603;
  void *v604;
  void *v605;
  id v606;
  id v607;
  Class v608;
  void *v609;
  int v610;
  char **p_name;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  id v615;
  _BYTE *v616;
  uint64_t v617;
  id v618;
  id v619;
  _BYTE *v620;
  _BYTE *v621;
  _BYTE *v622;
  _BYTE *v623;
  _BYTE *v624;
  _BYTE *v625;
  _BYTE *v626;
  _BYTE *v627;
  uint64_t v628;
  id v629;
  id v630;
  uint64_t v631;
  uint64_t v632;
  id v633;
  id v634;
  void *v635;
  uint64_t v636;
  id v637;
  id v638;
  id v639;
  uint64_t v640;
  id v641;
  id v642;
  void *v643;
  uint64_t v644;
  id v645;
  id v646;
  uint64_t v647;
  id v648;
  id v649;
  uint64_t v650;
  id v651;
  id v652;
  void *v653;
  uint64_t v654;
  id v655;
  id v656;
  uint64_t v657;
  id v658;
  id v659;
  uint64_t v660;
  id v661;
  id v662;
  id v663;
  _BYTE *v664;
  void *v665;
  _BYTE *v666;
  uint64_t v667;
  int v668;
  double v669;
  uint64_t v670;
  void *v671;
  id v672;
  void *v673;
  id v674;
  void *v675;
  id v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  id v680;
  id v681;
  uint64_t v682;
  void *v683;
  float32x2_t *v684;
  float64x2_t v685;
  __n128 v686;
  void *v687;
  void *v688;
  id v689;
  void *v690;
  float32x2_t *v691;
  float64x2_t v692;
  __n128 v693;
  void *v694;
  void *v695;
  id v696;
  void (*v697)(__n128, __n128);
  uint64_t v698;
  id v699;
  id v700;
  uint64_t v701;
  uint64_t v702;
  id v703;
  id v704;
  void *v705;
  id v706;
  void *v707;
  id v708;
  void *v709;
  id v710;
  uint64_t v711;
  uint64_t v712;
  id v713;
  void *v714;
  id v715;
  uint64_t v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  void *v720;
  void *v721;
  Swift::String v722;
  __n128 v723;
  id v724;
  void *v725;
  id v726;
  uint64_t v727;
  id v728;
  id v729;
  void *v730;
  uint64_t v731;
  char v732;
  double v733;
  char *v734;
  void *v735;
  id v736;
  id v737;
  uint64_t v738;
  __int128 v739;
  uint64_t v740;
  void *v741;
  id v742;
  id v743;
  void *v744;
  uint64_t v745;
  id v746;
  id v747;
  void *v748;
  uint64_t v749;
  id v750;
  void *v751;
  _BYTE *v752;
  uint64_t v753;
  _QWORD *v754;
  uint64_t v755;
  id v756;
  __n128 *v757;
  Swift::String v758;
  id v759;
  Swift::String v760;
  void *v761;
  void *v762;
  void *v763;
  _QWORD *v764;
  uint64_t v765;
  void *v766;
  unint64_t v767;
  void *v768;
  void *v769;
  id v770;
  uint64_t countAndFlagsBits;
  uint64_t v772;
  uint64_t *v773;
  void *v774;
  void *v775;
  void *v776;
  id v777;
  id v778;
  void *v779;
  id v780;
  void *v781;
  id v782;
  void *v783;
  id v784;
  void *v785;
  unint64_t v786;
  double v787;
  void *v788;
  void *v789;
  id v790;
  uint64_t v791;
  uint64_t v792;
  double v793;
  void *v794;
  id v795;
  id (*v796)();
  void *v797;
  void *v798;
  id v799;
  _QWORD *v800;
  id v801;
  id v802;
  void *v803;
  uint64_t v804;
  void *v805;
  uint64_t v806;
  int v807;
  double v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  void *v812;
  void *v813;
  uint64_t v814;
  id v815;
  id v816;
  uint64_t v817;
  id v818;
  uint64_t v819;
  id v820;
  id v821;
  uint64_t v822;
  id v823;
  id v824;
  void *v825;
  id v826;
  uint64_t v827;
  void *v828;
  uint64_t v829;
  uint64_t v830;
  id v831;
  id v832;
  uint64_t v833;
  uint64_t v834;
  id v835;
  id v836;
  uint64_t v837;
  id v838;
  void *v839;
  void *v840;
  uint64_t v841;
  id v842;
  void *v843;
  _BYTE *v844;
  uint64_t v845;
  id v846;
  id v847;
  void *v848;
  unint64_t v849;
  uint64_t v850;
  void *v851;
  id v852;
  void *v853;
  void *v854;
  id v855;
  void (*v856)(void);
  id v857;
  uint64_t v858;
  uint64_t v859;
  id v860;
  void *v861;
  void *v862;
  void *v863;
  uint64_t v864;
  void *v865;
  void *v866;
  id v867;
  void *v868;
  uint64_t v869;
  uint64_t v870;
  id v871;
  uint64_t v872;
  void *v873;
  uint64_t v874;
  int v875;
  char v876;
  id v877;
  uint64_t v878;
  float v879;
  double v880;
  unint64_t v881;
  uint64_t v882;
  id v883;
  uint64_t v884;
  float v885;
  double v886;
  unint64_t v887;
  uint64_t v888;
  uint64_t v889;
  id v890;
  void *v891;
  id v892;
  void *v893;
  id v894;
  void *v895;
  uint64_t v896;
  uint64_t v897;
  void *v898;
  id v899;
  uint64_t v900;
  char *v901;
  uint64_t v902;
  uint64_t v903;
  char *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  int *v913;
  uint64_t v914;
  _QWORD *v915;
  _QWORD *v916;
  _BYTE *v917;
  char *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  int *started;
  char *v924;
  uint64_t v925;
  uint64_t v926;
  _BYTE *v927;
  char *v928;
  uint64_t v929;
  _BYTE *v930;
  _BYTE *v931;
  char *v932;
  char *v933;
  char *v934;
  _BYTE *v935;
  __n128 v936;
  id v937[3];
  void *v938;
  void *v939;
  void *v940;
  uint64_t v941;
  unint64_t v942;
  __int128 v943;
  unint64_t v944;
  unint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  __n128 v949;
  __n128 v950;
  _QWORD v951[4];
  char v952;
  _BYTE v953[48];
  _BYTE v954[48];

  v940 = a2;
  v911 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x24BDAC7A8](v911);
  v931 = (char *)&v900 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v910 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x24BDAC7A8](v910);
  v930 = (char *)&v900 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v902 = (uint64_t)&v900 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v913 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x24BDAC7A8](v913);
  v927 = (char *)&v900 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v918 = (char *)&v900 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v921 = (uint64_t)&v900 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v937[0] = (char *)&v900 - v12;
  v908 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v908);
  v929 = (uint64_t)&v900 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v909 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v909);
  v933 = (char *)&v900 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v906 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v906);
  v935 = (char *)&v900 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v907 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x24BDAC7A8](v907);
  v924 = (char *)&v900 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v905 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x24BDAC7A8](v905);
  v934 = (char *)&v900 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
  MEMORY[0x24BDAC7A8](v18);
  v916 = (uint64_t *)((char *)&v900 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v20);
  v915 = (uint64_t *)((char *)&v900 - v21);
  v912 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x24BDAC7A8](v912);
  v932 = (char *)&v900 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v914 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x24BDAC7A8](v914);
  v928 = (char *)&v900 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for UUID();
  v925 = *(_QWORD *)(v24 - 8);
  v926 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v901 = (char *)&v900 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v900 - v27;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v900 - v30;
  v922 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v922);
  v903 = (uint64_t)&v900 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v919 = (uint64_t)&v900 - v34;
  MEMORY[0x24BDAC7A8](v35);
  v936.n128_u64[0] = (unint64_t)&v900 - v36;
  v37 = type metadata accessor for __RKEntityActionSpecification(0);
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v917 = (char *)&v900 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v920 = (uint64_t)&v900 - v41;
  MEMORY[0x24BDAC7A8](v42);
  v904 = (char *)&v900 - v43;
  MEMORY[0x24BDAC7A8](v44);
  object = (uint64_t)&v900 - v45;
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)&v900 - v48;
  MEMORY[0x24BDAC7A8](v50);
  v52 = (id *)((char *)&v900 - v51);
  v53 = a1[1];
  *(_QWORD *)&v943 = *a1;
  *((_QWORD *)&v943 + 1) = v53;
  v939 = (void *)a1[2];
  v942 = a1[3];
  outlined init with copy of __RKEntityActionSpecification(v941, (uint64_t)&v900 - v51, v54);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v55 = v936.n128_u64[0];
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, v936.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);
      v56 = (int *)v922;
      if ((*(_BYTE *)(v55 + *(int *)(v922 + 32)) & 1) == 0)
      {
        v57 = v943;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
        v58 = v939;
        v59 = v942;
        swift_retain();
        v60 = v58;
        v61 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
        v62 = v940;
        v63 = objc_msgSend(v60, sel_newNodeAtPath_type_, v940, v61);
        if (!v63)
        {
          lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
          swift_allocError();
          *v559 = v62;
          v559[1] = v61;
          v560 = v62;
          object = v61;
          swift_willThrow();
          outlined destroy of __RKEntityActionSpecification(v936.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v57);

          swift_release();
          return (void *)object;
        }
        v64 = v63;

        object = v64;
        v65 = v938;
        setInfoId(_:on:)(0x6F69647541, 0xE500000000000000, (void *)object);
        v939 = v65;
        if (v65)
        {
          outlined destroy of __RKEntityActionSpecification(v936.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
LABEL_6:
          swift_release();

          return (void *)object;
        }
        v938 = v64;
        v941 = object;
        v567 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
        v568 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
        v569 = (void *)MEMORY[0x220768C3C](0x63416F696475412FLL, 0xEC0000006E6F6974);
        v570 = objc_msgSend(v568, sel_initWithString_, v569);

        if (v570)
        {
          v571 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, (_QWORD)v57);

          v572 = (void *)v941;
          objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v567, v571);

          v573 = v943;
          v949.n128_u64[0] = v943;
          v949.n128_u64[1] = *((_QWORD *)&v57 + 1);
          v950.n128_u64[0] = (unint64_t)v60;
          v950.n128_u64[1] = v59;
          v574 = v936.n128_u64[0];
          v575 = __USDExportContext.pathTo(_:)(v936.n128_i64[0]);
          if (v575)
          {
            v576 = (void *)v575;
            v940 = v60;
            v577 = (void *)*MEMORY[0x24BEBED90];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            v578 = swift_allocObject();
            *(_OWORD *)(v578 + 16) = xmmword_21BE50AD0;
            *(_QWORD *)(v578 + 32) = v576;
            v949.n128_u64[0] = v578;
            specialized Array._endMutation()();
            object = v949.n128_u64[0];
            v579 = v576;
            v580 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
            v581 = objc_msgSend(v572, sel_newPropertyWithName_type_role_, v580, v577, 0);

            if (v581)
            {
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
              swift_bridgeObjectRetain();
              v582 = v581;
              isa = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v582, sel_setObjectPathArray_, isa);
              swift_bridgeObjectRelease_n();

              v584 = v943;
              v949 = (__n128)v943;
              v60 = v940;
              v950.n128_u64[0] = (unint64_t)v940;
              v950.n128_u64[1] = v942;
              v585 = v936.n128_u64[0];
              v586 = (uint64_t *)(v936.n128_u64[0] + *(int *)(v922 + 20));
              v587 = *v586;
              v588 = (void *)v586[1];
              swift_bridgeObjectRetain();
              v589._countAndFlagsBits = v587;
              v589._object = v588;
              v590 = __USDEncoder.resolveResourcePath(path:)(v589);
              v939 = v591;
              if (v591)
              {
                outlined destroy of __RKEntityActionSpecification(v585, type metadata accessor for __RKEntityAudioActionArguments);
                object = v941;

                outlined consume of (@escaping @callee_guaranteed () -> ())?(v584);
                swift_bridgeObjectRelease();

                goto LABEL_6;
              }
              object = (uint64_t)v590.value._object;
              v937[0] = v579;
              countAndFlagsBits = v590.value._countAndFlagsBits;
              swift_bridgeObjectRelease();
              v772 = v903;
              outlined init with copy of __RKEntityActionSpecification(v585, v903, type metadata accessor for __RKEntityAudioActionArguments);
              if (!v590.value._object)
              {
                v773 = (uint64_t *)(v772 + *(int *)(v922 + 20));
                countAndFlagsBits = *v773;
                object = v773[1];
                swift_bridgeObjectRetain();
              }
              outlined destroy of __RKEntityActionSpecification(v772, type metadata accessor for __RKEntityAudioActionArguments);
              v774 = (void *)*MEMORY[0x24BEBEDA0];
              v775 = (void *)MEMORY[0x220768C3C](0x6F69647561, 0xE500000000000000);
              v776 = (void *)v941;
              v777 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v775, v774, 0);

              if (v777)
              {
                swift_bridgeObjectRetain();
                v778 = v777;
                v779 = (void *)MEMORY[0x220768C3C](countAndFlagsBits, object);
                objc_msgSend(v778, sel_setResourcePath_, v779);
                swift_bridgeObjectRelease_n();

                __asm { BR              X10 }
              }
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              swift_allocError();
              *(_OWORD *)v837 = xmmword_21BE79490;
              *(_QWORD *)(v837 + 16) = v774;
              *(_QWORD *)(v837 + 24) = 0;
              *(_QWORD *)(v837 + 32) = v938;
              v742 = v776;
              v838 = v774;
              swift_willThrow();

            }
            else
            {
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              swift_allocError();
              *(_OWORD *)v740 = xmmword_21BE793C0;
              *(_QWORD *)(v740 + 16) = v577;
              *(_QWORD *)(v740 + 24) = 0;
              *(_QWORD *)(v740 + 32) = v938;
              v741 = v579;
              v742 = v572;
              v743 = v577;
              swift_willThrow();

            }
            v744 = v940;

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
            swift_bridgeObjectRelease();

            swift_release();
            v203 = type metadata accessor for __RKEntityAudioActionArguments;
            v202 = v936.n128_u64[0];
          }
          else
          {

            lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
            object = swift_allocError();
            *v664 = 0;
            swift_willThrow();

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v573);
            swift_release();

            v203 = type metadata accessor for __RKEntityAudioActionArguments;
            v202 = v574;
          }
LABEL_57:
          outlined destroy of __RKEntityActionSpecification(v202, v203);
          return (void *)object;
        }
        goto LABEL_355;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v925 + 16))(v31, v55, v926);
      v216 = v56[6];
      v217 = *(unsigned __int8 *)(v55 + v216);
      if (v217 == 3)
        goto LABEL_339;
      v218 = (void *)v56[9];
      v219 = v919;
      if (*((_BYTE *)v218 + v55) == 3)
        goto LABEL_340;
      v220 = v56[7];
      if ((*(_BYTE *)(v55 + v220 + 8) & 1) != 0)
        goto LABEL_341;
      LODWORD(v934) = *((unsigned __int8 *)v218 + v55);
      v935 = v218;
      LODWORD(v937[0]) = v217;
      v941 = v216;
      LODWORD(v933) = *(unsigned __int8 *)(v55 + v56[10]);
      if ((_DWORD)v933 == 3)
        goto LABEL_342;
      v221 = (uint64_t *)(v55 + v56[5]);
      v222 = *v221;
      v931 = (_BYTE *)v221[1];
      v932 = (char *)v222;
      v223 = *(_QWORD *)(v55 + v220);
      v224 = v919 + v220;
      v929 = v56[8];
      v930 = (_BYTE *)v223;
      (*(void (**)(uint64_t, char *, uint64_t))(v925 + 32))(v919, v31, v926);
      v225 = (_QWORD *)(v219 + v56[5]);
      v226 = (uint64_t)v931;
      *v225 = v932;
      v225[1] = v226;
      *(_BYTE *)(v219 + v941) = v937[0];
      v935[v219] = (_BYTE)v934;
      *(_QWORD *)v224 = v930;
      *(_BYTE *)(v224 + 8) = 0;
      *(_BYTE *)(v219 + v929) = 0;
      *(_BYTE *)(v219 + v56[10]) = (_BYTE)v933;
      outlined init with copy of __RKEntityActionSpecification(v219, (uint64_t)v49, type metadata accessor for __RKEntityAudioActionArguments);
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v227 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      v228 = swift_allocObject();
      *(_OWORD *)(v228 + 16) = xmmword_21BE411F0;
      outlined init with copy of __RKEntityActionSpecification((uint64_t)v49, v228 + v227, type metadata accessor for __RKEntityActionSpecification);
      *(_BYTE *)object = 0;
      *(_QWORD *)(object + 8) = v228;
      *(_BYTE *)(object + 16) = 0;
      *(_QWORD *)(object + 24) = 0;
      *(_WORD *)(object + 32) = 0;
      swift_storeEnumTagMultiPayload();
      v229 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v230 = v939;
      v231 = v942;
      swift_retain();
      v232 = v230;
      swift_bridgeObjectRetain();
      v233 = v938;
      makeParentNode #1 (from:baseName:) in __RKEntityActionSpecification.encode(to:at:)((uint64_t)v940, 0x756F7247706F6F4CLL, (void *)0xE900000000000070, v232);
      if (v233)
      {

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v229);
        swift_release();

        outlined destroy of __RKEntityActionSpecification(object, type metadata accessor for __RKEntityActionSpecification);
        outlined destroy of __RKEntityActionSpecification((uint64_t)v49, type metadata accessor for __RKEntityActionSpecification);
        object = (uint64_t)type metadata accessor for __RKEntityAudioActionArguments;
        outlined destroy of __RKEntityActionSpecification(v219, type metadata accessor for __RKEntityAudioActionArguments);
        v202 = v936.n128_u64[0];
        v203 = type metadata accessor for __RKEntityAudioActionArguments;
        goto LABEL_57;
      }
      v949 = (__n128)v229;
      v950.n128_u64[0] = (unint64_t)v232;
      v950.n128_u64[1] = v231;
      v565 = v234;
      v566 = __RKEntityActionSpecification.encode(to:at:)(&v949, v234);
      v939 = 0;
      v421 = (void *)v566;

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v229);
      swift_release();

      outlined destroy of __RKEntityActionSpecification(object, type metadata accessor for __RKEntityActionSpecification);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v49, type metadata accessor for __RKEntityActionSpecification);
      outlined destroy of __RKEntityActionSpecification(v919, type metadata accessor for __RKEntityAudioActionArguments);
      v430 = v936.n128_u64[0];
      v429 = type metadata accessor for __RKEntityAudioActionArguments;
      goto LABEL_200;
    case 1u:
      v128 = (uint64_t)v928;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v928, type metadata accessor for __RKChangeSceneActionArguments);
      v129 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v130 = v939;
      v131 = v942;
      swift_retain();
      v132 = v130;
      v133 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v134 = v940;
      v135 = objc_msgSend(v132, sel_newNodeAtPath_type_, v940, v133);
      if (!v135)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v259 = v134;
        v259[1] = v133;
        v260 = v134;
        object = v133;
        swift_willThrow();
        outlined destroy of __RKEntityActionSpecification(v128, type metadata accessor for __RKChangeSceneActionArguments);
        v138 = v129;
        goto LABEL_77;
      }
      v136 = v135;

      object = v136;
      v137 = v938;
      setInfoId(_:on:)(0x635365676E616843, 0xEB00000000656E65, (void *)object);
      if (v137)
      {
        outlined destroy of __RKEntityActionSpecification((uint64_t)v928, type metadata accessor for __RKChangeSceneActionArguments);

        v138 = v129;
LABEL_77:
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v138);

        goto LABEL_78;
      }
      v941 = (uint64_t)v136;
      v939 = 0;
      v415 = (void *)object;
      v416 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v417 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v418 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92320);
      v419 = objc_msgSend(v417, sel_initWithString_, v418);

      if (v419)
      {
        v420 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v419);

        v421 = v415;
        objc_msgSend(v415, sel_setMetadataWithKey_value_, v416, v420);

        v949.n128_u64[0] = v129;
        v949.n128_u64[1] = *((_QWORD *)&v943 + 1);
        v422 = v129;
        v423 = v132;
        v950.n128_u64[0] = (unint64_t)v132;
        v950.n128_u64[1] = v131;
        v424 = (uint64_t)v928;
        v425 = (void *)__USDExportContext.pathTo(_:)((uint64_t)&v928[*(int *)(v914 + 20)]);
        if (v425)
        {
          v426 = (void *)*MEMORY[0x24BEBED88];
          object = v425;
          v427 = (void *)MEMORY[0x220768C3C](0x656E656373, 0xE500000000000000);
          v428 = objc_msgSend(v421, sel_newPropertyWithName_type_role_, v427, v426, 0);

          if (!v428)
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v644 = xmmword_21BE79480;
            *(_QWORD *)(v644 + 16) = v426;
            *(_QWORD *)(v644 + 24) = 0;
            *(_QWORD *)(v644 + 32) = v941;
            v645 = v421;
            v646 = v426;
            swift_willThrow();

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
            swift_release();

            v203 = type metadata accessor for __RKChangeSceneActionArguments;
            v202 = (uint64_t)v928;
            goto LABEL_57;
          }
          objc_msgSend(v428, sel_setObjectPath_, object);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          swift_release();

          v429 = type metadata accessor for __RKChangeSceneActionArguments;
          v430 = (uint64_t)v928;
LABEL_200:
          outlined destroy of __RKEntityActionSpecification(v430, v429);
        }
        else
        {
          outlined destroy of __RKEntityActionSpecification(v424, type metadata accessor for __RKChangeSceneActionArguments);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v422);

          swift_release();
        }
        return v421;
      }
      goto LABEL_349;
    case 2u:
      v139 = (uint64_t)v935;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v935, type metadata accessor for __RKEntityCustomActionArguments);
      v140 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v141 = v939;
      v142 = v942;
      swift_retain();
      v88 = v141;
      v143 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v144 = v940;
      v145 = objc_msgSend(v88, sel_newNodeAtPath_type_, v940, v143);
      if (v145)
      {
        v146 = v145;
        v940 = v88;

        v147 = v146;
        v148 = v938;
        setInfoId(_:on:)(0x6163696669746F4ELL, 0xEC0000006E6F6974, v147);
        v939 = v148;
        if (v148)
        {
          outlined destroy of __RKEntityActionSpecification((uint64_t)v935, type metadata accessor for __RKEntityCustomActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v140);
          swift_release();
          object = (uint64_t)v940;

          return (void *)object;
        }
        v938 = v146;
        v431 = v147;
        v432 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
        v433 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
        v434 = (void *)MEMORY[0x220768C3C](0xD000000000000013, 0x800000021BE922C0);
        v435 = objc_msgSend(v433, sel_initWithString_, v434);

        v436 = v940;
        if (v435)
        {
          v437 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v435);

          v941 = (uint64_t)v431;
          objc_msgSend(v431, sel_setMetadataWithKey_value_, v432, v437);

          v949.n128_u64[0] = v140;
          v949.n128_u64[1] = *((_QWORD *)&v943 + 1);
          v950.n128_u64[0] = (unint64_t)v436;
          v950.n128_u64[1] = v142;
          v438 = v935;
          v439 = __USDExportContext.pathTo(_:)((uint64_t)v935);
          if (v439)
          {
            v440 = (void *)v439;
            v441 = (void *)*MEMORY[0x24BEBED90];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            v442 = swift_allocObject();
            *(_OWORD *)(v442 + 16) = xmmword_21BE50AD0;
            *(_QWORD *)(v442 + 32) = v440;
            v949.n128_u64[0] = v442;
            specialized Array._endMutation()();
            v443 = v440;
            v444 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
            v445 = (void *)v941;
            v446 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v444, v441, 0);

            if (v446)
            {
              v937[0] = v443;
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
              swift_bridgeObjectRetain();
              v447 = v446;
              v448 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v447, sel_setObjectPathArray_, v448);
              swift_bridgeObjectRelease_n();

              v449 = (void *)*MEMORY[0x24BEBEDA8];
              v450 = (uint64_t *)&v935[*(int *)(v906 + 20)];
              v452 = *v450;
              v451 = v450[1];
              swift_bridgeObjectRetain();
              v453 = (void *)MEMORY[0x220768C3C](0x696669746E656469, 0xEA00000000007265);
              v454 = objc_msgSend(v445, sel_newPropertyWithName_type_role_, v453, v449, 0);

              object = (uint64_t)v445;
              v455 = v940;
              if (v454)
              {
                swift_bridgeObjectRetain();
                v456 = v454;
                v457 = (void *)MEMORY[0x220768C3C](v452, v451);
                objc_msgSend(v456, sel_setStringValue_, v457);

                swift_bridgeObjectRelease();
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
                swift_bridgeObjectRelease();

                swift_release();
                outlined destroy of __RKEntityActionSpecification((uint64_t)v935, type metadata accessor for __RKEntityCustomActionArguments);
                return (void *)object;
              }
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              swift_allocError();
              *(_OWORD *)v698 = xmmword_21BE793A0;
              *(_QWORD *)(v698 + 16) = v449;
              *(_QWORD *)(v698 + 24) = 0;
              *(_QWORD *)(v698 + 32) = v938;
              v699 = (id)object;
              v700 = v449;
              swift_willThrow();

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
              swift_bridgeObjectRelease();

              swift_release();
            }
            else
            {
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              swift_allocError();
              *(_OWORD *)v647 = xmmword_21BE793C0;
              *(_QWORD *)(v647 + 16) = v441;
              *(_QWORD *)(v647 + 24) = 0;
              *(_QWORD *)(v647 + 32) = v938;
              v648 = v445;
              v649 = v441;
              swift_willThrow();

              object = (uint64_t)v940;
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v140);
              swift_bridgeObjectRelease();

              swift_release();
            }
            v203 = type metadata accessor for __RKEntityCustomActionArguments;
            v202 = (uint64_t)v935;
          }
          else
          {
            object = v941;

            lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
            swift_allocError();
            *v623 = 0;
            swift_willThrow();

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v140);
            swift_release();

            v203 = type metadata accessor for __RKEntityCustomActionArguments;
            v202 = (uint64_t)v438;
          }
          goto LABEL_57;
        }
LABEL_350:
        __break(1u);
        goto LABEL_351;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      swift_allocError();
      *v261 = v144;
      v261[1] = v143;
      v262 = v144;
      object = v143;
      swift_willThrow();
      v263 = type metadata accessor for __RKEntityCustomActionArguments;
      goto LABEL_74;
    case 3u:
      v95 = (uint64_t)v932;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v932, type metadata accessor for __RKEntityEmphasisActionArguments);
      v149 = *((_QWORD *)&v943 + 1);
      v96 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v150 = v939;
      v151 = v942;
      swift_retain();
      v100 = v150;
      v152 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v153 = v940;
      v154 = objc_msgSend(v100, sel_newNodeAtPath_type_, v940, v152);
      if (v154)
      {
        v155 = v154;
        v940 = v100;

        v105 = v155;
        v156 = v938;
        setInfoId(_:on:)(0x7A69736168706D45, 0xE900000000000065, v105);
        if (v156)
        {
          v107 = type metadata accessor for __RKEntityEmphasisActionArguments;
          v108 = (uint64_t)v932;
          goto LABEL_35;
        }
        v938 = v155;
        v939 = 0;
        v941 = (uint64_t)v105;
        v458 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
        v459 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
        v460 = (void *)MEMORY[0x220768C3C](0xD000000000000010, 0x800000021BE92300);
        v461 = objc_msgSend(v459, sel_initWithString_, v460);

        v462 = v940;
        if (!v461)
        {
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
          goto LABEL_353;
        }
        v463 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v461);

        v464 = (void *)v941;
        objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v458, v463);

        v465 = v943;
        v949.n128_u64[0] = v943;
        v949.n128_u64[1] = v149;
        v950.n128_u64[0] = (unint64_t)v462;
        v950.n128_u64[1] = v151;
        v466 = (uint64_t)v932;
        v467 = __USDExportContext.pathTo(_:)((uint64_t)v932);
        if (!v467)
        {

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          object = swift_allocError();
          *v624 = 0;
          swift_willThrow();

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v465);
          swift_release();

          v203 = type metadata accessor for __RKEntityEmphasisActionArguments;
          v202 = v466;
          goto LABEL_57;
        }
        v468 = (void *)v467;
        v469 = (void *)*MEMORY[0x24BEBED90];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v470 = swift_allocObject();
        *(_OWORD *)(v470 + 16) = xmmword_21BE50AD0;
        *(_QWORD *)(v470 + 32) = v468;
        v949.n128_u64[0] = v470;
        specialized Array._endMutation()();
        object = v949.n128_u64[0];
        v471 = v468;
        v472 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
        v473 = objc_msgSend(v464, sel_newPropertyWithName_type_role_, v472, v469, 0);

        if (!v473)
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v650 = xmmword_21BE793C0;
          *(_QWORD *)(v650 + 16) = v469;
          *(_QWORD *)(v650 + 24) = 0;
          *(_QWORD *)(v650 + 32) = v938;
          v651 = v464;
          v652 = v469;
          swift_willThrow();

          v653 = v940;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          swift_bridgeObjectRelease();

          swift_release();
          v203 = type metadata accessor for __RKEntityEmphasisActionArguments;
          v202 = (uint64_t)v932;
          goto LABEL_57;
        }
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        swift_bridgeObjectRetain();
        v474 = v473;
        v475 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v474, sel_setObjectPathArray_, v475);
        swift_bridgeObjectRelease_n();

        v476 = v912;
        v477 = (uint64_t)v932;
        v478 = (float *)&v932[*(int *)(v912 + 20)];
        v479 = *((unsigned __int8 *)v478 + 4);
        v480 = *v478;
        if (v479)
          v481 = 0;
        else
          v481 = *(_QWORD *)&v480;
        v482 = v939;
        v483 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x24BEBED20], 0, v481, v479, v464);
        if (!v482)
        {

          v701 = *(unsigned __int8 *)(v477 + *(int *)(v476 + 28));
          v939 = v471;
          __asm { BR              X10 }
        }
        outlined destroy of __RKEntityActionSpecification(v477, type metadata accessor for __RKEntityEmphasisActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        swift_release();
        object = (uint64_t)v940;
LABEL_49:

        return (void *)object;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      swift_allocError();
      *v264 = v153;
      v264[1] = v152;
      v265 = v153;
      object = v152;
      swift_willThrow();
      v253 = type metadata accessor for __RKEntityEmphasisActionArguments;
      goto LABEL_71;
    case 6u:
      object = *(unsigned __int8 *)v52;
      v937[0] = v52[1];
      v936.n128_u64[0] = (unint64_t)v52[3];
      LODWORD(v935) = *((unsigned __int8 *)v52 + 32);
      v86 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v87 = v939;
      swift_retain();
      v88 = v87;
      v89 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v90 = v940;
      v91 = objc_msgSend(v88, sel_newNodeAtPath_type_, v940, v89);
      if (!v91)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        object = swift_allocError();
        *v248 = v90;
        v248[1] = v89;
        v249 = v90;
        v250 = v89;
        swift_willThrow();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v86);
        swift_bridgeObjectRelease();

        goto LABEL_75;
      }
      v92 = v91;

      v93 = v92;
      v94 = v938;
      setInfoId(_:on:)(0x70756F7247, 0xE500000000000000, v93);
      if (v94)
      {

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v86);
        swift_bridgeObjectRelease();
        goto LABEL_75;
      }
      v941 = (uint64_t)v93;
      v939 = 0;
      v310 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v311 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v312 = (void *)MEMORY[0x220768C3C](0x634170756F72472FLL, 0xEC0000006E6F6974);
      v313 = objc_msgSend(v311, sel_initWithString_, v312);

      if (!v313)
        goto LABEL_345;
      v314 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v313);

      v315 = (void *)v941;
      objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v310, v314);

      v316 = (void *)*MEMORY[0x24BEBEDB0];
      if ((_DWORD)object)
        v317 = 0x6C6169726573;
      else
        v317 = 0x6C656C6C61726170;
      if ((_DWORD)object)
        v318 = 0xE600000000000000;
      else
        v318 = 0xE800000000000000;
      v319 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v320 = (void *)MEMORY[0x220768C3C](v317, v318);
      swift_bridgeObjectRelease();
      v321 = objc_msgSend(v319, sel_initWithString_, v320);

      object = MEMORY[0x220768C3C](1701869940, 0xE400000000000000);
      v322 = objc_msgSend(v315, sel_newPropertyWithName_type_role_, object, v316, 0);

      if (v322)
      {
        if (v321)
        {
          objc_msgSend(v322, sel_setTokenValue_, v321);

          if ((v935 & 1) != 0)
          {
LABEL_357:
            __break(1u);
            goto LABEL_358;
          }
          v323 = (void *)*MEMORY[0x24BEBED18];
          v324 = (void *)MEMORY[0x220768C3C](0x73706F6F6CLL, 0xE500000000000000);
          v325 = (void *)v941;
          v326 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v324, v323, 0);

          if (!v326)
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            object = swift_allocError();
            v739 = xmmword_21BE79460;
            goto LABEL_253;
          }
          v327 = v936.n128_u64[0];
          objc_msgSend(v326, sel_setBoolValue_, v936.n128_u64[0] == 0);

          if (v327 < (uint64_t)0xFFFFFFFF80000000)
          {
            __break(1u);
          }
          else if (v327 <= 0x7FFFFFFF)
          {
            v323 = (void *)*MEMORY[0x24BEBED78];
            v328 = (void *)MEMORY[0x220768C3C](0x436D726F66726570, 0xEC000000746E756FLL);
            v325 = (void *)v941;
            v329 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v328, v323, 0);

            if (v329)
            {
              objc_msgSend(v329, sel_setIntValue_, v936.n128_u64[0]);

              v947 = specialized static Array._allocateUninitialized(_:)(0);
              v945 = 0;
              v946 = 0;
              v944 = (unint64_t)v937[0];
              v330 = v916;
              specialized EnumeratedSequence.Iterator.next()(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification), (uint64_t (*)(_QWORD, __n128))type metadata accessor for __RKEntityActionSpecification, v916);
              v331 = v915;
              outlined init with take of Transform?((uint64_t)v330, (uint64_t)v915, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
              v332 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification));
              v333 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v332 - 8) + 48))(v331, 1, v332);
              v334 = v943;
              if (v333 == 1)
              {
                v335 = v939;
LABEL_261:
                swift_bridgeObjectRelease();
                v766 = (void *)*MEMORY[0x24BEBED90];
                v767 = swift_bridgeObjectRetain();
                object = specialized Sequence.compactMap<A>(_:)(v767);
                swift_bridgeObjectRelease_n();
                v768 = v766;
                v769 = (void *)v941;
                v770 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x736E6F69746361, 0xE700000000000000, v768, 0, object, (void *)v941);
                if (!v335)
                {
                  v828 = v770;

                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v334);
                  swift_bridgeObjectRelease();

                  swift_release();
                  return v769;
                }
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v334);
                swift_bridgeObjectRelease();

                goto LABEL_75;
              }
              v940 = v88;
              v335 = v939;
              v753 = (uint64_t)v904;
              while (1)
              {
                v754 = v331;
                v755 = *v331;
                outlined init with take of __RKEntityActionSpecification((uint64_t)v754 + *(int *)(v332 + 48), v753, type metadata accessor for __RKEntityActionSpecification);
                v756 = objc_msgSend((id)v941, sel_path);
                v949.n128_u64[0] = 0;
                v949.n128_u64[1] = 0xE000000000000000;
                v757 = &v949;
                v758._countAndFlagsBits = 0x5F6E6F69746341;
                v758._object = (void *)0xE700000000000000;
                DefaultStringInterpolation.appendLiteral(_:)(v758);
                v759 = (id)(v755 + 1);
                if (__OFADD__(v755, 1))
                  break;
                specialized DefaultStringInterpolation.appendInterpolation<A>(_:)();
                v760._countAndFlagsBits = 0;
                v760._object = (void *)0xE000000000000000;
                DefaultStringInterpolation.appendLiteral(_:)(v760);
                USKObjectPath.appendingPathComponent(_:)(v949.n128_i64[0], (void *)v949.n128_u64[1]);
                v762 = v761;

                swift_bridgeObjectRelease();
                v334 = v943;
                v949 = (__n128)v943;
                v763 = v940;
                v950.n128_u64[0] = (unint64_t)v940;
                v950.n128_u64[1] = v942;
                __RKEntityActionSpecification.encode(to:at:)(&v949, v762);
                if (v335)
                {
                  object = v941;

                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v334);
                  swift_release();

                  outlined destroy of __RKEntityActionSpecification(v753, type metadata accessor for __RKEntityActionSpecification);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return (void *)object;
                }
                specialized Array.append(_:)();

                outlined destroy of __RKEntityActionSpecification(v753, type metadata accessor for __RKEntityActionSpecification);
                v764 = v916;
                specialized EnumeratedSequence.Iterator.next()(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification), (uint64_t (*)(_QWORD, __n128))type metadata accessor for __RKEntityActionSpecification, v916);
                v765 = (uint64_t)v764;
                v331 = v915;
                outlined init with take of Transform?(v765, (uint64_t)v915, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
                v332 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification));
                if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v332 - 8) + 48))(v331, 1, v332) == 1)
                {
                  v88 = v940;
                  goto LABEL_261;
                }
              }
              __break(1u);
              goto LABEL_333;
            }
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            object = swift_allocError();
            v739 = xmmword_21BE79450;
LABEL_253:
            *(_OWORD *)v738 = v739;
            *(_QWORD *)(v738 + 16) = v323;
            *(_QWORD *)(v738 + 24) = 0;
            *(_QWORD *)(v738 + 32) = v92;
            v750 = v323;
            swift_willThrow();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);

            swift_bridgeObjectRelease();
            goto LABEL_75;
          }
          __break(1u);
LABEL_339:
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
LABEL_342:
          __break(1u);
          goto LABEL_343;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v631 = 0u;
        *(_OWORD *)(v631 + 16) = 0u;
        *(_QWORD *)(v631 + 32) = 0;
        swift_willThrow();

        v315 = (void *)v941;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        object = swift_allocError();
        *(_OWORD *)v617 = xmmword_21BE79390;
        *(_QWORD *)(v617 + 16) = v316;
        *(_QWORD *)(v617 + 24) = 0;
        *(_QWORD *)(v617 + 32) = v92;
        v618 = v315;
        v619 = v316;
        swift_willThrow();
      }
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
      swift_release();

      swift_bridgeObjectRelease();
      return (void *)object;
    case 7u:
      v95 = (uint64_t)v931;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v931, type metadata accessor for __RKEntityHideActionArguments);
      v97 = *((_QWORD *)&v943 + 1);
      v96 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v98 = v939;
      v99 = v942;
      swift_retain();
      v100 = v98;
      v101 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v102 = v940;
      v103 = objc_msgSend(v100, sel_newNodeAtPath_type_, v940, v101);
      if (v103)
      {
        v104 = v103;
        v940 = v100;

        v105 = v104;
        v106 = v938;
        setInfoId(_:on:)(0x696C696269736956, 0xEA00000000007974, v105);
        if (v106)
        {
          v107 = type metadata accessor for __RKEntityHideActionArguments;
          v108 = (uint64_t)v931;
LABEL_35:
          outlined destroy of __RKEntityActionSpecification(v108, v107);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v96);
          swift_release();
          object = (uint64_t)v940;
          goto LABEL_49;
        }
        v938 = v104;
        v939 = 0;
        v941 = (uint64_t)v105;
        v336 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
        v337 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
        v338 = (void *)MEMORY[0x220768C3C](0xD000000000000011, 0x800000021BE92260);
        v339 = objc_msgSend(v337, sel_initWithString_, v338);

        if (!v339)
        {
LABEL_346:
          __break(1u);
          goto LABEL_347;
        }
        v340 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v339);

        v341 = (void *)v941;
        objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v336, v340);

        v342 = v943;
        v949.n128_u64[0] = v943;
        v949.n128_u64[1] = v97;
        v343 = v940;
        v950.n128_u64[0] = (unint64_t)v940;
        v950.n128_u64[1] = v99;
        v344 = (uint64_t)v931;
        v345 = __USDExportContext.pathTo(_:)((uint64_t)v931);
        if (!v345)
        {

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          object = swift_allocError();
          *v620 = 0;
          swift_willThrow();

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v342);
          swift_release();

          v203 = type metadata accessor for __RKEntityHideActionArguments;
          v202 = v344;
          goto LABEL_57;
        }
        v346 = (void *)v345;
        v347 = (void *)*MEMORY[0x24BEBED90];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v348 = swift_allocObject();
        *(_OWORD *)(v348 + 16) = xmmword_21BE50AD0;
        *(_QWORD *)(v348 + 32) = v346;
        v949.n128_u64[0] = v348;
        specialized Array._endMutation()();
        object = v949.n128_u64[0];
        v349 = v346;
        v350 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
        v351 = objc_msgSend(v341, sel_newPropertyWithName_type_role_, v350, v347, 0);

        if (v351)
        {
          v937[0] = v349;
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          v352 = v351;
          v353 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v352, sel_setObjectPathArray_, v353);
          swift_bridgeObjectRelease_n();

          v354 = (void *)*MEMORY[0x24BEBED20];
          v355 = (int *)v911;
          v356 = (uint64_t)v931;
          v357 = (float *)&v931[*(int *)(v911 + 20)];
          v358 = *((unsigned __int8 *)v357 + 4);
          v359 = *v357;
          if (v358)
            v360 = 0;
          else
            v360 = *(_QWORD *)&v359;
          v361 = v939;
          v362 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x24BEBED20], 0, v360, v358, v341);
          if (v361)
          {
            outlined destroy of __RKEntityActionSpecification(v356, type metadata accessor for __RKEntityHideActionArguments);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
            goto LABEL_115;
          }
          v939 = v354;

          v671 = (void *)*MEMORY[0x24BEBEDB0];
          v672 = objc_allocWithZone(MEMORY[0x24BEBED08]);
          v673 = (void *)MEMORY[0x220768C3C](1701079400, 0xE400000000000000);
          v674 = objc_msgSend(v672, sel_initWithString_, v673);

          v675 = (void *)MEMORY[0x220768C3C](1701869940, 0xE400000000000000);
          v676 = objc_msgSend(v341, sel_newPropertyWithName_type_role_, v675, v671, 0);

          if (v676)
          {
            if (v674)
            {
              v936.n128_u64[0] = (unint64_t)v671;
              objc_msgSend(v676, sel_setTokenValue_, v674);

              v677 = v355[8];
              v678 = (uint64_t)v931;
              v949.n128_u8[0] = v931[v355[7]];
              LOBYTE(v944) = v931[v677];
              __RKEntityActionSpecification.setEaseType(ease:easeType:on:)(&v949, (uint64_t)&v944, (void *)v941);
              if (*(_BYTE *)(v678 + v355[14]) == 3)
              {
                v839 = 0;
              }
              else
              {
                LOBYTE(v944) = *(_BYTE *)(v678 + v355[14]);
                closure #24 in __RKEntityActionSpecification.encode(to:at:)(&v944, &v949);
                v839 = (void *)v949.n128_u64[0];
              }
              v853 = v938;
              v854 = (void *)MEMORY[0x220768C3C](0x656C797473, 0xE500000000000000);
              v855 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v854, v936.n128_u64[0], 0);

              if (v855)
              {
                if (v839)
                {
                  v856 = (void (*)(void))implicit closure #108 in __RKEntityActionSpecification.encode(to:at:)(v855);
                  v857 = v839;
                  v856();

                  swift_release();
                  v858 = v911;
                  v859 = (uint64_t)v931;
                  v860 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation33__RKEntityActionVisibilityTypeUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k23C0A10Foundation02__cD17gH11USDOXEfU24_Tf1cn_nTm(byte_21BE79336[(char)v931[*(int *)(v911 + 60)]]);
                  v861 = (void *)v941;

                  v878 = v859 + *(int *)(v858 + 24);
                  v879 = *(float *)v878;
                  v949.n128_u8[0] = *(_BYTE *)(v878 + 4);
                  v880 = v879;
                  v881 = ((unint64_t)v949.n128_u8[0] << 32) & 0x100000000;
                  if (v881)
                    v882 = 0;
                  else
                    v882 = *(_QWORD *)&v880;
                  v892 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x7473694465766F6DLL, 0xEC00000065636E61, v939, 0, v882, SBYTE4(v881), v861);

                  v893 = v940;
                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);

                  object = v941;
                  swift_release();

                  outlined destroy of __RKEntityActionSpecification((uint64_t)v931, type metadata accessor for __RKEntityHideActionArguments);
                  return (void *)object;
                }
                lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                swift_allocError();
                *(_OWORD *)v872 = 0u;
                *(_OWORD *)(v872 + 16) = 0u;
                *(_QWORD *)(v872 + 32) = 0;
                swift_willThrow();

                v868 = v940;
                v866 = (void *)v941;
                v937[0] = (id)v941;
                object = (uint64_t)v940;
              }
              else
              {
                lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                swift_allocError();
                *(_OWORD *)v864 = xmmword_21BE79440;
                v865 = (void *)v936.n128_u64[0];
                *(_QWORD *)(v864 + 16) = v936.n128_u64[0];
                *(_QWORD *)(v864 + 24) = 0;
                *(_QWORD *)(v864 + 32) = v853;
                v866 = (void *)v941;
                object = (uint64_t)(id)v941;
                v867 = v865;
                swift_willThrow();
                v868 = v940;
                v855 = v940;
              }

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
              swift_release();

              outlined destroy of __RKEntityActionSpecification((uint64_t)v931, type metadata accessor for __RKEntityHideActionArguments);
              return (void *)object;
            }
            v813 = 0;
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v829 = 0u;
            *(_OWORD *)(v829 + 16) = 0u;
            *(_QWORD *)(v829 + 32) = 0;
            swift_willThrow();

            object = (uint64_t)v940;
            v341 = (void *)v941;
            v818 = (id)v941;
            v815 = v940;
            v817 = v943;
          }
          else
          {
            v813 = v674;
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v814 = xmmword_21BE79390;
            *(_QWORD *)(v814 + 16) = v671;
            *(_QWORD *)(v814 + 24) = 0;
            *(_QWORD *)(v814 + 32) = v938;
            v815 = v341;
            v816 = v671;
            swift_willThrow();
            object = (uint64_t)v940;
            v676 = v940;
            v817 = v943;
            v818 = v937[0];
          }

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v817);
          swift_release();

        }
        else
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v632 = xmmword_21BE793C0;
          *(_QWORD *)(v632 + 16) = v347;
          *(_QWORD *)(v632 + 24) = 0;
          *(_QWORD *)(v632 + 32) = v938;
          v633 = v341;
          v634 = v347;
          swift_willThrow();

          v635 = v940;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          swift_bridgeObjectRelease();

          swift_release();
        }
        v203 = type metadata accessor for __RKEntityHideActionArguments;
        v202 = (uint64_t)v931;
        goto LABEL_57;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      swift_allocError();
      *v251 = v102;
      v251[1] = v101;
      v252 = v102;
      object = v101;
      swift_willThrow();
      v253 = type metadata accessor for __RKEntityHideActionArguments;
LABEL_71:
      outlined destroy of __RKEntityActionSpecification(v95, v253);
      v256 = v96;
      goto LABEL_72;
    case 8u:
      v139 = (uint64_t)v934;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v934, type metadata accessor for __RKEntityForceActionArguments);
      v140 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v157 = v939;
      v158 = v942;
      swift_retain();
      v88 = v157;
      v159 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v160 = v940;
      v161 = objc_msgSend(v88, sel_newNodeAtPath_type_, v940, v159);
      if (!v161)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v266 = v160;
        v266[1] = v159;
        v267 = v160;
        object = v159;
        swift_willThrow();
        v263 = type metadata accessor for __RKEntityForceActionArguments;
LABEL_74:
        outlined destroy of __RKEntityActionSpecification(v139, v263);
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v140);

LABEL_75:
        swift_release();

        return (void *)object;
      }
      v162 = v161;
      v940 = v88;

      v163 = v162;
      v164 = v938;
      setInfoId(_:on:)(0x65736C75706D49, 0xE700000000000000, v163);
      if (!v164)
      {
        v938 = v162;
        v939 = 0;
        v941 = (uint64_t)v163;
        v484 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
        v485 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
        v486 = (void *)MEMORY[0x220768C3C](0x65736C75706D492FLL, 0xEE006E6F69746341);
        v487 = objc_msgSend(v485, sel_initWithString_, v486);

        v488 = (uint64_t)v934;
        if (v487)
        {
          v489 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v487);

          objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v484, v489);
          v949.n128_u64[0] = v140;
          v949.n128_u64[1] = *((_QWORD *)&v943 + 1);
          v490 = v940;
          v950.n128_u64[0] = (unint64_t)v940;
          v950.n128_u64[1] = v158;
          v491 = __USDExportContext.pathTo(_:)(v488);
          if (!v491)
          {
            object = v941;

            lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
            swift_allocError();
            *v625 = 0;
            swift_willThrow();

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v140);
            swift_release();

            v203 = type metadata accessor for __RKEntityForceActionArguments;
            v202 = v488;
            goto LABEL_57;
          }
          v492 = (void *)v491;
          v493 = (void *)*MEMORY[0x24BEBED90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v494 = swift_allocObject();
          *(_OWORD *)(v494 + 16) = xmmword_21BE50AD0;
          *(_QWORD *)(v494 + 32) = v492;
          v949.n128_u64[0] = v494;
          specialized Array._endMutation()();
          object = v492;
          v495 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
          v496 = (void *)v941;
          v497 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v495, v493, 0);

          if (!v497)
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v654 = xmmword_21BE793C0;
            *(_QWORD *)(v654 + 16) = v493;
            *(_QWORD *)(v654 + 24) = 0;
            *(_QWORD *)(v654 + 32) = v938;
            v655 = v496;
            v656 = v493;
            swift_willThrow();

            object = (uint64_t)v940;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
            swift_bridgeObjectRelease();

            swift_release();
            v203 = type metadata accessor for __RKEntityForceActionArguments;
            v202 = (uint64_t)v934;
            goto LABEL_57;
          }
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          v498 = v497;
          v499 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v498, sel_setObjectPathArray_, v499);
          swift_bridgeObjectRelease_n();

          v500 = (void *)*MEMORY[0x24BEBED28];
          v501 = (float32x2_t *)&v934[*(int *)(v905 + 24)];
          v502 = 0uLL;
          v503 = 0uLL;
          v132 = v940;
          if ((v501[2].i8[0] & 1) == 0)
          {
            v502 = vcvtq_f64_f32(*v501);
            v503.n128_u64[1] = 0;
            v503.n128_f64[0] = COERCE_FLOAT(*(_QWORD *)&v501[1]);
          }
          v936 = v503;
          *(float64x2_t *)v937 = v502;
          v504 = (void *)MEMORY[0x220768C3C](0x797469636F6C6576, 0xE800000000000000);
          v505 = (void *)v941;
          v506 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v504, v500, 0);

          if (v506)
          {
            v949 = *(__n128 *)v937;
            v950 = v936;
            objc_msgSend(v506, sel_setDouble3Value_, &v949);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
            swift_release();

            outlined destroy of __RKEntityActionSpecification((uint64_t)v934, type metadata accessor for __RKEntityForceActionArguments);
            return v505;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v702 = xmmword_21BE79430;
          *(_QWORD *)(v702 + 16) = v500;
          *(_QWORD *)(v702 + 24) = 0;
          *(_QWORD *)(v702 + 32) = v938;
          v703 = v505;
          v704 = v500;
          swift_willThrow();
          outlined destroy of __RKEntityActionSpecification((uint64_t)v934, type metadata accessor for __RKEntityForceActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
LABEL_78:
          swift_release();

          return (void *)object;
        }
        goto LABEL_352;
      }
      outlined destroy of __RKEntityActionSpecification((uint64_t)v934, type metadata accessor for __RKEntityForceActionArguments);

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v140);
      goto LABEL_39;
    case 9u:
      v165 = (uint64_t)v930;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v930, type metadata accessor for __RKEntityShowActionArguments);
      v166 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v167 = v939;
      v168 = v942;
      swift_retain();
      v132 = v167;
      v169 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v170 = v940;
      v171 = objc_msgSend(v132, sel_newNodeAtPath_type_, v940, v169);
      if (!v171)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v268 = v170;
        v268[1] = v169;
        v269 = v170;
        object = v169;
        swift_willThrow();
        outlined destroy of __RKEntityActionSpecification(v165, type metadata accessor for __RKEntityShowActionArguments);
        v138 = v166;
        goto LABEL_77;
      }
      v172 = v171;
      v940 = v132;

      v173 = v172;
      v174 = v938;
      setInfoId(_:on:)(0x696C696269736956, 0xEA00000000007974, v173);
      if (v174)
      {
        outlined destroy of __RKEntityActionSpecification((uint64_t)v930, type metadata accessor for __RKEntityShowActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v166);
LABEL_115:
        swift_release();
        object = (uint64_t)v940;

        return (void *)object;
      }
      v938 = v172;
      v939 = 0;
      v941 = (uint64_t)v173;
      v507 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v508 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v509 = (void *)MEMORY[0x220768C3C](0xD000000000000011, 0x800000021BE92260);
      v510 = objc_msgSend(v508, sel_initWithString_, v509);

      if (!v510)
      {
LABEL_353:
        __break(1u);
        goto LABEL_354;
      }
      v511 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v510);

      v512 = (void *)v941;
      objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v507, v511);

      v513 = v943;
      v949 = (__n128)v943;
      v514 = v940;
      v950.n128_u64[0] = (unint64_t)v940;
      v950.n128_u64[1] = v168;
      v515 = (uint64_t)v930;
      v516 = __USDExportContext.pathTo(_:)((uint64_t)v930);
      if (!v516)
      {

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        object = swift_allocError();
        *v626 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v513);
        swift_release();

        v203 = type metadata accessor for __RKEntityShowActionArguments;
        v202 = v515;
        goto LABEL_57;
      }
      v517 = (void *)v516;
      v518 = (void *)*MEMORY[0x24BEBED90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v519 = swift_allocObject();
      *(_OWORD *)(v519 + 16) = xmmword_21BE50AD0;
      *(_QWORD *)(v519 + 32) = v517;
      v949.n128_u64[0] = v519;
      specialized Array._endMutation()();
      v520 = v517;
      v521 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
      v522 = objc_msgSend(v512, sel_newPropertyWithName_type_role_, v521, v518, 0);

      if (v522)
      {
        v937[0] = v520;
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        swift_bridgeObjectRetain();
        v523 = v522;
        v524 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v523, sel_setObjectPathArray_, v524);
        swift_bridgeObjectRelease_n();

        v525 = (void *)*MEMORY[0x24BEBED20];
        v526 = (int *)v910;
        v527 = (uint64_t)v930;
        v528 = (float *)&v930[*(int *)(v910 + 20)];
        v529 = *((unsigned __int8 *)v528 + 4);
        v530 = *v528;
        if (v529)
          v531 = 0;
        else
          v531 = *(_QWORD *)&v530;
        v532 = v939;
        v533 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x24BEBED20], 0, v531, v529, v512);
        if (v532)
        {
          outlined destroy of __RKEntityActionSpecification(v527, type metadata accessor for __RKEntityShowActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          goto LABEL_115;
        }
        v939 = v525;

        v705 = (void *)*MEMORY[0x24BEBEDB0];
        v706 = objc_allocWithZone(MEMORY[0x24BEBED08]);
        v707 = (void *)MEMORY[0x220768C3C](2003789939, 0xE400000000000000);
        v708 = objc_msgSend(v706, sel_initWithString_, v707);

        v709 = (void *)MEMORY[0x220768C3C](1701869940, 0xE400000000000000);
        v710 = objc_msgSend(v512, sel_newPropertyWithName_type_role_, v709, v705, 0);

        if (v710)
        {
          if (v708)
          {
            v938 = v705;
            objc_msgSend(v710, sel_setTokenValue_, v708);

            v711 = v526[8];
            v712 = (uint64_t)v930;
            v949.n128_u8[0] = v930[v526[7]];
            LOBYTE(v944) = v930[v711];
            __RKEntityActionSpecification.setEaseType(ease:easeType:on:)(&v949, (uint64_t)&v944, v512);
            if (*(_BYTE *)(v712 + v526[14]) == 3)
            {
              v840 = 0;
            }
            else
            {
              LOBYTE(v944) = *(_BYTE *)(v712 + v526[14]);
              closure #24 in __RKEntityActionSpecification.encode(to:at:)(&v944, &v949);
              v840 = (void *)v949.n128_u64[0];
            }
            v862 = v938;
            v863 = (void *)v941;

            v869 = v910;
            v870 = (uint64_t)v930;
            v871 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation33__RKEntityActionVisibilityTypeUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k23C0A10Foundation02__cD17gH11USDOXEfU24_Tf1cn_nTm(byte_21BE79336[(char)v930[*(int *)(v910 + 60)]]);

            v884 = v870 + *(int *)(v869 + 24);
            v885 = *(float *)v884;
            v949.n128_u8[0] = *(_BYTE *)(v884 + 4);
            v886 = v885;
            v887 = ((unint64_t)v949.n128_u8[0] << 32) & 0x100000000;
            if (v887)
              v888 = 0;
            else
              v888 = *(_QWORD *)&v886;
            v894 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x7473694465766F6DLL, 0xEC00000065636E61, v939, 0, v888, SBYTE4(v887), v863);

            v895 = v940;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);

            object = v941;
            swift_release();

            outlined destroy of __RKEntityActionSpecification((uint64_t)v930, type metadata accessor for __RKEntityShowActionArguments);
            return (void *)object;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v833 = 0u;
          *(_OWORD *)(v833 + 16) = 0u;
          *(_QWORD *)(v833 + 32) = 0;
          swift_willThrow();

          v826 = v512;
          v825 = v940;
          v823 = v940;
          object = v943;
        }
        else
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v822 = xmmword_21BE79390;
          *(_QWORD *)(v822 + 16) = v705;
          *(_QWORD *)(v822 + 24) = 0;
          *(_QWORD *)(v822 + 32) = v938;
          v823 = v512;
          v824 = v705;
          swift_willThrow();
          v825 = v940;
          v710 = v940;
          object = v943;
          v826 = v937[0];
        }

        outlined consume of (@escaping @callee_guaranteed () -> ())?(object);
        swift_release();

      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v657 = xmmword_21BE793C0;
        *(_QWORD *)(v657 + 16) = v518;
        *(_QWORD *)(v657 + 24) = 0;
        *(_QWORD *)(v657 + 32) = v938;
        v658 = v512;
        v659 = v518;
        swift_willThrow();

        object = (uint64_t)v940;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        swift_bridgeObjectRelease();

        swift_release();
      }
      v203 = type metadata accessor for __RKEntityShowActionArguments;
      v202 = (uint64_t)v930;
      goto LABEL_57;
    case 0xAu:
      v175 = (unint64_t)v937[0];
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v937[0], type metadata accessor for __RKEntityStartAnimateActionArguments);
      v176 = started;
      if (*(uint64_t *)(v175 + started[5]) >= 2)
      {
        v177 = v925;
        v178 = v926;
        v179 = *(void (**)(char *, unint64_t, uint64_t))(v925 + 16);
        v941 = started[5];
        v179(v28, v175, v926);
        v180 = v176[7];
        LODWORD(v935) = *(unsigned __int8 *)(v175 + v176[6]);
        v181 = *(_QWORD *)(v175 + v180);
        v182 = v176[9];
        v183 = *(_QWORD *)(v175 + v176[8]);
        v184 = v176[11];
        LODWORD(v933) = *(unsigned __int8 *)(v175 + v176[10]);
        v185 = *(_DWORD *)(v175 + v184);
        LODWORD(v934) = *(unsigned __int8 *)(v175 + v182);
        v186 = (uint64_t)v918;
        v936.n128_u64[0] = (unint64_t)&v918[v176[14]];
        v187 = *(void (**)(void))(v177 + 56);
        v187();
        (*(void (**)(uint64_t, char *, uint64_t))(v177 + 32))(v186, v28, v178);
        *(_QWORD *)(v186 + v176[5]) = 0;
        *(_BYTE *)(v186 + v176[6]) = (_BYTE)v935;
        *(_BYTE *)(v186 + v176[10]) = (_BYTE)v933;
        *(_QWORD *)(v186 + v176[8]) = v183;
        *(_QWORD *)(v186 + v176[7]) = v181;
        *(_DWORD *)(v186 + v176[11]) = v185;
        *(_BYTE *)(v186 + v176[9]) = (_BYTE)v934;
        *(_BYTE *)(v186 + v176[12]) = 0;
        v188 = v186 + v176[13];
        *(_QWORD *)v188 = 0x3FF0000000000000;
        *(_BYTE *)(v188 + 8) = 0;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
        v189 = v939;
        swift_retain();
        v190 = v189;
        v191 = v936.n128_u64[0];
        outlined destroy of BodyTrackingComponent?(v936.n128_i64[0], &demangling cache variable for type metadata for UUID?);
        ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v187)(v191, 1, 1, v178);
        v192 = (unint64_t)v937[0];
        v193 = v921;
        outlined init with take of __RKEntityActionSpecification(v186, v921, type metadata accessor for __RKEntityStartAnimateActionArguments);
        v194 = v920;
        outlined init with copy of __RKEntityActionSpecification(v193, v920, type metadata accessor for __RKEntityStartAnimateActionArguments);
        swift_storeEnumTagMultiPayload();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        v195 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
        v196 = swift_allocObject();
        *(_OWORD *)(v196 + 16) = xmmword_21BE411F0;
        outlined init with copy of __RKEntityActionSpecification(v194, v196 + v195, type metadata accessor for __RKEntityActionSpecification);
        v197 = v192;
        v198 = *(_QWORD *)(v192 + v941);
        v199 = (uint64_t)v917;
        *v917 = 0;
        *(_QWORD *)(v199 + 8) = v196;
        *(_BYTE *)(v199 + 16) = 0;
        *(_QWORD *)(v199 + 24) = v198;
        *(_WORD *)(v199 + 32) = 0;
        swift_storeEnumTagMultiPayload();
        v200 = v938;
        makeParentNode #1 (from:baseName:) in __RKEntityActionSpecification.encode(to:at:)((uint64_t)v940, 0x756F7247706F6F4CLL, (void *)0xE900000000000070, v190);
        if (!v200)
        {
          v562 = v201;
          v949 = (__n128)v943;
          v950.n128_u64[0] = (unint64_t)v190;
          v950.n128_u64[1] = v942;
          object = __RKEntityActionSpecification.encode(to:at:)(&v949, v201);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          swift_release();

          outlined destroy of __RKEntityActionSpecification(v199, type metadata accessor for __RKEntityActionSpecification);
          outlined destroy of __RKEntityActionSpecification(v920, type metadata accessor for __RKEntityActionSpecification);
          outlined destroy of __RKEntityActionSpecification(v921, type metadata accessor for __RKEntityStartAnimateActionArguments);
          outlined destroy of __RKEntityActionSpecification(v197, type metadata accessor for __RKEntityStartAnimateActionArguments);
          return (void *)object;
        }

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        swift_release();

        outlined destroy of __RKEntityActionSpecification(v199, type metadata accessor for __RKEntityActionSpecification);
        outlined destroy of __RKEntityActionSpecification(v194, type metadata accessor for __RKEntityActionSpecification);
        object = (uint64_t)type metadata accessor for __RKEntityStartAnimateActionArguments;
        outlined destroy of __RKEntityActionSpecification(v193, type metadata accessor for __RKEntityStartAnimateActionArguments);
        v202 = v192;
        v203 = type metadata accessor for __RKEntityStartAnimateActionArguments;
        goto LABEL_57;
      }
      v235 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v236 = v939;
      v237 = v942;
      swift_retain();
      v132 = v236;
      v238 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v239 = v940;
      v240 = objc_msgSend(v132, sel_newNodeAtPath_type_, v940, v238);
      if (!v240)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v563 = v239;
        v563[1] = v238;
        v564 = v239;
        object = v238;
        swift_willThrow();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v937[0], type metadata accessor for __RKEntityStartAnimateActionArguments);
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v235);

        goto LABEL_78;
      }
      v241 = v240;

      object = v241;
      v242 = v938;
      setInfoId(_:on:)(0x696E417472617453, 0xEE006E6F6974616DLL, (void *)object);
      v939 = v242;
      if (v242)
      {
        outlined destroy of __RKEntityActionSpecification((uint64_t)v937[0], type metadata accessor for __RKEntityStartAnimateActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        swift_release();

        return (void *)object;
      }
      v941 = object;
      v592 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v593 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v594 = (void *)MEMORY[0x220768C3C](0xD000000000000015, 0x800000021BE922A0);
      v595 = objc_msgSend(v593, sel_initWithString_, v594);

      if (!v595)
        goto LABEL_356;
      v596 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, (_QWORD)v235);

      objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v592, v596);
      v597 = v943;
      v949.n128_u64[0] = v943;
      v949.n128_u64[1] = *((_QWORD *)&v235 + 1);
      v950.n128_u64[0] = (unint64_t)v132;
      v950.n128_u64[1] = v237;
      v598 = (unint64_t)v937[0];
      v599 = __USDExportContext.pathTo(_:)((uint64_t)v937[0]);
      if (!v599)
      {
        v665 = (void *)v941;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        object = swift_allocError();
        *v666 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v597);
        swift_release();

        v203 = type metadata accessor for __RKEntityStartAnimateActionArguments;
        v202 = v598;
        goto LABEL_57;
      }
      v600 = (void *)v599;
      v940 = v132;
      v601 = (void *)*MEMORY[0x24BEBED90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v602 = swift_allocObject();
      *(_OWORD *)(v602 + 16) = xmmword_21BE50AD0;
      *(_QWORD *)(v602 + 32) = v600;
      v949.n128_u64[0] = v602;
      specialized Array._endMutation()();
      object = v949.n128_u64[0];
      v603 = v600;
      v604 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
      v605 = (void *)v941;
      v606 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v604, v601, 0);

      if (!v606)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v745 = xmmword_21BE793C0;
        *(_QWORD *)(v745 + 16) = v601;
        *(_QWORD *)(v745 + 24) = 0;
        *(_QWORD *)(v745 + 32) = v241;
        v746 = v605;
        v747 = v601;
        swift_willThrow();

        v748 = v940;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        swift_bridgeObjectRelease();

        swift_release();
        v203 = type metadata accessor for __RKEntityStartAnimateActionArguments;
        v202 = (uint64_t)v937[0];
        goto LABEL_57;
      }
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      v607 = v606;
      v608 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v607, sel_setObjectPathArray_, v608);
      swift_bridgeObjectRelease_n();

      v609 = (void *)*MEMORY[0x24BEBEDB0];
      v610 = *((unsigned __int8 *)v937[0] + started[6]);
      v938 = v603;
      if (v610)
      {
        p_name = &stru_24DFECFF8.name;
        if (v610 == 1)
        {
          v612 = 0xE600000000000000;
          v613 = 0x65726F6E6769;
        }
        else
        {
          v612 = 0xE400000000000000;
          v613 = 1886352499;
        }
      }
      else
      {
        v612 = 0xE500000000000000;
        v613 = 0x776F6C6C61;
        p_name = (char **)(&stru_24DFECFF8 + 8);
      }
      v780 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v781 = (void *)MEMORY[0x220768C3C](v613, v612);
      swift_bridgeObjectRelease();
      v782 = objc_msgSend(v780, p_name[401], v781);

      v783 = (void *)MEMORY[0x220768C3C](0xD000000000000018, 0x800000021BE82B50);
      object = v941;
      v784 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v783, v609, 0);

      if (v784)
      {
        if (v782)
        {
          objc_msgSend(v784, sel_setTokenValue_, v782);

          v785 = (void *)*MEMORY[0x24BEBED20];
          v786 = (unint64_t)v937[0];
          v787 = *(double *)((char *)v937[0] + started[7]);
          v788 = (void *)MEMORY[0x220768C3C](0x7472617473, 0xE500000000000000);
          v789 = (void *)v941;
          v790 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v788, v785, 0);

          v791 = v943;
          if (v790)
          {
            objc_msgSend(v790, sel_setDoubleValue_, v787);

            v792 = v786;
            v793 = *(double *)(v786 + started[8]);
            v794 = (void *)MEMORY[0x220768C3C](0x6E6F697461727564, 0xE800000000000000);
            v795 = objc_msgSend(v789, sel_newPropertyWithName_type_role_, v794, v785, 0);

            if (v795)
            {
              v796 = implicit closure #70 in __RKEntityActionSpecification.encode(to:at:)(v795);
              ((void (*)(double))v796)(v793);

              swift_release();
              v797 = (void *)*MEMORY[0x24BEBED18];
              v798 = v939;
              v799 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6465737265766572, 0xE800000000000000, (void *)*MEMORY[0x24BEBED18], 0, *(_BYTE *)(v792 + started[10]), v789);
              if (!v798)
              {

                v890 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x7365737265766572, 0xE800000000000000, v797, 0, *(_BYTE *)(v792 + started[9]), v789);
                v891 = v940;

                outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
                swift_release();

                outlined destroy of __RKEntityActionSpecification(v792, type metadata accessor for __RKEntityStartAnimateActionArguments);
                return v789;
              }
              outlined destroy of __RKEntityActionSpecification(v792, type metadata accessor for __RKEntityStartAnimateActionArguments);

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
              goto LABEL_115;
            }
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v845 = xmmword_21BE79410;
            *(_QWORD *)(v845 + 16) = v785;
            *(_QWORD *)(v845 + 24) = 0;
            *(_QWORD *)(v845 + 32) = v241;
            v846 = v789;
            v847 = v785;
            swift_willThrow();
            outlined destroy of __RKEntityActionSpecification(v792, type metadata accessor for __RKEntityStartAnimateActionArguments);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          }
          else
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)v834 = xmmword_21BE79420;
            *(_QWORD *)(v834 + 16) = v785;
            *(_QWORD *)(v834 + 24) = 0;
            *(_QWORD *)(v834 + 32) = v241;
            v835 = v789;
            v836 = v785;
            swift_willThrow();
            outlined destroy of __RKEntityActionSpecification((uint64_t)v937[0], type metadata accessor for __RKEntityStartAnimateActionArguments);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v791);
          }
LABEL_39:
          swift_release();
          object = (uint64_t)v940;
          goto LABEL_49;
        }
        v939 = 0;
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v827 = 0u;
        *(_OWORD *)(v827 + 16) = 0u;
        *(_QWORD *)(v827 + 32) = 0;
        swift_willThrow();

        v803 = v940;
        object = v941;
        v805 = (void *)v941;
        v801 = v940;
        v804 = v943;
      }
      else
      {
        v939 = v782;
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *v800 = 0xD000000000000018;
        v800[1] = 0x800000021BE82B50;
        v800[2] = v609;
        v800[3] = 0;
        v800[4] = v241;
        v801 = (id)object;
        v802 = v609;
        swift_willThrow();
        v803 = v940;
        v784 = v940;
        v804 = v943;
        v805 = v938;
      }

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v804);
      swift_release();

      v203 = type metadata accessor for __RKEntityStartAnimateActionArguments;
      v202 = (uint64_t)v937[0];
      goto LABEL_57;
    case 0xEu:
      v204 = (uint64_t)v927;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v927, type metadata accessor for __RKEntityTransformActionArguments);
      v205 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v206 = v939;
      v207 = v942;
      swift_retain();
      v208 = v206;
      v209 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v210 = v940;
      v211 = objc_msgSend(v208, sel_newNodeAtPath_type_, v940, v209);
      if (!v211)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v270 = v210;
        v270[1] = v209;
        v271 = v210;
        object = v209;
        swift_willThrow();
        outlined destroy of __RKEntityActionSpecification(v204, type metadata accessor for __RKEntityTransformActionArguments);
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v205);

        swift_release();
        return (void *)object;
      }
      v212 = v211;
      v937[0] = v208;

      v213 = v212;
      v214 = v938;
      setInfoId(_:on:)(0x726F66736E617254, 0xE90000000000006DLL, v213);
      if (v214)
      {
        outlined destroy of __RKEntityActionSpecification(v204, type metadata accessor for __RKEntityTransformActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v205);
        swift_release();
        object = (uint64_t)v937[0];
        goto LABEL_49;
      }
      v941 = (uint64_t)v213;
      v534 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v535 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v938 = (void *)0xD000000000000010;
      v536 = (void *)MEMORY[0x220768C3C]();
      v537 = objc_msgSend(v535, sel_initWithString_, v536);

      if (!v537)
      {
LABEL_354:
        __break(1u);
LABEL_355:
        __break(1u);
LABEL_356:
        __break(1u);
        goto LABEL_357;
      }
      v538 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v537);

      objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v534, v538);
      v949.n128_u64[0] = v205;
      v949.n128_u64[1] = *((_QWORD *)&v943 + 1);
      v539 = v937[0];
      v950.n128_u64[0] = (unint64_t)v937[0];
      v950.n128_u64[1] = v207;
      v540 = __USDExportContext.pathTo(_:)((uint64_t)v927);
      if (v540)
      {
        v541 = (void *)v540;
        v939 = 0;
        v542 = (void *)*MEMORY[0x24BEBED90];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v543 = swift_allocObject();
        *(_OWORD *)(v543 + 16) = xmmword_21BE50AD0;
        *(_QWORD *)(v543 + 32) = v541;
        v949.n128_u64[0] = v543;
        specialized Array._endMutation()();
        object = v949.n128_u64[0];
        v544 = v541;
        v545 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
        v546 = (void *)v941;
        v547 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v545, v542, 0);

        if (v547)
        {
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          v548 = v547;
          v549 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v548, sel_setObjectPathArray_, v549);
          swift_bridgeObjectRelease_n();

          v550 = (void *)*MEMORY[0x24BEBED20];
          v551 = (uint64_t)v927;
          v552 = (float *)&v927[v913[8]];
          v553 = *((_BYTE *)v552 + 4);
          v554 = *v552;
          if (v553)
            v555 = 0.0;
          else
            v555 = *v552;
          v556 = v939;
          v557 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x24BEBED20], 0, *(uint64_t *)&v555, *((_BYTE *)v552 + 4), v546);
          v558 = v943;
          if (v556)
          {
            outlined destroy of __RKEntityActionSpecification(v551, type metadata accessor for __RKEntityTransformActionArguments);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v558);
            goto LABEL_22;
          }
          v936.n128_u64[0] = (unint64_t)v544;

          v713 = objc_msgSend(v940, sel_tokenValue);
          if (v713)
          {
            v714 = v713;
            v715 = objc_msgSend(v713, sel_stringValue);

            if (v715)
            {
              v939 = 0;
              v940 = v550;
              v716 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v718 = v717;

              v949.n128_u64[0] = v716;
              v949.n128_u64[1] = v718;
              v944 = 47;
              v945 = 0xE100000000000000;
              v947 = 95;
              v948 = 0xE100000000000000;
              lazy protocol witness table accessor for type String and conformance String();
              v719 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
              v721 = v720;
              swift_bridgeObjectRelease();
              v949.n128_u64[0] = 47;
              v949.n128_u64[1] = 0xE100000000000000;
              v722._countAndFlagsBits = v719;
              v722._object = v721;
              String.append(_:)(v722);
              swift_bridgeObjectRelease();
              v723 = v949;
              v724 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
              v725 = (void *)MEMORY[0x220768C3C](v723.n128_u64[0], v723.n128_u64[1]);
              swift_bridgeObjectRelease();
              v726 = objc_msgSend(v724, sel_initWithString_, v725);

              v727 = (uint64_t)v927;
              v728 = v937[0];
              if (!v726)
              {
LABEL_358:
                __break(1u);
                JUMPOUT(0x21BD7E080);
              }
              v729 = objc_msgSend(v937[0], sel_newNodeAtPath_type_, v726, *MEMORY[0x24BEBEE28]);

              v730 = v939;
              object = v943;
              if (!v729)
              {
                v843 = (void *)v941;

                lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
                swift_allocError();
                *v844 = 2;
                swift_willThrow();

                outlined consume of (@escaping @callee_guaranteed () -> ())?(object);
                swift_release();

                v203 = type metadata accessor for __RKEntityTransformActionArguments;
                v202 = v727;
                goto LABEL_57;
              }
              v731 = v727 + v913[7];
              v732 = *(_BYTE *)(v731 + 4);
              v733 = 0.0;
              if ((v732 & 1) == 0)
                v733 = *(float *)v731;
              *(double *)v951 = v733;
              *(double *)&v951[1] = v733;
              *(double *)&v951[2] = v733;
              v951[3] = 0;
              v952 = v732;
              closure #18 in __RKEntityActionSpecification.encode(to:at:)(v727, (uint64_t)v953);
              closure #19 in __RKEntityActionSpecification.encode(to:at:)(v727, (uint64_t)v954);
              USKNode.setTransform(scale:orientation:translation:)((uint64_t)v951, (uint64_t)v953, (uint64_t)v954);
              v734 = (char *)*MEMORY[0x24BEBED88];
              object = (uint64_t)objc_msgSend(v729, sel_path);
              v735 = (void *)v941;
              v736 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x7261546D726F6678, 0xEB00000000746567, v734, 0, object, (void *)v941);
              v939 = v730;
              if (v730)
              {

                v737 = v937[0];
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);

                swift_release();
                outlined destroy of __RKEntityActionSpecification(v727, type metadata accessor for __RKEntityTransformActionArguments);
                return (void *)object;
              }
              v848 = v736;
              v934 = v734;
              v935 = v729;

              v949.n128_u8[0] = v553;
              v849 = ((unint64_t)v553 << 32) & 0x100000000;
              if (v849)
                v850 = 0;
              else
                v850 = *(_QWORD *)&v554;
              v851 = v939;
              v852 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, v940, 0, v850, SBYTE4(v849), v735);
              v335 = v851;
              if (!v851)
              {

                v873 = (void *)*MEMORY[0x24BEBEDB0];
                v874 = (uint64_t)v927;
                v875 = v927[v913[9]];
                if (v875 == 2)
                  v876 = 2;
                else
                  v876 = (v875 & 1) == 0;
                v877 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation26__RKEntityMoveSelectionUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__e86ActionSpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8j22C0A10Foundation02__C16fG11USDOXEfU20_Tf1cn_n(v876);

                v889 = v902;
                outlined init with copy of UUID?(v874 + v913[15], v902);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v925 + 48))(v889, 1, v926) == 1)
                {
                  outlined destroy of BodyTrackingComponent?(v902, &demangling cache variable for type metadata for UUID?);
LABEL_334:
                  v897 = v913[11];
                  v949.n128_u8[0] = v927[v913[10]];
                  LOBYTE(v944) = v927[v897];
                  __RKEntityActionSpecification.setEaseType(ease:easeType:on:)(&v949, (uint64_t)&v944, (void *)v941);
                  if (!v335)
                  {
                    outlined destroy of __RKEntityActionSpecification((uint64_t)v927, type metadata accessor for __RKEntityTransformActionArguments);
                    outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);

                    object = v941;
                    swift_release();
                    v899 = v937[0];

                    return (void *)object;
                  }
                  outlined destroy of __RKEntityActionSpecification((uint64_t)v927, type metadata accessor for __RKEntityTransformActionArguments);
                  v898 = (void *)v941;

                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
                  goto LABEL_22;
                }
                v896 = (uint64_t)v901;
                (*(void (**)(char *, uint64_t, uint64_t))(v925 + 32))(v901, v902, v926);
                v949 = (__n128)v943;
                v950.n128_u64[0] = (unint64_t)v937[0];
                v950.n128_u64[1] = v942;
                v757 = (__n128 *)__USDExportContext.pathTo(_:)(v896);
                v759 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)((uint64_t)v938, 0x800000021BE82BC0, v934, 0, (uint64_t)v757, (void *)v941);
LABEL_333:

                (*(void (**)(char *, uint64_t))(v925 + 8))(v901, v926);
                goto LABEL_334;
              }
              outlined destroy of __RKEntityActionSpecification((uint64_t)v927, type metadata accessor for __RKEntityTransformActionArguments);

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
LABEL_22:
              swift_release();
              object = (uint64_t)v937[0];
              goto LABEL_49;
            }
          }
          v751 = (void *)v941;

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          swift_allocError();
          *v752 = 2;
          swift_willThrow();

          object = (uint64_t)v937[0];
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v558);
          swift_release();

        }
        else
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v660 = xmmword_21BE793C0;
          *(_QWORD *)(v660 + 16) = v542;
          *(_QWORD *)(v660 + 24) = 0;
          *(_QWORD *)(v660 + 32) = v212;
          v661 = v546;
          v662 = v542;
          swift_willThrow();

          v663 = v937[0];
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          swift_bridgeObjectRelease();

          swift_release();
        }
      }
      else
      {
        object = v941;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *v627 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v205);
        swift_release();

      }
      v203 = type metadata accessor for __RKEntityTransformActionArguments;
      v202 = (uint64_t)v927;
      goto LABEL_57;
    case 0xFu:
      v66 = *(float *)v52;
      v67 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v68 = v939;
      swift_retain();
      object = v68;
      v69 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v70 = v940;
      v71 = objc_msgSend((id)object, sel_newNodeAtPath_type_, v940, v69);
      if (v71)
      {
        v72 = v71;

        v73 = v72;
        v74 = v938;
        setInfoId(_:on:)(1953063255, 0xE400000000000000, v73);
        if (v74)
        {

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v67);
        }
        else
        {
          v939 = 0;
          v941 = (uint64_t)v73;
          v272 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
          v273 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
          v274 = (void *)MEMORY[0x220768C3C](0x746341746961572FLL, 0xEB000000006E6F69);
          v275 = objc_msgSend(v273, sel_initWithString_, v274);

          if (!v275)
          {
LABEL_343:
            __break(1u);
LABEL_344:
            __break(1u);
LABEL_345:
            __break(1u);
            goto LABEL_346;
          }
          v276 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v275);

          v277 = (void *)v941;
          objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v272, v276);

          v278 = (void *)*MEMORY[0x24BEBED20];
          v279 = (void *)MEMORY[0x220768C3C](0x6E6F697461727564, 0xE800000000000000);
          v280 = objc_msgSend(v277, sel_newPropertyWithName_type_role_, v279, v278, 0);

          if (v280)
          {
            objc_msgSend(v280, sel_setDoubleValue_, v66);

            v281 = v941;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v67);
            swift_release();

            return (void *)v281;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v614 = xmmword_21BE79410;
          *(_QWORD *)(v614 + 16) = v278;
          *(_QWORD *)(v614 + 24) = 0;
          *(_QWORD *)(v614 + 32) = v72;
          v615 = v278;
          swift_willThrow();
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v67);

        }
      }
      else
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v243 = v70;
        v243[1] = v69;
        v244 = v70;
        v245 = v69;
        swift_willThrow();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v67);

      }
      swift_release();
      goto LABEL_49;
    case 0x10u:
      v109 = (uint64_t)v933;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v933, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      v110 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v111 = v939;
      v112 = v942;
      swift_retain();
      v100 = v111;
      v113 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v114 = v940;
      v115 = objc_msgSend(v100, sel_newNodeAtPath_type_, v940, v113);
      if (!v115)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v254 = v114;
        v254[1] = v113;
        v255 = v114;
        object = v113;
        swift_willThrow();
        outlined destroy of __RKEntityActionSpecification(v109, type metadata accessor for __RKEntityOrbitEntityActionArguments);
        v256 = v110;
LABEL_72:
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v256);

        swift_release();
        return (void *)object;
      }
      v116 = v115;
      v937[0] = v100;

      v117 = v116;
      v118 = v938;
      setInfoId(_:on:)(0x746962724FLL, 0xE500000000000000, v117);
      if (v118)
      {
        outlined destroy of __RKEntityActionSpecification((uint64_t)v933, type metadata accessor for __RKEntityOrbitEntityActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v110);
        goto LABEL_22;
      }
      v939 = 0;
      v940 = v116;
      v941 = (uint64_t)v117;
      v363 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v364 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v365 = (void *)MEMORY[0x220768C3C](0x6341746962724F2FLL, 0xEC0000006E6F6974);
      v366 = objc_msgSend(v364, sel_initWithString_, v365);

      v367 = v937[0];
      if (!v366)
      {
LABEL_347:
        __break(1u);
LABEL_348:
        __break(1u);
LABEL_349:
        __break(1u);
        goto LABEL_350;
      }
      v368 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v366);

      objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v363, v368);
      v949 = (__n128)v110;
      v950.n128_u64[0] = (unint64_t)v367;
      v950.n128_u64[1] = v112;
      v369 = (uint64_t)v933;
      v370 = __USDExportContext.pathTo(_:)((uint64_t)v933);
      if (!v370)
      {
        object = v941;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *v621 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v110);
        swift_release();

        v203 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
        v202 = v369;
        goto LABEL_57;
      }
      v371 = (void *)v370;
      v372 = (void *)*MEMORY[0x24BEBED90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v373 = swift_allocObject();
      *(_OWORD *)(v373 + 16) = xmmword_21BE50AD0;
      *(_QWORD *)(v373 + 32) = v371;
      v949.n128_u64[0] = v373;
      specialized Array._endMutation()();
      object = v949.n128_u64[0];
      v374 = v371;
      v375 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
      v376 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v375, v372, 0);

      if (!v376)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v636 = xmmword_21BE793C0;
        *(_QWORD *)(v636 + 16) = v372;
        *(_QWORD *)(v636 + 24) = 0;
        *(_QWORD *)(v636 + 32) = v940;
        v637 = (id)v941;
        v638 = v372;
        swift_willThrow();

        v639 = v937[0];
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        swift_bridgeObjectRelease();

        swift_release();
        v203 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
        v202 = (uint64_t)v933;
        goto LABEL_57;
      }
      v938 = v374;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      v377 = v376;
      v378 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v377, sel_setObjectPathArray_, v378);
      swift_bridgeObjectRelease_n();

      v379 = (void *)*MEMORY[0x24BEBED88];
      v949 = (__n128)v943;
      v380 = v937[0];
      v950.n128_u64[0] = (unint64_t)v937[0];
      v950.n128_u64[1] = v942;
      v381 = (int *)v909;
      v382 = (uint64_t)v933;
      object = __USDExportContext.pathTo(_:)((uint64_t)&v933[*(int *)(v909 + 20)]);
      v383 = (void *)MEMORY[0x220768C3C](0x7265746E6563, 0xE600000000000000);
      v384 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v383, v379, 0);

      if (!v384)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v679 = xmmword_21BE79400;
        *(_QWORD *)(v679 + 16) = v379;
        *(_QWORD *)(v679 + 24) = 0;
        *(_QWORD *)(v679 + 32) = v940;
        v680 = (id)v941;
        v681 = v379;
        swift_willThrow();
        v384 = v380;
        v682 = v943;
        v683 = v938;
LABEL_251:

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v682);
        swift_release();

        outlined destroy of __RKEntityActionSpecification((uint64_t)v933, type metadata accessor for __RKEntityOrbitEntityActionArguments);
        return (void *)object;
      }
      if (!object)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v749 = 0u;
        *(_OWORD *)(v749 + 16) = 0u;
        *(_QWORD *)(v749 + 32) = 0;
        swift_willThrow();

        v683 = (void *)v941;
        v680 = v380;
        v682 = v943;
        goto LABEL_251;
      }
      objc_msgSend(v384, sel_setObjectPath_, object);

      v385 = (void *)*MEMORY[0x24BEBED20];
      v386 = v382 + v381[6];
      v387 = *(unsigned __int8 *)(v386 + 4);
      v388 = *(float *)v386;
      if (v387)
        v389 = 0;
      else
        v389 = *(_QWORD *)&v388;
      v390 = (void *)v941;
      v391 = v939;
      v392 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x24BEBED20], 0, v389, v387, (void *)v941);
      v393 = v943;
      if (v391)
      {
        outlined destroy of __RKEntityActionSpecification(v382, type metadata accessor for __RKEntityOrbitEntityActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v393);
        swift_release();
        object = (uint64_t)v937[0];
        goto LABEL_49;
      }

      v806 = v382 + v381[7];
      v807 = *(unsigned __int8 *)(v806 + 4);
      v808 = *(float *)v806;
      if (v807)
        v809 = 0;
      else
        v809 = *(_QWORD *)&v808;

      v949.n128_u8[0] = *(_BYTE *)(v382 + v381[10]);
      __RKEntityActionSpecification.setRotationAxis(direction:axis:on:)(&v949, *(_QWORD *)(v382 + v381[8]), *(_QWORD *)(v382 + v381[8] + 8), *(_BYTE *)(v382 + v381[8] + 16), v390);
      v841 = v943;
      v842 = v937[0];
      v883 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x506F546E67696C61, 0xEB00000000687461, (void *)*MEMORY[0x24BEBED18], 0, *(_BYTE *)(v382 + v381[9]), v390);

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v841);
      swift_release();

      outlined destroy of __RKEntityActionSpecification(v382, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      return v390;
    case 0x11u:
      v119 = (uint64_t)v924;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, (uint64_t)v924, type metadata accessor for __RKEntityLookAtCameraActionArguments);
      v120 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v121 = v939;
      v122 = v942;
      swift_retain();
      v88 = v121;
      v123 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v124 = v940;
      v125 = objc_msgSend(v88, sel_newNodeAtPath_type_, v940, v123);
      if (!v125)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v257 = v124;
        v257[1] = v123;
        v258 = v124;
        object = v123;
        swift_willThrow();
        outlined destroy of __RKEntityActionSpecification(v119, type metadata accessor for __RKEntityLookAtCameraActionArguments);
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v120);

        goto LABEL_75;
      }
      v126 = v125;

      object = v126;
      v127 = v938;
      setInfoId(_:on:)(0x614374416B6F6F4CLL, 0xEC0000006172656DLL, (void *)object);
      if (v127)
      {
        outlined destroy of __RKEntityActionSpecification(v119, type metadata accessor for __RKEntityLookAtCameraActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v120);
        swift_release();

        return (void *)object;
      }
      v940 = v126;
      v941 = object;
      v394 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v395 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v396 = (void *)MEMORY[0x220768C3C](0xD000000000000013, 0x800000021BE922E0);
      v397 = objc_msgSend(v395, sel_initWithString_, v396);

      if (v397)
      {
        v398 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v397);

        objc_msgSend((id)v941, sel_setMetadataWithKey_value_, v394, v398);
        v949 = (__n128)v120;
        v950.n128_u64[0] = (unint64_t)v88;
        v950.n128_u64[1] = v122;
        v399 = (uint64_t)v924;
        v400 = __USDExportContext.pathTo(_:)((uint64_t)v924);
        if (!v400)
        {
          object = v941;

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          swift_allocError();
          *v622 = 0;
          swift_willThrow();

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v120);
          swift_release();

          v203 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
          v202 = v399;
          goto LABEL_57;
        }
        v401 = (void *)v400;
        v939 = v88;
        v402 = (void *)*MEMORY[0x24BEBED90];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v403 = swift_allocObject();
        *(_OWORD *)(v403 + 16) = xmmword_21BE50AD0;
        *(_QWORD *)(v403 + 32) = v401;
        v949.n128_u64[0] = v403;
        specialized Array._endMutation()();
        object = v949.n128_u64[0];
        v404 = v401;
        v405 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
        v406 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v405, v402, 0);

        if (!v406)
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v640 = xmmword_21BE793C0;
          *(_QWORD *)(v640 + 16) = v402;
          *(_QWORD *)(v640 + 24) = 0;
          *(_QWORD *)(v640 + 32) = v940;
          v641 = (id)v941;
          v642 = v402;
          swift_willThrow();

          v643 = v939;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          swift_bridgeObjectRelease();

          swift_release();
          v203 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
          v202 = (uint64_t)v924;
          goto LABEL_57;
        }
        v938 = v404;
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        swift_bridgeObjectRetain();
        v407 = v406;
        v408 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v407, sel_setObjectPathArray_, v408);
        swift_bridgeObjectRelease_n();

        v409 = v907;
        v410 = (uint64_t)v924;
        v411 = (float *)&v924[*(int *)(v907 + 20)];
        v412 = *((unsigned __int8 *)v411 + 4);
        v413 = *v411;
        if (v412)
          v414 = 0;
        else
          v414 = *(_QWORD *)&v413;

        object = *MEMORY[0x24BEBED28];
        v684 = (float32x2_t *)(v410 + *(int *)(v409 + 28));
        v685 = 0uLL;
        v686 = 0uLL;
        if ((v684[2].i8[0] & 1) == 0)
        {
          v685 = vcvtq_f64_f32(*v684);
          v686.n128_u64[1] = 0;
          v686.n128_f64[0] = COERCE_FLOAT(*(_QWORD *)&v684[1]);
        }
        v936 = v686;
        *(float64x2_t *)v937 = v685;
        v687 = (void *)MEMORY[0x220768C3C](0x746E6F7266, 0xE500000000000000);
        v688 = (void *)v941;
        v689 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v687, object, 0);

        v690 = v938;
        if (v689)
        {
          v949 = *(__n128 *)v937;
          v950 = v936;
          objc_msgSend(v689, sel_setDouble3Value_, &v949);

          v691 = (float32x2_t *)&v924[*(int *)(v409 + 36)];
          v692 = 0uLL;
          v693 = 0uLL;
          if ((v691[2].i8[0] & 1) == 0)
          {
            v692 = vcvtq_f64_f32(*v691);
            v693.n128_u64[1] = 0;
            v693.n128_f64[0] = COERCE_FLOAT(*(_QWORD *)&v691[1]);
          }
          v936 = v693;
          *(float64x2_t *)v937 = v692;
          v694 = (void *)MEMORY[0x220768C3C](0x726F746365567075, 0xE800000000000000);
          v695 = (void *)v941;
          v696 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v694, object, 0);

          v132 = v939;
          if (v696)
          {
            v697 = (void (*)(__n128, __n128))implicit closure #42 in __RKEntityActionSpecification.encode(to:at:)(v696);
            v697(*(__n128 *)v937, v936);

            swift_release();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);

            swift_release();
            outlined destroy of __RKEntityActionSpecification((uint64_t)v924, type metadata accessor for __RKEntityLookAtCameraActionArguments);
            return v695;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)v830 = xmmword_21BE793E0;
          *(_QWORD *)(v830 + 16) = object;
          *(_QWORD *)(v830 + 24) = 0;
          *(_QWORD *)(v830 + 32) = v940;
          v831 = v695;
          v832 = (id)object;
          swift_willThrow();
          outlined destroy of __RKEntityActionSpecification((uint64_t)v924, type metadata accessor for __RKEntityLookAtCameraActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
          goto LABEL_78;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v819 = xmmword_21BE793F0;
        *(_QWORD *)(v819 + 16) = object;
        *(_QWORD *)(v819 + 24) = 0;
        *(_QWORD *)(v819 + 32) = v940;
        v820 = v688;
        v821 = (id)object;
        swift_willThrow();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v924, type metadata accessor for __RKEntityLookAtCameraActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        swift_release();
        object = (uint64_t)v939;
        goto LABEL_49;
      }
      goto LABEL_348;
    case 0x13u:
      v75 = v929;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v52, v929, type metadata accessor for __RKEntitySpinActionArguments);
      v76 = v943;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v943);
      v77 = v939;
      v78 = v942;
      swift_retain();
      v79 = v77;
      v80 = (void *)MEMORY[0x220768C3C](0xD000000000000012, 0x800000021BE92240);
      v81 = v940;
      v82 = objc_msgSend(v79, sel_newNodeAtPath_type_, v940, v80);
      if (!v82)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        swift_allocError();
        *v246 = v81;
        v246[1] = v80;
        v247 = v81;
        object = v80;
        swift_willThrow();
        outlined destroy of __RKEntityActionSpecification(v75, type metadata accessor for __RKEntitySpinActionArguments);
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v76);

        swift_release();
        return (void *)object;
      }
      v83 = v82;
      v940 = v79;

      v84 = v83;
      v85 = v938;
      setInfoId(_:on:)(1852403795, 0xE400000000000000, v84);
      if (v85)
      {
        outlined destroy of __RKEntityActionSpecification(v929, type metadata accessor for __RKEntitySpinActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        goto LABEL_39;
      }
      v938 = v83;
      v939 = 0;
      v282 = v84;
      v283 = (void *)MEMORY[0x220768C3C](0x7374697265686E69, 0xED00007368746150);
      v284 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v285 = (void *)MEMORY[0x220768C3C](0x7463416E6970532FLL, 0xEB000000006E6F69);
      v286 = objc_msgSend(v284, sel_initWithString_, v285);

      if (!v286)
        goto LABEL_344;
      v287 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithObjectPath_, v286);

      v941 = (uint64_t)v282;
      objc_msgSend(v282, sel_setMetadataWithKey_value_, v283, v287);

      v288 = v943;
      v949 = (__n128)v943;
      v289 = v940;
      v950.n128_u64[0] = (unint64_t)v940;
      v950.n128_u64[1] = v78;
      v290 = v929;
      v291 = __USDExportContext.pathTo(_:)(v929);
      if (!v291)
      {
        object = v941;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *v616 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v288);
        swift_release();

        v203 = type metadata accessor for __RKEntitySpinActionArguments;
        v202 = v290;
        goto LABEL_57;
      }
      v292 = (void *)v291;
      v293 = (void *)*MEMORY[0x24BEBED90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v294 = swift_allocObject();
      *(_OWORD *)(v294 + 16) = xmmword_21BE50AD0;
      *(_QWORD *)(v294 + 32) = v292;
      v949.n128_u64[0] = v294;
      specialized Array._endMutation()();
      v295 = v292;
      v296 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
      v297 = (void *)v941;
      v298 = objc_msgSend((id)v941, sel_newPropertyWithName_type_role_, v296, v293, 0);

      if (!v298)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)v628 = xmmword_21BE793C0;
        *(_QWORD *)(v628 + 16) = v293;
        *(_QWORD *)(v628 + 24) = 0;
        *(_QWORD *)(v628 + 32) = v938;
        v629 = v297;
        v630 = v293;
        swift_willThrow();

        object = (uint64_t)v940;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        swift_bridgeObjectRelease();

        swift_release();
        v203 = type metadata accessor for __RKEntitySpinActionArguments;
        v202 = v929;
        goto LABEL_57;
      }
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      v299 = v298;
      v300 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v299, sel_setObjectPathArray_, v300);
      swift_bridgeObjectRelease_n();

      v301 = (void *)*MEMORY[0x24BEBED20];
      v302 = (int *)v908;
      v303 = v929;
      v304 = (float *)(v929 + *(int *)(v908 + 20));
      v305 = *((unsigned __int8 *)v304 + 4);
      v306 = *v304;
      if (v305)
        v307 = 0;
      else
        v307 = *(_QWORD *)&v306;
      v308 = v939;
      v309 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x24BEBED20], 0, v307, v305, v297);
      if (v308)
      {
        outlined destroy of __RKEntityActionSpecification(v303, type metadata accessor for __RKEntitySpinActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v943);
        goto LABEL_115;
      }

      v667 = v303 + v302[6];
      v668 = *(unsigned __int8 *)(v667 + 4);
      v669 = *(float *)v667;
      if (v668)
        v670 = 0;
      else
        v670 = *(_QWORD *)&v669;

      v810 = v302[8];
      v949.n128_u8[0] = *(_BYTE *)(v303 + v302[7]);
      __RKEntityActionSpecification.setRotationAxis(direction:axis:on:)(&v949, *(_QWORD *)(v303 + v810), *(_QWORD *)(v303 + v810 + 8), *(_BYTE *)(v303 + v810 + 16), v297);
      v811 = v943;
      v812 = v940;
      outlined destroy of __RKEntityActionSpecification(v303, type metadata accessor for __RKEntitySpinActionArguments);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v811);

      object = v941;
      swift_release();

      return (void *)object;
    default:
      lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
      swift_allocError();
      *v215 = 1;
      swift_willThrow();
      v203 = type metadata accessor for __RKEntityActionSpecification;
      v202 = (uint64_t)v52;
      goto LABEL_57;
  }
}

void __RKEntityTriggerSpecification.encode(to:at:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __RKEntityInteractionSpecification.encode(to:at:)(a1, a2, (uint64_t (*)(_QWORD *))__RKEntityTriggerSpecification.encode(to:at:), (void (*)(void))lazy protocol witness table accessor for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:), a3);
}

void __RKEntityInteractionSpecification.encode(to:at:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD *)@<X2>, void (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  _QWORD v15[2];
  __int128 v16;

  v9 = *a1;
  v10 = a1[1];
  v13 = *((_OWORD *)a1 + 1);
  outlined init with copy of Any(a2, (uint64_t)v15);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
  if (swift_dynamicCast())
  {
    v15[0] = v9;
    v15[1] = v10;
    v16 = v13;
    v11 = a3(v15);
    if (v5)
    {

    }
    else
    {
      v12 = v11;
      a5[3] = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for USKNode);

      *a5 = v12;
    }
  }
  else
  {
    a4();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:))
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Error #1 in __RKEntityTriggerSpecification.encode(to:at:), &unk_24DFD2190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:))
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Error #1 in __RKEntityTriggerSpecification.encode(to:at:), &unk_24DFD2190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:));
  }
  return result;
}

uint64_t __RKEntityTriggerSpecification.encode(to:at:sceneSpecifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(a1, a2, a3, (uint64_t (*)(_OWORD *))__RKEntityTriggerSpecification.encode(to:at:));
}

void protocol witness for __USDEncodablePublic.encode(to:at:) in conformance __RKEntityTriggerSpecification(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __RKEntityTriggerSpecification.encode(to:at:)(a1, a2, a3);
}

uint64_t protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityTriggerSpecification(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(a1, a2, a3, a4, a5, (uint64_t (*)(_OWORD *))__RKEntityTriggerSpecification.encode(to:at:));
}

void __RKEntityActionSpecification.encode(to:at:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __RKEntityInteractionSpecification.encode(to:at:)(a1, a2, (uint64_t (*)(_QWORD *))__RKEntityActionSpecification.encode(to:at:), (void (*)(void))lazy protocol witness table accessor for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:), a3);
}

unint64_t lazy protocol witness table accessor for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:))
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Error #1 in __RKEntityActionSpecification.encode(to:at:), &unk_24DFD2100);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:))
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Error #1 in __RKEntityActionSpecification.encode(to:at:), &unk_24DFD2100);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:));
  }
  return result;
}

uint64_t __RKEntityActionSpecification.encode(to:at:sceneSpecifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(a1, a2, a3, (uint64_t (*)(_OWORD *))__RKEntityActionSpecification.encode(to:at:));
}

uint64_t __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  __int128 v4;
  _OWORD v6[2];

  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return a4(v6);
}

void protocol witness for __USDEncodablePublic.encode(to:at:) in conformance __RKEntityActionSpecification(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __RKEntityActionSpecification.encode(to:at:)(a1, a2, a3);
}

uint64_t protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityActionSpecification(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(a1, a2, a3, a4, a5, (uint64_t (*)(_OWORD *))__RKEntityActionSpecification.encode(to:at:));
}

uint64_t protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_OWORD *))
{
  __int128 v6;
  _OWORD v8[2];

  v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  return a6(v8);
}

void *type metadata accessor for Error #1 in __RKEntityActionSpecification.encode(to:at:)()
{
  return &unk_24DFD2100;
}

void *type metadata accessor for Error #1 in __RKEntityTriggerSpecification.encode(to:at:)()
{
  return &unk_24DFD2190;
}

uint64_t storeEnumTagSinglePayload for Error #1 in __RKEntityActionSpecification.encode(to:at:)(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BD7E468 + 4 * byte_21BE78FE8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BD7E488 + 4 * byte_21BE78FED[v4]))();
}

_BYTE *sub_21BD7E468(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BD7E488(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD7E490(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD7E498(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD7E4A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD7E4A8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Error #1 in __RKEntityInteractionSpecification.encode(to:at:)()
{
  return &unk_24DFD2220;
}

void __RKEntityActionSpecification.setEaseType(ease:easeType:on:)(_BYTE *a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;

  if (*a1)
    __asm { BR              X10 }
  v4 = (void *)*MEMORY[0x24BEBEDB0];
  v5 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v6 = (void *)MEMORY[0x220768C3C](1701736302, 0xE400000000000000);
  v7 = objc_msgSend(v5, sel_initWithString_, v6);

  v8 = (void *)MEMORY[0x220768C3C](0x6570795465736165, 0xE800000000000000);
  v9 = objc_msgSend(a3, sel_newPropertyWithName_type_role_, v8, v4, 0);

  if (v9)
  {
    if (v7)
    {
      objc_msgSend(v9, sel_setTokenValue_, v7);

      return;
    }
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_QWORD *)(v13 + 32) = 0;
    swift_willThrow();
    v7 = v9;
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)v10 = xmmword_21BE794A0;
    *(_QWORD *)(v10 + 16) = v4;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = a3;
    v11 = v4;
    v12 = a3;
    swift_willThrow();
  }

}

void __RKEntityActionSpecification.setRotationAxis(direction:axis:on:)(_BYTE *a1, uint64_t a2, int a3, char a4, void *a5)
{
  double v6;
  void *v7;
  float64x2_t v8;
  double v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  double v15;
  float64x2_t v16;
  double v17;
  _OWORD v18[2];

  v6 = -1.0;
  if ((*a1 & 1) == 0)
    v6 = 1.0;
  v17 = v6;
  v7 = (void *)*MEMORY[0x24BEBED28];
  v8 = 0uLL;
  v9 = 0.0;
  if ((a4 & 1) == 0)
  {
    v8 = vcvtq_f64_f32((float32x2_t)a2);
    v9 = *(float *)&a3;
  }
  v15 = v9;
  v16 = v8;
  v10 = (void *)MEMORY[0x220768C3C](1936291937, 0xE400000000000000);
  v11 = objc_msgSend(a5, sel_newPropertyWithName_type_role_, v10, v7, 0);

  if (v11)
  {
    v18[0] = vmulq_n_f64(v16, v17);
    v18[1] = COERCE_UNSIGNED_INT64(v17 * v15);
    objc_msgSend(v11, sel_setDouble3Value_, v18);

  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)v12 = xmmword_21BE794B0;
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = a5;
    v13 = v7;
    v14 = a5;
    swift_willThrow();
  }
}

void makeParentNode #1 (from:baseName:) in __RKEntityActionSpecification.encode(to:at:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;

  USKObjectPath.deletingLastPathComponent()();
  v8 = v7;
  v27 = a2;
  USKObjectPath.appendingPathComponent(_:)(a2, a3);
  v10 = v9;
  v26 = a4;
  v11 = objc_msgSend(a4, sel_nodeAtPath_, v9);

  if (v11)
  {
    v12 = 0;
    while (!__OFADD__(v12, 1))
    {
      swift_bridgeObjectRetain();
      v13._countAndFlagsBits = 95;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15 = objc_msgSend(v8, sel_stringValue);
      if (v15)
      {
        v16 = v15;
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v19 = v18;

      }
      else
      {
        v17 = 0;
        v19 = 0xE000000000000000;
      }
      v20._countAndFlagsBits = 47;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      v21._countAndFlagsBits = v27;
      v21._object = a3;
      String.append(_:)(v21);
      v22 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
      v23 = (void *)MEMORY[0x220768C3C](v17, v19);
      swift_bridgeObjectRelease();
      v24 = objc_msgSend(v22, sel_initWithString_, v23);

      if (!v24)
        goto LABEL_11;
      swift_bridgeObjectRelease();

      v25 = objc_msgSend(v26, sel_nodeAtPath_, v24);
      ++v12;
      v10 = v24;
      if (!v25)
        goto LABEL_9;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_9:

  }
}

uint64_t (*implicit closure #6 in __RKEntityActionSpecification.encode(to:at:)(void *a1))()
{
  id v2;

  *(_QWORD *)(swift_allocObject() + 16) = a1;
  v2 = a1;
  return partial apply for implicit closure #7 in implicit closure #6 in __RKEntityActionSpecification.encode(to:at:);
}

uint64_t (*implicit closure #22 in __RKEntityActionSpecification.encode(to:at:)(void *a1))()
{
  id v2;

  *(_QWORD *)(swift_allocObject() + 16) = a1;
  v2 = a1;
  return partial apply for implicit closure #7 in implicit closure #6 in __RKEntityActionSpecification.encode(to:at:);
}

id (*implicit closure #42 in __RKEntityActionSpecification.encode(to:at:)(void *a1))(__n128 a1, __n128 a2)
{
  id v2;

  *(_QWORD *)(swift_allocObject() + 16) = a1;
  v2 = a1;
  return partial apply for implicit closure #43 in implicit closure #42 in __RKEntityActionSpecification.encode(to:at:);
}

id (*implicit closure #70 in __RKEntityActionSpecification.encode(to:at:)(void *a1))()
{
  id v2;

  *(_QWORD *)(swift_allocObject() + 16) = a1;
  v2 = a1;
  return partial apply for implicit closure #71 in implicit closure #70 in __RKEntityActionSpecification.encode(to:at:);
}

uint64_t closure #18 in __RKEntityActionSpecification.encode(to:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  float32x2_t *v5;
  __int8 v6;
  float64x2_t v7;
  float64x2_t v8;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  v5 = (float32x2_t *)(a1 + *(int *)(result + 24));
  v6 = v5[2].i8[0];
  v7 = 0uLL;
  v8 = 0uLL;
  if ((v6 & 1) == 0)
  {
    v7 = vcvtq_f64_f32(*v5);
    v8 = vcvtq_f64_f32(v5[1]);
  }
  *(float64x2_t *)a2 = v7;
  *(float64x2_t *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t closure #19 in __RKEntityActionSpecification.encode(to:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  float32x2_t *v5;
  __int8 v6;
  float64x2_t v7;
  double v8;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  v5 = (float32x2_t *)(a1 + *(int *)(result + 20));
  v6 = v5[2].i8[0];
  if ((v6 & 1) != 0)
  {
    v7 = 0uLL;
    v8 = 0.0;
  }
  else
  {
    v7 = vcvtq_f64_f32(*v5);
    v8 = COERCE_FLOAT(*(_QWORD *)&v5[1]);
  }
  *(float64x2_t *)a2 = v7;
  *(double *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

id (*implicit closure #108 in __RKEntityActionSpecification.encode(to:at:)(void *a1))(uint64_t a1)
{
  id v2;

  *(_QWORD *)(swift_allocObject() + 16) = a1;
  v2 = a1;
  return partial apply for implicit closure #109 in implicit closure #108 in __RKEntityActionSpecification.encode(to:at:);
}

void closure #24 in __RKEntityActionSpecification.encode(to:at:)(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;

  v3 = 0xE700000000000000;
  v4 = 0x6C756679616C70;
  if (*a1 != 1)
  {
    v4 = 1684826487;
    v3 = 0xE400000000000000;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x6369736162;
  if (*a1)
    v6 = v3;
  else
    v6 = 0xE500000000000000;
  v7 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v8 = (void *)MEMORY[0x220768C3C](v5, v6);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initWithString_, v8);

  *a2 = v9;
}

unint64_t lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors;
  if (!lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for InteractionSpecificationsUSDEncodingErrors, &type metadata for InteractionSpecificationsUSDEncodingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors;
  if (!lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for InteractionSpecificationsUSDEncodingErrors, &type metadata for InteractionSpecificationsUSDEncodingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type USKScene.NewNodeError and conformance USKScene.NewNodeError;
  if (!lazy protocol witness table cache variable for type USKScene.NewNodeError and conformance USKScene.NewNodeError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for USKScene.NewNodeError, &type metadata for USKScene.NewNodeError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKScene.NewNodeError and conformance USKScene.NewNodeError);
  }
  return result;
}

uint64_t sub_21BD7EFA8()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for implicit closure #43 in implicit closure #42 in __RKEntityActionSpecification.encode(to:at:)(__n128 a1, __n128 a2)
{
  uint64_t v2;
  void *v3;
  _OWORD v5[2];

  v3 = *(void **)(v2 + 16);
  v5[0] = a1;
  v5[1] = a2;
  return objc_msgSend(v3, sel_setDouble3Value_, v5);
}

id partial apply for implicit closure #71 in implicit closure #70 in __RKEntityActionSpecification.encode(to:at:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setDoubleValue_);
}

id partial apply for implicit closure #109 in implicit closure #108 in __RKEntityActionSpecification.encode(to:at:)(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), sel_setTokenValue_, a1);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  _QWORD v32[4];
  _BYTE v33[32];
  uint64_t v34;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v27 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BEE4AF8];
  v13 = *(_QWORD *)(a1 + 16);
  v26 = a1;
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v30 = *(_QWORD *)(v8 + 72);
    v31 = v15;
    v29 = (uint64_t *)(a5 + 16);
    swift_bridgeObjectRetain();
    v28 = MEMORY[0x24BEE4AD8] + 8;
    v16 = (uint64_t)v27;
    while (1)
    {
      v31(v12, v14, v7);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v17(v12, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7) == 1)
        break;
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v16, v12, v7);
      v18 = v29;
      swift_beginAccess();
      v19 = *v18;
      if (*(_QWORD *)(*v18 + 16))
      {
        swift_bridgeObjectRetain();
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
        if ((v21 & 1) != 0)
        {
          v22 = *(void **)(*(_QWORD *)(v19 + 56) + 8 * v20);
          v23 = v22;
        }
        else
        {
          v22 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v22 = 0;
      }
      v32[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USKObjectPath?);
      v32[0] = v22;
      outlined init with copy of Any((uint64_t)v32, (uint64_t)v33);
      outlined destroy of __USKObjectPathWrapper((uint64_t)v32);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
        MEMORY[0x220768F0C](v24);
        if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v16 = (uint64_t)v27;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
      }
      v14 += v30;
      if (!--v13)
        goto LABEL_17;
    }
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
LABEL_17:
    v17(v12, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t outlined destroy of __USKObjectPathWrapper(uint64_t a1)
{
  destroy for AnyMeshBuffer();
  return a1;
}

uint64_t storeEnumTagSinglePayload for InteractionSpecificationsUSDEncodingErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BD7F380 + 4 * byte_21BE78FFB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BD7F3B4 + 4 * byte_21BE78FF6[v4]))();
}

uint64_t sub_21BD7F3B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD7F3BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD7F3C4);
  return result;
}

uint64_t sub_21BD7F3D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD7F3D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BD7F3DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD7F3E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InteractionSpecificationsUSDEncodingErrors()
{
  return &type metadata for InteractionSpecificationsUSDEncodingErrors;
}

uint64_t static ObservableComponent<>.__size.getter()
{
  return 24;
}

uint64_t static ObservableComponent<>.__load(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const char *v9;
  uint64_t v10;

  v9 = *(const char **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  swift_retain();
  swift_retain();
  CodableObservableComponentStorage.value.getter(v9, v10, a2, a3, a4, a5);
  swift_release();
  return swift_release();
}

uint64_t CodableObservableComponentStorage.value.getter@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;

  if (!a2)
    return CodableObservableComponentStorage.decodedJSON()(a1, a3, a4, a5, a6);
  v8 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 120);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a6, v8, a3);
}

void static ObservableComponent<>.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v20[40];
  _QWORD v21[5];

  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = &v20[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v20[-v17];
  outlined init with copy of __REAssetService(v19, (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v15, v18, a5);
  if ((a4 & 1) != 0)
  {
    v21[0] = a5;
    v21[1] = a6;
    v21[2] = a7;
    v21[3] = a8;
    type metadata accessor for CodableObservableComponentStorage();
  }
  specialized CodableObservableComponentStorage.init(_:)((uint64_t)v15);
}

{
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v20[40];
  _QWORD v21[5];

  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = &v20[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v20[-v17];
  outlined init with copy of __REAssetService(v19, (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  if ((a4 & 1) != 0)
  {
    v21[0] = a5;
    v21[1] = a6;
    v21[2] = a7;
    v21[3] = a8;
    type metadata accessor for CodableObservableComponentStorage();
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v15, v18, a5);
  specialized CodableObservableComponentStorage.init(_:)((uint64_t)v15);
}

void sub_21BD7F6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = v8;
  *(_QWORD *)(v10 - 152) = v9;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  *(_QWORD *)(v10 - 144) = a1;
  *(_QWORD *)(v10 - 136) = a2;
  *(_QWORD *)(v10 - 128) = a3;
  *(_QWORD *)(v10 - 120) = v3;
  *(_QWORD *)(v10 - 112) = v12;
  *(_QWORD *)(v10 - 104) = v6;
  *(_QWORD *)(v10 - 96) = v5;
  type metadata accessor for CodableObservableComponentStorage();
}

void sub_21BD7F700(uint64_t a1)
{
  uint64_t v1;

  _sSpsRi_zrlE10initialize2toyxn_tF(v1 - 144, *(_QWORD *)(v1 - 152), a1);
  JUMPOUT(0x21BD7F710);
}

Swift::Void __swiftcall CodableObservableComponentStorage.notifyValueSubscribers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v0;
  v4 = type metadata accessor for ObservableComponentStorage(0, v1, v2, v1);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - v6;
  if (v3)
  {
    v8 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 120);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
    ObservableComponentStorage.notifyValueSubscribers()();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void static ObservableComponent<>.__free(to:offset:)()
{
  type metadata accessor for CodableObservableComponentStorage();
}

uint64_t sub_21BD7F81C(uint64_t a1)
{
  uint64_t v1;

  CodableObservableComponentStorage.cleanup()();
  UnsafeMutablePointer.deinitialize(count:)();
  return MEMORY[0x220769464](v1, a1);
}

Swift::Void __swiftcall CodableObservableComponentStorage.cleanup()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  v4 = type metadata accessor for ObservableComponentStorage(0, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - v6;
  v8 = v3[1];
  if (v8)
  {
    v9 = v8 + *(_QWORD *)(*(_QWORD *)v8 + 120);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    ObservableComponentStorage.cleanup()();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*v3)
  {
    RECIntrospectionFree();
    *v3 = 0;
  }
}

void static ObservableComponent<>.__publisher(buffer:)()
{
  type metadata accessor for CodableObservableComponentStorage();
}

uint64_t sub_21BD7F948(uint64_t a1)
{
  specialized CodableObservableComponentStorage.publisher()(a1);
  return swift_retain();
}

uint64_t static ObservableComponent<>.__addIntrospectionData(_:)(uint64_t result)
{
  if (result)
    return REStructBuilderAddMemberDataTypeWithTag();
  return result;
}

void sub_21BD7FA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 152) = v9;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v3);
  *(_QWORD *)(v10 - 144) = a1;
  *(_QWORD *)(v10 - 136) = a2;
  *(_QWORD *)(v10 - 128) = a3;
  *(_QWORD *)(v10 - 120) = v3;
  *(_QWORD *)(v10 - 112) = v7;
  *(_QWORD *)(v10 - 104) = v6;
  *(_QWORD *)(v10 - 96) = v4;
  type metadata accessor for CodableObservableComponentStorage();
}

void sub_21BD7FACC(uint64_t a1)
{
  uint64_t v1;

  _sSpsRi_zrlE10initialize2toyxn_tF(v1 - 144, *(_QWORD *)(v1 - 152), a1);
  JUMPOUT(0x21BD7FADCLL);
}

void CodableObservableComponentStorage<>.setValueIfChanged(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;

  v5 = a2[2];
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  CodableObservableComponentStorage.value.getter(*(const char **)v2, *(_QWORD *)(v2 + 8), v5, a2[3], a2[4], (uint64_t)v8);
  v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    specialized CodableObservableComponentStorage.value.setter(a1, (uint64_t)a2);
    CodableObservableComponentStorage.notifyValueSubscribers()();
  }
}

uint64_t CodableObservableComponentStorage.Box.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 88) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120), a1);
  return v2;
}

uint64_t CodableObservableComponentStorage.Box.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 88) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_deallocClassInstance();
}

uint64_t CodableObservableComponentStorage.decodedJSON()@<X0>(const char *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v20)(const char *, _QWORD);
  _QWORD v21[4];

  v10 = type metadata accessor for Data.Deallocator();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 16))(a2, a3, v12);
  v21[1] = a4;
  v21[2] = a5;
  v15 = strlen(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x24BDCDB98], v10);
  Data.Deallocator._deallocator.getter();
  if (v15)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v16 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    v15 = specialized Data._Representation.init(_:count:)(v16, v15);
    v18 = v17;
    swift_release();
  }
  else
  {
    v20 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
    v20(a1, 0);
    swift_release();
    swift_release();
    v18 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  return outlined consume of Data._Representation(v15, v18);
}

void CodableObservableComponentStorage.updateJSON(value:)()
{
  _QWORD *v0;

  if (*v0)
  {
    RECIntrospectionFree();
    *v0 = 0;
  }
  if (!v0[2])
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    v0[2] = JSONEncoder.init()();
  }
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  __asm { BR              X10 }
}

uint64_t sub_21BD7FF3C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = BYTE6(v0) + 1;
  if (__OFADD__(BYTE6(v0), 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x21BD80068);
  }
  v5 = RECIntrospectionAlloc();
  *v2 = v5;
  if (v5)
    __asm { BR              X10 }
  return outlined consume of Data._Representation(v1, v0);
}

void specialized CodableObservableComponentStorage.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = type metadata accessor for ObservableComponentStorage(0, v4, *(_QWORD *)(v6 + 24), v7);
  MEMORY[0x24BDAC7A8](v8);
  v9 = *(_QWORD *)(v2 + 8);
  if (!v9)
    type metadata accessor for CodableObservableComponentStorage.Box();
  v10 = v9 + *(_QWORD *)(*(_QWORD *)v9 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v10, a1, v4);
  swift_endAccess();
  CodableObservableComponentStorage.updateJSON(value:)();
}

void specialized CodableObservableComponentStorage.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  v4 = type metadata accessor for ObservableComponentStorage(0, v1, v2, v3);
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for CodableObservableComponentStorage.Box();
}

void sub_21BD802E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v0, v4);
  ObservableComponentStorage.init(_:)(v5, v4, v3, v9, v6);
  v10 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 88) - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)v10 + 120), v6);
  *(_QWORD *)(v8 - 96) = v10;
  *(_QWORD *)(v8 - 144) = v4;
  *(_QWORD *)(v8 - 136) = v3;
  *(_QWORD *)(v8 - 128) = v2;
  *(_QWORD *)(v8 - 120) = v1;
  type metadata accessor for CodableObservableComponentStorage();
}

uint64_t sub_21BD8035C()
{
  uint64_t v0;

  CodableObservableComponentStorage.updateJSON(value:)();
  return *(_QWORD *)(v0 - 104);
}

void type metadata accessor for CodableObservableComponentStorage()
{
  JUMPOUT(0x220772DB8);
}

uint64_t specialized CodableObservableComponentStorage.publisher()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  MEMORY[0x24BDAC7A8](a1);
  v5 = type metadata accessor for ObservableComponentStorage(0, v2, *(_QWORD *)(v3 + 24), v4);
  MEMORY[0x24BDAC7A8](v5);
  if (!*(_QWORD *)(v1 + 8))
    type metadata accessor for CodableObservableComponentStorage.Box();
  swift_beginAccess();
  v6 = specialized ObservableComponentStorage.publisher()(v5);
  swift_endAccess();
  return v6;
}

uint64_t type metadata completion function for CodableObservableComponentStorage.Box()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for CodableObservableComponentStorage.Box()
{
  JUMPOUT(0x220772DB8);
}

uint64_t destroy for CodableObservableComponentStorage()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for CodableObservableComponentStorage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CodableObservableComponentStorage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CodableObservableComponentStorage(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableObservableComponentStorage(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableObservableComponentStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t AnimationState.defaultSource.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v7;
  _QWORD v8[2];

  if (!*(_QWORD *)(v2 + 24))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultSourceFloatValue())
    {
      v5 = *(_QWORD *)(a1 + 16);
LABEL_20:
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultSourceDoubleValue())
    {
      v5 = *(_QWORD *)(a1 + 16);
      goto LABEL_20;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultSourceVector2FValue())
    {
      v7 = &demangling cache variable for type metadata for SIMD2<Float>;
LABEL_18:
      __swift_instantiateConcreteTypeFromMangledName(v7);
LABEL_19:
      v5 = *(_QWORD *)(a1 + 16);
      goto LABEL_20;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultSourceVector3FValue())
    {
      v7 = &demangling cache variable for type metadata for SIMD3<Float>;
      goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultSourceVector4FValue())
    {
      v7 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
      goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultSourceQuaternionFValue())
    {
      type metadata accessor for simd_quatf(0);
      goto LABEL_19;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
  if (!swift_dynamicCast())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_dynamicCast();
      AnimationState<>.defaultSource.getter(v8);
      if (v8[0])
      {
        v8[1] = v8[0];
        v5 = *(_QWORD *)(a1 + 16);
        goto LABEL_20;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  if (!RETimelineEventGetDefaultSourceSRTValue())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  if (one-time initialization token for identity != -1)
    swift_once();
  type metadata accessor for Optional();
  return swift_dynamicCast();
}

uint64_t AnimationState<>.defaultSource.getter@<X0>(_QWORD *a1@<X8>)
{
  return AnimationState<>.defaultSource.getter(MEMORY[0x24BE255B8], a1);
}

uint64_t AnimationState.defaultTarget.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v7;
  _QWORD v8[2];

  if (!*(_QWORD *)(v2 + 24))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultTargetFloatValue())
    {
      v5 = *(_QWORD *)(a1 + 16);
LABEL_20:
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultTargetDoubleValue())
    {
      v5 = *(_QWORD *)(a1 + 16);
      goto LABEL_20;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultTargetVector2FValue())
    {
      v7 = &demangling cache variable for type metadata for SIMD2<Float>;
LABEL_18:
      __swift_instantiateConcreteTypeFromMangledName(v7);
LABEL_19:
      v5 = *(_QWORD *)(a1 + 16);
      goto LABEL_20;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultTargetVector3FValue())
    {
      v7 = &demangling cache variable for type metadata for SIMD3<Float>;
      goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultTargetVector4FValue())
    {
      v7 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
      goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
  if (swift_dynamicCast())
  {
    if (RETimelineEventGetDefaultTargetQuaternionFValue())
    {
      type metadata accessor for simd_quatf(0);
      goto LABEL_19;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
  if (!swift_dynamicCast())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_dynamicCast();
      AnimationState<>.defaultTarget.getter(v8);
      if (v8[0])
      {
        v8[1] = v8[0];
        v5 = *(_QWORD *)(a1 + 16);
        goto LABEL_20;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  if (!RETimelineEventGetDefaultTargetSRTValue())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  if (one-time initialization token for identity != -1)
    swift_once();
  type metadata accessor for Optional();
  return swift_dynamicCast();
}

uint64_t AnimationState<>.defaultTarget.getter@<X0>(_QWORD *a1@<X8>)
{
  return AnimationState<>.defaultSource.getter(MEMORY[0x24BE25600], a1);
}

uint64_t AnimationState<>.defaultSource.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(v2 + 24);
  if (v4
    && (v5 = (void (*)(uint64_t, uint64_t, uint64_t))result,
        result = RETimelineEventGetSkeletalPoseJointCount(),
        result >= 1))
  {
    v6 = result;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v5(v4, v7 + 32, v6);
    *(_QWORD *)(v7 + 16) = v6;
    v8 = (__int128 *)(v7 + 64);
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v14 = *(v8 - 1);
      v15 = *(v8 - 2);
      v13 = *v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v11 = v9[2];
      v10 = v9[3];
      if (v11 >= v10 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
      v9[2] = v11 + 1;
      v12 = &v9[6 * v11];
      v12[2] = v15;
      v12[3] = v14;
      v12[4] = v13;
      v8 += 3;
      --v6;
    }
    while (v6);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  *a2 = v9;
  return result;
}

uint64_t AnimationState.storeAnimatedValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  char *v61;
  int v62;
  char *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v92 = a3;
  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v79 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v90 = (char *)&v79 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v79 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v79 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v79 - v27;
  MEMORY[0x24BDAC7A8](v29);
  MEMORY[0x24BDAC7A8]((char *)&v79 - v30);
  v32 = (char *)&v79 - v31;
  MEMORY[0x24BDAC7A8](v33);
  v46 = (char *)&v79 - v45;
  v47 = v3[3];
  if (!v47)
    return 0;
  v89 = v17;
  v86 = v41;
  v88 = v40;
  v84 = v39;
  v87 = v38;
  v82 = v37;
  v85 = v36;
  v81 = v35;
  v91 = v34;
  v83 = v44;
  v80 = v43;
  v79 = v42;
  v48 = *v3;
  v49 = v3[1];
  v50 = v3[2];
  v95 = *v3;
  v96 = v49;
  v97 = v50;
  v94 = v47;
  v98 = v47;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
  v51 = swift_dynamicCast();
  v52 = a1;
  v53 = a1;
  v54 = v92;
  v93 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v93(v46, v53, v92);
  if (!v51)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v46, v54);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v32, v46, v54);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    v95 = v48;
    v96 = v49;
    v97 = v50;
    v98 = v94;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
    v56 = swift_dynamicCast();
    v57 = v52;
    v93(v28, v52, v54);
    if (v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v25, v28, v54);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v93(v91, v52, v54);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedDoubleValue();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v28, v54);
    }
    v95 = v48;
    v96 = v49;
    v97 = v50;
    v58 = v94;
    v98 = v94;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
    v59 = swift_dynamicCast();
    v60 = (void (*)(uint64_t, uint64_t, uint64_t))v93;
    v93(v22, v57, v54);
    v61 = v91;
    if (v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v90, v22, v54);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v60((uint64_t)v61, v57, v54);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedVector2FValue();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v54);
    }
    v95 = v48;
    v96 = v49;
    v97 = v50;
    v98 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
    v62 = swift_dynamicCast();
    v63 = v89;
    v60((uint64_t)v89, v57, v54);
    if (v62)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v86, v63, v54);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v60((uint64_t)v61, v57, v54);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedVector3FValue();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v63, v54);
    }
    v95 = v48;
    v96 = v49;
    v97 = v50;
    v98 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
    v64 = swift_dynamicCast();
    v65 = v88;
    v60(v88, v57, v54);
    if (v64)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v84, v65, v54);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v60((uint64_t)v61, v57, v54);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedVector4FValue();
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v65, v54);
    }
    v95 = v48;
    v96 = v49;
    v97 = v50;
    v98 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
    v66 = swift_dynamicCast();
    v67 = v87;
    v60(v87, v57, v54);
    if (v66)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v82, v67, v54);
      type metadata accessor for simd_quatf(0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v60((uint64_t)v61, v57, v54);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedQuaternionFValue();
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v67, v54);
    }
    v95 = v48;
    v96 = v49;
    v97 = v50;
    v98 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
    v68 = swift_dynamicCast();
    v69 = v85;
    v60(v85, v57, v54);
    if (v68)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v81, v69, v54);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v60((uint64_t)v61, v57, v54);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedSRTValue();
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v69, v54);
    }
    v70 = v54;
    v71 = v5;
    v95 = v48;
    v96 = v49;
    v97 = v50;
    v98 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
    v72 = swift_dynamicCast();
    v73 = v83;
    v60(v83, v57, v70);
    if (v72)
    {
      v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32);
      v75 = v92;
      v74(v80, v73, v92);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v95 = v48;
        v96 = v49;
        v97 = v50;
        v98 = v58;
        swift_dynamicCast();
        v76 = v100;
        v60(v79, v57, v75);
        swift_dynamicCast();
        v77 = v99;
        if (v76 && RETimelineEventGetSkeletalPoseJointCount() == *(_QWORD *)(v77 + 16))
        {
          v55 = RETimelineEventSetAnimatedSkeletalPoseJoints();
          swift_bridgeObjectRelease();
          return v55;
        }
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v73, v92);
    }
    return 0;
  }
  v93(v91, v52, v54);
  swift_dynamicCast();
  return RETimelineEventSetAnimatedFloatValue();
}

double AnimationState.deltaTime.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double AnimationState.evaluationTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double AnimationState.normalizedTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t protocol witness for AnimationStateProtocol.storeAnimatedValue<A>(_:) in conformance AnimationState<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnimationState.storeAnimatedValue<A>(_:)(a1, a3, a2);
}

uint64_t AnimationState<>.defaultSourceJoints(index:count:transforms:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  return AnimationState<>.defaultSourceJoints(index:count:transforms:)(a1, a2, a3, MEMORY[0x24BE255B0]);
}

uint64_t AnimationState<>.defaultTargetJoints(index:count:transforms:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  return AnimationState<>.defaultSourceJoints(index:count:transforms:)(a1, a2, a3, MEMORY[0x24BE255F8]);
}

uint64_t AnimationState<>.defaultSourceJoints(index:count:transforms:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  _BOOL8 v12;
  _QWORD *v13;
  __int128 *v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    return 0;
  result = RETimelineEventGetSkeletalPoseJointCount();
  if (result < 1)
    return 0;
  v11 = a1 + a2;
  if (__OFADD__(a1, a2))
    goto LABEL_23;
  if (result < v11)
    return 0;
  v13 = *(_QWORD **)a3;
  if (*(_QWORD *)(*(_QWORD *)a3 + 16) < a2)
  {
    swift_bridgeObjectRelease();
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0, MEMORY[0x24BEE4AF8]);
    v13 = (_QWORD *)result;
    *(_QWORD *)a3 = result;
  }
  if (v11 >= a1)
  {
    if (v11 == a1)
      return 1;
    while (a1 < v11)
    {
      v14 = (__int128 *)a4(v5, a1);
      v12 = v14 != 0;
      if (v14)
      {
        v19 = v14[1];
        v20 = *v14;
        v18 = v14[2];
        if (one-time initialization token for identity != -1)
          swift_once();
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          v13 = (_QWORD *)result;
        }
        v16 = v13[2];
        v15 = v13[3];
        if (v16 >= v15 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
          v13 = (_QWORD *)result;
        }
        v13[2] = v16 + 1;
        v17 = &v13[6 * v16];
        v17[2] = v20;
        v17[3] = v19;
        v17[4] = v18;
        *(_QWORD *)a3 = v13;
        ++a1;
        if (--a2)
          continue;
      }
      return v12;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationState<>.storeAnimatedJoints(transforms:jointIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;

  if (!*(_QWORD *)(v2 + 24))
    return 0;
  result = RETimelineEventGetSkeletalPoseJointCount();
  v6 = *(_QWORD *)(a1 + 16);
  if (!__OFADD__(a2, v6))
  {
    if (result >= a2 + v6)
    {
      if (!v6)
        return 1;
      result = RETimelineEventSetAnimatedSkeletalPoseJointValue();
      if ((_DWORD)result)
      {
        v7 = a1 + 112;
        v8 = 1;
        while (1)
        {
          v9 = v6 == v8;
          if (v6 == v8)
            return v9;
          if (__OFADD__(a2, v8))
          {
            __break(1u);
            goto LABEL_15;
          }
          ++v8;
          v7 += 48;
          result = RETimelineEventSetAnimatedSkeletalPoseJointValue();
          if ((result & 1) == 0)
            return v9;
        }
      }
    }
    return 0;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of AnimationStateProtocol.defaultSource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnimationStateProtocol.defaultTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnimationStateProtocol.deltaTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnimationStateProtocol.evaluationTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AnimationStateProtocol.normalizedTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AnimationStateProtocol.storeAnimatedValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t type metadata accessor for AnimationState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimationState);
}

uint64_t __RKEntitySpinAction.__allocating_init(targetEntity:duration:iterations:direction:axis:)(uint64_t a1, char *a2, float a3, float a4, __n128 a5)
{
  uint64_t v9;
  char v10;

  v9 = swift_allocObject();
  v10 = *a2;
  *(_QWORD *)(v9 + 152) = 0;
  *(_BYTE *)(v9 + 160) = 1;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(float *)(v9 + 108) = a3;
  *(float *)(v9 + 112) = a4;
  *(__n128 *)(v9 + 128) = a5;
  *(_BYTE *)(v9 + 144) = v10;
  return __RKEntityAction.init(targetEntity:)(a1);
}

RealityKit::__RKEntitySpinDirectionType_optional __swiftcall __RKEntitySpinDirectionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  RealityKit::__RKEntitySpinDirectionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntitySpinDirectionType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

void *static __RKEntitySpinDirectionType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntitySpinDirectionType.allCases.getter;
}

uint64_t __RKEntitySpinDirectionType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x7369776B636F6C63;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntitySpinDirectionType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntitySpinDirectionType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntitySpinDirectionType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntitySpinDirectionType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKEntitySpinDirectionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntitySpinDirectionType(Swift::String *a1)
{
  return __RKEntitySpinDirectionType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntitySpinDirectionType(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x7369776B636F6C63;
  if (*v1)
    v2 = 0xD000000000000010;
  v3 = 0x800000021BE81A20;
  if (!*v1)
    v3 = 0xE900000000000065;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntitySpinDirectionType()
{
  lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntitySpinDirectionType()
{
  lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntitySpinDirectionType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntitySpinDirectionType;
}

uint64_t __RKEntitySpinAction.init(targetEntity:duration:iterations:direction:axis:)(uint64_t a1, char *a2, float a3, float a4, __n128 a5)
{
  uint64_t v5;
  char v6;

  v6 = *a2;
  *(_QWORD *)(v5 + 152) = 0;
  *(_BYTE *)(v5 + 160) = 1;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(float *)(v5 + 108) = a3;
  *(float *)(v5 + 112) = a4;
  *(__n128 *)(v5 + 128) = a5;
  *(_BYTE *)(v5 + 144) = v6;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySpinAction.perform(with:)()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t ComponentByClass;
  int MotionType;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t ServiceLocator;
  char *v20;
  char v21;
  _QWORD *v22;
  float v23;
  uint64_t result;
  float v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  unint64_t v30;
  __float2 v31;
  float32x4_t v32;
  _QWORD *v33;
  __float2 v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  _QWORD v60[3];
  uint64_t v61;
  _UNKNOWN **v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v2 = v0;
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 16);
  v63 = 91;
  v64 = (const char *)0xE100000000000000;
  if (v3)
  {
    v60[0] = 0;
    v60[1] = 0xE000000000000000;
    v68 = v3;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  else
  {
    v5 = 0xE300000000000000;
    v4 = 7104878;
  }
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8285;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_release();
  v11 = (char *)v63;
  v10 = v64;
  v12 = *(_QWORD *)(v0 + 16);
  if (!v12)
  {
    v17 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v63);
LABEL_26:
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 104) == 1 && *v13 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v2 + 105) == 1)
    {
      swift_retain();
LABEL_14:
      v18 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v18, &v63);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_14;
  v14 = *(_QWORD *)(v12 + 16);
  RERigidBodyComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    MotionType = RERigidBodyComponentGetMotionType();
    if (MotionType != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
  }
  else
  {
    MotionType = 0;
  }
  if (!REEntityGetSceneNullable()
    || !RESceneGetECSManagerNullable()
    || (ServiceLocator = REECSManagerGetServiceLocator(), !MEMORY[0x22076FD58](ServiceLocator)))
  {
    swift_release();
    goto LABEL_26;
  }
  v20 = *(char **)(v2 + 96);
  v21 = *(_BYTE *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = 1;
  *(_BYTE *)(v2 + 104) = 1;
  v63 = (uint64_t)v20;
  LOBYTE(v64) = v21;
  v22 = (_QWORD *)v2;
  __RKEntityAction.state.didset((uint64_t)&v63);
  if (*(float *)(v2 + 112) <= 0.0)
    *(_DWORD *)(v2 + 112) = 1065353216;
  if ((*(_BYTE *)(v2 + 144) & 1) != 0)
  {
    v22 = (_QWORD *)0x800000021BE81A20;
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) != 0)
      v23 = -0.19635;
    else
      v23 = 0.19635;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = -0.19635;
  }
  v25 = *(float *)(v2 + 112) + -1.0;
  v26 = LODWORD(v25);
  if ((~LODWORD(v25) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  v26 = 3741319169;
  if (v25 <= -9.2234e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v25 >= 9.2234e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v52 = ComponentByClass;
  v53 = MotionType;
  v54 = v14;
  v55 = v11;
  v56 = v10;
  v1 = (uint64_t)v25;
  if (((uint64_t)v25 & 0x8000000000000000) == 0)
  {
    v27 = 0;
    v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v57 = xmmword_21BE41210;
    while (1)
    {
      for (i = 0; i != 32; ++i)
      {
        v59 = *(float32x4_t *)(v2 + 128);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        v30 = v22[2];
        v29 = v22[3];
        ComponentByClass = v30 + 1;
        if (v30 >= v29 >> 1)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v22);
        v31 = __sincosf_stret((float)(v23 * (float)i) * 0.5);
        v32 = vmulq_n_f32(v59, v31.__sinval);
        v32.i32[3] = LODWORD(v31.__cosval);
        v22[2] = ComponentByClass;
        v33 = &v22[6 * v30];
        *((_OWORD *)v33 + 2) = xmmword_21BE41210;
        *((float32x4_t *)v33 + 3) = v32;
        v33[8] = 0;
        v33[9] = 0;
      }
      if (v27 == v1)
        break;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        break;
      }
    }
    v58 = *(float32x4_t *)(v2 + 128);
    v26 = v22[3];
    v1 = v30 + 2;
    if ((uint64_t)(v30 + 2) <= (uint64_t)(v26 >> 1))
      goto LABEL_45;
    goto LABEL_51;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v1, 1, v22);
LABEL_45:
  v35 = __sincosf_stret((float)(v23 * 32.0) * 0.5);
  v36 = vmulq_n_f32(v58, v35.__sinval);
  v36.i32[3] = LODWORD(v35.__cosval);
  v22[2] = v1;
  v37 = (uint64_t)&v22[6 * ComponentByClass + 4];
  *(_OWORD *)v37 = v57;
  *(float32x4_t *)(v37 + 16) = v36;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)(v37 + 40) = 0;
  RESampledAnimationDefaultParameters();
  v38 = v22[2];
  v39 = *(float *)(v2 + 108);
  LOBYTE(v63) = 1;
  v64 = "Transform.transform";
  LOBYTE(v65) = 1;
  *((float *)&v65 + 1) = v39 / (float)(v38 - 1);
  LODWORD(v66) = 0;
  *((float *)&v66 + 1) = v39;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    swift_bridgeObjectRelease();
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    v63 = 2;
    LODWORD(v64) = 5120;
    v65 = "SPIN";
    LOBYTE(v66) = 0;
    *(_QWORD *)(v2 + 152) = REAnimationComponentPlay();
    *(_BYTE *)(v2 + 160) = 0;
    v40 = swift_allocObject();
    swift_weakInit();
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = v40;
    *(_QWORD *)(v41 + 24) = v54;
    *(_DWORD *)(v41 + 32) = v53;
    *(_BYTE *)(v41 + 36) = v52 == 0;
    v42 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = partial apply for specialized closure #1 in __RKEntitySpinAction.perform(with:);
    *(_QWORD *)(v2 + 40) = v41;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v42);
    v43 = type metadata accessor for Entity();
    v61 = v43;
    v62 = &protocol witness table for Entity;
    v60[0] = v12;
    v44 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v60, 0, (char **)&v63);
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = partial apply for closure #2 in __RKEntitySpinAction.perform(with:);
    *(_QWORD *)(v45 + 24) = v44;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v46 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v47 = type metadata accessor for AnyCancellable();
    v66 = v47;
    v67 = MEMORY[0x24BDB9B58];
    swift_release();
    v63 = (uint64_t)v46;
    outlined destroy of BodyTrackingComponent?((uint64_t)v60, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v63, v2 + 168);
    swift_endAccess();
    v61 = v43;
    v62 = &protocol witness table for Entity;
    v60[0] = v12;
    v48 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v60, 0, (char **)&v63);
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = partial apply for closure #2 in __RKEntitySpinAction.perform(with:);
    *(_QWORD *)(v49 + 24) = v48;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v50 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v66 = v47;
    v67 = MEMORY[0x24BDB9B58];
    swift_release();
    v63 = (uint64_t)v50;
    outlined destroy of BodyTrackingComponent?((uint64_t)v60, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v63, v2 + 208);
    swift_endAccess();
    v63 = (uint64_t)v55;
    v64 = v56;
    v51 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v51, &v63);
    swift_bridgeObjectRelease();
    RERelease();
    swift_release();
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in __RKEntitySpinAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    v6 = result + 168;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6, (uint64_t)&v9);
    if (*((_QWORD *)&v10 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v9, (uint64_t)v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v7, v8);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for Cancellable?);
    }
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v9, v6);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v5 + 208, (uint64_t)&v9);
    if (*((_QWORD *)&v10 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v9, (uint64_t)v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v7, v8);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for Cancellable?);
    }
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v9, v5 + 208);
    swift_endAccess();
    swift_beginAccess();
    if (*(_QWORD *)(v5 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(_BYTE *)(v5 + 104) == 1) && *(_QWORD *)(v5 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(_QWORD *)(v5 + 152) = 0;
      *(_BYTE *)(v5 + 160) = 1;
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a3 & 0x100000000) == 0 && (_DWORD)a3 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntitySpinAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 160) & 1) != 0 || *(_QWORD *)(v1 + 16) != *(_QWORD *)(result + 152))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      v4 = *(_QWORD *)(v3 + 96);
      v5 = *(_BYTE *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 2;
      *(_BYTE *)(v3 + 104) = 1;
      v6 = v4;
      v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntitySpinAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 144);
  v8 = *(_OWORD *)(v1 + 128);
  v4 = type metadata accessor for __RKEntitySpinAction();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 152) = 0;
  *(_BYTE *)(v5 + 160) = 1;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_QWORD *)(v5 + 108) = *(_QWORD *)(v1 + 108);
  *(_OWORD *)(v5 + 128) = v8;
  *(_BYTE *)(v5 + 144) = v3;
  v6 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v6);
  a1[3] = v4;
  *a1 = result;
  return result;
}

uint64_t __RKEntitySpinAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10[4];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v5 = *(_BYTE *)(v1 + 144);
    v8 = *(_OWORD *)(v1 + 128);
    type metadata accessor for __RKEntitySpinAction();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 152) = 0;
    *(_BYTE *)(v6 + 160) = 1;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_QWORD *)(v6 + 108) = *(_QWORD *)(v1 + 108);
    *(_OWORD *)(v6 + 128) = v8;
    *(_BYTE *)(v6 + 144) = v5;
    v7 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v7);
  }
  else
  {
    __RKEntitySpinAction.copy(with:)(v10);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v9;
    else
      return 0;
  }
}

void __RKEntitySpinAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntitySpinAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntitySpinAction.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntitySpinAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntitySpinAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t sub_21BD83304()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BD83328()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in __RKEntitySpinAction.perform(with:)()
{
  uint64_t v0;

  return specialized closure #1 in __RKEntitySpinAction.perform(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32));
}

uint64_t partial apply for closure #2 in __RKEntitySpinAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntitySpinAction.perform(with:)(a1);
}

uint64_t sub_21BD83388()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for __RKEntitySpinAction()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntitySpinDirectionType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntitySpinDirectionType] and conformance [A], &demangling cache variable for type metadata for [__RKEntitySpinDirectionType], MEMORY[0x24BEE12E0]);
}

uint64_t storeEnumTagSinglePayload for __RKEntitySpinDirectionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD8348C + 4 * byte_21BE795D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD834C0 + 4 * byte_21BE795D0[v4]))();
}

uint64_t sub_21BD834C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD834C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD834D0);
  return result;
}

uint64_t sub_21BD834DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD834E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD834E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD834F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntitySpinDirectionType()
{
  return &type metadata for __RKEntitySpinDirectionType;
}

uint64_t method lookup function for __RKEntitySpinAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntitySpinAction.__allocating_init(targetEntity:duration:iterations:direction:axis:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 744))();
}

void static PerspectiveCameraComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 54;
}

float PerspectiveCameraComponent.near.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void PerspectiveCameraComponent.near.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*PerspectiveCameraComponent.near.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PerspectiveCameraComponent.far.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void PerspectiveCameraComponent.far.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*PerspectiveCameraComponent.far.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PerspectiveCameraComponent.fieldOfViewInDegrees.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void PerspectiveCameraComponent.fieldOfViewInDegrees.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*PerspectiveCameraComponent.fieldOfViewInDegrees.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PerspectiveCameraComponent.fieldOfViewOrientation.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 12);
}

_BYTE *PerspectiveCameraComponent.fieldOfViewOrientation.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = *result;
  return result;
}

uint64_t (*PerspectiveCameraComponent.fieldOfViewOrientation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __swiftcall PerspectiveCameraComponent.init(near:far:fieldOfViewInDegrees:)(RealityKit::PerspectiveCameraComponent *__return_ptr retstr, Swift::Float near, Swift::Float far, Swift::Float fieldOfViewInDegrees)
{
  retstr->near = near;
  retstr->far = far;
  retstr->fieldOfViewInDegrees = fieldOfViewInDegrees;
  retstr->fieldOfViewOrientation = RealityFoundation_CameraFieldOfViewOrientation_vertical;
}

void __swiftcall PerspectiveCameraComponent.init(near:far:fieldOfViewInDegrees:fieldOfViewOrientation:)(RealityKit::PerspectiveCameraComponent *__return_ptr retstr, Swift::Float near, Swift::Float far, Swift::Float fieldOfViewInDegrees, RealityFoundation::CameraFieldOfViewOrientation fieldOfViewOrientation)
{
  RealityFoundation::CameraFieldOfViewOrientation v5;

  v5 = *(_BYTE *)fieldOfViewOrientation;
  retstr->near = near;
  retstr->far = far;
  retstr->fieldOfViewInDegrees = fieldOfViewInDegrees;
  retstr->fieldOfViewOrientation = v5;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance PerspectiveCameraComponent@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;

  REPerspectiveCameraComponentGetNear();
  v3 = v2;
  REPerspectiveCameraComponentGetFar();
  v5 = v4;
  REPerspectiveCameraComponentGetFieldOfView();
  v7 = v6;
  result = REPerspectiveCameraComponentGetFieldOfViewDirection();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 12) = (_DWORD)result == 0;
  return result;
}

uint64_t static PerspectiveCameraComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;

  REPerspectiveCameraComponentGetNear();
  v3 = v2;
  REPerspectiveCameraComponentGetFar();
  v5 = v4;
  REPerspectiveCameraComponentGetFieldOfView();
  v7 = v6;
  result = REPerspectiveCameraComponentGetFieldOfViewDirection();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 12) = (_DWORD)result == 0;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance PerspectiveCameraComponent()
{
  REPerspectiveCameraComponentSetNear();
  REPerspectiveCameraComponentSetFar();
  REPerspectiveCameraComponentSetFieldOfView();
  REPerspectiveCameraComponentSetFieldOfViewDirection();
  return RENetworkMarkComponentDirty();
}

uint64_t PerspectiveCameraComponent.__toCore(_:)()
{
  REPerspectiveCameraComponentSetNear();
  REPerspectiveCameraComponentSetFar();
  REPerspectiveCameraComponentSetFieldOfView();
  REPerspectiveCameraComponentSetFieldOfViewDirection();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PerspectiveCameraComponent(_DWORD *a1@<X8>)
{
  *a1 = 54;
}

ValueMetadata *type metadata accessor for PerspectiveCameraComponent()
{
  return &type metadata for PerspectiveCameraComponent;
}

Swift::Void __swiftcall Entity.turnIntoNinja()()
{
  uint64_t CustomComponent;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **Object;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  REHideEntity();
  Entity.ensureAnchorComponent()();
  swift_retain();
  if (REComponentClassFromType())
    REEntityRemoveComponentByClass();
  swift_release();
  swift_retain();
  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  CustomComponent = REEntityGetCustomComponent();
  swift_release();
  if (!CustomComponent)
  {
    swift_retain();
    __EntityInfoComponent.init(entity:)(&v11);
    v1 = (uint64_t)v11;
    v2 = v12;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);
    swift_release_n();
    swift_release();
  }
  swift_retain();
  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  if (!REEntityGetCustomComponent())
    goto LABEL_17;
  Object = (unsigned __int8 **)RECustomComponentGetObject();
  if (!Object)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  static __EntityInfoComponent.__load(from:)(Object, (uint64_t *)&v11);
  v4 = v12;
  if (v12 == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v5 = (uint64_t)v11;
  if (!v11)
  {
LABEL_19:
    __break(1u);
    return;
  }
  if (*v11 != 42)
  {
    swift_retain();
    v6 = String.init(utf8String:)();
    v8 = v7;
    swift_release();
    if (v8)
      v9 = v6;
    else
      v9 = 0;
    if (!v8)
      v8 = 0xE000000000000000;
    v5 = specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(1, v9, v8);
    swift_bridgeObjectRelease();
    type metadata accessor for IntrospectionDataCleanupHelper();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v5;
    swift_release();
    v4 = v10;
  }
  swift_retain();
  outlined copy of CustomMaterial.Blending(v5, v4);
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5, v4);
  outlined consume of __EntityInfoComponent?(v5, v4);
  swift_release();
  outlined consume of __EntityInfoComponent?(v5, v4);
  swift_release();
}

uint64_t Entity.isNinja.getter()
{
  uint64_t result;
  unsigned __int8 *v1;
  BOOL v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Int v6;
  unint64_t v7;
  int v8;

  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  if (!REEntityGetCustomComponent())
    return 1;
  result = RECustomComponentGetObject();
  if (result)
  {
    v1 = *(unsigned __int8 **)result;
    if (*(_QWORD *)(result + 8))
      v2 = 1;
    else
      v2 = v1 == 0;
    if (v2)
    {
      result = swift_retain();
    }
    else
    {
      v3 = *v1;
      v4 = String.init(utf8String:)();
      if (v5)
        v6 = v4;
      else
        v6 = 0;
      if (v5)
        v7 = v5;
      else
        v7 = 0xE000000000000000;
      v1 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v3 == 42, v6, v7);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v1;
    }
    if (v1)
    {
      v8 = *v1;
      swift_release();
      return v8 == 42;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t __EntityInfoComponent.init(entity:)@<X0>(_QWORD *a1@<X8>)
{
  objc_class *ObjCClassFromMetadata;
  NSString *v3;
  Swift::Int v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  char *v16;

  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v3 = NSStringFromClass(ObjCClassFromMetadata);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v9 = *((_QWORD *)v7 + 2);
  v8 = *((_QWORD *)v7 + 3);
  if (v9 >= v8 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v7);
  *((_QWORD *)v7 + 2) = v9 + 1;
  v7[v9 + 32] = 13;
  v16 = v7;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4, v6);
  v10 = (uint64_t)v16;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v10 = result;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  v14 = v13 + 1;
  if (v13 >= v12 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v10);
    v10 = result;
  }
  *(_QWORD *)(v10 + 16) = v14;
  *(_BYTE *)(v10 + 32 + v13) = 0;
  if (v13 > 0x7FFFFFFE)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    v15 = (void *)RECIntrospectionAlloc();
    memmove(v15, (const void *)(v10 + 32), v14);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    type metadata accessor for IntrospectionDataCleanupHelper();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v15;
    *a1 = v15;
    a1[1] = result;
  }
  return result;
}

uint64_t static __EntityInfoComponent.__load(from:)@<X0>(unsigned __int8 **a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  BOOL v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = a1[1];
  if (v4)
    v6 = 1;
  else
    v6 = v3 == 0;
  if (v6)
  {
    *a2 = (uint64_t)v3;
    a2[1] = (uint64_t)v4;
    return swift_retain();
  }
  else
  {
    v8 = *v3;
    v9 = String.init(utf8String:)();
    if (v10)
      v11 = v9;
    else
      v11 = 0;
    if (v10)
      v12 = v10;
    else
      v12 = 0xE000000000000000;
    v13 = specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
    swift_bridgeObjectRelease();
    type metadata accessor for IntrospectionDataCleanupHelper();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
    *a2 = v13;
    a2[1] = result;
  }
  return result;
}

unint64_t static __EntityInfoComponent.__typeName.getter()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __EntityInfoComponent.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __EntityInfoComponent.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __EntityInfoComponent.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __EntityInfoComponent.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __EntityInfoComponent.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __EntityInfoComponent.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __EntityInfoComponent.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x616A6E694E7369;
  if (*v1)
    v2 = 0x7954797469746E65;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xEE00656D614E6570;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __EntityInfoComponent.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7954797469746E65;
  else
    return 0x616A6E694E7369;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __EntityInfoComponent.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __EntityInfoComponent.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __EntityInfoComponent.CodingKeys()
{
  lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __EntityInfoComponent.CodingKeys()
{
  lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __EntityInfoComponent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__EntityInfoComponent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v16 = 1;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v12 = specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 & 1, v10, v11);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  type metadata accessor for IntrospectionDataCleanupHelper();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *a2 = v12;
  a2[1] = v13;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_release();
}

uint64_t __EntityInfoComponent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__EntityInfoComponent.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v10[1] = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys();
  result = dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8)
  {
    v12 = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v2)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      swift_retain();
      String.init(utf8String:)();
      swift_release();
      v11 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static __EntityInfoComponent.__addIntrospectionData(_:)(uint64_t result)
{
  if (result)
    return REStructBuilderAddMemberDataTypeWithTag();
  return result;
}

void static __EntityInfoComponent.__free(to:offset:)(_QWORD *a1)
{
  if (!a1[1] && *a1)
    RECIntrospectionFree();
  swift_arrayDestroy();
  JUMPOUT(0x220772F44);
}

uint64_t static __EntityInfoComponent.__load(from:offset:)@<X0>(unsigned __int8 **a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  BOOL v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;

  a2[3] = (uint64_t)&type metadata for __EntityInfoComponent;
  a2[4] = (uint64_t)&protocol witness table for __EntityInfoComponent;
  v3 = *a1;
  v4 = a1[1];
  if (v4)
    v6 = 1;
  else
    v6 = v3 == 0;
  if (v6)
  {
    *a2 = (uint64_t)v3;
    a2[1] = (uint64_t)v4;
    return swift_retain();
  }
  else
  {
    v8 = *v3;
    v9 = String.init(utf8String:)();
    if (v10)
      v11 = v9;
    else
      v11 = 0;
    if (v10)
      v12 = v10;
    else
      v12 = 0xE000000000000000;
    v13 = specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
    swift_bridgeObjectRelease();
    type metadata accessor for IntrospectionDataCleanupHelper();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
    *a2 = v13;
    a2[1] = result;
  }
  return result;
}

void protocol witness for static Component.__free(to:offset:) in conformance __EntityInfoComponent(_QWORD *a1)
{
  if (!a1[1] && *a1)
    RECIntrospectionFree();
  swift_arrayDestroy();
  JUMPOUT(0x220772F44);
}

uint64_t protocol witness for static Component.__addIntrospectionData(_:) in conformance __EntityInfoComponent(uint64_t result)
{
  if (result)
    return REStructBuilderAddMemberDataTypeWithTag();
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __EntityInfoComponent@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return __EntityInfoComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __EntityInfoComponent(_QWORD *a1)
{
  return __EntityInfoComponent.encode(to:)(a1);
}

uint64_t Entity.ensureAnchorComponent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t ComponentByClass;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  REAnchorComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    UUID.init()();
  }
  else
  {
    v5 = REComponentCreateByType();
    result = UUID.init()();
    if (!v5)
    {
      __break(1u);
      return result;
    }
  }
  REAnchorComponentSetAnchorIdentifier();
  REAnchorComponentSetWorldTransform();
  if (!ComponentByClass)
  {
    REEntityAddExistingComponent();
    RERelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(char a1, Swift::Int a2, unint64_t a3)
{
  char v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  void *v14;
  char *v15;

  if ((a1 & 1) != 0)
    v5 = 42;
  else
    v5 = 13;
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16) + 1, 1, MEMORY[0x24BEE4AF8]);
  v8 = *((_QWORD *)v6 + 2);
  v7 = *((_QWORD *)v6 + 3);
  if (v8 >= v7 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v6);
  *((_QWORD *)v6 + 2) = v8 + 1;
  v6[v8 + 32] = v5;
  v15 = v6;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(a2, a3);
  v9 = (uint64_t)v15;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    v9 = result;
  }
  v12 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  v13 = v12 + 1;
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v9);
    v9 = result;
  }
  *(_QWORD *)(v9 + 16) = v13;
  *(_BYTE *)(v9 + 32 + v12) = 0;
  if (v12 > 0x7FFFFFFE)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    v14 = (void *)RECIntrospectionAlloc();
    memmove(v14, (const void *)(v9 + 32), v13);
    swift_bridgeObjectRelease_n();
    return (uint64_t)v14;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __EntityInfoComponent.CodingKeys, &type metadata for __EntityInfoComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __EntityInfoComponent.CodingKeys, &type metadata for __EntityInfoComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __EntityInfoComponent.CodingKeys, &type metadata for __EntityInfoComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __EntityInfoComponent.CodingKeys, &type metadata for __EntityInfoComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys);
  }
  return result;
}

_QWORD *assignWithCopy for __EntityInfoComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for __EntityInfoComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __EntityInfoComponent()
{
  return &type metadata for __EntityInfoComponent;
}

uint64_t storeEnumTagSinglePayload for __EntityInfoComponent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD848F0 + 4 * byte_21BE79825[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD84924 + 4 * asc_21BE79820[v4]))();
}

uint64_t sub_21BD84924(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD8492C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD84934);
  return result;
}

uint64_t sub_21BD84940(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD84948);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD8494C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD84954(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __EntityInfoComponent.CodingKeys()
{
  return &type metadata for __EntityInfoComponent.CodingKeys;
}

uint64_t PhotogrammetrySession.Configuration.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  *(_WORD *)a1 = 1;
  *(_BYTE *)(a1 + 2) = 0;
  v2 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  v3 = a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for URL();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + *(int *)(v2 + 32)) = 0;
  return result;
}

uint64_t type metadata accessor for PhotogrammetrySession.Configuration(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Configuration);
}

uint64_t static PhotogrammetrySession.isSupported.getter()
{
  type metadata accessor for PhotogrammetrySession();
  return static PhotogrammetrySession.isSupported.getter() & 1;
}

{
  return MEMORY[0x24BE1EAE8]();
}

__n128 PhotogrammetrySession.Request.Geometry.orientedBounds.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 48);
  v3 = *(_OWORD *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__int128 *PhotogrammetrySession.Request.Geometry.init(orientedBounds:transform:)@<X0>(__int128 *result@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v5 = *result;
  v6 = result[1];
  v7 = result[2];
  *(__n128 *)a2 = a3;
  *(__n128 *)(a2 + 16) = a4;
  *(__n128 *)(a2 + 32) = a5;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

void OrientedBoundingBox.init(orientation:boundingBox:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

uint64_t PhotogrammetrySession.__allocating_init(input:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v4 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PhotogrammetrySession.InputSource(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_21B9AA000, v11, v12, "~~~ PhotogrammetrySession init was called! ~~~", v13, 2u);
    MEMORY[0x220772F44](v13, -1, -1);
  }

  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v9, a1, v14);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v6, type metadata accessor for PhotogrammetrySession.Configuration);
  type metadata accessor for PhotogrammetrySession(0);
  swift_allocObject();
  v16 = PhotogrammetrySession.init(source:configuration:)((uint64_t)v9, (uint64_t)v6);
  outlined destroy of __RKEntityActionSpecification(a2, type metadata accessor for PhotogrammetrySession.Configuration);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v16;
}

uint64_t type metadata accessor for PhotogrammetrySession.InputSource(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.InputSource);
}

uint64_t type metadata accessor for PhotogrammetrySession(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession);
}

uint64_t PhotogrammetrySession.__allocating_init<A>(input:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a2;
  v26 = a1;
  v4 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PhotogrammetrySession.InputSource(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for logger != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v24 = a3;
    v18 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_21B9AA000, v15, v16, "~~~ PhotogrammetrySession init was called! ~~~", v17, 2u);
    a3 = v24;
    MEMORY[0x220772F44](v18, -1, -1);
  }

  v19 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v26, a3);
  *v13 = AnySequence.init<A>(_:)();
  swift_storeEnumTagMultiPayload();
  v20 = v25;
  outlined init with copy of __RKEntityActionSpecification(v25, (uint64_t)v6, type metadata accessor for PhotogrammetrySession.Configuration);
  type metadata accessor for PhotogrammetrySession(0);
  swift_allocObject();
  v21 = PhotogrammetrySession.init(source:configuration:)((uint64_t)v13, (uint64_t)v6);
  outlined destroy of __RKEntityActionSpecification(v20, type metadata accessor for PhotogrammetrySession.Configuration);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, a3);
  return v21;
}

uint64_t PhotogrammetrySession.Error.localizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v5;

  v1 = type metadata accessor for PhotogrammetrySession.Error(0);
  MEMORY[0x24BDAC7A8](v1);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  return String.init<A>(describing:)();
}

BOOL static PhotogrammetrySession.Configuration.SampleOrdering.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void PhotogrammetrySession.Configuration.SampleOrdering.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t PhotogrammetrySession.Configuration.isObjectMaskingEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PhotogrammetrySession.Configuration.isObjectMaskingEnabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*PhotogrammetrySession.Configuration.isObjectMaskingEnabled.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhotogrammetrySession.Configuration.sampleOrdering.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *PhotogrammetrySession.Configuration.sampleOrdering.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*PhotogrammetrySession.Configuration.sampleOrdering.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhotogrammetrySession.Configuration.featureSensitivity.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *PhotogrammetrySession.Configuration.featureSensitivity.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*PhotogrammetrySession.Configuration.featureSensitivity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhotogrammetrySession.Configuration.checkpointDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PhotogrammetrySession.Configuration(0) + 28);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t PhotogrammetrySession.Configuration.checkpointDirectory.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PhotogrammetrySession.Configuration(0) + 28);
  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*PhotogrammetrySession.Configuration.checkpointDirectory.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PhotogrammetrySession.Configuration(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhotogrammetrySession.Configuration.ignoreBoundingBox.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PhotogrammetrySession.Configuration(0) + 32));
}

{
  return MEMORY[0x24BE1EB58]();
}

uint64_t PhotogrammetrySession.Configuration.ignoreBoundingBox.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PhotogrammetrySession.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*PhotogrammetrySession.Configuration.ignoreBoundingBox.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PhotogrammetrySession.Configuration(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhotogrammetrySession.Configuration.init(checkpointDirectory:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_WORD *)a2 = 1;
  *(_BYTE *)(a2 + 2) = 0;
  v4 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  v5 = a2 + *(int *)(v4 + 28);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v9(v5, 1, 1, v6);
  *(_BYTE *)(a2 + *(int *)(v4 + 32)) = 0;
  outlined destroy of BodyTrackingComponent?(v5, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v5, a1, v6);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v9)(v5, 0, 1, v6);
}

uint64_t PhotogrammetrySession.Request.Detail.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t PhotogrammetrySession.Request.Detail.rawValue.getter()
{
  return 0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance PhotogrammetrySession.Request.Detail@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

__n128 PhotogrammetrySession.Request.Geometry.orientedBounds.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v1[3] = *(_OWORD *)a1;
  v1[4] = v3;
  v1[5] = v4;
  return result;
}

void (*PhotogrammetrySession.Request.Geometry.orientedBounds.modify(_QWORD *a1))(void **a1)
{
  _OWORD *v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = v1[4];
  v5 = v1[5];
  *(_OWORD *)v3 = v1[3];
  *((_OWORD *)v3 + 1) = v4;
  *((_OWORD *)v3 + 2) = v5;
  return PhotogrammetrySession.Request.Geometry.orientedBounds.modify;
}

void PhotogrammetrySession.Request.Geometry.orientedBounds.modify(void **a1)
{
  _QWORD *v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;

  v1 = *a1;
  v2 = (_OWORD *)v1[6];
  v3 = *((_OWORD *)v1 + 1);
  v4 = *((_OWORD *)v1 + 2);
  v2[3] = *(_OWORD *)v1;
  v2[4] = v3;
  v2[5] = v4;
  free(v1);
}

uint64_t PhotogrammetrySession.Request.Geometry.bounds.getter()
{
  float32x4_t *v0;

  simd_matrix4x4(v0[3]);
  return REAABBTransform();
}

void PhotogrammetrySession.Request.Geometry.bounds.setter(__n128 a1, __n128 a2)
{
  uint64_t v2;

  *(_OWORD *)(v2 + 48) = xmmword_21BE41250;
  *(__n128 *)(v2 + 64) = a1;
  *(__n128 *)(v2 + 80) = a2;
}

__n128 (*PhotogrammetrySession.Request.Geometry.bounds.modify(_QWORD *a1))(void **a1)
{
  float32x4_t *v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  simd_matrix4x4(v1[3]);
  REAABBTransform();
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  return PhotogrammetrySession.Request.Geometry.bounds.modify;
}

__n128 PhotogrammetrySession.Request.Geometry.bounds.modify(void **a1)
{
  _QWORD *v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v1 = *a1;
  v2 = (_OWORD *)v1[4];
  v3 = *(_OWORD *)v1;
  v4 = *((_OWORD *)v1 + 1);
  v2[3] = *(_OWORD *)&zmmword_21BE41220[48];
  v2[4] = v3;
  v2[5] = v4;
  free(v1);
  return result;
}

__n128 PhotogrammetrySession.Request.Geometry.transform.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void PhotogrammetrySession.Request.Geometry.transform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  __n128 *v3;

  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
}

uint64_t (*PhotogrammetrySession.Request.Geometry.transform.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhotogrammetrySession.Request.Geometry.init(bounds:transform:)(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>, __n128 a6@<Q4>)
{
  *(__n128 *)a1 = a4;
  *(__n128 *)(a1 + 16) = a5;
  *(__n128 *)(a1 + 32) = a6;
  *(_OWORD *)(a1 + 48) = xmmword_21BE41250;
  *(__n128 *)(a1 + 64) = a2;
  *(__n128 *)(a1 + 80) = a3;
}

uint64_t PhotogrammetrySession.Request.Geometry.hash(into:)(uint64_t a1)
{
  __n128 *v1;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  specialized SIMD.hash(into:)(a1, *v1);
  specialized SIMD.hash(into:)(a1, v4);
  specialized SIMD.hash(into:)(a1, v5);
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized SIMD.hash(into:)(a1, (__n128)xmmword_21BE41210);
  specialized SIMD.hash(into:)(a1, v6);
  specialized SIMD.hash(into:)(a1, (__n128)0);
  specialized SIMD.hash(into:)(a1, v7);
  return specialized SIMD.hash(into:)(a1, v8);
}

BOOL static PhotogrammetrySession.Request.Geometry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  float v4;
  float v5;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v12 = *(_OWORD *)(a1 + 48);
  v9 = *(__n128 *)(a1 + 80);
  v10 = *(__n128 *)(a1 + 64);
  v11 = *(_OWORD *)(a2 + 48);
  v7 = *(__n128 *)(a2 + 80);
  v8 = *(__n128 *)(a2 + 64);
  if ((specialized static Transform.== infix(_:_:)(*(__n128 *)a1, *(__n128 *)(a1 + 16), *(__n128 *)(a1 + 32), *(__n128 *)a2, *(__n128 *)(a2 + 16), *(__n128 *)(a2 + 32)) & 1) == 0)return 0;
  v2 = 0;
  v3 = 1;
  while (!v3)
  {
    if (v2 == 3)
      return 0;
    v3 = 0;
LABEL_4:
    ++v2;
  }
  v13 = v12;
  v4 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  v14 = v11;
  v5 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  v3 = v4 == v5;
  if (v2 != 3)
    goto LABEL_4;
  if (v4 == v5)
    return specialized static BoundingBox.== infix(_:_:)(v10, v9, v8, v7);
  return 0;
}

Swift::Int PhotogrammetrySession.Request.Geometry.hashValue.getter()
{
  __n128 *v0;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  _BYTE v8[72];

  v2 = *v0;
  v3 = v0[1];
  v4 = v0[2];
  v5 = v0[3];
  v6 = v0[4];
  v7 = v0[5];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v8, v2);
  specialized SIMD.hash(into:)(v8, v3);
  specialized SIMD.hash(into:)(v8, v4);
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized SIMD.hash(into:)(v8, (__n128)xmmword_21BE41210);
  specialized SIMD.hash(into:)(v8, v5);
  specialized SIMD.hash(into:)(v8, (__n128)0);
  specialized SIMD.hash(into:)(v8, v6);
  specialized SIMD.hash(into:)(v8, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhotogrammetrySession.Request.Geometry(uint64_t a1)
{
  __n128 *v1;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  specialized SIMD.hash(into:)(a1, *v1);
  specialized SIMD.hash(into:)(a1, v4);
  specialized SIMD.hash(into:)(a1, v5);
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized SIMD.hash(into:)(a1, (__n128)xmmword_21BE41210);
  specialized SIMD.hash(into:)(a1, v6);
  specialized SIMD.hash(into:)(a1, (__n128)0);
  specialized SIMD.hash(into:)(a1, v7);
  return specialized SIMD.hash(into:)(a1, v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhotogrammetrySession.Request.Geometry()
{
  __n128 *v0;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  _BYTE v8[72];

  v2 = *v0;
  v3 = v0[1];
  v4 = v0[2];
  v5 = v0[3];
  v6 = v0[4];
  v7 = v0[5];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v8, v2);
  specialized SIMD.hash(into:)(v8, v3);
  specialized SIMD.hash(into:)(v8, v4);
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized SIMD.hash(into:)(v8, (__n128)xmmword_21BE41210);
  specialized SIMD.hash(into:)(v8, v5);
  specialized SIMD.hash(into:)(v8, (__n128)0);
  specialized SIMD.hash(into:)(v8, v6);
  specialized SIMD.hash(into:)(v8, v7);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PhotogrammetrySession.Request.Geometry(__n128 *a1, __n128 *a2)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10[3];
  __n128 v11[3];

  v8 = a1[4];
  v9 = a1[3];
  v6 = a2[3];
  v7 = a1[5];
  v4 = a2[5];
  v5 = a2[4];
  if ((specialized static Transform.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]) & 1) != 0)
  {
    v11[0] = v9;
    v11[1] = v8;
    v11[2] = v7;
    v10[0] = v6;
    v10[1] = v5;
    v10[2] = v4;
    return specialized static OrientedBoundingBox.== infix(_:_:)(v11, v10);
  }
  else
  {
    return 0;
  }
}

uint64_t PhotogrammetrySession.Request.init(modelFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
              + 64);
  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_BYTE *)(v4 + 96) = 1;
  type metadata accessor for PhotogrammetrySession.Request(0);
  return swift_storeEnumTagMultiPayload();
}

void PhotogrammetrySession.Request.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v5 = (char *)sub_21BD85B4C + 4 * byte_21BE79A40[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BD85B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;

  v6 = (uint64_t *)(v1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                          + 64));
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  *(_QWORD *)(v5 - 208) = v6[3];
  v10 = v6[4];
  *(_QWORD *)(v5 - 176) = v6[5];
  *(_QWORD *)(v5 - 192) = v6[6];
  v11 = v6[7];
  *(_QWORD *)(v5 - 152) = v6[8];
  *(_QWORD *)(v5 - 144) = v11;
  v12 = v6[9];
  *(_QWORD *)(v5 - 120) = v6[10];
  *(_QWORD *)(v5 - 112) = v12;
  *(_QWORD *)(v5 - 96) = v6[11];
  v13 = *((unsigned __int8 *)v6 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, v1, v2);
  Hasher._combine(_:)(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(0);
  if (v13 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    *(_QWORD *)&v14 = v7;
    *((_QWORD *)&v14 + 1) = v8;
    *(_OWORD *)(v5 - 224) = v14;
    *(_QWORD *)&v14 = v9;
    *((_QWORD *)&v14 + 1) = *(_QWORD *)(v5 - 208);
    *(_OWORD *)(v5 - 208) = v14;
    *(_QWORD *)&v14 = v10;
    *((_QWORD *)&v14 + 1) = *(_QWORD *)(v5 - 176);
    *(_OWORD *)(v5 - 176) = v14;
    *(_QWORD *)&v14 = *(_QWORD *)(v5 - 192);
    *((_QWORD *)&v14 + 1) = *(_QWORD *)(v5 - 144);
    *(_OWORD *)(v5 - 144) = v14;
    *(_QWORD *)&v14 = *(_QWORD *)(v5 - 152);
    *((_QWORD *)&v14 + 1) = *(_QWORD *)(v5 - 112);
    *(_OWORD *)(v5 - 112) = v14;
    *(_QWORD *)&v14 = *(_QWORD *)(v5 - 120);
    *((_QWORD *)&v14 + 1) = *(_QWORD *)(v5 - 96);
    *(_OWORD *)(v5 - 96) = v14;
    Hasher._combine(_:)(1u);
    specialized SIMD.hash(into:)(v0, *(__n128 *)(v5 - 224));
    specialized SIMD.hash(into:)(v0, *(__n128 *)(v5 - 208));
    specialized SIMD.hash(into:)(v0, *(__n128 *)(v5 - 176));
    if (one-time initialization token for identity != -1)
      swift_once();
    specialized SIMD.hash(into:)(v0, (__n128)xmmword_21BE41210);
    specialized SIMD.hash(into:)(v0, *(__n128 *)(v5 - 144));
    specialized SIMD.hash(into:)(v0, (__n128)0);
    specialized SIMD.hash(into:)(v0, *(__n128 *)(v5 - 112));
    specialized SIMD.hash(into:)(v0, *(__n128 *)(v5 - 96));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
}

Swift::Int PhotogrammetrySession.Request.hashValue.getter()
{
  Hasher.init(_seed:)();
  PhotogrammetrySession.Request.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhotogrammetrySession.Request()
{
  Hasher.init(_seed:)();
  PhotogrammetrySession.Request.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhotogrammetrySession.Request()
{
  Hasher.init(_seed:)();
  PhotogrammetrySession.Request.hash(into:)();
  return Hasher._finalize()();
}

__n128 PhotogrammetrySession.Pose.translation.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

__n128 PhotogrammetrySession.Pose.rotation.getter()
{
  __n128 *v0;

  return v0[1];
}

uint64_t PhotogrammetrySession.Pose.transform.getter()
{
  uint64_t result;

  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of PhotogrammetrySession.Pose.transform.getter);
  if (one-time initialization token for identity != -1)
    return swift_once();
  return result;
}

uint64_t PhotogrammetrySession.Poses.posesBySample.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x24BE1EC30]();
}

uint64_t PhotogrammetrySession.Poses.urlsBySample.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 PhotogrammetrySession.PointCloud.Point.position.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

uint64_t PhotogrammetrySession.PointCloud.Point.color.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

{
  return MEMORY[0x24BE1EAC0]();
}

uint64_t PhotogrammetrySession.PointCloud.points.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x24BE1EAD8]();
}

uint64_t PhotogrammetrySession.Output.ProgressInfo.estimatedRemainingTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

{
  return MEMORY[0x24BE1EC50]();
}

void PhotogrammetrySession.Output.ProgressInfo.processingStage.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 9);
}

BOOL static PhotogrammetrySession.Output.ProcessingStage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PhotogrammetrySession.Output.ProcessingStage.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PhotogrammetrySession.Output.ProcessingStage.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void PhotogrammetrySession.Output.localizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE v9[64];

  v1 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v9[-v7], type metadata accessor for PhotogrammetrySession.Output);
  String.init<A>(describing:)();
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)v5, type metadata accessor for PhotogrammetrySession.Output);
  v8 = (char *)sub_21BD861D0 + 4 * word_21BE79A46[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BD861D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  v4 = *(void **)(v2
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                         + 48));
  outlined init with take of PhotogrammetrySession.Request(v2, v0);
  *(_QWORD *)(v3 - 112) = 0;
  *(_QWORD *)(v3 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 112) = 0x2074736575716552;
  *(_QWORD *)(v3 - 104) = 0xE800000000000000;
  outlined init with copy of __RKEntityActionSpecification(v0, v1, type metadata accessor for PhotogrammetrySession.Request);
  v5._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x800000021BE92640;
  v6._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v6);
  swift_getErrorValue();
  v7._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 11810;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);

  v9 = *(_QWORD *)(v3 - 112);
  outlined destroy of __RKEntityActionSpecification(v0, type metadata accessor for PhotogrammetrySession.Request);
  return v9;
}

uint64_t PhotogrammetrySession.Outputs.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t PhotogrammetrySession.Outputs.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 32) + *(_QWORD *)(v3 + 32));
  v4 = (_QWORD *)swift_task_alloc();
  v0[4] = v4;
  *v4 = v0;
  v4[1] = PhotogrammetrySession.Outputs.Iterator.next();
  return v6(v0[2], v2, v3);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance PhotogrammetrySession.Outputs.Iterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[6] = v4;
  v5[7] = a4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = v0[6];
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 32) + *(_QWORD *)(v3 + 32));
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  return v6(v0[3], v2, v3);
}

uint64_t _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (*(_QWORD *)(v2 + 32))
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY2_()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD **)(v0 + 56);
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PhotogrammetrySession.Outputs.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of __REAssetService(v1, a1);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance PhotogrammetrySession.Outputs@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined init with copy of __REAssetService(v1, a1);
  return outlined destroy of PhotogrammetrySession.Outputs(v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PhotogrammetrySession.process(requests:)(Swift::OpaquePointer requests)
{
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));
  OS_dispatch_queue.sync<A>(execute:)();
}

Swift::Void __swiftcall PhotogrammetrySession.cancel()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[6];

  v1 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(_QWORD *)(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));
  v2 = *v1;
  v3 = *(NSObject **)(*v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_serialExecutor);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in PhotogrammetrySessionImpl.cancel();
  *(_QWORD *)(v4 + 24) = v2;
  v6[4] = _sIg_Ieg_TRTA_0;
  v6[5] = v4;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1107296256;
  v6[2] = thunk for @escaping @callee_guaranteed () -> ();
  v6[3] = &block_descriptor_41;
  v5 = _Block_copy(v6);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v3 & 1) != 0)
    __break(1u);
}

uint64_t PhotogrammetrySession.activeRequests.getter()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(_QWORD *)(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));
  return swift_bridgeObjectRetain();
}

uint64_t PhotogrammetrySession.isProcessing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*__swift_project_boxed_opaque_existential_1((_QWORD *)(v0+ OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(_QWORD *)(v0+ OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession+ 24))+ OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing);
}

uint64_t PhotogrammetrySession.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));
  return outlined init with copy of __RKEntityActionSpecification(*v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_configuration, a1, type metadata accessor for PhotogrammetrySession.Configuration);
}

uint64_t PhotogrammetrySession.outputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));
  return outlined init with copy of AnyMeshBuffer(*v3 + 16, a1);
}

uint64_t PhotogrammetrySession.init(source:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;

  v50 = a2;
  v4 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x24BDAC7A8](v4);
  v44 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (uint64_t)&v43 - v7;
  v48 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - v12;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v46 = v14;
  v47 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v43 - v19;
  v21 = type metadata accessor for PhotogrammetrySession.InputSource(0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (uint64_t *)((char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v55 = v2;
  v24 = v2 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  UUID.init()();
  v51 = a1;
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v23, type metadata accessor for PhotogrammetrySession.InputSource);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v33 = v46;
    v32 = v47;
    (*(void (**)(char *, uint64_t *, uint64_t))(v47 + 32))(v20, v23, v46);
    v26 = v24;
    v34 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v24, v48);
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v17, v20, v33);
    v35 = v50;
    v36 = v45;
    outlined init with copy of __RKEntityActionSpecification(v50, v45, type metadata accessor for PhotogrammetrySession.Configuration);
    v37 = v49;
    v38 = specialized PhotogrammetrySessionImpl.__allocating_init(id:input:configuration:)((uint64_t)v13, (uint64_t)v17, v36);
    if (v37)
    {
      v27 = v34;
      outlined destroy of __RKEntityActionSpecification(v35, type metadata accessor for PhotogrammetrySession.Configuration);
      outlined destroy of __RKEntityActionSpecification(v51, type metadata accessor for PhotogrammetrySession.InputSource);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v33);
      goto LABEL_6;
    }
    v41 = v38;
    v53 = type metadata accessor for PhotogrammetrySessionImpl(0);
    v54 = &protocol witness table for PhotogrammetrySessionImpl;
    *(_QWORD *)&v52 = v41;
    outlined destroy of __RKEntityActionSpecification(v35, type metadata accessor for PhotogrammetrySession.Configuration);
    outlined destroy of __RKEntityActionSpecification(v51, type metadata accessor for PhotogrammetrySession.InputSource);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v33);
LABEL_9:
    v39 = v55;
    outlined init with take of BindableDataInternal(&v52, v55 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession);
    return v39;
  }
  v25 = *v23;
  v26 = v24;
  v27 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v24, v48);
  v28 = v50;
  v29 = v44;
  outlined init with copy of __RKEntityActionSpecification(v50, v44, type metadata accessor for PhotogrammetrySession.Configuration);
  swift_retain();
  v30 = v49;
  v31 = specialized PhotogrammetrySessionImpl.__allocating_init<A>(id:input:configuration:)((uint64_t)v10, v25, v29);
  if (!v30)
  {
    v40 = v31;
    v53 = type metadata accessor for PhotogrammetrySessionImpl(0);
    v54 = &protocol witness table for PhotogrammetrySessionImpl;
    swift_release();
    *(_QWORD *)&v52 = v40;
    outlined destroy of __RKEntityActionSpecification(v28, type metadata accessor for PhotogrammetrySession.Configuration);
    outlined destroy of __RKEntityActionSpecification(v51, type metadata accessor for PhotogrammetrySession.InputSource);
    goto LABEL_9;
  }
  swift_release();
  outlined destroy of __RKEntityActionSpecification(v28, type metadata accessor for PhotogrammetrySession.Configuration);
  outlined destroy of __RKEntityActionSpecification(v51, type metadata accessor for PhotogrammetrySession.InputSource);
LABEL_6:
  v39 = v55;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v26, v27);
  type metadata accessor for PhotogrammetrySession(0);
  swift_deallocPartialClassInstance();
  return v39;
}

uint64_t PhotogrammetrySession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession);
  return v0;
}

uint64_t PhotogrammetrySession.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession);
  return swift_deallocClassInstance();
}

__n128 OrientedBoundingBox.orientation.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void OrientedBoundingBox.orientation.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*OrientedBoundingBox.orientation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 OrientedBoundingBox.boundingBox.getter()
{
  __n128 *v0;

  return v0[1];
}

void OrientedBoundingBox.boundingBox.setter(__n128 a1, __n128 a2)
{
  __n128 *v2;

  v2[1] = a1;
  v2[2] = a2;
}

uint64_t (*OrientedBoundingBox.boundingBox.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t OrientedBoundingBox.hash(into:)(uint64_t a1)
{
  __n128 *v1;
  __n128 v4;
  __n128 v5;

  v4 = *v1;
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized SIMD.hash(into:)(a1, (__n128)xmmword_21BE41210);
  specialized SIMD.hash(into:)(a1, v4);
  specialized SIMD.hash(into:)(a1, (__n128)0);
  v5 = v1[2];
  specialized SIMD.hash(into:)(a1, v1[1]);
  return specialized SIMD.hash(into:)(a1, v5);
}

Swift::Int OrientedBoundingBox.hashValue.getter()
{
  __n128 *v0;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  _BYTE v5[72];

  v2 = *v0;
  v3 = v0[1];
  v4 = v0[2];
  Hasher.init(_seed:)();
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized SIMD.hash(into:)(v5, (__n128)xmmword_21BE41210);
  specialized SIMD.hash(into:)(v5, v2);
  specialized SIMD.hash(into:)(v5, (__n128)0);
  specialized SIMD.hash(into:)(v5, v3);
  specialized SIMD.hash(into:)(v5, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OrientedBoundingBox(uint64_t a1)
{
  __n128 *v1;
  __n128 v4;
  __n128 v5;

  v4 = *v1;
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized SIMD.hash(into:)(a1, (__n128)xmmword_21BE41210);
  specialized SIMD.hash(into:)(a1, v4);
  specialized SIMD.hash(into:)(a1, (__n128)0);
  v5 = v1[2];
  specialized SIMD.hash(into:)(a1, v1[1]);
  return specialized SIMD.hash(into:)(a1, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrientedBoundingBox()
{
  __n128 *v0;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  _BYTE v5[72];

  v2 = *v0;
  v3 = v0[1];
  v4 = v0[2];
  Hasher.init(_seed:)();
  if (one-time initialization token for identity != -1)
    swift_once();
  specialized SIMD.hash(into:)(v5, (__n128)xmmword_21BE41210);
  specialized SIMD.hash(into:)(v5, v2);
  specialized SIMD.hash(into:)(v5, (__n128)0);
  specialized SIMD.hash(into:)(v5, v3);
  specialized SIMD.hash(into:)(v5, v4);
  return Hasher._finalize()();
}

uint64_t PhotogrammetrySession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t protocol witness for Identifiable.id.getter in conformance PhotogrammetrySession@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

BOOL specialized static OrientedBoundingBox.== infix(_:_:)(__n128 *a1, __n128 *a2)
{
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  BOOL v8;
  __n128 v9;
  float v10;
  float v11;
  __n128 v13;
  __n128 v14;

  v2 = 0;
  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v7 = *a2;
  v6 = a2[1];
  v8 = 1;
  v9 = a2[2];
  while (1)
  {
    while (!v8)
    {
      if (v2 == 3)
        return 0;
      v8 = 0;
      ++v2;
    }
    v13 = v4;
    v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v14 = v7;
    v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v8 = v10 == v11;
    if (v2 == 3)
      break;
    ++v2;
  }
  if (v10 == v11)
    return specialized static BoundingBox.== infix(_:_:)(v3, v5, v6, v9);
  return 0;
}

void specialized static PhotogrammetrySession.Request.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  _BYTE v11[176];
  uint64_t v12;

  v12 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v12);
  v4 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Request));
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v11[*(int *)(v8 + 48) - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)&v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for PhotogrammetrySession.Request);
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v9, type metadata accessor for PhotogrammetrySession.Request);
  v10 = (char *)sub_21BD876BC + 4 * byte_21BE79A5C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BD876BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  void (*v15)(uint64_t, uint64_t);
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  outlined init with copy of __RKEntityActionSpecification(v0, v4, type metadata accessor for PhotogrammetrySession.Request);
  v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
              + 64);
  v7 = *(_OWORD *)(v4 + v6);
  *(_OWORD *)(v5 - 240) = *(_OWORD *)(v4 + v6 + 16);
  *(_OWORD *)(v5 - 224) = v7;
  *(_OWORD *)(v5 - 256) = *(_OWORD *)(v4 + v6 + 32);
  *(_OWORD *)(v5 - 272) = *(_OWORD *)(v4 + v6 + 48);
  *(_OWORD *)(v5 - 288) = *(_OWORD *)(v4 + v6 + 64);
  *(_OWORD *)(v5 - 304) = *(_OWORD *)(v4 + v6 + 80);
  v8 = *(_BYTE *)(v4 + v6 + 96);
  if (!swift_getEnumCaseMultiPayload())
  {
    v10 = *(_QWORD *)(v3 + v6);
    v11 = *(_QWORD *)(v3 + v6 + 8);
    *(_QWORD *)(v5 - 336) = *(_QWORD *)(v3 + v6 + 16);
    *(_QWORD *)(v5 - 320) = *(_QWORD *)(v3 + v6 + 24);
    *(_QWORD *)(v5 - 328) = *(_QWORD *)(v3 + v6 + 32);
    *(_QWORD *)(v5 - 312) = *(_QWORD *)(v3 + v6 + 40);
    *(_QWORD *)(v5 - 344) = *(_QWORD *)(v3 + v6 + 48);
    *(_QWORD *)(v5 - 368) = *(_QWORD *)(v3 + v6 + 56);
    *(_QWORD *)(v5 - 352) = *(_QWORD *)(v3 + v6 + 64);
    *(_QWORD *)(v5 - 376) = *(_QWORD *)(v3 + v6 + 72);
    *(_QWORD *)(v5 - 360) = *(_QWORD *)(v3 + v6 + 80);
    *(_QWORD *)(v5 - 384) = *(_QWORD *)(v3 + v6 + 88);
    v12 = *(_BYTE *)(v3 + v6 + 96);
    v13 = *(_QWORD *)(v5 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v3, v13);
    v14 = MEMORY[0x220768234](v4, v2);
    v15 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v15(v4, v13);
    v15(v2, v13);
    if ((v14 & 1) != 0)
    {
      if ((v8 & 1) != 0)
      {
        if ((v12 & 1) == 0)
          goto LABEL_11;
      }
      else
      {
        if ((v12 & 1) != 0)
          goto LABEL_11;
        v16.n128_u64[0] = v10;
        v16.n128_u64[1] = v11;
        v17.n128_u64[0] = *(_QWORD *)(v5 - 336);
        v17.n128_u64[1] = *(_QWORD *)(v5 - 320);
        v18.n128_u64[0] = *(_QWORD *)(v5 - 328);
        v18.n128_u64[1] = *(_QWORD *)(v5 - 312);
        if ((specialized static Transform.== infix(_:_:)(*(__n128 *)(v5 - 224), *(__n128 *)(v5 - 240), *(__n128 *)(v5 - 256), v16, v17, v18) & 1) == 0)goto LABEL_11;
        v19 = *(_OWORD *)(v5 - 288);
        *(_OWORD *)(v5 - 144) = *(_OWORD *)(v5 - 272);
        *(_OWORD *)(v5 - 128) = v19;
        *(_OWORD *)(v5 - 112) = *(_OWORD *)(v5 - 304);
        v20 = *(_QWORD *)(v5 - 368);
        *(_QWORD *)(v5 - 192) = *(_QWORD *)(v5 - 344);
        *(_QWORD *)(v5 - 184) = v20;
        v21 = *(_QWORD *)(v5 - 376);
        *(_QWORD *)(v5 - 176) = *(_QWORD *)(v5 - 352);
        *(_QWORD *)(v5 - 168) = v21;
        v22 = *(_QWORD *)(v5 - 384);
        *(_QWORD *)(v5 - 160) = *(_QWORD *)(v5 - 360);
        *(_QWORD *)(v5 - 152) = v22;
        if (!specialized static OrientedBoundingBox.== infix(_:_:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 192)))
          goto LABEL_11;
      }
      outlined destroy of __RKEntityActionSpecification(v0, type metadata accessor for PhotogrammetrySession.Request);
      return 1;
    }
LABEL_11:
    outlined destroy of __RKEntityActionSpecification(v0, type metadata accessor for PhotogrammetrySession.Request);
    return 0;
  }
  (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v4, *(_QWORD *)(v5 - 208));
  outlined destroy of BodyTrackingComponent?(v0, &demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Request));
  return 0;
}

uint64_t specialized static PhotogrammetrySession.Configuration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  char v26;
  void (*v27)(char *, uint64_t);
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v30 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v30 - v18;
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    goto LABEL_12;
  v20 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  v32 = v4;
  v21 = v20;
  outlined init with copy of URL?((uint64_t)&a1[*(int *)(v20 + 28)], (uint64_t)v19);
  v31 = v21;
  v22 = *(int *)(v21 + 28);
  v23 = v32;
  outlined init with copy of URL?((uint64_t)&a2[v22], (uint64_t)v16);
  v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of URL?((uint64_t)v19, (uint64_t)v10);
  v33 = v24;
  outlined init with copy of URL?((uint64_t)v16, v24);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v25((uint64_t)v10, 1, v23) != 1)
  {
    outlined init with copy of URL?((uint64_t)v10, (uint64_t)v13);
    if (v25(v33, 1, v23) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v33, v23);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v7, v23);
      outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
      v27(v13, v23);
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
      if ((v26 & 1) != 0)
        goto LABEL_11;
LABEL_12:
      v28 = 0;
      return v28 & 1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v23);
LABEL_9:
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (URL?, URL?));
    goto LABEL_12;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
  if (v25(v33, 1, v23) != 1)
    goto LABEL_9;
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
LABEL_11:
  v28 = a1[*(int *)(v31 + 32)] ^ a2[*(int *)(v31 + 32)] ^ 1;
  return v28 & 1;
}

uint64_t specialized PhotogrammetrySessionImpl.__allocating_init<A>(id:input:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76[2];
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;

  v88 = a1;
  v89 = a2;
  v87 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v84 = (char *)v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x24BDAC7A8](v85);
  v7 = (char *)v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v76 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t)v76 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v76 - v18;
  v20 = a3;
  v21 = v86;
  specialized static PhotogrammetrySessionImpl.verifyFreeStorageForSequenceInputOrThrow(configuration:)(a3);
  v86 = v21;
  if (v21)
  {
    outlined destroy of __RKEntityActionSpecification(a3, type metadata accessor for PhotogrammetrySession.Configuration);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v88, v87);
    return v13;
  }
  v83 = v4;
  v81 = v13;
  v77 = v7;
  v78 = v10;
  v76[0] = (uint64_t)v16;
  v76[1] = v14;
  outlined init with copy of URL?(a3 + *(int *)(v85 + 28), (uint64_t)v19);
  v22 = type metadata accessor for URL();
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v19, 1, v22);
  outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
  if (v23 == 1)
  {
    if (one-time initialization token for logger == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  v24 = type metadata accessor for Logger();
  v79 = __swift_project_value_buffer(v24, (uint64_t)logger);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.info.getter();
  v27 = os_log_type_enabled(v25, v26);
  v28 = v86;
  v29 = v81;
  if (v27)
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_21B9AA000, v25, v26, "Creating internal photogrammetry session from photogrammetry samples...", v30, 2u);
    MEMORY[0x220772F44](v30, -1, -1);
  }

  v31 = type metadata accessor for PhotogrammetrySession.Configuration();
  v80 = v76;
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 64);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v76 - v34;
  outlined init with copy of __RKEntityActionSpecification(v20, v29, type metadata accessor for PhotogrammetrySession.Configuration);
  v82 = v20;
  v36 = v89;
  swift_retain();
  PhotogrammetrySession.Configuration.init(_:)(v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SequenceBox<LazyMapSequence<AnySequence<PhotogrammetrySample>, PhotogrammetrySample>>);
  v37 = (_QWORD *)swift_allocObject();
  v37[2] = v36;
  v37[3] = closure #1 in PhotogrammetrySessionImpl.init<A>(id:input:configuration:);
  v37[4] = 0;
  v38 = MEMORY[0x24BDAC7A8](v37);
  (*(void (**)(char *, char *, uint64_t, __n128))(v32 + 16))((char *)v76 - v34, (char *)v76 - v34, v31, v38);
  type metadata accessor for PhotogrammetrySession();
  swift_allocObject();
  swift_retain();
  v39 = PhotogrammetrySession.init(photogrammetrySamples:configuration:)();
  if (!v28)
  {
    v41 = v39;
    v42 = (uint64_t)v84;
    v43 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v84, v88, v87);
    v44 = v82;
    v45 = (uint64_t)v78;
    outlined init with copy of __RKEntityActionSpecification(v82, (uint64_t)v78, type metadata accessor for PhotogrammetrySession.Configuration);
    type metadata accessor for PhotogrammetrySessionImpl(0);
    swift_allocObject();
    v13 = PhotogrammetrySessionImpl.init(id:using:configuration:)(v42, v41, v45);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v31);
    swift_release();
    swift_retain();
    PhotogrammetrySessionImpl.logAnalyticsEvents(sourceType:)(1);
    swift_release();
    outlined destroy of __RKEntityActionSpecification(v44, type metadata accessor for PhotogrammetrySession.Configuration);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v88, v43);
    return v13;
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))((char *)v76 - v34, v31);
  swift_release();
  v40 = v87;
  v92 = v28;
  v46 = type metadata accessor for PhotogrammetrySession.Error();
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v49 = (char *)v76 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    v51 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v49, v46);
    v52 = v51;
    if (MEMORY[0x24BE1EC10] && (_DWORD)v51 == *MEMORY[0x24BE1EC10])
    {

      v53 = (uint64_t)v77;
      outlined init with copy of __RKEntityActionSpecification(v82, (uint64_t)v77, type metadata accessor for PhotogrammetrySession.Configuration);
      v13 = Logger.logObject.getter();
      v54 = static os_log_type_t.error.getter();
      v55 = v54;
      if (os_log_type_enabled((os_log_t)v13, v54))
      {
        v56 = swift_slowAlloc();
        LODWORD(v86) = v55;
        v57 = v56;
        v58 = swift_slowAlloc();
        v87 = v58;
        *(_DWORD *)v57 = 141558274;
        v90 = 1752392040;
        v91 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 12) = 2080;
        v84 = (char *)(v57 + 14);
        outlined init with copy of URL?(v53 + *(int *)(v85 + 28), v76[0]);
        v59 = String.init<A>(describing:)();
        v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v77, type metadata accessor for PhotogrammetrySession.Configuration);
        _os_log_impl(&dword_21B9AA000, (os_log_t)v13, (os_log_type_t)v86, "Internal photogrammetry session init for photogrammetry samples failed for checkpointDirectory = %{mask.hash}s", (uint8_t *)v57, 0x16u);
        v61 = v87;
        swift_arrayDestroy();
        MEMORY[0x220772F44](v61, -1, -1);
        MEMORY[0x220772F44](v57, -1, -1);
      }
      else
      {
        outlined destroy of __RKEntityActionSpecification(v53, type metadata accessor for PhotogrammetrySession.Configuration);
      }

LABEL_27:
      lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error();
      swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 104))(v74, v52, v46);
      swift_willThrow();
      outlined destroy of __RKEntityActionSpecification(v82, type metadata accessor for PhotogrammetrySession.Configuration);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v88, v40);

      return v13;
    }
    if (MEMORY[0x24BE1EC00] && (_DWORD)v51 == *MEMORY[0x24BE1EC00])
    {

      v62 = Logger.logObject.getter();
      v63 = static os_log_type_t.error.getter();
      v13 = v63;
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v64 = 0;
        _os_log_impl(&dword_21B9AA000, v62, (os_log_type_t)v13, "Internal photogrammetry session init for photogrammetry samples failed!", v64, 2u);
        MEMORY[0x220772F44](v64, -1, -1);
      }

      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
  }

  v65 = v28;
  v66 = v28;
  v67 = Logger.logObject.getter();
  v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = (uint8_t *)swift_slowAlloc();
    v70 = (void *)swift_slowAlloc();
    v92 = v70;
    *(_DWORD *)v69 = 136446210;
    swift_getErrorValue();
    v71 = Error.localizedDescription.getter();
    v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&v92);
    v40 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21B9AA000, v67, v68, "Internal photogrammetry session init for photogrammetry samples failed with %{public}s", v69, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v70, -1, -1);
    MEMORY[0x220772F44](v69, -1, -1);
  }
  else
  {

  }
  v73 = v88;
  v13 = v83;
  swift_willThrow();
  outlined destroy of __RKEntityActionSpecification(v82, type metadata accessor for PhotogrammetrySession.Configuration);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v73, v40);
  return v13;
}

uint64_t type metadata accessor for PhotogrammetrySession.Error(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Error);
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PhotogrammetrySession.Request(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Request);
}

uint64_t type metadata accessor for PhotogrammetrySession.Output(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Output);
}

uint64_t outlined init with take of PhotogrammetrySession.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PhotogrammetrySession.Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PhotogrammetrySession.Result(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Result);
}

void partial apply for closure #1 in PhotogrammetrySessionImpl.process(requests:)()
{
  uint64_t v0;
  Swift::OpaquePointer v1;

  v1._rawValue = *(void **)(v0 + 24);
  closure #1 in PhotogrammetrySessionImpl.process(requests:)(*(_QWORD *)(v0 + 16), v1);
}

uint64_t partial apply for closure #1 in PhotogrammetrySessionImpl.cancel()()
{
  uint64_t v0;

  return closure #1 in PhotogrammetrySessionImpl.cancel()(v0);
}

uint64_t sub_21BD88840()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

uint64_t base witness table accessor for Error in PhotogrammetrySession.Error()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, type metadata accessor for PhotogrammetrySession.Error, (uint64_t)&protocol conformance descriptor for PhotogrammetrySession.Error);
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Configuration.SampleOrdering and conformance PhotogrammetrySession.Configuration.SampleOrdering()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.SampleOrdering and conformance PhotogrammetrySession.Configuration.SampleOrdering;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.SampleOrdering and conformance PhotogrammetrySession.Configuration.SampleOrdering)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhotogrammetrySession.Configuration.SampleOrdering, &type metadata for PhotogrammetrySession.Configuration.SampleOrdering);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.SampleOrdering and conformance PhotogrammetrySession.Configuration.SampleOrdering);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Configuration.FeatureSensitivity and conformance PhotogrammetrySession.Configuration.FeatureSensitivity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.FeatureSensitivity and conformance PhotogrammetrySession.Configuration.FeatureSensitivity;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.FeatureSensitivity and conformance PhotogrammetrySession.Configuration.FeatureSensitivity)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhotogrammetrySession.Configuration.FeatureSensitivity, &type metadata for PhotogrammetrySession.Configuration.FeatureSensitivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.FeatureSensitivity and conformance PhotogrammetrySession.Configuration.FeatureSensitivity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Request.Detail and conformance PhotogrammetrySession.Request.Detail()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Detail and conformance PhotogrammetrySession.Request.Detail;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Detail and conformance PhotogrammetrySession.Request.Detail)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhotogrammetrySession.Request.Detail, &type metadata for PhotogrammetrySession.Request.Detail);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Detail and conformance PhotogrammetrySession.Request.Detail);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Request.Geometry and conformance PhotogrammetrySession.Request.Geometry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Geometry and conformance PhotogrammetrySession.Request.Geometry;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Geometry and conformance PhotogrammetrySession.Request.Geometry)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhotogrammetrySession.Request.Geometry, &type metadata for PhotogrammetrySession.Request.Geometry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Geometry and conformance PhotogrammetrySession.Request.Geometry);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PhotogrammetrySession.Request()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type PhotogrammetrySession.Request and conformance PhotogrammetrySession.Request, type metadata accessor for PhotogrammetrySession.Request, (uint64_t)&protocol conformance descriptor for PhotogrammetrySession.Request);
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Output.ProcessingStage and conformance PhotogrammetrySession.Output.ProcessingStage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhotogrammetrySession.Output.ProcessingStage and conformance PhotogrammetrySession.Output.ProcessingStage;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Output.ProcessingStage and conformance PhotogrammetrySession.Output.ProcessingStage)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhotogrammetrySession.Output.ProcessingStage, &type metadata for PhotogrammetrySession.Output.ProcessingStage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Output.ProcessingStage and conformance PhotogrammetrySession.Output.ProcessingStage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Outputs.Iterator and conformance PhotogrammetrySession.Outputs.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhotogrammetrySession.Outputs.Iterator and conformance PhotogrammetrySession.Outputs.Iterator;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Outputs.Iterator and conformance PhotogrammetrySession.Outputs.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhotogrammetrySession.Outputs.Iterator, &type metadata for PhotogrammetrySession.Outputs.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Outputs.Iterator and conformance PhotogrammetrySession.Outputs.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OrientedBoundingBox and conformance OrientedBoundingBox()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OrientedBoundingBox and conformance OrientedBoundingBox;
  if (!lazy protocol witness table cache variable for type OrientedBoundingBox and conformance OrientedBoundingBox)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for OrientedBoundingBox, &type metadata for OrientedBoundingBox);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrientedBoundingBox and conformance OrientedBoundingBox);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PhotogrammetrySession()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

__n128 sub_21BD88AE4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

__n128 sub_21BD88AF8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  a2[3] = *(_OWORD *)a1;
  a2[4] = v3;
  a2[5] = v4;
  return result;
}

uint64_t sub_21BD88B0C@<X0>(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;

  simd_matrix4x4(a1[3]);
  result = REAABBTransform();
  *a2 = v4;
  a2[1] = v5;
  return result;
}

__n128 sub_21BD88B6C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 48) = xmmword_21BE41250;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t ObjC metadata update function for PhotogrammetrySession()
{
  return type metadata accessor for PhotogrammetrySession(0);
}

uint64_t type metadata completion function for PhotogrammetrySession()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PhotogrammetrySession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PhotogrammetrySession.process(requests:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

{
  return MEMORY[0x24BE1ED80]();
}

uint64_t dispatch thunk of PhotogrammetrySession.cancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

{
  return MEMORY[0x24BE1ED00]();
}

uint64_t dispatch thunk of PhotogrammetrySession.activeRequests.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PhotogrammetrySession.isProcessing.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PhotogrammetrySession.configuration.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PhotogrammetrySession.outputs.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Limits()
{
  return &type metadata for PhotogrammetrySession.Limits;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySession.Error(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    v3 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for PhotogrammetrySession.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for PhotogrammetrySession.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Error);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for PhotogrammetrySession.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PhotogrammetrySession.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Error);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.Error()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Configuration(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    a1[2] = *((_BYTE *)a2 + 2);
    v7 = *(int *)(a3 + 28);
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t destroy for PhotogrammetrySession.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

_BYTE *initializeWithCopy for PhotogrammetrySession.Configuration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 28);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  a1[*(int *)(a3 + 32)] = a2[*(int *)(a3 + 32)];
  return a1;
}

_BYTE *assignWithCopy for PhotogrammetrySession.Configuration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 28);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  a1[*(int *)(a3 + 32)] = a2[*(int *)(a3 + 32)];
  return a1;
}

_BYTE *initializeWithTake for PhotogrammetrySession.Configuration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 28);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  a1[*(int *)(a3 + 32)] = a2[*(int *)(a3 + 32)];
  return a1;
}

_BYTE *assignWithTake for PhotogrammetrySession.Configuration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 28);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  a1[*(int *)(a3 + 32)] = a2[*(int *)(a3 + 32)];
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySession.Configuration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD89724(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySession.Configuration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_21BD897B0(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for PhotogrammetrySession.Configuration()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for URL?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
  }
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Configuration.SampleOrdering()
{
  return &type metadata for PhotogrammetrySession.Configuration.SampleOrdering;
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySession.Configuration.SampleOrdering(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD89950 + 4 * byte_21BE79A66[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD89984 + 4 * byte_21BE79A61[v4]))();
}

uint64_t sub_21BD89984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD8998C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD89994);
  return result;
}

uint64_t sub_21BD899A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD899A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD899AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD899B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Configuration.FeatureSensitivity()
{
  return &type metadata for PhotogrammetrySession.Configuration.FeatureSensitivity;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Request(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *((_OWORD *)v11 + 5);
    *((_OWORD *)v10 + 4) = *((_OWORD *)v11 + 4);
    *((_OWORD *)v10 + 5) = v12;
    v10[96] = v11[96];
    v13 = *((_OWORD *)v11 + 1);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v13;
    v14 = *((_OWORD *)v11 + 3);
    *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
    *((_OWORD *)v10 + 3) = v14;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySession.Request(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

char *initializeWithCopy for PhotogrammetrySession.Request(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = *((_OWORD *)v9 + 5);
    *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
    *((_OWORD *)v8 + 5) = v10;
    v8[96] = v9[96];
    v11 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v11;
    v12 = *((_OWORD *)v9 + 3);
    *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
    *((_OWORD *)v8 + 3) = v12;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for PhotogrammetrySession.Request(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Request);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = *((_OWORD *)v9 + 3);
      v11 = *((_OWORD *)v9 + 4);
      v12 = *((_OWORD *)v9 + 5);
      v8[96] = v9[96];
      *((_OWORD *)v8 + 4) = v11;
      *((_OWORD *)v8 + 5) = v12;
      *((_OWORD *)v8 + 3) = v10;
      v14 = *((_OWORD *)v9 + 1);
      v13 = *((_OWORD *)v9 + 2);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v14;
      *((_OWORD *)v8 + 2) = v13;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for PhotogrammetrySession.Request(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = *((_OWORD *)v9 + 5);
    *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
    *((_OWORD *)v8 + 5) = v10;
    v8[96] = v9[96];
    v11 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v11;
    v12 = *((_OWORD *)v9 + 3);
    *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
    *((_OWORD *)v8 + 3) = v12;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for PhotogrammetrySession.Request(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Request);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = *((_OWORD *)v9 + 5);
      *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
      *((_OWORD *)v8 + 5) = v10;
      v8[96] = v9[96];
      v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      v12 = *((_OWORD *)v9 + 3);
      *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
      *((_OWORD *)v8 + 3) = v12;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.Request()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[4] = v2;
    v2[5] = "a";
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySession.Request.Detail(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BD89F08 + 4 * byte_21BE79A6B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BD89F28 + 4 * byte_21BE79A70[v4]))();
}

_BYTE *sub_21BD89F08(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BD89F28(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD89F30(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD89F38(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BD89F40(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BD89F48(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Request.Detail()
{
  return &type metadata for PhotogrammetrySession.Request.Detail;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Request.Geometry()
{
  return &type metadata for PhotogrammetrySession.Request.Geometry;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySession.Result(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = type metadata accessor for URL();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 1:
      result = swift_release();
      break;
    case 3:
      goto LABEL_5;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for PhotogrammetrySession.Result(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_7;
    case 1u:
      *a1 = *a2;
      swift_retain();
      goto LABEL_7;
    case 3u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for PhotogrammetrySession.Result(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Result);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_8;
      case 1u:
        *a1 = *a2;
        swift_retain();
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *assignWithTake for PhotogrammetrySession.Result(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Result);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.Result()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Pose()
{
  return &type metadata for PhotogrammetrySession.Pose;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Poses()
{
  return &type metadata for PhotogrammetrySession.Poses;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.PointCloud()
{
  return &type metadata for PhotogrammetrySession.PointCloud;
}

__n128 __swift_memcpy20_16(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.PointCloud.Point()
{
  return &type metadata for PhotogrammetrySession.PointCloud.Point;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Output(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        }
        else
        {
          v13 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
          v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v15 = (char *)a1 + v14;
          v16 = (char *)a2 + v14;
          v17 = *((_OWORD *)v16 + 5);
          *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
          *((_OWORD *)v15 + 5) = v17;
          v15[96] = v16[96];
          v18 = *((_OWORD *)v16 + 1);
          *(_OWORD *)v15 = *(_OWORD *)v16;
          *((_OWORD *)v15 + 1) = v18;
          v19 = *((_OWORD *)v16 + 3);
          *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
          *((_OWORD *)v15 + 3) = v19;
          swift_storeEnumTagMultiPayload();
        }
        v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                     + 48);
        v21 = *(void **)((char *)a2 + v20);
        v22 = v21;
        *(uint64_t *)((char *)a1 + v20) = (uint64_t)v21;
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v10 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        }
        else
        {
          v23 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
          v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v25 = (char *)a1 + v24;
          v26 = (char *)a2 + v24;
          v27 = *((_OWORD *)v26 + 5);
          *((_OWORD *)v25 + 4) = *((_OWORD *)v26 + 4);
          *((_OWORD *)v25 + 5) = v27;
          v25[96] = v26[96];
          v28 = *((_OWORD *)v26 + 1);
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_OWORD *)v25 + 1) = v28;
          v29 = *((_OWORD *)v26 + 3);
          *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
          *((_OWORD *)v25 + 3) = v29;
          swift_storeEnumTagMultiPayload();
        }
        v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                     + 48);
        v31 = (uint64_t *)((char *)a1 + v30);
        v32 = (uint64_t *)((char *)a2 + v30);
        v33 = type metadata accessor for PhotogrammetrySession.Result(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            v34 = type metadata accessor for URL();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
            goto LABEL_28;
          case 1u:
            *v31 = *v32;
            swift_retain();
            goto LABEL_28;
          case 3u:
            *v31 = *v32;
            swift_bridgeObjectRetain();
            goto LABEL_28;
          case 4u:
            v53 = v32[1];
            *v31 = *v32;
            v31[1] = v53;
            v31[2] = v32[2];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_28:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
            break;
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v11 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          v35 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a1, a2, v35);
          v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v37 = (char *)a1 + v36;
          v38 = (char *)a2 + v36;
          v39 = *((_OWORD *)v38 + 5);
          *((_OWORD *)v37 + 4) = *((_OWORD *)v38 + 4);
          *((_OWORD *)v37 + 5) = v39;
          v37[96] = v38[96];
          v40 = *((_OWORD *)v38 + 1);
          *(_OWORD *)v37 = *(_OWORD *)v38;
          *((_OWORD *)v37 + 1) = v40;
          v41 = *((_OWORD *)v38 + 3);
          *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
          *((_OWORD *)v37 + 3) = v41;
          swift_storeEnumTagMultiPayload();
        }
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
        *(uint64_t *)((char *)a1 + *(int *)(v42 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v42 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v12 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
          v43 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(a1, a2, v43);
          v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v45 = (char *)a1 + v44;
          v46 = (char *)a2 + v44;
          v47 = *((_OWORD *)v46 + 5);
          *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
          *((_OWORD *)v45 + 5) = v47;
          v45[96] = v46[96];
          v48 = *((_OWORD *)v46 + 1);
          *(_OWORD *)v45 = *(_OWORD *)v46;
          *((_OWORD *)v45 + 1) = v48;
          v49 = *((_OWORD *)v46 + 3);
          *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
          *((_OWORD *)v45 + 3) = v49;
          swift_storeEnumTagMultiPayload();
        }
        v50 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                     + 48);
        v51 = (char *)a1 + v50;
        v52 = (char *)a2 + v50;
        *(_QWORD *)v51 = *(_QWORD *)v52;
        *((_WORD *)v51 + 4) = *((_WORD *)v52 + 4);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for PhotogrammetrySession.Output(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        v4 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      }
      objc_release(*(id *)(a1
                         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                                  + 48)));
      break;
    case 1u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        v2 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      }
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                   + 48);
      type metadata accessor for PhotogrammetrySession.Result(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          swift_release();
          break;
        case 3u:
          goto LABEL_13;
        case 4u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_13;
        default:
          return;
      }
      break;
    case 2u:
    case 5u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
LABEL_7:
        v3 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      }
      break;
    case 3u:
LABEL_13:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

_QWORD *initializeWithCopy for PhotogrammetrySession.Output(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v10 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = *((_OWORD *)v13 + 5);
        *((_OWORD *)v12 + 4) = *((_OWORD *)v13 + 4);
        *((_OWORD *)v12 + 5) = v14;
        v12[96] = v13[96];
        v15 = *((_OWORD *)v13 + 1);
        *(_OWORD *)v12 = *(_OWORD *)v13;
        *((_OWORD *)v12 + 1) = v15;
        v16 = *((_OWORD *)v13 + 3);
        *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
        *((_OWORD *)v12 + 3) = v16;
        swift_storeEnumTagMultiPayload();
      }
      v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                   + 48);
      v18 = *(void **)((char *)a2 + v17);
      v19 = v18;
      *(_QWORD *)((char *)a1 + v17) = v18;
      goto LABEL_26;
    case 1u:
      v7 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v20 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
        v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        v22 = (char *)a1 + v21;
        v23 = (char *)a2 + v21;
        v24 = *((_OWORD *)v23 + 5);
        *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
        *((_OWORD *)v22 + 5) = v24;
        v22[96] = v23[96];
        v25 = *((_OWORD *)v23 + 1);
        *(_OWORD *)v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v25;
        v26 = *((_OWORD *)v23 + 3);
        *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
        *((_OWORD *)v22 + 3) = v26;
        swift_storeEnumTagMultiPayload();
      }
      v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                   + 48);
      v28 = (_QWORD *)((char *)a1 + v27);
      v29 = (_QWORD *)((char *)a2 + v27);
      v30 = type metadata accessor for PhotogrammetrySession.Result(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v31 = type metadata accessor for URL();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
          goto LABEL_25;
        case 1u:
          *v28 = *v29;
          swift_retain();
          goto LABEL_25;
        case 3u:
          *v28 = *v29;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 4u:
          v50 = v29[1];
          *v28 = *v29;
          v28[1] = v50;
          v28[2] = v29[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_25:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
          break;
      }
      goto LABEL_26;
    case 2u:
      v8 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v32 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(a1, a2, v32);
        v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        v36 = *((_OWORD *)v35 + 5);
        *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
        *((_OWORD *)v34 + 5) = v36;
        v34[96] = v35[96];
        v37 = *((_OWORD *)v35 + 1);
        *(_OWORD *)v34 = *(_OWORD *)v35;
        *((_OWORD *)v34 + 1) = v37;
        v38 = *((_OWORD *)v35 + 3);
        *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
        *((_OWORD *)v34 + 3) = v38;
        swift_storeEnumTagMultiPayload();
      }
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
      *(_QWORD *)((char *)a1 + *(int *)(v39 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v39 + 48));
      goto LABEL_26;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      goto LABEL_26;
    case 5u:
      v9 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v40 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(a1, a2, v40);
        v41 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        v42 = (char *)a1 + v41;
        v43 = (char *)a2 + v41;
        v44 = *((_OWORD *)v43 + 5);
        *((_OWORD *)v42 + 4) = *((_OWORD *)v43 + 4);
        *((_OWORD *)v42 + 5) = v44;
        v42[96] = v43[96];
        v45 = *((_OWORD *)v43 + 1);
        *(_OWORD *)v42 = *(_OWORD *)v43;
        *((_OWORD *)v42 + 1) = v45;
        v46 = *((_OWORD *)v43 + 3);
        *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
        *((_OWORD *)v42 + 3) = v46;
        swift_storeEnumTagMultiPayload();
      }
      v47 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                   + 48);
      v48 = (char *)a1 + v47;
      v49 = (char *)a2 + v47;
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_WORD *)v48 + 4) = *((_WORD *)v49 + 4);
LABEL_26:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for PhotogrammetrySession.Output(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int16 v58;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Output);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        }
        else
        {
          v10 = type metadata accessor for URL();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
          v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v12 = (char *)a1 + v11;
          v13 = (char *)a2 + v11;
          v14 = *((_OWORD *)v13 + 3);
          v15 = *((_OWORD *)v13 + 4);
          v16 = *((_OWORD *)v13 + 5);
          v12[96] = v13[96];
          *((_OWORD *)v12 + 4) = v15;
          *((_OWORD *)v12 + 5) = v16;
          *((_OWORD *)v12 + 3) = v14;
          v18 = *((_OWORD *)v13 + 1);
          v17 = *((_OWORD *)v13 + 2);
          *(_OWORD *)v12 = *(_OWORD *)v13;
          *((_OWORD *)v12 + 1) = v18;
          *((_OWORD *)v12 + 2) = v17;
          swift_storeEnumTagMultiPayload();
        }
        v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                     + 48);
        v20 = *(void **)((char *)a2 + v19);
        v21 = v20;
        *(_QWORD *)((char *)a1 + v19) = v20;
        goto LABEL_27;
      case 1u:
        v7 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        }
        else
        {
          v22 = type metadata accessor for URL();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
          v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v24 = (char *)a1 + v23;
          v25 = (char *)a2 + v23;
          v26 = *((_OWORD *)v25 + 3);
          v27 = *((_OWORD *)v25 + 4);
          v28 = *((_OWORD *)v25 + 5);
          v24[96] = v25[96];
          *((_OWORD *)v24 + 4) = v27;
          *((_OWORD *)v24 + 5) = v28;
          *((_OWORD *)v24 + 3) = v26;
          v30 = *((_OWORD *)v25 + 1);
          v29 = *((_OWORD *)v25 + 2);
          *(_OWORD *)v24 = *(_OWORD *)v25;
          *((_OWORD *)v24 + 1) = v30;
          *((_OWORD *)v24 + 2) = v29;
          swift_storeEnumTagMultiPayload();
        }
        v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                     + 48);
        v32 = (_QWORD *)((char *)a1 + v31);
        v33 = (_QWORD *)((char *)a2 + v31);
        v34 = type metadata accessor for PhotogrammetrySession.Result(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            v35 = type metadata accessor for URL();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
            goto LABEL_26;
          case 1u:
            *v32 = *v33;
            swift_retain();
            goto LABEL_26;
          case 3u:
            *v32 = *v33;
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 4u:
            *v32 = *v33;
            v32[1] = v33[1];
            v32[2] = v33[2];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_26:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
            break;
        }
        goto LABEL_27;
      case 2u:
        v8 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          v36 = type metadata accessor for URL();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(a1, a2, v36);
          v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v38 = (char *)a1 + v37;
          v39 = (char *)a2 + v37;
          v40 = *((_OWORD *)v39 + 3);
          v41 = *((_OWORD *)v39 + 4);
          v42 = *((_OWORD *)v39 + 5);
          v38[96] = v39[96];
          *((_OWORD *)v38 + 4) = v41;
          *((_OWORD *)v38 + 5) = v42;
          *((_OWORD *)v38 + 3) = v40;
          v44 = *((_OWORD *)v39 + 1);
          v43 = *((_OWORD *)v39 + 2);
          *(_OWORD *)v38 = *(_OWORD *)v39;
          *((_OWORD *)v38 + 1) = v44;
          *((_OWORD *)v38 + 2) = v43;
          swift_storeEnumTagMultiPayload();
        }
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
        *(_QWORD *)((char *)a1 + *(int *)(v45 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v45 + 48));
        goto LABEL_27;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_27;
      case 5u:
        v9 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          v46 = type metadata accessor for URL();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(a1, a2, v46);
          v47 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v48 = (char *)a1 + v47;
          v49 = (char *)a2 + v47;
          v50 = *((_OWORD *)v49 + 3);
          v51 = *((_OWORD *)v49 + 4);
          v52 = *((_OWORD *)v49 + 5);
          v48[96] = v49[96];
          *((_OWORD *)v48 + 4) = v51;
          *((_OWORD *)v48 + 5) = v52;
          *((_OWORD *)v48 + 3) = v50;
          v54 = *((_OWORD *)v49 + 1);
          v53 = *((_OWORD *)v49 + 2);
          *(_OWORD *)v48 = *(_OWORD *)v49;
          *((_OWORD *)v48 + 1) = v54;
          *((_OWORD *)v48 + 2) = v53;
          swift_storeEnumTagMultiPayload();
        }
        v55 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                     + 48);
        v56 = (char *)a1 + v55;
        v57 = (char *)a2 + v55;
        v58 = *((_WORD *)v57 + 4);
        *(_QWORD *)v56 = *(_QWORD *)v57;
        *((_WORD *)v56 + 4) = v58;
LABEL_27:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for PhotogrammetrySession.Output(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        v12 = &a1[v11];
        v13 = &a2[v11];
        v14 = *((_OWORD *)v13 + 5);
        *((_OWORD *)v12 + 4) = *((_OWORD *)v13 + 4);
        *((_OWORD *)v12 + 5) = v14;
        v12[96] = v13[96];
        v15 = *((_OWORD *)v13 + 1);
        *(_OWORD *)v12 = *(_OWORD *)v13;
        *((_OWORD *)v12 + 1) = v15;
        v16 = *((_OWORD *)v13 + 3);
        *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
        *((_OWORD *)v12 + 3) = v16;
        swift_storeEnumTagMultiPayload();
      }
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error));
      *(_QWORD *)&a1[*(int *)(v17 + 48)] = *(_QWORD *)&a2[*(int *)(v17 + 48)];
      goto LABEL_21;
    case 1u:
      v7 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v18 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
        v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        v20 = &a1[v19];
        v21 = &a2[v19];
        v22 = *((_OWORD *)v21 + 5);
        *((_OWORD *)v20 + 4) = *((_OWORD *)v21 + 4);
        *((_OWORD *)v20 + 5) = v22;
        v20[96] = v21[96];
        v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)v20 = *(_OWORD *)v21;
        *((_OWORD *)v20 + 1) = v23;
        v24 = *((_OWORD *)v21 + 3);
        *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
        *((_OWORD *)v20 + 3) = v24;
        swift_storeEnumTagMultiPayload();
      }
      v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                   + 48);
      v26 = &a1[v25];
      v27 = &a2[v25];
      v28 = type metadata accessor for PhotogrammetrySession.Result(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v47 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v26, v27, v47);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_21;
    case 2u:
      v8 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v29 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
        v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        v31 = &a1[v30];
        v32 = &a2[v30];
        v33 = *((_OWORD *)v32 + 5);
        *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
        *((_OWORD *)v31 + 5) = v33;
        v31[96] = v32[96];
        v34 = *((_OWORD *)v32 + 1);
        *(_OWORD *)v31 = *(_OWORD *)v32;
        *((_OWORD *)v31 + 1) = v34;
        v35 = *((_OWORD *)v32 + 3);
        *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
        *((_OWORD *)v31 + 3) = v35;
        swift_storeEnumTagMultiPayload();
      }
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
      *(_QWORD *)&a1[*(int *)(v36 + 48)] = *(_QWORD *)&a2[*(int *)(v36 + 48)];
      goto LABEL_21;
    case 5u:
      v9 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v37 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(a1, a2, v37);
        v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        v39 = &a1[v38];
        v40 = &a2[v38];
        v41 = *((_OWORD *)v40 + 5);
        *((_OWORD *)v39 + 4) = *((_OWORD *)v40 + 4);
        *((_OWORD *)v39 + 5) = v41;
        v39[96] = v40[96];
        v42 = *((_OWORD *)v40 + 1);
        *(_OWORD *)v39 = *(_OWORD *)v40;
        *((_OWORD *)v39 + 1) = v42;
        v43 = *((_OWORD *)v40 + 3);
        *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
        *((_OWORD *)v39 + 3) = v43;
        swift_storeEnumTagMultiPayload();
      }
      v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                   + 48);
      v45 = &a1[v44];
      v46 = &a2[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      *((_WORD *)v45 + 4) = *((_WORD *)v46 + 4);
LABEL_21:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for PhotogrammetrySession.Output(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Output);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        }
        else
        {
          v10 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
          v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v12 = &a1[v11];
          v13 = &a2[v11];
          v14 = *((_OWORD *)v13 + 5);
          *((_OWORD *)v12 + 4) = *((_OWORD *)v13 + 4);
          *((_OWORD *)v12 + 5) = v14;
          v12[96] = v13[96];
          v15 = *((_OWORD *)v13 + 1);
          *(_OWORD *)v12 = *(_OWORD *)v13;
          *((_OWORD *)v12 + 1) = v15;
          v16 = *((_OWORD *)v13 + 3);
          *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
          *((_OWORD *)v12 + 3) = v16;
          swift_storeEnumTagMultiPayload();
        }
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error));
        *(_QWORD *)&a1[*(int *)(v17 + 48)] = *(_QWORD *)&a2[*(int *)(v17 + 48)];
        goto LABEL_22;
      case 1u:
        v7 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        }
        else
        {
          v18 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
          v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v20 = &a1[v19];
          v21 = &a2[v19];
          v22 = *((_OWORD *)v21 + 5);
          *((_OWORD *)v20 + 4) = *((_OWORD *)v21 + 4);
          *((_OWORD *)v20 + 5) = v22;
          v20[96] = v21[96];
          v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)v20 = *(_OWORD *)v21;
          *((_OWORD *)v20 + 1) = v23;
          v24 = *((_OWORD *)v21 + 3);
          *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
          *((_OWORD *)v20 + 3) = v24;
          swift_storeEnumTagMultiPayload();
        }
        v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                     + 48);
        v26 = &a1[v25];
        v27 = &a2[v25];
        v28 = type metadata accessor for PhotogrammetrySession.Result(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v47 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v26, v27, v47);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_22;
      case 2u:
        v8 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          v29 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
          v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v31 = &a1[v30];
          v32 = &a2[v30];
          v33 = *((_OWORD *)v32 + 5);
          *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
          *((_OWORD *)v31 + 5) = v33;
          v31[96] = v32[96];
          v34 = *((_OWORD *)v32 + 1);
          *(_OWORD *)v31 = *(_OWORD *)v32;
          *((_OWORD *)v31 + 1) = v34;
          v35 = *((_OWORD *)v32 + 3);
          *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
          *((_OWORD *)v31 + 3) = v35;
          swift_storeEnumTagMultiPayload();
        }
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
        *(_QWORD *)&a1[*(int *)(v36 + 48)] = *(_QWORD *)&a2[*(int *)(v36 + 48)];
        goto LABEL_22;
      case 5u:
        v9 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          v37 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(a1, a2, v37);
          v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          v39 = &a1[v38];
          v40 = &a2[v38];
          v41 = *((_OWORD *)v40 + 5);
          *((_OWORD *)v39 + 4) = *((_OWORD *)v40 + 4);
          *((_OWORD *)v39 + 5) = v41;
          v39[96] = v40[96];
          v42 = *((_OWORD *)v40 + 1);
          *(_OWORD *)v39 = *(_OWORD *)v40;
          *((_OWORD *)v39 + 1) = v42;
          v43 = *((_OWORD *)v40 + 3);
          *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
          *((_OWORD *)v39 + 3) = v43;
          swift_storeEnumTagMultiPayload();
        }
        v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                     + 48);
        v45 = &a1[v44];
        v46 = &a2[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        *((_WORD *)v45 + 4) = *((_WORD *)v46 + 4);
LABEL_22:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.Output()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;

  result = type metadata accessor for PhotogrammetrySession.Request(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v8 = &v7;
    result = type metadata accessor for PhotogrammetrySession.Result(319);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v9 = &v6;
      v3 = MEMORY[0x24BEE0178] + 64;
      swift_getTupleTypeLayout2();
      v10 = &v5;
      v11 = &unk_21BE7A0E0;
      v12 = v3;
      swift_getTupleTypeLayout2();
      v13 = &v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySession.Output.ProgressInfo(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 250);
  if (*(unsigned __int8 *)(a1 + 9) <= 6u)
    v3 = 6;
  else
    v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 - 7;
  if (*(unsigned __int8 *)(a1 + 9) < 6u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySession.Output.ProgressInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Output.ProgressInfo()
{
  return &type metadata for PhotogrammetrySession.Output.ProgressInfo;
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySession.Output.ProcessingStage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21BD8BF90 + 4 * byte_21BE79AC6[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21BD8BFC4 + 4 * byte_21BE79AC1[v4]))();
}

uint64_t sub_21BD8BFC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD8BFCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD8BFD4);
  return result;
}

uint64_t sub_21BD8BFE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD8BFE8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21BD8BFEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD8BFF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Output.ProcessingStage()
{
  return &type metadata for PhotogrammetrySession.Output.ProcessingStage;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Outputs()
{
  return &type metadata for PhotogrammetrySession.Outputs;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Outputs.Iterator()
{
  return &type metadata for PhotogrammetrySession.Outputs.Iterator;
}

ValueMetadata *type metadata accessor for OrientedBoundingBox()
{
  return &type metadata for OrientedBoundingBox;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.InputSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySession.InputSource(uint64_t a1)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() == 1)
    return swift_release();
  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *initializeWithCopy for PhotogrammetrySession.InputSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_retain();
  }
  else
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for PhotogrammetrySession.InputSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.InputSource);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      v4 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PhotogrammetrySession.InputSource(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for PhotogrammetrySession.InputSource);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.InputSource()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ShaderGraphMaterial.parameterNames.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  swift_beginAccess();
  v0 = REMaterialAssetCopyShaderGraphParameterNames();
  if (!v0)
    return MEMORY[0x24BEE4AF8];
  v1 = (void *)v0;
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void ShaderGraphMaterial.getParameter(name:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char IsVisibleShaderGraphParameter;
  Swift::String v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  _OWORD v32[4];
  unsigned __int8 v33;
  _OWORD v34[4];
  unsigned __int8 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  _QWORD v45[5];

  v8 = *v3;
  v7 = v3[1];
  v9 = *((_BYTE *)v3 + 16);
  v10 = v3[3];
  v11 = (void *)v3[4];
  v31 = v3[5];
  v29 = *((_BYTE *)v3 + 49);
  v30 = *((_BYTE *)v3 + 48);
  v28 = v3[7];
  v27 = *((_BYTE *)v3 + 64);
  swift_beginAccess();
  v12 = (void *)MEMORY[0x220768C3C](a1, a2);
  IsVisibleShaderGraphParameter = REMaterialAssetIsVisibleShaderGraphParameter();

  if ((IsVisibleShaderGraphParameter & 1) == 0)
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
LABEL_9:
    v26 = -1;
    goto LABEL_10;
  }
  v36 = 3027236;
  v37 = 0xE300000000000000;
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  v45[3] = &type metadata for ShaderGraphMaterial;
  v45[4] = &protocol witness table for ShaderGraphMaterial;
  v15 = swift_allocObject();
  v45[0] = v15;
  *(_QWORD *)(v15 + 16) = v8;
  *(_QWORD *)(v15 + 24) = v7;
  *(_BYTE *)(v15 + 32) = v9;
  *(_QWORD *)(v15 + 40) = v10;
  *(_QWORD *)(v15 + 48) = v11;
  *(_QWORD *)(v15 + 56) = v31;
  *(_BYTE *)(v15 + 64) = v30;
  *(_BYTE *)(v15 + 65) = v29;
  *(_QWORD *)(v15 + 72) = v28;
  *(_BYTE *)(v15 + 80) = v27;
  __swift_project_boxed_opaque_existential_1(v45, (uint64_t)&type metadata for ShaderGraphMaterial);
  swift_bridgeObjectRetain();
  v16 = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  Material.subscript.getter(3027236, 0xE300000000000000, (uint64_t)&type metadata for ShaderGraphMaterial, (uint64_t)v34);
  if (v35 == 255)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MaterialParameters((uint64_t)v45);
    v18 = 0;
    v17 = 0;
    v20 = 0;
    v19 = 0;
    v22 = 0;
    v21 = 0;
    v24 = 0;
    v23 = 0;
    goto LABEL_8;
  }
  v32[0] = v34[0];
  v32[1] = v34[1];
  v32[2] = v34[2];
  v32[3] = v34[3];
  v33 = v35;
  MaterialParameters.Value.init(_:)((uint64_t)v32);
  swift_bridgeObjectRelease();
  v18 = (void *)v36;
  v17 = v37;
  v20 = v38;
  v19 = v39;
  v22 = v40;
  v21 = v41;
  v24 = v42;
  v23 = v43;
  v25 = v44;
  outlined destroy of MaterialParameters((uint64_t)v45);
  if (v25 == 255)
  {
LABEL_8:
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v17;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v19;
    *(_QWORD *)(a3 + 32) = v22;
    *(_QWORD *)(a3 + 40) = v21;
    *(_QWORD *)(a3 + 48) = v24;
    *(_QWORD *)(a3 + 56) = v23;
    goto LABEL_9;
  }
  if (v25)
  {
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v17;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v19;
    *(_QWORD *)(a3 + 32) = v22;
    *(_QWORD *)(a3 + 40) = v21;
    *(_QWORD *)(a3 + 48) = v24;
    *(_QWORD *)(a3 + 56) = v23;
    *(_BYTE *)(a3 + 64) = v25;
    return;
  }
  swift_retain();
  outlined consume of MaterialParameters.Value?(v18, v17, v20, v19, v22, v21, v24, v23, 0);
  *(_QWORD *)a3 = v17;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  v26 = 1;
LABEL_10:
  *(_BYTE *)(a3 + 64) = v26;
}

void ShaderGraphMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40) == 1;
}

unint64_t specialized Collection.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

void ShaderGraphMaterial.faceCulling.getter(char *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(v1 + 64) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 56) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 56);
  }
  *a1 = v2;
}

uint64_t sub_21BD8C72C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

BOOL static ShaderGraphMaterial.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ShaderGraphMaterial.Error.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ShaderGraphMaterial.Error.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ShaderGraphMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t ShaderGraphMaterial.__resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*ShaderGraphMaterial.__resource.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ShaderGraphMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t ShaderGraphMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*ShaderGraphMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static ShaderGraphMaterial.parameterHandle(name:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  String.append(_:)(*(Swift::String *)&a1);
  type metadata accessor for MaterialParameters.Handle.SharedHandle();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 36) = 1;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v5 = RESerializedMaterialParameterHandleCreate();
  result = swift_release();
  *(_QWORD *)(v4 + 16) = v5;
  *a2 = v4;
  return result;
}

void ShaderGraphMaterial.setParameter(handle:value:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int ParameterTypeWithHandle;
  void *v24;
  void *Key;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  char v42;
  uint64_t KeyUnownedCString;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;

  v4 = v3;
  v5 = v2;
  v6 = *a1;
  v7 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v87 = *(_QWORD *)(a2 + 24);
  v68 = *(_QWORD *)(a2 + 40);
  v69 = *(_QWORD *)(a2 + 32);
  v66 = *(_QWORD *)(a2 + 56);
  v67 = *(_QWORD *)(a2 + 48);
  v65 = *(_BYTE *)(a2 + 64);
  v10 = *(_QWORD *)(v6 + 24);
  v11 = *(void **)v5;
  v12 = (_QWORD *)(*(_QWORD *)v5 + 16);
  swift_beginAccess();
  if (!v10 || *v12 != v10)
  {
    v13 = *(_QWORD *)(v5 + 8);
    v14 = *(_BYTE *)(v5 + 16);
    v15 = *(_OWORD *)(v5 + 24);
    v16 = *(_QWORD *)(v5 + 40);
    v17 = *(_BYTE *)(v5 + 48);
    v18 = *(_BYTE *)(v5 + 49);
    v19 = *(_QWORD *)(v5 + 56);
    v20 = *(_BYTE *)(v5 + 64);
    v79 = v11;
    v80 = v13;
    LOBYTE(v81) = v14;
    v82 = v15;
    v83 = v16;
    LOBYTE(v84) = v17;
    BYTE1(v84) = v18;
    v85 = v19;
    v86 = v20;
    v70 = (void *)v6;
    if ((ShaderGraphMaterial.isVisibleHandle(_:)() & 1) == 0)
    {
      lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
      swift_allocError();
      *v40 = 1;
      swift_willThrow();
      return;
    }
    *(_QWORD *)(v6 + 24) = *v12;
  }
  v79 = v7;
  v80 = v8;
  v64 = v9;
  v81 = v9;
  *(_QWORD *)&v82 = v87;
  *((_QWORD *)&v82 + 1) = v69;
  v83 = v68;
  v84 = v67;
  v85 = v66;
  v86 = v65;
  v21 = MaterialParameters.Value.getMaterialParameterType()();
  v22 = v21;
  if ((*(_BYTE *)(v6 + 36) & 1) != 0 || *(_DWORD *)(v6 + 32) != (_DWORD)v21)
  {
    ParameterTypeWithHandle = REMaterialAssetGetParameterTypeWithHandle();
    ShaderGraphMaterial.validateParameterType(providedType:typeInEngine:)(v22, ParameterTypeWithHandle);
    if (v3)
      return;
    *(_DWORD *)(v6 + 32) = v22;
    *(_BYTE *)(v6 + 36) = 0;
  }
  if ((_DWORD)v22 == 1)
  {
    v58 = *(_BYTE *)(v5 + 16);
    v24 = *(void **)(v5 + 32);
    v61 = *(_QWORD *)(v5 + 24);
    v63 = *(_QWORD *)(v5 + 8);
    v52 = *(_QWORD *)(v5 + 40);
    v50 = *(_BYTE *)(v5 + 48);
    v48 = *(_BYTE *)(v5 + 49);
    v46 = *(_QWORD *)(v5 + 56);
    v45 = *(_BYTE *)(v5 + 64);
    swift_bridgeObjectRetain();
    v59 = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    Key = (void *)RESerializedMaterialParameterHandleGetKey();
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v27;

    v29 = String.index(_:offsetBy:)();
    v30 = specialized Collection.subscript.getter(v29, v26, v28);
    v32 = v31;
    v54 = v8;
    v56 = v7;
    v34 = v33;
    v36 = v35;
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x220768CFC](v30, v32, v34, v36);
    v38 = v37;
    swift_bridgeObjectRelease();
    v79 = v11;
    v80 = v63;
    LOBYTE(v81) = v58;
    *(_QWORD *)&v82 = v61;
    *((_QWORD *)&v82 + 1) = v59;
    v83 = v52;
    LOBYTE(v84) = v50;
    BYTE1(v84) = v48;
    v85 = v46;
    v86 = v45;
    v7 = v56;
    v70 = v56;
    v71 = v54;
    v8 = v54;
    v39 = v64;
    v72 = v64;
    v73 = v87;
    v74 = v69;
    v75 = v68;
    v76 = v67;
    v77 = v66;
    v78 = v65;
    ShaderGraphMaterial.validateTextureParameterType(keyName:value:)(v44, v38, (uint64_t)&v70);
    if (v4)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = v64;
  }
  v70 = v7;
  v71 = v8;
  v72 = v39;
  v73 = v87;
  v74 = v69;
  v75 = v68;
  v76 = v67;
  v77 = v66;
  v78 = v65;
  __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v70, (uint64_t)&v79);
  v60 = v80;
  v62 = v79;
  v55 = v82;
  v57 = v81;
  v49 = v83;
  v41 = v85;
  v51 = v84;
  v53 = *((_QWORD *)&v82 + 1);
  v42 = v86;
  v47 = v86;
  outlined copy of MaterialParameters.Value(v7, v8, v39, v87, v69, v68, v67, v66, v65);
  KeyUnownedCString = RESerializedMaterialParameterHandleGetKeyUnownedCString();
  v70 = v62;
  v71 = v60;
  v72 = v57;
  v73 = v55;
  v74 = v53;
  v75 = v49;
  v76 = v51;
  v77 = v41;
  v78 = v42;
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(KeyUnownedCString, (uint64_t)&v70);
  outlined consume of __RKMaterialParameterBlock.Parameter(v62, v60, v57, v55, v53, v49, v51, v41, v47);
}

uint64_t ShaderGraphMaterial.isVisibleHandle(_:)()
{
  void *Key;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t IsVisibleShaderGraphParameter;
  _QWORD v15[4];
  _QWORD v16[4];

  Key = (void *)RESerializedMaterialParameterHandleGetKey();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  v16[0] = 46;
  v16[1] = 0xE100000000000000;
  v15[2] = v16;
  v4 = (_QWORD *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v15, v1, v3);
  if (v4[2] == 2)
  {
    v5 = v4[8];
    v6 = v4[9];
    v7 = v4[10];
    v8 = v4[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x220768CFC](v5, v6, v7, v8);
    v11 = v10;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v12 = (void *)MEMORY[0x220768C3C](v9, v11);
    IsVisibleShaderGraphParameter = REMaterialAssetIsVisibleShaderGraphParameter();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return IsVisibleShaderGraphParameter;
}

uint64_t ShaderGraphMaterial.validateParameterType(providedType:typeInEngine:)(uint64_t result, int a2)
{
  char v2;
  char *v3;

  if (!a2)
  {
    v2 = 1;
LABEL_13:
    lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
    swift_allocError();
    *v3 = v2;
    return swift_willThrow();
  }
  if (a2 != (_DWORD)result
    && (a2 != 5 || (_DWORD)result != 4)
    && ((_DWORD)result != 5 || a2 != 4)
    && (a2 != 20 || (_DWORD)result != 19))
  {
    v2 = 0;
    if ((_DWORD)result != 20 || a2 != 19)
      goto LABEL_13;
  }
  return result;
}

void ShaderGraphMaterial.getParameter(handle:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  void *Key;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v26;
  char v27;
  uint64_t v28;
  _OWORD v29[4];
  unsigned __int8 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;

  v3 = *a1;
  v4 = *v2;
  v28 = v2[1];
  v27 = *((_BYTE *)v2 + 16);
  v5 = v2[3];
  v26 = (void *)v2[4];
  v6 = v2[5];
  v7 = *((_BYTE *)v2 + 48);
  v8 = *((_BYTE *)v2 + 49);
  v9 = v2[7];
  v10 = *((_BYTE *)v2 + 64);
  v11 = *(_QWORD *)(*a1 + 24);
  v12 = (_QWORD *)(v4 + 16);
  swift_beginAccess();
  if (!v11 || *v12 != v11)
  {
    *(_QWORD *)&v31 = v4;
    *((_QWORD *)&v31 + 1) = v28;
    LOBYTE(v32) = v27;
    *((_QWORD *)&v32 + 1) = v5;
    *(_QWORD *)&v33 = v26;
    *((_QWORD *)&v33 + 1) = v6;
    LOBYTE(v34) = v7;
    BYTE1(v34) = v8;
    *((_QWORD *)&v34 + 1) = v9;
    v35 = v10;
    *(_QWORD *)&v29[0] = v3;
    if ((ShaderGraphMaterial.isVisibleHandle(_:)() & 1) == 0)
    {
      v24 = a2;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      v19 = -1;
      goto LABEL_12;
    }
    *(_QWORD *)(v3 + 24) = *v12;
  }
  swift_bridgeObjectRetain();
  v13 = v26;
  swift_bridgeObjectRetain();
  Key = (void *)RESerializedMaterialParameterHandleGetKey();
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v13;
  specialized String.withCString<A>(_:)(v15, v17, v18, (uint64_t)&v31);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v35;
  if (v35 == 255)
  {
    v24 = a2;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    v29[0] = v31;
    v29[1] = v32;
    v29[2] = v33;
    v29[3] = v34;
    v30 = v35;
    MaterialParameters.Value.init(_:)((uint64_t)v29);
    v20 = v31;
    v21 = v32;
    v22 = v33;
    v23 = v34;
    v19 = v35;
    if (v35 == 255 || v35)
    {
      v24 = a2;
      *(_QWORD *)a2 = v31;
      *(_QWORD *)(a2 + 8) = *((_QWORD *)&v20 + 1);
      *(_OWORD *)(a2 + 16) = v21;
      *(_OWORD *)(a2 + 32) = v22;
      *(_OWORD *)(a2 + 48) = v23;
    }
    else
    {
      swift_retain();
      outlined consume of MaterialParameters.Value?((void *)v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), 0);
      v24 = a2;
      *(_QWORD *)a2 = *((_QWORD *)&v20 + 1);
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      v19 = 1;
    }
  }
LABEL_12:
  *(_BYTE *)(v24 + 64) = v19;
}

uint64_t ShaderGraphMaterial.setParameter(name:value:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  char IsVisibleShaderGraphParameter;
  Swift::String v13;
  int ParameterType;
  uint64_t v15;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  Swift::String v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  Swift::String v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v41 = *(_QWORD *)(a3 + 8);
  v42 = *(void **)a3;
  v39 = *(_QWORD *)(a3 + 24);
  v40 = *(_QWORD *)(a3 + 16);
  v59 = *(_QWORD *)(a3 + 32);
  v44 = *(_QWORD *)(a3 + 48);
  v45 = *(_QWORD *)(a3 + 40);
  v43 = *(_QWORD *)(a3 + 56);
  v38 = *(_BYTE *)(a3 + 64);
  v7 = *(_QWORD *)v3;
  v6 = *(void **)(v3 + 8);
  v9 = *(_QWORD *)(v3 + 24);
  v8 = *(void **)(v3 + 32);
  v32 = *(_QWORD *)(v3 + 40);
  v27 = *(_BYTE *)(v3 + 16);
  v28 = *(_BYTE *)(v3 + 48);
  v29 = *(_BYTE *)(v3 + 49);
  v30 = *(_QWORD *)(v3 + 56);
  v26 = *(_BYTE *)(v3 + 64);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v10 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  v36 = a1;
  v11 = (void *)MEMORY[0x220768C3C](a1, a2);
  IsVisibleShaderGraphParameter = REMaterialAssetIsVisibleShaderGraphParameter();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  if ((IsVisibleShaderGraphParameter & 1) != 0)
  {
    v53._countAndFlagsBits = 3027236;
    v53._object = (void *)0xE300000000000000;
    v13._countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
    String.utf8CString.getter();
    ParameterType = REMaterialAssetGetParameterType();
    swift_release();
    v47._countAndFlagsBits = (uint64_t)v42;
    v47._object = (void *)v41;
    *(_QWORD *)&v48 = v40;
    *((_QWORD *)&v48 + 1) = v39;
    *(_QWORD *)&v49 = v59;
    *((_QWORD *)&v49 + 1) = v45;
    v50 = v44;
    v51 = v43;
    v52 = v38;
    v15 = MaterialParameters.Value.getMaterialParameterType()();
    ShaderGraphMaterial.validateParameterType(providedType:typeInEngine:)(v15, ParameterType);
    if (v35)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      v34 = v53;
      v18 = (uint64_t)v42;
      if (ParameterType == 1)
      {
        v53._countAndFlagsBits = v7;
        v53._object = v6;
        LOBYTE(v54) = v27;
        v19 = v9;
        *((_QWORD *)&v54 + 1) = v9;
        *(_QWORD *)&v55 = v10;
        *((_QWORD *)&v55 + 1) = v32;
        LOBYTE(v56) = v28;
        BYTE1(v56) = v29;
        v57 = v30;
        v58 = v26;
        v47._countAndFlagsBits = (uint64_t)v42;
        v47._object = (void *)v41;
        *(_QWORD *)&v48 = v40;
        *((_QWORD *)&v48 + 1) = v39;
        *(_QWORD *)&v49 = v59;
        *((_QWORD *)&v49 + 1) = v45;
        v50 = v44;
        v51 = v43;
        v52 = v38;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20 = v10;
        ShaderGraphMaterial.validateTextureParameterType(keyName:value:)(v36, (uint64_t)a2, (uint64_t)&v47);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v18 = (uint64_t)v42;
        v9 = v19;
      }
      v46[3] = &type metadata for ShaderGraphMaterial;
      v46[4] = &protocol witness table for ShaderGraphMaterial;
      v21 = swift_allocObject();
      v46[0] = v21;
      *(_QWORD *)(v21 + 16) = v7;
      *(_QWORD *)(v21 + 24) = v6;
      *(_BYTE *)(v21 + 32) = v27;
      *(_QWORD *)(v21 + 40) = v9;
      *(_QWORD *)(v21 + 48) = v10;
      *(_QWORD *)(v21 + 56) = v32;
      *(_BYTE *)(v21 + 64) = v28;
      *(_BYTE *)(v21 + 65) = v29;
      *(_QWORD *)(v21 + 72) = v30;
      *(_BYTE *)(v21 + 80) = v26;
      v47._countAndFlagsBits = v18;
      v47._object = (void *)v41;
      *(_QWORD *)&v48 = v40;
      *((_QWORD *)&v48 + 1) = v39;
      *(_QWORD *)&v49 = v59;
      *((_QWORD *)&v49 + 1) = v45;
      v50 = v44;
      v51 = v43;
      v52 = v38;
      __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v47, (uint64_t)&v53);
      v37 = v53;
      v31 = v55;
      v33 = v54;
      v23 = v56;
      v22 = v57;
      v24 = v58;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v46, (uint64_t)&type metadata for ShaderGraphMaterial);
      v47 = v37;
      v48 = v33;
      v49 = v31;
      v50 = v23;
      v51 = v22;
      v52 = v24;
      outlined copy of MaterialParameters.Value(v42, v41, v40, v39, v59, v45, v44, v43, v38);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = v10;
      Material.subscript.setter((uint64_t)&v47, v34._countAndFlagsBits, (uint64_t)v34._object, (uint64_t)&type metadata for ShaderGraphMaterial, (uint64_t)&protocol witness table for ShaderGraphMaterial);
      return specialized Material.parameters.setter(v46);
    }
  }
  else
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
    swift_allocError();
    *v17 = 1;
    return swift_willThrow();
  }
}

void ShaderGraphMaterial.validateTextureParameterType(keyName:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int TextureParameterType;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(void **)a3;
  v3 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a3 + 40);
  v13 = *(_QWORD *)(a3 + 48);
  v14 = *(_QWORD *)(a3 + 56);
  v7 = *(unsigned __int8 *)(a3 + 64);
  swift_beginAccess();
  String.utf8CString.getter();
  TextureParameterType = REMaterialAssetGetTextureParameterType();
  swift_release();
  if (TextureParameterType)
  {
    if (v7 == 1)
    {
      swift_retain();
      if (RETextureAssetGetTextureType())
      {
        lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
        swift_allocError();
        *v9 = 0;
        swift_willThrow();
      }
      outlined consume of MaterialParameters.Value(v4, v3, v6, v5, v11, v12, v13, v14, 1);
    }
  }
  else
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
    swift_allocError();
    *v10 = 0;
    swift_willThrow();
  }
}

uint64_t ShaderGraphMaterial.__triangleFillMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ShaderGraphMaterial.__triangleFillMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*ShaderGraphMaterial.__triangleFillMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *ShaderGraphMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = *result;
  return result;
}

unsigned __int8 *(*ShaderGraphMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_QWORD *)(v1 + 40) == 1;
  return PortalMaterial.triangleFillMode.modify;
}

uint64_t (*ShaderGraphMaterial.__writesDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*ShaderGraphMaterial.__readsDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ShaderGraphMaterial.__faceCullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t ShaderGraphMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*ShaderGraphMaterial.__faceCullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance ShaderGraphMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance ShaderGraphMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance ShaderGraphMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance ShaderGraphMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance ShaderGraphMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance ShaderGraphMaterial(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

unsigned __int8 *ShaderGraphMaterial.faceCulling.setter(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned int v2;
  _BOOL4 v3;

  v2 = *result;
  v3 = v2 > 1;
  *(_QWORD *)(v1 + 56) = v3 ^ (v2 != 0);
  *(_BYTE *)(v1 + 64) = v3;
  return result;
}

uint64_t *(*ShaderGraphMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  v2 = 2;
  if ((*(_BYTE *)(v1 + 64) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 56) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 56);
  }
  *(_BYTE *)(a1 + 8) = v2;
  return ShaderGraphMaterial.faceCulling.modify;
}

uint64_t *ShaderGraphMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;

  v1 = *result;
  v2 = *((unsigned __int8 *)result + 8);
  v3 = v2 == 1;
  v4 = v2 > 1;
  v5 = v3;
  *(_QWORD *)(v1 + 56) = v5;
  *(_BYTE *)(v1 + 64) = v4;
  return result;
}

uint64_t ShaderGraphMaterial.writesDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ShaderGraphMaterial.writesDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

_BYTE *(*ShaderGraphMaterial.writesDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 48);
  return OrbitEntityAction.orientToPath.modify;
}

uint64_t ShaderGraphMaterial.readsDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t ShaderGraphMaterial.readsDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

_BYTE *(*ShaderGraphMaterial.readsDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 49);
  return ShaderGraphMaterial.readsDepth.modify;
}

_BYTE *ShaderGraphMaterial.readsDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 49) = result[8];
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error;
  if (!lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShaderGraphMaterial.Error, &type metadata for ShaderGraphMaterial.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error;
  if (!lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShaderGraphMaterial.Error, &type metadata for ShaderGraphMaterial.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error);
  }
  return result;
}

uint64_t sub_21BD8DB14@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 40) == 1;
  return result;
}

unsigned __int8 *sub_21BD8DB28(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 40) = *result;
  return result;
}

uint64_t sub_21BD8DB34@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(result + 64) & 1) == 0)
  {
    if (*(_QWORD *)(result + 56) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(result + 56);
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_21BD8DB54(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return ShaderGraphMaterial.faceCulling.setter(&v2);
}

uint64_t sub_21BD8DB88@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 48);
  return result;
}

_BYTE *sub_21BD8DB94(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 48) = *result;
  return result;
}

uint64_t sub_21BD8DBA0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 49);
  return result;
}

_BYTE *sub_21BD8DBAC(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 49) = *result;
  return result;
}

uint64_t initializeWithCopy for ShaderGraphMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for ShaderGraphMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v7 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  return a1;
}

uint64_t assignWithTake for ShaderGraphMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderGraphMaterial(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderGraphMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderGraphMaterial()
{
  return &type metadata for ShaderGraphMaterial;
}

uint64_t storeEnumTagSinglePayload for ShaderGraphMaterial.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD8DE64 + 4 * byte_21BE7A255[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD8DE98 + 4 * asc_21BE7A250[v4]))();
}

uint64_t sub_21BD8DE98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD8DEA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD8DEA8);
  return result;
}

uint64_t sub_21BD8DEB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD8DEBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD8DEC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD8DEC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShaderGraphMaterial.Error()
{
  return &type metadata for ShaderGraphMaterial.Error;
}

uint64_t Scene.physicsOrigin.getter()
{
  uint64_t v0;
  uint64_t Entity;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  REPhysicsOriginComponentGetComponentType();
  RESceneGetComponentsOfClass();
  if (v0 < 1)
    return 0;
  Entity = REComponentGetEntity();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      v3 = (*(uint64_t (**)(void))(v5 + 232))();
      v6 = *(_QWORD *)(v3 + 16);
      swift_retain();
      MEMORY[0x22076D160](v6, 0);
      *(_QWORD *)(v3 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v3);
      swift_release();
      return v3;
    }
    return makeEntity(for:)(Entity);
  }
  __break(1u);
  return result;
}

uint64_t Scene.physicsOrigin.setter(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  REPhysicsOriginComponentGetComponentType();
  result = RESceneGetComponentsOfClass();
  if (v3 >= 1)
  {
    do
    {
      REComponentGetEntity();
      REPhysicsOriginComponentGetComponentType();
      REEntityRemoveComponentByClass();
      REPhysicsOriginComponentGetComponentType();
      result = RESceneGetComponentsOfClass();
    }
    while (v4 > 0);
  }
  if (a1)
  {
    swift_retain();
    REPhysicsOriginComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    return swift_release_n();
  }
  return result;
}

uint64_t (*Scene.physicsOrigin.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = Scene.physicsOrigin.getter();
  return Scene.physicsOrigin.modify;
}

uint64_t Scene.physicsOrigin.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return Scene.physicsOrigin.setter(*a1);
  v2 = swift_retain();
  Scene.physicsOrigin.setter(v2);
  return swift_release();
}

uint64_t sub_21BD8E100@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Scene.physicsOrigin.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BD8E128()
{
  uint64_t v0;

  v0 = swift_retain();
  return Scene.physicsOrigin.setter(v0);
}

uint64_t @objc ecsNetSyncWriteSnapshot(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  return specialized ecsNetSyncWriteSnapshot(_:_:_:_:_:)(a3, a4) & 1;
}

uint64_t @objc ecsNetSyncReadSnapshot(_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, _BYTE *a5, uint64_t a6)
{
  return specialized ecsNetSyncReadSnapshot(_:_:_:_:_:_:)(a3, a4, a5, a6) & 1;
}

uint64_t NetPassthroughEncoder.encode<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  swift_retain();
  v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v4 = v3;
  result = swift_release();
  if (!v1)
  {
    v6 = *(_QWORD *)(v0 + 24);
    v7 = *(_QWORD *)(v0 + 32);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v4;
    return outlined consume of Data._Representation(v6, v7);
  }
  return result;
}

uint64_t type metadata accessor for NetPassthroughEncoder()
{
  return objc_opt_self();
}

uint64_t NetPassthroughDecoder.decode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a1;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 32);
  swift_retain();
  outlined copy of Data._Representation(v8, v9);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v3)
  {
    outlined consume of Data._Representation(v8, v9);
    return swift_release();
  }
  else
  {
    v11 = v13;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v13, a2);
    outlined consume of Data._Representation(v8, v9);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11, v7, a2);
  }
}

uint64_t NetPassthroughEncoder.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NetPassthroughDecoder()
{
  return objc_opt_self();
}

uint64_t specialized ecsNetSyncWriteSnapshot(_:_:_:_:_:)(uint64_t a1, Swift::UInt a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12[2];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[6];

  v16[5] = *MEMORY[0x24BDAC8D0];
  result = RECustomComponentGetObject();
  if (result)
  {
    v4 = result;
    if (one-time initialization token for handlesToCustomComponentTypes != -1)
      swift_once();
    swift_beginAccess();
    v5 = static SceneManager.handlesToCustomComponentTypes;
    if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
      && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v7 & 1) != 0))
    {
      v11 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
      swift_endAccess();
      v8 = *(void (**)(uint64_t))(*((_QWORD *)&v11 + 1) + 32);
      v15 = v11;
      __swift_allocate_boxed_opaque_existential_1(&v14);
      v8(v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Encodable);
      if (swift_dynamicCast())
      {
        outlined init with take of BindableDataInternal(v12, (uint64_t)v16);
        v9 = type metadata accessor for NetPassthroughEncoder();
        v10 = swift_allocObject();
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        *(_QWORD *)(v10 + 16) = JSONEncoder.init()();
        *(_OWORD *)(v10 + 24) = xmmword_21BE7A3B0;
        __swift_project_boxed_opaque_existential_1(v16, v16[3]);
        *(_QWORD *)&v15 = v9;
        *((_QWORD *)&v15 + 1) = &protocol witness table for NetPassthroughEncoder;
        v14 = v10;
        swift_retain();
        __swift_project_boxed_opaque_existential_1(&v14, v9);
        NetPassthroughEncoder.encode<A>(_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
        __asm { BR              X10 }
      }
      v13 = 0;
      memset(v12, 0, sizeof(v12));
      outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for Encodable?);
    }
    else
    {
      swift_endAccess();
    }
    return 0;
  }
  return result;
}

uint64_t specialized ecsNetSyncReadSnapshot(_:_:_:_:_:_:)(uint64_t a1, Swift::UInt a2, _BYTE *a3, uint64_t a4)
{
  uint64_t Object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23[2];
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  _BYTE v27[24];
  uint64_t v28;

  Object = RECustomComponentGetObject();
  if (!Object)
    return 0;
  v8 = Object;
  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  swift_beginAccess();
  v9 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v11 & 1) == 0))
  {
    swift_endAccess();
    return 0;
  }
  v22 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
  swift_endAccess();
  v12 = *(void (**)(uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v22 + 1) + 32);
  v26 = v22;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  v12(v8, v22, *((_QWORD *)&v22 + 1));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable);
  if (!swift_dynamicCast())
  {
    v24 = 0;
    memset(v23, 0, sizeof(v23));
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for Decodable?);
    return 0;
  }
  outlined init with take of BindableDataInternal(v23, (uint64_t)v27);
  v13 = specialized Data.init(bytes:count:)(a3, a4);
  v15 = v14;
  v16 = type metadata accessor for NetPassthroughDecoder();
  v17 = (_QWORD *)swift_allocObject();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v17[2] = JSONDecoder.init()();
  v17[3] = v13;
  v17[4] = v15;
  *(_QWORD *)&v26 = v16;
  *((_QWORD *)&v26 + 1) = &protocol witness table for NetPassthroughDecoder;
  v25 = v17;
  v18 = v28;
  v19 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
  swift_retain();
  __swift_project_boxed_opaque_existential_1(&v25, v16);
  NetPassthroughDecoder.decode<A>(_:)(v19, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)&v25);
  swift_dynamicCast();
  v21 = 1;
  (*(void (**)(__int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v22 + 1) + 40))(v23, v8, 0, 1, v22, *((_QWORD *)&v22 + 1));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return v21;
}

CGColorRef HasPointLight.light.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  CGColorRef result;
  float v4;
  int v5;
  int v6;
  CGColor *v7;
  int v8;
  int v9;
  float v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v11);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v7);
  swift_release();
  result = v7;
  if (v7)
  {
    v4 = v10;
    v6 = v8;
    v5 = v9;
  }
  else
  {
    result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v4 = 2.0;
    v5 = 1092616192;
    v6 = 1188210565;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  *(float *)(a1 + 16) = v4;
  return result;
}

uint64_t key path setter for HasPointLight.light : <A>A(uint64_t a1)
{
  int v1;
  id v2;
  void *v4[2];
  int v5;

  v1 = *(_DWORD *)(a1 + 16);
  v4[0] = *(void **)a1;
  v4[1] = *(void **)(a1 + 8);
  v5 = v1;
  v2 = v4[0];
  return HasPointLight.light.setter(v4);
}

uint64_t HasPointLight.light.setter(void **a1)
{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v2 = *a1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);

  swift_release();
  return v3(v5, 0);
}

void (*HasPointLight.light.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  HasPointLight.light.getter((uint64_t)v7);
  return HasPointLight.light.modify;
}

void HasPointLight.light.modify(void ***a1, char a2)
{
  id *v2;
  void *v3;
  int v4;
  int v5;
  int v6;
  id v7;
  void *v8;
  int v9;
  int v10;
  int v11;

  v2 = *a1;
  v3 = **a1;
  v5 = *((_DWORD *)*a1 + 2);
  v4 = *((_DWORD *)*a1 + 3);
  v6 = *((_DWORD *)*a1 + 4);
  v8 = v3;
  v9 = v5;
  v10 = v4;
  v11 = v6;
  if ((a2 & 1) != 0)
  {
    v7 = v3;
    HasPointLight.light.setter(&v8);

  }
  else
  {
    HasPointLight.light.setter(&v8);
  }
  free(v2);
}

float sub_21BD8EFA0@<S0>(uint64_t a1@<X8>)
{
  float result;
  _QWORD v3[2];
  float v4;

  HasPointLight.light.getter((uint64_t)v3);
  result = v4;
  *(_QWORD *)a1 = v3[0];
  *(_QWORD *)(a1 + 8) = v3[1];
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t sub_21BD8EFEC()
{
  return 16;
}

__n128 sub_21BD8EFF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t AudioUnitResource.audioComponentDescription.getter()
{
  uint64_t v1;

  REAudioGeneratorAssetGetComponentDescription();
  return v1;
}

uint64_t AudioUnitResource.__allocating_init(audioComponentDescription:layoutTag:)(unint64_t a1, unint64_t a2, int a3)
{
  int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v5 = a1;
  v6 = HIDWORD(a1);
  v7 = HIDWORD(a2);
  swift_allocObject();
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)&v14);
  v9 = v18;
  v10 = v19;
  __swift_project_boxed_opaque_existential_1(&v14, v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  v14 = __PAIR64__(v6, v5);
  v15 = v4;
  v16 = v7;
  v17 = a3;
  v11 = REAudioGeneratorAssetCreate();
  v12 = AudioResource.init(fromCore:)(v11);
  swift_retain();
  REAudioGeneratorAssetSetLayoutTag();
  RERelease();
  swift_release();
  return v12;
}

uint64_t AudioUnitResource.init(audioComponentDescription:layoutTag:)(unint64_t a1, unint64_t a2, int a3)
{
  int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v5 = a1;
  v6 = HIDWORD(a1);
  v7 = HIDWORD(a2);
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)&v14);
  v9 = v18;
  v10 = v19;
  __swift_project_boxed_opaque_existential_1(&v14, v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  v14 = __PAIR64__(v6, v5);
  v15 = v4;
  v16 = v7;
  v17 = a3;
  v11 = REAudioGeneratorAssetCreate();
  v12 = AudioResource.init(fromCore:)(v11);
  swift_retain();
  REAudioGeneratorAssetSetLayoutTag();
  RERelease();
  swift_release();
  return v12;
}

uint64_t AudioUnitResource.__allocating_init(fromCore:)(uint64_t a1)
{
  swift_allocObject();
  return AudioResource.init(fromCore:)(a1);
}

uint64_t AudioUnitResource.__deallocating_deinit()
{
  AudioResource.deinit();
  return swift_deallocClassInstance();
}

double sub_21BD8F2C0@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  int v4;

  REAudioGeneratorAssetGetComponentDescription();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_21BD8F304()
{
  return REAudioGeneratorAssetSetComponentDescription();
}

uint64_t type metadata accessor for AudioUnitResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudioUnitResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioUnitResource.audioComponentDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of AudioUnitResource.__allocating_init(audioComponentDescription:layoutTag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v6 & 1) != 0)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
        swift_retain();
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  v3 = __CocoaDictionary.lookup(_:)();
  swift_release();
  if (!v3)
    return 0;
  type metadata accessor for RESceneDescriptor();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v4 = v8;
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized __REAssetService.getDependenciesRecursively(asset:result:visited:includingSelf:)(uint64_t a1, _QWORD *a2, uint64_t *a3, char a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = specialized Set.contains(_:)(a1, *a3);
  if ((result & 1) == 0)
  {
    swift_retain();
    specialized Set._Variant.insert(_:)(&v14, a1);
    swift_release();
    v9 = __REAssetManager.__getDependencies(asset:)();
    if (v9 >> 62)
    {
      v10 = _CocoaArrayWrapper.endIndex.getter();
      if (!v10)
        goto LABEL_11;
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v10)
        goto LABEL_11;
    }
    if (v10 < 1)
    {
      __break(1u);
LABEL_16:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_13:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      return specialized Array._endMutation()();
    }
    for (i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v12 = MEMORY[0x220769770](i, v9);
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 8 * i + 32);
        swift_retain();
      }
      specialized __REAssetService.getDependenciesRecursively(asset:result:visited:includingSelf:)(v12, a2, a3, 1);
      swift_release();
    }
LABEL_11:
    result = swift_bridgeObjectRelease();
    if ((a4 & 1) == 0)
      return result;
    v13 = swift_retain();
    MEMORY[0x220768F0C](v13);
    if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_13;
    goto LABEL_16;
  }
  return result;
}

uint64_t __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[1];
  if ((unint64_t)(v1 - 2) < 3)
    return 0x534F6E6F69736976;
  if (!v1)
    return 5459817;
  if (v1 == 1)
    return 0x534F63616DLL;
  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t __REAssetBundle.ExportOptions.PlatformOS.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1 == 5459817 && a2 == 0xE300000000000000;
  if (v4 || (v5 = a2, v6 = a1, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result = swift_bridgeObjectRelease();
    v6 = 0;
    v5 = 0;
  }
  else if (v6 == 0x534F63616DLL && v5 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v6 = 0;
    v5 = 1;
  }
  else if (v6 == 0x534F6E6F69736976 && v5 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v6 == 1397715576 && v5 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v6 == 0x316C616963657073 && v5 == 0xE800000000000000
         || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    result = swift_bridgeObjectRelease();
    v6 = 0;
    v5 = 2;
  }
  *a3 = v6;
  a3[1] = v5;
  return result;
}

void static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSURL *v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSURL *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t MajorVersionNumber;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;

  v61 = a5;
  v65 = *MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for URL();
  v58 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v64 = 0;
  if (!*(_QWORD *)(a4 + 88))
  {
    v31 = a2[3];
    v32 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
    URL._bridgeToObjectiveC()(v33);
    v35 = v34;
    v24 = (uint64_t *)RERealityFileMountFileAtURL();

    if (v24)
      goto LABEL_8;
    v41 = v64;
    specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(v64);
    if (v5)
      return;
    if (v41)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v42 = swift_allocError();
      *v43 = v41;
      v45 = v58;
      v44 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v12, a1, v59);
      if (v42)
      {
LABEL_21:
        (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v44);
        goto LABEL_22;
      }
    }
    else
    {
      v45 = v58;
      v44 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v12, a1, v59);
    }
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v62 = 0xD00000000000001FLL;
    v63 = 0x800000021BE8A6C0;
    v51._countAndFlagsBits = URL.path.getter();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 46;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    v53 = v62;
    v54 = v63;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_QWORD *)v55 = v53;
    *(_QWORD *)(v55 + 8) = v54;
    *(_BYTE *)(v55 + 16) = 3;
    goto LABEL_21;
  }
  v57 = (char *)&v56 - v14;
  v60 = *(_QWORD *)(a4 + 80);
  v15 = a3;
  v16 = a1;
  v18 = a2[3];
  v17 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v18);
  v19 = v18;
  v20 = v16;
  a3 = v15;
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v19, v17);
  URL._bridgeToObjectiveC()(v21);
  v23 = v22;
  String.utf8CString.getter();
  v24 = (uint64_t *)RERealityFileMountFileAtURLWithAliasName();

  swift_release();
  if (v24)
  {
LABEL_8:
    v36 = *(_QWORD *)(a4 + 120);
    if (v36)
    {
      MajorVersionNumber = RERealityFileGetMajorVersionNumber();
      v38 = v36 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
      *(_QWORD *)v38 = MajorVersionNumber;
      *(_BYTE *)(v38 + 8) = 1;
    }
    static __REAssetBundle.__init_REKit2(realityFile:assetService:coreServiceLocator:_:)(v24, a2, a3, (_BYTE *)a4, v61);
    v39 = a2[3];
    v40 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v39);
    (*(void (**)(uint64_t, uint64_t))(v40 + 32))(v39, v40);
    RERealityFileUnmount();
    return;
  }
  v25 = v64;
  specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(v64);
  if (!v5)
  {
    if (v25)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v26 = swift_allocError();
      *v27 = v25;
      v28 = v57;
      v29 = v58;
      v30 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v20, v59);
      if (v26)
      {
LABEL_18:
        (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
LABEL_22:
        swift_willThrow();
        return;
      }
    }
    else
    {
      v28 = v57;
      v29 = v58;
      v30 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v20, v59);
    }
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v62 = 0xD00000000000001FLL;
    v63 = 0x800000021BE8A6C0;
    v46._countAndFlagsBits = URL.path.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 46;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    v48 = v62;
    v49 = v63;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_QWORD *)v50 = v48;
    *(_QWORD *)(v50 + 8) = v49;
    *(_BYTE *)(v50 + 16) = 3;
    goto LABEL_18;
  }
}

uint64_t static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t MajorVersionNumber;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v32;

  v10 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v10)
    __break(1u);
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v16 = a4[3];
  v15 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
  String.utf8CString.getter();
  String.utf8CString.getter();
  v17 = (uint64_t *)RERealityFileMountFileInBundle();
  swift_release();
  swift_release();
  if (v17)
  {
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(a6 + 120);
    if (v18)
    {
      MajorVersionNumber = RERealityFileGetMajorVersionNumber();
      v20 = v18 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
      *(_QWORD *)v20 = MajorVersionNumber;
      *(_BYTE *)(v20 + 8) = 1;
    }
    static __REAssetBundle.__init_REKit2(realityFile:assetService:coreServiceLocator:_:)(v17, a4, a5, (_BYTE *)a6, a7);
    v21 = a4[3];
    v22 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v21);
    (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
    return RERealityFileUnmount();
  }
  else
  {
    specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(0);
    if (v32)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = a2;
      v24._object = a3;
      String.append(_:)(v24);
      v25._countAndFlagsBits = 0x646E7542206E6920;
      v25._object = (void *)0xEC000000203A656CLL;
      String.append(_:)(v25);
      v26._countAndFlagsBits = v12;
      v26._object = v14;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 46;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(_QWORD *)v28 = 0xD00000000000001FLL;
      *(_QWORD *)(v28 + 8) = 0x800000021BE8A6C0;
      *(_BYTE *)(v28 + 16) = 3;
      return swift_willThrow();
    }
  }
}

uint64_t specialized __REAssetManager.loadAssetsAndDependencies<A>(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  NSObject *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD v28[2];
  NSObject *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (_QWORD *)((char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = a1;
  *v6 = (id)REAssetManagerGetEngineQueue();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5608], v3);
  LOBYTE(a1) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((a1 & 1) != 0)
  {
    if (!(v34 >> 62))
    {
      if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
        return result;
LABEL_4:
      v8 = dispatch_group_create();
      dispatch_group_enter(v8);
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = 0;
      v10 = (id)REAssetManagerGetEngineQueue();
      MEMORY[0x24BDAC7A8](v10);
      v28[-4] = v1;
      v28[-3] = v9;
      v28[-2] = &v34;
      v28[-1] = v8;
      type metadata accessor for __AssetLoadRequest();
      OS_dispatch_queue.sync<A>(execute:)();

      v11 = v33;
      OS_dispatch_group.wait()();
      swift_beginAccess();
      v12 = *(void **)(v9 + 16);
      if (!v12)
      {
        if (REAssetLoadRequestGetState() == 1)
        {
LABEL_20:

          swift_release();
          return swift_release();
        }
        v13 = v34;
        v30 = v9;
        if (v34 >> 62)
        {
          swift_bridgeObjectRetain();
          v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v14 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v15 = MEMORY[0x24BEE4AF8];
        if (v14)
        {
          v28[1] = v11;
          v29 = v8;
          v32 = MEMORY[0x24BEE4AF8];
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
          if (v14 < 0)
          {
            __break(1u);
            return result;
          }
          v16 = 0;
          v15 = v32;
          v31 = v13 & 0xC000000000000001;
          v17 = v13;
          do
          {
            if (v31)
              MEMORY[0x220769770](v16, v13);
            else
              swift_retain();
            v18 = (void *)REAssetHandleCopyAssetIdentifierString();
            v19 = String.init(_:)(v18);
            swift_release();
            v32 = v15;
            v21 = *(_QWORD *)(v15 + 16);
            v20 = *(_QWORD *)(v15 + 24);
            if (v21 >= v20 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
              v15 = v32;
            }
            ++v16;
            *(_QWORD *)(v15 + 16) = v21 + 1;
            *(Swift::String *)(v15 + 16 * v21 + 32) = v19;
            v13 = v17;
          }
          while (v14 != v16);
          v8 = v29;
        }
        v32 = v15;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        v22 = BidirectionalCollection<>.joined(separator:)();
        v24 = v23;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
        swift_allocError();
        v12 = 0;
        *(_QWORD *)v25 = v22;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(v25 + 16) = 0;
        *(_QWORD *)(v25 + 24) = 0;
        *(_BYTE *)(v25 + 32) = 0;
      }
      v26 = v12;
      swift_willThrow();
      goto LABEL_20;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v27)
    goto LABEL_4;
  return result;
}

uint64_t specialized closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t AssetRequest;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t i;
  uint64_t j;
  _QWORD v20[6];
  _QWORD aBlock[6];

  AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = AssetRequest;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  aBlock[4] = partial apply for specialized closure #1 in closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:);
  aBlock[5] = v9;
  v10 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_25_0;
  v11 = _Block_copy(aBlock);
  v12 = _Block_copy(v11);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  v20[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v20[5] = v13;
  v20[0] = v10;
  v20[1] = 1107296256;
  v20[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v20[3] = &block_descriptor_31;
  v14 = _Block_copy(v20);
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = a4;
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v14);
  _Block_release(v11);
  swift_release();
  if (!(a3 >> 62))
  {
    v16 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v16)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v16 = result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v16 >= 1)
  {
    if ((a3 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v16; ++i)
      {
        MEMORY[0x220769770](i, a3);
        REAssetLoadRequestAddAsset();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      for (j = 0; j != v16; ++j)
        REAssetLoadRequestAddAsset();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void specialized closure #1 in closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(char a1, uint64_t a2, unint64_t a3, dispatch_group_t group)
{
  uint64_t v7;
  uint64_t i;
  void *v9;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  if ((a1 & 1) != 0)
    goto LABEL_18;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v7)
  {
LABEL_17:
    v18 = (void **)(a2 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v19 = BidirectionalCollection<>.joined(separator:)();
    v21 = v20;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    v22 = swift_allocError();
    *(_QWORD *)v23 = v19;
    *(_QWORD *)(v23 + 8) = v21;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_BYTE *)(v23 + 32) = 0;
    swift_beginAccess();
    v24 = *v18;
    *v18 = (void *)v22;

LABEL_18:
    dispatch_group_leave(group);
    return;
  }
  v26 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v25 = a2;
    if ((a3 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        MEMORY[0x220769770](i, a3);
        v9 = (void *)REAssetHandleCopyAssetIdentifierString();
        v10 = String.init(_:)(v9);
        swift_unknownObjectRelease();
        v12 = *(_QWORD *)(v26 + 16);
        v11 = *(_QWORD *)(v26 + 24);
        if (v12 >= v11 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        *(_QWORD *)(v26 + 16) = v12 + 1;
        *(Swift::String *)(v26 + 16 * v12 + 32) = v10;
      }
    }
    else
    {
      v13 = a3 + 32;
      do
      {
        swift_retain();
        v14 = (void *)REAssetHandleCopyAssetIdentifierString();
        v15 = String.init(_:)(v14);
        swift_release();
        v17 = *(_QWORD *)(v26 + 16);
        v16 = *(_QWORD *)(v26 + 24);
        if (v17 >= v16 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        *(_QWORD *)(v26 + 16) = v17 + 1;
        *(Swift::String *)(v26 + 16 * v17 + 32) = v15;
        v13 += 8;
        --v7;
      }
      while (v7);
    }
    a2 = v25;
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t specialized __REAssetManager.loadAssetsAndDependencies<A>(_:with:)(unint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  void *FailedMessage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Size;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t Asset;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  int IsLoaded;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t inited;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  Swift::String v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  Swift::String v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[5];
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  __int128 v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;

  v4 = a1;
  v125 = a1;
  if (a2 == 2)
  {
    v131 = v3;
    if (a1 >> 62)
      goto LABEL_230;
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_4;
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 1) != 0)
    return specialized __REAssetManager.loadAssetsAndDependencies<A>(_:)(a1);
  v131 = v3;
  if (a1 >> 62)
    goto LABEL_239;
  v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v15)
    return swift_bridgeObjectRelease();
LABEL_12:
  v107 = v4 & 0xC000000000000001;
  v108 = v15;
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_243;
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
    goto LABEL_255;
  }
  v16 = *(_QWORD *)(v4 + 32);
  swift_retain();
LABEL_15:
  if (!REAssetHandleIsLoaded())
  {
LABEL_214:
    swift_retain();
    goto LABEL_215;
  }
  v103 = v125 & 0xFFFFFFFFFFFFFF8;
  v102 = v125 + 32;
  v17 = 1;
  while (1)
  {
    v105 = v17;
    v106 = v16;
    REAssetHandleLoadNow();
    v130 = *(_QWORD *)(v132 + 88);
    REAssetCopyDependencyArray();
    Size = REAssetDynamicArrayGetSize();
    if (Size < 0)
      goto LABEL_246;
    v19 = Size;
    v20 = MEMORY[0x24BEE4AF8];
    if (Size)
    {
      v137 = MEMORY[0x24BEE4AF8];
      v2 = (unint64_t)&v137;
      specialized ContiguousArray.reserveCapacity(_:)();
      v21 = 0;
      do
      {
        if (v19 == v21)
          goto LABEL_223;
        Asset = REAssetDynamicArrayGetAsset();
        if (!Asset)
          goto LABEL_254;
        v23 = Asset;
        ++v21;
        RERetain();
        type metadata accessor for __REAsset();
        *(_QWORD *)(swift_allocObject() + 16) = v23;
        v2 = (unint64_t)&v137;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v19 != v21);
      v24 = v137;
      v20 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v24 = MEMORY[0x24BEE4AF8];
    }
    RERelease();
    v137 = v20;
    v25 = v24;
    v112 = v24;
    if (v24 >> 62)
      break;
    v26 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v111 = v26;
    if (v26)
      goto LABEL_27;
LABEL_157:
    swift_bridgeObjectRelease();
    v2 = MEMORY[0x24BEE4AF8];
LABEL_158:
    result = swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v77 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v77)
      {
LABEL_169:
        if ((v2 & 0xC000000000000001) != 0)
          goto LABEL_256;
        if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          swift_retain();
          goto LABEL_172;
        }
        __break(1u);
        return result;
      }
    }
    else if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_169;
    }
    swift_release();
    swift_bridgeObjectRelease();
    v76 = v105;
    if (v105 == v108)
      return swift_bridgeObjectRelease();
    if (v107)
    {
      v16 = MEMORY[0x220769770](v105, v125);
    }
    else
    {
      if (v105 >= *(_QWORD *)(v103 + 16))
        goto LABEL_252;
      v16 = *(_QWORD *)(v102 + 8 * v105);
      swift_retain();
    }
    v29 = __OFADD__(v76, 1);
    v17 = v76 + 1;
    if (v29)
      goto LABEL_249;
    if ((REAssetHandleIsLoaded() & 1) == 0)
      goto LABEL_214;
  }
  swift_bridgeObjectRetain_n();
  v25 = v112;
  v75 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v111 = v75;
  if (!v75)
    goto LABEL_157;
LABEL_27:
  v27 = 0;
  v113 = v25 & 0xC000000000000001;
  v104 = v25 + 32;
  while (1)
  {
    if (v113)
    {
      v28 = MEMORY[0x220769770](v27, v25);
      v29 = __OFADD__(v27, 1);
      v2 = v27 + 1;
      if (v29)
        goto LABEL_238;
    }
    else
    {
      v28 = swift_retain();
      v29 = __OFADD__(v27, 1);
      v2 = v27 + 1;
      if (v29)
        goto LABEL_238;
    }
    v118 = v28;
    IsLoaded = REAssetHandleIsLoaded();
    v117 = v2;
    if (!IsLoaded)
      goto LABEL_148;
    REAssetHandleLoadNow();
    REAssetCopyDependencyArray();
    v31 = REAssetDynamicArrayGetSize();
    if (v31 < 0)
      goto LABEL_245;
    v32 = v31;
    v33 = MEMORY[0x24BEE4AF8];
    if (v31)
      break;
    v37 = MEMORY[0x24BEE4AF8];
LABEL_42:
    RERelease();
    v139 = v33;
    v2 = v37;
    if (v37 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v4)
        goto LABEL_141;
LABEL_44:
      v38 = 0;
      v116 = v37 & 0xC000000000000001;
      v109 = v37 + 32;
      v115 = v37;
      v114 = v4;
      while (2)
      {
        if (v116)
        {
          v39 = v2;
          v2 = v38;
          v5 = MEMORY[0x220769770](v38, v39);
          v40 = v38 + 1;
          if (__OFADD__(v2, 1))
            goto LABEL_234;
        }
        else
        {
          v5 = *(_QWORD *)(v109 + 8 * v38);
          swift_retain();
          v29 = __OFADD__(v38, 1);
          v40 = v38 + 1;
          if (v29)
            goto LABEL_234;
        }
        v120 = v40;
        v41 = REAssetHandleIsLoaded();
        if (!(_DWORD)v41)
          goto LABEL_132;
        v110 = v5;
        REAssetHandleLoadNow();
        v4 = REAssetCopyDependencyArray();
        v42 = REAssetDynamicArrayGetSize();
        if (v42 < 0)
          goto LABEL_242;
        v43 = v42;
        v44 = MEMORY[0x24BEE4AF8];
        if (v42)
        {
          v136 = MEMORY[0x24BEE4AF8];
          v2 = (unint64_t)&v136;
          specialized ContiguousArray.reserveCapacity(_:)();
          v45 = 0;
          do
          {
            if (v43 == v45)
              goto LABEL_221;
            v46 = REAssetDynamicArrayGetAsset();
            if (!v46)
              goto LABEL_253;
            v47 = v46;
            ++v45;
            RERetain();
            type metadata accessor for __REAsset();
            *(_QWORD *)(swift_allocObject() + 16) = v47;
            v2 = (unint64_t)&v136;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v43 != v45);
          v48 = v136;
          v44 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          v48 = MEMORY[0x24BEE4AF8];
        }
        RERelease();
        v136 = v44;
        v2 = v48;
        if (!(v48 >> 62))
        {
          v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v49)
            goto LABEL_61;
LABEL_125:
          swift_bridgeObjectRelease();
          v72 = MEMORY[0x24BEE4AF8];
LABEL_126:
          swift_bridgeObjectRelease();
          if (!(v72 >> 62))
          {
            v2 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v2)
              goto LABEL_128;
LABEL_138:
            swift_release();
            swift_bridgeObjectRelease();
LABEL_135:
            v4 = v114;
            v38 = v120;
            v2 = v115;
            if (v120 == v114)
            {
              swift_bridgeObjectRelease();
              v73 = v139;
              goto LABEL_142;
            }
            continue;
          }
          swift_bridgeObjectRetain();
          v2 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v2)
            goto LABEL_138;
LABEL_128:
          if ((v72 & 0xC000000000000001) != 0)
          {
            MEMORY[0x220769770](0, v72);
          }
          else
          {
            if (!*(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_248;
            swift_retain();
          }
          swift_release();
          v41 = swift_bridgeObjectRelease();
LABEL_132:
          MEMORY[0x220768F0C](v41);
          if (*(_QWORD *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_135;
        }
        break;
      }
      swift_bridgeObjectRetain_n();
      v49 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v49)
        goto LABEL_125;
LABEL_61:
      v50 = 0;
      v124 = v48 & 0xC000000000000001;
      v119 = v48 + 32;
      v123 = v48;
      v122 = v49;
      while (2)
      {
        if (v124)
        {
          v51 = v2;
          v2 = v50;
          v5 = MEMORY[0x220769770](v50, v51);
          v52 = v50 + 1;
          if (__OFADD__(v2, 1))
            goto LABEL_225;
        }
        else
        {
          v5 = *(_QWORD *)(v119 + 8 * v50);
          swift_retain();
          v29 = __OFADD__(v50, 1);
          v52 = v50 + 1;
          if (v29)
            goto LABEL_225;
        }
        v126 = v52;
        v53 = REAssetHandleIsLoaded();
        if (!(_DWORD)v53)
          goto LABEL_117;
        REAssetHandleLoadNow();
        v4 = REAssetCopyDependencyArray();
        v54 = REAssetDynamicArrayGetSize();
        if (v54 < 0)
          goto LABEL_228;
        v55 = v54;
        v121 = v5;
        if (v54)
        {
          v135 = MEMORY[0x24BEE4AF8];
          v2 = (unint64_t)&v135;
          specialized ContiguousArray.reserveCapacity(_:)();
          v5 = 0;
          while (v55 != v5)
          {
            v56 = REAssetDynamicArrayGetAsset();
            if (!v56)
              goto LABEL_251;
            v57 = v56;
            ++v5;
            RERetain();
            type metadata accessor for __REAsset();
            *(_QWORD *)(swift_allocObject() + 16) = v57;
            v2 = (unint64_t)&v135;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (v55 == v5)
            {
              v58 = v135;
              v59 = MEMORY[0x24BEE4AF8];
              goto LABEL_78;
            }
          }
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
          while (2)
          {
            __break(1u);
LABEL_228:
            __break(1u);
            while (2)
            {
              __break(1u);
LABEL_230:
              swift_bridgeObjectRetain();
              v99 = _CocoaArrayWrapper.endIndex.getter();
              v4 = v125;
              v5 = v99;
              if (!v99)
                return swift_bridgeObjectRelease();
LABEL_4:
              v130 = v4 & 0xC000000000000001;
              if ((v4 & 0xC000000000000001) == 0)
              {
                if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  v6 = *(_QWORD *)(v4 + 32);
                  swift_retain();
                  goto LABEL_7;
                }
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                swift_bridgeObjectRetain();
                v100 = _CocoaArrayWrapper.endIndex.getter();
                v4 = v125;
                v15 = v100;
                if (!v100)
                  return swift_bridgeObjectRelease();
                goto LABEL_12;
              }
LABEL_236:
              v6 = MEMORY[0x220769770](0, v4);
LABEL_7:
              REAssetHandleLoadNow();
              if ((REAssetHandleLoadFailed() & 1) != 0)
              {
LABEL_8:
                v7 = (void *)REAssetCopyDescription();
                v8 = String.init(_:)(v7);
                FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
                v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v12 = v11;

                lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
                swift_allocError();
                *(Swift::String *)v13 = v8;
                *(_QWORD *)(v13 + 16) = v10;
                *(_QWORD *)(v13 + 24) = v12;
                *(_BYTE *)(v13 + 32) = 1;
                swift_willThrow();
                swift_release();
                return swift_bridgeObjectRelease();
              }
              v126 = v125 & 0xFFFFFFFFFFFFFF8;
              v124 = v125 + 32;
              v78 = 1;
              v129 = xmmword_21BE50AD0;
              v79 = MEMORY[0x24BEE4AF8];
              v128 = v5;
LABEL_175:
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = v129;
              *(_QWORD *)(inited + 32) = v6;
              v137 = inited;
              specialized Array._endMutation()();
              v4 = v137;
              v137 = v79;
              swift_retain();
              v81 = MEMORY[0x24BEE4B08];
              if ((v79 & 0xC000000000000000) != 0)
              {
                if (_CocoaArrayWrapper.endIndex.getter())
                  v81 = specialized Set.init(_nonEmptyArrayLiteral:)(v79);
                else
                  v81 = MEMORY[0x24BEE4B08];
              }
              v139 = v81;
              specialized __REAssetService.getDependenciesRecursively(asset:result:visited:includingSelf:)(v6, &v137, (uint64_t *)&v139, 0);
              swift_bridgeObjectRelease();
              v82 = v137;
              v137 = v4;
              specialized Array.append<A>(contentsOf:)(v82);
              v2 = v137;
              if (v137 >> 62)
              {
                swift_bridgeObjectRetain();
                v83 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v83)
                  goto LABEL_181;
              }
              else
              {
                v83 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFF8) + 0x10);
                if (v83)
                {
LABEL_181:
                  v84 = v2 & 0xC000000000000001;
                  if ((v2 & 0xC000000000000001) != 0)
                  {
                    MEMORY[0x220769770](0, v2);
                  }
                  else
                  {
                    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
                      continue;
                    swift_retain();
                  }
                  REAssetHandleLoadNow();
                  if ((REAssetHandleLoadFailed() & 1) != 0)
                    goto LABEL_213;
                  swift_release();
                  if (v83 != 1)
                  {
                    if (v84)
                    {
                      MEMORY[0x220769770](1, v2);
                    }
                    else
                    {
                      if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                        goto LABEL_247;
                      swift_retain();
                    }
                    REAssetHandleLoadNow();
                    if ((REAssetHandleLoadFailed() & 1) != 0)
                    {
LABEL_213:
                      v87 = (void *)REAssetCopyDescription();
                      v88 = String.init(_:)(v87);
                      v89 = (void *)REAssetHandleCopyLoadFailedMessage();
                      v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v92 = v91;

                      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
                      swift_allocError();
                      *(Swift::String *)v93 = v88;
                      *(_QWORD *)(v93 + 16) = v90;
                      *(_QWORD *)(v93 + 24) = v92;
                      *(_BYTE *)(v93 + 32) = 1;
                      swift_willThrow();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_release();
                      return swift_bridgeObjectRelease();
                    }
                    swift_release();
                    if (v83 != 2)
                    {
                      v127 = v2 & 0xFFFFFFFFFFFFFF8;
                      v85 = 6;
                      do
                      {
                        v86 = v85 - 4;
                        if (v84)
                        {
                          MEMORY[0x220769770](v85 - 4, v2);
                          v4 = v85 - 3;
                          if (__OFADD__(v86, 1))
                            goto LABEL_224;
                        }
                        else
                        {
                          if (v86 >= *(_QWORD *)(v127 + 16))
                            goto LABEL_226;
                          swift_retain();
                          v4 = v85 - 3;
                          if (__OFADD__(v86, 1))
                            goto LABEL_224;
                        }
                        REAssetHandleLoadNow();
                        if ((REAssetHandleLoadFailed() & 1) != 0)
                          goto LABEL_213;
                        swift_release();
                        ++v85;
                      }
                      while (v4 != v83);
                    }
                  }
                }
              }
              break;
            }
            swift_bridgeObjectRelease();
            swift_release();
            v5 = v128;
            if (v78 == v128)
              return swift_bridgeObjectRelease();
            if (v130)
            {
              v6 = MEMORY[0x220769770](v78, v125);
              v79 = MEMORY[0x24BEE4AF8];
              v29 = __OFADD__(v78++, 1);
              if (v29)
                continue;
            }
            else
            {
              v79 = MEMORY[0x24BEE4AF8];
              if (v78 >= *(_QWORD *)(v126 + 16))
                goto LABEL_235;
              v6 = *(_QWORD *)(v124 + 8 * v78);
              swift_retain();
              v29 = __OFADD__(v78++, 1);
              if (v29)
                continue;
            }
            break;
          }
          REAssetHandleLoadNow();
          if ((REAssetHandleLoadFailed() & 1) != 0)
            goto LABEL_8;
          goto LABEL_175;
        }
        v59 = MEMORY[0x24BEE4AF8];
        v58 = MEMORY[0x24BEE4AF8];
LABEL_78:
        RERelease();
        v135 = v59;
        if (!(v58 >> 62))
        {
          v60 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v60)
            goto LABEL_80;
LABEL_110:
          swift_bridgeObjectRelease();
          v4 = MEMORY[0x24BEE4AF8];
LABEL_111:
          swift_bridgeObjectRelease();
          if (!(v4 >> 62))
          {
            if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_113;
LABEL_62:
            swift_release();
            swift_bridgeObjectRelease();
LABEL_63:
            v50 = v126;
            v2 = v123;
            if (v126 == v122)
            {
              swift_bridgeObjectRelease();
              v72 = v136;
              goto LABEL_126;
            }
            continue;
          }
          swift_bridgeObjectRetain();
          v71 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v71)
            goto LABEL_62;
LABEL_113:
          if ((v4 & 0xC000000000000001) != 0)
          {
            MEMORY[0x220769770](0, v4);
          }
          else
          {
            if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_233;
            swift_retain();
          }
          swift_release();
          v53 = swift_bridgeObjectRelease();
LABEL_117:
          MEMORY[0x220768F0C](v53);
          if (*(_QWORD *)((v136 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v136 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_63;
        }
        break;
      }
      swift_bridgeObjectRetain();
      v60 = _CocoaArrayWrapper.endIndex.getter();
      if (!v60)
        goto LABEL_110;
LABEL_80:
      if (v60 < 1)
      {
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
        goto LABEL_236;
      }
      v61 = 0;
      v4 = v58 & 0xC000000000000001;
      v128 = v60;
      *(_QWORD *)&v129 = v58 + 32;
      v127 = v58;
      while (2)
      {
        if (v4)
        {
          v62 = MEMORY[0x220769770](v61, v58);
        }
        else
        {
          v62 = *(_QWORD *)(v129 + 8 * v61);
          swift_retain();
        }
        v134 = v132;
        v2 = *(_QWORD *)(v62 + 16);
        if (REAssetHandleIsLoaded())
        {
          REAssetHandleLoadNow();
          REAssetCopyDependencyArray();
          v63 = REAssetDynamicArrayGetSize();
          if (v63 < 0)
            goto LABEL_219;
          v64 = v63;
          if (v63)
          {
            v133 = MEMORY[0x24BEE4AF8];
            v2 = (unint64_t)&v133;
            specialized ContiguousArray.reserveCapacity(_:)();
            v65 = 0;
            while (1)
            {
              if (v64 == v65)
              {
                __break(1u);
                return swift_bridgeObjectRelease();
              }
              v66 = REAssetDynamicArrayGetAsset();
              if (!v66)
                break;
              v67 = v66;
              ++v65;
              RERetain();
              type metadata accessor for __REAsset();
              *(_QWORD *)(swift_allocObject() + 16) = v67;
              v2 = (unint64_t)&v133;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              if (v64 == v65)
              {
                v68 = v133;
                v58 = v127;
                v60 = v128;
                goto LABEL_96;
              }
            }
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            v16 = MEMORY[0x220769770](0, v4);
            goto LABEL_15;
          }
          v68 = MEMORY[0x24BEE4AF8];
LABEL_96:
          v69 = RERelease();
          MEMORY[0x24BDAC7A8](v69);
          v101[2] = &v134;
          v70 = v131;
          v2 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in __REAssetService.firstUnloadedAssetIncludingDependencies(_:), (uint64_t)v101, v68);
          v131 = v70;
          swift_bridgeObjectRelease();
          if (!(v2 >> 62))
          {
            v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v5)
              goto LABEL_98;
LABEL_82:
            swift_release();
            swift_bridgeObjectRelease();
LABEL_83:
            if (++v61 == v60)
            {
              swift_bridgeObjectRelease();
              v4 = v135;
              goto LABEL_111;
            }
            continue;
          }
          swift_bridgeObjectRetain();
          v5 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v5)
            goto LABEL_82;
LABEL_98:
          if ((v2 & 0xC000000000000001) != 0)
          {
            MEMORY[0x220769770](0, v2);
          }
          else
          {
            if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_220;
            swift_retain();
          }
          swift_release();
          swift_bridgeObjectRelease();
        }
        break;
      }
      MEMORY[0x220768F0C]();
      v5 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5 >= *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_83;
    }
    v4 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_44;
LABEL_141:
    swift_bridgeObjectRelease();
    v73 = MEMORY[0x24BEE4AF8];
LABEL_142:
    swift_bridgeObjectRelease();
    if (v73 >> 62)
    {
      swift_bridgeObjectRetain();
      v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v2)
      {
LABEL_144:
        if ((v73 & 0xC000000000000001) != 0)
        {
          v74 = MEMORY[0x220769770](0, v73);
        }
        else
        {
          if (!*(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_250;
          v74 = *(_QWORD *)(v73 + 32);
          swift_retain();
        }
        swift_release();
        swift_bridgeObjectRelease();
        v118 = v74;
LABEL_148:
        MEMORY[0x220768F0C]();
        if (*(_QWORD *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_151;
      }
    }
    else
    {
      v2 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v2)
        goto LABEL_144;
    }
    swift_release();
    swift_bridgeObjectRelease();
LABEL_151:
    v27 = v117;
    v25 = v112;
    if (v117 == v111)
    {
      swift_bridgeObjectRelease();
      v2 = v137;
      goto LABEL_158;
    }
  }
  v139 = MEMORY[0x24BEE4AF8];
  v2 = (unint64_t)&v139;
  specialized ContiguousArray.reserveCapacity(_:)();
  v34 = 0;
  while (1)
  {
    if (v32 == v34)
      goto LABEL_222;
    v35 = REAssetDynamicArrayGetAsset();
    if (!v35)
      break;
    v36 = v35;
    ++v34;
    RERetain();
    type metadata accessor for __REAsset();
    *(_QWORD *)(swift_allocObject() + 16) = v36;
    v2 = (unint64_t)&v139;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v32 == v34)
    {
      v37 = v139;
      v33 = MEMORY[0x24BEE4AF8];
      goto LABEL_42;
    }
  }
LABEL_255:
  __break(1u);
LABEL_256:
  MEMORY[0x220769770](0, v2);
LABEL_172:
  swift_bridgeObjectRelease();
LABEL_215:
  v137 = 0;
  v138 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v137 = 0xD000000000000018;
  v138 = 0x800000021BE928E0;
  v94 = (void *)REAssetHandleCopyAssetIdentifierString();
  v95 = String.init(_:)(v94);
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  v96 = v137;
  v97 = v138;
  lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
  swift_allocError();
  *(_QWORD *)v98 = v96;
  *(_QWORD *)(v98 + 8) = v97;
  *(_BYTE *)(v98 + 16) = 1;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t specialized __REAssetService.firstUnloadedAssetIncludingDependencies(_:)(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  if (!REAssetHandleIsLoaded())
  {
    swift_retain();
    return a1;
  }
  v2 = __REAssetManager.__getDependencies(asset:)();
  MEMORY[0x24BDAC7A8](v2);
  v6[2] = &v7;
  v3 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in __REAssetService.firstUnloadedAssetIncludingDependencies(_:), (uint64_t)v6, v2);
  result = swift_bridgeObjectRelease();
  if (!(v3 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_10;
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    a1 = MEMORY[0x220769770](0, v3);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    a1 = *(_QWORD *)(v3 + 32);
    swift_retain();
LABEL_7:
    swift_bridgeObjectRelease();
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t static __REAssetBundle.__init(elements:assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static __REAssetBundle.__init(elements:assetService:)(a1, a2, (uint64_t)partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:), (uint64_t (*)(uint64_t, _QWORD *, uint64_t))specialized Sequence.compactMap<A>(_:), a3);
}

uint64_t static __REAssetBundle.__init(element:assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t inited;
  unint64_t v7;
  Swift::Int v8;
  _QWORD v10[4];
  unint64_t v11[6];
  Swift::Int v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(inited + 32) = a1;
  v11[0] = inited;
  specialized Array._endMutation()();
  v12 = MEMORY[0x24BEE4B00];
  v10[2] = a2;
  v10[3] = &v12;
  swift_retain();
  v7 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in static __REAssetBundle.__init(elements:assetService:)partial apply, (uint64_t)v10, v11[0]);
  v8 = v12;
  outlined init with copy of __REAssetService(a2, (uint64_t)v11);
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v7, (uint64_t)v11, v8, 0, a3);
  return swift_bridgeObjectRelease();
}

void closure #1 in static __REAssetBundle.__init(elements:assetService:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String_optional v11;
  uint64_t countAndFlagsBits;
  void *object;
  void *v14;
  void *v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t SceneNullable;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  os_log_type_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;

  v60 = a4;
  v56 = a3;
  v57 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v55 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for UUID();
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v52 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *a1;
  REEntityGetName();
  v8 = String.init(cString:)();
  v10 = v9;
  v68 = 0x2A3F227C3E3C3ALL;
  v69 = 0xE700000000000000;
  v70 = xmmword_21BE7A4A0;
  swift_bridgeObjectRetain();
  v11 = String.Iterator.next()();
  v71 = (uint64_t)v10;
  if (v11.value._object)
  {
    countAndFlagsBits = v11.value._countAndFlagsBits;
    object = v11.value._object;
    lazy protocol witness table accessor for type String and conformance String();
    do
    {
      v65[0] = v8;
      v65[1] = v10;
      v63 = countAndFlagsBits;
      v64 = object;
      v61 = 95;
      v62 = 0xE100000000000000;
      v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v15 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = String.Iterator.next()();
      countAndFlagsBits = v16.value._countAndFlagsBits;
      object = v16.value._object;
      v10 = v15;
    }
    while (v16.value._object);
  }
  else
  {
    v15 = v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v68 = 0x3A79726F6D656DLL;
  v69 = 0xE700000000000000;
  v17._countAndFlagsBits = v8;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v65[0] = static __REAssetBundle.sceneConversionCounter;
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x656C69706D6F632ELL;
  v19._object = (void *)0xEE00656E65637364;
  String.append(_:)(v19);
  if (static __REAssetBundle.sceneConversionCounter != -1)
  {
    v21 = v68;
    v20 = v69;
    ++static __REAssetBundle.sceneConversionCounter;
    outlined init with copy of __REAssetService(v57, (uint64_t)&v68);
    outlined init with copy of __REAssetService((uint64_t)&v68, (uint64_t)v65);
    type metadata accessor for __REAsset();
    v22 = swift_allocObject();
    v23 = v66;
    v24 = v67;
    __swift_project_boxed_opaque_existential_1(v65, v66);
    v25 = *(void (**)(uint64_t, uint64_t))(v24 + 32);
    swift_retain();
    v25(v23, v24);
    String.utf8CString.getter();
    v26 = REAssetManagerSceneAssetCreateFromEntity();
    swift_release();
    if (!v26)
    {
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      v32 = (void *)swift_allocError();
      *(_QWORD *)v33 = v21;
      *(_QWORD *)(v33 + 8) = v20;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_BYTE *)(v33 + 32) = 0;
      swift_willThrow();
      swift_deallocPartialClassInstance();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      swift_release();
      v34 = static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_retain();
      v35 = v32;
      swift_retain();
      v36 = v32;
      v37 = static OS_os_log.default.getter();
      v38 = v34;
      if (os_log_type_enabled(v37, v34))
      {
        v39 = swift_slowAlloc();
        v40 = (_QWORD *)swift_slowAlloc();
        v71 = swift_slowAlloc();
        v68 = v71;
        *(_DWORD *)v39 = 136315394;
        v59 = 0;
        REEntityGetName();
        v41 = String.init(cString:)();
        v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2112;
        v43 = v32;
        v44 = _swift_stdlib_bridgeErrorToNSError();
        v65[0] = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v40 = v44;

        _os_log_impl(&dword_21B9AA000, v37, v38, "Failed to create asset from entity %s: %@", (uint8_t *)v39, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v40, -1, -1);
        v45 = v71;
        swift_arrayDestroy();
        MEMORY[0x220772F44](v45, -1, -1);
        MEMORY[0x220772F44](v39, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v22 = 0;
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v22 + 16) = v26;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    swift_release();
    SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      v28 = SceneNullable;
      v29 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      v30 = v54;
      v31 = v53;
      if (v29)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v28);
      }
      v46 = v55;
      Scene.__sceneIdentifier.getter(v55);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v46, 1, v30) != 1)
      {
        v48 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v52, v46, v30);
        UUID.uuidString.getter();
        v47 = v49;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v48, v30);
        goto LABEL_20;
      }
    }
    else
    {
      v46 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v55, 1, 1, v54);
    }
    outlined destroy of BodyTrackingComponent?(v46, &demangling cache variable for type metadata for UUID?);
    v47 = 0;
LABEL_20:
    REEntityGetName();
    String.init(cString:)();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    if (v47)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
    }
    v50 = RESceneDescriptorCreateFromParams();
    swift_release();
    swift_unknownObjectRelease();
    type metadata accessor for RESceneDescriptor();
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = v50;
    swift_retain();
    specialized Dictionary._Variant.setValue(_:forKey:)(v51, v22);
    swift_release();
LABEL_23:
    *v60 = v22;
    return;
  }
  __break(1u);
}

uint64_t static __REAssetBundle.__init(realityScenes:assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static __REAssetBundle.__init(elements:assetService:)(a1, a2, (uint64_t)partial apply for closure #1 in static __REAssetBundle.__init(realityScenes:assetService:), (uint64_t (*)(uint64_t, _QWORD *, uint64_t))specialized Sequence.compactMap<A>(_:), a3);
}

uint64_t static __REAssetBundle.__init(elements:assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, _QWORD *, uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v7;
  Swift::Int v8;
  _QWORD v10[5];
  _BYTE v11[48];
  Swift::Int v12;

  v12 = MEMORY[0x24BEE4B00];
  v10[2] = a2;
  v10[3] = &v12;
  v7 = a4(a3, v10, a1);
  v8 = v12;
  outlined init with copy of __REAssetService(a2, (uint64_t)v11);
  return __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v7, (uint64_t)v11, v8, 0, a5);
}

void closure #1 in static __REAssetBundle.__init(realityScenes:assetService:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String_optional v11;
  uint64_t countAndFlagsBits;
  void *object;
  void *v14;
  void *v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  os_log_type_t v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  uint64_t v68;

  v57 = a4;
  v53 = a3;
  v54 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for UUID();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v49 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = *a1;
  RESceneGetName();
  v8 = String.init(cString:)();
  v10 = v9;
  v65 = 0x2A3F227C3E3C3ALL;
  v66 = 0xE700000000000000;
  v67 = xmmword_21BE7A4A0;
  swift_bridgeObjectRetain();
  v11 = String.Iterator.next()();
  v68 = (uint64_t)v10;
  if (v11.value._object)
  {
    countAndFlagsBits = v11.value._countAndFlagsBits;
    object = v11.value._object;
    lazy protocol witness table accessor for type String and conformance String();
    do
    {
      v62[0] = v8;
      v62[1] = v10;
      v60 = countAndFlagsBits;
      v61 = object;
      v58 = 95;
      v59 = 0xE100000000000000;
      v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v15 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = String.Iterator.next()();
      countAndFlagsBits = v16.value._countAndFlagsBits;
      object = v16.value._object;
      v10 = v15;
    }
    while (v16.value._object);
  }
  else
  {
    v15 = v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = 0;
  v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v65 = 0x3A79726F6D656DLL;
  v66 = 0xE700000000000000;
  v17._countAndFlagsBits = v8;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v62[0] = static __REAssetBundle.sceneConversionCounter;
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x656C69706D6F632ELL;
  v19._object = (void *)0xEE00656E65637364;
  String.append(_:)(v19);
  if (static __REAssetBundle.sceneConversionCounter == -1)
  {
    __break(1u);
  }
  else
  {
    v21 = v65;
    v20 = v66;
    ++static __REAssetBundle.sceneConversionCounter;
    outlined init with copy of __REAssetService(v54, (uint64_t)&v65);
    outlined init with copy of __REAssetService((uint64_t)&v65, (uint64_t)v62);
    type metadata accessor for __REAsset();
    v22 = swift_allocObject();
    v23 = v63;
    v24 = v64;
    __swift_project_boxed_opaque_existential_1(v62, v63);
    v25 = *(void (**)(uint64_t, uint64_t))(v24 + 32);
    swift_retain();
    v25(v23, v24);
    String.utf8CString.getter();
    v26 = REAssetManagerSceneAssetCreate();
    swift_release();
    if (v26)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(v22 + 16) = v26;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
      swift_release();
      v27 = v51;
      Scene.__sceneIdentifier.getter(v51);
      v28 = v50;
      v29 = v52;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v27, 1, v52) == 1)
      {
        outlined destroy of BodyTrackingComponent?(v27, &demangling cache variable for type metadata for UUID?);
        v30 = 0;
      }
      else
      {
        v45 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v49, v27, v29);
        UUID.uuidString.getter();
        v30 = v46;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v45, v29);
      }
      RESceneGetName();
      String.init(cString:)();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      if (v30)
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
      }
      v47 = RESceneDescriptorCreateFromParams();
      swift_release();
      swift_unknownObjectRelease();
      type metadata accessor for RESceneDescriptor();
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = v47;
      swift_retain();
      specialized Dictionary._Variant.setValue(_:forKey:)(v48, v22);
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      v31 = (void *)swift_allocError();
      *(_QWORD *)v32 = v21;
      *(_QWORD *)(v32 + 8) = v20;
      *(_QWORD *)(v32 + 16) = 0;
      *(_QWORD *)(v32 + 24) = 0;
      *(_BYTE *)(v32 + 32) = 0;
      swift_willThrow();
      swift_deallocPartialClassInstance();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
      swift_release();
      v33 = static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_retain();
      v34 = v31;
      swift_retain();
      v35 = v31;
      v36 = static OS_os_log.default.getter();
      v37 = v33;
      if (os_log_type_enabled(v36, v33))
      {
        v38 = swift_slowAlloc();
        v39 = (_QWORD *)swift_slowAlloc();
        v68 = swift_slowAlloc();
        v65 = v68;
        *(_DWORD *)v38 = 136315394;
        v56 = 0;
        RESceneGetName();
        v40 = String.init(cString:)();
        v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v38 + 12) = 2112;
        v42 = v31;
        v43 = _swift_stdlib_bridgeErrorToNSError();
        v62[0] = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v39 = v43;

        _os_log_impl(&dword_21B9AA000, v36, v37, "Failed to create asset from scene %s: %@", (uint8_t *)v38, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v39, -1, -1);
        v44 = v68;
        swift_arrayDestroy();
        MEMORY[0x220772F44](v44, -1, -1);
        MEMORY[0x220772F44](v38, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v22 = 0;
    }
    *v57 = v22;
  }
}

void partial apply for closure #1 in static __REAssetBundle.__init(realityScenes:assetService:)(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in static __REAssetBundle.__init(realityScenes:assetService:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void closure #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;

  if (a1)
  {
    String.utf8CString.getter();
    v3 = (void *)REZipArchiveCopyFileAsData();
    swift_release();
    if (v3)
    {
      v4 = v3;
      v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

      *a2 = v5;
      a2[1] = v7;
      return;
    }
    lazy protocol witness table accessor for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)();
    swift_allocError();
    *v9 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)();
    swift_allocError();
    *v8 = 1;
  }
  swift_willThrow();
}

uint64_t static __REAssetBundle.loadAssetMap(url:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  char v6;

  result = URL.withUnsafeFileSystemRepresentation<A>(_:)();
  if (!v1)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    lazy protocol witness table accessor for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v4, v5);
    result = swift_release();
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = v6;
  }
  return result;
}

void partial apply for closure #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.AssetMap, &type metadata for __REAssetBundle.AssetMap);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap);
  }
  return result;
}

uint64_t static __REAssetBundle.__init_REKit2(realityFile:assetService:coreServiceLocator:_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t j;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;

  v6 = v5;
  v27 = a5;
  v28 = a3;
  v32 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2[3];
  v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  v15 = (void *)RERealityFileCopyURLFromDescriptor();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with copy of (Int, URL)((uint64_t)(a4 + 32), (uint64_t)&v29, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  if (v30)
  {
    outlined init with take of BindableDataInternal(&v29, (uint64_t)v31);
    LOBYTE(v29) = *a4;
    v16 = specialized static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)(a2, (uint64_t)a1, (uint64_t)v12, v31);
    if (v5)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v32);
    }
    v17 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v29, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    v17 = 0;
  }
  v18 = URL.lastPathComponent.getter();
  v20 = v19;
  if (v17)
    v21 = (uint64_t)v17;
  else
    v21 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  static __REAssetBundle.__init_REKit2(realityFile:realityFilename:downsampledTextureDescriptors:assetService:coreServiceLocator:_:)(a1, v18, v20, v21, a2, v28, (uint64_t)a4, v27);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
      v22 = v17[2];
      if (v22)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v22; ++i)
          RERelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
      v24 = v17[2];
      if (v24)
      {
        swift_bridgeObjectRetain();
        for (j = 0; j != v24; ++j)
          RERelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v32);
}

uint64_t static __REAssetBundle.__init_REKit2(realityFile:realityFilename:downsampledTextureDescriptors:assetService:coreServiceLocator:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t RealityFileHeader;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  char v20;
  uint64_t AssetDescriptorCount;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t AssetDescriptorAtIndex;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56[5];
  _BYTE v57[136];
  uint64_t v58;

  v58 = a2;
  RealityFileHeader = RERealityFileGetRealityFileHeader();
  if (!RealityFileHeader)
  {
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    v18 = 0xD000000000000026;
    v19 = "Failed to get header from reality file";
LABEL_47:
    *(_QWORD *)v17 = v18;
    *(_QWORD *)(v17 + 8) = (unint64_t)(v19 - 32) | 0x8000000000000000;
    goto LABEL_48;
  }
  v15 = RealityFileHeader;
  v16 = *(unsigned __int8 *)(a7 + 99);
  outlined init with copy of __REAssetBundle.LoadOptions(a7, (uint64_t)v57);
  if (v16 == 1)
  {
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v57);
    goto LABEL_7;
  }
  v20 = v57[98];
  outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v57);
  if ((v20 & 1) != 0)
  {
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    v18 = 0xD0000000000000C3;
    v19 = "loadOptions.loadOnResourceSharingClients cannot be false when loadOptions.waitForResourceSharingClients is tru"
          "e, because we cannot wait for resource clients to load if they are not going to load.";
    goto LABEL_47;
  }
LABEL_7:
  v52 = a5;
  AssetDescriptorCount = RERealityFileGetAssetDescriptorCount();
  if ((AssetDescriptorCount & 0x8000000000000000) == 0)
  {
    v22 = AssetDescriptorCount;
    v50 = a8;
    v51 = (void *)a3;
    v53 = v15;
    v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (AssetDescriptorCount)
    {
      v24 = 0;
      do
      {
        AssetDescriptorAtIndex = RERealityFileGetAssetDescriptorAtIndex();
        if (AssetDescriptorAtIndex)
        {
          v26 = AssetDescriptorAtIndex;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
          v28 = v23[2];
          v27 = v23[3];
          if (v28 >= v27 >> 1)
            v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v23);
          v23[2] = v28 + 1;
          v23[v28 + 4] = v26;
        }
        ++v24;
      }
      while (v22 != v24);
    }
    v30 = *(_QWORD *)(a7 + 104);
    v29 = *(_QWORD *)(a7 + 112);
    if (v29)
    {
      if (v29 == 1)
      {
        v31 = (_QWORD *)specialized static __REAssetBundle.getSceneNamesFromRealityFile(realityFile:)();
        if (!v31[2])
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _StringGuts.grow(_:)(43);
          swift_bridgeObjectRelease();
          strcpy((char *)v56, "Reality file '");
          HIBYTE(v56[1]) = -18;
          v45._countAndFlagsBits = v58;
          v45._object = v51;
          String.append(_:)(v45);
          v46._object = (void *)0x800000021BE92AA0;
          v46._countAndFlagsBits = 0xD00000000000001BLL;
          String.append(_:)(v46);
          v47 = v56[1];
          lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
          swift_allocError();
          *(_QWORD *)v17 = v56[0];
          *(_QWORD *)(v17 + 8) = v47;
LABEL_48:
          *(_BYTE *)(v17 + 16) = 3;
          return swift_willThrow();
        }
        v32 = v31[5];
        v49 = v31[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_21BE411F0;
        *(_QWORD *)(v33 + 32) = v49;
        *(_QWORD *)(v33 + 40) = v32;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_21BE411F0;
        *(_QWORD *)(v33 + 32) = v30;
        *(_QWORD *)(v33 + 40) = v29;
      }
    }
    else
    {
      v33 = specialized static __REAssetBundle.getSceneNamesFromRealityFile(realityFile:)();
    }
    outlined copy of __REAssetBundle.LoadOptions.ContentRequest(v30, v29);
    swift_bridgeObjectRetain();
    v34 = static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(v33, v52, a6, a4, v58, (uint64_t)v51, a1, v53, (uint64_t)v23, a7);
    if (v55)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    v36 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
    {
      v56[0] = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v38 = 32;
      v39 = v37;
      do
      {
        swift_retain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v38 += 24;
        --v39;
      }
      while (v39);
      a3 = v56[0];
      v56[0] = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v40 = 48;
      do
      {
        swift_retain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v40 += 24;
        --v37;
      }
      while (v37);
      v41 = v56[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!(a3 >> 62))
      {
LABEL_31:
        v42 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!(v41 >> 62))
        {
LABEL_32:
          v43 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_33:
          if (v43 < v42)
            v42 = v43;
          if (v42)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
            v44 = static _DictionaryStorage.allocate(capacity:)();
          }
          else
          {
            v44 = MEMORY[0x24BEE4B00];
          }
          v56[0] = v44;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a3, v41, 1, v56);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a4 = v56[0];
          RERealityFileGetMinVersionFromRealityFileHeader();
          __REAssetBundle.ExportOptions.PlatformOS.init(rawValue:)(5459817, 0xE300000000000000, v56);
          switch(v56[1])
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
              outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v56[0], v56[1]);
              if (one-time initialization token for __sdkBundleVersion == -1)
                goto LABEL_44;
              goto LABEL_50;
            case 5:
              break;
            default:
              outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v56[0], v56[1]);
              break;
          }
          swift_release();
          swift_bridgeObjectRelease();
          v56[0] = 0;
          v56[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
          swift_allocError();
          v18 = 0xD00000000000002ELL;
          v19 = "Could not convert iOS to RERealityFilePlatform";
          goto LABEL_47;
        }
LABEL_40:
        swift_bridgeObjectRetain();
        v43 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v41 = MEMORY[0x24BEE4AF8];
      a3 = MEMORY[0x24BEE4AF8];
      if (!(MEMORY[0x24BEE4AF8] >> 62))
        goto LABEL_31;
    }
    swift_bridgeObjectRetain_n();
    v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!(v41 >> 62))
      goto LABEL_32;
    goto LABEL_40;
  }
  __break(1u);
LABEL_50:
  swift_once();
LABEL_44:
  String.utf8CString.getter();
  v48 = RERealityFileHeaderCreateFromVersionInfo();
  swift_release();
  outlined init with copy of __REAssetService((uint64_t)v52, (uint64_t)v56);
  return __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(a3, (uint64_t)v56, a4, v48, v50);
}

uint64_t static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t Request;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Stats;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t AssetDescriptorWithEntryNameAndPostLoad;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[8];
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  char v71[16];
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v11 = v10;
  v62 = a6;
  v63 = a8;
  v64 = a4;
  v65 = a7;
  v61 = a5;
  v75 = *MEMORY[0x24BDAC8D0];
  v15 = a2[3];
  v16 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v15);
  v70 = *(_BYTE *)a10;
  v72 = a2;
  v73 = a10;
  Request = type metadata accessor for __AssetLoadRequest();
  __REAssetService.performOnEngineQueue<A>(with:_:)(&v70, (void (*)(uint64_t))partial apply for closure #1 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)v71, v15, Request, v16, (uint64_t)&v67);
  if (!v10)
  {
    v59 = a2;
    v56 = a1;
    v55 = a3;
    v57 = (unsigned __int8 *)a10;
    v58 = 0;
    v18 = v67;
    v19 = *(_QWORD *)(a10 + 120);
    v20 = v64;
    if (v19)
    {
      Stats = REAssetLoadRequestGetStats();
      type metadata accessor for __AssetLoadRequest.Statistics();
      v22 = swift_allocObject();
      RERetain();
      *(_QWORD *)(v22 + 16) = Stats;
      v23 = (_QWORD *)(v19 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
      swift_beginAccess();
      v24 = swift_retain();
      MEMORY[0x220768F0C](v24);
      if (*(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
    }
    v60 = v18;
    v25 = *(_QWORD *)(a9 + 16);
    if (v25)
    {
      swift_bridgeObjectRetain();
      v26 = 0;
      v27 = MEMORY[0x24BEE4AF8];
      v28 = v20;
      do
      {
        v31 = *(_QWORD *)(a9 + 8 * v26 + 32);
        if (RERealityFileAssetDescriptorAsSceneDescriptor())
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v74 = v27;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
            v27 = v74;
          }
          v30 = *(_QWORD *)(v27 + 16);
          v29 = *(_QWORD *)(v27 + 24);
          if (v30 >= v29 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
            v27 = v74;
          }
          *(_QWORD *)(v27 + 16) = v30 + 1;
          *(_QWORD *)(v27 + 8 * v30 + 32) = v31;
          v20 = v28;
        }
        ++v26;
      }
      while (v25 != v26);
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = MEMORY[0x24BEE4AF8];
    }
    v74 = 0;
    v33 = v59;
    v34 = v59[3];
    v35 = v59[4];
    __swift_project_boxed_opaque_existential_1(v59, v34);
    (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v34, v35);
    AssetDescriptorWithEntryNameAndPostLoad = RERealityFileCreateAssetDescriptorWithEntryNameAndPostLoad();
    if (!AssetDescriptorWithEntryNameAndPostLoad)
    {
      swift_release();
      v44 = v74;
      if (v74)
      {
        type metadata accessor for CFErrorRef(0);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
        swift_allocError();
        *v45 = v44;
      }
      else
      {
        lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
        swift_allocError();
        *(_QWORD *)v49 = 0xD000000000000029;
        *(_QWORD *)(v49 + 8) = 0x800000021BE92BA0;
        *(_BYTE *)(v49 + 16) = 3;
      }
      v11 = v60;
      swift_willThrow();
      goto LABEL_25;
    }
    v37 = AssetDescriptorWithEntryNameAndPostLoad;
    v11 = v59[3];
    v38 = v59[4];
    v39 = __swift_project_boxed_opaque_existential_1(v59, v11);
    v65 = &v55;
    v40 = v57;
    v69 = *v57;
    MEMORY[0x24BDAC7A8](v39);
    v54[2] = v33;
    v54[3] = v20;
    v41 = v60;
    v54[4] = v60;
    v54[5] = v27;
    v54[6] = v56;
    v54[7] = v37;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(__REAsset, [__REAssetDescriptor], OpaquePointer)]);
    v43 = v58;
    __REAssetService.performOnEngineQueue<A>(with:_:)(&v69, (void (*)(uint64_t))partial apply for closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)v54, v11, v42, v38, (uint64_t)&v66);
    if (v43)
    {
      swift_release();
      RERelease();
LABEL_25:
      swift_release();
      return v11;
    }
    swift_release();
    v46 = v66;
    v47 = v33[3];
    v48 = v33[4];
    __swift_project_boxed_opaque_existential_1(v33, v47);
    __REAssetService.asManager.getter(v47, v48);
    v68 = *v40;
    __REAssetManager.waitForLoadRequest(_:with:)(v41, &v68);
    v51 = swift_release();
    MEMORY[0x24BDAC7A8](v51);
    v52 = v61;
    v54[-8] = v33;
    v54[-7] = v52;
    v54[-6] = v62;
    v54[-5] = v37;
    v53 = v63;
    v54[-4] = v40;
    v54[-3] = v53;
    v54[-2] = v55;
    v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit9__REAssetC_Say0D10Foundation02__F10DescriptorCGs13OpaquePointerVtG_AH_AlI07RESceneH0CtsAE_pTg5((void (*)(__int128 *__return_ptr, uint64_t *, uint64_t *))partial apply for closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)&v54[-10], v46);
    swift_bridgeObjectRelease();
    RERelease();
    swift_release();
  }
  return v11;
}

uint64_t closure #1 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v7[5];

  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  result = specialized __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(v7, *(_BYTE *)(a2 + 99), *(_BYTE *)(a2 + 98));
  if (!v3)
    *a3 = result;
  return result;
}

_QWORD *closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  _QWORD v21[10];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;

  v9 = (_QWORD *)a1;
  v10 = a7;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
  {
    v21[6] = a5;
    v21[7] = a6;
    v21[8] = a4;
    v25 = a7;
    swift_bridgeObjectRetain();
    v13 = 0;
    v22 = xmmword_21BE411F0;
    do
    {
      v14 = *(_QWORD *)(a2 + 8 * v13 + 32);
      v23 = v22;
      v24 = v14;
      v15 = v9[3];
      v16 = v9[4];
      __swift_project_boxed_opaque_existential_1(v9, v15);
      (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
      if (REAssetHandleGetOrCreateImmutableWithAssetDescriptors())
        REAssetLoadRequestAddAsset();
      ++v13;
    }
    while (v11 != v13);
    a1 = swift_bridgeObjectRelease();
    v10 = v25;
    v7 = v21[9];
  }
  MEMORY[0x24BDAC7A8](a1);
  v21[2] = v17;
  v21[3] = v9;
  v21[4] = v18;
  v21[5] = a3;
  result = specialized Sequence.compactMap<A>(_:)((void (*)(__int128 *__return_ptr, uint64_t *))partial apply for closure #2 in closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)v21, v19);
  if (!v7)
    *v10 = result;
  return result;
}

uint64_t closure #2 in closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t result;
  void **v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t ImmutableWithAssetDescriptors;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v48 = *a1;
  if (RESceneDescriptorGetSceneName())
  {
    v6 = String.init(cString:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0xE000000000000000;
  }
  v49 = *(_QWORD *)(a2 + 16);
  if (!v49)
  {
LABEL_28:
    result = swift_bridgeObjectRelease();
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  v45 = a4;
  v9 = a2 + 32;
  swift_bridgeObjectRetain();
  v10 = 0;
  v50 = v6;
  v51 = v8;
  v46 = a2 + 32;
  while (1)
  {
    v11 = (uint64_t *)(v9 + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    v14 = v6 == *v11 && v8 == v12;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_30;
    v15 = one-time initialization token for usdExtensions;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15 != -1)
      swift_once();
    v16 = static LoadUtilities.usdExtensions;
    v53 = *(_QWORD *)(static LoadUtilities.usdExtensions + 16);
    if (!v53)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v17 = *(_QWORD *)(static LoadUtilities.usdExtensions + 32);
    v18 = *(void **)(static LoadUtilities.usdExtensions + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 46;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits = v17;
    v20._object = v18;
    String.append(_:)(v20);
    v6 = v50;
    swift_bridgeObjectRelease();
    v8 = v51;
    swift_bridgeObjectRelease();
    if (v50 == v13 && v51 == v12)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    result = swift_bridgeObjectRelease();
    if (v53 != 1)
    {
      v22 = (void **)(v16 + 56);
      v23 = 1;
      while (v23 < *(_QWORD *)(v16 + 16))
      {
        v25 = (uint64_t)*(v22 - 1);
        v24 = *v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26._countAndFlagsBits = 46;
        v26._object = (void *)0xE100000000000000;
        String.append(_:)(v26);
        swift_bridgeObjectRetain();
        v27._countAndFlagsBits = v25;
        v8 = v51;
        v27._object = v24;
        String.append(_:)(v27);
        v6 = v50;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v50 == v13 && v51 == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_29;
        ++v23;
        result = swift_bridgeObjectRelease();
        v22 += 2;
        if (v53 == v23)
          goto LABEL_6;
      }
      __break(1u);
LABEL_47:
      __break(1u);
      return result;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v46;
LABEL_7:
    if (++v10 == v49)
    {
      swift_bridgeObjectRelease();
      a4 = v45;
      goto LABEL_28;
    }
  }
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  RERealityFileAssetDescriptorGetFilename();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v29 = a3[3];
  v30 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v29);
  v31 = *(void (**)(uint64_t, uint64_t))(v30 + 32);
  v31(v29, v30);
  result = REAssetManagerResolveAssetDescriptor();
  if (!result)
    goto LABEL_47;
  v32 = inited + 32;
  *(_QWORD *)(inited + 32) = result;
  v31(v29, v30);
  ImmutableWithAssetDescriptors = REAssetHandleGetOrCreateImmutableWithAssetDescriptors();
  if (ImmutableWithAssetDescriptors)
  {
    v34 = ImmutableWithAssetDescriptors;
    v35 = (id)REAssetGetType();
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

    if (v36 == 0x656E656353 && v38 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v40 & 1) == 0)
        goto LABEL_43;
    }
    REAssetSetNetworkSharingMode();
LABEL_43:
    REAssetLoadRequestAddAsset();
    type metadata accessor for __REAsset();
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = v34;
    v52 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v44 = *(_QWORD *)(inited + 32);
    RERetain();
    type metadata accessor for __REAssetDescriptor();
    *(_QWORD *)(swift_allocObject() + 16) = v44;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    *v45 = v43;
    v45[1] = v52;
    v45[2] = v48;
    RERelease();
    swift_setDeallocating();
    return swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000033;
  *(_QWORD *)(v41 + 8) = 0x800000021BE92C20;
  *(_BYTE *)(v41 + 16) = 3;
  swift_willThrow();
  for (i = *(_QWORD *)(inited + 16); i; --i)
  {
    v32 += 8;
    RERelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  void *v31;
  id v32;
  Class isa;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 *v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  v11 = v10;
  v55 = a8;
  v54 = a7;
  v56 = a6;
  v59 = a9;
  v60 = (__int128 *)a5;
  v65 = *MEMORY[0x24BDAC8D0];
  v53 = type metadata accessor for UUID();
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v57 = a1[1];
  v58 = a1[2];
  swift_retain_n();
  v19 = (void *)REAssetHandleCopyCompiledExtension();
  v20 = String.init(_:)(v19);
  if (v20._countAndFlagsBits == 0x64656C69706D6F63 && v20._object == (void *)0xED0000656E656373)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      goto LABEL_6;
  }
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)&v63);
  v28 = specialized Scene.init(_:assetService:)(v18, &v63);
  if (!v10)
  {
    v29 = v28;
    specialized static __REAssetBundle.registerAnchoringComponentARReferences(scene:realityFilename:assetDescriptor:assetService:)(v28, a3, a4, (uint64_t)v60, a2);
    v50 = *v56;
    v51 = v50 == 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
    inited = swift_initStackObject();
    v49 = xmmword_21BE411F0;
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v31 = (void *)*MEMORY[0x24BE26358];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BE26358];
    v32 = v31;
    *(NSNumber *)(inited + 40) = Bool._bridgeToObjectiveC()();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    v62 = 0;
    RERealityFileGetMinVersionFromRealityFileHeader();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    LOBYTE(inited) = RERealityFilePostLoadProcessing();

    if ((inited & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
      v34 = swift_initStackObject();
      *(_OWORD *)(v34 + 16) = v49;
      *(_QWORD *)(v34 + 32) = v60;
      LOBYTE(v63) = v50;
      v35 = specialized static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(v29, v34, (uint64_t)a2, (unsigned __int8 *)&v63);
      v38 = v35;
      swift_bridgeObjectRelease();
      if ((v38 & 1) != 0)
      {
        v63 = 0;
        v64 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v63 = 0x3A79726F6D656DLL;
        v64 = 0xE700000000000000;
        UUID.init()();
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v39 = v53;
        v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v39);
        v41._countAndFlagsBits = 0x656C69706D6F632ELL;
        v41._object = (void *)0xEE00656E65637364;
        String.append(_:)(v41);
        v42 = v29;
        v44 = v63;
        v43 = v64;
        v45 = a2[3];
        v55 = a2[4];
        v46 = __swift_project_boxed_opaque_existential_1(a2, v45);
        v60 = &v49;
        v61 = *v56;
        MEMORY[0x24BDAC7A8](v46);
        *((_QWORD *)&v49 - 4) = v42;
        *((_QWORD *)&v49 - 3) = a2;
        *((_QWORD *)&v49 - 2) = v44;
        *((_QWORD *)&v49 - 1) = v43;
        v47 = type metadata accessor for __REAsset();
        __REAssetService.performOnEngineQueue<A>(with:_:)(&v61, (void (*)(uint64_t))partial apply for closure #1 in closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)(&v49 - 3), v45, v47, v55, (uint64_t)&v63);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v18 = v63;
        goto LABEL_7;
      }
LABEL_6:
      swift_release();
LABEL_7:
      v23 = v59;
      v24 = v57;
      *v59 = v18;
      v23[1] = v24;
      swift_retain();
      swift_bridgeObjectRetain();
      v25 = v58;
      RERetain();
      type metadata accessor for RESceneDescriptor();
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v25;
      result = swift_release();
      v23[2] = v26;
      return result;
    }
    v36 = v62;
    if (v62)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v11 = swift_allocError();
      *v37 = v36;
    }
    else
    {
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      v11 = swift_allocError();
      *(_QWORD *)v48 = 0xD000000000000026;
      *(_QWORD *)(v48 + 8) = 0x800000021BE92BD0;
      *(_BYTE *)(v48 + 16) = 3;
    }
    swift_willThrow();
    swift_release();
  }
  result = swift_release();
  *a10 = v11;
  return result;
}

uint64_t closure #1 in closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v17);
  outlined init with copy of __REAssetService((uint64_t)v17, (uint64_t)v14);
  type metadata accessor for __REAsset();
  v6 = swift_allocObject();
  v8 = v15;
  v7 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  v9 = *(void (**)(uint64_t, uint64_t))(v7 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  v9(v8, v7);
  String.utf8CString.getter();
  v10 = REAssetManagerSceneAssetCreate();
  swift_release();
  if (v10)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 16) = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    result = swift_release();
    *a4 = v6;
  }
  else
  {
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(_QWORD *)v12 = a2;
    *(_QWORD *)(v12 + 8) = a3;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_BYTE *)(v12 + 32) = 0;
    swift_willThrow();
    swift_deallocPartialClassInstance();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return swift_release();
  }
  return result;
}

uint64_t __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int32 v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t *v62;
  char *v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  Class isa;
  Class v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t SceneName;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  Class v93;
  unint64_t v94;
  unint64_t v95;
  Swift::String v96;
  Swift::String v97;
  __int128 v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  id v101;
  uint64_t v102;
  uint64_t countAndFlagsBits;
  void *v104;
  unsigned int v105;
  os_log_type_t v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  id v116;
  char *v117;
  id v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t k;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t j;
  id v129;
  NSURL *v130;
  void *v131;
  void *v132;
  unsigned int v133;
  id v134;
  id v135;
  void *v136;
  id v137;
  NSURL *v138;
  void *v139;
  void *v140;
  NSURL *v141;
  void *v142;
  void *v143;
  unsigned int v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t i;
  _QWORD v152[2];
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);
  uint64_t v160;
  __n128 v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint8_t *v169;
  _QWORD *v170;
  uint64_t v171;
  id v172;
  _QWORD v173[6];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _OWORD v186[2];
  char v187[8];
  _BYTE v188[16];
  char v189[8];
  char v190[8];
  _BYTE v191[16];
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  _QWORD v198[4];

  v163 = a1;
  v198[1] = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for UUID();
  v168 = *(_QWORD *)(v3 - 8);
  v169 = (uint8_t *)v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v152 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v166 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v162 = (char *)v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v152 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v152 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v152 - v15;
  v17 = a2[7];
  v184 = a2[6];
  v185 = v17;
  v186[0] = a2[8];
  *(_OWORD *)((char *)v186 + 9) = *(__int128 *)((char *)a2 + 137);
  v18 = a2[3];
  v180 = a2[2];
  v181 = v18;
  v19 = a2[5];
  v182 = a2[4];
  v183 = v19;
  v20 = a2[1];
  v178 = *a2;
  v179 = v20;
  v21 = RERealityFileWritingParametersCreate();
  outlined init with take of Transform?((uint64_t)&v182 + 8, (uint64_t)v191, &demangling cache variable for type metadata for Int?);
  outlined init with take of Transform?((uint64_t)v191, (uint64_t)&v192, &demangling cache variable for type metadata for Int?);
  if ((v193 & 1) != 0)
  {
    v22 = v181;
    if ((_QWORD)v181 == 5)
      goto LABEL_13;
    v157 = v10;
    v164 = v21;
    v165 = v16;
    v160 = v6;
    v23 = *((_QWORD *)&v180 + 1);
    v24 = *((_QWORD *)&v181 + 1);
    v25 = v182;
    if ((unint64_t)(v181 - 2) >= 3)
    {
      if ((_QWORD)v181)
      {
        if ((_QWORD)v181 == 1)
        {
          outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(*((uint64_t *)&v180 + 1), 1uLL);
        }
        else
        {
          outlined copy of __REAssetBundle.ExportOptions.PlatformOS(*((uint64_t *)&v180 + 1), v181);
          outlined copy of __REAssetBundle.ExportOptions.PlatformOS(v23, v22);
        }
      }
      else
      {
        outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(*((uint64_t *)&v180 + 1), 0);
      }
    }
    else
    {
      outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(*((uint64_t *)&v180 + 1), v181);
    }
    v26.n128_u64[0] = v24;
    v26.n128_u32[2] = v25;
    v161 = v26;
    v29 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v30 = MEMORY[0x22076F3F8](v29 + 32, v161);
    swift_release();
    outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v23, v22);
    v21 = v164;
    v31 = RERealityFileWritingParametersSetMajorVersion();
    v6 = v160;
    v16 = v165;
    v10 = v157;
    if ((v31 & 1) != 0)
      goto LABEL_13;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_QWORD *)v28 = v30;
LABEL_30:
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 1;
    swift_willThrow();
    return RERelease();
  }
  v27 = v192;
  if ((RERealityFileWritingParametersSetMajorVersion() & 1) == 0)
  {
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_QWORD *)v28 = v27;
    goto LABEL_30;
  }
LABEL_13:
  RERealityFileWritingParametersSetRestrictedToSeed();
  v32 = v181;
  if ((_QWORD)v181 == 5 || ((v182 | ((unint64_t)BYTE4(v182) << 32)) & 0x100000000) == 0)
    goto LABEL_17;
  if ((unint64_t)v181 < 5)
  {
    RERealityFileWritingParametersSetTargetPlatform();
LABEL_17:
    v157 = v10;
    v165 = v16;
    v33 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v34 = objc_msgSend(v33, sel_bundleIdentifier);

    if (v34)
    {
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v37 = v36;

    }
    else
    {
      v35 = 0;
      v37 = 0;
    }
    if (v37
      && (v35 == 0xD000000000000019 && v37 == 0x800000021BE81950
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
       || v35 == 0xD00000000000001CLL && v37 == 0x800000021BE81970
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v38 = v21;
      swift_bridgeObjectRelease();
      v41 = v6;
      RERealityFileWritingParametersSetCrossEngineValidationDisablement();
    }
    else
    {
      v38 = v21;
      v41 = v6;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      swift_arrayDestroy();
    }
    RERealityFileWritingParametersSetMakeSnapshotOfDynamicTextures();
    v164 = v38;
    v42 = RERealityFileWriterCreateWithParameters();
    v43 = swift_allocObject();
    *(_BYTE *)(v43 + 16) = 1;
    v152[1] = v43 + 16;
    outlined init with copy of __REAssetBundle((uint64_t)v170, (uint64_t)&v174);
    v44 = swift_allocObject();
    v45 = v185;
    *(_OWORD *)(v44 + 120) = v184;
    *(_OWORD *)(v44 + 136) = v45;
    *(_OWORD *)(v44 + 152) = v186[0];
    *(_OWORD *)(v44 + 161) = *(_OWORD *)((char *)v186 + 9);
    v46 = v181;
    *(_OWORD *)(v44 + 56) = v180;
    *(_OWORD *)(v44 + 72) = v46;
    v47 = v183;
    *(_OWORD *)(v44 + 88) = v182;
    *(_OWORD *)(v44 + 104) = v47;
    v48 = v179;
    *(_OWORD *)(v44 + 24) = v178;
    *(_OWORD *)(v44 + 40) = v48;
    v49 = v175;
    *(_OWORD *)(v44 + 184) = v174;
    *(_OWORD *)(v44 + 200) = v49;
    v50 = v177;
    *(_OWORD *)(v44 + 216) = v176;
    *(_QWORD *)(v44 + 16) = v42;
    *(_OWORD *)(v44 + 232) = v50;
    *(_QWORD *)(v44 + 248) = v43;
    v173[4] = partial apply for closure #1 in __REAssetBundle.writeWithCPlusPlus(to:with:);
    v173[5] = v44;
    v51 = MEMORY[0x24BDAC760];
    v173[0] = MEMORY[0x24BDAC760];
    v173[1] = 1107296256;
    v173[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned RESceneRemappingCallbackResult);
    v173[3] = &block_descriptor_42;
    v52 = _Block_copy(v173);
    v158 = v43;
    swift_retain();
    outlined retain of __REAssetBundle.ExportOptions((uint64_t)&v178);
    swift_release();
    RERealityFileWriterAddSceneRemappingCallback();
    _Block_release(v52);
    v53 = *(_QWORD *)&v186[1];
    if (*(_QWORD *)&v186[1])
    {
      v54 = swift_allocObject();
      *(_QWORD *)(v54 + 16) = v53;
      *(_QWORD *)&v176 = partial apply for closure #2 in __REAssetBundle.writeWithCPlusPlus(to:with:);
      *((_QWORD *)&v176 + 1) = v54;
      *(_QWORD *)&v174 = v51;
      *((_QWORD *)&v174 + 1) = 1107296256;
      *(_QWORD *)&v175 = thunk for @escaping @callee_guaranteed (@guaranteed CFMutableArrayRef, @guaranteed CFMutableArrayRef) -> ();
      *((_QWORD *)&v175 + 1) = &block_descriptor_16_0;
      v55 = _Block_copy(&v174);
      swift_bridgeObjectRetain();
      swift_release();
      v56 = v42;
      RERealityFileWriterAddRemappingCustomizationCallback();
    }
    else
    {
      v56 = v42;
      if (!((unint64_t)v185 | *(_QWORD *)&v186[0]))
        goto LABEL_37;
      v57 = (_OWORD *)swift_allocObject();
      v58 = v185;
      v57[7] = v184;
      v57[8] = v58;
      v57[9] = v186[0];
      *(_OWORD *)((char *)v57 + 153) = *(_OWORD *)((char *)v186 + 9);
      v59 = v181;
      v57[3] = v180;
      v57[4] = v59;
      v60 = v183;
      v57[5] = v182;
      v57[6] = v60;
      v61 = v179;
      v57[1] = v178;
      v57[2] = v61;
      *(_QWORD *)&v176 = partial apply for closure #3 in __REAssetBundle.writeWithCPlusPlus(to:with:);
      *((_QWORD *)&v176 + 1) = v57;
      *(_QWORD *)&v174 = v51;
      *((_QWORD *)&v174 + 1) = 1107296256;
      *(_QWORD *)&v175 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed CFMutableArrayRef, @guaranteed CFMutableArrayRef) -> ();
      *((_QWORD *)&v175 + 1) = &block_descriptor_10_0;
      v55 = _Block_copy(&v174);
      outlined retain of __REAssetBundle.ExportOptions((uint64_t)&v178);
      swift_release();
      RERealityFileWriterAddPathRemappingCustomizationCallback();
    }
    _Block_release(v55);
LABEL_37:
    static __REAssetBundle.temporaryURL.getter(v13);
    UUID.init()();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v62 = v169;
    dispatch thunk of CustomStringConvertible.description.getter();
    (*(void (**)(char *, uint8_t *))(v168 + 8))(v5, v62);
    v63 = v165;
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    v159 = *(void (**)(char *, uint64_t))(v166 + 8);
    v159(v13, v41);
    v173[0] = 0;
    URL.absoluteString.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v64 = RERealityFileWriterOpen();
    swift_release();
    if (v64)
    {
      v65 = v170;
      v66 = v170[5];
      v67 = v170[6];
      __swift_project_boxed_opaque_existential_1(v170 + 2, v66);
      __REAssetService.asManager.getter(v66, v67);
      v68 = v65[1];
      v69 = v178;
      v70 = swift_bridgeObjectRetain();
      v71 = v69;
      v72 = v167;
      specialized __REAssetManager.loadAssetsAndDependencies<A>(_:with:)(v70, v71);
      v152[0] = v72;
      if (v72)
      {
        swift_bridgeObjectRelease();
        swift_release();
        $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)();
        v159(v63, v41);
        swift_release();
        RERelease();
        return RERelease();
      }
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of Transform?((uint64_t)&v183 + 8, (uint64_t)v190, &demangling cache variable for type metadata for [String]?);
      outlined init with take of Transform?((uint64_t)v190, (uint64_t)&v194, &demangling cache variable for type metadata for [String]?);
      if (v194)
      {
        isa = Array._bridgeToObjectiveC()().super.isa;
        RERealityFileWriterSetConfigurationSetNames();

      }
      outlined init with take of Transform?((uint64_t)&v184, (uint64_t)v189, &demangling cache variable for type metadata for [String]?);
      outlined init with take of Transform?((uint64_t)v189, (uint64_t)&v195, &demangling cache variable for type metadata for [String]?);
      if (v195)
      {
        v79 = Array._bridgeToObjectiveC()().super.isa;
        RERealityFileWriterSetDefaultConfigurationNames();

      }
      outlined init with take of Transform?((uint64_t)&v178 + 8, (uint64_t)v188, &demangling cache variable for type metadata for Int?);
      outlined init with take of Transform?((uint64_t)v188, (uint64_t)&v196, &demangling cache variable for type metadata for Int?);
      if ((v197 & 1) == 0 && !v196)
        RERealityFileWriterSetCompressionMethod();
      if (v68 >> 62)
      {
        swift_bridgeObjectRetain();
        v80 = _CocoaArrayWrapper.endIndex.getter();
        v155 = v56;
        if (v80)
          goto LABEL_52;
      }
      else
      {
        v80 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v155 = v56;
        if (v80)
        {
LABEL_52:
          if (v80 < 1)
            __break(1u);
          v81 = 0;
          v168 = v68 & 0xC000000000000001;
          v82 = (char *)MEMORY[0x24BEE4AF8];
          v153 = (uint64_t)&v184 + 8;
          v156 = MEMORY[0x24BEE4AD0] + 8;
          v169 = (uint8_t *)v80;
          v160 = v41;
          v154 = v68;
          while (1)
          {
            if (v168)
              MEMORY[0x220769770](v81, v68);
            else
              swift_retain();
            v83 = v65[7];
            if ((v83 & 0xC000000000000001) != 0)
            {
              v84 = (void *)__CocoaDictionary.lookup(_:)();
              if (v84)
              {
                v172 = v84;
                type metadata accessor for RESceneDescriptor();
                swift_unknownObjectRetain();
                swift_dynamicCast();
                v85 = v174;
                swift_unknownObjectRelease();
                if (v85)
                  goto LABEL_66;
              }
            }
            else if (*(_QWORD *)(v83 + 16))
            {
              v86 = specialized __RawDictionaryStorage.find<A>(_:)();
              if ((v87 & 1) != 0)
              {
                v85 = *(_QWORD *)(*(_QWORD *)(v83 + 56) + 8 * v86);
                swift_retain();
                if (v85)
                {
LABEL_66:
                  v167 = REAssetWithMetadataCreate();
                  SceneName = RESceneDescriptorGetSceneName();
                  v162 = v82;
                  v161.n128_u64[0] = v85;
                  if (SceneName)
                  {
                    v89 = String.init(cString:)();
                    v91 = v90;
                  }
                  else
                  {
                    v89 = 0;
                    v91 = 0xE000000000000000;
                  }
                  RESceneDescriptorGetSceneIdentifier();
                  String.init(cString:)();
                  String.utf8CString.getter();
                  String.utf8CString.getter();
                  swift_bridgeObjectRelease();
                  REAssetWithMetadataSetSceneMetadata();
                  swift_release();
                  swift_release();
                  REAssetWithMetadataSetTreatAsScene();
                  outlined init with take of Transform?(v153, (uint64_t)v187, &demangling cache variable for type metadata for [String : [String]]?);
                  outlined init with take of Transform?((uint64_t)v187, (uint64_t)v198, &demangling cache variable for type metadata for [String : [String]]?);
                  if (v198[0])
                  {
                    v41 = v160;
                    v82 = v162;
                    if (*(_QWORD *)(v198[0] + 16)
                      && (specialized __RawDictionaryStorage.find<A>(_:)(v89, v91), (v92 & 1) != 0))
                    {
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      v93 = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      REAssetWithMetadataSetConfigurationNames();

                      v65 = v170;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      v65 = v170;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    v41 = v160;
                    v65 = v170;
                    v82 = v162;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v82 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v82 + 2) + 1, 1, v82);
                  v95 = *((_QWORD *)v82 + 2);
                  v94 = *((_QWORD *)v82 + 3);
                  if (v95 >= v94 >> 1)
                    v82 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v94 > 1), v95 + 1, 1, v82);
                  *((_QWORD *)v82 + 2) = v95 + 1;
                  *(_QWORD *)&v82[8 * v95 + 32] = v167;
                  swift_release();
                  swift_release();
                  v68 = v154;
                  goto LABEL_55;
                }
              }
            }
            swift_release();
LABEL_55:
            if (v169 == (uint8_t *)++v81)
              goto LABEL_85;
          }
        }
      }
      v82 = (char *)MEMORY[0x24BEE4AF8];
LABEL_85:
      swift_bridgeObjectRelease();
      RERealityFileAssetWriteReportCreate();
      if ((RERealityFileWriterWriteAssetArrayAndDependencies() & 1) != 0)
      {
        swift_beginAccess();
        RERealityFileWriterCertifyFreeOfChangeSceneActions();
        if (RERealityFileWriterClose())
        {
          v170 = (_QWORD *)objc_opt_self();
          v101 = objc_msgSend(v170, sel_defaultManager);
          v102 = v163;
          countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
          v104 = (void *)MEMORY[0x220768C3C](countAndFlagsBits);
          swift_bridgeObjectRelease();
          v105 = objc_msgSend(v101, sel_fileExistsAtPath_, v104);

          if (v105)
          {
            v106 = static os_log_type_t.info.getter();
            v107 = v157;
            (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v157, v102, v41);
            type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
            v108 = static OS_os_log.default.getter();
            v109 = v106;
            if (os_log_type_enabled(v108, v106))
            {
              v110 = (uint8_t *)swift_slowAlloc();
              v111 = (void *)swift_slowAlloc();
              v160 = v41;
              v162 = v82;
              v112 = v111;
              v172 = v111;
              *(_DWORD *)v110 = 136315138;
              v169 = v110 + 4;
              v113 = URL.lastPathComponent.getter();
              v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, (uint64_t *)&v172);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v159(v107, v160);
              _os_log_impl(&dword_21B9AA000, v108, v109, "Deleting file %s that already exists at dest", v110, 0xCu);
              swift_arrayDestroy();
              v115 = v112;
              v82 = v162;
              v41 = v160;
              MEMORY[0x220772F44](v115, -1, -1);
              MEMORY[0x220772F44](v110, -1, -1);

            }
            else
            {

              v159(v107, v41);
            }
            v125 = v170;
            v129 = objc_msgSend(v170, sel_defaultManager, v152[0]);
            URL._bridgeToObjectiveC()(v130);
            v132 = v131;
            v172 = 0;
            v133 = objc_msgSend(v129, sel_removeItemAtURL_error_, v131, &v172);

            if (v133)
            {
              v134 = v172;
            }
            else
            {
              v135 = v172;
              v136 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              v152[0] = 0;
            }
          }
          else
          {
            v125 = v170;
          }
          v137 = objc_msgSend(v125, sel_defaultManager, v152[0]);
          URL._bridgeToObjectiveC()(v138);
          v140 = v139;
          URL._bridgeToObjectiveC()(v141);
          v143 = v142;
          v172 = 0;
          v144 = objc_msgSend(v137, sel_moveItemAtURL_toURL_error_, v140, v142, &v172);

          if (v144)
          {
            v145 = v172;
            RERelease();
            v146 = *((_QWORD *)v82 + 2);
            if (!v146)
            {
              v117 = v165;
              goto LABEL_118;
            }
            swift_bridgeObjectRetain();
            v147 = 0;
            v117 = v165;
            do
            {
              ++v147;
              RERelease();
            }
            while (v146 != v147);
          }
          else
          {
            v148 = v172;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            RERelease();
            v149 = *((_QWORD *)v82 + 2);
            v117 = v165;
            if (!v149)
            {
LABEL_118:
              swift_bridgeObjectRelease();
              $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)();
              v159(v117, v41);
              swift_release();
              RERelease();
              return RERelease();
            }
            swift_bridgeObjectRetain();
            for (i = 0; i != v149; ++i)
              RERelease();
          }
        }
        else
        {
          v120 = v173[0];
          v117 = v165;
          if (v173[0])
          {
            type metadata accessor for CFErrorRef(0);
            lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
            swift_allocError();
            *v121 = v120;
          }
          else
          {
            lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
            swift_allocError();
            *(_QWORD *)v126 = 0xD000000000000018;
            *(_QWORD *)(v126 + 8) = 0x800000021BE92860;
            *(_BYTE *)(v126 + 16) = 3;
          }
          swift_willThrow();
          RERelease();
          v127 = *((_QWORD *)v82 + 2);
          if (!v127)
            goto LABEL_118;
          swift_bridgeObjectRetain();
          for (j = 0; j != v127; ++j)
            RERelease();
        }
      }
      else
      {
        v116 = (id)RERealityFileAssetWriteReportGetError();
        v117 = v165;
        if (v116)
        {
          v118 = v116;
          type metadata accessor for CFErrorRef(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
          swift_allocError();
          *v119 = v118;
        }
        else
        {
          lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
          swift_allocError();
          *(_OWORD *)v122 = xmmword_21BE6CF20;
          *(_BYTE *)(v122 + 16) = 4;
        }
        swift_willThrow();
        RERelease();
        v123 = *((_QWORD *)v82 + 2);
        if (!v123)
          goto LABEL_118;
        swift_bridgeObjectRetain();
        for (k = 0; k != v123; ++k)
          RERelease();
      }
      swift_bridgeObjectRelease();
      goto LABEL_118;
    }
    v73 = v173[0];
    v74 = v163;
    if (v173[0])
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v75 = swift_allocError();
      *v76 = v73;
      v77 = v162;
      (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v162, v74, v41);
      if (v75)
      {
LABEL_82:
        v100 = v159;
        v159(v77, v41);
        swift_willThrow();
        $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)();
        v100(v63, v41);
        swift_release();
        RERelease();
        return RERelease();
      }
    }
    else
    {
      v77 = v162;
      (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v162, v163, v41);
    }
    *(_QWORD *)&v174 = 0;
    *((_QWORD *)&v174 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v174 = 0xD000000000000026;
    *((_QWORD *)&v174 + 1) = 0x800000021BE92830;
    v96._countAndFlagsBits = URL.absoluteString.getter();
    String.append(_:)(v96);
    swift_bridgeObjectRelease();
    v97._countAndFlagsBits = 46;
    v97._object = (void *)0xE100000000000000;
    String.append(_:)(v97);
    v98 = v174;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_OWORD *)v99 = v98;
    *(_BYTE *)(v99 + 16) = 3;
    goto LABEL_82;
  }
  v39 = *((_QWORD *)&v180 + 1);
  lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
  swift_allocError();
  *(_QWORD *)v40 = v39;
  *(_QWORD *)(v40 + 8) = v32;
  *(_BYTE *)(v40 + 16) = 2;
  outlined copy of __REAssetBundle.ExportOptions.PlatformOS(v39, v32);
  swift_willThrow();
  return RERelease();
}

BOOL static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t closure #1 in __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v18[8];
  _OWORD v19[4];

  type metadata accessor for Scene();
  swift_allocObject();
  Scene.init(coreScene:)(a1);
  v10 = static __REAssetBundle.remapSceneAnchorsBeforeWrite(fileWriter:scene:)(a2);
  swift_release();
  v11 = a3[6];
  v12 = a3[8];
  v18[7] = a3[7];
  v19[0] = v12;
  *(_OWORD *)((char *)v19 + 9) = *(__int128 *)((char *)a3 + 137);
  v13 = a3[3];
  v18[2] = a3[2];
  v18[3] = v13;
  v14 = a3[5];
  v18[4] = a3[4];
  v18[5] = v14;
  v18[6] = v11;
  v15 = a3[1];
  v18[0] = *a3;
  v18[1] = v15;
  swift_allocObject();
  v16 = Scene.init(coreScene:)(a1);
  swift_beginAccess();
  LOBYTE(a2) = specialized static __REAssetBundle.remapSceneInteractionsBeforeWrite(with:assetService:fileWriter:scene:freeOfChangeSceneActions:)(v18, (_QWORD *)(a4 + 16), a2, v16, (BOOL *)(a5 + 16));
  swift_endAccess();
  swift_release();
  return (v10 | a2) & 1;
}

uint64_t static __REAssetBundle.remapSceneAnchorsBeforeWrite(fileWriter:scene:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  const char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t Object;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  const char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  void (*v43)(const char *, _QWORD);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  const char **v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;

  v63 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType??);
  MEMORY[0x24BDAC7A8](v2);
  v60 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Data.Deallocator();
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for __REAnchoring();
  MEMORY[0x24BDAC7A8](v71);
  v8 = (const char **)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  v61 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v56 = (uint64_t)&v53 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v73 = (uint64_t)&v53 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v70 = (uint64_t)&v53 - v17;
  v74 = type metadata accessor for __REAnchoringType();
  v18 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v69 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (!static __REAnchoring.registration)
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)v51 = xmmword_21BE7A4B0;
    *(_BYTE *)(v51 + 16) = 0;
LABEL_35:
    swift_willThrow();
    return v23 & 1;
  }
  result = RESceneGetComponentsOfCustomType();
  v68 = result;
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = v21;
    v75 = v1;
    if (v21)
    {
      v54 = v11;
      v58 = v6;
      v23 = 0;
      v24 = 0;
      v57 = *MEMORY[0x24BDCDB98];
      v53 = v21 - 1;
      v72 = v18;
      v59 = v8;
      v66 = v21;
LABEL_5:
      v55 = v23;
      if (v22 <= v24)
        v25 = v24;
      else
        v25 = v22;
      v67 = v25;
      v26 = v60;
      v27 = v73;
      while (v67 != v24)
      {
        Object = RECustomComponentGetObject();
        if (!Object)
        {
          lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
          swift_allocError();
          *(_QWORD *)v52 = 0;
          *(_QWORD *)(v52 + 8) = 0;
          *(_BYTE *)(v52 + 16) = 2;
          goto LABEL_35;
        }
        v29 = Object;
        outlined init with copy of (Int, URL)(Object + *(int *)(v71 + 20), v27, &demangling cache variable for type metadata for __REAnchoringType?);
        outlined init with copy of __RKEntityActionSpecification(v29, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
        v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
        v31 = v18;
        v32 = v74;
        v33 = v30;
        if (v30(v27, 1, v74) == 1)
        {
          v34 = *v8;
          if (v34)
          {
            v35 = strlen(v34);
            v36 = v58;
            (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v58, v57, v65);
            Data.Deallocator._deallocator.getter();
            v37 = v70;
            if (v35)
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              swift_retain();
              v38 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              v35 = specialized Data._Representation.init(_:count:)(v38, v35);
              v40 = v39;
              swift_release();
            }
            else
            {
              v43 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
              v43(v34, 0);
              swift_release();
              swift_release();
              v40 = 0xC000000000000000;
            }
            (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v65);
            type metadata accessor for JSONDecoder();
            swift_allocObject();
            JSONDecoder.init()();
            lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType, (uint64_t (*)(uint64_t))type metadata accessor for __REAnchoringType, (uint64_t)&protocol conformance descriptor for __REAnchoringType);
            v44 = v74;
            v45 = v75;
            dispatch thunk of JSONDecoder.decode<A>(_:from:)();
            v42 = v45;
            if (v45)
            {
              swift_release();
              outlined consume of Data._Representation(v35, v40);

              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v37, 1, 1, v44);
              v42 = 0;
            }
            else
            {
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v37, 0, 1, v44);
              swift_release();
              outlined consume of Data._Representation(v35, v40);
            }
            v26 = v60;
          }
          else
          {
            v37 = v70;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v70, 1, 1, v74);
            v42 = v75;
          }
          v8 = v59;
          outlined destroy of __RKEntityActionSpecification((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
          outlined destroy of BodyTrackingComponent?(v73, &demangling cache variable for type metadata for __REAnchoringType?);
          v32 = v74;
          v22 = v66;
        }
        else
        {
          outlined destroy of __RKEntityActionSpecification((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
          v41 = v27;
          v37 = v70;
          outlined init with take of __RKEntityActionSpecification(v41, v70, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v37, 0, 1, v32);
          v22 = v66;
          v42 = v75;
        }
        if (v33(v37, 1, v32) == 1)
        {
          v75 = v42;
          result = outlined destroy of BodyTrackingComponent?(v37, &demangling cache variable for type metadata for __REAnchoringType?);
          v18 = v72;
          v27 = v73;
        }
        else
        {
          v46 = v37;
          v47 = v69;
          outlined init with take of __RKEntityActionSpecification(v46, v69, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
          closure #1 in static __REAssetBundle.remapSceneAnchorsBeforeWrite(fileWriter:scene:)(v47, v63, v26);
          v18 = v72;
          v27 = v73;
          v75 = v42;
          if (v42)
          {
            outlined destroy of __RKEntityActionSpecification(v69, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
            return v23 & 1;
          }
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v26, 1, v62) != 1)
          {
            v48 = v56;
            outlined init with take of Transform?((uint64_t)v26, v56, &demangling cache variable for type metadata for __REAnchoringType?);
            v49 = (uint64_t)v54;
            outlined init with copy of (Int, URL)(v48, (uint64_t)v54, &demangling cache variable for type metadata for __REAnchoringType?);
            __REAnchoring.type.setter(v49);
            outlined destroy of BodyTrackingComponent?(v48, &demangling cache variable for type metadata for __REAnchoringType?);
            result = outlined destroy of __RKEntityActionSpecification(v69, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
            v23 = 1;
            if (v53 == v24++)
              return v23 & 1;
            goto LABEL_5;
          }
          outlined destroy of __RKEntityActionSpecification(v69, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
          result = outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for __REAnchoringType??);
        }
        if (v22 == ++v24)
        {
          LOBYTE(v23) = v55;
          return v23 & 1;
        }
      }
      __break(1u);
      goto LABEL_40;
    }
    LOBYTE(v23) = 0;
    return v23 & 1;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned RESceneRemappingCallbackResult)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

void *closure #2 in __REAssetBundle.writeWithCPlusPlus(to:with:)(void *result, void *a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v6 = result;
    v7 = a2;
    swift_bridgeObjectRetain();
    v8 = (uint64_t *)(a3 + 56);
    do
    {
      v9 = *(v8 - 3);
      v10 = *(v8 - 2);
      v11 = *(v8 - 1);
      v12 = *v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = (void *)MEMORY[0x220768C3C](v9, v10);
      objc_msgSend(v6, sel_addObject_, v13);

      v14 = (void *)MEMORY[0x220768C3C](v11, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_addObject_, v14);

      v8 += 4;
      --v3;
    }
    while (v3);

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFMutableArrayRef, @guaranteed CFMutableArrayRef) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, id);
  id v6;
  id v7;

  v5 = *(void (**)(id, id))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, v6);
  swift_release();

}

void closure #3 in __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t *__return_ptr, char *);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(char *);
  id v21;
  id v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.init(cString:)();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  v11 = (void (*)(uint64_t *__return_ptr, char *))a4[14];
  if (!v11)
  {
    v21 = a2;
    v22 = a3;
    v20 = (uint64_t (*)(char *))a4[16];
    if (v20)
      goto LABEL_6;
    goto LABEL_12;
  }
  v35 = a2;
  v12 = a3;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v11);
  v11(&v39, v10);
  v13 = v40;
  if (!v40)
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v11);
    v20 = (uint64_t (*)(char *))a4[16];
    if (v20)
      goto LABEL_6;
LABEL_12:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_14:

    return;
  }
  v38 = v7;
  v36 = v10;
  v15 = v41;
  v14 = v42;
  v34 = v12;
  v16 = v39;
  v17 = MEMORY[0x220768C3C](v39, v40);
  v37 = v8;
  v18 = (void *)v17;
  objc_msgSend(v35, sel_addObject_, v17);

  v19 = (void *)MEMORY[0x220768C3C](v15, v14);
  v10 = v36;
  v7 = v38;
  outlined consume of IKRig.Constraint?(v16, v13);
  objc_msgSend(v34, sel_addObject_, v19);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v11);

  v8 = v37;
  v20 = (uint64_t (*)(char *))a4[16];
  if (!v20)
    goto LABEL_12;
LABEL_6:
  v23 = (void *)a4[17];
  swift_retain();
  v24 = (char *)v20(v10);
  if (!v24)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v20);
    goto LABEL_14;
  }
  v34 = v23;
  v35 = v24;
  v36 = v10;
  v37 = v8;
  v38 = v7;
  v25 = *((_QWORD *)v24 + 2);
  if (v25)
  {
    v26 = (uint64_t *)(v35 + 56);
    do
    {
      v27 = *(v26 - 3);
      v28 = *(v26 - 2);
      v29 = *(v26 - 1);
      v30 = *v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = (void *)MEMORY[0x220768C3C](v27, v28);
      objc_msgSend(a2, sel_addObject_, v31);

      v32 = (void *)MEMORY[0x220768C3C](v29, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      objc_msgSend(a3, sel_addObject_, v32);

      v26 += 4;
      --v25;
    }
    while (v25);
  }

  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v20);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v38);
}

void thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed CFMutableArrayRef, @guaranteed CFMutableArrayRef) -> ()(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void (*v7)(uint64_t, id, id);
  id v8;
  id v9;

  v7 = *(void (**)(uint64_t, id, id))(a1 + 32);
  swift_retain();
  v9 = a3;
  v8 = a4;
  v7(a2, v9, v8);
  swift_release();

}

void $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v6;
  void *v7;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v8[0] = 0;
  v4 = objc_msgSend(v0, sel_removeItemAtURL_error_, v2, v8);

  if (v4)
  {
    v5 = v8[0];
  }
  else
  {
    v6 = v8[0];
    v7 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

unint64_t *closure #3 in static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X4>, unint64_t **a5@<X8>)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v6 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 >= *(_QWORD *)(a2 + 16))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v6 >= *(_QWORD *)(a3 + 16))
    goto LABEL_11;
  if (*(uint64_t *)(a3 + 8 * v6 + 32) <= 1)
  {
    *a5 = 0;
  }
  else
  {
    RERealityFileAssetDescriptorGetFilename();
    v8 = a4[3];
    v9 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
    result = (unint64_t *)RERealityFileCreateAssetDescriptorWithEntryNameAndTextureDownsampleHint();
    if (result)
    {
      *a5 = result;
    }
    else
    {
      _StringGuts.grow(_:)(56);
      v10._object = (void *)0x800000021BE929E0;
      v10._countAndFlagsBits = 0xD000000000000036;
      String.append(_:)(v10);
      RERealityFileAssetDescriptorGetFilename();
      v11._countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0xE000000000000000;
      *(_BYTE *)(v12 + 16) = 3;
      return (unint64_t *)swift_willThrow();
    }
  }
  return result;
}

uint64_t closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36[16];
  uint64_t v37;
  _QWORD *v38;
  char v39[16];
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  uint64_t v44;

  v40 = a3;
  v41 = a1;
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays13OpaquePointerVG_AGs5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:), (uint64_t)v39, a2);
  v12 = a3[3];
  v13 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v12);
  v43 = a4;
  v37 = v11;
  v38 = a3;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
  __REAssetService.performOnEngineQueue<A>(with:_:)(&v43, (void (*)(uint64_t))partial apply for closure #2 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:), (uint64_t)v36, v12, v14, v13, (uint64_t)&v44);
  if (v6)
  {
    v15 = *(_QWORD *)(v11 + 16);
    if (!v15)
      return swift_bridgeObjectRelease();
    v16 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v16 += 8;
      RERelease();
      --v15;
    }
    while (v15);
LABEL_5:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (!v44)
  {
    strcpy((char *)v42, "Invalid path ");
    HIWORD(v42[1]) = -4864;
    v26 = (uint64_t *)(a1 + *(int *)(type metadata accessor for __RKEntityAudioActionArguments(0) + 20));
    v27 = *v26;
    v28 = (void *)v26[1];
    swift_bridgeObjectRetain();
    v29._countAndFlagsBits = v27;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30 = v42[0];
    v31 = v42[1];
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_QWORD *)v32 = v30;
    *(_QWORD *)(v32 + 8) = v31;
    *(_BYTE *)(v32 + 16) = 3;
    swift_willThrow();
    v33 = *(_QWORD *)(v11 + 16);
    if (!v33)
      return swift_bridgeObjectRelease();
    v34 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v34 += 8;
      RERelease();
      --v33;
    }
    while (v33);
    goto LABEL_5;
  }
  v18 = a6;
  swift_beginAccess();
  *(_BYTE *)(a5 + 16) = 1;
  outlined init with copy of __RKEntityActionSpecification(a1, a6, type metadata accessor for __RKEntityAudioActionArguments);
  v19 = (void *)REAssetHandleCopyAssetIdentifierString();
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v23 = (uint64_t *)(v18 + *(int *)(type metadata accessor for __RKEntityAudioActionArguments(0) + 20));
  swift_bridgeObjectRelease();
  *v23 = v20;
  v23[1] = v22;
  RERelease();
  v24 = *(_QWORD *)(v11 + 16);
  if (!v24)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  for (i = 0; i != v24; ++i)
    RERelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t closure #1 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  type metadata accessor for __RKEntityAudioActionArguments(0);
  String.utf8CString.getter();
  v5 = REAssetManagerResolveAssetDescriptor();
  result = swift_release();
  if (v5)
    *a2 = v5;
  else
    __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  result = REAssetHandleGetOrCreateImmutableWithAssetDescriptors();
  *a2 = result;
  return result;
}

uint64_t Entity.remapAudioActions(_:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[48];

  v4 = v2;
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration
    && REEntityGetCustomComponent()
    && (Object = RECustomComponentGetObject()) != 0)
  {
    v8 = *(_QWORD *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v14);
    if (v8)
      v9 = v8;
    else
      v9 = __RKEntityInteractionsComponent.decodedJSON()();
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v14);
  }
  else
  {
    v9 = MEMORY[0x24BEE4AF8];
  }
  swift_retain();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit34__RKEntityInteractionSpecificationVG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f34F15ActionArgumentsVAGKcKFAA02__H24gH9VAIKXEfU_AF02__fptU0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(v9, a1, a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v12 = v10;
  swift_bridgeObjectRelease();
  swift_release();
  if (!static __RKEntityInteractionsComponent.registration)
    return swift_bridgeObjectRelease();
  v13 = *((_QWORD *)static __RKEntityInteractionsComponent.registration + 3);
  if (*(_QWORD *)(v12 + 16))
  {
    if ((REEntityGetCustomComponent() || MEMORY[0x22076CF2C](*(_QWORD *)(v4 + 16), v13))
      && RECustomComponentGetObject())
    {
      return __RKEntityInteractionsComponent.specifications.setter(v12);
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = REEntityGetCustomComponent();
  if (result)
    return REEntityRemoveComponentByClass();
  return result;
}

uint64_t closure #1 in static __REAssetBundle.remapSceneAnchorsBeforeWrite(fileWriter:scene:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t (*v29)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(unint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Class isa;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Class v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  _QWORD *v74;
  id v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, unint64_t, uint64_t);
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v93 = a2;
  v94 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v88 = (char *)&v81 - v8;
  v91 = type metadata accessor for URLComponents();
  v89 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v87 = (char *)&v81 - v12;
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v13 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v96 = (unint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL();
  v97 = *(_QWORD *)(v15 - 8);
  v98 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v81 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v86 = (char *)&v81 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v81 - v24;
  v26 = type metadata accessor for __REAnchoringType();
  v90 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v28, v29);
  v92 = v26;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v94, 1, 1, v46);
      return outlined destroy of __RKEntityActionSpecification((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
    }
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>));
    v32 = &v28[*(int *)(v31 + 48)];
    v33 = v97;
    v34 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
    v34(v25, v28, v98);
    v85 = v13;
    v35 = *(void (**)(unint64_t, char *, uint64_t))(v13 + 32);
    v36 = v95;
    v35(v96, v32, v95);
    v37 = v99;
    v38 = Data.init(contentsOf:options:)();
    if (v37)
    {
      v40 = v98;
LABEL_23:
      (*(void (**)(unint64_t, uint64_t))(v85 + 8))(v96, v36);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v25, v40);
    }
    v48 = v38;
    v49 = v39;
    v82 = (void (*)(uint64_t, unint64_t, uint64_t))v35;
    v83 = v34;
    v99 = 0;
    v50 = RERealityFileAssetWriteReportCreate();
    v84 = v48;
    isa = Data._bridgeToObjectiveC()().super.isa;
    URL.path.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    LOBYTE(v48) = RERealityFileWriterWriteDataEntry();

    swift_release();
    v52 = v49;
    if ((v48 & 1) == 0)
    {
      v72 = (id)RERealityFileAssetWriteReportGetError();
      if (v72)
      {
        v73 = v72;
        type metadata accessor for CFErrorRef(0);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
        swift_allocError();
        *v74 = v73;
      }
      else
      {
        lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
        swift_allocError();
        *(_QWORD *)v78 = 0xD00000000000002CLL;
        *(_QWORD *)(v78 + 8) = 0x800000021BE92970;
        *(_BYTE *)(v78 + 16) = 3;
      }
      v33 = v97;
      v40 = v98;
      v36 = v95;
      swift_willThrow();
      RERelease();
      outlined consume of Data._Representation(v84, v49);
      goto LABEL_23;
    }
    v93 = v50;
    result = RERealityFileAssetWriteReportGetSerializationString();
    if (result)
    {
      v53 = v87;
      URLComponents.init()();
      String.init(cString:)();
      URLComponents.path.setter();
      v54 = v88;
      URLComponents.url.getter();
      v55 = v97;
      v56 = v98;
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48))(v54, 1, v98);
      v57 = v83;
      if ((_DWORD)result != 1)
      {
        (*(void (**)(char *, uint64_t))(v89 + 8))(v53, v91);
        v58 = v86;
        v57(v86, v54, v56);
        RERelease();
        outlined consume of Data._Representation(v84, v52);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v56);
        v59 = v94;
        v60 = &v94[*(int *)(v31 + 48)];
        v57(v94, v58, v56);
        v82((uint64_t)v60, v96, v95);
        v61 = v92;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v59, 0, 1, v61);
        v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v59, 0, 1, v62);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  v41 = v6;
  v40 = v98;
  v42 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
  v42(v20, v28, v98);
  v43 = v99;
  v44 = Data.init(contentsOf:options:)();
  if (!v43)
  {
    v63 = v45;
    v99 = 0;
    v64 = v44;
    v65 = RERealityFileAssetWriteReportCreate();
    v95 = v64;
    v96 = v63;
    v66 = Data._bridgeToObjectiveC()().super.isa;
    URL.path.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    LOBYTE(v64) = RERealityFileWriterWriteDataEntry();

    swift_release();
    if ((v64 & 1) == 0)
    {
      v75 = (id)RERealityFileAssetWriteReportGetError();
      if (v75)
      {
        v76 = v75;
        type metadata accessor for CFErrorRef(0);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
        swift_allocError();
        *v77 = v76;
      }
      else
      {
        lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
        swift_allocError();
        *(_QWORD *)v79 = 0xD00000000000002CLL;
        *(_QWORD *)(v79 + 8) = 0x800000021BE92970;
        *(_BYTE *)(v79 + 16) = 3;
      }
      v33 = v97;
      v40 = v98;
      v80 = v96;
      swift_willThrow();
      RERelease();
      outlined consume of Data._Representation(v95, v80);
      v25 = v20;
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v25, v40);
    }
    v93 = v65;
    result = RERealityFileAssetWriteReportGetSerializationString();
    if (result)
    {
      URLComponents.init()();
      String.init(cString:)();
      URLComponents.path.setter();
      URLComponents.url.getter();
      v68 = v97;
      v67 = v98;
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48))(v41, 1, v98);
      if ((_DWORD)result != 1)
      {
        (*(void (**)(char *, uint64_t))(v89 + 8))(v10, v91);
        v42(v17, v41, v67);
        RERelease();
        outlined consume of Data._Representation(v95, v96);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v20, v67);
        v69 = v94;
        v42(v94, v17, v67);
        v70 = v92;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v69, 0, 1, v70);
        v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v69, 0, 1, v71);
      }
LABEL_31:
      __break(1u);
      return result;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v25 = v20;
  v33 = v97;
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v25, v40);
}

uint64_t Entity.storageForAudioActions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  swift_retain_n();
  if (REEntityGetChildCount() < 1)
  {
LABEL_18:
    swift_release_n();
    v11 = REEntityCreate();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v12 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_32;
      v13 = specialized static Entity.entityInfoType(_:)();
      if (v13)
      {
        v6 = (*(uint64_t (**)(void))(v13 + 232))();
        v14 = *(_QWORD *)(v6 + 16);
        swift_retain();
        MEMORY[0x22076D160](v14, 0);
        *(_QWORD *)(v6 + 16) = v11;
        MEMORY[0x22076D160](v11, v6);
        swift_release();
LABEL_24:
        REEntitySetName();
        RENetworkMarkEntityMetadataDirty();
        specialized HasHierarchy.setParent(_:preservingWorldTransform:)(v1, 0);
        return v6;
      }
      v12 = makeEntity(for:)(v11);
    }
    v6 = v12;
    goto LABEL_24;
  }
  v2 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v2 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_33;
    v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v5 = swift_dynamicCastClassUnconditional();
LABEL_7:
      v6 = v5;
      goto LABEL_11;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      goto LABEL_31;
    v7 = specialized static Entity.entityInfoType(_:)();
    if (!v7)
    {
      v5 = makeEntity(for:)(v4);
      goto LABEL_7;
    }
    v6 = (*(uint64_t (**)(void))(v7 + 232))();
    v8 = *(_QWORD *)(v6 + 16);
    swift_retain();
    MEMORY[0x22076D160](v8, 0);
    *(_QWORD *)(v6 + 16) = v4;
    MEMORY[0x22076D160](v4, v6);
    swift_release();
LABEL_11:
    result = REEntityGetChildCount();
    if (v2 >= result)
      goto LABEL_30;
    REEntityGetName();
    if (String.init(cString:)() == 0xD000000000000016 && v9 == 0x800000021BE92950)
    {
      swift_release_n();
      swift_bridgeObjectRelease();
      return v6;
    }
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
      swift_release_n();
      return v6;
    }
    ++v2;
    swift_release();
    if (v2 >= REEntityGetChildCount())
      goto LABEL_18;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  _QWORD *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;

  v60 = a6;
  v61 = a7;
  v62 = a5;
  v11 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)(a2 + 16);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v13, v15);
  v16 = *(int *)(v11 + 20);
  v63 = v13;
  v17 = &v13[v16];
  v18 = *(uint64_t **)v17;
  v19 = (uint64_t *)*((_QWORD *)v17 + 1);
  v59 = (uint64_t *)v17;
  swift_beginAccess();
  v20 = *(_QWORD **)(a2 + 16);
  swift_bridgeObjectRetain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 16) = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    *v14 = v20;
  }
  v23 = v20[2];
  v22 = v20[3];
  if (v23 >= v22 >> 1)
  {
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
    *v14 = v20;
  }
  v20[2] = v23 + 1;
  v24 = &v20[2 * v23];
  v24[4] = v18;
  v24[5] = v19;
  swift_endAccess();
  v25 = a3[3];
  v26 = a3[4];
  v27 = __swift_project_boxed_opaque_existential_1(a3, v25);
  v28 = *a4;
  v65 = *a4;
  MEMORY[0x24BDAC7A8](v27);
  *(&v59 - 4) = a3;
  *(&v59 - 3) = v18;
  *(&v59 - 2) = v19;
  v29 = type metadata accessor for __REAsset();
  v30 = v64;
  __REAssetService.performOnEngineQueue<A>(with:_:)((unsigned __int8 *)&v65, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:), (uint64_t)(&v59 - 6), v25, v29, v26, (uint64_t)&v68);
  swift_bridgeObjectRelease();
  if (v30)
    goto LABEL_14;
  v31 = v68;
  v32 = a3[3];
  v33 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v32);
  __REAssetService.asManager.getter(v32, v33);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v34 + 32) = v31;
  v66 = v34;
  specialized Array._endMutation()();
  v35 = v66;
  swift_retain();
  specialized __REAssetManager.loadAssetsAndDependencies<A>(_:with:)(v35, v28);
  swift_bridgeObjectRelease();
  swift_release();
  REAssetWithMetadataCreate();
  RERealityFileAssetWriteReportCreate();
  if (!RERealityFileWriterWriteAsset())
  {
    v43 = (id)RERealityFileAssetWriteReportGetError();
    if (v43)
    {
      v44 = v43;
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      swift_allocError();
      *v45 = v44;
    }
    else
    {
      v66 = 0;
      v67 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v66 = 0xD000000000000017;
      v67 = 0x800000021BE92900;
      v52 = (void *)REAssetCopyDescription();
      v53 = String.init(_:)(v52);
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54._countAndFlagsBits = 11815;
      v54._object = (void *)0xE200000000000000;
      String.append(_:)(v54);
      v55 = v66;
      v56 = v67;
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(_QWORD *)v57 = v55;
      *(_QWORD *)(v57 + 8) = v56;
      *(_BYTE *)(v57 + 16) = 3;
    }
    goto LABEL_13;
  }
  if (!RERealityFileAssetWriteReportGetSerializationString())
  {
    v66 = 0;
    v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    v66 = 0xD00000000000002ELL;
    v67 = 0x800000021BE92920;
    v46 = (void *)REAssetCopyDescription();
    v47 = String.init(_:)(v46);
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 11815;
    v48._object = (void *)0xE200000000000000;
    String.append(_:)(v48);
    v49 = v66;
    v50 = v67;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_QWORD *)v51 = v49;
    *(_QWORD *)(v51 + 8) = v50;
    *(_BYTE *)(v51 + 16) = 3;
LABEL_13:
    swift_willThrow();
    RERelease();
    RERelease();
    swift_release();
LABEL_14:
    v42 = (uint64_t)v63;
    return outlined destroy of __RKEntityActionSpecification(v42, type metadata accessor for __RKEntityAudioActionArguments);
  }
  v36 = (_BYTE *)(v60 + 16);
  v37 = String.init(cString:)();
  v39 = v38;
  v40 = v59;
  swift_bridgeObjectRelease();
  *v40 = v37;
  v40[1] = v39;
  swift_beginAccess();
  *v36 = 1;
  v41 = (uint64_t)v63;
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v63, v61, type metadata accessor for __RKEntityAudioActionArguments);
  RERelease();
  RERelease();
  swift_release();
  v42 = v41;
  return outlined destroy of __RKEntityActionSpecification(v42, type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t closure #1 in closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssetHandle;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  result = swift_release();
  if (AssetHandle)
  {
    type metadata accessor for __REAsset();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = AssetHandle;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #3 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssetHandle;
  uint64_t result;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  result = swift_release();
  if (AssetHandle)
  {
    REAudioPlayerComponentRegisterAsset();
    return RERelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __REAssetBundle.ExportOptions.PlatformOS@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return __REAssetBundle.ExportOptions.PlatformOS.init(rawValue:)(*a1, a1[1], a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __REAssetBundle.ExportOptions.PlatformOS@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = v1[1];
  if ((unint64_t)(v3 - 2) >= 3)
  {
    if (v3)
    {
      if (v3 == 1)
      {
        result = 0xE500000000000000;
        v5 = 0x534F63616DLL;
      }
      else
      {
        v5 = *v1;
        result = swift_bridgeObjectRetain();
      }
    }
    else
    {
      result = 0xE300000000000000;
      v5 = 5459817;
    }
  }
  else
  {
    result = 0xE800000000000000;
    v5 = 0x534F6E6F69736976;
  }
  *a1 = v5;
  a1[1] = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __REAssetBundle.ExportOptions.PlatformOS()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1 - 2 >= 3 && v1 > 1)
    swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __REAssetBundle.ExportOptions.PlatformOS()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 - 2 >= 3 && v1 > 1)
    swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __REAssetBundle.ExportOptions.PlatformOS()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1 - 2 >= 3 && v1 > 1)
    swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __REAssetBundle.ExportOptions.PlatformOS(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

void __REAssetBundle.ExportOptions.PlatformRequirement.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int __REAssetBundle.ExportOptions.PlatformRequirement.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return outlined copy of __REAssetBundle.ExportOptions.PlatformOS(v2, v3);
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.version.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 28);
}

__n128 __REAssetBundle.ExportOptions.DeploymentTarget.init(platform:version:)@<Q0>(__n128 *a1@<X0>, unsigned __int32 a2@<W1>, unsigned __int32 a3@<W2>, unsigned __int32 a4@<W3>, __n128 *a5@<X8>)
{
  __n128 result;

  result = *a1;
  *a5 = *a1;
  a5[1].n128_u32[0] = a2;
  a5[1].n128_u32[1] = a3;
  a5[1].n128_u32[2] = a4;
  a5[1].n128_u8[12] = 0;
  return result;
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.init(platform:version:platformRequirement:)@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  result = *a1;
  v10 = a1[1];
  if (*a5 == 1)
  {
    if (v10 >= 5)
    {
      outlined consume of __REAssetBundle.ExportOptions.PlatformOS(result, v10);
      result = 0;
      v12 = 0;
      v13 = 0;
      v10 = 5;
      goto LABEL_7;
    }
    v11 = 0x100000000;
  }
  else
  {
    v11 = 0;
  }
  v12 = a2 | (unint64_t)(a3 << 32);
  v13 = v11 | a4;
LABEL_7:
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_BYTE *)(a6 + 28) = BYTE4(v13);
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.ExportOptions.PlatformOS, &type metadata for __REAssetBundle.ExportOptions.PlatformOS);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetBundle.ExportOptions.PlatformRequirement, &type metadata for __REAssetBundle.ExportOptions.PlatformRequirement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.ExportOptions.PlatformOS(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.ExportOptions.PlatformOS(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS()
{
  return &type metadata for __REAssetBundle.ExportOptions.PlatformOS;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement()
{
  return &type metadata for __REAssetBundle.ExportOptions.PlatformRequirement;
}

unint64_t destroy for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 5)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 5)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t assignWithCopy for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) >= 5uLL)
  {
    if (v4 >= 5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String(a1);
    goto LABEL_6;
  }
  if (v4 < 5)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) >= 5uLL)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 >= 5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of String(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 29))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 5;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2147483643;
    if (a3 > 0x7FFFFFFA)
      *(_BYTE *)(result + 29) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFA)
      *(_BYTE *)(result + 29) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget()
{
  return &type metadata for __REAssetBundle.ExportOptions.DeploymentTarget;
}

unint64_t lazy protocol witness table accessor for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:);
  if (!lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:))
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:), &unk_24DFD3B00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:);
  if (!lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:))
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:), &unk_24DFD3B00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:));
  }
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(unint64_t a1, unint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v8 = v4;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v13)
      goto LABEL_50;
  }
  else
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v13)
      goto LABEL_50;
  }
  v51 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x220769770](0, a1);
    if (!(a2 >> 62))
      goto LABEL_6;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      specialized _NativeDictionary.copy()();
      if ((v7 & 1) == 0)
        goto LABEL_26;
      goto LABEL_17;
    }
    v5 = *(_QWORD *)(a1 + 32);
    swift_retain();
    if (!(a2 >> 62))
    {
LABEL_6:
      v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v14)
        goto LABEL_7;
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14)
    goto LABEL_23;
LABEL_7:
  v47 = v13;
  v48 = v14;
  v50 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x220769770](0, a2);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 32);
    swift_retain();
  }
  v15 = (_QWORD *)*a4;
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  v17 = v15[2];
  v18 = (v16 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v7 = v16;
  if (v15[3] >= v19)
  {
    if ((a3 & 1) != 0)
    {
      if ((v16 & 1) == 0)
        goto LABEL_26;
      goto LABEL_17;
    }
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a3 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) == (v21 & 1))
  {
    v8 = v20;
    if ((v7 & 1) == 0)
    {
LABEL_26:
      v24 = (_QWORD *)*a4;
      *(_QWORD *)(*a4 + 8 * (v8 >> 6) + 64) |= 1 << v8;
      v25 = 8 * v8;
      *(_QWORD *)(v24[6] + v25) = v5;
      *(_QWORD *)(v24[7] + v25) = v6;
      v26 = v24[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_53;
      v24[2] = v28;
      if (v47 != 1)
      {
        if (v51)
        {
          v29 = MEMORY[0x220769770](1, a1);
        }
        else
        {
          if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          {
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          v29 = *(_QWORD *)(a1 + 40);
          swift_retain();
        }
        v49 = v48 - 1;
        if (v49)
        {
          v30 = 0;
          while (1)
          {
            if (v50)
            {
              v31 = MEMORY[0x220769770](v30 + 1, a2);
            }
            else
            {
              v31 = *(_QWORD *)(a2 + 40 + 8 * v30);
              swift_retain();
            }
            v32 = (_QWORD *)*a4;
            v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
            v35 = v32[2];
            v36 = (v34 & 1) == 0;
            v27 = __OFADD__(v35, v36);
            v37 = v35 + v36;
            if (v27)
              goto LABEL_52;
            v38 = v34;
            if (v32[3] < v37)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
              v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
              if ((v38 & 1) != (v39 & 1))
                goto LABEL_56;
            }
            if ((v38 & 1) != 0)
              goto LABEL_17;
            v40 = (_QWORD *)*a4;
            *(_QWORD *)(*a4 + 8 * (v33 >> 6) + 64) |= 1 << v33;
            v41 = 8 * v33;
            *(_QWORD *)(v40[6] + v41) = v29;
            *(_QWORD *)(v40[7] + v41) = v31;
            v42 = v40[2];
            v27 = __OFADD__(v42, 1);
            v43 = v42 + 1;
            if (v27)
              goto LABEL_53;
            v40[2] = v43;
            if (v47 - 2 == v30)
              goto LABEL_50;
            v44 = v30 + 2;
            if (v51)
            {
              v29 = MEMORY[0x220769770](v44, a1);
            }
            else
            {
              if (v44 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_55;
              v29 = *(_QWORD *)(a1 + 48 + 8 * v30);
              swift_retain();
            }
            if (v30 == 0x7FFFFFFFFFFFFFFDLL)
              goto LABEL_54;
            if (v49 == ++v30)
              goto LABEL_23;
          }
        }
        goto LABEL_23;
      }
LABEL_50:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
LABEL_17:
    v22 = (void *)swift_allocError();
    swift_willThrow();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_57;
  }
LABEL_56:
  type metadata accessor for __REAsset();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_57:
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x800000021BE82E90;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  type metadata accessor for __REAsset();
  _print_unlocked<A, B>(_:_:)();
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f3F15g32ArgumentsVAGKcKF0E0L_yAA02__hI13H14OAJKFA2JKXEfU_AF02__fpgT0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  int EnumCaseMultiPayload;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *);
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;

  v41 = a3;
  v42 = a2;
  v39 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v39);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __RKEntityActionSpecification(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v48 = (char *)&v37 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
    return v13;
  v47 = v3;
  v49 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
  v46 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = a1 + v46;
  v45 = *(_QWORD *)(v8 + 72);
  v15 = (unsigned __int8 *)v40;
  v16 = v48;
  v37 = v7;
  v38 = v6;
  while (1)
  {
    outlined init with copy of __RKEntityActionSpecification(v14, (uint64_t)v15, type metadata accessor for __RKEntityActionSpecification);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
      break;
    if (EnumCaseMultiPayload)
    {
      outlined init with copy of __RKEntityActionSpecification(v14, (uint64_t)v16, type metadata accessor for __RKEntityActionSpecification);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v15, type metadata accessor for __RKEntityActionSpecification);
    }
    else
    {
      outlined init with take of __RKEntityActionSpecification((uint64_t)v15, (uint64_t)v6, type metadata accessor for __RKEntityAudioActionArguments);
      v18 = &v6[*(int *)(v39 + 20)];
      v20 = *(_QWORD *)v18;
      v19 = *((_QWORD *)v18 + 1);
      v21 = v20 & 0xFFFFFFFFFFFFLL;
      if ((v19 & 0x2000000000000000) != 0)
        v22 = HIBYTE(v19) & 0xF;
      else
        v22 = v21;
      if (v22)
      {
        v13 = v41;
        v23 = v47;
        v42(v6);
        outlined destroy of __RKEntityActionSpecification((uint64_t)v6, type metadata accessor for __RKEntityAudioActionArguments);
        v47 = v23;
        if (v23)
          goto LABEL_22;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        outlined destroy of __RKEntityActionSpecification((uint64_t)v6, type metadata accessor for __RKEntityAudioActionArguments);
        outlined init with copy of __RKEntityActionSpecification(v14, (uint64_t)v16, type metadata accessor for __RKEntityActionSpecification);
      }
    }
LABEL_15:
    v13 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = v49;
    }
    v34 = *(_QWORD *)(v13 + 16);
    v33 = *(_QWORD *)(v13 + 24);
    if (v34 >= v33 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
      v13 = v49;
    }
    *(_QWORD *)(v13 + 16) = v34 + 1;
    v35 = v45;
    v16 = v48;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v48, v13 + v46 + v34 * v45, type metadata accessor for __RKEntityActionSpecification);
    v14 += v35;
    if (!--v12)
      return v13;
  }
  v44 = *v15;
  v13 = *((_QWORD *)v15 + 1);
  v24 = v15;
  v25 = v15[16];
  v43 = *((_QWORD *)v24 + 3);
  v26 = v24[32];
  v27 = v24[33];
  v28 = v41;
  swift_retain();
  v29 = swift_bridgeObjectRetain();
  v30 = v47;
  v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f3F15g32ArgumentsVAGKcKF0E0L_yAA02__hI13H14OAJKFA2JKXEfU_AF02__fpgT0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(v29, v42, v28);
  swift_bridgeObjectRelease();
  v47 = v30;
  if (!v30)
  {
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v32 = v48;
    *v48 = v44;
    *((_QWORD *)v32 + 1) = v31;
    v32[16] = v25;
    *((_QWORD *)v32 + 3) = v43;
    v32[32] = v26;
    v32[33] = v27;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    v6 = v38;
    v15 = (unsigned __int8 *)v40;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  swift_release();
LABEL_22:
  swift_release();
  return v13;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit34__RKEntityInteractionSpecificationVG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f34F15ActionArgumentsVAGKcKFAA02__H24gH9VAIKXEfU_AF02__fptU0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *);
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v44 = a3;
  v45 = a2;
  v43 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v43);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (unsigned __int8 *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v50 = (char *)&v39 - v10;
  v53 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v11 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  if (!v14)
    return v15;
  v54 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
  v49 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = a1 + v49;
  v48 = *(_QWORD *)(v11 + 72);
  v52 = v13;
  v41 = v6;
  v42 = v5;
  v40 = v8;
  while (1)
  {
    outlined init with copy of __RKEntityActionSpecification(v16, (uint64_t)v13, type metadata accessor for __RKEntityInteractionSpecification);
    v17 = v16 + *(int *)(v53 + 20);
    outlined init with copy of __RKEntityActionSpecification(v17, (uint64_t)v8, type metadata accessor for __RKEntityActionSpecification);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
      break;
    if (EnumCaseMultiPayload)
    {
      v24 = v50;
      outlined init with copy of __RKEntityActionSpecification(v17, (uint64_t)v50, type metadata accessor for __RKEntityActionSpecification);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for __RKEntityActionSpecification);
    }
    else
    {
      outlined init with take of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v5, type metadata accessor for __RKEntityAudioActionArguments);
      v19 = &v5[*(int *)(v43 + 20)];
      v21 = *(_QWORD *)v19;
      v20 = *((_QWORD *)v19 + 1);
      v22 = v21 & 0xFFFFFFFFFFFFLL;
      if ((v20 & 0x2000000000000000) != 0)
        v23 = HIBYTE(v20) & 0xF;
      else
        v23 = v22;
      if (v23)
      {
        v24 = v50;
        v25 = v51;
        v45(v5);
        v15 = v25;
        outlined destroy of __RKEntityActionSpecification((uint64_t)v5, type metadata accessor for __RKEntityAudioActionArguments);
        v51 = v25;
        if (v25)
          goto LABEL_22;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        outlined destroy of __RKEntityActionSpecification((uint64_t)v5, type metadata accessor for __RKEntityAudioActionArguments);
        v24 = v50;
        outlined init with copy of __RKEntityActionSpecification(v17, (uint64_t)v50, type metadata accessor for __RKEntityActionSpecification);
      }
    }
LABEL_15:
    outlined assign with take of __RKEntityActionSpecification((uint64_t)v24, (uint64_t)&v13[*(int *)(v53 + 20)]);
    v15 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
      v15 = v54;
    }
    v36 = *(_QWORD *)(v15 + 16);
    v35 = *(_QWORD *)(v15 + 24);
    if (v36 >= v35 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
      v15 = v54;
    }
    *(_QWORD *)(v15 + 16) = v36 + 1;
    v37 = v48;
    v13 = v52;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v52, v15 + v49 + v36 * v48, type metadata accessor for __RKEntityInteractionSpecification);
    v16 += v37;
    if (!--v14)
      return v15;
  }
  v26 = *v8;
  v15 = *((_QWORD *)v8 + 1);
  v27 = v44;
  v46 = v8[16];
  v47 = v26;
  v28 = v8;
  v29 = *((_QWORD *)v8 + 3);
  v30 = v28[32];
  v31 = v28[33];
  swift_retain();
  v32 = swift_bridgeObjectRetain();
  v33 = v51;
  v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f3F15g32ArgumentsVAGKcKF0E0L_yAA02__hI13H14OAJKFA2JKXEfU_AF02__fpgT0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(v32, v45, v27);
  swift_bridgeObjectRelease();
  v51 = v33;
  if (!v33)
  {
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v24 = v50;
    *v50 = v47;
    *((_QWORD *)v24 + 1) = v34;
    v24[16] = v46;
    *((_QWORD *)v24 + 3) = v29;
    v24[32] = v30;
    v24[33] = v31;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    v5 = v42;
    v8 = v40;
    v13 = v52;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v13 = v52;
LABEL_22:
  outlined destroy of __RKEntityActionSpecification((uint64_t)v13, type metadata accessor for __RKEntityInteractionSpecification);
  swift_release();
  return v15;
}

void specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (a1)
  {
    v1 = a1;
    v3 = CFErrorRef._domain.getter();
    if (!*MEMORY[0x24BE26350])
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v4 = v2;
    if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
        goto LABEL_34;
    }
    if (CFErrorRef._code.getter() == 8)
    {
      if (!CFErrorRef._userInfo.getter())
      {
LABEL_23:
        v22 = 0u;
        v23 = 0u;
        goto LABEL_24;
      }
      objc_opt_self();
      v8 = swift_dynamicCastObjCClass();
      if (v8)
      {
        if (*MEMORY[0x24BE26360])
        {
          v9 = (void *)v8;
          v10 = (id)*MEMORY[0x24BE26360];
          v11 = objc_msgSend(v9, sel___swift_objectForKeyedSubscript_, v10);

          swift_unknownObjectRelease();
          if (v11)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            v20 = 0u;
            v21 = 0u;
          }
          outlined init with take of Transform?((uint64_t)&v20, (uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for Any?);

          if (*((_QWORD *)&v23 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              v16 = (int)v20;

              lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
              swift_allocError();
              *(_QWORD *)v17 = v16;
              *(_QWORD *)(v17 + 8) = 0;
              *(_BYTE *)(v17 + 16) = 0;
LABEL_33:
              swift_willThrow();
              goto LABEL_34;
            }
            goto LABEL_34;
          }
          goto LABEL_24;
        }
        goto LABEL_37;
      }
    }
    else
    {
      if (CFErrorRef._code.getter() != 21)
        goto LABEL_34;
      if (!CFErrorRef._userInfo.getter())
        goto LABEL_23;
      objc_opt_self();
      v12 = swift_dynamicCastObjCClass();
      if (v12)
      {
        if (*MEMORY[0x24BE26360])
        {
          v13 = (void *)v12;
          v14 = (id)*MEMORY[0x24BE26360];
          v15 = objc_msgSend(v13, sel___swift_objectForKeyedSubscript_, v14);

          swift_unknownObjectRelease();
          if (v15)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            v20 = 0u;
            v21 = 0u;
          }
          outlined init with take of Transform?((uint64_t)&v20, (uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for Any?);

          if (*((_QWORD *)&v23 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              v18 = (int)v20;

              lazy protocol witness table accessor for type LocalizedRealityFileError and conformance LocalizedRealityFileError();
              swift_allocError();
              *v19 = v18;
              goto LABEL_33;
            }
LABEL_34:

            return;
          }
LABEL_24:

          outlined destroy of BodyTrackingComponent?((uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
          return;
        }
LABEL_38:
        __break(1u);
        return;
      }
    }
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
}

uint64_t sub_21BD9A500()
{
  return swift_deallocObject();
}

uint64_t sub_21BD9A510()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 72) >= 6uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 136))
    swift_release();
  if (*(_QWORD *)(v0 + 152))
    swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, *(_QWORD *)(v1 + 16), (__int128 *)(v1 + 24), v1 + 184, *(_QWORD *)(v1 + 248));
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

uint64_t sub_21BD9A5D8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 64) >= 6uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 128))
    swift_release();
  if (*(_QWORD *)(v0 + 144))
    swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #3 in __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  closure #3 in __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, a2, a3, (_QWORD *)(v3 + 16));
}

uint64_t sub_21BD9A654()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void *partial apply for closure #2 in __REAssetBundle.writeWithCPlusPlus(to:with:)(void *a1, void *a2)
{
  uint64_t v2;

  return closure #2 in __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t partial apply for specialized closure #1 in __REAssetService.firstUnloadedAssetIncludingDependencies(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for specialized closure #1 in __REAssetService.firstUnloadedAssetIncludingDependencies(_:)(a1, a2);
}

{
  uint64_t result;

  result = specialized __REAssetService.firstUnloadedAssetIncludingDependencies(_:)(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized static __REAssetBundle.findTextureEntryDescriptors(in:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::Bool v6;
  unint64_t v7;
  unint64_t v8;

  result = RERealityFileGetAssetDescriptorCount();
  if (result < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  v1 = result;
  if (result)
  {
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (v1 != v2)
    {
      result = RERealityFileGetAssetDescriptorAtIndex();
      if (!result)
        goto LABEL_17;
      v4 = result;
      RERealityFileAssetDescriptorGetFilename();
      String.init(cString:)();
      v5._countAndFlagsBits = 0xD000000000000010;
      v5._object = (void *)0x800000021BE92A20;
      v6 = String.hasSuffix(_:)(v5);
      result = swift_bridgeObjectRelease();
      if (v6)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
          v3 = (_QWORD *)result;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v3);
          v3 = (_QWORD *)result;
        }
        v3[2] = v8 + 1;
        v3[v8 + 4] = v4;
      }
      if (v1 == ++v2)
        return (uint64_t)v3;
    }
    __break(1u);
    goto LABEL_16;
  }
  return MEMORY[0x24BEE4AF8];
}

_QWORD *specialized static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[6];
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v37 = a2;
  v6 = specialized static __REAssetBundle.findTextureEntryDescriptors(in:)();
  v7 = MEMORY[0x24BEE4AF8];
  v38 = MEMORY[0x24BEE4AF8];
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v35 = a4;
    v9 = swift_bridgeObjectRetain();
    v10 = 0;
    while (1)
    {
      v11 = v6;
      v12 = (void *)MEMORY[0x220772710](v9);
      v39[0] = 0;
      v14 = a1[3];
      v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v14);
      (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v14, v13);
      if (!(id)RERealityFileCopyTextureDescriptor())
        break;
      MEMORY[0x220768F0C]();
      if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v10;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      objc_autoreleasePoolPop(v12);
      v6 = v11;
      if (v8 == v10)
      {
        swift_bridgeObjectRelease();
        v15 = (_QWORD *)v38;
        v7 = MEMORY[0x24BEE4AF8];
        a4 = v35;
        goto LABEL_10;
      }
    }
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_QWORD *)v29 = 0xD00000000000003ELL;
    *(_QWORD *)(v29 + 8) = 0x800000021BE929A0;
    *(_BYTE *)(v29 + 16) = 3;
    swift_willThrow();
    objc_autoreleasePoolPop(v12);
    swift_bridgeObjectRelease_n();
    goto LABEL_23;
  }
  v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_10:
  v16 = a4[3];
  v17 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v16);
  v18 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v17 + 8);
  v19 = swift_bridgeObjectRetain();
  v18(v39, v19, v16, v17);
  v20 = v36;
  swift_bridgeObjectRelease();
  if (v36)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    return a1;
  }
  v21 = v39[0];
  if (v39[0])
  {
    v22 = *(_QWORD *)(v39[0] + 16);
    if (v22)
    {
      v35 = v15;
      v36 = 0;
      v23 = v6;
      v39[0] = v7;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
      v24 = 0;
      v25 = v39[0];
      v26 = *(_QWORD *)(v39[0] + 16);
      do
      {
        v27 = *(_QWORD *)(v21 + 8 * v24 + 32);
        v39[0] = v25;
        v28 = *(_QWORD *)(v25 + 24);
        if (v26 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v26 + 1, 1);
          v25 = v39[0];
        }
        ++v24;
        *(_QWORD *)(v25 + 16) = v26 + 1;
        *(_QWORD *)(v25 + 8 * v26++ + 32) = v27;
      }
      while (v22 != v24);
      v30 = swift_bridgeObjectRelease_n();
      v6 = v23;
      v20 = v36;
    }
    else
    {
      v30 = swift_bridgeObjectRelease();
      v25 = MEMORY[0x24BEE4AF8];
    }
    MEMORY[0x24BDAC7A8](v30);
    v34[2] = v6;
    v34[3] = v25;
    v34[4] = v37;
    v34[5] = a1;
    v32 = specialized Sequence.compactMap<A>(_:)((uint64_t)partial apply for closure #3 in static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:), (uint64_t)v34, 0, v31);
    if (!v20)
    {
      a1 = (_QWORD *)v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t sub_21BD9ABDC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = specialized closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), **(_QWORD **)(v1 + 32), *(void **)(v1 + 40));
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_21BD9AC34()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(char a1)
{
  uint64_t v1;

  specialized closure #1 in closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(dispatch_group_t *)(v1 + 32));
}

uint64_t sub_21BD9AC74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t specialized Scene.init(_:assetService:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  uint64_t v9;

  v3 = RESceneCreate();
  type metadata accessor for Scene();
  swift_allocObject();
  v4 = Scene.init(coreScene:)(v3);
  RERelease();
  v5 = a2[3];
  v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  if ((RESceneLoadFromAsset() & 1) == 0)
  {
    v7 = (void *)REAssetHandleCopyAssetIdentifierString();
    v8 = String.init(_:)(v7);
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(Swift::String *)v9 = v8;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_BYTE *)(v9 + 32) = 0;
    swift_willThrow();
    swift_release();
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  return v4;
}

uint64_t specialized static __REAssetBundle.registerAnchorReferenceRawData(refData:assetService:fileNamesTuple:)(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  Swift::String v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  Swift::String v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  __int128 v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  if (one-time initialization token for instances != -1)
    swift_once();
  swift_retain();
  v13 = specialized AssetServiceScopedRegistry.instance(for:)(a3);
  swift_release();
  v14 = type metadata accessor for __RealityFileURLResolver();
  outlined init with copy of __REAssetService((uint64_t)(v13 + 2), (uint64_t)&v38);
  v15 = v39;
  v16 = v40;
  v17 = __swift_project_boxed_opaque_existential_1(&v38, v39);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v17, v14, v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  if (one-time initialization token for schemePrefix != -1)
    swift_once();
  v38 = static __RealityFileURLResolver.schemePrefix;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = a4;
  v18._object = a5;
  String.append(_:)(v18);
  swift_release();
  v19 = v38;
  outlined init with copy of __REAssetService((uint64_t)(v13 + 2), (uint64_t)&v38);
  v20 = v39;
  v21 = v40;
  v22 = __swift_project_boxed_opaque_existential_1(&v38, v39);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v22, v14, v20, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  *(_QWORD *)&v38 = 0x2F737465737361;
  *((_QWORD *)&v38 + 1) = 0xE700000000000000;
  v23._countAndFlagsBits = a6;
  v23._object = a7;
  String.append(_:)(v23);
  swift_release();
  v24 = (Swift::String)v38;
  outlined init with copy of __REAssetService((uint64_t)(v13 + 2), (uint64_t)&v38);
  v25 = v39;
  v26 = v40;
  v27 = __swift_project_boxed_opaque_existential_1(&v38, v39);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v27, v14, v25, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  v28._countAndFlagsBits = 47;
  v28._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v28)
    || (v29 = 47,
        v30 = (void *)0xE100000000000000,
        v31._countAndFlagsBits = 47,
        v31._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v31)))
  {
    v29 = 0;
    v30 = (void *)0xE000000000000000;
  }
  v38 = v19;
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = v29;
  v32._object = v30;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v33 = v38;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a1, a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v37 = v13[9];
  v13[9] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v33, *((uint64_t *)&v33 + 1), isUniquelyReferenced_nonNull_native);
  v13[9] = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static __REAssetBundle.registerAnchoringComponentARReferences(scene:realityFilename:assetDescriptor:assetService:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char **v29;
  uint64_t Object;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  void (*v45)(const char *, _QWORD);
  uint64_t v46;
  void *v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  int EnumCaseMultiPayload;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t RawDataForAssetDescriptor;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned int v79;
  uint64_t v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);

  v83 = a4;
  v81 = a3;
  v80 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v86 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v85 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Data.Deallocator();
  v87 = *(_QWORD *)(v11 - 8);
  v88 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for __REAnchoring();
  MEMORY[0x24BDAC7A8](v14);
  v92 = (const char **)((char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v95 = (uint64_t)&v77 - v20;
  v21 = type metadata accessor for __REAnchoringType();
  v97 = *(_QWORD *)(v21 - 8);
  v98 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v94 = (uint64_t)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v93 = (uint64_t)&v77 - v24;
  swift_beginAccess();
  if (static __REAnchoring.registration)
  {
    v89 = v8;
    v96 = v18;
    v82 = v13;
    v78 = a5;
    result = RESceneGetComponentsOfCustomType();
    if ((v26 & 0x8000000000000000) == 0)
    {
      v27 = v26;
      if (!v26)
        return result;
      v28 = result;
      v79 = *MEMORY[0x24BDCDB98];
      v84 = v9;
      v90 = v14;
      v29 = v92;
      while (v27)
      {
        Object = RECustomComponentGetObject();
        if (!Object)
        {
          lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
          swift_allocError();
          *(_QWORD *)v71 = 0;
          *(_QWORD *)(v71 + 8) = 0;
          *(_BYTE *)(v71 + 16) = 2;
          return swift_willThrow();
        }
        v31 = Object;
        v32 = (uint64_t)v96;
        outlined init with copy of (Int, URL)(Object + *(int *)(v14 + 20), (uint64_t)v96, &demangling cache variable for type metadata for __REAnchoringType?);
        outlined init with copy of __RKEntityActionSpecification(v31, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
        v34 = v97;
        v33 = v98;
        v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
        if (v101(v32, 1, v98) == 1)
        {
          v35 = *v29;
          if (v35)
          {
            v36 = strlen(v35);
            v37 = v82;
            (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v82, v79, v88);
            Data.Deallocator._deallocator.getter();
            v38 = v95;
            if (v36)
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              swift_retain();
              v39 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              v40 = specialized Data._Representation.init(_:count:)(v39, v36);
              v42 = v41;
              swift_release();
            }
            else
            {
              v45 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
              v45(v35, 0);
              swift_release();
              swift_release();
              v40 = 0;
              v42 = 0xC000000000000000;
            }
            (*(void (**)(char *, uint64_t))(v87 + 8))(v37, v88);
            type metadata accessor for JSONDecoder();
            swift_allocObject();
            JSONDecoder.init()();
            lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType, (uint64_t (*)(uint64_t))type metadata accessor for __REAnchoringType, (uint64_t)&protocol conformance descriptor for __REAnchoringType);
            v46 = v98;
            v47 = v91;
            dispatch thunk of JSONDecoder.decode<A>(_:from:)();
            v9 = v84;
            if (v47)
            {
              swift_release();
              outlined consume of Data._Representation(v40, v42);

              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v38, 1, 1, v46);
              v91 = 0;
            }
            else
            {
              v91 = 0;
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v97 + 56))(v38, 0, 1, v46);
              swift_release();
              outlined consume of Data._Representation(v40, v42);
            }
            v33 = v46;
            v14 = v90;
          }
          else
          {
            v38 = v95;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v95, 1, 1, v33);
          }
          v48 = v101;
          v29 = v92;
          outlined destroy of __RKEntityActionSpecification((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
          outlined destroy of BodyTrackingComponent?((uint64_t)v96, &demangling cache variable for type metadata for __REAnchoringType?);
          v44 = v48(v38, 1, v33);
        }
        else
        {
          outlined destroy of __RKEntityActionSpecification((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
          v43 = v32;
          v38 = v95;
          outlined init with take of __RKEntityActionSpecification(v43, v95, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v38, 0, 1, v33);
          v44 = v101(v38, 1, v33);
        }
        if (v44 == 1)
        {
          result = outlined destroy of BodyTrackingComponent?(v38, &demangling cache variable for type metadata for __REAnchoringType?);
        }
        else
        {
          v49 = v93;
          outlined init with take of __RKEntityActionSpecification(v38, v93, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
          outlined init with copy of __RKEntityActionSpecification(v49, v94, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 3)
          {
            v51 = (uint64_t)v86;
            v54 = v89;
            (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v86, v94, v89);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v51, 0, 1, v54);
          }
          else
          {
            v51 = (uint64_t)v86;
            if (EnumCaseMultiPayload == 1)
            {
              v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>));
              v53 = v94 + *(int *)(v52 + 48);
              v54 = v89;
              (*(void (**)(uint64_t))(v9 + 32))(v51);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v51, 0, 1, v54);
              v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v53, v55);
            }
            else
            {
              v54 = v89;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v86, 1, 1, v89);
              outlined destroy of __RKEntityActionSpecification(v94, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
            }
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v51, 1, v54) == 1)
          {
            outlined destroy of __RKEntityActionSpecification(v93, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
            result = outlined destroy of BodyTrackingComponent?(v51, &demangling cache variable for type metadata for URL?);
            v14 = v90;
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v85, v51, v54);
            v56 = URL.lastPathComponent.getter();
            v58 = v57;
            v59 = v78;
            v61 = v78[3];
            v60 = v78[4];
            __swift_project_boxed_opaque_existential_1(v78, v61);
            (*(void (**)(uint64_t, uint64_t))(v60 + 32))(v61, v60);
            String.utf8CString.getter();
            v62 = REAssetManagerResolveAssetDescriptor();
            result = swift_release();
            if (!v62)
              goto LABEL_39;
            v64 = v59[3];
            v63 = v59[4];
            __swift_project_boxed_opaque_existential_1(v59, v64);
            (*(void (**)(uint64_t, uint64_t))(v63 + 32))(v64, v63);
            RawDataForAssetDescriptor = REAssetManagerLoadRawDataForAssetDescriptor();
            if (!RawDataForAssetDescriptor)
            {
              v99 = 0;
              v100 = 0xE000000000000000;
              _StringGuts.grow(_:)(33);
              swift_bridgeObjectRelease();
              v99 = 0xD00000000000001ELL;
              v100 = 0x800000021BE92C00;
              v72._countAndFlagsBits = v56;
              v72._object = v58;
              String.append(_:)(v72);
              swift_bridgeObjectRelease();
              v73._countAndFlagsBits = 46;
              v73._object = (void *)0xE100000000000000;
              String.append(_:)(v73);
              v74 = v99;
              v75 = v100;
              lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
              swift_allocError();
              *(_QWORD *)v76 = v74;
              *(_QWORD *)(v76 + 8) = v75;
              *(_BYTE *)(v76 + 16) = 3;
              swift_willThrow();
              RERelease();
              (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v89);
              return outlined destroy of __RKEntityActionSpecification(v93, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
            }
            v66 = (void *)RawDataForAssetDescriptor;
            v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            v69 = v68;

            specialized static __REAssetBundle.registerAnchorReferenceRawData(refData:assetService:fileNamesTuple:)(v67, v69, v59, v80, v81, v56, v58);
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v67, v69);
            RERelease();
            v9 = v84;
            (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v89);
            result = outlined destroy of __RKEntityActionSpecification(v93, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
            v14 = v90;
            v29 = v92;
          }
        }
        v28 += 8;
        if (!--v27)
          return result;
      }
      __break(1u);
    }
    __break(1u);
LABEL_39:
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)v70 = xmmword_21BE7A4B0;
    *(_BYTE *)(v70 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  void *v4;
  void *v5;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Object;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  void *v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  const char *v57;
  size_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void (*v65)(const char *, _QWORD);
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  _BYTE v72[4];
  unsigned int v73;
  uint64_t (*v74)(uint64_t);
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  _BYTE *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  void *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  v5 = v4;
  v85 = a3;
  v79 = type metadata accessor for Data.Deallocator();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v9 = (uint64_t (*)(uint64_t))&v72[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v94 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v94);
  v11 = &v72[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v12);
  v95 = &v72[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v101 = &v72[-v15];
  v103 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v84 = *(_QWORD *)(v103 - 8);
  MEMORY[0x24BDAC7A8](v103);
  v96 = &v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v90 = *a4;
  swift_beginAccess();
  if (!static __RKEntityInteractionsComponent.registration)
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)v70 = xmmword_21BE6A310;
    *(_BYTE *)(v70 + 16) = 0;
    swift_willThrow();
    return v71 & 1;
  }
  v17 = closure #1 in Scene.entitiesWithInteractions()();
  if (!(v17 >> 62))
  {
    result = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_4;
LABEL_68:
    v75 = 0;
LABEL_69:
    swift_bridgeObjectRelease();
    v71 = v75;
    return v71 & 1;
  }
LABEL_67:
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_68;
LABEL_4:
  v75 = 0;
  v19 = 0;
  v82 = v17 & 0xC000000000000001;
  v77 = v17 & 0xFFFFFFFFFFFFFF8;
  v76 = v17 + 32;
  v73 = *MEMORY[0x24BDCDB98];
  v89 = a2;
  v74 = v9;
  v81 = v17;
  v80 = result;
  v92 = v11;
  v91 = v12;
  while (1)
  {
    if (v82)
    {
      v20 = MEMORY[0x220769770](v19, v17);
      v9 = type metadata accessor for __RKEntityInteractionSpecification;
      v21 = __OFADD__(v19, 1);
      v22 = v19 + 1;
      if (v21)
        goto LABEL_66;
    }
    else
    {
      v9 = type metadata accessor for __RKEntityInteractionSpecification;
      if (v19 >= *(_QWORD *)(v77 + 16))
      {
        __break(1u);
        return result;
      }
      v20 = *(_QWORD *)(v76 + 8 * v19);
      swift_retain();
      v21 = __OFADD__(v19, 1);
      v22 = v19 + 1;
      if (v21)
      {
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
    }
    v102 = v5;
    v23 = swift_allocObject();
    *(_BYTE *)(v23 + 16) = 0;
    v86 = v23 + 16;
    outlined init with copy of __REAssetService(v85, (uint64_t)&v106);
    outlined init with copy of __REAssetService((uint64_t)&v106, (uint64_t)&v105);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = a2;
    outlined init with take of BindableDataInternal(&v106, v24 + 24);
    *(_BYTE *)(v24 + 64) = v90;
    v97 = v24;
    *(_QWORD *)(v24 + 72) = v23;
    v88 = v20;
    v87 = v22;
    v93 = v23;
    if (!static __RKEntityInteractionsComponent.registration)
    {
      swift_bridgeObjectRetain_n();
LABEL_17:
      swift_retain_n();
      v29 = MEMORY[0x24BEE4AF8];
      v27 = (uint64_t)v96;
      v28 = v95;
      v30 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (v30)
        break;
      goto LABEL_46;
    }
    swift_bridgeObjectRetain_n();
    if (!REEntityGetCustomComponent())
      goto LABEL_17;
    Object = RECustomComponentGetObject();
    if (!Object)
      goto LABEL_17;
    v26 = *(_QWORD *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)&v104);
    v27 = (uint64_t)v96;
    v28 = v95;
    if (v26)
    {
      swift_retain_n();
      v29 = v26;
    }
    else
    {
      v57 = v104;
      if (v104)
      {
        v58 = strlen(v104);
        v59 = v74;
        (*(void (**)(uint64_t (*)(uint64_t), _QWORD, uint64_t))(v78 + 104))(v74, v73, v79);
        v60 = Data.Deallocator._deallocator.getter();
        v99 = v61;
        if (v58)
        {
          v100 = v60;
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_retain();
          v62 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
          v100 = specialized Data._Representation.init(_:count:)(v62, v58);
          v64 = v63;
          swift_retain_n();
          v59 = v74;
        }
        else
        {
          v65 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
          v65(v57, 0);
          swift_retain_n();
          swift_release();
          v100 = 0;
          v64 = 0xC000000000000000;
        }
        swift_release();
        (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v78 + 8))(v59, v79);
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
        lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
        v66 = v102;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        if (v66)
        {
          swift_release();
          outlined consume of Data._Representation(v100, v64);

          v102 = 0;
          v29 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          v102 = 0;
          swift_release();
          outlined consume of Data._Representation(v100, v64);
          v29 = v107;
        }
      }
      else
      {
        swift_retain_n();
        v29 = MEMORY[0x24BEE4AF8];
      }
    }
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)&v104);
    v30 = *(_QWORD *)(v29 + 16);
    if (v30)
      break;
LABEL_46:
    swift_bridgeObjectRelease();
    v53 = (const char *)MEMORY[0x24BEE4AF8];
LABEL_47:
    v5 = v102;
    a2 = v89;
    v17 = v81;
    v19 = v87;
    if (!static __RKEntityInteractionsComponent.registration)
      goto LABEL_57;
    v67 = *((_QWORD *)static __RKEntityInteractionsComponent.registration + 3);
    if (!*((_QWORD *)v53 + 2))
    {
      swift_bridgeObjectRelease();
      if (REEntityGetCustomComponent())
        REEntityRemoveComponentByClass();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_58;
    }
    if ((REEntityGetCustomComponent() || MEMORY[0x22076CF2C](*(_QWORD *)(v88 + 16), v67))
      && RECustomComponentGetObject())
    {
      __RKEntityInteractionsComponent.specifications.setter((uint64_t)v53);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
LABEL_57:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
LABEL_58:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
    v68 = v93;
    swift_release();
    swift_beginAccess();
    v69 = *(_BYTE *)(v68 + 16);
    swift_release();
    result = swift_release();
    if ((v69 & 1) != 0)
      v75 = 1;
    if (v19 == v80)
      goto LABEL_69;
  }
  v104 = (const char *)MEMORY[0x24BEE4AF8];
  swift_retain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
  v31 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
  v83 = v29;
  v100 = v31;
  v32 = v29 + v31;
  v99 = *(_QWORD *)(v84 + 72);
  while (1)
  {
    outlined init with copy of __RKEntityActionSpecification(v32, v27, type metadata accessor for __RKEntityInteractionSpecification);
    v33 = v32 + *(int *)(v103 + 20);
    outlined init with copy of __RKEntityActionSpecification(v33, (uint64_t)v28, type metadata accessor for __RKEntityActionSpecification);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 6)
      break;
    v98 = *v28;
    v42 = v28[16];
    v43 = *((_QWORD *)v28 + 3);
    v44 = v28[32];
    v45 = v28[33];
    v46 = v97;
    swift_retain();
    v47 = swift_bridgeObjectRetain();
    v48 = v102;
    v49 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f3F15g32ArgumentsVAGKcKF0E0L_yAA02__hI13H14OAJKFA2JKXEfU_AF02__fpgT0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(v47, (void (*)(char *))partial apply for closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:), v46);
    v102 = v48;
    if (v48)
    {
      swift_bridgeObjectRelease_n();
      swift_release();
      v27 = (uint64_t)v96;
      goto LABEL_65;
    }
    v50 = v49;
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    v40 = v101;
    *v101 = v98;
    *((_QWORD *)v40 + 1) = v50;
    v40[16] = v42;
    *((_QWORD *)v40 + 3) = v43;
    v40[32] = v44;
    v40[33] = v45;
    v12 = v91;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    v11 = v92;
    v27 = (uint64_t)v96;
    v28 = v95;
LABEL_31:
    outlined assign with take of __RKEntityActionSpecification((uint64_t)v40, v27 + *(int *)(v103 + 20));
    v53 = v104;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v53 + 2) + 1, 1);
      v53 = v104;
    }
    v55 = *((_QWORD *)v53 + 2);
    v54 = *((_QWORD *)v53 + 3);
    if (v55 >= v54 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
      v53 = v104;
    }
    *((_QWORD *)v53 + 2) = v55 + 1;
    v56 = v99;
    outlined init with take of __RKEntityActionSpecification(v27, (uint64_t)&v53[v100 + v55 * v99], type metadata accessor for __RKEntityInteractionSpecification);
    v32 += v56;
    if (!--v30)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_47;
    }
  }
  if (EnumCaseMultiPayload)
  {
    v51 = v33;
    v40 = v101;
    outlined init with copy of __RKEntityActionSpecification(v51, (uint64_t)v101, type metadata accessor for __RKEntityActionSpecification);
    outlined destroy of __RKEntityActionSpecification((uint64_t)v28, type metadata accessor for __RKEntityActionSpecification);
    goto LABEL_31;
  }
  outlined init with take of __RKEntityActionSpecification((uint64_t)v28, (uint64_t)v11, type metadata accessor for __RKEntityAudioActionArguments);
  v35 = (uint64_t *)&v11[*(int *)(v94 + 20)];
  v37 = *v35;
  v36 = v35[1];
  v38 = v37 & 0xFFFFFFFFFFFFLL;
  if ((v36 & 0x2000000000000000) != 0)
    v39 = HIBYTE(v36) & 0xF;
  else
    v39 = v38;
  if (!v39)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for __RKEntityAudioActionArguments);
    v52 = v33;
    v40 = v101;
    outlined init with copy of __RKEntityActionSpecification(v52, (uint64_t)v101, type metadata accessor for __RKEntityActionSpecification);
    goto LABEL_31;
  }
  v40 = v101;
  v41 = v102;
  closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)((uint64_t)v11, v89, &v105, v90, v93, (uint64_t)v101);
  v102 = v41;
  if (!v41)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for __RKEntityAudioActionArguments);
    swift_storeEnumTagMultiPayload();
    goto LABEL_31;
  }
  outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for __RKEntityAudioActionArguments);
LABEL_65:
  outlined destroy of __RKEntityActionSpecification(v27, type metadata accessor for __RKEntityInteractionSpecification);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  return v71 & 1;
}

uint64_t specialized static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD v28[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned __int8 v35[24];
  __int128 v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[25];
  char v46;
  _BYTE v47[8];
  uint64_t v48;

  v5 = a1[7];
  v43 = a1[6];
  v44 = v5;
  *(_OWORD *)v45 = a1[8];
  *(_OWORD *)&v45[9] = *(__int128 *)((char *)a1 + 137);
  v6 = a1[3];
  v39 = a1[2];
  v40 = v6;
  v7 = a1[5];
  v41 = a1[4];
  v42 = v7;
  v8 = a1[1];
  v37 = *a1;
  v38 = v8;
  v9 = Entity.storageForAudioActions.getter();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = 0;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = MEMORY[0x24BEE4AF8];
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v36);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  outlined init with take of BindableDataInternal(v36, v12 + 24);
  v13 = v44;
  *(_OWORD *)(v12 + 160) = v43;
  *(_OWORD *)(v12 + 176) = v13;
  *(_OWORD *)(v12 + 192) = *(_OWORD *)v45;
  *(_OWORD *)(v12 + 201) = *(_OWORD *)&v45[9];
  v14 = v40;
  *(_OWORD *)(v12 + 96) = v39;
  *(_OWORD *)(v12 + 112) = v14;
  v15 = v42;
  *(_OWORD *)(v12 + 128) = v41;
  *(_OWORD *)(v12 + 144) = v15;
  v16 = v38;
  *(_OWORD *)(v12 + 64) = v37;
  *(_OWORD *)(v12 + 80) = v16;
  *(_QWORD *)(v12 + 224) = a3;
  *(_QWORD *)(v12 + 232) = v10;
  outlined retain of __REAssetBundle.ExportOptions((uint64_t)&v37);
  v17 = v48;
  Entity.remapAudioActions(_:)((void (*)(char *))partial apply for closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:), v12);
  swift_retain();
  if (v17)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v31 = v10 + 16;
    swift_retain();
    swift_release();
    if (REEntityGetComponent())
      REEntityRemoveComponent();
    v34 = REEntityGetOrAddComponent();
    swift_beginAccess();
    v18 = *(_QWORD *)(v11 + 16);
    v12 = *(_QWORD *)(v18 + 16);
    if (v12)
    {
      v28[7] = v11;
      v29 = v10;
      v33 = a2;
      v30 = v9;
      outlined init with take of __REAssetBundle.QueueOptions(&v37, &v46);
      swift_bridgeObjectRetain();
      v28[6] = v18;
      v19 = (uint64_t *)(v18 + 40);
      v32 = MEMORY[0x24BEE4AE0] + 8;
      while (1)
      {
        v48 = 0;
        v20 = *(v19 - 1);
        v21 = *v19;
        v22 = v33;
        v23 = v33[3];
        v24 = v33[4];
        __swift_project_boxed_opaque_existential_1(v33, v23);
        v25 = outlined init with take of __REAssetBundle.QueueOptions(&v46, v35);
        MEMORY[0x24BDAC7A8](v25);
        v28[2] = v22;
        v28[3] = v20;
        v28[4] = v21;
        v28[5] = v34;
        swift_bridgeObjectRetain();
        v26 = v48;
        __REAssetService.performOnEngineQueue<A>(with:_:)(v35, (void (*)(uint64_t))partial apply for closure #3 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:), (uint64_t)v28, v23, v32, v24, (uint64_t)v47);
        if (v26)
          break;
        v19 += 2;
        swift_bridgeObjectRelease();
        if (!--v12)
        {
          swift_release();
          swift_bridgeObjectRelease();
          v10 = v29;
          goto LABEL_11;
        }
      }
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
LABEL_11:
      swift_beginAccess();
      LOBYTE(v12) = *(_BYTE *)(v10 + 16);
      swift_release();
      swift_release();
    }
  }
  return v12 & 1;
}

uint64_t specialized static __REAssetBundle.remapSceneInteractionsBeforeWrite(with:assetService:fileWriter:scene:freeOfChangeSceneActions:)(__int128 *a1, _QWORD *a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char *v25;
  uint64_t Object;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, _QWORD);
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  BOOL *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69[8];
  _OWORD v70[4];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[3];
  unint64_t v80;

  v6 = v5;
  v65 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v56 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v64 = (uint64_t)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for __RKEntityActionSpecification(0);
  v63 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v67 = (uint64_t)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Data.Deallocator();
  v54 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v58 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[7];
  v77 = a1[6];
  v78 = v16;
  v79[0] = a1[8];
  *(_OWORD *)((char *)v79 + 9) = *(__int128 *)((char *)a1 + 137);
  v17 = a1[3];
  v73 = a1[2];
  v74 = v17;
  v18 = a1[5];
  v75 = a1[4];
  v76 = v18;
  v19 = a1[1];
  v71 = *a1;
  v72 = v19;
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
  {
    v20 = closure #1 in Scene.entitiesWithInteractions()();
    if (v20 >> 62)
      goto LABEL_48;
    for (i = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
    {
      v57 = 0;
      v22 = 0;
      v66 = v20 & 0xC000000000000001;
      v59 = v20 & 0xFFFFFFFFFFFFFF8;
      v51 = *MEMORY[0x24BDCDB98];
      v61 = v20;
      v62 = i;
      while (1)
      {
        if (v66)
        {
          MEMORY[0x220769770](v22, v20);
          v23 = v22 + 1;
          if (__OFADD__(v22, 1))
            break;
          goto LABEL_11;
        }
        if (v22 >= *(_QWORD *)(v59 + 16))
          goto LABEL_47;
        swift_retain();
        v23 = v22 + 1;
        if (__OFADD__(v22, 1))
          break;
LABEL_11:
        v80 = v23;
        v69[6] = v77;
        v69[7] = v78;
        v70[0] = v79[0];
        *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)((char *)v79 + 9);
        v69[2] = v73;
        v69[3] = v74;
        v69[4] = v75;
        v69[5] = v76;
        v69[0] = v71;
        v69[1] = v72;
        v24 = specialized static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(v69, a2, a3);
        if (v6)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return v46 & 1;
        }
        if ((v24 & 1) != 0)
        {
          if (*a5)
          {
            v57 = 1;
LABEL_18:
            v25 = v58;
            v52 = a2;
            v53 = a5;
            if (static __RKEntityInteractionsComponent.registration
              && REEntityGetCustomComponent()
              && (Object = RECustomComponentGetObject()) != 0)
            {
              v27 = *(_QWORD *)(Object + 16);
              outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v69);
              if (v27)
              {
                v28 = v27;
                v20 = v61;
              }
              else
              {
                v50 = a3;
                v29 = *(_QWORD *)&v69[0];
                if (*(_QWORD *)&v69[0])
                {
                  v60 = 0;
                  v30 = strlen(*(const char **)&v69[0]);
                  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v25, v51, v55);
                  Data.Deallocator._deallocator.getter();
                  if (v30)
                  {
                    type metadata accessor for __DataStorage();
                    swift_allocObject();
                    swift_retain();
                    v31 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                    v30 = specialized Data._Representation.init(_:count:)(v31, v30);
                    v33 = v32;
                    swift_release();
                  }
                  else
                  {
                    v34 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter();
                    v34(v29, 0);
                    swift_release();
                    swift_release();
                    v33 = 0xC000000000000000;
                  }
                  (*(void (**)(char *, uint64_t))(v54 + 8))(v25, v55);
                  type metadata accessor for JSONDecoder();
                  swift_allocObject();
                  JSONDecoder.init()();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
                  lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
                  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                  swift_release();
                  outlined consume of Data._Representation(v30, v33);
                  v28 = v68;
                  a3 = v50;
                  v20 = v61;
                }
                else
                {
                  v28 = MEMORY[0x24BEE4AF8];
                  a3 = v50;
                  v20 = v61;
                }
              }
              swift_bridgeObjectRetain();
              outlined destroy of __RKEntityInteractionsComponent((uint64_t)v69);
            }
            else
            {
              v28 = MEMORY[0x24BEE4AF8];
              v20 = v61;
            }
            v35 = *(_QWORD *)(v28 + 16);
            v36 = v67;
            if (v35)
            {
              v49 = 0;
              v50 = a3;
              *(_QWORD *)&v69[0] = MEMORY[0x24BEE4AF8];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
              v37 = *(unsigned __int8 *)(v56 + 80);
              v48[1] = v28;
              v38 = v28 + ((v37 + 32) & ~v37);
              v60 = *(_QWORD *)(v56 + 72);
              do
              {
                v39 = v64;
                outlined init with copy of __RKEntityActionSpecification(v38, v64, type metadata accessor for __RKEntityInteractionSpecification);
                outlined init with copy of __RKEntityActionSpecification(v39 + *(int *)(v65 + 20), v36, type metadata accessor for __RKEntityActionSpecification);
                outlined destroy of __RKEntityActionSpecification(v39, type metadata accessor for __RKEntityInteractionSpecification);
                v40 = *(_QWORD *)&v69[0];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v40 + 16) + 1, 1);
                  v40 = *(_QWORD *)&v69[0];
                }
                v42 = *(_QWORD *)(v40 + 16);
                v41 = *(_QWORD *)(v40 + 24);
                if (v42 >= v41 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
                  v40 = *(_QWORD *)&v69[0];
                }
                *(_QWORD *)(v40 + 16) = v42 + 1;
                v43 = v40
                    + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))
                    + *(_QWORD *)(v63 + 72) * v42;
                v36 = v67;
                outlined init with take of __RKEntityActionSpecification(v67, v43, type metadata accessor for __RKEntityActionSpecification);
                v20 = v61;
                v38 += v60;
                --v35;
              }
              while (v35);
              swift_bridgeObjectRelease();
              v6 = v49;
              a3 = v50;
            }
            else
            {
              swift_bridgeObjectRelease();
              v40 = MEMORY[0x24BEE4AF8];
            }
            type metadata accessor for Scene();
            v44 = static Scene.containsChangeSceneActions(_:)(v40);
            swift_bridgeObjectRelease();
            swift_release();
            a2 = v52;
            a5 = v53;
            *v53 = (v44 & 1) == 0;
            v22 = v80;
            if (v80 == v62)
              goto LABEL_50;
          }
          else
          {
            swift_release();
            *a5 = 0;
            v57 = 1;
            v22 = v80;
            if (v80 == v62)
              goto LABEL_50;
          }
        }
        else
        {
          if (*a5)
            goto LABEL_18;
          swift_release();
          *a5 = 0;
          ++v22;
          if (v80 == v62)
            goto LABEL_50;
        }
      }
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      ;
    }
    v57 = 0;
LABEL_50:
    swift_bridgeObjectRelease();
    v46 = v57;
  }
  else
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)v45 = xmmword_21BE6A310;
    *(_BYTE *)(v45 + 16) = 0;
    swift_willThrow();
  }
  return v46 & 1;
}

uint64_t sub_21BD9D1D0()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  if (*(_QWORD *)(v0 + 112) >= 6uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 176))
    swift_release();
  if (*(_QWORD *)(v0 + 192))
    swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(a1, *(_QWORD *)(v2 + 16), (uint64_t *)(v2 + 24), (char *)(v2 + 64), *(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 232), a2);
}

_BYTE *outlined init with take of __REAssetBundle.QueueOptions(_BYTE *a1, _BYTE *a2)
{
  __swift_memcpy1_1(a2, a1);
  return a2;
}

uint64_t partial apply for closure #3 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)()
{
  uint64_t v0;

  return closure #3 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(*(_QWORD **)(v0 + 16));
}

uint64_t outlined assign with take of __RKEntityActionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __RKEntityActionSpecification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(*(_QWORD **)(v1 + 16), a1);
}

unint64_t *partial apply for closure #3 in static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)@<X0>(unint64_t *a1@<X0>, unint64_t **a2@<X8>)
{
  uint64_t v2;

  return closure #3 in static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 40), a2);
}

uint64_t partial apply for closure #1 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

_QWORD *partial apply for closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

uint64_t partial apply for closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(a1, *(_QWORD **)(v3 + 16), *(_QWORD *)(v3 + 24), *(void **)(v3 + 32), *(_QWORD *)(v3 + 40), *(unsigned __int8 **)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), a3, a2);
}

uint64_t partial apply for closure #1 in closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(v1[3], v1[4], v1[5], a1);
}

uint64_t sub_21BD9D3DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(a1, *(_QWORD *)(v2 + 16), (_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 64), *(_QWORD *)(v2 + 72), a2);
}

uint64_t partial apply for closure #1 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(*(_QWORD **)(v1 + 16), a1);
}

uint64_t partial apply for closure #2 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #2 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(*(_QWORD **)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #2 in closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), a2);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.ExportOptions.PlatformRequirement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD9D4D0 + 4 * byte_21BE7A4C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD9D504 + 4 * byte_21BE7A4C0[v4]))();
}

uint64_t sub_21BD9D504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD9D50C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD9D514);
  return result;
}

uint64_t sub_21BD9D520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD9D528);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD9D52C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD9D534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)()
{
  return &unk_24DFD3B00;
}

void closure #1 in static __REAssetBundle.__init(elements:assetService:)partial apply(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:)(a1, a2);
}

void LoadRequest.result.getter(uint64_t a1@<X8>)
{
  LoadRequestAllocatedLock.valueWithLock.getter(a1);
}

uint64_t LoadRequest.receive<A>(subscriber:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v0 = type metadata accessor for Future();
  MEMORY[0x220772E3C](MEMORY[0x24BDB9E58], v0);
  return Publisher.subscribe<A>(_:)();
}

uint64_t LoadRequest.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t LoadRequest.__deallocating_deinit()
{
  return LoadRequest.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance LoadRequest<A>()
{
  return LoadRequest.receive<A>(subscriber:)();
}

uint64_t LoadRequestDependencies.__deallocating_deinit()
{
  return LoadRequest.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t LoadRequest.__deallocating_deinit(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  return swift_deallocClassInstance();
}

void LoadRequestAllocatedLock.valueWithLock.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  v3 = *v1;
  os_unfair_lock_lock((os_unfair_lock_t)(v1[2] + 16));
  v4 = (char *)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1[2] + 16));
}

uint64_t type metadata completion function for LoadRequest()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LoadRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadRequest);
}

uint64_t method lookup function for LoadRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LoadRequest.result.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of LoadRequest.subscribe<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of LoadRequest.receive<A>(subscriber:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t type metadata accessor for LoadRequestDependencies()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for LoadRequestAllocatedLock()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t LoadRequestAllocatedLock.__deallocating_deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 96));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LoadRequestAllocatedLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadRequestAllocatedLock);
}

void AudioBufferResource.CreateOptions.init()(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = -1;
}

void AudioBufferResource.CreateOptions.spatialMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *AudioBufferResource.CreateOptions.spatialMode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.spatialMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.CreateOptions.shouldLoop.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AudioBufferResource.CreateOptions.shouldLoop.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.shouldLoop.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.CreateOptions.randomizeStartTime.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AudioBufferResource.CreateOptions.randomizeStartTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.randomizeStartTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.CreateOptions.mixGroupName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioBufferResource.CreateOptions.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.mixGroupName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioBufferResource.CreateOptions.normalization.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AudioBufferResource.CreateOptions.normalization.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.normalization.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioBufferResource.CreateOptions.calibration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AudioBufferResource.CreateOptions.calibration.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 40) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 48) = v2;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.calibration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL specialized static AudioBufferResource.CreateOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 result;
  uint64_t v4;
  double v5;
  int v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  int v11;
  double v12;
  int v13;
  char v14;

  result = 0;
  if (*a1 != *a2 || ((a1[1] ^ a2[1]) & 1) != 0 || ((a1[2] ^ a2[2]) & 1) != 0)
    return result;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((double *)a1 + 3);
  v6 = a1[32];
  v7 = *((double *)a1 + 5);
  v8 = a1[48];
  v9 = *((_QWORD *)a2 + 2);
  v10 = *((double *)a2 + 3);
  v11 = a2[32];
  v12 = *((double *)a2 + 5);
  v13 = a2[48];
  if (!v4)
  {
    if (v9)
      return 0;
    goto LABEL_11;
  }
  if (!v9)
    return 0;
  if (*((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && v4 == v9
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
  {
LABEL_11:
    if (v6 == 255)
    {
      if (v11 != 255)
        return 0;
      goto LABEL_26;
    }
    if (v11 == 255)
      return 0;
    if (v6)
    {
      if (v6 != 1)
      {
        result = 0;
        if (v11 != 2 || v10 != 0.0)
          return result;
LABEL_26:
        result = v13 == 255 && v8 == 255;
        if (v8 == 255 || v13 == 255)
          return result;
        if ((v8 & 1) != 0)
        {
          if ((v13 & 1) != 0)
            goto LABEL_35;
        }
        else if ((v13 & 1) == 0)
        {
LABEL_35:
          if (v7 == v12)
            return 1;
        }
        return 0;
      }
      result = 0;
      if (v11 != 1)
        return result;
    }
    else
    {
      result = 0;
      if (v11)
        return result;
    }
    if (v5 != v10)
      return result;
    goto LABEL_26;
  }
  return result;
}

uint64_t initializeWithCopy for AudioBufferResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioBufferResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithTake for AudioBufferResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for AudioBufferResource.CreateOptions()
{
  return &type metadata for AudioBufferResource.CreateOptions;
}

uint64_t && infix<A>(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t (**a2)()@<X8>)
{
  return && infix<A>(_:_:)(a1, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for QueryPredicates.And, (uint64_t)&protocol conformance descriptor for QueryPredicates.And<A>, a2);
}

uint64_t type metadata accessor for QueryPredicates.And(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.And);
}

uint64_t || infix<A>(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t (**a2)()@<X8>)
{
  return && infix<A>(_:_:)(a1, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for QueryPredicates.Or, (uint64_t)&protocol conformance descriptor for QueryPredicates.Or<A>, a2);
}

uint64_t && infix<A>(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(_QWORD, uint64_t)@<X3>, uint64_t a3@<X4>, uint64_t (**a4)()@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2(0, a1);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v7 = MEMORY[0x220772E3C](a3, v6);
  QueryPredicateProtocol.eraseToQueryPredicate()(v6, v7, a4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.Or(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.Or);
}

uint64_t ! prefix<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for QueryPredicates.Not(0, a1, a2, a3);
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Not<A>, v5);
  QueryPredicateProtocol.eraseToQueryPredicate()(v5, v6, a4);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.Not(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.Not);
}

uint64_t === infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)v10, &v18);
  v12 = v18;
  v11 = v19;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #2 in === infix<A, B>(_:_:), (uint64_t)v13, v22);
  v18 = v12;
  v19 = v11;
  v20 = v22[0];
  v21 = v22[1];
  v15 = type metadata accessor for QueryPredicates.Identical(0, a3, a4, v14);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v16 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Identical<A, B>, v15);
  QueryPredicateProtocol.eraseToQueryPredicate()(v15, v16, a5);
  swift_release();
  return swift_release();
}

uint64_t sub_21BD9E0E8()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in === infix<A, B>(_:_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for QueryPredicates.Identical(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.Identical);
}

uint64_t === infix<A, B>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = (uint64_t *)(*a1 + *MEMORY[0x24BEE46A8]);
  v6 = *v5;
  v7 = v5[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)a1, &v15);
  v9 = v15;
  v8 = v16;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v6;
  v10[3] = v7;
  v10[4] = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)v10, v19);
  v15 = v9;
  v16 = v8;
  v17 = v19[0];
  v18 = v19[1];
  v12 = type metadata accessor for QueryPredicates.Identical(0, v6, v7, v11);
  swift_retain();
  swift_unknownObjectRetain();
  v13 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Identical<A, B>, v12);
  QueryPredicateProtocol.eraseToQueryPredicate()(v12, v13, a3);
  swift_release();
  return swift_release();
}

{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v5 = (uint64_t *)(*a1 + *MEMORY[0x24BEE46A8]);
  v6 = *v5;
  v7 = v5[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)a1, &v14);
  v9 = v14;
  v8 = v15;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), a2, v18);
  v14 = v9;
  v15 = v8;
  v16 = v18[0];
  v17 = v18[1];
  v11 = type metadata accessor for QueryPredicates.Identical(0, v6, v7, v10);
  swift_retain();
  swift_retain();
  v12 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Identical<A, B>, v11);
  QueryPredicateProtocol.eraseToQueryPredicate()(v11, v12, a3);
  swift_release();
  return swift_release();
}

uint64_t === infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v6 = *a2;
  v7 = (_QWORD *)swift_allocObject();
  v8 = (uint64_t *)(v6 + *MEMORY[0x24BEE46A8]);
  v9 = *v8;
  v7[2] = *v8;
  v10 = v8[1];
  v7[3] = v10;
  v7[4] = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)v7, &v17);
  v12 = v17;
  v11 = v18;
  QueryType.init(_:)((uint64_t)partial apply for closure #2 in === infix<A, B>(_:_:), (uint64_t)a2, v21);
  v17 = v12;
  v18 = v11;
  v19 = v21[0];
  v20 = v21[1];
  v14 = type metadata accessor for QueryPredicates.Identical(0, v9, v10, v13);
  swift_unknownObjectRetain();
  swift_retain();
  v15 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Identical<A, B>, v14);
  QueryPredicateProtocol.eraseToQueryPredicate()(v14, v15, a3);
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #2 in === infix<A, B>(_:_:)()
{
  return swift_getAtKeyPath();
}

uint64_t == infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char *v12;
  void (*v13)(char *, __n128);
  unint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v23 = a5;
  v25 = a2;
  v26 = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, __n128))(v9 + 16);
  v13(v12, v11);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a3;
  *((_QWORD *)v15 + 3) = a4;
  *((_QWORD *)v15 + 4) = a5;
  v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v16(&v15[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v27);
  v17 = v28;
  v24 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v25, a4);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  v19 = v23;
  *((_QWORD *)v18 + 4) = v23;
  v16(&v18[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v18, v31);
  v27 = v24;
  v28 = v17;
  v29 = v31[0];
  v30 = v31[1];
  v20 = type metadata accessor for QueryPredicates.Equals(0, a3, a4, v19);
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Equals<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.Equals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.Equals);
}

uint64_t == infix<A, B>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v21 = a4;
  v7 = (uint64_t *)(*a1 + *MEMORY[0x24BEE46A8]);
  v8 = v7[1];
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  v14 = v23;
  v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v8;
  *((_QWORD *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  v22 = v20;
  v23 = v14;
  v24 = v26[0];
  v25 = v26[1];
  v17 = type metadata accessor for QueryPredicates.Equals(0, v13, v8, a3);
  swift_retain();
  v18 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Equals<A, B>, v17);
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, v18, v21);
  swift_release();
  return swift_release();
}

uint64_t == infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v7 = *a2;
  v8 = (_QWORD *)MEMORY[0x24BEE46A8];
  v9 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a2 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v23 - v12;
  (*(void (**)(char *, __n128))(v10 + 16))((char *)&v23 - v12, v11);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  v16 = *(_QWORD *)(v7 + *v8);
  *((_QWORD *)v15 + 2) = v16;
  *((_QWORD *)v15 + 3) = v9;
  *((_QWORD *)v15 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, v9);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v23);
  v18 = v23;
  v17 = v24;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v19, v27);
  v23 = v18;
  v24 = v17;
  v25 = v27[0];
  v26 = v27[1];
  v20 = type metadata accessor for QueryPredicates.Equals(0, v16, v9, a3);
  swift_retain();
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Equals<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, a4);
  swift_release();
  return swift_release();
}

uint64_t == infix<A, B>(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = *a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = (uint64_t *)(v8 + *MEMORY[0x24BEE46A8]);
  v11 = *v10;
  v12 = v10[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v9, &v19);
  v14 = v19;
  v13 = v20;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v15, v23);
  v19 = v14;
  v20 = v13;
  v21 = v23[0];
  v22 = v23[1];
  v16 = type metadata accessor for QueryPredicates.Equals(0, v11, v12, a3);
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Equals<A, B>, v16);
  QueryPredicateProtocol.eraseToQueryPredicate()(v16, v17, a4);
  swift_release();
  return swift_release();
}

uint64_t != infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char *v12;
  void (*v13)(char *, __n128);
  unint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v23 = a5;
  v25 = a2;
  v26 = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, __n128))(v9 + 16);
  v13(v12, v11);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a3;
  *((_QWORD *)v15 + 3) = a4;
  *((_QWORD *)v15 + 4) = a5;
  v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v16(&v15[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v27);
  v17 = v28;
  v24 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v25, a4);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  v19 = v23;
  *((_QWORD *)v18 + 4) = v23;
  v16(&v18[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v18, v31);
  v27 = v24;
  v28 = v17;
  v29 = v31[0];
  v30 = v31[1];
  v20 = type metadata accessor for QueryPredicates.NotEquals(0, a3, a4, v19);
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.NotEquals<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.NotEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.NotEquals);
}

uint64_t != infix<A, B>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v21 = a4;
  v7 = (uint64_t *)(*a1 + *MEMORY[0x24BEE46A8]);
  v8 = v7[1];
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  v14 = v23;
  v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v8;
  *((_QWORD *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  v22 = v20;
  v23 = v14;
  v24 = v26[0];
  v25 = v26[1];
  v17 = type metadata accessor for QueryPredicates.NotEquals(0, v13, v8, a3);
  swift_retain();
  v18 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.NotEquals<A, B>, v17);
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, v18, v21);
  swift_release();
  return swift_release();
}

uint64_t != infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v7 = *a2;
  v8 = (_QWORD *)MEMORY[0x24BEE46A8];
  v9 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a2 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v23 - v12;
  (*(void (**)(char *, __n128))(v10 + 16))((char *)&v23 - v12, v11);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  v16 = *(_QWORD *)(v7 + *v8);
  *((_QWORD *)v15 + 2) = v16;
  *((_QWORD *)v15 + 3) = v9;
  *((_QWORD *)v15 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, v9);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v23);
  v18 = v23;
  v17 = v24;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v19, v27);
  v23 = v18;
  v24 = v17;
  v25 = v27[0];
  v26 = v27[1];
  v20 = type metadata accessor for QueryPredicates.NotEquals(0, v16, v9, a3);
  swift_retain();
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.NotEquals<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, a4);
  swift_release();
  return swift_release();
}

uint64_t != infix<A, B>(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = *a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = (uint64_t *)(v8 + *MEMORY[0x24BEE46A8]);
  v11 = *v10;
  v12 = v10[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v9, &v19);
  v14 = v19;
  v13 = v20;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v15, v23);
  v19 = v14;
  v20 = v13;
  v21 = v23[0];
  v22 = v23[1];
  v16 = type metadata accessor for QueryPredicates.NotEquals(0, v11, v12, a3);
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.NotEquals<A, B>, v16);
  QueryPredicateProtocol.eraseToQueryPredicate()(v16, v17, a4);
  swift_release();
  return swift_release();
}

uint64_t < infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char *v12;
  void (*v13)(char *, __n128);
  unint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v23 = a5;
  v25 = a2;
  v26 = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, __n128))(v9 + 16);
  v13(v12, v11);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a3;
  *((_QWORD *)v15 + 3) = a4;
  *((_QWORD *)v15 + 4) = a5;
  v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v16(&v15[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v27);
  v17 = v28;
  v24 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v25, a4);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  v19 = v23;
  *((_QWORD *)v18 + 4) = v23;
  v16(&v18[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v18, v31);
  v27 = v24;
  v28 = v17;
  v29 = v31[0];
  v30 = v31[1];
  v20 = type metadata accessor for QueryPredicates.LessThan(0, a3, a4, v19);
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThan<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.LessThan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.LessThan);
}

uint64_t < infix<A, B>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v21 = a4;
  v7 = (uint64_t *)(*a1 + *MEMORY[0x24BEE46A8]);
  v8 = v7[1];
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  v14 = v23;
  v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v8;
  *((_QWORD *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  v22 = v20;
  v23 = v14;
  v24 = v26[0];
  v25 = v26[1];
  v17 = type metadata accessor for QueryPredicates.LessThan(0, v13, v8, a3);
  swift_retain();
  v18 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThan<A, B>, v17);
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, v18, v21);
  swift_release();
  return swift_release();
}

uint64_t < infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v7 = *a2;
  v8 = (_QWORD *)MEMORY[0x24BEE46A8];
  v9 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a2 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v23 - v12;
  (*(void (**)(char *, __n128))(v10 + 16))((char *)&v23 - v12, v11);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  v16 = *(_QWORD *)(v7 + *v8);
  *((_QWORD *)v15 + 2) = v16;
  *((_QWORD *)v15 + 3) = v9;
  *((_QWORD *)v15 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, v9);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v23);
  v18 = v23;
  v17 = v24;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v19, v27);
  v23 = v18;
  v24 = v17;
  v25 = v27[0];
  v26 = v27[1];
  v20 = type metadata accessor for QueryPredicates.LessThan(0, v16, v9, a3);
  swift_retain();
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThan<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, a4);
  swift_release();
  return swift_release();
}

uint64_t < infix<A, B>(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = *a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = (uint64_t *)(v8 + *MEMORY[0x24BEE46A8]);
  v11 = *v10;
  v12 = v10[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v9, &v19);
  v14 = v19;
  v13 = v20;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v15, v23);
  v19 = v14;
  v20 = v13;
  v21 = v23[0];
  v22 = v23[1];
  v16 = type metadata accessor for QueryPredicates.LessThan(0, v11, v12, a3);
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThan<A, B>, v16);
  QueryPredicateProtocol.eraseToQueryPredicate()(v16, v17, a4);
  swift_release();
  return swift_release();
}

uint64_t <= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char *v12;
  void (*v13)(char *, __n128);
  unint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v23 = a5;
  v25 = a2;
  v26 = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, __n128))(v9 + 16);
  v13(v12, v11);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a3;
  *((_QWORD *)v15 + 3) = a4;
  *((_QWORD *)v15 + 4) = a5;
  v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v16(&v15[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v27);
  v17 = v28;
  v24 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v25, a4);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  v19 = v23;
  *((_QWORD *)v18 + 4) = v23;
  v16(&v18[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v18, v31);
  v27 = v24;
  v28 = v17;
  v29 = v31[0];
  v30 = v31[1];
  v20 = type metadata accessor for QueryPredicates.LessThanOrEqual(0, a3, a4, v19);
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThanOrEqual<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.LessThanOrEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.LessThanOrEqual);
}

uint64_t <= infix<A, B>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v21 = a4;
  v7 = (uint64_t *)(*a1 + *MEMORY[0x24BEE46A8]);
  v8 = v7[1];
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  v14 = v23;
  v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v8;
  *((_QWORD *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  v22 = v20;
  v23 = v14;
  v24 = v26[0];
  v25 = v26[1];
  v17 = type metadata accessor for QueryPredicates.LessThanOrEqual(0, v13, v8, a3);
  swift_retain();
  v18 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThanOrEqual<A, B>, v17);
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, v18, v21);
  swift_release();
  return swift_release();
}

uint64_t <= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v7 = *a2;
  v8 = (_QWORD *)MEMORY[0x24BEE46A8];
  v9 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a2 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v23 - v12;
  (*(void (**)(char *, __n128))(v10 + 16))((char *)&v23 - v12, v11);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  v16 = *(_QWORD *)(v7 + *v8);
  *((_QWORD *)v15 + 2) = v16;
  *((_QWORD *)v15 + 3) = v9;
  *((_QWORD *)v15 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, v9);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v23);
  v18 = v23;
  v17 = v24;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v19, v27);
  v23 = v18;
  v24 = v17;
  v25 = v27[0];
  v26 = v27[1];
  v20 = type metadata accessor for QueryPredicates.LessThanOrEqual(0, v16, v9, a3);
  swift_retain();
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThanOrEqual<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, a4);
  swift_release();
  return swift_release();
}

uint64_t <= infix<A, B>(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = *a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = (uint64_t *)(v8 + *MEMORY[0x24BEE46A8]);
  v11 = *v10;
  v12 = v10[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v9, &v19);
  v14 = v19;
  v13 = v20;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v15, v23);
  v19 = v14;
  v20 = v13;
  v21 = v23[0];
  v22 = v23[1];
  v16 = type metadata accessor for QueryPredicates.LessThanOrEqual(0, v11, v12, a3);
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThanOrEqual<A, B>, v16);
  QueryPredicateProtocol.eraseToQueryPredicate()(v16, v17, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_21BD9FDD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t > infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char *v12;
  void (*v13)(char *, __n128);
  unint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v23 = a5;
  v25 = a2;
  v26 = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, __n128))(v9 + 16);
  v13(v12, v11);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a3;
  *((_QWORD *)v15 + 3) = a4;
  *((_QWORD *)v15 + 4) = a5;
  v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v16(&v15[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v27);
  v17 = v28;
  v24 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v25, a4);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  v19 = v23;
  *((_QWORD *)v18 + 4) = v23;
  v16(&v18[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v18, v31);
  v27 = v24;
  v28 = v17;
  v29 = v31[0];
  v30 = v31[1];
  v20 = type metadata accessor for QueryPredicates.GreaterThan(0, a3, a4, v19);
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThan<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.GreaterThan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.GreaterThan);
}

uint64_t > infix<A, B>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v21 = a4;
  v7 = (uint64_t *)(*a1 + *MEMORY[0x24BEE46A8]);
  v8 = v7[1];
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  v14 = v23;
  v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v8;
  *((_QWORD *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  v22 = v20;
  v23 = v14;
  v24 = v26[0];
  v25 = v26[1];
  v17 = type metadata accessor for QueryPredicates.GreaterThan(0, v13, v8, a3);
  swift_retain();
  v18 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThan<A, B>, v17);
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, v18, v21);
  swift_release();
  return swift_release();
}

uint64_t > infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v7 = *a2;
  v8 = (_QWORD *)MEMORY[0x24BEE46A8];
  v9 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a2 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v23 - v12;
  (*(void (**)(char *, __n128))(v10 + 16))((char *)&v23 - v12, v11);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  v16 = *(_QWORD *)(v7 + *v8);
  *((_QWORD *)v15 + 2) = v16;
  *((_QWORD *)v15 + 3) = v9;
  *((_QWORD *)v15 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, v9);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v23);
  v18 = v23;
  v17 = v24;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #2 in > infix<A, B>(_:_:), v19, v27);
  v23 = v18;
  v24 = v17;
  v25 = v27[0];
  v26 = v27[1];
  v20 = type metadata accessor for QueryPredicates.GreaterThan(0, v16, v9, a3);
  swift_retain();
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThan<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, a4);
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #2 in > infix<A, B>(_:_:)()
{
  return swift_getAtKeyPath();
}

uint64_t > infix<A, B>(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = *a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = (uint64_t *)(v8 + *MEMORY[0x24BEE46A8]);
  v11 = *v10;
  v12 = v10[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v9, &v19);
  v14 = v19;
  v13 = v20;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v15, v23);
  v19 = v14;
  v20 = v13;
  v21 = v23[0];
  v22 = v23[1];
  v16 = type metadata accessor for QueryPredicates.GreaterThan(0, v11, v12, a3);
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThan<A, B>, v16);
  QueryPredicateProtocol.eraseToQueryPredicate()(v16, v17, a4);
  swift_release();
  return swift_release();
}

uint64_t >= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char *v12;
  void (*v13)(char *, __n128);
  unint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v23 = a5;
  v25 = a2;
  v26 = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, __n128))(v9 + 16);
  v13(v12, v11);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a3;
  *((_QWORD *)v15 + 3) = a4;
  *((_QWORD *)v15 + 4) = a5;
  v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v16(&v15[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v27);
  v17 = v28;
  v24 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v25, a4);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  v19 = v23;
  *((_QWORD *)v18 + 4) = v23;
  v16(&v18[v14], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v18, v31);
  v27 = v24;
  v28 = v17;
  v29 = v31[0];
  v30 = v31[1];
  v20 = type metadata accessor for QueryPredicates.GreaterThanOrEqual(0, a3, a4, v19);
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThanOrEqual<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.GreaterThanOrEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.GreaterThanOrEqual);
}

uint64_t >= infix<A, B>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v21 = a4;
  v7 = (uint64_t *)(*a1 + *MEMORY[0x24BEE46A8]);
  v8 = v7[1];
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  v14 = v23;
  v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v8;
  *((_QWORD *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  v22 = v20;
  v23 = v14;
  v24 = v26[0];
  v25 = v26[1];
  v17 = type metadata accessor for QueryPredicates.GreaterThanOrEqual(0, v13, v8, a3);
  swift_retain();
  v18 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThanOrEqual<A, B>, v17);
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, v18, v21);
  swift_release();
  return swift_release();
}

uint64_t >= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v7 = *a2;
  v8 = (_QWORD *)MEMORY[0x24BEE46A8];
  v9 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + *a2 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v23 - v12;
  (*(void (**)(char *, __n128))(v10 + 16))((char *)&v23 - v12, v11);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  v16 = *(_QWORD *)(v7 + *v8);
  *((_QWORD *)v15 + 2) = v16;
  *((_QWORD *)v15 + 3) = v9;
  *((_QWORD *)v15 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, v9);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v15, &v23);
  v18 = v23;
  v17 = v24;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v19, v27);
  v23 = v18;
  v24 = v17;
  v25 = v27[0];
  v26 = v27[1];
  v20 = type metadata accessor for QueryPredicates.GreaterThanOrEqual(0, v16, v9, a3);
  swift_retain();
  v21 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThanOrEqual<A, B>, v20);
  QueryPredicateProtocol.eraseToQueryPredicate()(v20, v21, a4);
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in == infix<A, B>(_:_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 80)));
}

uint64_t >= infix<A, B>(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = *a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = (uint64_t *)(v8 + *MEMORY[0x24BEE46A8]);
  v11 = *v10;
  v12 = v10[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v9, &v19);
  v14 = v19;
  v13 = v20;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v15, v23);
  v19 = v14;
  v20 = v13;
  v21 = v23[0];
  v22 = v23[1];
  v16 = type metadata accessor for QueryPredicates.GreaterThanOrEqual(0, v11, v12, a3);
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThanOrEqual<A, B>, v16);
  QueryPredicateProtocol.eraseToQueryPredicate()(v16, v17, a4);
  swift_release();
  return swift_release();
}

_QWORD *assignWithCopy for QueryPredicates.GreaterThanOrEqual(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for QueryPredicates.GreaterThanOrEqual(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t destroy for QueryPredicates.Or()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for QueryPredicates.Or(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for QueryPredicates.Or(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_retain();
  swift_release();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for QueryPredicates.Or(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  a1[4] = a2[4];
  swift_release();
  a1[5] = a2[5];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryPredicates.Or(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryPredicates.Or(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t QueryPredicates.And.evaluate(value:)(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[4];
  v16 = v2[5];
  v17 = v8;
  v9 = v2[1];
  v18 = *v2;
  v19 = v9;
  v15 = v2[3];
  v20 = v2[2];
  type metadata accessor for QueryPredicate(0, v4, v10, v11);
  v12 = QueryPredicate.evaluate(value:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if ((v12 & 1) != 0)
  {
    v18 = v15;
    v19 = v17;
    v20 = v16;
    v13 = QueryPredicate.evaluate(value:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.And<A>(uint64_t a1)
{
  return specialized QueryPredicates.Or.makeInternal()(*(_QWORD *)(a1 + 16), MEMORY[0x24BE23BF0], MEMORY[0x24BE23BE8]);
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.And<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = QueryPredicates.And.evaluate(value:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.enumerate(using:) in conformance QueryPredicates.And<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QueryPredicates.And.enumerate(using:)(a1, a2, a3);
}

uint64_t QueryPredicates.Or.evaluate(value:)(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[4];
  v16 = v2[5];
  v17 = v8;
  v9 = v2[1];
  v18 = *v2;
  v19 = v9;
  v15 = v2[3];
  v20 = v2[2];
  type metadata accessor for QueryPredicate(0, v4, v10, v11);
  v12 = QueryPredicate.evaluate(value:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v13 = 1;
  }
  else
  {
    v18 = v15;
    v19 = v17;
    v20 = v16;
    v13 = QueryPredicate.evaluate(value:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v13 & 1;
}

uint64_t QueryPredicates.And.enumerate(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v6 = *v3;
  v7 = v3[5];
  v14 = v3[6];
  v8 = v3[11];
  ObjectType = swift_getObjectType();
  v16 = v6;
  v17 = *(_OWORD *)(v3 + 1);
  v18 = *(_OWORD *)(v3 + 3);
  v19 = v7;
  v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a2 + 8);
  v11 = *(_QWORD *)(a3 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v10(&v16, v11, ObjectType, a2);
  swift_release();
  v13 = *(_OWORD *)(v3 + 7);
  v15 = *(_OWORD *)(v3 + 9);
  swift_release();
  swift_release();
  v16 = v14;
  v17 = v13;
  v18 = v15;
  v19 = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  v10(&v16, v11, ObjectType, a2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.Or<A>(uint64_t a1)
{
  return specialized QueryPredicates.Or.makeInternal()(*(_QWORD *)(a1 + 16), MEMORY[0x24BE23C58], MEMORY[0x24BE23C50]);
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Or<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = QueryPredicates.Or.evaluate(value:)(a1, a2);
  *a3 = result & 1;
  return result;
}

BOOL QueryPredicates.Not.evaluate(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for QueryPredicate(0, *(_QWORD *)(a2 + 16), a3, a4);
  return (QueryPredicate.evaluate(value:)() & 1) == 0;
}

uint64_t QueryPredicates.Not.enumerate(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v6 = *v3;
  v7 = v3[5];
  ObjectType = swift_getObjectType();
  v12 = v6;
  v13 = *(_OWORD *)(v3 + 1);
  v14 = *(_OWORD *)(v3 + 3);
  v15 = v7;
  v9 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a2 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v9(&v12, v10, ObjectType, a2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.Not<A>(uint64_t a1)
{
  return specialized QueryPredicates.Or.makeInternal()(*(_QWORD *)(a1 + 16), MEMORY[0x24BE23C48], MEMORY[0x24BE23C40]);
}

BOOL protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Not<A>@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  _BOOL8 result;

  result = QueryPredicates.Not.evaluate(value:)(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Equals<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = QueryPredicates.Equals.evaluate(value:)(a1, a2, (uint64_t (*)(char *, char *, uint64_t, _QWORD))MEMORY[0x24BEE0980]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.enumerate(using:) in conformance QueryPredicates.Equals<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QueryPredicates.Equals.enumerate(using:)(a1, a2, a3);
}

BOOL QueryPredicates.NotEquals.evaluate(value:)(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(char *, uint64_t);
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - v8;
  v16 = *v2;
  type metadata accessor for QueryType(0, *(_QWORD *)(v10 + 16), v3, v11);
  v15 = v2[1];
  QueryType.evaluate(value:)();
  v16 = v15;
  QueryType.evaluate(value:)();
  v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v6, v3);
  v13(v9, v3);
  return (v12 & 1) == 0;
}

BOOL protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.NotEquals<A, B>@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BOOL8 result;

  result = QueryPredicates.NotEquals.evaluate(value:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.LessThan<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = QueryPredicates.Equals.evaluate(value:)(a1, a2, (uint64_t (*)(char *, char *, uint64_t, _QWORD))MEMORY[0x24BEE07E0]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.LessThanOrEqual<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = QueryPredicates.Equals.evaluate(value:)(a1, a2, (uint64_t (*)(char *, char *, uint64_t, _QWORD))MEMORY[0x24BEE07F0]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.GreaterThan<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = QueryPredicates.Equals.evaluate(value:)(a1, a2, MEMORY[0x24BEE07D8]);
  *a3 = result & 1;
  return result;
}

uint64_t QueryPredicates.Equals.evaluate(value:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *, uint64_t, _QWORD))
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  __int128 v18;
  __int128 v19;

  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - v11;
  v19 = *v3;
  type metadata accessor for QueryType(0, *(_QWORD *)(v13 + 16), v6, v14);
  v18 = v3[1];
  QueryType.evaluate(value:)();
  v19 = v18;
  QueryType.evaluate(value:)();
  v15 = a3(v12, v9, v6, *(_QWORD *)(a2 + 32));
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, v6);
  v16(v12, v6);
  return v15 & 1;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.GreaterThanOrEqual<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = QueryPredicates.Equals.evaluate(value:)(a1, a2, (uint64_t (*)(char *, char *, uint64_t, _QWORD))MEMORY[0x24BEE07E8]);
  *a3 = result & 1;
  return result;
}

BOOL QueryPredicates.Identical.evaluate(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for QueryType(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  QueryType.evaluate(value:)();
  QueryType.evaluate(value:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v6 == v5;
}

uint64_t QueryPredicates.Equals.enumerate(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v7 = *v3;
  v6 = v3[1];
  v9 = v3[2];
  v8 = v3[3];
  ObjectType = swift_getObjectType();
  v15 = v7;
  v16 = v6;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
  v13 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 24);
  swift_retain();
  v11(&v15, v13, v12, ObjectType, a2);
  swift_release();
  v15 = v9;
  v16 = v8;
  swift_retain();
  v11(&v15, v13, v12, ObjectType, a2);
  return swift_release();
}

BOOL protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Identical<A, B>@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  _BOOL8 result;

  result = QueryPredicates.Identical.evaluate(value:)(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.GreaterThanOrEqual<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThanOrEqual<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.GreaterThan<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.GreaterThan<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.LessThanOrEqual<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThanOrEqual<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.LessThan<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.LessThan<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.NotEquals<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.NotEquals<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Equals<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Equals<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Identical<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Identical<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Not<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Not<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Or<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Or<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.And<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.And<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized QueryPredicates.Or.makeInternal()(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v6;

  type metadata accessor for Entity();
  if (swift_dynamicCastMetatype())
    return a2();
  v6 = swift_conformsToProtocol2() ? a1 : 0;
  a2 = a3;
  if (v6)
    return a2();
  else
    return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh3C13i24V11descriptionSSvgSSAE16jK54Vcfu_33_979d7928f60ba9ff03fee9aafd7606f7AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = a1;
    v21 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v21;
    v4 = specialized Set.startIndex.getter(v3);
    v6 = v5;
    v8 = v7 & 1;
    v19 = v3;
    v20 = v3 + 56;
    do
    {
      if (v4 < 0 || v4 >= 1 << *(_BYTE *)(v3 + 32))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        JUMPOUT(0x21BDA1E00);
      }
      if (((*(_QWORD *)(v20 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(v3 + 36) != v6)
        goto LABEL_26;
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v4);
      if (v9 > 63)
      {
        switch(v9)
        {
          case 64:
            v10 = 0xE600000000000000;
            v11 = 0x6172656D6163;
            break;
          case 128:
            v10 = 0xE400000000000000;
            v11 = 1701011814;
            break;
          case 256:
            v10 = 0xE400000000000000;
            v11 = 2036625250;
            break;
          default:
LABEL_18:
            v11 = 0;
            v10 = 0xE000000000000000;
            break;
        }
      }
      else
      {
        v10 = 0xE500000000000000;
        v11 = 0x646C726F77;
        switch(v9)
        {
          case 1:
            break;
          case 2:
            v11 = 0x656E616C70;
            break;
          case 4:
            v11 = 0x6567616D69;
            break;
          case 8:
            v10 = 0xE600000000000000;
            v11 = 0x7463656A626FLL;
            break;
          default:
            goto LABEL_18;
        }
      }
      v13 = *(_QWORD *)(v21 + 16);
      v12 = *(_QWORD *)(v21 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      *(_QWORD *)(v21 + 16) = v13 + 1;
      v14 = v21 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v10;
      v3 = v19;
      v15 = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v19);
      v4 = v15;
      v6 = v16;
      v8 = v17 & 1;
      --v1;
    }
    while (v1);
    outlined consume of [String : AnimationResource].Index._Variant(v15, v16, v17 & 1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV28SceneUnderstandingCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh3C13i24V11descriptionSSvgSSAE28jkL55Vcfu0_33_05ee4caa7c346c634b201050f1d8d6e4AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = a1;
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v22;
    v4 = specialized Set.startIndex.getter(v3);
    v6 = v5;
    v8 = v7 & 1;
    v20 = v3;
    v21 = v3 + 56;
    do
    {
      if (v4 < 0 || v4 >= 1 << *(_BYTE *)(v3 + 32))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x21BDA2008);
      }
      if (((*(_QWORD *)(v21 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_19;
      if (*(_DWORD *)(v3 + 36) != v6)
        goto LABEL_20;
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v4) - 1;
      v10 = 0xE600000000000000;
      v11 = 0x776F64616873;
      switch(v9)
      {
        case 0:
          break;
        case 1:
          v12 = 0x73756C63636FLL;
          goto LABEL_11;
        case 3:
          v12 = 0x73696C6C6F63;
LABEL_11:
          v11 = v12 & 0xFFFFFFFFFFFFLL | 0x6F69000000000000;
          v10 = 0xE90000000000006ELL;
          break;
        case 7:
          v10 = 0xE700000000000000;
          v11 = 0x73636973796870;
          break;
        default:
          v11 = 0;
          v10 = 0xE000000000000000;
          break;
      }
      v14 = *(_QWORD *)(v22 + 16);
      v13 = *(_QWORD *)(v22 + 24);
      if (v14 >= v13 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v22 + 16) = v14 + 1;
      v15 = v22 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v10;
      v3 = v20;
      v16 = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v20);
      v4 = v16;
      v6 = v17;
      v8 = v18 & 1;
      --v1;
    }
    while (v1);
    outlined consume of [String : AnimationResource].Index._Variant(v16, v17, v18 & 1);
  }
  return v2;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (Swift::Int *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t *, _QWORD))
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = result;
  v5 = 0;
  v17 = a2;
  v6 = result + 56;
  v7 = 1 << *(_BYTE *)(result + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(result + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v10)
      goto LABEL_23;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_23;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_23;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
        {
          v5 = v13 + 3;
          if (v13 + 3 >= v10)
            goto LABEL_23;
          v14 = *(_QWORD *)(v6 + 8 * v5);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    result = a3(&v16, *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12));
  }
  v15 = v13 + 4;
  if (v15 >= v10)
  {
LABEL_23:
    swift_release();
    return v17;
  }
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_23;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL static SpatialTrackingSession.Configuration.AnchorCapability.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void SpatialTrackingSession.Configuration.AnchorCapability.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t SpatialTrackingSession.Configuration.anchorCapabilitySet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.Configuration.anchorCapabilitySet.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.Configuration.anchorCapabilitySet.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void SpatialTrackingSession.Configuration.camera.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *SpatialTrackingSession.Configuration.camera.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*SpatialTrackingSession.Configuration.camera.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.Configuration.removing(unavailableCapabilities:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t result;
  Swift::Int v14;

  v5 = (_QWORD *)*a1;
  v4 = (_QWORD *)a1[1];
  v6 = (_QWORD *)a1[2];
  v8 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 8);
  v9 = *(_BYTE *)(v2 + 16);
  if (*(_QWORD *)(*a1 + 16) <= *(_QWORD *)(*(_QWORD *)v2 + 16) >> 3)
  {
    v14 = *(_QWORD *)v2;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Set._subtract<A>(_:)(v5);
    v10 = v14;
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v10 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v5, v8);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4[2] <= *(_QWORD *)(v10 + 16) >> 3)
  {
    specialized Set._subtract<A>(_:)(v4);
    swift_bridgeObjectRelease();
    v11 = v10;
  }
  else
  {
    v11 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v4, v10);
    swift_bridgeObjectRelease();
  }
  if (v6[2] <= *(_QWORD *)(v7 + 16) >> 3)
  {
    specialized Set._subtract<A>(_:)(v6);
    result = swift_bridgeObjectRelease();
    v12 = v7;
  }
  else
  {
    v12 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v6, v7);
    result = swift_bridgeObjectRelease();
  }
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 16) = v9;
  return result;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
    return 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16))
    return 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
    return 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16))
    return 1;
  return *(_BYTE *)(v0 + 32) & 1;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.union(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v10 = *(unsigned __int8 *)(v2 + 32);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = specialized Set.union<A>(_:)(v4, v6, (uint64_t (*)(uint64_t *, _QWORD))specialized Set._Variant.insert(_:));
  v12 = swift_bridgeObjectRetain();
  v13 = specialized Set.union<A>(_:)(v12, v7, (uint64_t (*)(uint64_t *, _QWORD))specialized Set._Variant.insert(_:));
  swift_bridgeObjectRelease();
  if (v10 != 2)
    v5 = (v10 | v5) & 1;
  v14 = swift_bridgeObjectRetain();
  v15 = specialized Set.union<A>(_:)(v14, v9, (uint64_t (*)(uint64_t *, _QWORD))specialized Set._Variant.insert(_:));
  swift_bridgeObjectRelease();
  v16 = swift_bridgeObjectRetain();
  v17 = specialized Set.union<A>(_:)(v16, v8, (uint64_t (*)(uint64_t *, _QWORD))specialized Set._Variant.insert(_:));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 32) = v5;
  return result;
}

__n128 SpatialTrackingSession.UnavailableCapabilities.init(unsupportedConfiguration:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3 = MEMORY[0x24BEE4B08];
  *(_QWORD *)a2 = MEMORY[0x24BEE4B08];
  result = v5;
  *(__n128 *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 32) = 2;
  return result;
}

void SpatialTrackingSession.UnavailableCapabilities.init()(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4B08];
  *(_QWORD *)a1 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = v1;
  *(_BYTE *)(a1 + 32) = 2;
}

uint64_t SpatialTrackingSession.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SpatialTrackingSession.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t SpatialTrackingSession.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SpatialTrackingSession.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void static SpatialTrackingSession.Configuration.AnchorCapability.world.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.image.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.object.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.anchor.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  return specialized Set.union<A>(_:)(v2, v1, (uint64_t (*)(uint64_t *, _QWORD))specialized Set._Variant.insert(_:));
}

void static SpatialTrackingSession.Configuration.AnchorCapability.hand.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t SpatialTrackingSession.Configuration.init(tracking:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4B08];
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t SpatialTrackingSession.run(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_OWORD *)(v2 + 136) = *(_OWORD *)a2;
  *(_BYTE *)(v2 + 49) = *(_BYTE *)(a2 + 16);
  return swift_task_switch();
}

uint64_t SpatialTrackingSession.run(_:)()
{
  uint64_t v0;
  _BYTE *v1;
  char v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t (*v10)(void);

  swift_beginAccess();
  v1 = static SpatialTrackingManager.shared;
  *(_QWORD *)(v0 + 152) = static SpatialTrackingManager.shared;
  if (v1)
  {
    v2 = *(_BYTE *)(v0 + 49);
    v9 = *(_OWORD *)(v0 + 136);
    swift_beginAccess();
    v1[120] = 1;
    *(_OWORD *)(v0 + 104) = v9;
    *(_BYTE *)(v0 + 120) = v2;
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v3;
    *v3 = v0;
    v3[1] = SpatialTrackingSession.run(_:);
    return SpatialTrackingManager.run(spatialTrackingConfiguration:)(v0 + 16, v0 + 104);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 144);
    v7 = MEMORY[0x24BEE4B08];
    **(_QWORD **)(v0 + 128) = MEMORY[0x24BEE4B08];
    v8 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v8 + 8) = v5;
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    *(_BYTE *)(v8 + 32) = 2;
    v10 = *(uint64_t (**)(void))(v0 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v10();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  uint64_t v5;

  v1 = *(_QWORD **)(v0 + 128);
  swift_release();
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_BYTE *)(v0 + 48);
  v4 = *(_OWORD *)(v0 + 24);
  *v1 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 128);
  *(_OWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  *(_BYTE *)(v5 + 32) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SpatialTrackingSession.stop()()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  _BYTE *v1;
  _QWORD *v2;

  swift_beginAccess();
  v1 = static SpatialTrackingManager.shared;
  *(_QWORD *)(v0 + 64) = static SpatialTrackingManager.shared;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  swift_beginAccess();
  v1[120] = 1;
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = SpatialTrackingSession.stop();
  return SpatialTrackingManager.stop()();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SpatialTrackingSession.autoRun(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_OWORD *)(v2 + 136) = *(_OWORD *)a2;
  *(_BYTE *)(v2 + 49) = *(_BYTE *)(a2 + 16);
  return swift_task_switch();
}

uint64_t SpatialTrackingSession.autoRun(_:)()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _QWORD *v9;

  swift_beginAccess();
  v1 = static SpatialTrackingManager.shared;
  *(_QWORD *)(v0 + 152) = static SpatialTrackingManager.shared;
  if (!v1)
  {
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = MEMORY[0x24BEE4B08];
    *(_QWORD *)v5 = MEMORY[0x24BEE4B08];
    *(_QWORD *)(v5 + 8) = v3;
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v6;
    *(_BYTE *)(v5 + 32) = 2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_beginAccess();
  if (v1[120] == 1)
  {
    v2 = *(_QWORD *)(v0 + 128);
    *(_BYTE *)(v2 + 32) = 0;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = *(_BYTE *)(v0 + 49);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 136);
  *(_BYTE *)(v0 + 120) = v8;
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v9;
  *v9 = v0;
  v9[1] = SpatialTrackingSession.autoRun(_:);
  return SpatialTrackingManager.run(spatialTrackingConfiguration:)(v0 + 16, v0 + 104);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release();
  v2 = *(_BYTE *)(v0 + 48);
  v3 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 32) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SpatialTrackingSession.autoStop()()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  _BYTE *v1;
  _QWORD *v3;

  swift_beginAccess();
  v1 = static SpatialTrackingManager.shared;
  *(_QWORD *)(v0 + 64) = static SpatialTrackingManager.shared;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  swift_beginAccess();
  if ((v1[120] & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  *v3 = v0;
  v3[1] = SpatialTrackingSession.autoStop();
  return SpatialTrackingManager.stop()();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

void static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.face.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.body.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

BOOL static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SpatialTrackingSession.Configuration.Camera.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SpatialTrackingSession.Configuration.Camera.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *a3;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v4;
  return result;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.sceneUnderstanding.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  return specialized Set.union<A>(_:)(v2, v1, (uint64_t (*)(uint64_t *, _QWORD))specialized Set._Variant.insert(_:));
}

uint64_t SpatialTrackingSession.Configuration.AnchorCapability.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  if (*v0 > 63)
  {
    switch(v1)
    {
      case 64:
        return 0x6172656D6163;
      case 128:
        return 1701011814;
      case 256:
        return 2036625250;
      default:
        return 0;
    }
  }
  else
  {
    result = 0x646C726F77;
    switch(v1)
    {
      case 1:
        return result;
      case 2:
        result = 0x656E616C70;
        break;
      case 4:
        result = 0x6567616D69;
        break;
      case 8:
        result = 0x7463656A626FLL;
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t SpatialTrackingSession.Configuration.SceneUnderstandingCapability.description.getter()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;

  result = 0x776F64616873;
  switch(*v0)
  {
    case 1:
      return result;
    case 2:
      v2 = 0x73756C63636FLL;
      goto LABEL_5;
    case 4:
      v2 = 0x73696C6C6F63;
LABEL_5:
      result = v2 & 0xFFFFFFFFFFFFLL | 0x6F69000000000000;
      break;
    case 8:
      result = 0x73636973796870;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t SpatialTrackingSession.Configuration.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v1 = v0[1];
  if (!*(_QWORD *)(*v0 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(v1 + 16))
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh3C13i24V11descriptionSSvgSSAE16jK54Vcfu_33_979d7928f60ba9ff03fee9aafd7606f7AHSSTf3nnnpk_nTf1cn_n(v2);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v3 = BidirectionalCollection<>.joined(separator:)();
  v5 = v4;
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 93;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v11 = &v8[2 * v10];
  v11[4] = 0x203A726F68636E61;
  v11[5] = 0xE90000000000005BLL;
  if (*(_QWORD *)(v1 + 16))
  {
LABEL_7:
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v12 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV28SceneUnderstandingCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh3C13i24V11descriptionSSvgSSAE28jkL55Vcfu0_33_05ee4caa7c346c634b201050f1d8d6e4AHSSTf3nnnpk_nTf1cn_n(v12);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v13 = BidirectionalCollection<>.joined(separator:)();
    v15 = v14;
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 93;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v19 = v8[2];
    v18 = v8[3];
    if (v19 >= v18 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v8);
    v8[2] = v19 + 1;
    v20 = &v8[2 * v19];
    v20[4] = 0xD000000000000015;
    v20[5] = 0x800000021BE92CC0;
  }
LABEL_12:
  v21._countAndFlagsBits = 0x203A6172656D6163;
  v21._object = (void *)0xE800000000000000;
  String.append(_:)(v21);
  _print_unlocked<A, B>(_:_:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  v23 = v8[2];
  v22 = v8[3];
  if (v23 >= v22 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v8);
  v8[2] = v23 + 1;
  v24 = &v8[2 * v23];
  v24[4] = 0;
  v24[5] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v25 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t SpatialTrackingSession.Configuration.debugDescription.getter()
{
  return SpatialTrackingSession.Configuration.description.getter();
}

unint64_t lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability;
  if (!lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpatialTrackingSession.Configuration.AnchorCapability, &type metadata for SpatialTrackingSession.Configuration.AnchorCapability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability;
  if (!lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability, &type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera;
  if (!lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpatialTrackingSession.Configuration.Camera, &type metadata for SpatialTrackingSession.Configuration.Camera);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera);
  }
  return result;
}

uint64_t type metadata accessor for SpatialTrackingSession()
{
  return objc_opt_self();
}

uint64_t method lookup function for SpatialTrackingSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SpatialTrackingSession.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t assignWithCopy for SpatialTrackingSession.Configuration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.Configuration()
{
  return &type metadata for SpatialTrackingSession.Configuration;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability()
{
  return &type metadata for SpatialTrackingSession.Configuration.AnchorCapability;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.UnavailableCapabilities()
{
  return &type metadata for SpatialTrackingSession.UnavailableCapabilities;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability()
{
  return &type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability;
}

uint64_t storeEnumTagSinglePayload for SpatialTrackingSession.Configuration.Camera(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BDA3770 + 4 * byte_21BE7ACC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BDA37A4 + 4 * byte_21BE7ACC0[v4]))();
}

uint64_t sub_21BDA37A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDA37AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDA37B4);
  return result;
}

uint64_t sub_21BDA37C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDA37C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BDA37CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDA37D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.Configuration.Camera()
{
  return &type metadata for SpatialTrackingSession.Configuration.Camera;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void one-time initialization function for basicPopAnimationData()
{
  static EmphasizeAnimations.basicPopAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicPopAnimationData;
}

void one-time initialization function for playfulPopAnimationData()
{
  static EmphasizeAnimations.playfulPopAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulPopAnimationData;
}

void one-time initialization function for wildPopAnimationData()
{
  static EmphasizeAnimations.wildPopAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildPopAnimationData;
}

_QWORD *specialized static EmphasizeAnimations.createEmphasizePopAnimation(style:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (!*a1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 118, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for basicPopAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 264, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for playfulPopAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 52, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for wildPopAnimationData != -1)
LABEL_9:
    swift_once();
LABEL_8:
  v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    return _StringGuts._slowWithCString<A>(_:)();
  if ((a2 & 0x2000000000000000) != 0)
    return REMaterialParameterBlockValueClearParameter();
  if ((a1 & 0x1000000000000000) != 0)
  {
    v3 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v3 = _StringObject.sharedUTF8.getter();
  }
  return _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v3, v4, partial apply for closure #1 in __RKMaterialParameterBlock.clear(parameter:));
}

uint64_t __RKMaterialParameterBlock.get(parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v7;
  id v8;

  v7 = *(void **)(v3 + 24);
  swift_bridgeObjectRetain();
  v8 = v7;
  swift_bridgeObjectRetain();
  return specialized String.withCString<A>(_:)(a1, a2, v8, a3);
}

uint64_t __RKMaterialParameterBlock.set(parameter:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[4];
  char v9;

  v3 = *(_BYTE *)(a3 + 64);
  v4 = *(_OWORD *)(a3 + 16);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v4;
  v5 = *(_OWORD *)(a3 + 48);
  v8[2] = *(_OWORD *)(a3 + 32);
  v8[3] = v5;
  v9 = v3;
  v6 = String.utf8CString.getter();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v6 + 32, (uint64_t)v8);
  return swift_release();
}

Swift::Void __swiftcall __RKMaterialParameterBlock.clear(parameter:)(Swift::String parameter)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  void *v5;

  object = parameter._object;
  countAndFlagsBits = parameter._countAndFlagsBits;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v4 = REMaterialParameterBlockValueCopy();
    v5 = *(void **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = v4;

  }
  specialized String.withCString<A>(_:)(countAndFlagsBits, (uint64_t)object);
}

Swift::Int __swiftcall __RKMaterialParameterBlock.numberOfTexturesWithNonZeroUVIndex()()
{
  return (int)REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
}

uint64_t __RKMaterialParameterBlock.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

id static __RKMaterialParameterBlock.fromCore(_:index:)@<X0>(uint64_t a1@<X8>)
{
  id result;

  result = (id)REMaterialParameterBlockArrayComponentGetBlockValueAtIndex();
  if (result)
  {
    *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __RKMaterialParameterBlock.toCore(_:index:)()
{
  return REMaterialParameterBlockArrayComponentSetBlockValueAtIndex();
}

uint64_t __RKMaterialParameterBlock.Parameter.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_BYTE *)(result + 64);
  v3 = 0uLL;
  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)(result + 24);
  v8 = *(_QWORD *)(result + 40);
  switch(v2)
  {
    case 0:
      v8 = 0;
      v7 = v7;
      v2 = 1;
      break;
    case 1:
      v5 = 0;
      v6 = 0;
      v8 = 0;
      v2 = 0;
      goto LABEL_4;
    case 2:
      v5 = 0;
      v6 = 0;
      v8 = 0;
      v4 = *(_QWORD *)result;
      v7 = 0uLL;
      v2 = 2;
      break;
    case 3:
    case 6:
    case 12:
    case 16:
      v5 = 0;
      goto LABEL_3;
    case 4:
    case 5:
    case 7:
    case 13:
    case 14:
    case 17:
    case 18:
LABEL_3:
      v6 = 0;
      v8 = 0;
LABEL_4:
      v7 = 0uLL;
      break;
    case 8:
      break;
    case 9:
      v3 = *(_OWORD *)(result + 48);
      v2 = 9;
      break;
    case 10:
      v5 = 0;
      v6 = 0;
      v8 = 0;
      v4 = *(_QWORD *)result & 1;
      v7 = 0uLL;
      v2 = 10;
      break;
    case 11:
      v5 = 0;
      v6 = 0;
      v8 = 0;
      v4 = *(_QWORD *)result;
      v7 = 0uLL;
      v2 = 11;
      break;
    case 15:
      v5 = 0;
      v6 = 0;
      v8 = 0;
      v4 = *(_QWORD *)result;
      v7 = 0uLL;
      v2 = 15;
      break;
    default:
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v8 = 0;
      v7 = 0uLL;
      v2 = 19;
      break;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 48) = v3;
  *(_BYTE *)(a2 + 64) = v2;
  return result;
}

BOOL static MTLTextureSwizzleChannels.== infix(_:_:)(unsigned int a1, unsigned int a2)
{
  _BOOL4 v2;

  v2 = HIBYTE(a1) == HIBYTE(a2) && BYTE2(a1) == BYTE2(a2);
  return (unsigned __int16)a1 == (unsigned __int16)a2 && v2;
}

double __RKMaterialParameterBlock.Parameter.init(nilLiteral:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 64) = 19;
  return result;
}

double __RKMaterialParameterBlock.Parameter.init(floatLiteral:)@<D0>(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 2;
  return result;
}

double __RKMaterialParameterBlock.Parameter.init(integerLiteral:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = COERCE_UNSIGNED_INT((float)a1);
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 2;
  return result;
}

double protocol witness for ExpressibleByNilLiteral.init(nilLiteral:) in conformance __RKMaterialParameterBlock.Parameter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 64) = 19;
  return result;
}

double protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance __RKMaterialParameterBlock.Parameter@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = *a1;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 2;
  return result;
}

double protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance __RKMaterialParameterBlock.Parameter@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = COERCE_UNSIGNED_INT((float)*a1);
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 2;
  return result;
}

RealityKit::__RKMaterialParameterBlock::TransparentPass_optional __swiftcall __RKMaterialParameterBlock.TransparentPass.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__RKMaterialParameterBlock::TransparentPass_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKMaterialParameterBlock.TransparentPass.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static __RKMaterialParameterBlock.TransparentPass.allCases.getter()
{
  return &outlined read-only object #0 of static __RKMaterialParameterBlock.TransparentPass.allCases.getter;
}

uint64_t __RKMaterialParameterBlock.TransparentPass.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BDA40E8 + 4 * byte_21BE7AF63[*v0]))(0x726170736E617254, 0xEB00000000746E65);
}

unint64_t sub_21BDA40FC()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_21BDA4118()
{
  return 0xD00000000000001CLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance __RKMaterialParameterBlock.TransparentPass(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance __RKMaterialParameterBlock.TransparentPass()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance __RKMaterialParameterBlock.TransparentPass(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance __RKMaterialParameterBlock.TransparentPass(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

RealityKit::__RKMaterialParameterBlock::TransparentPass_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKMaterialParameterBlock.TransparentPass(Swift::String *a1)
{
  return __RKMaterialParameterBlock.TransparentPass.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKMaterialParameterBlock.TransparentPass()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21BDA41A0 + 4 * byte_21BE7AF67[*v0]))();
}

void sub_21BDA41A0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = 0xED00005241746E65;
}

void sub_21BDA41B8(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x800000021BE81A50;
}

void sub_21BDA41D8(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x800000021BE81A70;
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKMaterialParameterBlock.TransparentPass(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKMaterialParameterBlock.TransparentPass;
}

RealityKit::__RKMaterialParameterBlock::OpaquePass_optional __swiftcall __RKMaterialParameterBlock.OpaquePass.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__RKMaterialParameterBlock::OpaquePass_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKMaterialParameterBlock.OpaquePass.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static __RKMaterialParameterBlock.OpaquePass.allCases.getter()
{
  return &outlined read-only object #0 of static __RKMaterialParameterBlock.OpaquePass.allCases.getter;
}

uint64_t __RKMaterialParameterBlock.OpaquePass.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BDA429C + 4 * byte_21BE7AF6B[*v0]))(0x65757161704FLL, 0xE600000000000000);
}

uint64_t sub_21BDA429C()
{
  return 0x524165757161704FLL;
}

unint64_t sub_21BDA42B4()
{
  return 0xD000000000000015;
}

unint64_t sub_21BDA42D0()
{
  return 0xD000000000000017;
}

uint64_t sub_21BDA42F0()
{
  return 0x776F64616853;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance __RKMaterialParameterBlock.OpaquePass(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance __RKMaterialParameterBlock.OpaquePass()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance __RKMaterialParameterBlock.OpaquePass(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance __RKMaterialParameterBlock.OpaquePass(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

RealityKit::__RKMaterialParameterBlock::OpaquePass_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKMaterialParameterBlock.OpaquePass(Swift::String *a1)
{
  return __RKMaterialParameterBlock.OpaquePass.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKMaterialParameterBlock.OpaquePass@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = __RKMaterialParameterBlock.OpaquePass.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKMaterialParameterBlock.OpaquePass(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKMaterialParameterBlock.OpaquePass;
}

uint64_t __RKMaterialParameterBlock.transparentPassTechniqueMapping.getter()
{
  return swift_bridgeObjectRetain();
}

void __RKMaterialParameterBlock.transparentPassTechniqueMappingEnabled.getter()
{
  __asm { BR              X10; loc_21BDA4440 }
}

Swift::Void __swiftcall __RKMaterialParameterBlock.setTransparentPassTechniqueMappingEnabled(_:)(Swift::Bool a1)
{
  uint64_t *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *((unsigned __int8 *)v1 + 8);
  v4 = v1[2];
  if (v3 != 1)
  {
    if (v4)
    {
      swift_bridgeObjectRetain();
      v5 = v4;
      if (!*(_QWORD *)(v4 + 16))
        goto LABEL_10;
    }
    else
    {
      v5 = MEMORY[0x24BEE4AF8];
      if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
        goto LABEL_10;
    }
LABEL_6:
    if (a1)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
LABEL_11:
    if (v4)
      v6 = v3;
    else
      v6 = 1;
    if ((v6 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v1[2] = MEMORY[0x24BEE4AF8];
    }
    __asm { BR              X8 }
  }
  v5 = *v1;
  swift_bridgeObjectRetain();
  if (*(_QWORD *)(v5 + 16))
    goto LABEL_6;
LABEL_10:
  swift_bridgeObjectRelease();
  if (!a1)
    goto LABEL_11;
}

Swift::Void __swiftcall __RKMaterialParameterBlock.reset()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = REMaterialParameterBlockValueCreate();

  *(_QWORD *)(v0 + 24) = v1;
}

void __RKMaterialParameterBlock.unsafeSet(parameter:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(unsigned __int8 *)(a2 + 64);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v4 = REMaterialParameterBlockValueCopy();
    v5 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v4;

  }
  __asm { BR              X9 }
}

uint64_t sub_21BDA4BAC()
{
  return REMaterialParameterBlockValueSetTextureFromAsset();
}

uint64_t __RKMaterialParameterBlock.setTextureParameter(texture:key:)(uint64_t a1, const char *a2)
{
  void *v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  size_t v10;
  uint64_t v11;
  BOOL v12;
  size_t v13;
  Swift::String v14;
  uint64_t result;
  void *v19;

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 25);
  v7 = *(unsigned __int8 *)(a1 + 26);
  v8 = *(unsigned __int8 *)(a1 + 27);
  REMaterialParameterBlockValueSetTextureFromAsset();
  if (v3)
  {
    v9 = v3;
    objc_msgSend(v9, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for MTLSamplerDescriptor();
    swift_dynamicCast();

    v10 = strlen(a2);
    v11 = String.count.getter();
    v12 = __OFADD__(v10, v11);
    v13 = v10 + v11;
    if (v12)
    {
      __break(1u);
      goto LABEL_22;
    }
    MEMORY[0x24BDAC7A8](v13);
    String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
    v14._countAndFlagsBits = 0x72656C706D61735FLL;
    v14._object = (void *)0xE800000000000000;
    String.append(_:)(v14);
    String.utf8CString.getter();
    REMaterialParameterBlockValueSetSampler();
    swift_release();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialParameterBlockValueBindTextureToSamplerWithDefaultArray();
    swift_release();

  }
  if (!v4)
  {
    REMaterialParameterBlockValueClearUVIndexForTexture();
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0 || HIDWORD(v4))
  {
LABEL_22:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  REMaterialParameterBlockValueSetUVIndexForTexture();
LABEL_9:
  if (v8 == 5 && v5 == 2 && v6 == 3 && v7 == 4)
    return REMaterialParameterBlockValueClearSwizzleForTexture();
  else
    return REMaterialParameterBlockValueSetSwizzleForTexture();
}

_BYTE *closure #2 in __RKMaterialParameterBlock.setTextureParameter(texture:key:)(_BYTE *result, uint64_t a2, uint64_t a3, char *a4)
{
  int v4;
  char *v5;
  uint64_t v6;
  int v7;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v4 = *a4;
      if (v4 < 0)
      {
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        v5 = a4 + 1;
        v6 = a3 - 1;
        while (1)
        {
          *result = v4;
          if (!v6)
            break;
          v7 = *v5++;
          LOBYTE(v4) = v7;
          ++result;
          --v6;
          if (v7 < 0)
            goto LABEL_7;
        }
      }
    }
    return (_BYTE *)a3;
  }
  return result;
}

double closure #1 in __RKMaterialParameterBlock.get(parameter:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t Texture;
  uint64_t v3;
  id v4;
  double result;
  char v6;
  uint64_t v7;
  int SwizzleForTexture;
  uint64_t v9;
  id v10;

  switch(REMaterialParameterBlockValueGetParameterType())
  {
    case 1u:
      Texture = REMaterialParameterBlockValueGetTexture();
      if (!Texture)
        goto LABEL_41;
      v3 = Texture;
      if (REMaterialParameterBlockValueGetSamplerNameBoundToTexture())
        v4 = (id)REMaterialParameterBlockValueCopySampler();
      else
        v4 = 0;
      type metadata accessor for TextureResource();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v3;
      *(_QWORD *)(v7 + 24) = 0;
      RERetain();
      REAssetSetSwiftObject();
      SwizzleForTexture = REMaterialParameterBlockValueGetSwizzleForTexture();
      REMaterialParameterBlockValueGetUVIndexForTexture();
      if (v4)
      {
        v9 = 0;
        if (!SwizzleForTexture)
          v9 = 84148994;
        *(_QWORD *)a1 = v4;
        goto LABEL_50;
      }
      if (SwizzleForTexture == 1)
      {
        v10 = (id)REMaterialCreateDefaultSamplerDescriptor();
        v9 = 0;
        *(_QWORD *)a1 = v10;
LABEL_50:
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v9;
        result = 0.0;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        v6 = 1;
        goto LABEL_42;
      }
      *(_QWORD *)a1 = v7;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 49) = 0u;
      return result;
    case 2u:
      if (!REMaterialParameterBlockValueGetFloat())
        goto LABEL_41;
      *(_QWORD *)a1 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 2;
      goto LABEL_42;
    case 3u:
      if (!REMaterialParameterBlockValueGetFloat2())
        goto LABEL_41;
      *(_QWORD *)a1 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 3;
      goto LABEL_42;
    case 4u:
      if (!REMaterialParameterBlockValueGetFloat3())
        goto LABEL_41;
      *(_OWORD *)a1 = 0uLL;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v6 = 4;
      goto LABEL_42;
    case 5u:
      if (!REMaterialParameterBlockValueGetFloat4())
        goto LABEL_41;
      *(_OWORD *)a1 = 0uLL;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v6 = 5;
      goto LABEL_42;
    case 6u:
      if (!REMaterialParameterBlockValueGetFloat2x2())
        goto LABEL_41;
      result = 0.0;
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v6 = 7;
      goto LABEL_42;
    case 7u:
      if (!REMaterialParameterBlockValueGetFloat3x3())
        goto LABEL_41;
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 8;
      goto LABEL_42;
    case 8u:
      if (!REMaterialParameterBlockValueGetFloat4x4())
        goto LABEL_41;
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v6 = 9;
      goto LABEL_42;
    case 9u:
      if (!REMaterialParameterBlockValueGetBool())
        goto LABEL_41;
      *(_QWORD *)a1 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 10;
      goto LABEL_42;
    case 0xBu:
      if (!REMaterialParameterBlockValueGetInt())
        goto LABEL_41;
      *(_QWORD *)a1 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 11;
      goto LABEL_42;
    case 0xCu:
      if (!REMaterialParameterBlockValueGetUInt())
        goto LABEL_41;
      *(_QWORD *)a1 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 15;
      goto LABEL_42;
    case 0xDu:
      if (!REMaterialParameterBlockValueGetInt2())
        goto LABEL_41;
      *(_QWORD *)a1 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 12;
      goto LABEL_42;
    case 0xEu:
      if (!REMaterialParameterBlockValueGetUInt2())
        goto LABEL_41;
      *(_QWORD *)a1 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 16;
      goto LABEL_42;
    case 0xFu:
      if (!REMaterialParameterBlockValueGetInt3())
        goto LABEL_41;
      *(_OWORD *)a1 = 0uLL;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v6 = 13;
      goto LABEL_42;
    case 0x10u:
      if (!REMaterialParameterBlockValueGetUInt3())
        goto LABEL_41;
      *(_OWORD *)a1 = 0uLL;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v6 = 17;
      goto LABEL_42;
    case 0x11u:
      if (!REMaterialParameterBlockValueGetInt4())
        goto LABEL_41;
      *(_OWORD *)a1 = 0uLL;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v6 = 14;
      goto LABEL_42;
    case 0x12u:
      if (!REMaterialParameterBlockValueGetUInt4())
        goto LABEL_41;
      *(_OWORD *)a1 = 0uLL;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v6 = 18;
      goto LABEL_42;
    case 0x13u:
      if (REMaterialParameterBlockValueGetColor3())
        goto LABEL_40;
      goto LABEL_41;
    case 0x14u:
      if (!REMaterialParameterBlockValueGetColor4())
        goto LABEL_41;
LABEL_40:
      *(_QWORD *)a1 = RECreateCGColorFromColorGamut();
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = 6;
      goto LABEL_42;
    default:
LABEL_41:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      v6 = -1;
LABEL_42:
      *(_BYTE *)(a1 + 64) = v6;
      return result;
  }
}

uint64_t __RKMaterialParameterBlock.init(transparentPassTechniqueMappping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 48;
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v6 = *(_BYTE *)(v4 - 16);
      String.utf8CString.getter();
      v7 = REMaterialParameterBlockArrayComponentHashTechniqueName();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v9 = v5[2];
      v8 = v5[3];
      if (v9 >= v8 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v5);
      v4 += 24;
      v5[2] = v9 + 1;
      v10 = &v5[2 * v9];
      *((_BYTE *)v10 + 32) = v6;
      v10[5] = v7;
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  result = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

uint64_t __RKMaterialParameterBlock.init(hashedTransparentPassTechniqueMapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized _arrayForceCast<A, B>(_:)(a1);
  swift_bridgeObjectRelease();
  result = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

id static __RKMaterialParameterBlock.__fromCore(_:index:)@<X0>(uint64_t a1@<X8>)
{
  id result;

  result = (id)REMaterialParameterBlockArrayComponentGetBlockValueAtIndex();
  if (result)
  {
    *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __RKMaterialParameterBlock.__toCore(_:index:)()
{
  return REMaterialParameterBlockArrayComponentSetBlockValueAtIndex();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MTLTextureSwizzleChannels(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[3] != a2[3])
    return 0;
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

void specialized static __RKMaterialParameterBlock.Parameter.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

BOOL sub_21BDA5E70(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v38;

  if (v13)
  {
    v23 = v9;
    swift_retain();
    outlined copy of __RKMaterialParameterBlock.Parameter(a1, v23, v19, v16, a5, a6, v18, a8, v13);
    outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)(v21 - 256);
    return 0;
  }
  else
  {
    v32 = v8;
    v38 = v9;
    v29 = v10;
    outlined copy of __RKMaterialParameterBlock.Parameter(a1, v9, v19, v16, a5, a6, v18, a8, 0);
    v33 = v29;
    outlined copy of __RKMaterialParameterBlock.Parameter(v32, v29, v20, v12, v14, v11, v17, v15, 0);
    outlined copy of __RKMaterialParameterBlock.Parameter(v32, v29, v20, v12, v14, v11, v17, v15, 0);
    outlined copy of __RKMaterialParameterBlock.Parameter(a1, v38, v19, v16, a5, a6, v18, a8, 0);
    outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)(v21 - 256);
    v31 = v32[2];
    v30 = a1[2];
    outlined consume of __RKMaterialParameterBlock.Parameter(a1, v38, v19, v16, a5, a6, v18, a8, 0);
    outlined consume of __RKMaterialParameterBlock.Parameter(v32, v33, v20, v12, v14, v11, v17, v15, 0);
    return v31 == v30;
  }
}

unint64_t lazy protocol witness table accessor for type __RKMaterialParameterBlock.TransparentPass and conformance __RKMaterialParameterBlock.TransparentPass()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKMaterialParameterBlock.TransparentPass and conformance __RKMaterialParameterBlock.TransparentPass;
  if (!lazy protocol witness table cache variable for type __RKMaterialParameterBlock.TransparentPass and conformance __RKMaterialParameterBlock.TransparentPass)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKMaterialParameterBlock.TransparentPass, &type metadata for __RKMaterialParameterBlock.TransparentPass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKMaterialParameterBlock.TransparentPass and conformance __RKMaterialParameterBlock.TransparentPass);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKMaterialParameterBlock.TransparentPass()
{
  return lazy protocol witness table accessor for type [Component] and conformance [A](&lazy protocol witness table cache variable for type [__RKMaterialParameterBlock.TransparentPass] and conformance [A], &demangling cache variable for type metadata for [__RKMaterialParameterBlock.TransparentPass]);
}

unint64_t lazy protocol witness table accessor for type __RKMaterialParameterBlock.OpaquePass and conformance __RKMaterialParameterBlock.OpaquePass()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKMaterialParameterBlock.OpaquePass and conformance __RKMaterialParameterBlock.OpaquePass;
  if (!lazy protocol witness table cache variable for type __RKMaterialParameterBlock.OpaquePass and conformance __RKMaterialParameterBlock.OpaquePass)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKMaterialParameterBlock.OpaquePass, &type metadata for __RKMaterialParameterBlock.OpaquePass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKMaterialParameterBlock.OpaquePass and conformance __RKMaterialParameterBlock.OpaquePass);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKMaterialParameterBlock.OpaquePass()
{
  return lazy protocol witness table accessor for type [Component] and conformance [A](&lazy protocol witness table cache variable for type [__RKMaterialParameterBlock.OpaquePass] and conformance [A], &demangling cache variable for type metadata for [__RKMaterialParameterBlock.OpaquePass]);
}

void destroy for __RKMaterialParameterBlock(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for __RKMaterialParameterBlock(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for __RKMaterialParameterBlock(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 24);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for __RKMaterialParameterBlock(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for __RKMaterialParameterBlock()
{
  return &type metadata for __RKMaterialParameterBlock;
}

void destroy for __RKMaterialParameterBlock.Parameter(uint64_t a1)
{
  outlined consume of __RKMaterialParameterBlock.Parameter(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for __RKMaterialParameterBlock.Parameter(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of __RKMaterialParameterBlock.Parameter(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for __RKMaterialParameterBlock.Parameter(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of __RKMaterialParameterBlock.Parameter(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  outlined consume of __RKMaterialParameterBlock.Parameter(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for __RKMaterialParameterBlock.Parameter(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  outlined consume of __RKMaterialParameterBlock.Parameter(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKMaterialParameterBlock.Parameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xED && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 237);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x13)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKMaterialParameterBlock.Parameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEC)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 237;
    if (a3 >= 0xED)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xED)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for __RKMaterialParameterBlock.Parameter(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) <= 0x12u)
    return *(unsigned __int8 *)(a1 + 64);
  else
    return (*(_DWORD *)a1 + 19);
}

uint64_t destructiveInjectEnumTag for __RKMaterialParameterBlock.Parameter(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x13)
  {
    *(_QWORD *)result = a2 - 19;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_QWORD *)(result + 56) = 0;
    LOBYTE(a2) = 19;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __RKMaterialParameterBlock.Parameter()
{
  return &type metadata for __RKMaterialParameterBlock.Parameter;
}

uint64_t storeEnumTagSinglePayload for __RKMaterialParameterBlock.TransparentPass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BDA6D40 + 4 * byte_21BE7AFE1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BDA6D74 + 4 * byte_21BE7AFDC[v4]))();
}

uint64_t sub_21BDA6D74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDA6D7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDA6D84);
  return result;
}

uint64_t sub_21BDA6D90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDA6D98);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BDA6D9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDA6DA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKMaterialParameterBlock.TransparentPass()
{
  return &type metadata for __RKMaterialParameterBlock.TransparentPass;
}

uint64_t storeEnumTagSinglePayload for __RKMaterialParameterBlock.OpaquePass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BDA6E0C + 4 * byte_21BE7AFEB[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BDA6E40 + 4 * byte_21BE7AFE6[v4]))();
}

uint64_t sub_21BDA6E40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDA6E48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDA6E50);
  return result;
}

uint64_t sub_21BDA6E5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDA6E64);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BDA6E68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDA6E70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKMaterialParameterBlock.OpaquePass()
{
  return &type metadata for __RKMaterialParameterBlock.OpaquePass;
}

uint64_t outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(void **)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(_BYTE *)(a1 + 144);
  outlined consume of __RKMaterialParameterBlock.Parameter(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  outlined consume of __RKMaterialParameterBlock.Parameter(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

unint64_t type metadata accessor for MTLSamplerDescriptor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MTLSamplerDescriptor;
  if (!lazy cache variable for type metadata for MTLSamplerDescriptor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MTLSamplerDescriptor);
  }
  return result;
}

_BYTE *partial apply for closure #2 in __RKMaterialParameterBlock.setTextureParameter(texture:key:)(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in __RKMaterialParameterBlock.setTextureParameter(texture:key:)(a1, a2, *(_QWORD *)(v2 + 16), *(char **)(v2 + 24));
}

uint64_t partial apply for closure #1 in __RKMaterialParameterBlock.clear(parameter:)()
{
  return REMaterialParameterBlockValueClearParameter();
}

uint64_t specialized QueryPredicate.init<A>(_:)@<X0>(_OWORD *a1@<X0>, uint64_t (**a2)(uint64_t *a1)@<X8>)
{
  uint64_t (*v4)(uint64_t *);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t *);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18[2];
  _QWORD v19[5];

  v4 = (uint64_t (*)(uint64_t *))swift_allocObject();
  v5 = a1[3];
  *((_OWORD *)v4 + 3) = a1[2];
  *((_OWORD *)v4 + 4) = v5;
  v6 = a1[5];
  *((_OWORD *)v4 + 5) = a1[4];
  *((_OWORD *)v4 + 6) = v6;
  v7 = a1[1];
  *((_OWORD *)v4 + 1) = *a1;
  *((_OWORD *)v4 + 2) = v7;
  v8 = (uint64_t (*)(uint64_t *))swift_allocObject();
  v9 = a1[3];
  *((_OWORD *)v8 + 3) = a1[2];
  *((_OWORD *)v8 + 4) = v9;
  v10 = a1[5];
  *((_OWORD *)v8 + 5) = a1[4];
  *((_OWORD *)v8 + 6) = v10;
  v11 = a1[1];
  *((_OWORD *)v8 + 1) = *a1;
  *((_OWORD *)v8 + 2) = v11;
  v19[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicates.And<Entity>);
  v19[4] = &protocol witness table for QueryPredicates.And<A>;
  v12 = (_OWORD *)swift_allocObject();
  v19[0] = v12;
  v13 = a1[3];
  v12[3] = a1[2];
  v12[4] = v13;
  v14 = a1[5];
  v12[5] = a1[4];
  v12[6] = v14;
  v15 = a1[1];
  v12[1] = *a1;
  v12[2] = v15;
  outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
  v16 = swift_allocObject();
  outlined init with take of BindableDataInternal(v18, v16 + 16);
  outlined retain of QueryPredicates.Or<Entity>((uint64_t)a1);
  outlined retain of QueryPredicates.Or<Entity>((uint64_t)a1);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  *a2 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a2[1] = v4;
  a2[2] = (uint64_t (*)(uint64_t *))implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)partial apply;
  a2[3] = (uint64_t (*)(uint64_t *))v16;
  a2[4] = (uint64_t (*)(uint64_t *))partial apply for specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:);
  a2[5] = v8;
  return result;
}

{
  uint64_t (*v4)(uint64_t *);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t *);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18[2];
  _QWORD v19[5];

  v4 = (uint64_t (*)(uint64_t *))swift_allocObject();
  v5 = a1[3];
  *((_OWORD *)v4 + 3) = a1[2];
  *((_OWORD *)v4 + 4) = v5;
  v6 = a1[5];
  *((_OWORD *)v4 + 5) = a1[4];
  *((_OWORD *)v4 + 6) = v6;
  v7 = a1[1];
  *((_OWORD *)v4 + 1) = *a1;
  *((_OWORD *)v4 + 2) = v7;
  v8 = (uint64_t (*)(uint64_t *))swift_allocObject();
  v9 = a1[3];
  *((_OWORD *)v8 + 3) = a1[2];
  *((_OWORD *)v8 + 4) = v9;
  v10 = a1[5];
  *((_OWORD *)v8 + 5) = a1[4];
  *((_OWORD *)v8 + 6) = v10;
  v11 = a1[1];
  *((_OWORD *)v8 + 1) = *a1;
  *((_OWORD *)v8 + 2) = v11;
  v19[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicates.Or<Entity>);
  v19[4] = &protocol witness table for QueryPredicates.Or<A>;
  v12 = (_OWORD *)swift_allocObject();
  v19[0] = v12;
  v13 = a1[3];
  v12[3] = a1[2];
  v12[4] = v13;
  v14 = a1[5];
  v12[5] = a1[4];
  v12[6] = v14;
  v15 = a1[1];
  v12[1] = *a1;
  v12[2] = v15;
  outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
  v16 = swift_allocObject();
  outlined init with take of BindableDataInternal(v18, v16 + 16);
  outlined retain of QueryPredicates.Or<Entity>((uint64_t)a1);
  outlined retain of QueryPredicates.Or<Entity>((uint64_t)a1);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  *a2 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a2[1] = v4;
  a2[2] = (uint64_t (*)(uint64_t *))implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)partial apply;
  a2[3] = (uint64_t (*)(uint64_t *))v16;
  a2[4] = (uint64_t (*)(uint64_t *))partial apply for specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:);
  a2[5] = v8;
  return result;
}

uint64_t specialized QueryPredicate.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(uint64_t *a1)@<X8>)
{
  uint64_t (*v8)(uint64_t *);
  uint64_t (*v9)(uint64_t *);
  uint64_t v10;
  uint64_t result;
  __int128 v12[2];
  _QWORD v13[5];

  v8 = (uint64_t (*)(uint64_t *))swift_allocObject();
  *((_QWORD *)v8 + 2) = a1;
  *((_QWORD *)v8 + 3) = a2;
  *((_QWORD *)v8 + 4) = a3;
  v9 = (uint64_t (*)(uint64_t *))swift_allocObject();
  *((_QWORD *)v9 + 2) = a1;
  *((_QWORD *)v9 + 3) = a2;
  *((_QWORD *)v9 + 4) = a3;
  v13[3] = &type metadata for QueryPredicates.IsChild;
  v13[4] = &protocol witness table for QueryPredicates.IsChild;
  v13[0] = a1;
  v13[1] = a2;
  v13[2] = a3;
  outlined init with copy of __REAssetService((uint64_t)v13, (uint64_t)v12);
  v10 = swift_allocObject();
  outlined init with take of BindableDataInternal(v12, v10 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a1);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a1);
  swift_retain();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  *a4 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a4[1] = v8;
  a4[2] = (uint64_t (*)(uint64_t *))implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)partial apply;
  a4[3] = (uint64_t (*)(uint64_t *))v10;
  a4[4] = (uint64_t (*)(uint64_t *))destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  a4[5] = v9;
  return result;
}

{
  uint64_t (*v8)(uint64_t *);
  uint64_t (*v9)(uint64_t *);
  uint64_t v10;
  uint64_t result;
  __int128 v12[2];
  _QWORD v13[5];

  v8 = (uint64_t (*)(uint64_t *))swift_allocObject();
  *((_QWORD *)v8 + 2) = a1;
  *((_QWORD *)v8 + 3) = a2;
  *((_QWORD *)v8 + 4) = a3;
  v9 = (uint64_t (*)(uint64_t *))swift_allocObject();
  *((_QWORD *)v9 + 2) = a1;
  *((_QWORD *)v9 + 3) = a2;
  *((_QWORD *)v9 + 4) = a3;
  v13[3] = &type metadata for QueryPredicates.IsDescendant;
  v13[4] = &protocol witness table for QueryPredicates.IsDescendant;
  v13[0] = a1;
  v13[1] = a2;
  v13[2] = a3;
  outlined init with copy of __REAssetService((uint64_t)v13, (uint64_t)v12);
  v10 = swift_allocObject();
  outlined init with take of BindableDataInternal(v12, v10 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a1);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a1);
  swift_retain();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  *a4 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a4[1] = v8;
  a4[2] = (uint64_t (*)(uint64_t *))implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)partial apply;
  a4[3] = (uint64_t (*)(uint64_t *))v10;
  a4[4] = (uint64_t (*)(uint64_t *))destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  a4[5] = v9;
  return result;
}

uint64_t specialized QueryPredicate.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t *a1)@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8[2];
  _QWORD v9[5];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v9[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicates.CanInteract<Entity>);
  v9[4] = &protocol witness table for QueryPredicates.CanInteract<A>;
  v9[0] = a1;
  outlined init with copy of __REAssetService((uint64_t)v9, (uint64_t)v8);
  v6 = swift_allocObject();
  outlined init with take of BindableDataInternal(v8, v6 + 16);
  swift_retain_n();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  *a2 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a2[1] = (uint64_t (*)(uint64_t *))v4;
  a2[2] = (uint64_t (*)(uint64_t *))_s17RealityFoundation14QueryPredicateVyACyxGqd__c5ValueQyd__RszAA0cD8ProtocolRd__lufcs13OpaquePointerVSgycAA0C14Internalizable_pcfu3_AJycfu4_TA_0;
  a2[3] = (uint64_t (*)(uint64_t *))v6;
  a2[4] = (uint64_t (*)(uint64_t *))destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  a2[5] = (uint64_t (*)(uint64_t *))v5;
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = specialized HasHierarchy.parent.getter();
  if (a2)
  {
    v7 = swift_retain();
    a4 = a2(v7);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
    if (v6)
    {
LABEL_3:
      v8 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(a4 + 16);
      swift_release();
      swift_release();
      return v8 == v9;
    }
    goto LABEL_6;
  }
  if (a4)
  {
    swift_retain();
    if (v6)
      goto LABEL_3;
LABEL_6:
    swift_release();
    return 0;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return 0;
  swift_retain();
  Scene.__interactionService.getter();
  type metadata accessor for __RKEntityInteractionManager();
  v6 = swift_dynamicCastClass();
  if (!v6)
  {
    swift_release();
    swift_unknownObjectRelease();
    return v6;
  }
  swift_beginAccess();
  if ((*(_BYTE *)(v6 + 24) & 1) == 0)
  {
    swift_release();
    swift_unknownObjectRelease();
    return 0;
  }
  Entity.__interactionIdentifier.getter((uint64_t)v5);
  swift_release();
  swift_unknownObjectRelease();
  v7 = type metadata accessor for UUID();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  return v6;
}

uint64_t static QueryPredicate.has<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t (**a3)()@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Entity();
  v7 = type metadata accessor for QueryPredicates.Has(0, v6, a1, a2);
  v8 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Has<A, B>, v7);
  return QueryPredicateProtocol.eraseToQueryPredicate()(v7, v8, a3);
}

uint64_t type metadata accessor for QueryPredicates.Has(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.Has);
}

uint64_t static QueryPredicate.hasAll<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static QueryPredicate.hasAll<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return static QueryPredicate.hasAll<A, B, C>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static QueryPredicate.hasAll<A, B>(_:_:), (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static QueryPredicate.hasAll<A, B, C, D>(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static QueryPredicate.hasAll<A, B, C>(_:_:_:), (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAny<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static QueryPredicate.hasAll<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_OWORD *))
{
  _OWORD v12[3];
  _OWORD v13[3];
  _OWORD v14[6];

  static QueryPredicate.has<A>(_:)(a4, a6, (uint64_t (**)())v13);
  static QueryPredicate.has<A>(_:)(a5, a7, (uint64_t (**)())v12);
  v14[0] = v13[0];
  v14[1] = v13[1];
  v14[2] = v13[2];
  v14[3] = v12[0];
  v14[4] = v12[1];
  v14[5] = v12[2];
  return a8(v14);
}

uint64_t static QueryPredicate.hasAny<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return static QueryPredicate.hasAll<A, B, C>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static QueryPredicate.hasAny<A, B>(_:_:), (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a12)(_OWORD *))
{
  _OWORD v14[3];
  _OWORD v15[3];
  _OWORD v16[6];

  a11(v15, a1, a2, a3, a5, a6, a8, a9);
  static QueryPredicate.has<A>(_:)(a7, a10, (uint64_t (**)())v14);
  v16[0] = v15[0];
  v16[1] = v15[1];
  v16[2] = v15[2];
  v16[3] = v14[0];
  v16[4] = v14[1];
  v16[5] = v14[2];
  return a12(v16);
}

uint64_t static QueryPredicate.hasAny<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static QueryPredicate.hasAll<A, B, C, D>(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static QueryPredicate.hasAny<A, B, C>(_:_:_:), (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a15)(_OWORD *))
{
  _OWORD v16[3];
  _OWORD v17[3];
  _OWORD v18[6];

  a14(v17, a1, a2, a3, a4, a6, a7, a8, a10, a11, a12);
  static QueryPredicate.has<A>(_:)(a9, a13, (uint64_t (**)())v16);
  v18[0] = v17[0];
  v18[1] = v17[1];
  v18[2] = v17[2];
  v18[3] = v16[0];
  v18[4] = v16[1];
  v18[5] = v16[2];
  return a15(v18);
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.Has<A, B>(uint64_t *a1)
{
  return specialized QueryPredicates.Has.makeInternal()(a1[2], a1[3], a1[4]);
}

BOOL protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Has<A, B>@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BOOL8 result;

  result = specialized QueryPredicates.Has.evaluate(value:)(*a1, *(_QWORD *)(a2 + 16), *(ValueMetadata **)(a2 + 24), *(_QWORD *)(a2 + 32));
  *a3 = result;
  return result;
}

uint64_t QueryPredicates.CanInteract.evaluate(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return 0;
  swift_retain();
  Scene.__interactionService.getter();
  type metadata accessor for __RKEntityInteractionManager();
  v6 = swift_dynamicCastClass();
  if (!v6)
  {
    swift_release();
    swift_unknownObjectRelease();
    return v6;
  }
  swift_beginAccess();
  if (*(_BYTE *)(v6 + 24) != 1)
  {
    swift_release();
    swift_unknownObjectRelease();
    return 0;
  }
  Entity.__interactionIdentifier.getter((uint64_t)v5);
  swift_release();
  swift_unknownObjectRelease();
  v7 = type metadata accessor for UUID();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  return v6;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.CanInteract<A>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = QueryPredicates.CanInteract.evaluate(value:)(*a1, *v2);
  *a2 = result & 1;
  return result;
}

uint64_t static QueryPredicate.isChild(of:)(uint64_t a1, uint64_t a2)
{
  return static QueryPredicate.isChild(of:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.isChild(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static QueryPredicate.isChild(of:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.isDescendant(of:)(uint64_t a1, uint64_t a2)
{
  return static QueryPredicate.isChild(of:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.isChild(of:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t))
{
  swift_retain();
  return a3(0, 0, a1);
}

uint64_t static QueryPredicate.isDescendant(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static QueryPredicate.isChild(of:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.isChild(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD))
{
  swift_retain();
  return a4(a1, a2, 0);
}

uint64_t static QueryPredicate.canInteract(on:)@<X0>(uint64_t (**a1)(uint64_t *a1)@<X8>)
{
  uint64_t v2;

  v2 = swift_retain();
  return specialized QueryPredicate.init<A>(_:)(v2, a1);
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Has<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Has<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t QueryPredicates.IsDescendant.evaluate(value:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t Parent;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v9 = swift_retain();
    a4 = a2(v9);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
  }
  else
  {
    if (!a4)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_8:
      result = swift_release_n();
      goto LABEL_9;
    }
    swift_retain();
  }
  result = specialized HasHierarchy.parent.getter();
  if (result)
  {
    v11 = result;
    v12 = 1;
    goto LABEL_10;
  }
LABEL_9:
  v12 = 0;
  v11 = 0;
LABEL_10:
  if ((v12 & 1) != 0)
  {
    while (v11)
    {
      swift_retain();
      specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v8);
      swift_release();
      v13 = type metadata accessor for AnchoringComponent(0);
      v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v8, 1, v13);
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for AnchoringComponent?);
      if (v14 != 1)
        goto LABEL_23;
      if (*(_QWORD *)(v11 + 16) == *(_QWORD *)(a4 + 16))
      {
        swift_release();
        swift_release();
        return 1;
      }
      swift_retain();
      Parent = REEntityGetParent();
      if (!Parent)
        goto LABEL_8;
      v16 = Parent;
      if ((id)REEntityGetSwiftObject())
      {
        swift_release_n();
        type metadata accessor for Entity();
        result = swift_dynamicCastClassUnconditional();
        v11 = result;
      }
      else
      {
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
        {
          __break(1u);
          break;
        }
        v17 = specialized static Entity.entityInfoType(_:)();
        if (v17)
        {
          v18 = (*(uint64_t (**)(void))(v17 + 232))();
          v19 = *(_QWORD *)(v18 + 16);
          swift_retain();
          MEMORY[0x22076D160](v19, 0);
          *(_QWORD *)(v18 + 16) = v16;
          MEMORY[0x22076D160](v16, v18);
          swift_release_n();
          result = swift_release();
        }
        else
        {
          v18 = makeEntity(for:)(v16);
          result = swift_release_n();
        }
        v11 = v18;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_23:
    swift_release();
    swift_release();
    return 0;
  }
  return result;
}

uint64_t QueryPredicates.IsDescendant.makeInternal()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t IsDescendantCallbackEntityPredicate;
  uint64_t result;
  _QWORD aBlock[6];

  if (a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    aBlock[4] = partial apply for acquireEntity #1 () in QueryPredicates.IsDescendant.makeInternal();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
    aBlock[3] = &block_descriptor_43;
    v6 = _Block_copy(aBlock);
    swift_retain_n();
    swift_release();
    IsDescendantCallbackEntityPredicate = REQueryCreateIsDescendantCallbackEntityPredicate();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
    _Block_release(v6);
    return IsDescendantCallbackEntityPredicate;
  }
  if (a3)
    return REQueryCreateIsDescendantEntityPredicate();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.IsDescendant()
{
  uint64_t *v0;

  return QueryPredicates.IsDescendant.makeInternal()(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.IsDescendant@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = QueryPredicates.IsDescendant.evaluate(value:)(*a1, *(uint64_t (**)(uint64_t))v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *a2 = result & 1;
  return result;
}

uint64_t QueryPredicates.IsChild.makeInternal()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t IsChildCallbackEntityPredicate;
  uint64_t result;
  _QWORD aBlock[6];

  if (a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    aBlock[4] = partial apply for acquireEntity #1 () in QueryPredicates.IsDescendant.makeInternal();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
    aBlock[3] = &block_descriptor_61_0;
    v6 = _Block_copy(aBlock);
    swift_retain_n();
    swift_release();
    IsChildCallbackEntityPredicate = REQueryCreateIsChildCallbackEntityPredicate();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
    _Block_release(v6);
    return IsChildCallbackEntityPredicate;
  }
  if (a3)
    return REQueryCreateIsChildEntityPredicate();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.IsChild()
{
  uint64_t *v0;

  return QueryPredicates.IsChild.makeInternal()(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.IsChild@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(*a1, *(uint64_t (**)(uint64_t))v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *a2 = result & 1;
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t *a1, uint64_t (**a2)(uint64_t *))
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t (*v4)(uint64_t *);
  char v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  v4 = a2[6];
  v7 = *a1;
  swift_retain();
  swift_retain();
  swift_retain();
  LOBYTE(v3) = v3(&v7);
  swift_release();
  swift_release();
  swift_release();
  if ((v3 & 1) != 0)
  {
    v7 = v2;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v5 = v4(&v7);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t (*v4)(uint64_t *);
  char v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  v4 = a2[6];
  v7 = *a1;
  swift_retain();
  swift_retain();
  swift_retain();
  LOBYTE(v3) = v3(&v7);
  swift_release();
  swift_release();
  swift_release();
  if ((v3 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v7 = v2;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v5 = v4(&v7);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  return v5 & 1;
}

uint64_t specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v5 = *a3;
  v6 = a3[5];
  v13 = a3[6];
  v7 = a3[11];
  ObjectType = swift_getObjectType();
  v15 = v5;
  v16 = *(_OWORD *)(a3 + 1);
  v17 = *(_OWORD *)(a3 + 3);
  v18 = v6;
  v9 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a2 + 8);
  v10 = type metadata accessor for Entity();
  swift_retain();
  swift_retain();
  swift_retain();
  v12 = *(_OWORD *)(a3 + 7);
  v14 = *(_OWORD *)(a3 + 9);
  v9(&v15, v10, ObjectType, a2);
  swift_release();
  swift_release();
  swift_release();
  v15 = v13;
  v16 = v12;
  v17 = v14;
  v18 = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  v9(&v15, v10, ObjectType, a2);
  swift_release();
  swift_release();
  return swift_release();
}

BOOL specialized QueryPredicates.Has.evaluate(value:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  _BOOL8 v12;
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v14 - v10;
  (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)a1 + 96))(&v15, v9);
  v14 = v15;
  Entity.ComponentSet.subscript.getter(a3, a4, (uint64_t)v11);
  swift_release();
  v12 = (*((unsigned int (**)(char *, uint64_t, ValueMetadata *))a3[-1].Description + 6))(v11, 1, a3) != 1;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v12;
}

uint64_t specialized QueryPredicates.Has.makeInternal()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t HasEntityPredicate;
  _BYTE v8[40];

  v5 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  if (SceneManager.componentTypeToComponentClass(_:)(a2, a3)
    || (static Component.registerComponent()(a2, a3),
        (result = SceneManager.componentTypeToComponentClass(_:)(a2, a3)) != 0))
  {
    HasEntityPredicate = REQueryCreateHasEntityPredicate();
    swift_release();
    return HasEntityPredicate;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21BDA88B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(*a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return QueryPredicates.IsDescendant.evaluate(value:)(*a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(*a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(a1, (uint64_t (**)(uint64_t *))(v1 + 16));
}

{
  uint64_t v1;

  return specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(a1, (uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t _s17RealityFoundation14QueryPredicateVyACyxGqd__c5ValueQyd__RszAA0cD8ProtocolRd__lufcs13OpaquePointerVSgycAA0C14Internalizable_pcfu3_AJycfu4_TA_0()
{
  uint64_t v0;

  return implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)((_QWORD *)(v0 + 16));
}

uint64_t sub_21BDA8908()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:)(a1, a2, (uint64_t *)(v2 + 16));
}

uint64_t objectdestroy_28Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined retain of QueryPredicates.Or<Entity>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for QueryPredicates.IsChild()
{
  return &type metadata for QueryPredicates.IsChild;
}

uint64_t destroy for QueryPredicates.IsChild(_QWORD *a1)
{
  if (*a1)
    swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for QueryPredicates.IsChild(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for QueryPredicates.IsChild(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
LABEL_8:
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for QueryPredicates.IsChild(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
LABEL_8:
  a1[2] = a2[2];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for QueryPredicates.IsDescendant()
{
  return &type metadata for QueryPredicates.IsDescendant;
}

uint64_t type metadata accessor for QueryPredicates.CanInteract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.CanInteract);
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.CanInteract<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.CanInteract<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21BDA8C74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

uint64_t partial apply for acquireEntity #1 () in QueryPredicates.IsDescendant.makeInternal()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)((*(uint64_t (**)(void))(v0 + 16))() + 16);
  swift_release();
  return v1;
}

uint64_t one-time initialization function for realityFileWritingQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v4);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v6);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v8[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static Entity.realityFileWritingQueue = result;
  return result;
}

uint64_t closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(uint64_t a1, uint64_t a2, char *a3, _OWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];
  _OWORD v46[4];

  v35 = a3;
  v36 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v41 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for realityFileWritingQueue != -1)
    swift_once();
  v37 = static Entity.realityFileWritingQueue;
  outlined init with copy of __REAssetBundle(a2, (uint64_t)v46);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v35, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v10);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v36 = v10;
  v18 = (v17 + 80) & ~v17;
  v35 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (*(unsigned __int8 *)(v11 + 80) + v19 + 153) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v21 = (char *)swift_allocObject();
  v22 = v46[1];
  *((_OWORD *)v21 + 1) = v46[0];
  *((_OWORD *)v21 + 2) = v22;
  v23 = v46[3];
  *((_OWORD *)v21 + 3) = v46[2];
  *((_OWORD *)v21 + 4) = v23;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v21[v18], v16, v13);
  v24 = &v21[v19];
  v25 = a4[7];
  *((_OWORD *)v24 + 6) = a4[6];
  *((_OWORD *)v24 + 7) = v25;
  *((_OWORD *)v24 + 8) = a4[8];
  *(_OWORD *)(v24 + 137) = *(_OWORD *)((char *)a4 + 137);
  v26 = a4[3];
  *((_OWORD *)v24 + 2) = a4[2];
  *((_OWORD *)v24 + 3) = v26;
  v27 = a4[5];
  *((_OWORD *)v24 + 4) = a4[4];
  *((_OWORD *)v24 + 5) = v27;
  v28 = a4[1];
  *(_OWORD *)v24 = *a4;
  *((_OWORD *)v24 + 1) = v28;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v21[v20], v35, v36);
  aBlock[4] = partial apply for closure #1 in closure #1 in static Entity.WriteHelper.write(bundle:to:with:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_44;
  v29 = _Block_copy(aBlock);
  outlined retain of __REAssetBundle.ExportOptions((uint64_t)a4);
  v30 = v38;
  static DispatchQoS.unspecified.getter();
  v44 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v31 = v41;
  v32 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v30, v31, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v40);
  return swift_release();
}

uint64_t closure #1 in closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v8[8];
  _OWORD v9[2];

  v3 = a3[7];
  v8[6] = a3[6];
  v8[7] = v3;
  v9[0] = a3[8];
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)a3 + 137);
  v4 = a3[3];
  v8[2] = a3[2];
  v8[3] = v4;
  v5 = a3[5];
  v8[4] = a3[4];
  v8[5] = v5;
  v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  __REAssetBundle.writeWithCPlusPlus(to:with:)(a2, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t Entity.write(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[91] = v1;
  v2[90] = a1;
  type metadata accessor for MainActor();
  v2[92] = static MainActor.shared.getter();
  v2[93] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[94] = v3;
  return swift_task_switch();
}

uint64_t Entity.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  unint64_t v5;
  Swift::Int v6;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 728);
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, v0 + 568);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(inited + 32) = v1;
  v8 = inited;
  specialized Array._endMutation()();
  *(_QWORD *)(v0 + 712) = MEMORY[0x24BEE4B00];
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v0 + 568;
  *(_QWORD *)(v4 + 24) = v0 + 712;
  swift_retain();
  v5 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:), v4, v8);
  swift_task_dealloc();
  v6 = *(_QWORD *)(v0 + 712);
  outlined init with copy of __REAssetService(v0 + 568, v0 + 608);
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v5, v0 + 608, v6, 0, (uint64_t *)(v0 + 504));
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 800) = 0;
  *(_WORD *)(v0 + 498) = 257;
  *(_BYTE *)(v0 + 792) = 0;
  *(_BYTE *)(v0 + 808) = 0;
  *(_BYTE *)(v0 + 784) = 0;
  *(_BYTE *)(v0 + 336) = 1;
  *(_QWORD *)(v0 + 344) = 1;
  *(_BYTE *)(v0 + 352) = 0;
  *(_QWORD *)(v0 + 360) = 0;
  *(_WORD *)(v0 + 368) = 1;
  *(_BYTE *)(v0 + 370) = 0;
  *(_BYTE *)(v0 + 371) = *(_BYTE *)(v0 + 499);
  *(_QWORD *)(v0 + 376) = 0;
  *(_OWORD *)(v0 + 384) = xmmword_21BE6CF20;
  *(_BYTE *)(v0 + 404) = 0;
  *(_DWORD *)(v0 + 400) = 0;
  *(_QWORD *)(v0 + 408) = 12;
  *(_WORD *)(v0 + 416) = 0;
  *(_OWORD *)(v0 + 424) = 0u;
  *(_OWORD *)(v0 + 440) = 0u;
  *(_OWORD *)(v0 + 456) = 0u;
  *(_OWORD *)(v0 + 472) = 0u;
  *(_BYTE *)(v0 + 488) = 1;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = v0[90];
  v2 = (_QWORD *)swift_task_alloc();
  v0[95] = v2;
  v2[2] = v0 + 63;
  v2[3] = v1;
  v2[4] = v0 + 42;
  v3 = (_QWORD *)swift_task_alloc();
  v0[96] = v3;
  *v3 = v0;
  v3[1] = Entity.write(to:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 776) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  *(_BYTE *)(v0 + 16) = 1;
  *(_DWORD *)(v0 + 17) = *(_DWORD *)(v0 + 329);
  *(_DWORD *)(v0 + 20) = *(_DWORD *)(v0 + 332);
  *(_QWORD *)(v0 + 24) = 1;
  *(_BYTE *)(v0 + 32) = *(_BYTE *)(v0 + 800);
  *(_DWORD *)(v0 + 33) = *(_DWORD *)(v0 + 169);
  *(_DWORD *)(v0 + 36) = *(_DWORD *)(v0 + 172);
  *(_QWORD *)(v0 + 40) = 0;
  *(_WORD *)(v0 + 48) = 1;
  *(_BYTE *)(v0 + 50) = 0;
  *(_BYTE *)(v0 + 51) = *(_BYTE *)(v0 + 498);
  *(_OWORD *)(v0 + 56) = xmmword_21BE66FF0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 84) = 0;
  *(_DWORD *)(v0 + 80) = 0;
  *(_WORD *)(v0 + 85) = *(_WORD *)(v0 + 489);
  *(_BYTE *)(v0 + 87) = *(_BYTE *)(v0 + 491);
  *(_QWORD *)(v0 + 88) = 12;
  *(_BYTE *)(v0 + 96) = *(_BYTE *)(v0 + 792);
  *(_BYTE *)(v0 + 97) = 0;
  *(_DWORD *)(v0 + 98) = *(_DWORD *)(v0 + 492);
  *(_WORD *)(v0 + 102) = *(_WORD *)(v0 + 496);
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_BYTE *)(v0 + 168) = 1;
  outlined release of __REAssetBundle.ExportOptions(v0 + 16);
  outlined destroy of __REAssetBundle(v0 + 504);
  __swift_destroy_boxed_opaque_existential_1(v0 + 568);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  *(_BYTE *)(v0 + 176) = 1;
  *(_DWORD *)(v0 + 177) = *(_DWORD *)(v0 + 329);
  *(_DWORD *)(v0 + 180) = *(_DWORD *)(v0 + 332);
  *(_QWORD *)(v0 + 184) = 1;
  *(_BYTE *)(v0 + 192) = *(_BYTE *)(v0 + 800);
  *(_DWORD *)(v0 + 193) = *(_DWORD *)(v0 + 169);
  *(_DWORD *)(v0 + 196) = *(_DWORD *)(v0 + 172);
  *(_QWORD *)(v0 + 200) = 0;
  *(_WORD *)(v0 + 208) = 1;
  *(_BYTE *)(v0 + 210) = 0;
  *(_BYTE *)(v0 + 211) = *(_BYTE *)(v0 + 498);
  *(_OWORD *)(v0 + 216) = xmmword_21BE66FF0;
  *(_QWORD *)(v0 + 232) = 0;
  *(_BYTE *)(v0 + 244) = 0;
  *(_DWORD *)(v0 + 240) = 0;
  *(_WORD *)(v0 + 245) = *(_WORD *)(v0 + 489);
  *(_BYTE *)(v0 + 247) = *(_BYTE *)(v0 + 491);
  *(_QWORD *)(v0 + 248) = 12;
  *(_BYTE *)(v0 + 256) = *(_BYTE *)(v0 + 792);
  *(_BYTE *)(v0 + 257) = 0;
  *(_DWORD *)(v0 + 258) = *(_DWORD *)(v0 + 492);
  *(_WORD *)(v0 + 262) = *(_WORD *)(v0 + 496);
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_BYTE *)(v0 + 328) = 1;
  outlined release of __REAssetBundle.ExportOptions(v0 + 176);
  outlined destroy of __REAssetBundle(v0 + 504);
  __swift_destroy_boxed_opaque_existential_1(v0 + 568);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for Entity.WriteHelper()
{
  return objc_opt_self();
}

uint64_t sub_21BDA98F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v8 = v0 + v4;

  if (*(_QWORD *)(v0 + v4 + 48) >= 6uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v8 + 112))
    swift_release();
  if (*(_QWORD *)(v8 + 128))
    swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + ((v4 + v7 + 153) & ~v7), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.WriteHelper.write(bundle:to:with:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(v0 + 16, v0 + v2, (__int128 *)(v0 + v3));
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __SceneImportOperation.__allocating_init(bundle:resourceName:serviceLocator:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  v6 = (void *)MEMORY[0x220768C3C](a2, a3);
  swift_bridgeObjectRelease();
  v7 = RESceneImportOperationCreateWithBundleResource();

  if (v7)
  {
    v8 = swift_allocObject();
    __SceneImportOperation.init(core:)(v7);
    swift_release();
  }
  else
  {
    swift_release();
    v8 = 0;
  }

  return v8;
}

uint64_t __SceneImportOperation.setIsolateFromEngine(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, (void (*)(_QWORD, _QWORD))MEMORY[0x24BE243D0]);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __SceneImportOperation.run()()
{
  __SceneImportOperation.run()(MEMORY[0x24BE243B0]);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __SceneImportOperation.publishToEngine()()
{
  __SceneImportOperation.run()(MEMORY[0x24BE243A8]);
}

uint64_t __SceneImportOperation.run()(uint64_t (*a1)(_QWORD, _QWORD *))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v5[0] = 0;
  result = a1(*(_QWORD *)(v1 + 16), v5);
  if ((result & 1) == 0)
  {
    v3 = v5[0];
    if (v5[0])
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *v4 = v3;
    }
    else
    {
      lazy protocol witness table accessor for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError();
      swift_allocError();
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t __SceneImportOperation.importedScenes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t SceneCount;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char IsSceneActiveAtIndex;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;

  v1 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v37 = *(_QWORD *)(v1 - 8);
  v38 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v39 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v36 - v10;
  v11 = *(_QWORD *)(v0 + 16);
  SceneCount = RESceneImportOperationGetSceneCount();
  if ((SceneCount & 0x8000000000000000) == 0)
  {
    v13 = SceneCount;
    if (!SceneCount)
      return MEMORY[0x24BEE4AF8];
    v14 = 0;
    v43 = MEMORY[0x24BEE4AF8];
    v40 = v11;
    while (v13 != v14)
    {
      v15 = (id)RESceneImportOperationCopySceneIdentifierAtIndex();
      if (!v15)
        goto LABEL_19;
      v16 = v15;
      v17 = v39;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v18 = v42;
      v19 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      v19(v6, v17, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v6, 0, 1, v7);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v6, 1, v7);
      if ((_DWORD)result == 1)
        goto LABEL_20;
      v21 = (uint64_t)v3;
      v22 = v6;
      v23 = v7;
      v19(v41, v6, v7);
      result = RESceneImportOperationCopySceneNameAtIndex();
      if (!result)
        goto LABEL_21;
      v24 = (void *)result;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      result = RESceneImportOperationGetSceneAssetAtIndex();
      if (!result)
        goto LABEL_22;
      v28 = result;
      RERetain();
      type metadata accessor for __REAsset();
      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 16) = v28;
      IsSceneActiveAtIndex = RESceneImportOperationIsSceneActiveAtIndex();
      v3 = (char *)v21;
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v21, v41, v23);
      v31 = v38;
      v32 = (uint64_t *)(v21 + *(int *)(v38 + 20));
      *v32 = v25;
      v32[1] = v27;
      *(_QWORD *)(v21 + *(int *)(v31 + 24)) = v29;
      *(_BYTE *)(v21 + *(int *)(v31 + 28)) = IsSceneActiveAtIndex;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1, v43);
      v34 = *(_QWORD *)(v43 + 16);
      v33 = *(_QWORD *)(v43 + 24);
      v7 = v23;
      if (v34 >= v33 >> 1)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v43);
      ++v14;
      v35 = v43;
      *(_QWORD *)(v43 + 16) = v34 + 1;
      outlined init with take of __RKEntityActionSpecification(v21, v35+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v34, type metadata accessor for __SceneImportOperation.ImportedScene);
      swift_release();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v23);
      v6 = v22;
      if (v13 == v14)
        return v43;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v6, 1, 1, v7);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t __SceneImportOperation.__allocating_init(url:serviceLocator:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  URL._bridgeToObjectiveC()(a2);
  v4 = v3;
  swift_beginAccess();
  v5 = RESceneImportOperationCreateWithURL();

  v6 = swift_allocObject();
  __SceneImportOperation.init(core:)(v5);
  swift_release();
  v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  return v6;
}

uint64_t __SceneImportOperation.setRootSceneAssetPath(_:)(uint64_t a1, uint64_t a2)
{
  return __SceneImportOperation.setRootSceneAssetPath(_:)(a1, a2, (void (*)(uint64_t, uint64_t))MEMORY[0x24BE243F8]);
}

uint64_t __SceneImportOperation.setMergeIntoSingleEntity(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, (void (*)(_QWORD, _QWORD))MEMORY[0x24BE243E0]);
}

uint64_t __SceneImportOperation.setGenerateDecimatedMesh(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, (void (*)(_QWORD, _QWORD))MEMORY[0x24BE243C8]);
}

uint64_t __SceneImportOperation.setReorderVertexCaching(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, (void (*)(_QWORD, _QWORD))MEMORY[0x24BE24410]);
}

uint64_t __SceneImportOperation.__ImportedScene.sceneIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t __SceneImportOperation.__ImportedScene.sceneName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for __SceneImportOperation.__ImportedScene(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __SceneImportOperation.__ImportedScene.sceneAsset.getter()
{
  type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  return swift_retain();
}

uint64_t __SceneImportOperation.__ImportedScene.sceneActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __SceneImportOperation.__ImportedScene(0) + 28));
}

int *__SceneImportOperation.__ImportedScene.init(sceneIdentifier:sceneName:sceneAsset:sceneActive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int *result;
  _QWORD *v14;

  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  result = (int *)type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  v14 = (_QWORD *)(a6 + result[5]);
  *v14 = a2;
  v14[1] = a3;
  *(_QWORD *)(a6 + result[6]) = a4;
  *(_BYTE *)(a6 + result[7]) = a5;
  return result;
}

uint64_t __SceneImportOperation.__url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v2 = RESceneImportOperationCopySourceURL();
  if (v2)
  {
    v3 = (void *)v2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v4 = type metadata accessor for URL();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 0;
  }
  else
  {
    v4 = type metadata accessor for URL();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 1;
  }
  return v5(v6, v7, 1, v4);
}

uint64_t __SceneImportOperation.__importedScenes.getter()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v0 = (int *)type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v1 = *((_QWORD *)v0 - 1);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  v5 = *((_QWORD *)v4 - 1);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __SceneImportOperation.importedScenes.getter();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = *(unsigned __int8 *)(v1 + 80);
    v22[1] = v8;
    v11 = v8 + ((v10 + 32) & ~v10);
    v23 = *(_QWORD *)(v1 + 72);
    do
    {
      outlined init with copy of __RKEntityActionSpecification(v11, (uint64_t)v3, type metadata accessor for __SceneImportOperation.ImportedScene);
      v12 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, v3, v12);
      v13 = &v3[v0[5]];
      v15 = *(_QWORD *)v13;
      v14 = *((_QWORD *)v13 + 1);
      v16 = *(_QWORD *)&v3[v0[6]];
      LOBYTE(v13) = v3[v0[7]];
      v17 = &v7[v4[5]];
      *(_QWORD *)v17 = v15;
      *((_QWORD *)v17 + 1) = v14;
      *(_QWORD *)&v7[v4[6]] = v16;
      v7[v4[7]] = (char)v13;
      swift_bridgeObjectRetain();
      swift_retain();
      outlined destroy of __RKEntityActionSpecification((uint64_t)v3, type metadata accessor for __SceneImportOperation.ImportedScene);
      v18 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v24;
      }
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v18 = v24;
      }
      *(_QWORD *)(v18 + 16) = v20 + 1;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v7, v18+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v20, type metadata accessor for __SceneImportOperation.__ImportedScene);
      v11 += v23;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v18;
}

void __SceneImportOperation.__coreOperation.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

uint64_t __SceneImportOperation.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t __SceneImportOperation.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t __SceneImportOperation.init(core:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ServiceLocator;
  uint64_t SwiftObject;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  _QWORD v10[6];

  v2 = v1;
  *(_QWORD *)(v1 + 16) = a1;
  ServiceLocator = RESceneImportOperationGetServiceLocator();
  SwiftObject = REServiceLocatorGetSwiftObject();
  if (SwiftObject)
  {
    v5 = SwiftObject;
    swift_retain();
LABEL_5:
    v10[4] = partial apply for closure #1 in __SceneImportOperation.init(core:);
    v10[5] = v5;
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @guaranteed USKNode, @guaranteed USKScene, @unowned OpaquePointer, @in_guaranteed UUID, @guaranteed [String : String], @guaranteed [String : UUID], @guaranteed String) -> (@owned Error?);
    v10[3] = &block_descriptor_45;
    v9 = _Block_copy(v10);
    swift_retain();
    swift_release();
    RESceneImportOperationSetSceneCreateCompletionHandler();
    _Block_release(v9);
    swift_release();
    return v2;
  }
  result = MEMORY[0x22076FD94](ServiceLocator);
  if (result)
  {
    v7 = result;
    type metadata accessor for __Engine();
    swift_allocObject();
    v8 = __Engine.init(coreEngine:)(v7);
    type metadata accessor for __ServiceLocator();
    swift_allocObject();
    v5 = specialized __ServiceLocator.init(engine:)((uint64_t)v8);
    swift_release();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __SceneImportOperation_addCustomUSDDataToREScene2(op:uskNode:uskScene:reScene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:fileName:serviceLocator:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10)
{
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  _BYTE v24[32];
  _QWORD v25[4];

  v25[3] = MEMORY[0x24BEE27D0];
  v25[0] = a4;
  outlined init with copy of Any((uint64_t)v25, (uint64_t)v24);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v15 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v15)
  {
    v16 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    v16 = Scene.init(coreScene:)(v23);
  }
  v17 = v16;
  v18 = (id)RESceneImportGetUSDActionAssets();
  v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v20 = __SceneImportOperation_addCustomUSDDataToRESceneForReal(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(a2, a3, v17, a5, a6, a7, v19, a8, a9, a10);
  swift_release();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t __SceneImportOperation.setCompressTextures(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x24BE243B8]);
}

uint64_t __SceneImportOperation.setPlayDefaultAnimationsImmediately(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x24BE243E8]);
}

uint64_t __SceneImportOperation.setEnableAnimationInterpolation(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x24BE243C0]);
}

uint64_t __SceneImportOperation.setMaterialDefinitionPath(_:)(uint64_t a1, uint64_t a2)
{
  return __SceneImportOperation.setRootSceneAssetPath(_:)(a1, a2, MEMORY[0x24BE243D8]);
}

uint64_t __SceneImportOperation.setRootSceneAssetPath(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = String.utf8CString.getter();
  a3(v5, v6 + 32);
  swift_release();
  return swift_retain();
}

uint64_t __SceneImportOperation.setApplyUnitConversionScale(_:)()
{
  RESceneImportOperationSetUnitType();
  return swift_retain();
}

uint64_t __SceneImportOperation.setRetainSubdivisionSurfaceInfo(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x24BE243F0]);
}

uint64_t __SceneImportOperation.setIsolateFromEngine(_:)(char a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;

  a2(*(_QWORD *)(v2 + 16), a1 & 1);
  return swift_retain();
}

void static __SceneImportOperation.addCustomUSDDataToEntity(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:interactions:fileName:serviceLocator:)(void *a1, void *a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, unint64_t *a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  char **p_name;
  id v25;
  id v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  char *v55;
  char *v56;
  void *v57;
  char *v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void *v66;
  id v67;
  char *v68;
  void *v69;
  id v70;
  float v71;
  float v72;
  id v73;
  char *v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  Swift::String v82;
  unint64_t v83;
  uint64_t v84;
  id v85;
  void *v86;
  Swift::String v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  id v99;
  id v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  char *v111;
  uint64_t v112;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  void *v117;
  void *v118;
  id v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v125;
  void *v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  Swift::String v132;
  Swift::String v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  id v137;
  void *v138;
  uint64_t v139;
  id v140;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v142;
  id v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  unint64_t v149;
  Swift::String v150;
  char *v151;
  char *v152;
  char *v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  id v161;
  id v162;
  id v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD v176[6];

  v166 = a8;
  v167 = a7;
  v169 = a6;
  v165 = a10;
  v164 = a9;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v159 = *(_QWORD *)(v158 - 8);
  MEMORY[0x24BDAC7A8](v158);
  v156 = (uint64_t)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v157 = (uint64_t)&v142 - v21;
  v176[0] = a1;
  v176[1] = a2;
  v176[2] = a3;
  v176[3] = a4;
  v176[4] = a5;
  v176[5] = a6;
  v22 = a1;
  v168 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = (void *)MEMORY[0x220768C3C](0xD00000000000001ALL, 0x800000021BE92E50);
  p_name = &stru_24DFECFF8.name;
  v25 = objc_msgSend(v22, sel_property_, v23);

  v163 = v22;
  if (!v25)
    goto LABEL_64;
  v26 = objc_msgSend(v25, sel_stringValue);
  if (!v26)
    goto LABEL_63;
  v27 = v26;
  v28 = v18;
  v161 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v31 = objc_msgSend(v22, sel_path);
  v32 = objc_msgSend(v31, sel_stringValue);

  if (!v32)
  {

    swift_bridgeObjectRelease();
    v162 = 0;
    v18 = v28;
    p_name = (char **)(&stru_24DFECFF8 + 8);
    goto LABEL_65;
  }
  v162 = v30;
  v155 = v25;
  v160 = v28;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v35 = v34;

  v172 = v33;
  v173 = v35;
  v170 = 91;
  v171 = 0xE100000000000000;
  v174 = 0;
  v175 = 0xE000000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v172 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v173 = v36;
  v170 = 93;
  v171 = 0xE100000000000000;
  v174 = 0;
  v175 = 0xE000000000000000;
  v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v39 = v38;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a4 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v162 = 0;
    v22 = v163;
    v18 = v160;
    p_name = (char **)(&stru_24DFECFF8 + 8);
    goto LABEL_65;
  }
  v40 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v39);
  v18 = v160;
  if ((v41 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    v162 = 0;
    v22 = v163;
    p_name = (char **)(&stru_24DFECFF8 + 8);
    goto LABEL_65;
  }
  v42 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * v40);
  v43 = *v42;
  v44 = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v43, v44, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v45)
  {

    goto LABEL_19;
  }
  v154 = (id)v45;
  v22 = v163;
  v25 = v155;
  if (v161 == (id)0x656E616C70 && v162 == (id)0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v46 = (void *)MEMORY[0x220768C3C](0xD000000000000024, 0x800000021BE92EC0);
    v47 = objc_msgSend(v22, sel_property_, v46);

    if (v47)
    {
      v48 = objc_msgSend(v47, sel_stringValue);
      if (v48)
      {
        v49 = v48;
        swift_bridgeObjectRelease();
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v52 = v51;

        if (v50 == 0x746E6F7A69726F68 && v52 == 0xEA00000000006C61)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        v22 = v163;
        v25 = v155;
        REAnchoringComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        REAnchoringComponentSetDescriptorType();
        REAnchoringComponentSetDescriptorAlignment();
        REAnchoringComponentSetDescriptorClassification();
        REAnchoringComponentSetDescriptorBounds();
        swift_release();

        p_name = (char **)(&stru_24DFECFF8 + 8);
        goto LABEL_59;
      }

      v22 = v163;
    }
  }
  p_name = &stru_24DFECFF8.name;
  if (v161 == (id)0x6567616D69 && v162 == (id)0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v53 = (void *)MEMORY[0x220768C3C](0xD000000000000029, 0x800000021BE92E70);
    v54 = (char *)objc_msgSend(v22, sel_property_, v53);

    if (v54)
    {
      v55 = (char *)objc_msgSend(v54, sel_targetObject);
      if (!v55)
      {
LABEL_53:

        goto LABEL_54;
      }
      v56 = v55;
      objc_opt_self();
      v57 = (void *)swift_dynamicCastObjCClass();
      v58 = v56;
      if (v57)
      {
        v59 = v57;
        v152 = v58;
        v153 = v54;
        v60 = objc_msgSend(v57, sel_typeName);
        v61 = objc_msgSend(v60, sel_stringValue);

        if (v61)
        {
          v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v64 = v63;

          if (v62 == 0xD00000000000001ALL && v64 == 0x800000021BE92EA0)
          {
            swift_bridgeObjectRelease();
            v22 = v163;
            v18 = v160;
          }
          else
          {
            v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v22 = v163;
            v18 = v160;
            if ((v65 & 1) == 0)
            {
LABEL_48:
              v58 = v153;
              v54 = v152;
              v25 = v155;
              goto LABEL_52;
            }
          }
          v66 = (void *)MEMORY[0x220768C3C](0x6567616D69, 0xE500000000000000);
          v67 = objc_msgSend(v59, sel_property_, v66);

          if (v67)
          {
            v68 = (char *)objc_msgSend(v67, sel_resourcePath);
            v54 = (char *)v67;
            v25 = v155;
            if (v68)
            {
              v160 = v68;
              v151 = v54;
              v69 = (void *)MEMORY[0x220768C3C](0x6C61636973796870, 0xED00006874646957);
              v70 = objc_msgSend(v59, sel_property_, v69);

              if (v70)
              {
                swift_bridgeObjectRelease();
                objc_msgSend(v70, sel_floatValue);
                if (v71 >= 0.0)
                  v72 = v71 / 100.0;
                else
                  v72 = 0.0;
                v73 = objc_msgSend((id)objc_opt_self(), sel_resourceWithResourcePath_, v160);
                v74 = v153;
                if (v73)
                {
                  v162 = v70;
                  v161 = v73;
                  v75 = objc_msgSend(v73, sel_dataNoCopy);
                  if (v75)
                  {
                    v76 = v75;
                    v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    v79 = v78;

                    v148 = v77;
                    v149 = v79;
                    specialized static CGImageRef.image(with:)(v77, v79);
                    if (v80)
                    {
                      v147 = v80;
                      v81 = v165 + 120;
                      swift_beginAccess();
                      outlined init with copy of __REAssetService(v81, (uint64_t)&v172);
                      if (one-time initialization token for instances != -1)
                        swift_once();
                      v146 = specialized AssetServiceScopedRegistry.instance(for:)(&v172);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v172);
                      v172 = 979661685;
                      v173 = 0xE400000000000000;
                      v82._countAndFlagsBits = v166;
                      v82._object = v164;
                      String.append(_:)(v82);
                      v84 = v172;
                      v83 = v173;
                      v85 = objc_msgSend(v160, sel_path);
                      v150._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v150._object = v86;

                      v87._countAndFlagsBits = 47;
                      v87._object = (void *)0xE100000000000000;
                      v88 = v84;
                      v89 = v83;
                      v90 = (void *)0xE000000000000000;
                      if (String.hasSuffix(_:)(v87))
                      {
                        v91 = 0;
                      }
                      else
                      {
                        v91 = 47;
                        v132._countAndFlagsBits = 47;
                        v132._object = (void *)0xE100000000000000;
                        if (String.hasPrefix(_:)(v132))
                          v91 = 0;
                        else
                          v90 = (void *)0xE100000000000000;
                      }
                      v145 = v88;
                      v172 = v88;
                      v173 = v89;
                      v144 = v89;
                      swift_bridgeObjectRetain();
                      v133._countAndFlagsBits = v91;
                      v133._object = v90;
                      String.append(_:)(v133);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRetain();
                      String.append(_:)(v150);
                      swift_bridgeObjectRelease();
                      v134 = v172;
                      v135 = v173;
                      v142 = v172;
                      v136 = objc_allocWithZone(MEMORY[0x24BDB1538]);
                      v137 = objc_msgSend(v136, sel_initWithCGImage_orientation_physicalWidth_, v147, 1, v72);
                      v138 = (void *)MEMORY[0x220768C3C](v134, v135);
                      objc_msgSend(v137, sel_setName_, v138);

                      v139 = v146;
                      swift_beginAccess();
                      v140 = v137;
                      swift_bridgeObjectRetain();
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      v174 = *(_QWORD *)(v139 + 16);
                      *(_QWORD *)(v139 + 16) = 0x8000000000000000;
                      v143 = v140;
                      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v140, v142, v135, isUniquelyReferenced_nonNull_native);
                      *(_QWORD *)(v139 + 16) = v174;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_endAccess();

                      swift_bridgeObjectRelease();
                      REAnchoringComponentGetComponentType();
                      REEntityGetOrAddComponentByClass();
                      REAnchoringComponentSetDescriptorType();
                      String.utf8CString.getter();
                      swift_bridgeObjectRelease();
                      REAnchoringComponentSetDescriptorResourceGroup();
                      swift_release();
                      String.utf8CString.getter();
                      swift_bridgeObjectRelease();
                      REAnchoringComponentSetDescriptorResourceName();

                      outlined consume of Data._Representation(v148, v149);
                      swift_release();
                      swift_release();
                      swift_release();

                      v25 = v147;
                      v22 = v163;
                      goto LABEL_59;
                    }
                    swift_release();

                    outlined consume of Data._Representation(v148, v149);
LABEL_64:
                    v162 = 0;
                    goto LABEL_65;
                  }

                  swift_release();
                }
                else
                {
                  swift_release();

                }
LABEL_63:

                goto LABEL_64;
              }

              v92 = v152;
              v93 = v151;
              v54 = v160;
            }
            else
            {
              v92 = v153;
              v93 = v152;
            }

            v58 = v93;
            goto LABEL_52;
          }
          goto LABEL_48;
        }
        v58 = v153;
        v54 = v152;
        v18 = v160;
      }
LABEL_52:

      goto LABEL_53;
    }
  }
LABEL_54:
  if (v161 == (id)1701011814 && v162 == (id)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v94 & 1) == 0)
    {
      swift_release();
      goto LABEL_63;
    }
  }
  REAnchoringComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REAnchoringComponentSetDescriptorType();
  swift_release();
LABEL_59:

  v95 = v22;
  v96 = specialized static __SceneImportOperation.searchForGravity(in:)(v95);
  v162 = v95;
  if (v96)
  {
    v97 = v96;
    specialized static __SceneImportOperation.importGravity(decodeContext:gravityNode:)(v95, a3, a4, v96);

  }
  else
  {

  }
LABEL_65:
  v98 = (void *)MEMORY[0x220768C3C](0x7372656767697274, 0xE800000000000000);
  v99 = objc_msgSend(v22, p_name[398], v98);

  if (!v99)
    goto LABEL_76;
  v161 = a5;
  v160 = v18;
  v100 = objc_msgSend(v99, sel_objectPathArray);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
  v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v101 >> 62)
  {
    swift_bridgeObjectRetain();
    v102 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v102 = *(_QWORD *)((v101 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v102 < 1
    || (v103 = (void *)MEMORY[0x220768C3C](0x736E6F69746361, 0xE700000000000000),
        v104 = objc_msgSend(v163, p_name[398], v103),
        v103,
        !v104))
  {

LABEL_75:
    v22 = v163;
    a5 = v161;
    goto LABEL_76;
  }
  v105 = objc_msgSend(v104, sel_objectPathArray);
  v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v106 >> 62)
  {
    swift_bridgeObjectRetain();
    v107 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v107 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v107 < 1)
  {

    goto LABEL_75;
  }
  v155 = v104;
  v108 = v163;
  v109 = v168;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v154 = v108;
  v110 = v109;
  v111 = v160;
  __RKEntityInteractionSpecification.init(decodeContext:)((uint64_t)v176, (uint64_t)v160);
  v126 = v154;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v111, 0, 1, v158);
  v127 = v157;
  outlined init with take of __RKEntityActionSpecification((uint64_t)v111, v157, type metadata accessor for __RKEntityInteractionSpecification);
  outlined init with copy of __RKEntityActionSpecification(v127, v156, type metadata accessor for __RKEntityInteractionSpecification);
  v128 = *v167;
  v129 = swift_isUniquelyReferenced_nonNull_native();
  if ((v129 & 1) == 0)
    v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v128 + 16) + 1, 1, v128);
  a5 = v161;
  v131 = *(_QWORD *)(v128 + 16);
  v130 = *(_QWORD *)(v128 + 24);
  if (v131 >= v130 >> 1)
    v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v130 > 1, v131 + 1, 1, v128);
  *(_QWORD *)(v128 + 16) = v131 + 1;
  outlined init with take of __RKEntityActionSpecification(v156, v128+ ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80))+ *(_QWORD *)(v159 + 72) * v131, type metadata accessor for __RKEntityInteractionSpecification);
  swift_release();

  *v167 = v128;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of __RKEntityActionSpecification(v157, type metadata accessor for __RKEntityInteractionSpecification);
  v22 = v163;
LABEL_76:
  v112 = a3;
  v113 = objc_msgSend(v22, sel_childIterator);
  v114 = objc_msgSend(v113, sel_nextObject);
  if (v114)
  {
    v115 = v114;
    while (1)
    {
      objc_opt_self();
      v116 = swift_dynamicCastObjCClass();
      if (!v116)
      {

        goto LABEL_91;
      }
      v117 = (void *)v116;
      v118 = (void *)MEMORY[0x220768C3C](1684957547, 0xE400000000000000);
      v119 = objc_msgSend(v117, sel_metadataWithKey_, v118);

      if (!v119)
        goto LABEL_88;
      v120 = objc_msgSend(v119, sel_stringValue);

      if (!v120)
        goto LABEL_88;
      v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v123 = v122;

      if (v121 != 0x62694C656E656373 || v123 != 0xEC00000079726172)
        break;

      swift_bridgeObjectRelease();
LABEL_79:
      v115 = objc_msgSend(v113, sel_nextObject);
      if (!v115)
        goto LABEL_91;
    }
    v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v125 & 1) == 0)
LABEL_88:
      static __SceneImportOperation.addCustomUSDDataToEntity(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:interactions:fileName:serviceLocator:)(v117, v168, v112, a4, a5, v169, v167, v166, v164, v165);

    goto LABEL_79;
  }
LABEL_91:

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

void static __SceneImportOperation.addCustomUSDDataToScene(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v28 = MEMORY[0x24BEE4AF8];
  static __SceneImportOperation.addCustomUSDDataToEntity(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:interactions:fileName:serviceLocator:)(a1, a2, a3, a4, a5, a6, (unint64_t *)&v28, a7, a8, a9);
  v13 = v28;
  if (!*(_QWORD *)(v28 + 16))
  {
    swift_bridgeObjectRelease();
    return;
  }
  v14 = a1;
  v15 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = objc_msgSend(v14, sel_path);
  v17 = objc_msgSend(v16, sel_stringValue);

  if (!v17)
  {

    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v27 = v15;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v20 = v19;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a4 + 16) || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    v15 = v27;
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_12;
  }
  v23 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * v21);
  v24 = *v23;
  v25 = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v24, v25, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v14;
  if (!v26)
  {

    goto LABEL_9;
  }
  Entity.__interactions.setter(v13);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

LABEL_12:
}

uint64_t __SceneImportOperation.getSceneResource()()
{
  uint64_t result;
  uint64_t v1;

  result = RESceneImportOperationGetSceneAsset();
  if (result)
  {
    v1 = result;
    RERetain();
    type metadata accessor for __SceneResource();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v1;
  }
  return result;
}

uint64_t __SceneImportOperation_addCustomUSDDataToScene(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:fileName:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  char *EntitiesArray;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  _BYTE v37[32];
  void *v38;
  _BYTE v39[32];

  v34 = a7;
  v35 = a8;
  v32 = a5;
  v33 = a6;
  v31 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v16(v13, a4, v14);
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
  v17(v13, 0, 1, v14);
  Scene.__sceneIdentifier.setter((uint64_t)v13);
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  v20 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v19);
  if (*(_QWORD *)(v20 + 16))
  {
    v21 = *(_QWORD *)(v20 + 32);
    swift_release();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_7:
      v16(v13, a4, v14);
      v17(v13, 0, 1, v14);
      Entity.__interactionIdentifier.setter((uint64_t)v13);
      type metadata accessor for __SceneImportOperation();
      outlined init with copy of Any(a1, (uint64_t)v39);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for USKNode);
      swift_dynamicCast();
      v25 = v38;
      outlined init with copy of Any(v31, (uint64_t)v37);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKScene);
      swift_dynamicCast();
      v26 = v36;
      v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      specialized static __ServiceLocator.shared.getter();
      v28 = swift_retain();
      static __SceneImportOperation.addCustomUSDDataToScene(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(v25, v26, a3, v32, v33, v27, v34, v35, v28);

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      return 1;
    }
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      v22 = specialized static Entity.entityInfoType(_:)();
      if (v22)
      {
        v23 = (*(uint64_t (**)(void))(v22 + 232))();
        v24 = *(_QWORD *)(v23 + 16);
        swift_retain();
        MEMORY[0x22076D160](v24, 0);
        *(_QWORD *)(v23 + 16) = v21;
        MEMORY[0x22076D160](v21, v23);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v21);
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t __SceneImportOperation_addCustomUSDDataToScene(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  _BYTE v21[32];
  void *v22;
  _BYTE v23[32];

  outlined init with copy of Any(a1, (uint64_t)v23);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for USKNode);
  swift_dynamicCast();
  v16 = v22;
  outlined init with copy of Any(a2, (uint64_t)v21);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKScene);
  swift_dynamicCast();
  specialized static __ServiceLocator.shared.getter();
  v17 = swift_retain();
  v18 = __SceneImportOperation_addCustomUSDDataToRESceneForReal(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(v16, v20, a3, a4, a5, a6, a7, a8, a9, v17);

  swift_release();
  return v18;
}

uint64_t __SceneImportOperation_addCustomUSDDataToRESceneForReal(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  char *EntitiesArray;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;

  v37 = a2;
  v38 = a5;
  v36 = a1;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v35 = a4;
  v20(v17, a4, v18);
  v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56);
  v21(v17, 0, 1, v18);
  Scene.__sceneIdentifier.setter((uint64_t)v17);
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  v24 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v23);
  if (*(_QWORD *)(v24 + 16))
  {
    v25 = *(_QWORD *)(v24 + 32);
    swift_release();
    v26 = (id)REEntityGetSwiftObject();
    v33 = a6;
    v34 = a8;
    if (v26)
    {
      v27 = a7;
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_7:
      v20(v17, v35, v18);
      v21(v17, 0, 1, v18);
      Entity.__interactionIdentifier.setter((uint64_t)v17);
      type metadata accessor for __SceneImportOperation();
      static __SceneImportOperation.addCustomUSDDataToScene(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(v36, v37, a3, v38, v33, v27, v34, a9, a10);
      swift_release();
      return 0;
    }
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      v28 = specialized static Entity.entityInfoType(_:)();
      v27 = a7;
      if (v28)
      {
        v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 232))(v28, v29);
        v31 = *(_QWORD *)(v30 + 16);
        swift_retain();
        MEMORY[0x22076D160](v31, 0);
        *(_QWORD *)(v30 + 16) = v25;
        MEMORY[0x22076D160](v25, v30);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v25);
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t __SceneImportOperation_addCustomUSDDataToScene(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  void *v16;
  uint64_t v17;
  void *v20;
  _BYTE v21[32];
  void *v22;
  _BYTE v23[32];

  outlined init with copy of Any(a1, (uint64_t)v23);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for USKNode);
  swift_dynamicCast();
  v16 = v22;
  outlined init with copy of Any(a2, (uint64_t)v21);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKScene);
  swift_dynamicCast();
  v17 = __SceneImportOperation_addCustomUSDDataToRESceneForReal(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(v16, v20, a3, a4, a5, a6, a7, a8, a9, a10);

  return v17;
}

unint64_t lazy protocol witness table accessor for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError;
  if (!lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __SceneImportOperation.InternalError, &unk_24DFD55F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError;
  if (!lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __SceneImportOperation.InternalError, &unk_24DFD55F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError);
  }
  return result;
}

uint64_t type metadata accessor for __SceneImportOperation.__ImportedScene(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __SceneImportOperation.__ImportedScene);
}

uint64_t type metadata accessor for __SceneImportOperation.ImportedScene(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __SceneImportOperation.ImportedScene);
}

uint64_t type metadata accessor for __SceneImportOperation()
{
  return objc_opt_self();
}

uint64_t method lookup function for __SceneImportOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t getEnumTagSinglePayload for __SceneImportOperation.__ImportedScene()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __SceneImportOperation.__ImportedScene()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __SceneImportOperation.InternalError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BDACCB8 + 4 * asc_21BE7B4C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BDACCD8 + 4 * byte_21BE7B4C5[v4]))();
}

_BYTE *sub_21BDACCB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BDACCD8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BDACCE0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BDACCE8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BDACCF0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BDACCF8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for __SceneImportOperation.InternalError()
{
  return &unk_24DFD55F8;
}

_QWORD *initializeBufferWithCopyOfBuffer for __SceneImportOperation.__ImportedScene(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)v4 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(_QWORD *)((char *)v4 + v9) = *(_QWORD *)((char *)a2 + v9);
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for __SceneImportOperation.__ImportedScene(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_release();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for __SceneImportOperation.ImportedScene()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __SceneImportOperation.ImportedScene()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for __SceneImportOperation.__ImportedScene()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of __RKEntityInteractionSpecification?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *specialized static __SceneImportOperation.searchForGravity(in:)(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v1 = objc_msgSend(a1, sel_childIterator);
  v2 = objc_msgSend(v1, sel_nextObject);
  if (v2)
  {
    v3 = v2;
    do
    {
      objc_opt_self();
      v4 = swift_dynamicCastObjCClass();
      if (v4)
      {
        v5 = (void *)v4;
        v6 = v3;
        v7 = (void *)MEMORY[0x220768C3C](0xD000000000000027, 0x800000021BE92EF0);
        v8 = objc_msgSend(v5, sel_property_, v7);

        if (v8)
        {
          objc_msgSend(v8, sel_float3Value);
          swift_unknownObjectRelease();

          return v5;
        }

      }
      v3 = objc_msgSend(v1, sel_nextObject);
    }
    while (v3);
  }
  swift_unknownObjectRelease();
  return 0;
}

void specialized static __SceneImportOperation.importGravity(decodeContext:gravityNode:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v8;
  id v9;
  __int128 v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *Object;
  __int128 v23;

  swift_beginAccess();
  if (static __RKScenePhysics.registration)
  {
    v8 = (void *)MEMORY[0x220768C3C](0xD000000000000027, 0x800000021BE92EF0);
    v9 = objc_msgSend(a4, sel_property_, v8);

    if (v9)
    {
      objc_msgSend(v9, sel_float3Value);
      v23 = v10;

      v11 = objc_msgSend(a1, sel_path);
      v12 = objc_msgSend(v11, sel_stringValue);

      if (v12)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v15 = v14;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a3 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15), (v17 & 1) != 0))
        {
          v18 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v16);
          v19 = *v18;
          v20 = v18[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v21 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v19, v20, a2, a3);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v21)
          {
            REEntityGetOrAddComponentByClass();
            Object = (_OWORD *)RECustomComponentGetObject();
            if (Object)
              *Object = v23;
            swift_release();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

uint64_t partial apply for closure #1 in __SceneImportOperation.init(core:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v10;

  return __SceneImportOperation_addCustomUSDDataToREScene2(op:uskNode:uskScene:reScene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:fileName:serviceLocator:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, v10);
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

BOOL static PhysicsBodyMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PhysicsBodyMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PhysicsBodyMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type PhysicsBodyMode and conformance PhysicsBodyMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsBodyMode and conformance PhysicsBodyMode;
  if (!lazy protocol witness table cache variable for type PhysicsBodyMode and conformance PhysicsBodyMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsBodyMode, &type metadata for PhysicsBodyMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyMode and conformance PhysicsBodyMode);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PhysicsBodyMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BDAD668 + 4 * byte_21BE7B641[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BDAD69C + 4 * byte_21BE7B63C[v4]))();
}

uint64_t sub_21BDAD69C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDAD6A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDAD6ACLL);
  return result;
}

uint64_t sub_21BDAD6B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDAD6C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BDAD6C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDAD6CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhysicsBodyMode()
{
  return &type metadata for PhysicsBodyMode;
}

float static PhysicsMassProperties.default.getter@<S0>(uint64_t a1@<X8>)
{
  float result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for default != -1)
    swift_once();
  result = *(float *)&static PhysicsMassProperties.default;
  v3 = xmmword_2551AE3C0;
  v4 = xmmword_2551AE3D0;
  v5 = xmmword_2551AE3E0;
  *(_DWORD *)a1 = static PhysicsMassProperties.default;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  return result;
}

double one-time initialization function for default()
{
  double result;

  if (one-time initialization token for identity != -1)
    swift_once();
  result = *(double *)&static simd_quatf.identity;
  static PhysicsMassProperties.default = 1065353216;
  xmmword_2551AE3C0 = xmmword_21BE75100;
  xmmword_2551AE3D0 = 0uLL;
  xmmword_2551AE3E0 = static simd_quatf.identity;
  return result;
}

__n128 PhysicsMassProperties.init()@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;

  if (one-time initialization token for identity != -1)
    swift_once();
  result = (__n128)static simd_quatf.identity;
  *(_DWORD *)a1 = 1065353216;
  *(_OWORD *)(a1 + 16) = xmmword_21BE75100;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

float PhysicsMassProperties.mass.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void PhysicsMassProperties.mass.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*PhysicsMassProperties.mass.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhysicsMassProperties.inertia.getter()
{
  __n128 *v0;

  return v0[1];
}

void PhysicsMassProperties.inertia.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*PhysicsMassProperties.inertia.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhysicsMassProperties.centerOfMass.getter()
{
  __n128 *v0;

  return v0[2];
}

void PhysicsMassProperties.centerOfMass.setter(__n128 a1, __n128 a2)
{
  __n128 *v2;

  v2[2] = a1;
  v2[3] = a2;
}

uint64_t (*PhysicsMassProperties.centerOfMass.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsMassProperties.init(mass:inertia:centerOfMass:)@<X0>(__n128 *a1@<X8>, float a2@<S0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  uint64_t result;
  __n128 v8;
  __n128 v9;
  __n128 v10;

  if (one-time initialization token for identity != -1)
  {
    v9 = a4;
    v10 = a5;
    v8 = a3;
    result = swift_once();
    a3 = v8;
    a4 = v9;
    a5 = v10;
  }
  a1->n128_f32[0] = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

double PhysicsMassProperties.init(shape:density:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = PhysicsMassProperties.init(shape:density:)(a1, MEMORY[0x24BE22958], a2).n128_u64[0];
  return result;
}

double PhysicsMassProperties.init(shape:mass:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = PhysicsMassProperties.init(shape:density:)(a1, MEMORY[0x24BE22970], a2).n128_u64[0];
  return result;
}

__n128 PhysicsMassProperties.init(shape:density:)@<Q0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  int v4;
  __n128 result;
  __int128 v6;
  __n128 v7;
  __int128 v8;
  _OWORD v9[3];
  int v10;

  a2(v9, *(_QWORD *)(a1 + 16));
  v7 = (__n128)v9[1];
  v8 = v9[0];
  v6 = v9[2];
  v4 = v10;
  if (one-time initialization token for identity != -1)
    swift_once();
  swift_release();
  *(_DWORD *)a3 = v4;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v8;
  result = v7;
  *(__n128 *)(a3 + 48) = v7;
  return result;
}

BOOL specialized static PhysicsMassProperties.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  _BOOL8 result;
  uint64_t v11;
  BOOL v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (*(float *)a1 != *(float *)a2)
    return 0;
  v2 = 0;
  v4 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  while (1)
  {
    v23 = v4;
    v17 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v24 = v7;
    v18 = *(float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v9 = v17 == v18;
    if (v2 == 2)
      break;
    while (1)
    {
      ++v2;
      if (v9)
        break;
      v9 = 0;
      result = 0;
      if (v2 == 2)
        return result;
    }
  }
  if (v17 != v18)
    return 0;
  v11 = 0;
  while (1)
  {
    v21 = v3;
    v13 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v22 = v6;
    v14 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v12 = v13 == v14;
    if (v11 == 2)
      break;
    while (1)
    {
      ++v11;
      if (v12)
        break;
      v12 = 0;
      result = 0;
      if (v11 == 2)
        return result;
    }
  }
  if (v13 != v14)
    return 0;
  v15 = 0;
  while (1)
  {
    v19 = v5;
    v16 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v20 = v8;
    result = v16 == *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    if (v15 == 3)
      break;
    while (1)
    {
      ++v15;
      if (result)
        break;
      result = 0;
      if (v15 == 3)
        return result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsMassProperties()
{
  return &type metadata for PhysicsMassProperties;
}

uint64_t __RKEntityForceAction.__allocating_init(targetEntity:force:velocity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 112) = 0;
  *(_QWORD *)(v14 + 120) = 0;
  *(_BYTE *)(v14 + 128) = 1;
  *(_QWORD *)(v14 + 144) = 0;
  *(_QWORD *)(v14 + 152) = 0;
  *(_BYTE *)(v14 + 160) = 1;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_QWORD *)(v14 + 200) = 0;
  swift_beginAccess();
  *(_QWORD *)(v14 + 112) = a2;
  *(_QWORD *)(v14 + 120) = a3;
  *(_BYTE *)(v14 + 128) = a4 & 1;
  swift_beginAccess();
  *(_QWORD *)(v14 + 144) = a5;
  *(_QWORD *)(v14 + 152) = a6;
  *(_BYTE *)(v14 + 160) = a7 & 1;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityForceAction.force.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 112);
}

uint64_t __RKEntityForceAction.force.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = a2;
  *(_BYTE *)(v3 + 128) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityForceAction.force.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityForceAction.velocity.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 144);
}

uint64_t __RKEntityForceAction.velocity.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = a2;
  *(_BYTE *)(v3 + 160) = a3 & 1;
  return result;
}

uint64_t __RKEntityForceAction.init(targetEntity:force:velocity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 128) = 1;
  *(_QWORD *)(v7 + 152) = 0;
  *(_BYTE *)(v7 + 160) = 1;
  *(_QWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_QWORD *)(v7 + 200) = 0;
  swift_beginAccess();
  *(_QWORD *)(v7 + 112) = a2;
  *(_QWORD *)(v7 + 120) = a3;
  *(_BYTE *)(v7 + 128) = a4 & 1;
  swift_beginAccess();
  *(_QWORD *)(v7 + 144) = a5;
  *(_QWORD *)(v7 + 152) = a6;
  *(_BYTE *)(v7 + 160) = a7 & 1;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityForceAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t SceneNullable;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[9];

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v25 = 91;
  v26 = 0xE100000000000000;
  if (v2)
  {
    v27[0] = 0;
    v27[1] = 0xE000000000000000;
    v27[6] = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v10 = v25;
  v9 = v26;
  if (!*(_QWORD *)(v0 + 16))
  {
    v17 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v25);
    swift_bridgeObjectRelease();
    return 0;
  }
  v11 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v11 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_14:
      v18 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v18, &v25);
      swift_bridgeObjectRelease();
LABEL_15:
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_14;
  v12 = *(_QWORD *)(v1 + 96);
  v13 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 1;
  *(_BYTE *)(v1 + 104) = 1;
  v25 = v12;
  LOBYTE(v26) = v13;
  __RKEntityAction.state.didset((uint64_t)&v25);
  swift_retain_n();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
    goto LABEL_19;
  v15 = SceneNullable;
  v16 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v16)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v15);
  }
  v20 = Scene.physicsOrigin.getter();
  swift_release();
  if (!v20)
LABEL_19:
    specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
  swift_release_n();
  RERigidBodyComponentGetComponentType();
  if (REEntityGetComponentByClass() && RERigidBodyComponentGetRigidBody())
  {
    RERigidBodyWakeUp();
    if (!Entity.rcSceneEntity.getter())
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_15;
    }
    REEntityCalculateWorldOrientation();
    swift_beginAccess();
    if ((*(_BYTE *)(v1 + 160) & 1) != 0)
    {
      swift_beginAccess();
      if ((*(_BYTE *)(v1 + 128) & 1) != 0)
      {
LABEL_29:
        RENetworkMarkComponentDirty();
        swift_release();
        goto LABEL_30;
      }
    }
    else
    {
      RERigidBodyGetMassFrame();
    }
    RERigidBodyApplyLinearImpulse();
    goto LABEL_29;
  }
LABEL_30:
  v21 = swift_allocObject();
  swift_weakInit();
  v22 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = partial apply for closure #1 in __RKEntityForceAction.perform(with:);
  *(_QWORD *)(v1 + 40) = v21;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v22);
  memset(v27, 0, 40);
  v23 = swift_allocObject();
  swift_weakInit();
  specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v27, (uint64_t)partial apply for closure #2 in __RKEntityForceAction.perform(with:), v23, &v25);
  swift_release();
  outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v25, v1 + 168);
  swift_endAccess();
  v25 = v10;
  v26 = v9;
  v24 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v24, &v25);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return 1;
}

uint64_t closure #1 in __RKEntityForceAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  _QWORD v2[4];
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result + 168;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v1, (uint64_t)&v3);
    if (*((_QWORD *)&v4 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v3, (uint64_t)v2);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v2, v2[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for Cancellable?);
    }
    v5 = 0;
    v3 = 0u;
    v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v3, v1);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityForceAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 96);
    v3 = *(_BYTE *)(v1 + 104);
    *(_QWORD *)(v1 + 96) = 2;
    *(_BYTE *)(v1 + 104) = 1;
    v4 = v2;
    v5 = v3;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v4);
    return swift_release_n();
  }
  return result;
}

uint64_t __RKEntityForceAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  swift_beginAccess();
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 120);
  v11 = *(_QWORD *)(v1 + 112);
  v3 = *(_BYTE *)(v1 + 128);
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 144);
  v4 = *(_QWORD *)(v1 + 152);
  v6 = *(_BYTE *)(v1 + 160);
  v7 = type metadata accessor for __RKEntityForceAction();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 128) = 1;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_BYTE *)(v8 + 160) = 1;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_QWORD *)(v8 + 200) = 0;
  swift_beginAccess();
  *(_QWORD *)(v8 + 112) = v11;
  *(_QWORD *)(v8 + 120) = v2;
  *(_BYTE *)(v8 + 128) = v3;
  swift_beginAccess();
  *(_QWORD *)(v8 + 144) = v5;
  *(_QWORD *)(v8 + 152) = v4;
  *(_BYTE *)(v8 + 160) = v6;
  v9 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v9);
  a1[3] = v7;
  *a1 = result;
  return result;
}

uint64_t __RKEntityForceAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    swift_beginAccess();
    v12 = *(_QWORD *)(v1 + 120);
    v20 = *(_QWORD *)(v1 + 112);
    v13 = *(_BYTE *)(v1 + 128);
    swift_beginAccess();
    v14 = *(_QWORD *)(v1 + 144);
    v15 = *(_QWORD *)(v1 + 152);
    v16 = *(_BYTE *)(v1 + 160);
    type metadata accessor for __RKEntityForceAction();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 112) = 0;
    *(_QWORD *)(v17 + 120) = 0;
    *(_BYTE *)(v17 + 128) = 1;
    *(_QWORD *)(v17 + 144) = 0;
    *(_QWORD *)(v17 + 152) = 0;
    *(_BYTE *)(v17 + 160) = 1;
    *(_OWORD *)(v17 + 168) = 0u;
    *(_OWORD *)(v17 + 184) = 0u;
    *(_QWORD *)(v17 + 200) = 0;
    swift_beginAccess();
    *(_QWORD *)(v17 + 112) = v20;
    *(_QWORD *)(v17 + 120) = v12;
    *(_BYTE *)(v17 + 128) = v13;
    swift_beginAccess();
    *(_QWORD *)(v17 + 144) = v14;
    *(_QWORD *)(v17 + 152) = v15;
    *(_BYTE *)(v17 + 160) = v16;
    v18 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v18);
  }
  else
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(v1 + 120);
    v19 = *(_QWORD *)(v1 + 112);
    v5 = *(_BYTE *)(v1 + 128);
    swift_beginAccess();
    v6 = *(_QWORD *)(v1 + 144);
    v7 = *(_QWORD *)(v1 + 152);
    v8 = *(_BYTE *)(v1 + 160);
    type metadata accessor for __RKEntityForceAction();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 112) = 0;
    *(_QWORD *)(v9 + 120) = 0;
    *(_BYTE *)(v9 + 128) = 1;
    *(_QWORD *)(v9 + 144) = 0;
    *(_QWORD *)(v9 + 152) = 0;
    *(_BYTE *)(v9 + 160) = 1;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_QWORD *)(v9 + 200) = 0;
    swift_beginAccess();
    *(_QWORD *)(v9 + 112) = v19;
    *(_QWORD *)(v9 + 120) = v4;
    *(_BYTE *)(v9 + 128) = v5;
    swift_beginAccess();
    *(_QWORD *)(v9 + 144) = v6;
    *(_QWORD *)(v9 + 152) = v7;
    *(_BYTE *)(v9 + 160) = v8;
    v10 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v10);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v21;
    else
      return 0;
  }
}

void __RKEntityForceAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityForceAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityForceAction.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityForceAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityForceAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t sub_21BDAEB34()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RKEntityForceAction.perform(with:)()
{
  return closure #1 in __RKEntityForceAction.perform(with:)();
}

uint64_t partial apply for closure #2 in __RKEntityForceAction.perform(with:)()
{
  return closure #2 in __RKEntityForceAction.perform(with:)();
}

uint64_t type metadata accessor for __RKEntityForceAction()
{
  return objc_opt_self();
}

__n128 sub_21BDAEB88@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = *a1;
  swift_beginAccess();
  v4 = v3[8].n128_u8[0];
  result = v3[7];
  *a2 = result;
  a2[1].n128_u8[0] = v4;
  return result;
}

uint64_t sub_21BDAEBD4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v5 + 112) = v2;
  *(_QWORD *)(v5 + 120) = v3;
  *(_BYTE *)(v5 + 128) = v4;
  return result;
}

__n128 sub_21BDAEC24@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = *a1;
  swift_beginAccess();
  v4 = v3[10].n128_u8[0];
  result = v3[9];
  *a2 = result;
  a2[1].n128_u8[0] = v4;
  return result;
}

uint64_t sub_21BDAEC70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v5 + 144) = v2;
  *(_QWORD *)(v5 + 152) = v3;
  *(_BYTE *)(v5 + 160) = v4;
  return result;
}

uint64_t method lookup function for __RKEntityForceAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityForceAction.force.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of __RKEntityForceAction.force.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 552))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of __RKEntityForceAction.force.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of __RKEntityForceAction.velocity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of __RKEntityForceAction.velocity.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 576))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of __RKEntityForceAction.velocity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of __RKEntityForceAction.__allocating_init(targetEntity:force:velocity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(v7 + 616))(a1, a2, a3, a4 & 1, a5, a6, a7 & 1);
}

uint64_t specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(char a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;

  v2 = specialized HasHierarchy.parent.getter();
  swift_release();
  if (v2)
    return specialized HasHierarchy.setParent(_:preservingWorldTransform:)(0, a1 & 1);
  result = REEntityGetSceneNullable();
  if (result)
  {
    v4 = result;
    v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    swift_conformsToProtocol2();
    RESceneRemoveEntity();
    return swift_release();
  }
  return result;
}

void ReferenceComponent.loadingPolicy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

void static ReferenceComponent.loadReference(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  os_log_type_t v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30[6];
  uint64_t v31;

  swift_retain();
  if (REEntityGetComponent())
  {
    ReferenceComponent.init(from:)((uint64_t)v27);
    v4 = v27[0];
    v3 = v27[1];
    v6 = v27[2];
    v5 = v27[3];
    v7 = v28;
    v8 = v29;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_release();
    if (v7)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v9 = static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      swift_retain_n();
      v10 = static OS_os_log.default.getter();
      if (os_log_type_enabled(v10, v9))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        v27[0] = swift_slowAlloc();
        v12 = v27[0];
        *(_DWORD *)v11 = 136315138;
        REEntityGetName();
        v13 = String.init(cString:)();
        v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21B9AA000, v10, v9, "ReferenceComponent for %s is already loaded", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v12, -1, -1);
        MEMORY[0x220772F44](v11, -1, -1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
      }

      goto LABEL_14;
    }
    specialized static ReferenceComponent.findBundle(bundlePath:)(v6, v5);
    if (v1)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      v24 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_14:
      swift_release();
      return;
    }
    v23 = v22;
    swift_bridgeObjectRelease();
    type metadata accessor for Entity();
    v25 = static Entity.load(named:in:)(v4, v3, v23);
    swift_bridgeObjectRelease();

    swift_retain();
    swift_release();
    v27[0] = a1;
    swift_retain();
    swift_retain();
    Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(v25, 0);
    swift_release();
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v26 = 2;
    v30[0] = v4;
    v30[1] = v3;
    if (v8)
      v26 = 258;
    v30[2] = v6;
    v30[3] = v5;
    v30[4] = v26;
    v30[5] = v25;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v30);
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_release();
    v15 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    swift_retain_n();
    v16 = static OS_os_log.default.getter();
    v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v27[0] = v19;
      *(_DWORD *)v18 = 136315138;
      REEntityGetName();
      v20 = String.init(cString:)();
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v16, v17, "No ReferenceComponent found for %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v19, -1, -1);
      MEMORY[0x220772F44](v18, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
}

uint64_t static ReferenceComponent.loadReference(at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[17] = a1;
  type metadata accessor for MainActor();
  v1[18] = static MainActor.shared.getter();
  v1[19] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[20] = v2;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 224) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 232) = a1;
  }
  return swift_task_switch();
}

uint64_t static ReferenceComponent.loadReference(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  os_log_type_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;
  uint8_t *buf;
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  swift_retain();
  if (!REEntityGetComponent())
  {
    swift_release();
    swift_release();
    v13 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    swift_retain_n();
    v14 = static OS_os_log.default.getter();
    v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v30[0] = v17;
      *(_DWORD *)v16 = 136315138;
      REEntityGetName();
      v18 = String.init(cString:)();
      *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_21B9AA000, v14, v15, "No ReferenceComponent found for %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v17, -1, -1);
      MEMORY[0x220772F44](v16, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  ReferenceComponent.init(from:)((uint64_t)v30);
  v2 = v30[0];
  v1 = v30[1];
  *(_QWORD *)(v0 + 168) = v30[0];
  *(_QWORD *)(v0 + 176) = v1;
  v4 = v31;
  v3 = v32;
  *(_QWORD *)(v0 + 184) = v31;
  *(_QWORD *)(v0 + 192) = v3;
  v5 = v33;
  *(_BYTE *)(v0 + 240) = v34;
  *(_QWORD *)(v0 + 200) = v35;
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_release();
  if (!v5)
  {
    specialized static ReferenceComponent.findBundle(bundlePath:)(v4, v3);
    v21 = v20;
    *(_QWORD *)(v0 + 208) = v20;
    swift_bridgeObjectRelease();
    type metadata accessor for Entity();
    v25 = v21;
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v26;
    *v26 = v0;
    v26[1] = static ReferenceComponent.loadReference(at:);
    return Entity.init(named:in:)(v2, v1, (uint64_t)v21);
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  v6 = static os_log_type_t.default.getter();
  type metadata accessor for OS_os_log();
  swift_retain_n();
  v7 = static OS_os_log.default.getter();
  v8 = os_log_type_enabled(v7, v6);
  if (v5 != 1)
  {
    if (v8)
    {
      v22 = (uint8_t *)swift_slowAlloc();
      buf = (uint8_t *)swift_slowAlloc();
      v30[0] = (uint64_t)buf;
      *(_DWORD *)v22 = 136315138;
      v9 = v22;
      REEntityGetName();
      v23 = String.init(cString:)();
      *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_21B9AA000, v7, v6, "ReferenceComponent for %s is already loaded", v22, 0xCu);
      v12 = (uint64_t)buf;
      goto LABEL_11;
    }
LABEL_13:

    swift_release_n();
    goto LABEL_14;
  }
  if (!v8)
    goto LABEL_13;
  v9 = (uint8_t *)swift_slowAlloc();
  v29 = swift_slowAlloc();
  v30[0] = v29;
  *(_DWORD *)v9 = 136315138;
  REEntityGetName();
  v10 = String.init(cString:)();
  *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v30);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  _os_log_impl(&dword_21B9AA000, v7, v6, "ReferenceComponent for %s is currently loading", v9, 0xCu);
  v12 = v29;
LABEL_11:
  swift_arrayDestroy();
  MEMORY[0x220772F44](v12, -1, -1);
  MEMORY[0x220772F44](v9, -1, -1);

LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(void **)(v0 + 208);
  v3 = *(unsigned __int8 *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  swift_release();

  swift_retain();
  swift_release();
  swift_retain();
  swift_retain();
  Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(v1, 0);
  swift_release();
  swift_release();
  v8 = 2;
  *(_QWORD *)(v0 + 64) = v7;
  *(_QWORD *)(v0 + 72) = v6;
  *(_QWORD *)(v0 + 80) = v5;
  if (v3)
    v8 = 258;
  *(_QWORD *)(v0 + 88) = v4;
  *(_QWORD *)(v0 + 96) = v8;
  *(_QWORD *)(v0 + 104) = v1;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t *)(v0 + 64));
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;

  v1 = *(void **)(v0 + 208);
  swift_release();

  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_BYTE *)(v0 + 240) == 0;
  v7 = 256;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 168);
  if (v6)
    v7 = 0;
  *(_QWORD *)(v0 + 24) = v5;
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 40) = v3;
  *(_QWORD *)(v0 + 48) = v7;
  *(_QWORD *)(v0 + 56) = v2;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  static os_log_type_t.error.getter();
  type metadata accessor for OS_os_log();
  v8 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance ReferenceComponent.BundlePathError()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000022;
  else
    return 0xD00000000000002FLL;
}

BOOL static ReferenceComponent.LoadingPolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ReferenceComponent.LoadingPolicy.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ReferenceComponent.LoadingPolicy.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static ReferenceComponent.ReferenceState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ReferenceComponent.ReferenceState.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ReferenceComponent.ReferenceState.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ReferenceComponent.state.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

uint64_t ReferenceComponent.reference.getter()
{
  return swift_retain();
}

uint64_t ReferenceComponent.init(named:at:loadingPolicy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6;

  v6 = *a5;
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = 0;
  *(_BYTE *)(a6 + 33) = v6;
  *(_QWORD *)(a6 + 40) = 0;
  return result;
}

void ReferenceComponent.init(named:in:loadingPolicy:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v31 = a1;
  v32 = a2;
  v8 = type metadata accessor for CharacterSet();
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = MEMORY[0x24BDAC7A8](v8).n128_u64[0];
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v29) = *a4;
  v30 = a3;
  v13 = objc_msgSend(a3, sel_bundlePath, v10);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v37 = v14;
  v38 = v16;
  v17 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v18 = objc_msgSend(v17, sel_resourcePath);

  if (v18)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    v35 = v19;
    v36 = v21;
    v33 = 0;
    v34 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = v22;
    v38 = v24;
    CharacterSet.init(charactersIn:)();
    v25 = StringProtocol.trimmingCharacters(in:)();
    v27 = v26;

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    v28 = v32;
    *(_QWORD *)a5 = v31;
    *(_QWORD *)(a5 + 8) = v28;
    *(_QWORD *)(a5 + 16) = v25;
    *(_QWORD *)(a5 + 24) = v27;
    *(_BYTE *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 33) = BYTE4(v29);
    *(_QWORD *)(a5 + 40) = 0;
  }
  else
  {
    __break(1u);
  }
}

uint64_t ReferenceComponent.init(named:loadingPolicy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *a3;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0xE000000000000000;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 33) = v4;
  *(_QWORD *)(a4 + 40) = 0;
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance ReferenceComponent@<X0>(uint64_t a1@<X8>)
{
  return ReferenceComponent.init(from:)(a1);
}

uint64_t static ReferenceComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return ReferenceComponent.init(from:)(a1);
}

uint64_t ReferenceComponent.__toCore(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t result;
  uint64_t v13;
  _DWORD v14[4];
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for String.Encoding();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = v0[1];
  v7 = v0[2];
  v8 = v0[3];
  v14[3] = *((unsigned __int8 *)v0 + 32);
  v9 = v0[5];
  v15 = v5;
  v16 = v6;
  static String.Encoding.utf8.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v10 = StringProtocol.cString(using:)();
  v11 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  result = v11(v4, v1);
  if (!v10)
  {
    __break(1u);
    goto LABEL_7;
  }
  REReferenceComponentSetEntityName();
  swift_bridgeObjectRelease();
  v15 = v7;
  v16 = v8;
  static String.Encoding.utf8.getter();
  v13 = StringProtocol.cString(using:)();
  result = v11(v4, v1);
  if (!v13)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  REReferenceComponentSetBundlePath();
  swift_bridgeObjectRelease();
  REReferenceComponentSetLoadingPolicy();
  REReferenceComponentSetLoadingState();
  if (v9)
    REReferenceComponentSetSubscene();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ReferenceComponent(_DWORD *a1@<X8>)
{
  *a1 = 5009;
}

void static ReferenceComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5009;
}

uint64_t ReferenceComponent.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int LoadingPolicy;
  unsigned int LoadingState;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  Swift::String v16;

  if (REReferenceComponentGetReferenceSourceType())
    goto LABEL_20;
  if (!REReferenceComponentGetEntityName())
    goto LABEL_18;
  v2 = String.init(cString:)();
  v4 = v3;
  if (!REReferenceComponentGetBundlePath())
  {
LABEL_19:
    __break(1u);
LABEL_20:
    _StringGuts.grow(_:)(25);
    v16._object = (void *)0x800000021BE930B0;
    v16._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v16);
    type metadata accessor for REReferenceSourceType(0);
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v5 = String.init(cString:)();
  v7 = v6;
  LoadingPolicy = REReferenceComponentGetLoadingPolicy();
  LoadingState = REReferenceComponentGetLoadingState();
  result = REReferenceComponentGetSubscene();
  if (!result)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v11 = result;
  if (!(id)REEntityGetSwiftObject())
  {
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      v13 = specialized static Entity.entityInfoType(_:)();
      if (v13)
      {
        v12 = (*(uint64_t (**)(void))(v13 + 232))();
        v14 = *(_QWORD *)(v12 + 16);
        swift_retain();
        MEMORY[0x22076D160](v14, 0);
        *(_QWORD *)(v12 + 16) = v11;
        MEMORY[0x22076D160](v11, v12);
        result = swift_release();
        goto LABEL_12;
      }
      result = makeEntity(for:)(v11);
      goto LABEL_7;
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  type metadata accessor for Entity();
  result = swift_dynamicCastClassUnconditional();
LABEL_7:
  v12 = result;
LABEL_12:
  if (LoadingState >= 3)
    v15 = 0;
  else
    v15 = LoadingState;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v15;
  *(_BYTE *)(a1 + 33) = LoadingPolicy == 1;
  *(_QWORD *)(a1 + 40) = v12;
  return result;
}

Swift::String __swiftcall String.sanitizedBundlePath()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  void *v25;
  Swift::String result;
  uint64_t v27;
  void *v28;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for CharacterSet();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - v9;
  static CharacterSet.whitespacesAndNewlines.getter();
  static CharacterSet.illegalCharacters.getter();
  CharacterSet.formUnion(_:)();
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  static CharacterSet.controlCharacters.getter();
  CharacterSet.formUnion(_:)();
  v11(v7, v4);
  v27 = v3;
  v28 = v2;
  lazy protocol witness table accessor for type String and conformance String();
  v27 = StringProtocol.components(separatedBy:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v12 = BidirectionalCollection<>.joined(separator:)();
  v14 = v13;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v16 = objc_msgSend(v15, sel_resourcePath);

  if (v16)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    v27 = v19;
    v28 = v21;
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = 47;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v12;
    v23._object = v14;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v27;
    v25 = v28;
    v11(v10, v4);
    v17 = v24;
    v18 = v25;
  }
  else
  {
    __break(1u);
  }
  result._object = v18;
  result._countAndFlagsBits = v17;
  return result;
}

void static ReferenceComponent.releaseReference(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    ReferenceComponent.init(from:)((uint64_t)&v13);
    swift_release();
    v1 = v13;
    v0 = v14;
    v3 = v15;
    v2 = v16;
    if (BYTE1(v17))
      v4 = 256;
    else
      v4 = 0;
    if (v18)
    {
      swift_retain();
      specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      swift_release_n();
      v13 = v1;
      v14 = v0;
      v15 = v3;
      v16 = v2;
      v17 = v4;
      v18 = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(&v13);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      v12 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      outlined consume of ReferenceComponent?(v1, v0);
    }
  }
  else
  {
    swift_release();
    v5 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    swift_retain_n();
    v6 = static OS_os_log.default.getter();
    v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v13 = v9;
      *(_DWORD *)v8 = 136315138;
      REEntityGetName();
      v10 = String.init(cString:)();
      v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v6, v7, "No ReferenceComponent found for %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
}

void specialized static ReferenceComponent.findBundle(bundlePath:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::Bool v22;
  uint64_t inited;
  void *v24;
  id v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  id v28;
  NSURL *v29;
  void *v30;
  void *v31;
  char v32;
  char *v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  char v44;

  v39 = type metadata accessor for URLResourceValues();
  v5 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v38 - v13;
  v15 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v15 = a1 & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    String.sanitizedBundlePath()();
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    URL.standardizedFileURL.getter();
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v41 = v8;
    v40(v11, v8);
    URL.path.getter();
    v16 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v17 = objc_msgSend(v16, sel_resourcePath);

    if (v17)
    {
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v20 = v19;

      v21._countAndFlagsBits = v18;
      v21._object = v20;
      v22 = String.hasPrefix(_:)(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v22)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
        v24 = (void *)*MEMORY[0x24BDBCCA0];
        *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBCCA0];
        v25 = v24;
        specialized Set.init(_nonEmptyArrayLiteral:)(inited);
        swift_setDeallocating();
        type metadata accessor for NSURLResourceKey(0);
        swift_arrayDestroy();
        URL.resourceValues(forKeys:)();
        v26 = v41;
        if (v2)
        {

          swift_bridgeObjectRelease();
LABEL_8:
          v42 = 0u;
          v43 = 0u;
          v27 = v40;
LABEL_9:
          outlined destroy of Any?((uint64_t)&v42);
LABEL_10:
          v28 = objc_allocWithZone(MEMORY[0x24BDD1488]);
          URL._bridgeToObjectiveC()(v29);
          v31 = v30;
          objc_msgSend(v28, sel_initWithURL_, v30);

          v27(v14, v26);
          return;
        }
        swift_bridgeObjectRelease();
        v34 = URLResourceValues.allValues.getter();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v39);
        if (!v34)
          goto LABEL_8;
        if (*(_QWORD *)(v34 + 16))
        {
          v35 = v25;
          v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v35);
          if ((v37 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(v34 + 56) + 32 * v36, (uint64_t)&v42);
          }
          else
          {
            v42 = 0u;
            v43 = 0u;
          }

        }
        else
        {
          v42 = 0u;
          v43 = 0u;
        }
        v27 = v40;
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v43 + 1))
          goto LABEL_9;
        if (!swift_dynamicCast() || (v44 & 1) == 0)
          goto LABEL_10;
        v32 = 0;
      }
      else
      {
        v32 = 1;
        v27 = v40;
        v26 = v41;
      }
      lazy protocol witness table accessor for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError();
      swift_allocError();
      *v33 = v32;
      swift_willThrow();
      v27(v14, v26);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  }
}

unint64_t lazy protocol witness table accessor for type ReferenceComponent.LoadingPolicy and conformance ReferenceComponent.LoadingPolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReferenceComponent.LoadingPolicy and conformance ReferenceComponent.LoadingPolicy;
  if (!lazy protocol witness table cache variable for type ReferenceComponent.LoadingPolicy and conformance ReferenceComponent.LoadingPolicy)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ReferenceComponent.LoadingPolicy, &type metadata for ReferenceComponent.LoadingPolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceComponent.LoadingPolicy and conformance ReferenceComponent.LoadingPolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReferenceComponent.ReferenceState and conformance ReferenceComponent.ReferenceState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReferenceComponent.ReferenceState and conformance ReferenceComponent.ReferenceState;
  if (!lazy protocol witness table cache variable for type ReferenceComponent.ReferenceState and conformance ReferenceComponent.ReferenceState)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ReferenceComponent.ReferenceState, &type metadata for ReferenceComponent.ReferenceState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceComponent.ReferenceState and conformance ReferenceComponent.ReferenceState);
  }
  return result;
}

uint64_t destroy for ReferenceComponent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ReferenceComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ReferenceComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ReferenceComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ReferenceComponent()
{
  return &type metadata for ReferenceComponent;
}

ValueMetadata *type metadata accessor for ReferenceComponent.LoadingPolicy()
{
  return &type metadata for ReferenceComponent.LoadingPolicy;
}

uint64_t storeEnumTagSinglePayload for ReferenceComponent.ReferenceState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BDB0F44 + 4 * byte_21BE7B795[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BDB0F78 + 4 * byte_21BE7B790[v4]))();
}

uint64_t sub_21BDB0F78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDB0F80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDB0F88);
  return result;
}

uint64_t sub_21BDB0F94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDB0F9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BDB0FA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDB0FA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReferenceComponent.ReferenceState()
{
  return &type metadata for ReferenceComponent.ReferenceState;
}

ValueMetadata *type metadata accessor for ReferenceComponent.ReferenceSource()
{
  return &type metadata for ReferenceComponent.ReferenceSource;
}

unint64_t lazy protocol witness table accessor for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError;
  if (!lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ReferenceComponent.BundlePathError, &unk_24DFD5B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError;
  if (!lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ReferenceComponent.BundlePathError, &unk_24DFD5B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReferenceComponent.LoadingPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BDB1064 + 4 * byte_21BE7B79F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BDB1098 + 4 * byte_21BE7B79A[v4]))();
}

uint64_t sub_21BDB1098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDB10A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDB10A8);
  return result;
}

uint64_t sub_21BDB10B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDB10BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BDB10C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDB10C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ReferenceComponent.BundlePathError()
{
  return &unk_24DFD5B88;
}

float32x4_t orthonormalFrame(forward:up:)@<Q0>(float32x4_t *a1@<X8>, float32x4_t a2@<Q0>, int32x4_t a3@<Q1>, float32x4_t a4@<Q3>, float32x4_t a5@<Q4>)
{
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x4_t result;

  v5 = (float32x2_t)vmulq_f32(a2, a2).u64[0];
  v5.f32[0] = sqrtf(vmuls_lane_f32(a2.f32[2], a2, 2) + vaddv_f32(v5));
  *(float32x2_t *)a5.f32 = vdiv_f32(*(float32x2_t *)a2.f32, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 0));
  a4.f32[0] = a2.f32[2] / v5.f32[0];
  v6 = a5;
  v6.i32[2] = a4.i32[0];
  *(uint64_t *)((char *)a4.i64 + 4) = a5.i64[0];
  v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a3, a3), (int8x16_t)a3, 0xCuLL);
  v7 = vmlaq_f32(vmulq_f32(v9, vnegq_f32(v6)), (float32x4_t)a3, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  v8 = vmulq_f32(v7, v7);
  v9.f32[0] = sqrtf(v8.f32[1] + (float)(v8.f32[2] + v8.f32[0]));
  if (v9.f32[0] >= 0.01)
  {
    v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  }
  else
  {
    v10 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_21BE7B9F0), (float32x4_t)xmmword_21BE41240, a4);
    v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
    v9 = vmulq_f32(v10, v10);
    v9.f32[0] = sqrtf(v9.f32[1] + (float)(v9.f32[2] + v9.f32[0]));
  }
  if (v9.f32[0] < 0.01)
  {
    v12 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_21BE7BA00), (float32x4_t)xmmword_21BE41220, a4);
    v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
    v9 = vmulq_f32(v12, v12);
    v9.f32[0] = sqrtf(v9.f32[1] + (float)(v9.f32[2] + v9.f32[0]));
  }
  *(float32x2_t *)v11.f32 = vdiv_f32(*(float32x2_t *)v11.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.f32, 0));
  v13 = v11;
  v13.f32[2] = v11.f32[2] / v9.f32[0];
  *(float32x2_t *)v11.f32 = vsub_f32(0, *(float32x2_t *)v11.f32);
  v14 = (int32x4_t)vmlaq_f32(vmulq_f32(a4, vnegq_f32(v13)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL));
  v11.f32[2] = 0.0 - (float)(v11.f32[2] / v9.f32[0]);
  result = vmulq_n_f32(v6, v5.f32[0]);
  *a1 = vmulq_n_f32(v11, v5.f32[0]);
  a1[1] = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL), v5.f32[0]);
  a1[2] = result;
  return result;
}

void MeshResource.ShapeExtrusionOptions.ExtrusionMethod.extractSweepCurve()(double a1, double a2, double a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  float32x4_t v9;
  float32x4_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int32x4_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  float32x2_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int32x4_t v27;
  float v28;
  float32x4_t v29;
  _OWORD *v30;
  int64_t v31;
  float32x4_t v32;
  _OWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _OWORD *v36;
  float32x4_t v37;
  int32x4_t v38;
  __int128 v39;
  __int128 v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;

  v6 = *v5;
  if (!*((_BYTE *)v5 + 8))
  {
    orthonormalFrame(forward:up:)(&v52, *(float32x4_t *)&zmmword_21BE41220[32], *(int32x4_t *)&zmmword_21BE41220[16], a4, a5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
    v36 = (_OWORD *)swift_allocObject();
    v37 = v52;
    v38 = v53;
    v37.i32[3] = 0;
    v39 = *(_OWORD *)&zmmword_21BE41220[48];
    v40 = *(_OWORD *)&zmmword_21BE41220[48];
    *((float *)&v40 + 2) = *(float *)&v6 * -0.5;
    v41 = v54;
    v38.i32[3] = 0;
    v41.i32[3] = 0;
    v36[1] = xmmword_21BE50940;
    v36[2] = v37;
    *((float *)&v39 + 2) = *(float *)&v6 * 0.5;
    v36[3] = v38;
    v36[4] = v41;
    v36[5] = v40;
    v36[6] = v37;
    v36[7] = v38;
    v36[8] = v41;
    v36[9] = v39;
    return;
  }
  if (*((_BYTE *)v5 + 8) == 1)
  {
    v7 = *(_QWORD *)(v6 + 16);
    if ((uint64_t)(v7 + 0x4000000000000000) < 0)
      goto LABEL_24;
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2 * v7, 0, MEMORY[0x24BEE4AF8]);
    v11 = v7 - 1;
    if (v7 != 1)
    {
      if (!v7)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        return;
      }
      v12 = *(_QWORD *)(v6 + 16);
      if (v12 < 2 || v7 > v12)
        goto LABEL_26;
      v14 = 0;
      v15 = *(int32x4_t *)&zmmword_21BE41220[16];
      v48 = *(float32x4_t *)&zmmword_21BE41220[32];
      while (v14 < *(_QWORD *)(v6 + 16))
      {
        v16 = (float32x4_t *)(v6 + 16 * v14);
        v18 = v16[2];
        v17 = v16[3];
        v19 = vsubq_f32(v18, v17);
        v20 = COERCE_FLOAT(v16[2].i64[1]);
        v21 = COERCE_FLOAT(v16[3].i64[1]);
        v22 = (float32x2_t)vmulq_f32(v19, v19).u64[0];
        v22.f32[0] = sqrtf((float)((float)(v20 - v21) * (float)(v20 - v21)) + vaddv_f32(v22));
        v9.f32[0] = fabsf(v22.f32[0]);
        v10.i32[0] = 925353388;
        if (v9.f32[0] > 0.00001)
        {
          *(int32x2_t *)v10.f32 = vdup_lane_s32((int32x2_t)v22, 0);
          *(float32x2_t *)v9.f32 = vdiv_f32(vsub_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v18.f32), *(float32x2_t *)v10.f32);
          v9.i64[1] = COERCE_UNSIGNED_INT((float)(v21 - v20) / v22.f32[0]);
          v48 = v9;
        }
        v49 = v16[2];
        v51 = v16[3];
        orthonormalFrame(forward:up:)(&v52, v48, v15, v9, v10);
        v9 = v52;
        v15 = v53;
        v10 = v54;
        v24 = v8[2];
        v23 = v8[3];
        v25 = v23 >> 1;
        v26 = v24 + 1;
        if (v23 >> 1 <= v24)
        {
          v44 = v52;
          v46 = v53;
          v42 = v54;
          v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v8);
          v10 = v42;
          v9 = v44;
          v15 = v46;
          v8 = v34;
          v23 = v34[3];
          v25 = v23 >> 1;
        }
        v9.i32[3] = 0;
        v27 = v15;
        v27.i32[3] = 0;
        v10.i32[3] = 0;
        v28 = 1.0;
        v29 = v49;
        v29.i32[3] = 1.0;
        v8[2] = v26;
        v30 = &v8[8 * v24];
        v30[2] = v9;
        v30[3] = v27;
        v30[4] = v10;
        v30[5] = v29;
        v31 = v24 + 2;
        v32 = v51;
        if (v25 < v31)
        {
          v45 = v9;
          v47 = v15;
          v43 = v10;
          v50 = v27;
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v31, 1, v8);
          v27 = v50;
          v32 = v51;
          v10 = v43;
          v9 = v45;
          v28 = 1.0;
          v15 = v47;
          v8 = v35;
        }
        v32.f32[3] = v28;
        v8[2] = v31;
        v33 = &v8[8 * v26];
        v33[2] = v9;
        v33[3] = v27;
        v33[4] = v10;
        v33[5] = v32;
        if (v11 == ++v14)
          return;
      }
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
}

uint64_t specialized CurveExtruder.init(shape:accumulatedOutlineIndexCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    goto LABEL_29;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != *(_DWORD *)(a2 + 32 + 4 * v2 - 4))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 >> 61)
    goto LABEL_31;
  v44 = a2 + 32;
  v45 = *(_QWORD *)(a2 + 16);
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4 * v3, 0, MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRetain();
  v6 = v44;
  v5 = v45;
  v7 = 0;
  v8 = 0;
  while (2)
  {
    v9 = *(unsigned int *)(v6 + 4 * v8);
    v10 = v9 - v7;
    if (v9 <= v7)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v11 = 0;
    ++v8;
    do
    {
      v12 = v7 + v11;
      if (v7 + v11 >= v9)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v13 = (v11 + 1) % v10;
      v14 = v13 + v7;
      if (__CFADD__(v13, v7))
        goto LABEL_25;
      v16 = *((_QWORD *)v4 + 2);
      v15 = *((_QWORD *)v4 + 3);
      v17 = v15 >> 1;
      v18 = v16 + 1;
      if (v15 >> 1 <= v16)
      {
        v26 = v4;
        v27 = v8;
        v28 = v9;
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v26);
        v9 = v28;
        v8 = v27;
        v6 = v44;
        v5 = v45;
        v4 = v29;
        v15 = *((_QWORD *)v29 + 3);
        v17 = v15 >> 1;
      }
      *((_QWORD *)v4 + 2) = v18;
      *(_DWORD *)&v4[4 * v16 + 32] = v12;
      v19 = v16 + 2;
      if (v17 < (uint64_t)(v16 + 2))
      {
        v30 = v4;
        v41 = v8;
        v31 = v9;
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 2, 1, v30);
        v9 = v31;
        v8 = v41;
        v6 = v44;
        v5 = v45;
        v4 = v32;
      }
      *((_QWORD *)v4 + 2) = v19;
      *(_DWORD *)&v4[4 * v18 + 32] = v14;
      if (HIDWORD(v3))
        goto LABEL_32;
      v20 = __CFADD__(v14, (_DWORD)v3);
      v21 = v14 + v3;
      if (v20)
        goto LABEL_26;
      v22 = *((_QWORD *)v4 + 3);
      v23 = v16 + 3;
      if ((uint64_t)(v16 + 3) > (uint64_t)(v22 >> 1))
      {
        v33 = v4;
        v42 = v8;
        v34 = v9;
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v16 + 3, 1, v33);
        v9 = v34;
        v8 = v42;
        v6 = v44;
        v5 = v45;
        v4 = v35;
      }
      *((_QWORD *)v4 + 2) = v23;
      *(_DWORD *)&v4[4 * v19 + 32] = v21;
      v24 = v12 + v3;
      if (__CFADD__(v12, (_DWORD)v3))
        goto LABEL_27;
      v25 = *((_QWORD *)v4 + 3);
      if ((uint64_t)(v16 + 4) > (uint64_t)(v25 >> 1))
      {
        v36 = v4;
        v37 = v8;
        v38 = v9;
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v16 + 4, 1, v36);
        v9 = v38;
        v8 = v37;
        v6 = v44;
        v5 = v45;
        v4 = v39;
      }
      *((_QWORD *)v4 + 2) = v16 + 4;
      *(_DWORD *)&v4[4 * v23 + 32] = v24;
      ++v11;
    }
    while (v10 != v11);
    v7 = v9;
    if (v8 != v5)
      continue;
    return a1;
  }
}

uint64_t specialized CurveExtruder.populate(indexBuffer:curveLength:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;

  v5 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v6 = *(_QWORD *)(a5 + 16);
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v5 * v6 == a2)
  {
    if (v5 < 0)
      goto LABEL_28;
    if (a3 == 1)
      return result;
    v7 = 0;
    while (v7 != v5)
    {
      if (v6)
      {
        v8 = v7 * v6;
        if ((unsigned __int128)(v7 * (__int128)v6) >> 64 != (v7 * v6) >> 63)
          goto LABEL_23;
        v9 = *(_QWORD *)(a4 + 16);
        v10 = v7 * v9;
        if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63)
          goto LABEL_24;
        v11 = 0;
        while (1)
        {
          v12 = v8 + v11;
          if (__OFADD__(v8, v11))
            break;
          if ((v10 & 0x8000000000000000) != 0 || HIDWORD(v10))
            goto LABEL_29;
          v13 = *(_DWORD *)(a5 + 32 + 4 * v11);
          v14 = __CFADD__(v13, (_DWORD)v10);
          v15 = v13 + v10;
          if (v14)
            goto LABEL_21;
          ++v11;
          *(_DWORD *)(result + 4 * v12) = v15;
          if (v6 == v11)
            goto LABEL_7;
        }
        __break(1u);
LABEL_21:
        __break(1u);
        break;
      }
LABEL_7:
      if (++v7 == v5)
        return result;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CurveExtruder.populate(positionBuffer:tangentBuffer:bitangentBuffer:sweepCurve:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double *v19;
  uint64_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  __int128 v24;
  float v25;
  float v26;
  float32x4_t v27;
  uint64_t v28;
  BOOL v29;

  if (a2 != a4 || a2 != a6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = *(_QWORD *)(a7 + 16);
  v9 = *(_QWORD *)(a8 + 16);
  if ((unsigned __int128)(v8 * (__int128)v9) >> 64 != (v8 * v9) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 * v9 > a2)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (v8)
  {
    v10 = 0;
    v11 = 0;
    while (!v9)
    {
LABEL_11:
      v29 = __OFADD__(v10, v9);
      v10 += v9;
      if (v29)
        goto LABEL_15;
      if (++v11 == v8)
        return result;
    }
    v12 = 0;
    v13 = a7 + 32 + (v11 << 6);
    v15 = *(float32x4_t *)(v13 + 32);
    v14 = *(float32x4_t *)(v13 + 48);
    v17 = *(float32x4_t *)v13;
    v16 = *(float32x4_t *)(v13 + 16);
    v18 = vmlaq_f32(vaddq_f32(v15, vmlaq_f32(vmulq_f32(*(float32x4_t *)v13, (float32x4_t)0), (float32x4_t)0, v16)), (float32x4_t)0, v14);
    v18.i32[3] = 0;
    v19 = (double *)(a8 + 48);
    while (1)
    {
      v20 = v10 + v12;
      if (__OFADD__(v10, v12))
        break;
      ++v12;
      v21 = *(v19 - 2);
      v22 = *(v19 - 1);
      v23 = vaddq_f32(v14, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v17, v21), v16, v22), (float32x4_t)0, v15));
      v24 = *(_OWORD *)v19;
      v19 += 4;
      v25 = *(double *)&v24;
      v26 = *((double *)&v24 + 1);
      v23.i32[3] = 0;
      v27 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v17, v25), v16, v26), (float32x4_t)0, v15), (float32x4_t)0, v14);
      v28 = 16 * v20;
      *(float32x4_t *)(result + v28) = v23;
      v27.i32[3] = 0;
      *(float32x4_t *)(a3 + v28) = v27;
      *(float32x4_t *)(a5 + v28) = v18;
      if (v9 == v12)
        goto LABEL_11;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurveExtruder()
{
  return &type metadata for CurveExtruder;
}

ValueMetadata *type metadata accessor for CurveExtruder.ShapePoint()
{
  return &type metadata for CurveExtruder.ShapePoint;
}

uint64_t extrude(text:textOptions:shapeOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  uint64_t v5;
  unsigned __int8 v6;
  const __CFArray *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGFloat v12;
  CTFontRef UIFontForLanguage;
  CTFontRef v14;
  const void *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  void *Value;
  uint64_t v19;
  unint64_t v20;
  const __CTLine *v21;
  unint64_t v22;
  double *v23;
  double v24;
  double v25;
  const __CFArray *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  float v32;
  const __CTRun *v33;
  BOOL v34;
  unint64_t v35;
  const __CFDictionary *v36;
  const __CTFont *v37;
  void *v38;
  void *v39;
  CFIndex GlyphCount;
  CFIndex v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGGlyph v45;
  unint64_t v46;
  double *v47;
  const __CTFont *v48;
  CGFloat v49;
  double v50;
  double v51;
  __CFString *v52;
  uint64_t v53;
  CGFloat Size;
  CFStringRef v55;
  __CFString *v56;
  CGFloat b;
  CGFloat v58;
  CTFontSymbolicTraits SymbolicTraits;
  _QWORD *v60;
  float v61;
  float v62;
  uint64_t v63;
  CGFloat v64;
  char v65;
  char isUniquelyReferenced_nonNull_native;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  const CGPath *v75;
  const CGPath *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  char v81;
  CGFloat v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  CGFloat v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t result;
  uint64_t v110;
  const __CTFrame *frame;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  const void *v115;
  const __CTFont *v116;
  const __CTFont *v117;
  uint64_t v118;
  CTLineRef line;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  const __CFDictionary *v124;
  uint64_t v125;
  uint64_t v126;
  const __CTRun *run;
  uint64_t v128;
  uint64_t v129;
  CTFontRef font;
  uint64_t v131;
  int v132;
  CTFontSymbolicTraits v133;
  __int16 v134;
  CGFloat v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  CGFloat v139;
  __int128 v140;
  uint64_t v141;
  CGAffineTransform v142;
  CGAffineTransform matrix;
  CGFloat a;
  unsigned __int8 b_low;
  float v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _BYTE v150[40];
  uint64_t v151;
  CFRange v152;
  CFRange v153;
  CFRange v154;

  v151 = *MEMORY[0x24BDAC8D0];
  outlined init with take of CGRect?(a2, (uint64_t)v150);
  outlined init with copy of MeshResource.ShapeExtrusionOptions(a3, (uint64_t)&a);
  LODWORD(v4) = 1013157433;
  v146 = v146 * 0.013889;
  v5 = *(_QWORD *)&a;
  v6 = b_low;
  v142.a = a;
  LOBYTE(v142.b) = b_low;
  MeshResource.ShapeExtrusionOptions.ExtrusionMethod.scaled(by:)((uint64_t)&matrix, v4);
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v5, v6);
  a = matrix.a;
  b_low = LOBYTE(matrix.b);
  frame = AttributedString.createTextFrame(containerRect:)((uint64_t)v150);
  v7 = CTFrameGetLines(frame);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = specialized _arrayForceCast<A, B>(_:)(v8);
  swift_bridgeObjectRelease();
  v113 = v9 >> 62;
  v114 = v9;
  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
LABEL_114:
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_3:
  v11 = specialized Array.init(repeating:count:)(v10, 0.0, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16), 0, (_QWORD *)v11);
  v152.location = 0;
  v152.length = v10;
  v112 = v11 + 32;
  CTFrameGetLineOrigins(frame, v152, (CGPoint *)(v11 + 32));
  v12 = COERCE_DOUBLE(specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]));
  UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, 12.0, 0);
  if (!UIFontForLanguage)
    __break(1u);
  v14 = UIFontForLanguage;
  v15 = (const void *)*MEMORY[0x24BDC4C28];
  v16 = CTFrameGetFrameAttributes(frame);
  if (v16)
  {
    v17 = v16;
    Value = (void *)CFDictionaryGetValue(v16, v15);

    if (Value)
    {

      v14 = Value;
    }
  }
  swift_bridgeObjectRetain();
  v120 = 0;
  v118 = v11;
  v115 = v15;
  v116 = v14;
  if (!v113)
  {
LABEL_10:
    v19 = *(_QWORD *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_12;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_12:
    if (v120 == v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_102;
    }
    if ((v114 & 0xC000000000000001) != 0)
    {
      v20 = v120;
      v21 = (const __CTLine *)MEMORY[0x220769770](v120, v114);
    }
    else
    {
      v20 = v120;
      if (v120 >= *(_QWORD *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_112;
      v21 = (const __CTLine *)*(id *)(v114 + 32 + 8 * v120);
    }
    line = v21;
    v22 = *(_QWORD *)(v11 + 16);
    if (v20 == v22)
      break;
    if (v20 >= v22)
      goto LABEL_113;
    v23 = (double *)(v112 + 16 * v20);
    v24 = *v23;
    v25 = v23[1];
    v26 = CTLineGetGlyphRuns(v21);
    v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v27 >> 62)
    {
      type metadata accessor for CTRunRef(0);
      swift_bridgeObjectRetain();
      v28 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for CTRunRef(0);
      if (swift_dynamicCastMetatype())
      {
        swift_bridgeObjectRelease();
        v28 = v27;
      }
      else
      {
        v107 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v107)
        {
          v108 = 0;
          while (1)
          {
            if (v108 >= v107)
              goto LABEL_110;
            swift_unknownObjectRetain();
            if (!swift_dynamicCastUnknownClass())
              break;
            ++v108;
            swift_unknownObjectRelease();
            v107 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v108 == v107)
              goto LABEL_90;
          }
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v28 = v27 & 0xFFFFFFFFFFFFFF8 | 1;
        }
        else
        {
LABEL_90:
          v28 = v27;
          swift_bridgeObjectRelease();
        }
      }
    }
    v122 = v28;
    if (!(v28 >> 62))
    {
      v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v29)
        goto LABEL_23;
      goto LABEL_96;
    }
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v29)
    {
LABEL_23:
      v30 = 0;
      v121 = v29;
      v31 = v24;
      v32 = v25;
      while (1)
      {
        if ((v122 & 0xC000000000000001) != 0)
        {
          v33 = (const __CTRun *)MEMORY[0x220769770](v30);
        }
        else
        {
          if (v30 >= *(_QWORD *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_111;
          v33 = (const __CTRun *)*(id *)(v122 + 32 + 8 * v30);
        }
        run = v33;
        v34 = __OFADD__(v30, 1);
        v35 = v30 + 1;
        if (v34)
          break;
        v123 = v35;
        v36 = CTRunGetAttributes(v33);
        v37 = v14;
        v38 = (void *)CFDictionaryGetValue(v36, v15);
        font = v37;
        if (v38)
        {
          v39 = v38;

          font = v39;
        }
        GlyphCount = CTRunGetGlyphCount(run);
        if (GlyphCount < 0)
        {
LABEL_117:
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        v41 = GlyphCount;
        v124 = v36;
        if (GlyphCount)
        {
          v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v42 + 16) = v41;
          bzero((void *)(v42 + 32), 2 * v41);
          type metadata accessor for CGPoint(0);
          v43 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v43 + 16) = v41;
          v137 = v43;
          bzero((void *)(v43 + 32), 16 * v41);
        }
        else
        {
          v42 = MEMORY[0x24BEE4AF8];
          v137 = MEMORY[0x24BEE4AF8];
        }
        v153.location = 0;
        v153.length = v41;
        CTRunGetGlyphs(run, v153, (CGGlyph *)(v42 + 32));
        v154.location = 0;
        v154.length = v41;
        CTRunGetPositions(run, v154, (CGPoint *)(v137 + 32));
        v44 = *(_QWORD *)(v42 + 16);
        if (v44)
        {
          v129 = *(_QWORD *)(v137 + 16);
          if (v129)
          {
            v117 = v37;
            v45 = *(_WORD *)(v42 + 32);
            swift_bridgeObjectRetain();
            v46 = 0;
            v47 = (double *)(swift_bridgeObjectRetain() + 40);
            v128 = v42;
            v48 = font;
            while (1)
            {
              if (v46 >= *(_QWORD *)(v137 + 16))
              {
                __break(1u);
LABEL_104:
                __break(1u);
LABEL_105:
                __break(1u);
LABEL_106:
                __break(1u);
LABEL_107:
                __break(1u);
LABEL_108:
                __break(1u);
                goto LABEL_109;
              }
              v49 = v12;
              v50 = *(v47 - 1);
              v51 = *v47;
              v52 = (__CFString *)CTFontCopyFullName(v48);
              *(_QWORD *)&v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              *((_QWORD *)&v140 + 1) = v53;

              Size = CTFontGetSize(v48);
              v55 = CTFontCopyNameForGlyph(v48, v45);
              if (v55)
              {
                v56 = (__CFString *)v55;
                matrix.a = 0.0;
                matrix.b = 0.0;
                static String._conditionallyBridgeFromObjectiveC(_:result:)();

                v58 = matrix.a;
                b = matrix.b;
              }
              else
              {
                v58 = 0.0;
                b = 0.0;
              }
              SymbolicTraits = CTFontGetSymbolicTraits(v48);
              v60 = (_QWORD *)*((_QWORD *)&v140 + 1);
              v147 = v140;
              *(CGFloat *)&v148 = Size;
              v135 = v58;
              *((CGFloat *)&v148 + 1) = v58;
              *(CGFloat *)&v149 = b;
              WORD4(v149) = v45;
              v133 = SymbolicTraits;
              HIDWORD(v149) = SymbolicTraits;
              v61 = v50;
              v62 = v51;
              *(float *)&v63 = (float)(v31 + v61) * 0.013889;
              *((float *)&v63 + 1) = (float)(v32 + v62) * 0.013889;
              v138 = v63;
              v64 = v49;
              v139 = b;
              if (!*(_QWORD *)(*(_QWORD *)&v49 + 16))
                goto LABEL_52;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v147);
              if ((v65 & 1) == 0)
                break;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              matrix.a = v49;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v68 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v147);
              v69 = *(_QWORD *)(*(_QWORD *)&v49 + 16);
              v70 = (v67 & 1) == 0;
              v71 = v69 + v70;
              if (__OFADD__(v69, v70))
                goto LABEL_107;
              v72 = v67;
              if (*(_QWORD *)(*(_QWORD *)&v49 + 24) >= v71)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  if ((v67 & 1) == 0)
                    goto LABEL_108;
                }
                else
                {
                  specialized _NativeDictionary.copy()();
                  if ((v72 & 1) == 0)
                    goto LABEL_108;
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v71, isUniquelyReferenced_nonNull_native);
                v73 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v147);
                if ((v72 & 1) != (v74 & 1))
                  goto LABEL_116;
                v68 = v73;
                if ((v72 & 1) == 0)
                  goto LABEL_108;
              }
              v92 = *(_QWORD *)(*(_QWORD *)&matrix.a + 56) + (v68 << 6);
              v93 = *(_QWORD *)(v92 + 8);
              v141 = *(_QWORD *)v92;
              v94 = *(_QWORD *)(v92 + 16);
              v95 = *(_QWORD *)(v92 + 24);
              v136 = *(_QWORD *)(v92 + 32);
              v134 = *(_WORD *)(v92 + 40);
              v132 = *(_DWORD *)(v92 + 44);
              v96 = *(_QWORD **)(v92 + 56);
              v125 = *(_QWORD *)(v92 + 48);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96[2] + 1, 1, v96);
              v98 = v96[2];
              v97 = v96[3];
              if (v98 >= v97 >> 1)
                v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v97 > 1), v98 + 1, 1, v96);
              v96[2] = v98 + 1;
              v96[v98 + 4] = v138;
              v99 = *(_QWORD *)&matrix.a;
              if (v93)
              {
                v100 = *(_QWORD *)(*(_QWORD *)&matrix.a + 56) + (v68 << 6);
                *(_QWORD *)v100 = v141;
                *(_QWORD *)(v100 + 8) = v93;
                *(_QWORD *)(v100 + 16) = v94;
                *(_QWORD *)(v100 + 24) = v95;
                *(_QWORD *)(v100 + 32) = v136;
                *(_WORD *)(v100 + 40) = v134;
                *(_DWORD *)(v100 + 44) = v132;
                *(_QWORD *)(v100 + 48) = v125;
                *(_QWORD *)(v100 + 56) = v96;
              }
              else
              {
                swift_arrayDestroy();
                specialized _NativeDictionary._delete(at:)(v68, v99);
              }
              v101 = v128;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v12 = matrix.a;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_78:
              if (v44 - 1 == v46)
                goto LABEL_84;
              if (v46 + 1 >= *(_QWORD *)(v101 + 16))
                goto LABEL_104;
              v45 = *(_WORD *)(v101 + 2 * v46++ + 34);
              v47 += 2;
              if (v129 == v46)
              {
LABEL_84:

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v11 = v118;
                v15 = v115;
                v14 = v116;
                goto LABEL_25;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_52:
            CGAffineTransformMakeScale(&v142, 0.013888889, 0.013888889);
            matrix = v142;
            v75 = CTFontCreatePathForGlyph(v48, v45, &matrix);
            if (v75)
            {
              v76 = v75;
              v77 = extrude(path:options:)(v75, (uint64_t)&a);
              if (v126)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                outlined destroy of MeshResource.ShapeExtrusionOptions((uint64_t)&a);
                return (uint64_t)v60;
              }
              v131 = v77;

            }
            else
            {
              v131 = MEMORY[0x24BEE4AF8];
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
            v78 = swift_allocObject();
            *(_OWORD *)(v78 + 16) = xmmword_21BE411F0;
            *(_QWORD *)(v78 + 32) = v138;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v79 = swift_isUniquelyReferenced_nonNull_native();
            matrix.a = v64;
            v80 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v147);
            v82 = v64;
            v83 = v80;
            v84 = *(_QWORD *)(*(_QWORD *)&v82 + 16);
            v85 = (v81 & 1) == 0;
            v86 = v84 + v85;
            if (__OFADD__(v84, v85))
              goto LABEL_105;
            v87 = v81;
            if (*(_QWORD *)(*(_QWORD *)&v82 + 24) >= v86)
            {
              if ((v79 & 1) != 0)
              {
                v90 = matrix.a;
                if ((v81 & 1) == 0)
                  goto LABEL_75;
              }
              else
              {
                specialized _NativeDictionary.copy()();
                v90 = matrix.a;
                if ((v87 & 1) == 0)
                  goto LABEL_75;
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v86, v79);
              v88 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v147);
              if ((v87 & 1) != (v89 & 1))
              {
LABEL_116:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                goto LABEL_117;
              }
              v83 = v88;
              v90 = matrix.a;
              if ((v87 & 1) == 0)
              {
LABEL_75:
                *(_QWORD *)(*(_QWORD *)&v90 + 8 * (v83 >> 6) + 64) |= 1 << v83;
                v102 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)&v90 + 48) + 48 * v83);
                v103 = v148;
                *v102 = v147;
                v102[1] = v103;
                v102[2] = v149;
                v104 = *(_QWORD *)(*(_QWORD *)&v90 + 56) + (v83 << 6);
                *(_OWORD *)v104 = v140;
                *(CGFloat *)(v104 + 16) = Size;
                *(CGFloat *)(v104 + 24) = v135;
                *(CGFloat *)(v104 + 32) = v139;
                *(_WORD *)(v104 + 40) = v45;
                *(_DWORD *)(v104 + 44) = v133;
                *(_QWORD *)(v104 + 48) = v131;
                *(_QWORD *)(v104 + 56) = v78;
                v105 = *(_QWORD *)(*(_QWORD *)&v90 + 16);
                v34 = __OFADD__(v105, 1);
                v106 = v105 + 1;
                if (v34)
                  goto LABEL_106;
                v12 = v90;
                *(_QWORD *)(*(_QWORD *)&v90 + 16) = v106;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                goto LABEL_77;
              }
            }
            v91 = *(_QWORD *)(*(_QWORD *)&v90 + 56) + (v83 << 6);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(_OWORD *)v91 = v140;
            *(CGFloat *)(v91 + 16) = Size;
            *(CGFloat *)(v91 + 24) = v135;
            *(CGFloat *)(v91 + 32) = v139;
            *(_WORD *)(v91 + 40) = v45;
            *(_DWORD *)(v91 + 44) = v133;
            *(_QWORD *)(v91 + 48) = v131;
            *(_QWORD *)(v91 + 56) = v78;
            v12 = v90;
LABEL_77:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v101 = v128;
            v48 = font;
            goto LABEL_78;
          }
        }

LABEL_25:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v30 = v123;
        if (v123 == v121)
          goto LABEL_96;
      }
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
LABEL_96:
    ++v120;

    swift_bridgeObjectRelease();
    if (!v113)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_102:
  swift_bridgeObjectRelease();
  v110 = swift_bridgeObjectRetain();
  v60 = specialized _copyCollectionToContiguousArray<A>(_:)(v110);

  swift_bridgeObjectRelease_n();
  outlined destroy of MeshResource.ShapeExtrusionOptions((uint64_t)&a);
  return (uint64_t)v60;
}

CTFrameRef AttributedString.createTextFrame(containerRect:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CGFloat v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t, __n128);
  double v17;
  uint64_t inited;
  void *v19;
  void *v20;
  id v21;
  id v22;
  const CGPath *v23;
  void *v24;
  id v25;
  const __CFAttributedString *v26;
  const __CTFramesetter *v27;
  const __CFDictionary *isa;
  CTFrameRef Frame;
  _BYTE v31[48];
  _QWORD v32[5];
  _BYTE v33[40];
  CFRange v34;
  CGRect v35;

  v2 = v1;
  outlined init with take of CGRect?(a1, (uint64_t)v32);
  v4 = *(double *)v32;
  v5 = *(double *)&v32[1];
  v6 = *(double *)&v32[2];
  v7 = *(double *)&v32[3];
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = &v31[-v14];
  v16 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v9 + 16);
  v16(&v31[-v14], v2, v8, v13);
  outlined init with take of CGRect?(a1, (uint64_t)v33);
  if (v33[32] == 1)
  {
    v6 = AttributedString.computeSuggestedFrameSize(lineWidth:)(1.79769313e308);
    v7 = v17;
    v4 = 0.0;
    v5 = 0.0;
  }
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v15, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef?, CFBooleanRef?)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v19 = (void *)*MEMORY[0x24BDC4EF0];
  v20 = (void *)*MEMORY[0x24BDBD268];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4EF0];
  *(_QWORD *)(inited + 40) = v20;
  v21 = v20;
  v22 = v19;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v35.origin.x = v4;
  v35.origin.y = v5;
  v35.size.width = v6;
  v35.size.height = v7;
  v23 = CGPathCreateWithRect(v35, 0);
  type metadata accessor for NSAttributedString();
  ((void (*)(_BYTE *, uint64_t, uint64_t))v16)(v11, v2, v8);
  v24 = (void *)NSAttributedString.init(_:)();
  v25 = objc_msgSend(v24, sel_length);

  ((void (*)(_BYTE *, uint64_t, uint64_t))v16)(v11, v2, v8);
  v26 = (const __CFAttributedString *)NSAttributedString.init(_:)();
  v27 = CTFramesetterCreateWithAttributedString(v26);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFStringRef?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFBooleanRef?);
  lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v34.location = 0;
  v34.length = (CFIndex)v25;
  Frame = CTFramesetterCreateFrame(v27, v34, v23, isa);

  return Frame;
}

double AttributedString.computeSuggestedFrameSize(lineWidth:)(CGFloat a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  const __CFAttributedString *v7;
  const __CTFramesetter *v8;
  uint64_t inited;
  void *v10;
  void *v11;
  id v12;
  id v13;
  const __CFDictionary *isa;
  double v15;
  _BYTE v17[48];
  CFRange v18;
  CGSize v19;

  v3 = type metadata accessor for AttributedString();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NSAttributedString();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  v7 = (const __CFAttributedString *)NSAttributedString.init(_:)();
  v8 = CTFramesetterCreateWithAttributedString(v7);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef?, CFBooleanRef?)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v10 = (void *)*MEMORY[0x24BDC4EF0];
  v11 = (void *)*MEMORY[0x24BDBD268];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4EF0];
  *(_QWORD *)(inited + 40) = v11;
  v12 = v11;
  v13 = v10;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFStringRef?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFBooleanRef?);
  lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19.height = 1.79769313e308;
  v18.location = 0;
  v18.length = 0;
  v19.width = a1;
  *(_QWORD *)&v15 = *(_OWORD *)&CTFramesetterSuggestFrameSizeWithConstraints(v8, v18, isa, v19, 0);

  return v15;
}

Swift::Int ExtrudedGlyphDescriptor.Info.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt32 v2;
  Swift::UInt64 v3;
  Swift::UInt16 v4;

  Hasher.init(_seed:)();
  v1 = *(_QWORD *)(v0 + 16);
  String.hash(into:)();
  v2 = *(_DWORD *)(v0 + 44);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  v4 = *(_WORD *)(v0 + 40);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExtrudedGlyphDescriptor.Info()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt32 v2;
  Swift::UInt16 v3;
  Swift::UInt64 v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_DWORD *)(v0 + 44);
  v3 = *(_WORD *)(v0 + 40);
  String.hash(into:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExtrudedGlyphDescriptor.Info()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt32 v2;
  Swift::UInt16 v3;
  Swift::UInt64 v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_DWORD *)(v0 + 44);
  v3 = *(_WORD *)(v0 + 40);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExtrudedGlyphDescriptor.Info(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static ExtrudedGlyphDescriptor.Info.== infix(_:_:)((uint64_t)v7, (uint64_t)v8);
}

void MeshResource.ShapeExtrusionOptions.ExtrusionMethod.scaled(by:)(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  float32x4_t *v4;
  int v5;
  int64_t v6;
  uint64_t v7;
  float v8;
  float32x4_t *v9;
  unint64_t v10;
  float32x4_t v11;
  unint64_t v12;
  __int128 v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unint64_t v32;
  unint64_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float32x4_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = *(float32x4_t **)v2;
  v5 = *(unsigned __int8 *)(v2 + 8);
  if (*(_BYTE *)(v2 + 8))
  {
    if (v5 == 1)
    {
      v6 = v4[1].i64[0];
      v7 = MEMORY[0x24BEE4AF8];
      if (v6)
      {
        v46 = MEMORY[0x24BEE4AF8];
        v43 = *(float *)&a2;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
        v8 = v43;
        v7 = v46;
        v9 = v4 + 2;
        v10 = *(_QWORD *)(v46 + 16);
        do
        {
          v11 = *v9;
          v47 = v7;
          v12 = *(_QWORD *)(v7 + 24);
          if (v10 >= v12 >> 1)
          {
            v41 = *v9;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v10 + 1, 1);
            v11 = v41;
            v8 = v43;
            v7 = v47;
          }
          *(float32x2_t *)&v13 = vmul_n_f32(*(float32x2_t *)v11.f32, v8);
          *((_QWORD *)&v13 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v8, v11, 2));
          *(_QWORD *)(v7 + 16) = v10 + 1;
          *(_OWORD *)(v7 + 16 * v10 + 32) = v13;
          ++v9;
          ++v10;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      LODWORD(v14) = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u32[0];
      if (one-time initialization token for identity != -1)
      {
        v45 = v14;
        swift_once();
        v14 = v45;
      }
      *(double *)v15.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(0.0, *(float32x4_t *)&zmmword_21BE41220[48], v14);
      v19 = v4[1].i64[0];
      v7 = MEMORY[0x24BEE4AF8];
      if (v19)
      {
        v48 = MEMORY[0x24BEE4AF8];
        v44 = v15;
        v40 = v17;
        v42 = v16;
        v39 = v18;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
        v21 = v39;
        v20 = v40;
        v22 = v42;
        v23 = v44;
        v24 = 0;
        v7 = v48;
        v25 = *(_QWORD *)(v48 + 16);
        v26 = v25 << 6;
        v27 = v4 + 3;
        do
        {
          v28 = v27[v24 - 1];
          v29 = v27[v24];
          v30 = v27[v24 + 1];
          v31 = v27[v24 + 2];
          v49 = v7;
          v32 = *(_QWORD *)(v7 + 24);
          v33 = v25 + 1;
          if (v25 >= v32 >> 1)
          {
            v37 = v27[v24 + 1];
            v38 = v27[v24 + 2];
            v35 = v27[v24 - 1];
            v36 = v27[v24];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v25 + 1, 1);
            v28 = v35;
            v29 = v36;
            v30 = v37;
            v31 = v38;
            v21 = v39;
            v20 = v40;
            v22 = v42;
            v23 = v44;
            v7 = v49;
          }
          *(_QWORD *)(v7 + 16) = v33;
          v34 = (float32x4_t *)(v7 + v26 + v24 * 16);
          v34[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v28.f32[0]), v22, *(float32x2_t *)v28.f32, 1), v20, v28, 2), v21, v28, 3);
          v34[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v29.f32[0]), v22, *(float32x2_t *)v29.f32, 1), v20, v29, 2), v21, v29, 3);
          v34[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v30.f32[0]), v22, *(float32x2_t *)v30.f32, 1), v20, v30, 2), v21, v30, 3);
          v34[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v31.f32[0]), v22, *(float32x2_t *)v31.f32, 1), v20, v31, 2), v21, v31, 3);
          v24 += 4;
          v25 = v33;
          --v19;
        }
        while (v19);
      }
    }
  }
  else
  {
    v7 = COERCE_UNSIGNED_INT(*(float *)&v4 * *(float *)&a2);
  }
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = v5;
}

BOOL specialized static ExtrudedGlyphDescriptor.Info.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v5 & 1) == 0)
      return result;
  }
  if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
    return 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  if (!v7)
  {
    if (!v8)
      goto LABEL_14;
    return 0;
  }
  if (!v8)
    return 0;
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && v7 == v8
    || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
LABEL_14:
    if (*(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40))
      return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
    return 0;
  }
  return result;
}

uint64_t specialized static ExtrudedGlyphDescriptor.compile(glyphs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  float32x2_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  _OWORD *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t result;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = MEMORY[0x24BEE4AF8];
  v44 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    goto LABEL_32;
  v3 = a1 + 32;
  swift_bridgeObjectRetain();
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v34 = v3;
  v35 = v2;
  while (1)
  {
    v7 = v3 + (v4 << 6);
    v43 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16);
    if (v43)
      break;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_4:
    ++v4;
    v6 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4 == v2)
    {
      swift_bridgeObjectRelease();
      v1 = v44;
      goto LABEL_34;
    }
  }
  v42 = *(_QWORD *)(v7 + 56);
  v8 = *(_QWORD *)(v44 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 16);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 < (uint64_t)v8)
    goto LABEL_38;
  v36 = v4;
  v11 = one-time initialization token for identity;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v42;
  swift_bridgeObjectRetain_n();
  if (v11 != -1)
    swift_once();
  *(double *)&v13 = simd_matrix4x4((float32x4_t)_PromotedConst_5);
  v16 = 0;
  v38 = v17;
  v37 = *((float *)&v17 + 2) + 0.0;
  if (v8 <= 0xFFFFFFFF)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = v8;
  v40 = v14;
  v41 = v13;
  v39 = v15;
  while (1)
  {
    if (v16 >= *(_QWORD *)(v12 + 16))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v8 != v10)
      break;
LABEL_15:
    if (++v16 == v43)
    {
      swift_bridgeObjectRelease();
      v3 = v34;
      v2 = v35;
      v4 = v36;
      goto LABEL_4;
    }
  }
  if (v8 >= v10)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (HIDWORD(v8))
    goto LABEL_39;
  v19 = *(float32x2_t *)(v42 + 32 + 8 * v16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  *(float32x2_t *)&v20 = vadd_f32(*(float32x2_t *)&v38, v19);
  *((_QWORD *)&v20 + 1) = __PAIR64__(HIDWORD(v38), LODWORD(v37));
  v21 = v5[2];
  v22 = 80 * v21 + 48;
  v23 = v8;
  v25 = v40;
  v24 = v41;
  v26 = v39;
  while (1)
  {
    v27 = v5[3];
    v1 = v21 + 1;
    if (v21 >= v27 >> 1)
    {
      v33 = v20;
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v21 + 1, 1, v5);
      v20 = v33;
      v26 = v39;
      v25 = v40;
      v24 = v41;
      v5 = v30;
    }
    v5[2] = v1;
    v28 = (_OWORD *)((char *)v5 + v22);
    *((_DWORD *)v28 - 4) = v23;
    *v28 = v24;
    v28[1] = v25;
    v28[2] = v26;
    v28[3] = v20;
    if (v23 + 1 == v10)
    {
      v12 = v42;
      goto LABEL_15;
    }
    if ((uint64_t)(v23 + 1) >= v10)
      break;
    v22 += 80;
    ++v21;
    if (v23++ == v18)
      goto LABEL_39;
  }
  __break(1u);
LABEL_32:
  v5 = (_QWORD *)v1;
LABEL_34:
  v31 = specialized static ExtrudedShapeDescriptor.compile(shapes:instances:)(v1, (uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t outlined init with copy of MeshResource.ShapeExtrusionOptions(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MeshResource.ShapeExtrusionOptions(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CFStringRef?);
    v2 = lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE4AB0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CFStringRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t destroy for ExtrudedGlyphDescriptor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtrudedGlyphDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtrudedGlyphDescriptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExtrudedGlyphDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ExtrudedGlyphDescriptor()
{
  return &type metadata for ExtrudedGlyphDescriptor;
}

uint64_t initializeWithCopy for ExtrudedGlyphDescriptor.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtrudedGlyphDescriptor.Info(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

uint64_t assignWithTake for ExtrudedGlyphDescriptor.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

ValueMetadata *type metadata accessor for ExtrudedGlyphDescriptor.Info()
{
  return &type metadata for ExtrudedGlyphDescriptor.Info;
}

unint64_t lazy protocol witness table accessor for type ExtrudedGlyphDescriptor.Info and conformance ExtrudedGlyphDescriptor.Info()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExtrudedGlyphDescriptor.Info and conformance ExtrudedGlyphDescriptor.Info;
  if (!lazy protocol witness table cache variable for type ExtrudedGlyphDescriptor.Info and conformance ExtrudedGlyphDescriptor.Info)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ExtrudedGlyphDescriptor.Info, &type metadata for ExtrudedGlyphDescriptor.Info);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtrudedGlyphDescriptor.Info and conformance ExtrudedGlyphDescriptor.Info);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySays5SIMD2VySdGGAKG_17RealityFoundation13CurveExtruderV10ShapePointVs5NeverOTg504_s17g90Foundation15TesselatedShape33_958D9063BE5145611DD1DCE0DF8621CFLLV16extractExtrusion10sweepi51AA14MeshDescriptorVSgSaySo13simd_float4x4aG_tFAA0N8j4V0D5l3Vs5F16VySdG_ASt_tXEfU_Tf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v39 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v34 = v5;
  v38 = a1;
  v36 = v4;
  if (v6)
  {
    v7 = (__int128 *)(a1 + 32);
    v8 = (__int128 *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v39 + 16);
      v14 = *(_QWORD *)(v39 + 24);
      if (v15 >= v14 >> 1)
      {
        v32 = v11;
        v30 = *v8;
        v31 = *v7;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v13 = v30;
        v12 = v31;
        v11 = v32;
      }
      *(_QWORD *)(v39 + 16) = v15 + 1;
      v16 = v39 + 32 * v15;
      --v5;
      *(_OWORD *)(v16 + 32) = v12;
      *(_OWORD *)(v16 + 48) = v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v36 <= v34)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v39;
    }
    v17 = 0;
    if (v6 <= v34)
      v18 = v34;
    else
      v18 = v6;
    v19 = v18 - v6;
    v20 = v36 - v6;
    v21 = v34 - v6;
    v22 = 16 * v6 + 32;
    v23 = v38 + v22;
    v24 = v11 + v22;
    while (v20 != v17)
    {
      if (v21 == v17)
        goto LABEL_24;
      if (v19 == v17)
        goto LABEL_28;
      v25 = *(_OWORD *)(v23 + 16 * v17);
      v26 = *(_OWORD *)(v24 + 16 * v17);
      v28 = *(_QWORD *)(v39 + 16);
      v27 = *(_QWORD *)(v39 + 24);
      if (v28 >= v27 >> 1)
      {
        v33 = v11;
        v35 = *(_OWORD *)(v24 + 16 * v17);
        v37 = *(_OWORD *)(v23 + 16 * v17);
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        v26 = v35;
        v25 = v37;
        v11 = v33;
      }
      *(_QWORD *)(v39 + 16) = v28 + 1;
      v29 = v39 + 32 * v28;
      *(_OWORD *)(v29 + 32) = v25;
      *(_OWORD *)(v29 + 48) = v26;
      if (v20 == ++v17)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  int v7;
  int v8;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 7; ; --i)
  {
    if (v3 == i - 8)
      goto LABEL_5;
    v6 = *(_QWORD *)(v1 + 16);
    if (v3 >= v6)
      break;
    if (i - 8 >= v6)
      goto LABEL_12;
    v7 = *(_DWORD *)(v1 + 4 * v3 + 32);
    v8 = *(_DWORD *)(v1 + 4 * i);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = result;
    }
    *(_DWORD *)(v1 + 4 * v3 + 32) = v8;
    *(_DWORD *)(v1 + 4 * i) = v7;
LABEL_5:
    if (v4 == ++v3)
      return v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t extrude(path:options:)(const CGPath *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  const CGPath *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  const CGPath *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  const double *v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float64_t *v30;
  const double *v31;
  float64x2_t v32;
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD v43[4];
  char v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;

  if (fabsf(*(float *)(a2 + 56)) <= 0.000001)
  {
    v7 = 0;
  }
  else
  {
    outlined init with copy of CGPathProviding?(a2 + 16, (uint64_t)v50);
    v5 = v51;
    if (v51)
    {
      v6 = v52;
      __swift_project_boxed_opaque_existential_1(v50, v51);
      v7 = (const CGPath *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    }
    else
    {
      outlined destroy of CGPathProviding?((uint64_t)v50);
      if (one-time initialization token for defaultChamferProfile != -1)
        swift_once();
      v7 = defaultChamferProfile;
    }
  }
  v8 = spansFromCGPath(path:)(a1);
  v9 = correctCurveOrientation(curves:)(v8);
  swift_bridgeObjectRelease();
  v10 = specialized classify<A>(subpaths:)(v9);
  swift_bridgeObjectRelease();
  outlined init with copy of MeshResource.ShapeExtrusionOptions(a2, (uint64_t)v50);
  if (!v7)
  {
    v39 = outlined destroy of MeshResource.ShapeExtrusionOptions((uint64_t)v50);
    v48 = 0;
    v49 = 0;
    goto LABEL_30;
  }
  v11 = v53;
  outlined destroy of MeshResource.ShapeExtrusionOptions((uint64_t)v50);
  v46 = v11 != 2;
  v48 = 0;
  v49 = 0;
  v45 = *(_QWORD *)(a2 + 72);
  v12 = v7;
  v13 = spansFromCGPath(path:)(v12);
  v47 = MEMORY[0x24BEE4AF8];
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
    v17 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v17)
      goto LABEL_13;
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(_QWORD *)v38 = 0xD000000000000020;
    *(_QWORD *)(v38 + 8) = 0x800000021BE93160;
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  for (i = 0; i != v14; ++i)
  {
    v16 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v16);
  }
  swift_bridgeObjectRelease_n();
  v8 = v47;
  v17 = *(_QWORD *)(v47 + 16);
  if (!v17)
    goto LABEL_27;
LABEL_13:
  v18 = (const double *)(v8 + 40);
  v19 = vld1q_dup_f64(v18);
  v19.f64[0] = *(float64_t *)(v8 + 32);
  if (sqrt(vaddvq_f64(vmulq_f64(v19, v19))) > 0.000001)
    goto LABEL_24;
  v20 = v8 + 32 + 80 * v17;
  v21 = v20 - 80;
  v22 = *(unsigned __int8 *)(v20 - 16);
  v23 = v21 + 24;
  v24 = v21 + 16;
  v25 = v21 + 40;
  v26 = v21 + 32;
  v27 = v21 + 56;
  v28 = v21 + 48;
  if (v22 == 1)
    v28 = v26;
  else
    v25 = v27;
  _ZF = v22 == 0;
  v30 = (float64_t *)(v22 ? v28 : v24);
  v31 = (const double *)(_ZF ? v23 : v25);
  v32 = vld1q_dup_f64(v31);
  v32.f64[0] = *v30;
  __asm { FMOV            V1.2D, #-1.0 }
  v37 = vaddq_f64(v32, _Q1);
  if (sqrt(vaddvq_f64(vmulq_f64(v37, v37))) > 0.000001)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(_QWORD *)v38 = 0xD00000000000002FLL;
    *(_QWORD *)(v38 + 8) = 0x800000021BE93130;
LABEL_28:
    *(_BYTE *)(v38 + 16) = 0;
    swift_willThrow();

    goto LABEL_32;
  }
  v48 = MEMORY[0x24BEE4AF8];
  v49 = MEMORY[0x24BEE4AF8];
  trace(path:points:tangents:uniformSegmentsPerSpan:)(v8, (unint64_t)&v49, (unint64_t)&v48, v45, MEMORY[0x24BEE4AF8]);

  v39 = swift_bridgeObjectRelease();
LABEL_30:
  MEMORY[0x24BDAC7A8](v39);
  v43[2] = &v49;
  v43[3] = a2;
  v44 = v40;
  v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation5Shape33_958D9063BE5145611DD1DCE0DF8621CFLLVyAF20PiecewiseBezierCurveAHLLVGG_AF08ExtrudedF10DescriptorVsAE_pTg5((void (*)(_QWORD *__return_ptr, __int128 *, uint64_t *))partial apply for closure #2 in extrude(path:options:), (uint64_t)v43, (uint64_t)v10);
  if (!v2)
  {
    v8 = v41;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRelease();

LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *ExtrudedShapeDescriptor.allDescriptors.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v1 = v0[1];
  v2 = v0[14];
  v56 = v0[13];
  v61 = v0[16];
  v62 = v0[15];
  v71 = v0[18];
  v70 = v0[19];
  v69 = v0[20];
  v68 = v0[21];
  v67 = v0[22];
  v66 = v0[23];
  v65 = v0[24];
  v63 = v0[17];
  v64 = v0[25];
  v59 = v0[26];
  v100 = v0[27];
  v94 = v0[29];
  v95 = v0[28];
  v3 = v0[31];
  v96 = v0[30];
  v4 = v0[32];
  v5 = v0[33];
  v6 = v0[34];
  v7 = v0[35];
  v8 = v0[36];
  v60 = v0[37];
  v97 = v0[38];
  v9 = v0[40];
  v57 = v0[39];
  v72 = v0[42];
  v73 = v0[41];
  v74 = v0[43];
  v81 = v0[45];
  v82 = v0[44];
  v79 = v0[47];
  v80 = v0[46];
  v77 = v0[49];
  v78 = v0[48];
  v75 = v0[51];
  v76 = v0[50];
  v58 = v0[52];
  v99 = v0[53];
  v83 = v0[55];
  v84 = v0[54];
  v93 = v0[57];
  v92 = v0[58];
  v91 = v0[59];
  v90 = v0[60];
  v89 = v0[61];
  v88 = v0[62];
  v87 = v0[63];
  v85 = v0[56];
  v86 = v0[64];
  v101 = v9;
  v98 = v8;
  if (!v1)
  {
    v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v24 = v60;
    if (!v2)
      goto LABEL_12;
    goto LABEL_7;
  }
  v50 = v0[14];
  v51 = v0[35];
  v52 = v0[34];
  v53 = v0[33];
  v54 = v0[32];
  v55 = v0[31];
  v47 = *v0;
  v5 = v0[5];
  v10 = v0[6];
  v12 = v0[8];
  v11 = v0[9];
  v13 = v0[11];
  v44 = v0[10];
  v14 = v0[12];
  v15 = v0[3];
  v16 = v0[2];
  v46 = v0[4];
  v17 = *((_BYTE *)v0 + 56);
  v45 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v15, v46 & 1);
  v48 = v10;
  v18 = v10;
  v19 = v17;
  outlined copy of MeshDescriptor.Primitives?(v5, v18, v17);
  v49 = v12;
  outlined copy of MeshDescriptor.Skinning?(v12, v11);
  v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v22 = v20[2];
  v21 = v20[3];
  if (v22 >= v21 >> 1)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
  v20[2] = v22 + 1;
  v23 = &v20[13 * v22];
  v23[4] = v47;
  v23[5] = v45;
  v23[6] = v16;
  v23[7] = v15;
  *((_BYTE *)v23 + 64) = v46 & 1;
  v23[9] = v5;
  v23[10] = v48;
  *((_BYTE *)v23 + 88) = v19;
  v23[12] = v49;
  v23[13] = v11;
  v23[14] = v44;
  v23[15] = v13;
  v23[16] = v14;
  v4 = v54;
  v3 = v55;
  v6 = v52;
  LOBYTE(v5) = v53;
  v2 = v50;
  v7 = v51;
  v8 = v98;
  v9 = v101;
  v24 = v60;
  if (v50)
  {
LABEL_7:
    v25 = v7;
    v26 = v6;
    v27 = v5;
    v5 = v4;
    v28 = v3;
    v29 = v24;
    v30 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v61, v63 & 1);
    outlined copy of MeshDescriptor.Primitives?(v71, v70, v69);
    outlined copy of MeshDescriptor.Skinning?(v68, v67);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    v32 = v20[2];
    v31 = v20[3];
    if (v32 >= v31 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v20);
    v20[2] = v32 + 1;
    v33 = &v20[13 * v32];
    v33[4] = v56;
    v33[5] = v30;
    v33[6] = v62;
    v33[7] = v61;
    *((_BYTE *)v33 + 64) = v63 & 1;
    v33[9] = v71;
    v33[10] = v70;
    *((_BYTE *)v33 + 88) = v69;
    v33[12] = v68;
    v33[13] = v67;
    v33[14] = v66;
    v33[15] = v65;
    v33[16] = v64;
    v9 = v101;
    v24 = v29;
    v3 = v28;
    v4 = v5;
    LOBYTE(v5) = v27;
    v6 = v26;
    v7 = v25;
    v8 = v98;
  }
LABEL_12:
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v72, v74 & 1);
    outlined copy of MeshDescriptor.Primitives?(v82, v81, v80);
    outlined copy of MeshDescriptor.Skinning?(v79, v78);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    v35 = v20[2];
    v34 = v20[3];
    if (v35 >= v34 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v20);
    v20[2] = v35 + 1;
    v36 = &v20[13 * v35];
    v36[4] = v57;
    v36[5] = v101;
    v36[6] = v73;
    v36[7] = v72;
    *((_BYTE *)v36 + 64) = v74 & 1;
    v36[9] = v82;
    v36[10] = v81;
    *((_BYTE *)v36 + 88) = v80;
    v36[12] = v79;
    v36[13] = v78;
    v36[14] = v77;
    v36[15] = v76;
    v36[16] = v75;
  }
  if (v99)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v83, v85 & 1);
    outlined copy of MeshDescriptor.Primitives?(v93, v92, v91);
    outlined copy of MeshDescriptor.Skinning?(v90, v89);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    v38 = v20[2];
    v37 = v20[3];
    if (v38 >= v37 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v20);
    v20[2] = v38 + 1;
    v39 = &v20[13 * v38];
    v39[4] = v58;
    v39[5] = v99;
    v39[6] = v84;
    v39[7] = v83;
    *((_BYTE *)v39 + 64) = v85 & 1;
    v39[9] = v93;
    v39[10] = v92;
    *((_BYTE *)v39 + 88) = v91;
    v39[12] = v90;
    v39[13] = v89;
    v39[14] = v88;
    v39[15] = v87;
    v39[16] = v86;
  }
  if (v100)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v94, v96 & 1);
    outlined copy of MeshDescriptor.Primitives?(v3, v4, v5);
    outlined copy of MeshDescriptor.Skinning?(v6, v7);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    v41 = v20[2];
    v40 = v20[3];
    if (v41 >= v40 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v20);
    v20[2] = v41 + 1;
    v42 = &v20[13 * v41];
    v42[4] = v59;
    v42[5] = v100;
    v42[6] = v95;
    v42[7] = v94;
    *((_BYTE *)v42 + 64) = v96 & 1;
    v42[9] = v3;
    v42[10] = v4;
    *((_BYTE *)v42 + 88) = v5;
    v42[12] = v6;
    v42[13] = v7;
    v42[14] = v8;
    v42[15] = v24;
    v42[16] = v97;
  }
  return v20;
}

uint64_t PathSpan.tangent(at:)()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  char v3;

  result = outlined init with take of PathSpan(v0, (uint64_t)&v2);
  if (v3)
  {
    if (v3 == 1)
      return geom_quadratic_bezier_tangent_at_2d();
    else
      return geom_cubic_bezier_tangent_at_2d();
  }
  return result;
}

double specialized Polygon.signedArea()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  double result;
  const double *v4;
  double v13;
  double v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0.0;
  v2 = (uint64_t *)(a1 + 48);
  result = 0.0;
  do
  {
    _Q1 = vdupq_n_s64(v2[1]);
    if (*((_BYTE *)v2 + 48))
    {
      _Q2 = vdupq_n_s64(v2[3]);
      if (*((_BYTE *)v2 + 48) == 1)
      {
        _D4 = *(v2 - 2);
        _D6 = *v2;
        __asm { FMLA            D3, D4, V1.D[1] }
        v16 = result + _D3;
        __asm { FMLA            D1, D6, V2.D[1] }
      }
      else
      {
        v4 = (const double *)(v2 + 5);
        _Q4 = vld1q_dup_f64(v4);
        _D5 = *(v2 - 2);
        _D7 = *v2;
        __asm { FMLA            D3, D5, V1.D[1] }
        v13 = result + _D3;
        _D3 = v2[2];
        __asm { FMLA            D5, D7, V2.D[1] }
        v16 = v13 + _D5;
        __asm { FMLA            D1, D3, V4.D[1] }
      }
      result = v16 + _D1;
    }
    else
    {
      _D2 = *(v2 - 2);
      __asm { FMLA            D3, D2, V1.D[1] }
      result = result + _D3;
    }
    v2 += 10;
    --v1;
  }
  while (v1);
  return result;
}

void specialized Polygon.testInside(point:)(uint64_t a1, simd_double2 a2)
{
  uint64_t v2;
  simd_double2 v3;
  uint64_t v4;
  double v5;
  uint64_t i;
  double v7;
  double v8;
  simd_double2 v9;
  simd_double2 v10;
  double v11;
  BOOL v12;
  simd_double2 v13;
  simd_double2 v14;
  simd_double2 v15;
  simd_double2 v16;
  simd_double2 v17;
  double v18;
  simd_double2 v19;
  simd_double2 v20;
  simd_double2 v21;
  simd_double2 v22;
  simd_double2 v23;
  simd_double2 v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  v3 = a2;
  v4 = 0;
  v5 = a2.f64[1];
  for (i = a1 + 48; !*(_BYTE *)(i + 48); i += 80)
  {
    v13 = *(simd_double2 *)(i - 16);
    v14 = *(simd_double2 *)i;
    if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v3, *(float64x2_t *)&v13))).i32[1] & 1) != 0)
    {
      if (v14.f64[1] > v5)
        goto LABEL_4;
      if (_simd_orient_pd2(v14, v13, v3) > 0.0)
      {
        v12 = __OFSUB__(v4--, 1);
        if (v12)
          goto LABEL_73;
      }
    }
    else
    {
      if (v5 >= v14.f64[1])
        goto LABEL_4;
      if (_simd_orient_pd2(v13, v14, v3) > 0.0)
      {
        v12 = __OFADD__(v4++, 1);
        if (v12)
          goto LABEL_77;
      }
    }
LABEL_3:
    v3 = a2;
LABEL_4:
    if (!--v2)
      return;
  }
  v8 = *(double *)(i + 16);
  v7 = *(double *)(i + 24);
  if (*(_BYTE *)(i + 48) != 1)
  {
    v15 = *(simd_double2 *)(i - 16);
    v16 = *(simd_double2 *)i;
    v17 = *(simd_double2 *)(i + 32);
    v18 = *(double *)(i + 8);
    v24 = v17;
    if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v3, *(float64x2_t *)&v15))).i32[1] & 1) != 0)
    {
      if (v16.f64[1] > v5)
        goto LABEL_44;
      v21 = *(simd_double2 *)i;
      if (_simd_orient_pd2(v16, v15, v3) > 0.0)
      {
        v12 = __OFSUB__(v4--, 1);
        if (v12)
          goto LABEL_74;
      }
    }
    else
    {
      if (v5 >= v16.f64[1])
        goto LABEL_44;
      v21 = *(simd_double2 *)i;
      if (_simd_orient_pd2(v15, v16, v3) > 0.0)
      {
        v12 = __OFADD__(v4++, 1);
        if (v12)
          goto LABEL_78;
      }
    }
    v17 = v24;
    v3 = a2;
    v16 = v21;
LABEL_44:
    v20.f64[0] = v8;
    v20.f64[1] = v7;
    if (v18 <= v5)
    {
      if (v5 >= v7)
        goto LABEL_61;
      v22 = v20;
      if (_simd_orient_pd2(v16, v20, v3) > 0.0)
      {
        v12 = __OFADD__(v4++, 1);
        v17 = v24;
        if (v12)
          goto LABEL_81;
LABEL_58:
        v3 = a2;
LABEL_60:
        v20 = v22;
LABEL_61:
        if (v7 <= v5)
        {
          if (v5 >= v17.f64[1])
            goto LABEL_4;
          if (_simd_orient_pd2(v20, v17, v3) > 0.0)
          {
            v12 = __OFADD__(v4++, 1);
            if (v12)
            {
              __break(1u);
              return;
            }
          }
        }
        else
        {
          if (v17.f64[1] > v5)
            goto LABEL_4;
          if (_simd_orient_pd2(v17, v20, v3) > 0.0)
          {
            v12 = __OFSUB__(v4--, 1);
            if (v12)
              goto LABEL_82;
          }
        }
        goto LABEL_3;
      }
    }
    else
    {
      if (v7 > v5)
        goto LABEL_61;
      v22 = v20;
      if (_simd_orient_pd2(v20, v16, v3) > 0.0)
      {
        v12 = __OFSUB__(v4--, 1);
        v17 = v24;
        if (v12)
          goto LABEL_79;
        goto LABEL_58;
      }
    }
    v17 = v24;
    v3 = a2;
    goto LABEL_60;
  }
  v9 = *(simd_double2 *)(i - 16);
  v10 = *(simd_double2 *)i;
  v11 = *(double *)(i + 8);
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v3, *(float64x2_t *)&v9))).i32[1] & 1) == 0)
  {
    if (v5 < v10.f64[1])
    {
      v23 = *(simd_double2 *)i;
      if (_simd_orient_pd2(v9, v10, v3) > 0.0)
      {
        v12 = __OFADD__(v4++, 1);
        if (v12)
          goto LABEL_75;
      }
LABEL_28:
      v10 = v23;
      v3 = a2;
    }
LABEL_29:
    v19.f64[0] = v8;
    v19.f64[1] = v7;
    if (v11 <= v5)
    {
      if (v5 >= v7)
        goto LABEL_4;
      if (_simd_orient_pd2(v10, v19, v3) > 0.0)
      {
        v12 = __OFADD__(v4++, 1);
        if (v12)
          goto LABEL_80;
      }
    }
    else
    {
      if (v7 > v5)
        goto LABEL_4;
      if (_simd_orient_pd2(v19, v10, v3) > 0.0)
      {
        v12 = __OFSUB__(v4--, 1);
        if (v12)
          goto LABEL_76;
      }
    }
    goto LABEL_3;
  }
  if (v10.f64[1] > v5)
    goto LABEL_29;
  v23 = *(simd_double2 *)i;
  if (_simd_orient_pd2(v10, v9, v3) <= 0.0)
    goto LABEL_28;
  v12 = __OFSUB__(v4--, 1);
  if (!v12)
    goto LABEL_28;
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
}

void triangulateByEarClippingFix(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)(uint64_t a1, uint64_t a2, char **a3)
{
  id v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *collection_u;

  swift_bridgeObjectRelease();
  collection_u = (void *)geom_create_collection_u();
  triangulateByEarClipping(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_u);
  lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u, 0x24BE3D228, MEMORY[0x24BE3D1F0]);
  v5 = collection_u;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();

  if (v22 != v21 || (v6 = *(_QWORD *)(a1 + 16)) == 0)
  {
    v19 = v5;
    specialized _copyCollectionToContiguousArray<A>(_:)(v19);
    v9 = v20;

    goto LABEL_20;
  }
  if (v6 < 0x100000001)
  {
    v7 = v6 - 2;
    if ((_DWORD)v6 != 2)
    {
      if ((_DWORD)v6 != 1)
      {
        v8 = v6 - 1;
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
        v10 = 0;
        if (v8 <= 1)
          v11 = 1;
        else
          v11 = v8;
        v12 = v11 - 1;
        while (v12 != v10)
        {
          v14 = *((_QWORD *)v9 + 2);
          v13 = *((_QWORD *)v9 + 3);
          v15 = v13 >> 1;
          v16 = v14 + 1;
          if (v13 >> 1 <= v14)
          {
            v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v9);
            v13 = *((_QWORD *)v9 + 3);
            v15 = v13 >> 1;
          }
          *((_QWORD *)v9 + 2) = v16;
          *(_DWORD *)&v9[4 * v14 + 32] = 0;
          v17 = v14 + 2;
          if (v15 < (uint64_t)(v14 + 2))
            v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 2, 1, v9);
          *((_QWORD *)v9 + 2) = v17;
          *(_DWORD *)&v9[4 * v16 + 32] = v10 + 1;
          v18 = *((_QWORD *)v9 + 3);
          if ((uint64_t)(v14 + 3) > (uint64_t)(v18 >> 1))
            v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v14 + 3, 1, v9);
          *((_QWORD *)v9 + 2) = v14 + 3;
          *(_DWORD *)&v9[4 * v17 + 32] = v10 + 2;
          if (v7 == ++v10)
            goto LABEL_20;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_24;
    }
    v9 = (char *)MEMORY[0x24BEE4AF8];
LABEL_20:

    *a3 = v9;
    return;
  }
LABEL_24:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t spansFromCGPath(path:)(const CGPath *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[6];
  _QWORD v16[2];
  char v17;
  _QWORD *v18;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[PathSpan]>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_21BE411F0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 32) = MEMORY[0x24BEE4AF8];
  v18 = (_QWORD *)v2;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v16;
  *(_QWORD *)(v4 + 24) = &v18;
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = partial apply for closure #1 in spansFromCGPath(path:);
  v5[3] = v4;
  v15[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v15[5] = v5;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
  v15[3] = &block_descriptor_46;
  v6 = _Block_copy(v15);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(a1, v6);
  _Block_release(v6);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((a1 & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v5 = v18;
  v7 = v18[2];
  if (!v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_QWORD *)(v18[v7 + 3] + 16))
    goto LABEL_7;
  result = swift_isUniquelyReferenced_nonNull_native();
  v18 = v5;
  if ((result & 1) != 0)
  {
    v9 = v5[2];
    if (v9)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = (_QWORD *)result;
  v9 = *(_QWORD *)(result + 16);
  if (v9)
  {
LABEL_6:
    v5[2] = v9 - 1;
    v18 = v5;
    swift_bridgeObjectRelease();
    v5 = v18;
    v7 = v18[2];
    if (!v7)
    {
      v11 = MEMORY[0x24BEE4AF8];
LABEL_12:
      swift_release();
      swift_bridgeObjectRelease();
      return v11;
    }
LABEL_7:
    v15[0] = v3;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v10 = 0;
    v11 = v15[0];
    do
    {
      v12 = v5[v10 + 4];
      v15[0] = v11;
      v13 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v13 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
        v11 = v15[0];
      }
      ++v10;
      *(_QWORD *)(v11 + 16) = v13 + 1;
      *(_QWORD *)(v11 + 8 * v13 + 32) = v12;
    }
    while (v7 != v10);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t closure #1 in spansFromCGPath(path:)(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  double *v24;
  uint64_t v25;
  float64_t v26;
  float64_t v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t *v32;
  double *v33;
  unint64_t *v34;
  double *v35;
  unint64_t *v36;
  double *v37;
  BOOL v38;
  double *v39;
  unint64_t *v40;
  unint64_t v41;
  float64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  char v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  __int128 v62;
  char v63;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v3 = a3;
  v5 = *(_DWORD *)result;
  v6 = *(_QWORD **)(result + 8);
  v8 = *a2;
  v7 = a2[1];
  if ((a2[2] & 1) == 0)
  {
    if (v5 < 2)
    {
      v9 = 1;
      goto LABEL_17;
    }
    if (v5 == 2)
    {
      v10 = (_QWORD *)*a3;
      v11 = *(_QWORD *)(*a3 + 16);
      v13 = *v6;
      v12 = v6[1];
      v14 = (_QWORD *)v6[2];
      v79 = v6[3];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v3 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if (!v11)
        {
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
LABEL_55:
        v76 = (unint64_t)v14;
        if (v11 <= v10[2])
        {
          v65 = v10 + 4;
          v75 = v11 - 1;
          v66 = v11 - 1;
          v67 = (_QWORD *)v65[v66];
          result = swift_isUniquelyReferenced_nonNull_native();
          v65[v66] = v67;
          v68 = v12;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
            v67 = (_QWORD *)result;
            v65[v75] = result;
          }
          v70 = v67[2];
          v69 = v67[3];
          if (v70 >= v69 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v69 > 1), v70 + 1, 1, v67);
            v67 = (_QWORD *)result;
            v65[v75] = result;
          }
          v67[2] = v70 + 1;
          v19 = &v67[10 * v70];
          v19[4] = v8;
          v19[5] = v7;
          v19[6] = v13;
          v19[7] = v68;
          v19[8] = v76;
          v19[9] = v79;
          v19[10] = 0;
          v19[11] = 0;
          v20 = 1;
          goto LABEL_61;
        }
        goto LABEL_77;
      }
    }
    else
    {
      if (v5 != 3)
        goto LABEL_14;
      v10 = (_QWORD *)*a3;
      v11 = *(_QWORD *)(*a3 + 16);
      v13 = *v6;
      v12 = v6[1];
      v14 = (_QWORD *)v6[2];
      v76 = v6[4];
      v79 = v6[3];
      v74 = v6[5];
      v15 = swift_isUniquelyReferenced_nonNull_native();
      *v3 = v10;
      if ((v15 & 1) != 0)
      {
        if (v11)
          goto LABEL_9;
      }
      else
      {
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        *v3 = v10;
        if (v11)
        {
LABEL_9:
          v73 = v14;
          if (v11 <= v10[2])
          {
            v14 = v10 + 4;
            v72 = v11 - 1;
            v16 = v11 - 1;
            v3 = (_QWORD *)v14[v16];
            result = swift_isUniquelyReferenced_nonNull_native();
            v14[v16] = v3;
            v11 = v12;
            if ((result & 1) != 0)
            {
LABEL_11:
              v18 = v3[2];
              v17 = v3[3];
              if (v18 >= v17 >> 1)
              {
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v3);
                v3 = (_QWORD *)result;
                v14[v72] = result;
              }
              v3[2] = v18 + 1;
              v19 = &v3[10 * v18];
              v19[4] = v8;
              v19[5] = v7;
              v19[6] = v13;
              v19[7] = v11;
              v19[8] = v73;
              v19[9] = v79;
              v19[10] = v76;
              v19[11] = v74;
              v20 = 2;
LABEL_61:
              *((_BYTE *)v19 + 96) = v20;
              goto LABEL_62;
            }
LABEL_78:
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            v3 = (_QWORD *)result;
            v14[v72] = result;
            goto LABEL_11;
          }
          goto LABEL_76;
        }
      }
      __break(1u);
    }
    v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    *v3 = v10;
    if (!v11)
      goto LABEL_75;
    goto LABEL_55;
  }
  if (v5 != 4)
  {
    v9 = 1;
    goto LABEL_19;
  }
LABEL_14:
  v9 = 0;
  if (v5 == 4)
    goto LABEL_19;
LABEL_17:
  if (v5 != 1)
  {
    if (v5)
      goto LABEL_42;
LABEL_19:
    v21 = (_QWORD *)*a3;
    v22 = *(_QWORD **)(*a3 + 16);
    if (!v22)
    {
      __break(1u);
      goto LABEL_65;
    }
    v23 = (char *)v22 - 1;
    v24 = (double *)v21[(_QWORD)v22 - 1 + 4];
    v25 = *((_QWORD *)v24 + 2);
    if (!v25)
      goto LABEL_42;
    v80 = v9;
    v27 = v24[4];
    v26 = v24[5];
    v28.f64[1] = v26;
    v29 = (uint64_t)&v24[10 * v25 + 4];
    v30 = v29 - 80;
    v31 = *(unsigned __int8 *)(v29 - 16);
    v32 = (unint64_t *)(v30 + 24);
    v33 = (double *)(v30 + 16);
    v34 = (unint64_t *)(v30 + 40);
    v35 = (double *)(v30 + 32);
    v36 = (unint64_t *)(v30 + 56);
    v37 = (double *)(v30 + 48);
    if (v31 == 1)
      v37 = v35;
    else
      v34 = v36;
    v38 = v31 == 0;
    if (v31)
      v39 = v37;
    else
      v39 = v33;
    if (v38)
      v40 = v32;
    else
      v40 = v34;
    v41 = *v40;
    v42 = *v39;
    v43 = (float64x2_t)vdupq_n_s64(*v40);
    v28.f64[0] = v27;
    v43.f64[0] = *v39;
    v44 = vsubq_f64(v28, v43);
    if (sqrt(vaddvq_f64(vmulq_f64(v44, v44))) <= 0.000001)
    {
LABEL_38:
      result = swift_isUniquelyReferenced_nonNull_native();
      *v3 = v21;
      v9 = v80;
      v22 = v6;
      if ((result & 1) != 0)
      {
LABEL_39:
        v52 = v21[2];
        v51 = v21[3];
        if (v52 >= v51 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v21);
          v21 = (_QWORD *)result;
          *v3 = result;
        }
        v21[2] = v52 + 1;
        v21[v52 + 4] = MEMORY[0x24BEE4AF8];
        v6 = v22;
LABEL_42:
        if (v9)
        {
LABEL_43:
          v20 = 0;
LABEL_62:
          v63 = 0;
          v62 = *(_OWORD *)&v6[2 * v20];
          goto LABEL_63;
        }
LABEL_52:
        v62 = 0uLL;
        v63 = 1;
LABEL_63:
        *(_OWORD *)a2 = v62;
        *((_BYTE *)a2 + 16) = v63;
        return result;
      }
LABEL_65:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      v21 = (_QWORD *)result;
      *v3 = result;
      goto LABEL_39;
    }
    v45 = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v21;
    if ((v45 & 1) == 0)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
      *v3 = v21;
    }
    v77 = v6;
    if ((unint64_t)v22 > v21[2])
    {
      __break(1u);
    }
    else
    {
      v22 = v21 + 4;
      v21 = (_QWORD *)v21[(_QWORD)v23 + 4];
      v46 = swift_isUniquelyReferenced_nonNull_native();
      v22[(_QWORD)v23] = v21;
      if ((v46 & 1) != 0)
      {
LABEL_35:
        v48 = v21[2];
        v47 = v21[3];
        v49 = v48 + 1;
        if (v48 >= v47 >> 1)
        {
          v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v21);
          v49 = v48 + 1;
          v21 = v71;
          v22[(_QWORD)v23] = v71;
        }
        v21[2] = v49;
        v50 = (float64_t *)&v21[10 * v48];
        v50[4] = v42;
        *((_QWORD *)v50 + 5) = v41;
        v50[6] = v27;
        v50[7] = v26;
        *((_OWORD *)v50 + 4) = 0u;
        *((_OWORD *)v50 + 5) = 0u;
        *((_BYTE *)v50 + 96) = 0;
        v21 = (_QWORD *)*v3;
        v6 = v77;
        goto LABEL_38;
      }
    }
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v22[(_QWORD)v23] = v21;
    goto LABEL_35;
  }
  if ((a2[2] & 1) == 0)
  {
    v53 = (_QWORD *)*a3;
    v54 = *(_QWORD *)(*a3 + 16);
    v56 = *v6;
    v55 = v6[1];
    v57 = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v53;
    if ((v57 & 1) != 0)
    {
      if (v54)
        goto LABEL_47;
    }
    else
    {
      v53 = specialized _ArrayBuffer._consumeAndCreateNew()(v53);
      *v3 = v53;
      if (v54)
      {
LABEL_47:
        v78 = v9;
        if (v54 <= v53[2])
        {
          v9 = (uint64_t)(v53 + 4);
          v76 = v54 - 1;
          v58 = 8 * (v54 - 1);
          v3 = *(_QWORD **)(v9 + v58);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v9 + v58) = v3;
          v54 = v55;
          if ((result & 1) != 0)
            goto LABEL_49;
          goto LABEL_71;
        }
LABEL_70:
        __break(1u);
LABEL_71:
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v3 = (_QWORD *)result;
        *(_QWORD *)(v9 + 8 * v76) = result;
LABEL_49:
        v60 = v3[2];
        v59 = v3[3];
        if (v60 >= v59 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1, v3);
          v3 = (_QWORD *)result;
          *(_QWORD *)(v9 + 8 * v76) = result;
        }
        v3[2] = v60 + 1;
        v61 = &v3[10 * v60];
        v61[4] = v8;
        v61[5] = v7;
        v61[6] = v56;
        v61[7] = v54;
        *((_OWORD *)v61 + 4) = 0u;
        *((_OWORD *)v61 + 5) = 0u;
        *((_BYTE *)v61 + 96) = 0;
        if (v78)
          goto LABEL_43;
        goto LABEL_52;
      }
    }
    __break(1u);
    goto LABEL_70;
  }
  __break(1u);
  return result;
}

uint64_t correctCurveOrientation(curves:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  int64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  unint64_t v22;
  unint64_t v23;
  float64x2_t *v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  float64x2_t v75;
  uint64_t v76;
  __int128 v77;
  float64x2_t v78;
  uint64_t v79;
  __int128 v80;
  int64x2_t v81;
  uint64_t v82;
  __int128 v83;
  int64x2_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v3 = a1;
  v87 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v4 = 0;
  v5 = v3 + 32;
  v6 = vdupq_n_s64(0x7FF0000000000000uLL);
  v7 = vdupq_n_s64(0xFFF0000000000000);
  do
  {
    v8 = *(_QWORD *)(v5 + 8 * v4);
    v9 = *(_QWORD *)(v8 + 16);
    v10 = (float64x2_t)v7;
    v11 = (float64x2_t)v6;
    if (v9)
    {
      v12 = v8 + 48;
      v10 = (float64x2_t)v7;
      v11 = (float64x2_t)v6;
      do
      {
        if (*(_BYTE *)(v12 + 48))
        {
          v14 = *(float64x2_t *)(v12 - 16);
          v15 = *(float64x2_t *)v12;
          v16 = *(float64x2_t *)(v12 + 16);
          if (*(_BYTE *)(v12 + 48) == 1)
          {
            v17 = vminnmq_f64(v11, vminnmq_f64(v14, v15));
            v18 = vmaxnmq_f64(v10, vmaxnmq_f64(v14, v15));
            v11 = vminnmq_f64(v17, vminnmq_f64(v15, v16));
            v19 = vmaxnmq_f64(v15, v16);
          }
          else
          {
            v20 = *(float64x2_t *)(v12 + 32);
            v21 = vminnmq_f64(v11, vminnmq_f64(v14, v15));
            v18 = vmaxnmq_f64(vmaxnmq_f64(v10, vmaxnmq_f64(v14, v15)), vmaxnmq_f64(v15, v16));
            v11 = vminnmq_f64(vminnmq_f64(v21, vminnmq_f64(v15, v16)), vminnmq_f64(v16, v20));
            v19 = vmaxnmq_f64(v16, v20);
          }
          v10 = vmaxnmq_f64(v18, v19);
        }
        else
        {
          v13 = *(float64x2_t *)(v12 - 16);
          v11 = vminnmq_f64(v11, vminnmq_f64(v13, *(float64x2_t *)v12));
          v10 = vmaxnmq_f64(v10, vmaxnmq_f64(v13, *(float64x2_t *)v12));
        }
        v12 += 80;
        --v9;
      }
      while (v9);
    }
    v23 = *(_QWORD *)(v87 + 16);
    v22 = *(_QWORD *)(v87 + 24);
    if (v23 >= v22 >> 1)
    {
      v84 = v6;
      v78 = v10;
      v81 = v7;
      v75 = v11;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v11 = v75;
      v10 = v78;
      v7 = v81;
      v6 = v84;
    }
    ++v4;
    *(_QWORD *)(v87 + 16) = v23 + 1;
    v24 = (float64x2_t *)(v87 + 32 * v23);
    v24[2] = v11;
    v24[3] = v10;
  }
  while (v4 != v1);
  v25 = specialized Sequence.min(by:)(0, v1, v87);
  v27 = v26;
  result = swift_release();
  if ((v27 & 1) != 0)
    goto LABEL_52;
  if (v25 >= v1)
    goto LABEL_51;
  if (specialized Polygon.signedArea()(*(_QWORD *)(v5 + 8 * v25)) >= 0.0)
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v29 = 0;
  v3 = v2;
  v65 = v5;
  v66 = v1;
  while (1)
  {
    v30 = *(_QWORD *)(v5 + 8 * v29);
    v31 = *(_QWORD *)(v30 + 16);
    v68 = v3;
    v67 = v29;
    if (!v31)
    {
      swift_bridgeObjectRetain();
      v44 = *(_QWORD *)(v2 + 16);
      result = v2;
      if (v44 >= 2)
        break;
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    result = v2;
    v32 = (uint64_t *)(v30 + 48);
    do
    {
      v34 = *(v32 - 2);
      v33 = *(v32 - 1);
      v36 = *v32;
      v35 = v32[1];
      v37 = *((unsigned __int8 *)v32 + 48);
      if (*((_BYTE *)v32 + 48))
      {
        v38 = v32[2];
        v39 = v32[3];
        if (v37 == 1)
        {
          v40 = v32[2];
          v41 = v32[3];
          v38 = *v32;
          v39 = v32[1];
          v36 = *(v32 - 2);
          v35 = *(v32 - 1);
          v34 = 0;
          v33 = 0;
        }
        else
        {
          v40 = v32[4];
          v41 = v32[5];
        }
      }
      else
      {
        v40 = *v32;
        v41 = v32[1];
        v38 = *(v32 - 2);
        v39 = *(v32 - 1);
        v36 = *((unsigned __int8 *)v32 + 48);
        v35 = v36;
        v34 = v36;
        v33 = v36;
      }
      v86 = result;
      v43 = *(_QWORD *)(result + 16);
      v42 = *(_QWORD *)(result + 24);
      v44 = v43 + 1;
      if (v43 >= v42 >> 1)
      {
        v82 = v38;
        v79 = v41;
        v76 = v40;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        v44 = v43 + 1;
        v40 = v76;
        v41 = v79;
        v38 = v82;
        result = v86;
      }
      v32 += 10;
      *(_QWORD *)(result + 16) = v44;
      v45 = result + 80 * v43;
      *(_QWORD *)(v45 + 32) = v40;
      *(_QWORD *)(v45 + 40) = v41;
      *(_QWORD *)(v45 + 48) = v38;
      *(_QWORD *)(v45 + 56) = v39;
      *(_QWORD *)(v45 + 64) = v36;
      *(_QWORD *)(v45 + 72) = v35;
      *(_QWORD *)(v45 + 80) = v34;
      *(_QWORD *)(v45 + 88) = v33;
      *(_BYTE *)(v45 + 96) = v37;
      --v31;
    }
    while (v31);
    v2 = MEMORY[0x24BEE4AF8];
    v5 = v65;
    v1 = v66;
    v3 = v68;
    if (v44 >= 2)
      break;
LABEL_30:
    v46 = result;
    swift_bridgeObjectRelease();
LABEL_42:
    v62 = *(_QWORD *)(v3 + 16);
    v61 = *(_QWORD *)(v3 + 24);
    v63 = v67;
    v64 = v46;
    if (v62 >= v61 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      v64 = v46;
      v63 = v67;
    }
    v29 = v63 + 1;
    *(_QWORD *)(v3 + 16) = v62 + 1;
    *(_QWORD *)(v3 + 8 * v62 + 32) = v64;
    if (v29 == v1)
      return v3;
  }
  v47 = 0;
  v48 = v44 >> 1;
  v49 = v44 - 1;
  v50 = 80 * v44 - 48;
  v51 = 96;
  v69 = v44 >> 1;
  while (1)
  {
    if (v47 == v49)
      goto LABEL_35;
    v54 = *(_QWORD *)(result + 16);
    if (v47 >= v54)
      break;
    if (v49 >= v54)
      goto LABEL_50;
    v85 = *(_OWORD *)(result + v51 - 64);
    v80 = *(_OWORD *)(result + v51 - 32);
    v83 = *(_OWORD *)(result + v51 - 48);
    v77 = *(_OWORD *)(result + v51 - 16);
    v74 = *(_BYTE *)(result + v51);
    v55 = *(_QWORD *)(result + v50);
    v56 = *(_QWORD *)(result + v50 + 8);
    v57 = *(_QWORD *)(result + v50 + 16);
    v58 = *(_QWORD *)(result + v50 + 24);
    v59 = *(_QWORD *)(result + v50 + 32);
    v72 = *(_QWORD *)(result + v50 + 48);
    v73 = *(_QWORD *)(result + v50 + 40);
    v71 = *(_QWORD *)(result + v50 + 56);
    v70 = *(_BYTE *)(result + v50 + 64);
    v60 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      result = (uint64_t)v60;
    else
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v60);
    v52 = (_BYTE *)(result + v51);
    *((_QWORD *)v52 - 8) = v55;
    *((_QWORD *)v52 - 7) = v56;
    *((_QWORD *)v52 - 6) = v57;
    *((_QWORD *)v52 - 5) = v58;
    *((_QWORD *)v52 - 4) = v59;
    *((_QWORD *)v52 - 3) = v73;
    *((_QWORD *)v52 - 2) = v72;
    *((_QWORD *)v52 - 1) = v71;
    *v52 = v70;
    v53 = result + v50;
    *(_OWORD *)v53 = v85;
    *(_OWORD *)(v53 + 16) = v83;
    *(_OWORD *)(v53 + 32) = v80;
    *(_OWORD *)(v53 + 48) = v77;
    *(_BYTE *)(v53 + 64) = v74;
    v48 = v69;
LABEL_35:
    ++v47;
    --v49;
    v51 += 80;
    v50 -= 80;
    if (v48 == v47)
    {
      v46 = result;
      swift_bridgeObjectRelease();
      v2 = MEMORY[0x24BEE4AF8];
      v5 = v65;
      v1 = v66;
      v3 = v68;
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

_QWORD *specialized classify<A>(subpaths:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  double v9;
  const double *v10;
  double v23;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  simd_double2 v55;
  simd_double2 v56;
  double v57;
  simd_double2 v58;
  simd_double2 v59;
  simd_double2 v60;
  simd_double2 v61;
  simd_double2 v62;
  double v63;
  simd_double2 v64;
  simd_double2 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  simd_double2 v84;
  simd_double2 v85;
  simd_double2 v86;
  simd_double2 v87;
  simd_double2 v88;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    v3 = 0;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v6 = *(_QWORD *)(v2 + 8 * v3);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v8 = (uint64_t *)(v6 + 48);
        v9 = 0.0;
        do
        {
          v25 = v8[1];
          if (*((_BYTE *)v8 + 48))
          {
            v26 = v8[3];
            if (*((_BYTE *)v8 + 48) == 1)
            {
              _Q2 = vdupq_n_s64(v26);
              _D3 = *(v8 - 2);
              _D4 = vdupq_n_s64(v25).i64[1];
              _D5 = *v8;
              __asm { FMLA            D0, D3, V1.D[1] }
              v23 = v9 + _D0;
              __asm { FMLA            D1, D5, V2.D[1] }
            }
            else
            {
              v10 = (const double *)(v8 + 5);
              _Q1 = vdupq_n_s64(v25);
              _Q2 = vdupq_n_s64(v26);
              _Q3 = vld1q_dup_f64(v10);
              _D4 = *(v8 - 2);
              _D6 = *v8;
              __asm { FMLA            D0, D4, V1.D[1] }
              _D4 = v8[2];
              __asm { FMLA            D5, D6, V2.D[1] }
              v23 = v9 + _D0 + _D5;
              __asm { FMLA            D1, D4, V3.D[1] }
            }
            v9 = v23 + _D1;
          }
          else
          {
            _Q1 = vdupq_n_s64(v25);
            _D2 = *(v8 - 2);
            __asm { FMLA            D0, D2, V1.D[1] }
            v9 = v9 + _D0;
          }
          v8 += 10;
          --v7;
        }
        while (v7);
        if (fabs(v9) > 0.000001)
        {
          swift_bridgeObjectRetain_n();
          if (v9 <= 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v35 = v5;
            else
              v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
            v37 = v35[2];
            v39 = v35[3];
            v38 = v37 + 1;
            if (v37 >= v39 >> 1)
              v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v37 + 1, 1, v35);
            v5 = v35;
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v35 = v4;
            else
              v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
            v37 = v35[2];
            v36 = v35[3];
            v38 = v37 + 1;
            if (v37 >= v36 >> 1)
              v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
            v4 = v35;
          }
          v35[2] = v38;
          v35[v37 + 4] = v6;
          swift_bridgeObjectRelease();
        }
      }
      ++v3;
    }
    while (v3 != v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v40 = COERCE_DOUBLE(specialized Array.init(repeating:count:)(0, v5[2]));
  v72 = v4[2];
  if (!v72)
  {
    swift_bridgeObjectRelease();
    v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_132;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_149;
LABEL_32:
  v41 = 0;
  v42 = v5[2];
  v73 = v4 + 4;
  v43 = *(_QWORD *)&v40 + 32;
  v44 = v5 + 4;
  v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v79 = v40;
  v80 = v4;
  v77 = *(_QWORD *)&v40 + 32;
  v78 = v42;
  v76 = v5 + 4;
  do
  {
    if (v41 >= v4[2])
      goto LABEL_148;
    v74 = v45;
    v75 = v41;
    v46 = v73[v41];
    swift_bridgeObjectRetain_n();
    v81 = v46;
    if (v42)
    {
      v47 = 0;
      v83 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v47 >= *(_QWORD *)(*(_QWORD *)&v40 + 16))
        {
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          v40 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(*(uint64_t *)&v40));
          goto LABEL_32;
        }
        if ((*(_BYTE *)(v43 + v47) & 1) != 0)
          goto LABEL_37;
        if (v47 >= v5[2])
          goto LABEL_145;
        v48 = v44[v47];
        if (!*(_QWORD *)(v48 + 16))
          goto LABEL_146;
        v88 = *(simd_double2 *)(v48 + 32);
        specialized Polygon.testInside(point:)(v46, v88);
        if ((v49 & 1) == 0)
          goto LABEL_37;
        v82 = v5;
        v5 = (_QWORD *)v83[2];
        if (!v5)
          goto LABEL_118;
        v50 = 0;
        while (2)
        {
          v51 = v83[v50 + 4];
          v52 = *(_QWORD *)(v51 + 16);
          if (!v52)
            goto LABEL_46;
          v4 = 0;
          v53 = v51 + 48;
          do
          {
            if (*(_BYTE *)(v53 + 48))
            {
              v54 = *(double *)(v53 + 16);
              v40 = *(double *)(v53 + 24);
              if (*(_BYTE *)(v53 + 48) == 1)
              {
                v55 = *(simd_double2 *)(v53 - 16);
                v56 = *(simd_double2 *)v53;
                v57 = *(double *)(v53 + 8);
                if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v88, *(float64x2_t *)&v55))).i32[1] & 1) != 0)
                {
                  if (v56.f64[1] <= v88.f64[1])
                  {
                    v86 = *(simd_double2 *)v53;
                    if (_simd_orient_pd2(v56, v55, v88) > 0.0)
                    {
                      _VF = __OFSUB__(v4, 1);
                      v4 = (_QWORD *)((char *)v4 - 1);
                      if (_VF)
                      {
                        __break(1u);
LABEL_133:
                        __break(1u);
LABEL_134:
                        __break(1u);
LABEL_135:
                        __break(1u);
LABEL_136:
                        __break(1u);
LABEL_137:
                        __break(1u);
LABEL_138:
                        __break(1u);
LABEL_139:
                        __break(1u);
LABEL_140:
                        __break(1u);
LABEL_141:
                        __break(1u);
LABEL_142:
                        __break(1u);
LABEL_143:
                        __break(1u);
                        goto LABEL_144;
                      }
                    }
LABEL_73:
                    v56 = v86;
                  }
                }
                else if (v88.f64[1] < v56.f64[1])
                {
                  v86 = *(simd_double2 *)v53;
                  if (_simd_orient_pd2(v55, v56, v88) > 0.0)
                  {
                    _VF = __OFADD__(v4, 1);
                    v4 = (_QWORD *)((char *)v4 + 1);
                    if (_VF)
                      goto LABEL_135;
                  }
                  goto LABEL_73;
                }
                v64.f64[0] = v54;
                v64.f64[1] = v40;
                if (v57 <= v88.f64[1])
                {
                  if (v88.f64[1] < v40 && _simd_orient_pd2(v56, v64, v88) > 0.0)
                  {
                    _VF = __OFADD__(v4, 1);
                    v4 = (_QWORD *)((char *)v4 + 1);
                    if (_VF)
                      goto LABEL_140;
                  }
                }
                else if (v40 <= v88.f64[1] && _simd_orient_pd2(v64, v56, v88) > 0.0)
                {
                  _VF = __OFSUB__(v4, 1);
                  v4 = (_QWORD *)((char *)v4 - 1);
                  if (_VF)
                    goto LABEL_136;
                }
                goto LABEL_49;
              }
              v60 = *(simd_double2 *)(v53 - 16);
              v61 = *(simd_double2 *)v53;
              v62 = *(simd_double2 *)(v53 + 32);
              v63 = *(double *)(v53 + 8);
              v87 = v62;
              if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v88, *(float64x2_t *)&v60))).i32[1] & 1) != 0)
              {
                if (v61.f64[1] <= v88.f64[1])
                {
                  v84 = *(simd_double2 *)v53;
                  if (_simd_orient_pd2(v61, v60, v88) > 0.0)
                  {
                    _VF = __OFSUB__(v4, 1);
                    v4 = (_QWORD *)((char *)v4 - 1);
                    if (_VF)
                      goto LABEL_134;
                  }
                  goto LABEL_88;
                }
              }
              else if (v88.f64[1] < v61.f64[1])
              {
                v84 = *(simd_double2 *)v53;
                if (_simd_orient_pd2(v60, v61, v88) > 0.0)
                {
                  _VF = __OFADD__(v4, 1);
                  v4 = (_QWORD *)((char *)v4 + 1);
                  if (_VF)
                    goto LABEL_138;
                }
LABEL_88:
                v61 = v84;
                v62 = v87;
              }
              v65.f64[0] = v54;
              v65.f64[1] = v40;
              if (v63 <= v88.f64[1])
              {
                if (v88.f64[1] < v40)
                {
                  v85 = v65;
                  if (_simd_orient_pd2(v61, v65, v88) <= 0.0)
                    goto LABEL_105;
                  _VF = __OFADD__(v4, 1);
                  v4 = (_QWORD *)((char *)v4 + 1);
                  v62 = v87;
                  if (_VF)
                    goto LABEL_141;
LABEL_106:
                  v65 = v85;
                }
              }
              else if (v40 <= v88.f64[1])
              {
                v85 = v65;
                if (_simd_orient_pd2(v65, v61, v88) > 0.0)
                {
                  _VF = __OFSUB__(v4, 1);
                  v4 = (_QWORD *)((char *)v4 - 1);
                  v62 = v87;
                  if (_VF)
                    goto LABEL_139;
                  goto LABEL_106;
                }
LABEL_105:
                v62 = v87;
                goto LABEL_106;
              }
              if (v40 <= v88.f64[1])
              {
                if (v88.f64[1] < v62.f64[1] && _simd_orient_pd2(v65, v62, v88) > 0.0)
                {
                  _VF = __OFADD__(v4, 1);
                  v4 = (_QWORD *)((char *)v4 + 1);
                  if (_VF)
                    goto LABEL_143;
                }
              }
              else if (v62.f64[1] <= v88.f64[1] && _simd_orient_pd2(v62, v65, v88) > 0.0)
              {
                _VF = __OFSUB__(v4, 1);
                v4 = (_QWORD *)((char *)v4 - 1);
                if (_VF)
                  goto LABEL_142;
              }
              goto LABEL_49;
            }
            v58 = *(simd_double2 *)(v53 - 16);
            v59 = *(simd_double2 *)v53;
            if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v88, *(float64x2_t *)&v58))).i32[1] & 1) != 0)
            {
              if (v59.f64[1] <= v88.f64[1] && _simd_orient_pd2(v59, v58, v88) > 0.0)
              {
                _VF = __OFSUB__(v4, 1);
                v4 = (_QWORD *)((char *)v4 - 1);
                if (_VF)
                  goto LABEL_133;
              }
            }
            else if (v88.f64[1] < v59.f64[1] && _simd_orient_pd2(v58, v59, v88) > 0.0)
            {
              _VF = __OFADD__(v4, 1);
              v4 = (_QWORD *)((char *)v4 + 1);
              if (_VF)
                goto LABEL_137;
            }
LABEL_49:
            v53 += 80;
            --v52;
          }
          while (v52);
          if (v4)
          {
            v46 = v81;
            v5 = v82;
            v40 = v79;
            v4 = v80;
            v43 = v77;
            v42 = v78;
            v44 = v76;
            goto LABEL_37;
          }
LABEL_46:
          if ((_QWORD *)++v50 != v5)
            continue;
          break;
        }
LABEL_118:
        swift_bridgeObjectRetain_n();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v5 + 1, 1, v83);
        v40 = v79;
        v4 = v80;
        v43 = v77;
        v42 = v78;
        v67 = v83[2];
        v66 = v83[3];
        v5 = (_QWORD *)(v67 + 1);
        if (v67 >= v66 >> 1)
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v83);
        v44 = v76;
        v83[2] = v5;
        v83[v67 + 4] = v48;
        if (v47 >= *(_QWORD *)(*(_QWORD *)&v79 + 16))
          goto LABEL_147;
        *(_BYTE *)(v77 + v47) = 1;
        swift_bridgeObjectRelease();
        v46 = v81;
        v5 = v82;
LABEL_37:
        if (++v47 == v42)
          goto LABEL_125;
      }
    }
    v83 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_125:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = v74;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
    v69 = v45[2];
    v68 = v45[3];
    if (v69 >= v68 >> 1)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v45);
    v41 = v75 + 1;
    v45[2] = v69 + 1;
    v70 = &v45[2 * v69];
    v70[4] = v81;
    v70[5] = v83;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  while (v75 + 1 != v72);
  swift_bridgeObjectRelease_n();
LABEL_132:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v45;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  simd_double2 v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v14;
  double v15;
  __int128 v17;
  __int128 v18;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  simd_double2 **v33;
  simd_double2 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  simd_double2 v39;
  double v40;
  simd_double2 *v41;
  simd_double2 v42;
  simd_double2 v43;
  simd_double2 v44;
  simd_double2 v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  simd_double2 **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  simd_double2 *v53;
  simd_double2 *v54;
  simd_double2 v55;
  simd_double2 v56;
  simd_double2 v57;
  double v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  _QWORD *v78;
  _QWORD *v79;
  simd_double2 v80;
  simd_double2 v81;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    v3 = 0;
    v4 = MEMORY[0x24BEE4AF8];
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v10 = *(_OWORD *)(v2 + 16 * v3);
      v11 = *(_QWORD *)(v2 + 16 * v3 + 8);
      if (v11 >= 2)
      {
        v12 = (__int128 *)(v10 + 16);
        _Q0 = *(_OWORD *)v10;
        v14 = v11 - 1;
        v15 = 0.0;
        _Q2 = *(_OWORD *)v10;
        do
        {
          v17 = _Q2;
          v18 = *v12++;
          _Q2 = v18;
          v15 = v15 + vmlad_n_f64(-*((double *)&v17 + 1) * *(double *)&v18, *((double *)&v18 + 1), *(double *)&v17);
          --v14;
        }
        while (v14);
        __asm { FMLA            D3, D2, V0.D[1] }
        if (fabs(v15 + _D3) > 0.000001)
        {
          v80 = *(simd_double2 *)(v2 + 16 * v3);
          if (v15 + _D3 <= 0.0)
          {
            v9 = (_QWORD *)v4;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v8 = v5;
            else
              v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
            v7 = v80;
            v25 = v8[2];
            v27 = v8[3];
            v26 = v25 + 1;
            if (v25 >= v27 >> 1)
            {
              v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v25 + 1, 1, v8);
              v7 = v80;
              v8 = v28;
              v5 = v28;
            }
            else
            {
              v5 = v8;
            }
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v8 = (_QWORD *)v4;
            else
              v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (_QWORD *)v4);
            v7 = v80;
            v25 = v8[2];
            v24 = v8[3];
            v26 = v25 + 1;
            if (v25 >= v24 >> 1)
            {
              v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v8);
              v7 = v80;
              v8 = v6;
              v9 = v6;
            }
            else
            {
              v9 = v8;
            }
          }
          v8[2] = v26;
          *(simd_double2 *)&v8[2 * v25 + 4] = v7;
          v4 = (unint64_t)v9;
        }
      }
      ++v3;
    }
    while (v3 != v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = MEMORY[0x24BEE4AF8];
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v29 = specialized Array.init(repeating:count:)(0, v5[2]);
  v68 = *(_QWORD *)(v4 + 16);
  if (v68)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_124;
LABEL_26:
    v30 = 0;
    v31 = (_QWORD *)v5[2];
    v69 = (_QWORD *)(v4 + 32);
    v32 = v29 + 32;
    v75 = v5 + 4;
    v71 = v29;
    v72 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v73 = v29 + 32;
    v74 = v31;
    v67 = (_QWORD *)v4;
    while (1)
    {
      if (v30 >= *(_QWORD *)(v4 + 16))
        goto LABEL_121;
      v70 = v30;
      v33 = (simd_double2 **)&v69[2 * v30];
      v34 = *v33;
      v35 = (uint64_t)v33[1];
      if (v31)
        break;
      v79 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_103:
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v4 = (unint64_t)v67;
        v61 = v72;
      }
      else
      {
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1, v72);
        v4 = (unint64_t)v67;
      }
      v63 = v61[2];
      v62 = v61[3];
      if (v63 >= v62 >> 1)
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v61);
      v61[2] = v63 + 1;
      v72 = v61;
      v64 = &v61[3 * v63];
      v30 = v70 + 1;
      v64[4] = v34;
      v64[5] = v35;
      v64[6] = v79;
      swift_bridgeObjectRelease();
      if (v70 + 1 == v68)
      {
LABEL_112:
        swift_bridgeObjectRelease_n();
        v65 = v72;
        goto LABEL_113;
      }
    }
    v4 = 0;
    v36 = v35 - 1;
    v79 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v76 = (uint64_t)v33[1];
LABEL_33:
    if (v4 >= *(_QWORD *)(v29 + 16))
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if ((*(_BYTE *)(v32 + v4) & 1) != 0)
      goto LABEL_32;
    if (v4 >= v5[2])
      goto LABEL_117;
    if (v35 < 2)
      goto LABEL_32;
    v37 = 0;
    v38 = 0;
    v77 = *(_OWORD *)&v75[2 * v4];
    v39 = *(simd_double2 *)v77;
    v40 = *(double *)(v77 + 8);
    v81 = *(simd_double2 *)v77;
    while (1)
    {
      v41 = &v34[v37];
      v42 = *v41;
      v43 = v41[1];
      if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v39, *(float64x2_t *)v41))).i32[1] & 1) != 0)
      {
        if (v43.f64[1] > v40)
          goto LABEL_39;
        if (_simd_orient_pd2(v43, v42, v39) > 0.0)
        {
          _VF = __OFSUB__(v38--, 1);
          if (_VF)
            goto LABEL_115;
        }
      }
      else
      {
        if (v40 >= v43.f64[1])
          goto LABEL_39;
        if (_simd_orient_pd2(v42, v43, v39) > 0.0)
        {
          _VF = __OFADD__(v38++, 1);
          if (_VF)
            goto LABEL_116;
        }
      }
      v39 = v81;
LABEL_39:
      if (v36 == ++v37)
      {
        v44 = v34[v37];
        v45 = *v34;
        v46 = v34->f64[1];
        v78 = v5;
        if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v39, *(float64x2_t *)&v44))).i32[1] & 1) != 0)
        {
          if (v46 <= v40)
          {
            if (_simd_orient_pd2(v45, v44, v39) > 0.0)
            {
              _VF = __OFSUB__(v38--, 1);
              if (_VF)
                goto LABEL_122;
              goto LABEL_60;
            }
            v39 = v81;
          }
LABEL_63:
          if (v38)
            goto LABEL_64;
LABEL_30:
          v32 = v73;
          v31 = v74;
LABEL_31:
          v35 = v76;
LABEL_32:
          if ((_QWORD *)++v4 == v31)
            goto LABEL_103;
          goto LABEL_33;
        }
        if (v40 >= v46)
          goto LABEL_63;
        if (_simd_orient_pd2(v44, v45, v39) > 0.0)
        {
          _VF = __OFADD__(v38++, 1);
          if (_VF)
            goto LABEL_123;
        }
LABEL_60:
        v39 = v81;
        if (!v38)
          goto LABEL_30;
LABEL_64:
        v47 = v79[2];
        if (!v47)
        {
LABEL_95:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47 + 1, 1, v79);
          v5 = v78;
          v29 = v71;
          v31 = v74;
          v60 = v79[2];
          v59 = v79[3];
          if (v60 >= v59 >> 1)
            v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1, v79);
          v79[2] = v60 + 1;
          *(_OWORD *)&v79[2 * v60 + 4] = v77;
          if (v4 >= *(_QWORD *)(v71 + 16))
            goto LABEL_120;
          v32 = v73;
          *(_BYTE *)(v73 + v4) = 1;
          goto LABEL_31;
        }
        v48 = 0;
        v5 = v79 + 4;
        while (1)
        {
          v49 = (simd_double2 **)&v5[2 * v48];
          v50 = (uint64_t)v49[1];
          if (v50 >= 2)
            break;
LABEL_68:
          if (++v48 == v47)
            goto LABEL_95;
        }
        v51 = 0;
        v52 = 0;
        v53 = *v49;
        v29 = v50 - 1;
        while (2)
        {
          v54 = &v53[v51];
          v55 = *v54;
          v56 = v54[1];
          if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v39, *(float64x2_t *)v54))).i32[1] & 1) != 0)
          {
            if (v56.f64[1] <= v40)
            {
              if (_simd_orient_pd2(v56, v55, v39) > 0.0)
              {
                _VF = __OFSUB__(v52--, 1);
                if (_VF)
                {
                  __break(1u);
LABEL_111:
                  __break(1u);
                  goto LABEL_112;
                }
              }
LABEL_71:
              v39 = v81;
            }
          }
          else if (v40 < v56.f64[1])
          {
            if (_simd_orient_pd2(v55, v56, v39) > 0.0)
            {
              _VF = __OFADD__(v52++, 1);
              if (_VF)
                goto LABEL_111;
            }
            goto LABEL_71;
          }
          if (v29 != ++v51)
            continue;
          break;
        }
        v57 = v53[v51];
        v58 = v53->f64[1];
        if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v39, *(float64x2_t *)&v57))).i32[1] & 1) != 0)
        {
          if (v58 <= v40)
          {
            if (_simd_orient_pd2(*v53, v57, v39) <= 0.0)
              goto LABEL_66;
            _VF = __OFSUB__(v52--, 1);
            if (!_VF)
              goto LABEL_66;
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
            goto LABEL_26;
          }
        }
        else if (v40 < v58)
        {
          if (_simd_orient_pd2(v53[v51], *v53, v39) > 0.0)
          {
            _VF = __OFADD__(v52++, 1);
            if (_VF)
              goto LABEL_119;
          }
LABEL_66:
          v39 = v81;
        }
        if (!v52)
          goto LABEL_68;
        v5 = v78;
        v29 = v71;
        goto LABEL_30;
      }
    }
  }
  swift_bridgeObjectRelease();
  v65 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_113:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v65;
}

_QWORD *trace(path:points:tangents:uniformSegmentsPerSpan:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X8>)
{
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v14;
  BOOL v15;
  _QWORD *result;
  int64_t v17;
  uint64_t v18;
  float64x2_t v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  float64x2_t v37;
  double v38;
  uint64_t *v39;
  unint64_t *v40;
  int v41;
  const double *v42;
  const double *v43;
  float64_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  float64x2_t *v54;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  _BYTE v67[80];

  if (a4 < 1)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v10 = a1;
  v12 = *(_QWORD *)(a1 + 16);
  v5 = v12 * a4;
  a5 = (unsigned __int128)(v12 * (__int128)a4) >> 64;
  if (a5 != (v12 * a4) >> 63)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  a5 = a2;
  v8 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v7 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (int64_t)v7 > v8[3] >> 1)
  {
    if (v6 <= (uint64_t)v7)
      v14 = v6 + v5;
    else
      v14 = v6;
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 0, v8);
  }
  *(_QWORD *)a2 = v8;
  a5 = a3;
  v9 = *(_QWORD **)a3;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v15 = __OFADD__(v6, v5);
  v5 += v6;
  if (v15)
    goto LABEL_76;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v5 > v9[3] >> 1)
  {
    if (v6 <= v5)
      v17 = v5;
    else
      v17 = v6;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v17, 0, v9);
    v9 = result;
  }
  *(_QWORD *)a3 = v9;
  if (!v12)
    return result;
  v18 = v10 + 32;
  v53 = v10 + 32 + 80 * v12 - 80;
  outlined init with take of PathSpan(v53, (uint64_t)v67);
  v6 = (int64_t)v67;
  PathSpan.tangent(at:)();
  v57 = v19;
  v54 = (float64x2_t *)v10;
  swift_bridgeObjectRetain();
  v20 = 0;
  while (2)
  {
    v10 = 0;
    a5 = v18 + 80 * v20;
    v21 = *(float64x2_t *)a5;
    v5 = *(unsigned __int8 *)(a5 + 64);
    ++v20;
    v22 = *(float64x2_t *)(a5 + 16);
    v62 = *(float64x2_t *)(a5 + 32);
    v63 = v22;
    v64 = *(float64x2_t *)a5;
    v21.f64[0] = *(float64_t *)a5;
    v59 = v22;
    v60 = *(float64x2_t *)(a5 + 48);
    v58 = v21;
    v23 = vsubq_f64(v22, v21);
    v61 = v23;
    do
    {
      if (a4 == v10)
      {
        __break(1u);
        goto LABEL_73;
      }
      v24 = (double)v10 / (double)a4;
      v25 = 1.0 - v24;
      if ((_DWORD)v5)
      {
        if ((_DWORD)v5 == 1)
        {
          v65 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v24 * (v25 + v25)), v64, v25 * v25), v62, v24 * v24);
          geom_quadratic_bezier_tangent_at_2d();
        }
        else
        {
          v65 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v24 * (v25 * v25 * 3.0)), v64, v25 * (v25 * v25)), v62, v24 * v24 * (v25 * 3.0)), v60, v24 * (v24 * v24));
          geom_cubic_bezier_tangent_at_2d();
        }
        v27 = v26;
        v23 = v61;
      }
      else
      {
        v65 = vaddq_f64(vmulq_n_f64(v59, v24), vmulq_n_f64(v58, v25));
        v27 = v23;
      }
      v28 = sqrt(vaddvq_f64(vmulq_f64(v27, v27)));
      if (fabs(v28) > 0.000001)
        v27 = vdivq_f64(v27, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28, 0));
      v30 = v8[2];
      v29 = v8[3];
      if (v30 >= v29 >> 1)
      {
        v50 = v27;
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v8);
        v27 = v50;
        v23 = v61;
        v8 = v34;
      }
      v8[2] = v30 + 1;
      *(float64x2_t *)&v8[2 * v30 + 4] = v65;
      if (v10)
      {
        v7 = v9[2];
        v31 = v9[3];
        v6 = v7 + 1;
        if (v7 < v31 >> 1)
          goto LABEL_40;
LABEL_43:
        v51 = v27;
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v6, 1, v9);
        v27 = v51;
        v23 = v61;
        v9 = v35;
        goto LABEL_40;
      }
      v32 = sqrt(vaddvq_f64(vmulq_f64(v27, v27)));
      v7 = v9[2];
      v31 = v9[3];
      v33 = v31 >> 1;
      v6 = v7 + 1;
      if (fabs(v32) <= 0.000001)
      {
        if (v33 > v7)
          goto LABEL_40;
        goto LABEL_43;
      }
      if (v33 <= v7)
      {
        v52 = v27;
        v66 = v32;
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v7 + 1, 1, v9);
        v32 = v66;
        v27 = v52;
        v23 = v61;
        v9 = v36;
      }
      v27 = vdivq_f64(vaddq_f64(v57, v27), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0));
LABEL_40:
      v9[2] = v6;
      a5 = (unint64_t)&v9[2 * v7];
      *(float64x2_t *)(a5 + 32) = v27;
      if (!(_DWORD)v5)
      {
        *(_QWORD *)a3 = v9;
        *(_QWORD *)a2 = v8;
        goto LABEL_49;
      }
      ++v10;
    }
    while (a4 != v10);
    *(_QWORD *)a3 = v9;
    *(_QWORD *)a2 = v8;
    if ((_DWORD)v5 == 2)
      geom_cubic_bezier_tangent_at_2d();
    else
      geom_quadratic_bezier_tangent_at_2d();
    v23 = v37;
LABEL_49:
    v38 = sqrt(vaddvq_f64(vmulq_f64(v23, v23)));
    if (fabs(v38) > 0.000001)
    {
      v57 = vdivq_f64(v23, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v38, 0));
      if (v20 != v12)
        continue;
    }
    else
    {
      v57 = v23;
      if (v20 != v12)
        continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  v39 = (uint64_t *)(v53 + 16);
  v40 = (unint64_t *)(v53 + 24);
  v41 = *(unsigned __int8 *)(v53 + 64);
  if (v41 == 1)
    v42 = (const double *)(v53 + 40);
  else
    v42 = (const double *)(v53 + 56);
  if (v41 == 1)
    result = (_QWORD *)(v53 + 32);
  else
    result = (_QWORD *)(v53 + 48);
  if (*(_BYTE *)(v53 + 64))
    v43 = v42;
  else
    v43 = (const double *)(v53 + 24);
  if (*(_BYTE *)(v53 + 64))
    v44 = (float64_t *)result;
  else
    v44 = (float64_t *)(v53 + 16);
  v45 = vld1q_dup_f64(v43);
  v45.f64[0] = *v44;
  v46 = vsubq_f64(v54[2], v45);
  if (sqrt(vaddvq_f64(vmulq_f64(v46, v46))) > 0.000001)
  {
    if (*(_BYTE *)(v53 + 64))
    {
      v40 = (unint64_t *)(v53 + 40);
      v39 = (uint64_t *)(v53 + 32);
      if (v41 != 1)
      {
        v40 = (unint64_t *)(v53 + 56);
        v39 = (uint64_t *)(v53 + 48);
      }
    }
    v5 = *v39;
    v7 = *v40;
    v10 = v8[2];
    a5 = v8[3];
    v6 = v10 + 1;
    if (v10 < a5 >> 1)
    {
LABEL_68:
      v8[2] = v6;
      v47 = &v8[2 * v10];
      v47[4] = v5;
      v47[5] = v7;
      *(_QWORD *)a2 = v8;
      v49 = v9[2];
      v48 = v9[3];
      if (v49 >= v48 >> 1)
      {
        result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v9);
        v9 = result;
      }
      v9[2] = v49 + 1;
      *(float64x2_t *)&v9[2 * v49 + 4] = v57;
      *(_QWORD *)a3 = v9;
      return result;
    }
LABEL_77:
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(a5 > 1), v6, 1, v8);
    v8 = result;
    goto LABEL_68;
  }
  return result;
}

double TesselatedShape.extractPreInset(frontFace:sweepCurve:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int64_t v22;
  __int128 *v23;
  unint64_t v24;
  int64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  unint64_t v32;
  float v33;
  float v34;
  float32x4_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  double result;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  char v58;
  float32x4_t v59;
  __int128 v60;
  __int128 v61;
  float32x4_t v62;
  __int128 v63;
  __int128 v64;
  float32x4_t v65;
  __int128 v66;
  __int128 v67;
  float32x4_t v68;
  __int128 v69;
  _QWORD v70[5];
  _BYTE v71[64];
  char v72;
  char v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[12];

  v9 = *(_QWORD *)(v4 + 16);
  if (!v9)
  {
    __break(1u);
LABEL_32:
    swift_once();
    goto LABEL_16;
  }
  v3 = a3;
  if (!*(_QWORD *)(v9 + 16))
  {
    *(_QWORD *)(a3 + 96) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  v10 = (uint64_t *)v4;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v76 = 0xD000000000000011;
  v77 = 0x800000021BE931D0;
  v54 = a1;
  if ((a1 & 1) != 0)
    v13 = 0x746E6F7246;
  else
    v13 = 1801675074;
  if ((a1 & 1) != 0)
    v14 = 0xE500000000000000;
  else
    v14 = 0xE400000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17 = MEMORY[0x24BEE4AF8];
  v55 = v77;
  v56 = v76;
  v78 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = -1;
  v84 = 0u;
  v85 = 0u;
  v86 = 0;
  specialized static TesselatedShape.endcapTransform(frontFace:sweepCurve:)(a1 & 1, a2);
  v59 = v18;
  v62 = v19;
  v65 = v20;
  v68 = v21;
  v87 = *v10;
  v22 = *(_QWORD *)(v87 + 16);
  if (v22)
  {
    v88[0] = v17;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    v23 = (__int128 *)(v87 + 32);
    v24 = *(_QWORD *)(v17 + 16);
    v25 = v22;
    v26 = 0uLL;
    v28 = v65;
    v27 = v68;
    v30 = v59;
    v29 = v62;
    do
    {
      v31 = *v23;
      v88[0] = v17;
      v32 = *(_QWORD *)(v17 + 24);
      if (v24 >= v32 >> 1)
      {
        v57 = v31;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v24 + 1, 1);
        v31 = v57;
        v30 = v59;
        v29 = v62;
        v28 = v65;
        v27 = v68;
        v26 = 0uLL;
        v17 = v88[0];
      }
      v33 = *(double *)&v31;
      v34 = *((double *)&v31 + 1);
      v35 = vaddq_f32(v27, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v30, v33), v28, v34), v26, v29));
      v35.i32[3] = 0;
      *(_QWORD *)(v17 + 16) = v24 + 1;
      *(float32x4_t *)(v17 + 16 * v24 + 32) = v35;
      ++v23;
      ++v24;
      --v25;
    }
    while (v25);
    outlined release of [String : String]((uint64_t)&v87);
  }
  specialized MeshBuffer.init<A>(_:)(v17, (uint64_t)v88);
  specialized MeshBufferContainer.positions.setter((uint64_t)v88);
  outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v88);
  v36 = (__n128)vmlaq_f32(vaddq_f32(v62, vmlaq_f32(vmulq_f32(v59, (float32x4_t)0), (float32x4_t)0, v65)), (float32x4_t)0, v68);
  v36.n128_u32[3] = 0;
  v52 = v22;
  v37 = specialized Array.init(repeating:count:)(v22, v36);
  specialized MeshBuffer.init<A>(_:)(v37, (uint64_t)v71);
  v53 = *(_QWORD *)v71;
  v64 = *(_OWORD *)&v71[24];
  v67 = *(_OWORD *)&v71[8];
  v61 = *(_OWORD *)&v71[40];
  v8 = *(_QWORD *)&v71[56];
  v6 = v72;
  v7 = v73;
  v5 = v74;
  v58 = v75;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
  v70[3] = v51;
  v70[4] = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
  v4 = swift_allocObject();
  v70[0] = v4;
  v38 = one-time initialization token for triangleIndices;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v38 != -1)
    goto LABEL_32;
LABEL_16:
  v39 = 2;
  if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576
    || *(_QWORD *)algn_2551A1378 != 0xEC0000006C616D72)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      v39 = 2;
    else
      v39 = v58;
  }
  strcpy((char *)(v4 + 16), "vertexNormal");
  *(_BYTE *)(v4 + 29) = 0;
  *(_WORD *)(v4 + 30) = -5120;
  *(_WORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 48) = v39;
  *(_BYTE *)(v4 + 49) = v6;
  *(_BYTE *)(v4 + 50) = v7;
  *(_QWORD *)(v4 + 56) = v53;
  *(_OWORD *)(v4 + 64) = v67;
  *(_OWORD *)(v4 + 80) = v64;
  *(_OWORD *)(v4 + 96) = v61;
  *(_QWORD *)(v4 + 112) = v8;
  *(_BYTE *)(v4 + 120) = v6;
  *(_BYTE *)(v4 + 121) = v7;
  *(_QWORD *)(v4 + 128) = v5;
  *(_BYTE *)(v4 + 136) = v58;
  specialized Dictionary.subscript.setter((uint64_t)v70, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if ((v54 & 1) != 0)
  {
    v40 = swift_bridgeObjectRetain();
  }
  else
  {
    v42 = specialized Array.init(repeating:count:)(v52, (__n128)xmmword_21BE51690);
    specialized MeshBuffer.init<A>(_:)(v42, (uint64_t)v71);
    v66 = *(_OWORD *)&v71[16];
    v69 = *(_OWORD *)v71;
    v60 = *(_OWORD *)&v71[48];
    v63 = *(_OWORD *)&v71[32];
    v43 = v72;
    v44 = v73;
    v45 = v74;
    v46 = v75;
    *(_QWORD *)&v71[24] = v51;
    *(_QWORD *)&v71[32] = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v47 = swift_allocObject();
    *(_QWORD *)v71 = v47;
    v48 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576
      || *(_QWORD *)algn_2551A1378 != 0xEC0000006C616D72)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        v48 = 2;
      else
        v48 = v46;
    }
    strcpy((char *)(v47 + 16), "vertexNormal");
    *(_BYTE *)(v47 + 29) = 0;
    *(_WORD *)(v47 + 30) = -5120;
    *(_WORD *)(v47 + 32) = 0;
    *(_QWORD *)(v47 + 40) = v45;
    *(_BYTE *)(v47 + 48) = v48;
    *(_BYTE *)(v47 + 49) = v43;
    *(_BYTE *)(v47 + 50) = v44;
    *(_OWORD *)(v47 + 56) = v69;
    *(_OWORD *)(v47 + 72) = v66;
    *(_OWORD *)(v47 + 88) = v63;
    *(_OWORD *)(v47 + 104) = v60;
    *(_BYTE *)(v47 + 120) = v43;
    *(_BYTE *)(v47 + 121) = v44;
    *(_QWORD *)(v47 + 128) = v45;
    *(_BYTE *)(v47 + 136) = v46;
    specialized Dictionary.subscript.setter((uint64_t)v71, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
    v49 = swift_bridgeObjectRetain();
    v40 = specialized Sequence.reversed()(v49);
  }
  v50 = v78;
  *(_QWORD *)v3 = v56;
  *(_QWORD *)(v3 + 8) = v55;
  *(_QWORD *)(v3 + 16) = v50;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = v40;
  result = 0.0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  return result;
}

uint64_t TesselatedShape.extractPostInset(frontFace:sweepCurve:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  int64_t v20;
  __int128 *v21;
  int32x2_t v22;
  float32x4_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __int128 v29;
  unint64_t v30;
  float v31;
  float32x4_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  float32x4_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  float32x4_t v73;
  float32x4_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  float32x4_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  float32x4_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD v86[5];
  _BYTE v87[64];
  char v88;
  char v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[16];
  _QWORD v105[11];
  double v106;
  char v107;

  v5 = *(_QWORD *)(v3 + 40);
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = v3;
    v8 = result;
    outlined init with take of Double?(v3 + 64, (uint64_t)v104);
    result = outlined init with take of Double?((uint64_t)v104, (uint64_t)&v106);
    if ((v107 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v9 = v106;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v92 = 0xD000000000000012;
      v93 = 0x800000021BE931B0;
      v67 = v8;
      if ((v8 & 1) != 0)
        v10 = 0x746E6F7246;
      else
        v10 = 1801675074;
      if ((v8 & 1) != 0)
        v11 = 0xE500000000000000;
      else
        v11 = 0xE400000000000000;
      v12 = v11;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 41;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14 = MEMORY[0x24BEE4AF8];
      v94 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = -1;
      v100 = 0u;
      v101 = 0u;
      v102 = 0;
      specialized static TesselatedShape.endcapTransform(frontFace:sweepCurve:)(v8 & 1, a2);
      v69 = v15;
      v74 = v17;
      v78 = v16;
      v82 = v18;
      v19 = *(_QWORD *)(v6 + 32);
      v103 = v19;
      v20 = *(_QWORD *)(v19 + 16);
      v68 = v20;
      v63 = v92;
      v64 = v5;
      v62 = v93;
      if (v20)
      {
        v105[0] = v14;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
        v14 = v105[0];
        v21 = (__int128 *)(v19 + 32);
        *(float *)v22.i32 = v9;
        v23 = (float32x4_t)vdupq_lane_s32(v22, 0);
        v24 = *(_QWORD *)(v105[0] + 16);
        v26 = v78;
        v25 = v82;
        v27 = v74;
        v28 = v69;
        do
        {
          v29 = *v21;
          v105[0] = v14;
          v30 = *(_QWORD *)(v14 + 24);
          if (v24 >= v30 >> 1)
          {
            v73 = v23;
            v65 = v29;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v24 + 1, 1);
            v29 = v65;
            v28 = v69;
            v23 = v73;
            v27 = v74;
            v26 = v78;
            v25 = v82;
            v14 = v105[0];
          }
          *(float *)&v29 = *(double *)&v29;
          v31 = *((double *)&v29 + 1);
          v32 = vaddq_f32(v25, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v28, *(float *)&v29), v26, v31), v23, v27));
          v32.i32[3] = 0;
          *(_QWORD *)(v14 + 16) = v24 + 1;
          *(float32x4_t *)(v14 + 16 * v24 + 32) = v32;
          ++v21;
          ++v24;
          --v20;
        }
        while (v20);
        outlined release of [String : String]((uint64_t)&v103);
        v20 = v68;
      }
      specialized MeshBuffer.init<A>(_:)(v14, (uint64_t)v105);
      specialized MeshBufferContainer.positions.setter((uint64_t)v105);
      outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v105);
      v33 = (__n128)vmlaq_f32(vaddq_f32(v74, vmlaq_f32(vmulq_f32(v69, (float32x4_t)0), (float32x4_t)0, v78)), (float32x4_t)0, v82);
      v33.n128_u32[3] = 0;
      v34 = specialized Array.init(repeating:count:)(v20, v33);
      specialized MeshBuffer.init<A>(_:)(v34, (uint64_t)v87);
      v66 = *(_QWORD *)v87;
      v79 = *(_OWORD *)&v87[24];
      v83 = *(_OWORD *)&v87[8];
      v75 = *(_OWORD *)&v87[40];
      v35 = *(_QWORD *)&v87[56];
      v36 = v88;
      v37 = v89;
      v38 = v90;
      v70 = v91;
      v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
      v86[3] = v61;
      v86[4] = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      v39 = swift_allocObject();
      v86[0] = v39;
      v40 = one-time initialization token for triangleIndices;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if (v40 != -1)
        swift_once();
      v41 = 2;
      if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576
        || *(_QWORD *)algn_2551A1378 != 0xEC0000006C616D72)
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          v41 = 2;
        else
          v41 = v70;
      }
      strcpy((char *)(v39 + 16), "vertexNormal");
      *(_BYTE *)(v39 + 29) = 0;
      *(_WORD *)(v39 + 30) = -5120;
      *(_WORD *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 40) = v38;
      *(_BYTE *)(v39 + 48) = v41;
      *(_BYTE *)(v39 + 49) = v36;
      *(_BYTE *)(v39 + 50) = v37;
      *(_QWORD *)(v39 + 56) = v66;
      *(_OWORD *)(v39 + 64) = v83;
      *(_OWORD *)(v39 + 80) = v79;
      *(_OWORD *)(v39 + 96) = v75;
      *(_QWORD *)(v39 + 112) = v35;
      *(_BYTE *)(v39 + 120) = v36;
      *(_BYTE *)(v39 + 121) = v37;
      *(_QWORD *)(v39 + 128) = v38;
      *(_BYTE *)(v39 + 136) = v70;
      specialized Dictionary.subscript.setter((uint64_t)v86, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if ((v67 & 1) != 0)
      {
        v42 = specialized Array.init(repeating:count:)(v68, *(__n128 *)&zmmword_21BE41220[32]);
        specialized MeshBuffer.init<A>(_:)(v42, (uint64_t)v87);
        v80 = *(_OWORD *)&v87[16];
        v84 = *(_OWORD *)v87;
        v76 = *(_OWORD *)&v87[32];
        v71 = *(_OWORD *)&v87[48];
        v43 = v88;
        v44 = v89;
        v45 = v90;
        v46 = v91;
        *(_QWORD *)&v87[24] = v61;
        *(_QWORD *)&v87[32] = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
        v47 = swift_allocObject();
        *(_QWORD *)v87 = v47;
        v48 = 2;
        v50 = v63;
        v49 = v64;
        v51 = v62;
        if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576
          || *(_QWORD *)algn_2551A1378 != 0xEC0000006C616D72)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            v48 = 2;
          else
            v48 = v46;
        }
        strcpy((char *)(v47 + 16), "vertexNormal");
        *(_BYTE *)(v47 + 29) = 0;
        *(_WORD *)(v47 + 30) = -5120;
        *(_WORD *)(v47 + 32) = 0;
        *(_QWORD *)(v47 + 40) = v45;
        *(_BYTE *)(v47 + 48) = v48;
        *(_BYTE *)(v47 + 49) = v43;
        *(_BYTE *)(v47 + 50) = v44;
        *(_OWORD *)(v47 + 56) = v84;
        *(_OWORD *)(v47 + 72) = v80;
        *(_OWORD *)(v47 + 88) = v76;
        *(_OWORD *)(v47 + 104) = v71;
        *(_BYTE *)(v47 + 120) = v43;
        *(_BYTE *)(v47 + 121) = v44;
        *(_QWORD *)(v47 + 128) = v45;
        *(_BYTE *)(v47 + 136) = v46;
        specialized Dictionary.subscript.setter((uint64_t)v87, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
        result = swift_bridgeObjectRetain();
      }
      else
      {
        v52 = specialized Array.init(repeating:count:)(v68, (__n128)xmmword_21BE51690);
        specialized MeshBuffer.init<A>(_:)(v52, (uint64_t)v87);
        v81 = *(_OWORD *)&v87[16];
        v85 = *(_OWORD *)v87;
        v77 = *(_OWORD *)&v87[32];
        v72 = *(_OWORD *)&v87[48];
        v53 = v88;
        v54 = v89;
        v55 = v90;
        v56 = v91;
        *(_QWORD *)&v87[24] = v61;
        *(_QWORD *)&v87[32] = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
        v57 = swift_allocObject();
        *(_QWORD *)v87 = v57;
        v58 = 2;
        v50 = v63;
        v51 = v62;
        if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576
          || *(_QWORD *)algn_2551A1378 != 0xEC0000006C616D72)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            v58 = 2;
          else
            v58 = v56;
        }
        strcpy((char *)(v57 + 16), "vertexNormal");
        *(_BYTE *)(v57 + 29) = 0;
        *(_WORD *)(v57 + 30) = -5120;
        *(_WORD *)(v57 + 32) = 0;
        *(_QWORD *)(v57 + 40) = v55;
        *(_BYTE *)(v57 + 48) = v58;
        *(_BYTE *)(v57 + 49) = v53;
        *(_BYTE *)(v57 + 50) = v54;
        *(_OWORD *)(v57 + 56) = v85;
        *(_OWORD *)(v57 + 72) = v81;
        *(_OWORD *)(v57 + 88) = v77;
        *(_OWORD *)(v57 + 104) = v72;
        *(_BYTE *)(v57 + 120) = v53;
        *(_BYTE *)(v57 + 121) = v54;
        *(_QWORD *)(v57 + 128) = v55;
        *(_BYTE *)(v57 + 136) = v56;
        specialized Dictionary.subscript.setter((uint64_t)v87, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
        v59 = swift_bridgeObjectRetain();
        result = specialized Sequence.reversed()(v59);
        v49 = result;
      }
      v60 = v94;
      *(_QWORD *)a3 = v50;
      *(_QWORD *)(a3 + 8) = v51;
      *(_QWORD *)(a3 + 16) = v60;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = v49;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_QWORD *)(a3 + 96) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t TesselatedShape.extractJoinerPatch(frontFace:sweepCurve:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  double *v23;
  unint64_t v24;
  __int128 v25;
  double v26;
  unint64_t v27;
  float v28;
  float v29;
  float v30;
  float32x4_t v31;
  __int128 v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v39[12];

  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 48);
    v38 = v5;
    v6 = *(_QWORD *)(v5 + 16);
    if (v6 && (v7 = *(_QWORD *)(v3 + 56), *(_QWORD *)(v7 + 16)))
    {
      v9 = result;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
        v10 = 0x746E6F7246;
      else
        v10 = 1801675074;
      if ((v9 & 1) != 0)
        v11 = 0xE500000000000000;
      else
        v11 = 0xE400000000000000;
      v12 = v11;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 41;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14 = MEMORY[0x24BEE4AF8];
      v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      specialized static TesselatedShape.endcapTransform(frontFace:sweepCurve:)(v9 & 1, a2);
      v35 = v16;
      v36 = v15;
      v33 = v18;
      v34 = v17;
      v39[0] = v14;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      v20 = v33;
      v19 = v34;
      v22 = v35;
      v21 = v36;
      v23 = (double *)(v5 + 32);
      v24 = *(_QWORD *)(v14 + 16);
      do
      {
        v25 = *(_OWORD *)v23;
        v26 = v23[2];
        v39[0] = v14;
        v27 = *(_QWORD *)(v14 + 24);
        if (v24 >= v27 >> 1)
        {
          v32 = v25;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v24 + 1, 1);
          v25 = v32;
          v20 = v33;
          v19 = v34;
          v22 = v35;
          v21 = v36;
          v14 = v39[0];
        }
        v28 = *(double *)&v25;
        v29 = *((double *)&v25 + 1);
        v30 = v26;
        v31 = vaddq_f32(v20, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v21, v28), v22, v29), v19, v30));
        v31.i32[3] = 0;
        *(_QWORD *)(v14 + 16) = v24 + 1;
        *(float32x4_t *)(v14 + 16 * v24 + 32) = v31;
        v23 += 4;
        ++v24;
        --v6;
      }
      while (v6);
      outlined release of [String : String]((uint64_t)&v38);
      specialized MeshBuffer.init<A>(_:)(v14, (uint64_t)v39);
      specialized MeshBufferContainer.positions.setter((uint64_t)v39);
      outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v39);
      result = swift_bridgeObjectRetain();
      if ((v9 & 1) == 0)
      {
        result = specialized Sequence.reversed()(v7);
        v7 = result;
      }
      *(_QWORD *)a3 = 0xD00000000000001ALL;
      *(_QWORD *)(a3 + 8) = 0x800000021BE93190;
      *(_QWORD *)(a3 + 16) = v37;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = v7;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_QWORD *)(a3 + 96) = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 96) = 0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  return result;
}

uint64_t TesselatedShape.extractExtrusion(sweepCurve:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26[5];
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36[12];

  v5 = *v2;
  v6 = v2[1];
  v7 = *(_QWORD *)(*v2 + 16);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = v7 < v8;
  if (v7 != v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v7)
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v10 = result;
  v26[3] = 0x7845206570616853;
  v26[4] = 0xEF6E6F6973757274;
  v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = -1;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySays5SIMD2VySdGGAKG_17RealityFoundation13CurveExtruderV10ShapePointVs5NeverOTg504_s17g90Foundation15TesselatedShape33_958D9063BE5145611DD1DCE0DF8621CFLLV16extractExtrusion10sweepi51AA14MeshDescriptorVSgSaySo13simd_float4x4aG_tFAA0N8j4V0D5l3Vs5F16VySdG_ASt_tXEfU_Tf1cn_n(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v2[3];
  swift_bridgeObjectRetain();
  v13 = specialized CurveExtruder.init(shape:accumulatedOutlineIndexCount:)(v11, v12);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v10 + 16);
  v19 = *(_QWORD *)(v13 + 16);
  v20 = v19 * v18;
  v7 = (unsigned __int128)(v19 * (__int128)v18) >> 64;
  v9 = v7 < v20 >> 63;
  if (v7 != v20 >> 63)
    goto LABEL_18;
  v21 = *(_QWORD *)(v17 + 16);
  v22 = (v18 - 1) * v21;
  v7 = (unsigned __int128)((v18 - 1) * (__int128)v21) >> 64;
  v9 = v7 < v22 >> 63;
  if (v7 != v22 >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v20 < 0)
    goto LABEL_23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v3 + 16) = v20;
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  v26[0] = 0;
  v36[0] = v3 + 32;
  v36[1] = v20;
  closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(v36, v26, v20, v13, v15, v17, v10);
  v7 = v26[0];
  v9 = v20 < v26[0];
  if (v20 < v26[0])
  {
LABEL_20:
    __break(1u);
    if (!v9)
      goto LABEL_24;
    __break(1u);
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_24:
    *(_QWORD *)(v3 + 16) = v7;
    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  *(_QWORD *)(v3 + 16) = v26[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized MeshBuffer.init<A>(_:)(v3, (uint64_t)v36);
  specialized MeshBufferContainer.positions.setter((uint64_t)v36);
  outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v36);
  if (v22 < 0)
    goto LABEL_23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = MEMORY[0x24BEE4AF8];
  if (v22)
  {
    v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v24 + 16) = v22;
  }
  else
  {
    v24 = MEMORY[0x24BEE4AF8];
  }
  specialized CurveExtruder.populate(indexBuffer:curveLength:)(v24 + 32, v22, v18, v13, v17);
  *(_QWORD *)(v24 + 16) = v22;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  result = swift_bridgeObjectRelease();
  v25 = v27;
  *(_OWORD *)a2 = xmmword_21BE7BB00;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v23;
  *(_QWORD *)(a2 + 48) = v24;
  *(_QWORD *)(a2 + 56) = 2;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  return result;
}

uint64_t closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  if (a3 < 0)
    goto LABEL_18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = a3;
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
  }
  v37 = 0;
  v28 = v8 + 32;
  *(_QWORD *)&v29 = a3;
  closure #1 in closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(&v28, &v37, a3, a4, a5, a6, a1, a7);
  if (v7)
  {
    v18 = v37;
    if (v37 <= a3)
    {
LABEL_19:
      *(_QWORD *)(v8 + 16) = v18;
      result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_19;
  }
  if (v37 > a3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v8 + 16) = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized MeshBuffer.init<A>(_:)(v8, (uint64_t)&v28);
    v22 = v28;
    v26 = v30;
    v27 = v29;
    v25 = v31;
    a6 = v32;
    v20 = v34;
    v21 = v33;
    v19 = v35;
    v24 = v36;
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
    *((_QWORD *)&v30 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v8 = swift_allocObject();
    v28 = v8;
    v15 = one-time initialization token for triangleIndices;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v15 == -1)
      goto LABEL_8;
  }
  swift_once();
LABEL_8:
  v16 = 2;
  if (static MeshBuffers.Identifier.triangleIndices != 0x6154786574726576
    || *(_QWORD *)algn_2551A1378 != 0xED0000746E65676ELL)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      v16 = 2;
    else
      v16 = v24;
  }
  strcpy((char *)(v8 + 16), "vertexTangent");
  *(_WORD *)(v8 + 30) = -4864;
  *(_WORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v19;
  *(_BYTE *)(v8 + 48) = v16;
  *(_BYTE *)(v8 + 49) = v21;
  *(_BYTE *)(v8 + 50) = v20;
  *(_QWORD *)(v8 + 56) = v22;
  *(_OWORD *)(v8 + 64) = v27;
  *(_OWORD *)(v8 + 80) = v26;
  *(_OWORD *)(v8 + 96) = v25;
  *(_QWORD *)(v8 + 112) = a6;
  *(_BYTE *)(v8 + 120) = v21;
  *(_BYTE *)(v8 + 121) = v20;
  *(_QWORD *)(v8 + 128) = v19;
  *(_BYTE *)(v8 + 136) = v24;
  specialized Dictionary.subscript.setter((uint64_t)&v28, 0x6154786574726576, 0xED0000746E65676ELL, 0);
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = a3;
  return result;
}

uint64_t closure #1 in closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v36;
  int v37;

  if (a3 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v13 + 16) = a3;
    }
    else
    {
      v13 = MEMORY[0x24BEE4AF8];
    }
    specialized CurveExtruder.populate(positionBuffer:tangentBuffer:bitangentBuffer:sweepCurve:)(*a7, a7[1], *a1, a1[1], v13 + 32, a3, a8, a4);
    *(_QWORD *)(v13 + 16) = a3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized MeshBuffer.init<A>(_:)(v13, (uint64_t)&v27);
    v22 = v27;
    v25 = v29;
    v26 = v28;
    v24 = v30;
    v14 = v31;
    v36 = v32;
    v21 = v33;
    v20 = v34;
    v37 = v35;
    *(_QWORD *)&v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
    *((_QWORD *)&v29 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v15 = swift_allocObject();
    v27 = v15;
    v16 = one-time initialization token for triangleIndices;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v16 != -1)
      swift_once();
    v17 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != 0x6942786574726576
      || *(_QWORD *)algn_2551A1378 != 0xEF746E65676E6174)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        v17 = 2;
      else
        v17 = v37;
    }
    *(_QWORD *)(v15 + 16) = 0x6942786574726576;
    *(_QWORD *)(v15 + 24) = 0xEF746E65676E6174;
    *(_WORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = v20;
    *(_BYTE *)(v15 + 48) = v17;
    v18 = v36;
    *(_BYTE *)(v15 + 49) = v36;
    *(_BYTE *)(v15 + 50) = v21;
    *(_QWORD *)(v15 + 56) = v22;
    *(_OWORD *)(v15 + 64) = v26;
    *(_OWORD *)(v15 + 80) = v25;
    *(_OWORD *)(v15 + 96) = v24;
    *(_QWORD *)(v15 + 112) = v14;
    *(_BYTE *)(v15 + 120) = v18;
    *(_BYTE *)(v15 + 121) = v21;
    *(_QWORD *)(v15 + 128) = v20;
    *(_BYTE *)(v15 + 136) = v37;
    specialized Dictionary.subscript.setter((uint64_t)&v27, 0x6942786574726576, 0xEF746E65676E6174, 0);
    swift_release();
    swift_release();
    swift_release();
    result = swift_release();
    *a2 = a3;
  }
  return result;
}

__n128 TesselatedShape.extractAll(extrusionMethod:chamferMode:materialAssignment:)@<Q0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, float32x4_t a8@<Q3>, float32x4_t a9@<Q4>)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  __n128 result;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[24];
  uint64_t v81;
  char v82;
  unsigned int v83;
  unsigned __int16 v84;
  unsigned __int8 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __n128 v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  _BYTE v95[16];
  _BYTE v96[24];

  v11 = *a1;
  v12 = *((unsigned __int8 *)a1 + 8);
  v13 = *a2;
  v34 = *a3;
  v35 = a3[1];
  v36 = a3[2];
  v37 = a3[3];
  v38 = a3[4];
  v92 = 0;
  v91 = 0;
  v90 = 0;
  *(_QWORD *)v80 = v11;
  v80[8] = v12;
  MeshResource.ShapeExtrusionOptions.ExtrusionMethod.extractSweepCurve()(a5, a6, a7, a8, a9);
  v15 = v14;
  if (v12)
  {
    if (*(_QWORD *)(v11 + 16) > 1uLL)
    {
LABEL_3:
      TesselatedShape.extractExtrusion(sweepCurve:)(v14, (uint64_t)v80);
      v77 = *(_QWORD *)&v80[8];
      v66 = *(_QWORD *)v80;
      v67 = *(_QWORD *)&v80[16];
      v79 = v81;
      v68 = v86;
      v69 = v87;
      v71 = v88;
      v92 = v82;
      v33 = v82 & 1;
      v72 = v89.n128_u64[1];
      v70 = v89.n128_u64[0];
      v73 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      goto LABEL_6;
    }
  }
  else if (COERCE_FLOAT(v11 & 0x7FFFFFFF) > 0.00001)
  {
    goto LABEL_3;
  }
  v33 = 0;
  v72 = 0;
  v73 = 0;
  v70 = 0;
  v71 = 0uLL;
  v69 = 0uLL;
  v68 = 0uLL;
  v79 = 0;
  v66 = 0;
  v67 = 0;
  v77 = 0;
LABEL_6:
  outlined init with take of Double?(v9 + 64, (uint64_t)v95);
  outlined init with take of Double?((uint64_t)v95, (uint64_t)v96);
  if ((v96[8] & 1) != 0)
  {
    TesselatedShape.extractPreInset(frontFace:sweepCurve:)(1, v15, (uint64_t)v80);
    v16 = *(_QWORD *)&v80[8];
    v64 = *(_QWORD *)&v80[16];
    v65 = *(_QWORD *)v80;
    v63 = v81;
    v17 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
    v55 = *((_QWORD *)&v87 + 1);
    v56 = v87;
    v59 = v88;
    v60 = v86;
    v57 = *((_QWORD *)&v88 + 1);
    v58 = *((_QWORD *)&v86 + 1);
    v53 = v89.n128_u64[1];
    v54 = v89.n128_u64[0];
    v32 = v82;
    v94 = v82;
    TesselatedShape.extractPreInset(frontFace:sweepCurve:)(0, v15, (uint64_t)v80);
    swift_bridgeObjectRelease();
    v18 = 0;
    v31 = 0;
    v61 = 0;
    v62 = 0;
    v78 = 0;
    v19 = 0;
    v20 = 0;
    v75 = *(_OWORD *)v80;
    v47 = *(_QWORD *)&v80[16];
    v48 = 0;
    v21 = v81;
    v22 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
    v23 = v82;
    v45 = v87;
    v46 = v86;
    v76 = 0u;
    v51 = 0u;
    v52 = 0u;
    v43 = v89;
    v44 = v88;
    v93 = v82;
    v49 = 0u;
    v50 = 0u;
    v74 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v24 = v16;
    if (v16)
    {
LABEL_8:
      outlined consume of MeshDescriptor.Materials(v63, v32 & 1);
      v94 = 0;
      v25 = v34;
      goto LABEL_17;
    }
  }
  else
  {
    if ((v13 | 2) == 2)
    {
      TesselatedShape.extractPostInset(frontFace:sweepCurve:)(1, v15, (uint64_t)v80);
      v26 = *(_QWORD *)&v80[8];
      v64 = *(_QWORD *)&v80[16];
      v65 = *(_QWORD *)v80;
      v63 = v81;
      v17 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      v55 = *((_QWORD *)&v87 + 1);
      v56 = v87;
      v59 = v88;
      v60 = v86;
      v57 = *((_QWORD *)&v88 + 1);
      v58 = *((_QWORD *)&v86 + 1);
      v53 = v89.n128_u64[1];
      v54 = v89.n128_u64[0];
      v32 = v82;
      v94 = v82;
      TesselatedShape.extractJoinerPatch(frontFace:sweepCurve:)(1, v15, (uint64_t)v80);
      v76 = *(_OWORD *)&v80[8];
      v78 = v81;
      v61 = *(_QWORD *)v80;
      v62 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      v51 = v87;
      v52 = v86;
      v49 = v89;
      v50 = v88;
      v91 = v82;
      BYTE4(v31) = v82 & 1;
    }
    else
    {
      TesselatedShape.extractPreInset(frontFace:sweepCurve:)(1, v15, (uint64_t)v80);
      BYTE4(v31) = 0;
      v61 = 0;
      v62 = 0;
      v78 = 0;
      v26 = *(_QWORD *)&v80[8];
      v64 = *(_QWORD *)&v80[16];
      v65 = *(_QWORD *)v80;
      v63 = v81;
      v17 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      v55 = *((_QWORD *)&v87 + 1);
      v56 = v87;
      v59 = v88;
      v60 = v86;
      v57 = *((_QWORD *)&v88 + 1);
      v58 = *((_QWORD *)&v86 + 1);
      v76 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = v89.n128_u64[1];
      v54 = v89.n128_u64[0];
      v49 = 0u;
      v50 = 0u;
      v32 = v82;
      v94 = v82;
    }
    if ((v13 - 1) > 1)
    {
      TesselatedShape.extractPreInset(frontFace:sweepCurve:)(0, v15, (uint64_t)v80);
      swift_bridgeObjectRelease();
      v18 = 0;
      LOBYTE(v31) = 0;
      v19 = 0;
      v20 = 0;
      v75 = *(_OWORD *)v80;
      v47 = *(_QWORD *)&v80[16];
      v48 = 0;
      v21 = v81;
      v22 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      v23 = v82;
      v45 = v87;
      v46 = v86;
      v43 = v89;
      v44 = v88;
      v93 = v82;
      v74 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
    }
    else
    {
      TesselatedShape.extractPostInset(frontFace:sweepCurve:)(0, v15, (uint64_t)v80);
      v75 = *(_OWORD *)v80;
      v47 = *(_QWORD *)&v80[16];
      v21 = v81;
      v23 = v82;
      v22 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      v45 = v87;
      v46 = v86;
      v43 = v89;
      v44 = v88;
      v93 = v82;
      TesselatedShape.extractJoinerPatch(frontFace:sweepCurve:)(0, v15, (uint64_t)v80);
      swift_bridgeObjectRelease();
      v48 = *(_QWORD *)v80;
      v74 = *(_OWORD *)&v80[8];
      v20 = v81;
      v18 = v82;
      v19 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      v41 = v87;
      v42 = v86;
      v39 = v89;
      v40 = v88;
      v90 = v82;
      LOBYTE(v31) = v82 & 1;
    }
    v24 = v26;
    if (v26)
      goto LABEL_8;
  }
  v25 = v63;
LABEL_17:
  if (*((_QWORD *)&v75 + 1))
  {
    outlined consume of MeshDescriptor.Materials(v21, v23 & 1);
    v93 = 0;
    v21 = v35;
  }
  if (v77)
  {
    outlined consume of MeshDescriptor.Materials(v79, v33);
    v92 = 0;
    v79 = v36;
  }
  if ((_QWORD)v76)
  {
    outlined consume of MeshDescriptor.Materials(v78, SBYTE4(v31));
    v91 = 0;
    v78 = v37;
  }
  if ((_QWORD)v74)
  {
    outlined consume of MeshDescriptor.Materials(v20, v31);
    v18 = 0;
    v90 = 0;
    v20 = v38;
  }
  *(_QWORD *)a4 = v65;
  *(_QWORD *)(a4 + 8) = v24;
  *(_QWORD *)(a4 + 16) = v64;
  *(_QWORD *)(a4 + 24) = v25;
  *(_QWORD *)(a4 + 40) = v60;
  *(_QWORD *)(a4 + 48) = v58;
  *(_QWORD *)(a4 + 56) = v56;
  *(_QWORD *)(a4 + 64) = v55;
  *(_BYTE *)(a4 + 32) = v94;
  *(_BYTE *)(a4 + 39) = BYTE6(v17);
  v27 = v93;
  *(_DWORD *)(a4 + 33) = v17;
  *(_WORD *)(a4 + 37) = WORD2(v17);
  v28 = v92;
  *(_QWORD *)(a4 + 72) = v59;
  *(_QWORD *)(a4 + 80) = v57;
  v29 = v91;
  *(_QWORD *)(a4 + 88) = v54;
  *(_QWORD *)(a4 + 96) = v53;
  *(_OWORD *)(a4 + 104) = v75;
  *(_QWORD *)(a4 + 120) = v47;
  *(_QWORD *)(a4 + 128) = v21;
  *(_BYTE *)(a4 + 136) = v27;
  *(_DWORD *)(a4 + 137) = v22;
  *(_BYTE *)(a4 + 143) = BYTE6(v22);
  *(_WORD *)(a4 + 141) = WORD2(v22);
  *(_OWORD *)(a4 + 144) = v46;
  *(_OWORD *)(a4 + 160) = v45;
  *(_OWORD *)(a4 + 176) = v44;
  *(__n128 *)(a4 + 192) = v43;
  *(_QWORD *)(a4 + 208) = v66;
  *(_QWORD *)(a4 + 216) = v77;
  *(_QWORD *)(a4 + 224) = v67;
  *(_QWORD *)(a4 + 232) = v79;
  *(_BYTE *)(a4 + 240) = v28;
  *(_DWORD *)(a4 + 241) = v73;
  *(_BYTE *)(a4 + 247) = BYTE6(v73);
  *(_WORD *)(a4 + 245) = WORD2(v73);
  *(_OWORD *)(a4 + 248) = v68;
  *(_OWORD *)(a4 + 264) = v69;
  *(_OWORD *)(a4 + 280) = v71;
  *(_QWORD *)(a4 + 296) = v70;
  *(_QWORD *)(a4 + 304) = v72;
  *(_QWORD *)(a4 + 312) = v61;
  *(_OWORD *)(a4 + 320) = v76;
  *(_QWORD *)(a4 + 336) = v78;
  *(_BYTE *)(a4 + 344) = v29;
  *(_BYTE *)(a4 + 351) = BYTE6(v62);
  *(_WORD *)(a4 + 349) = WORD2(v62);
  *(_DWORD *)(a4 + 345) = v62;
  *(_OWORD *)(a4 + 352) = v52;
  *(_OWORD *)(a4 + 368) = v51;
  *(_OWORD *)(a4 + 384) = v50;
  *(__n128 *)(a4 + 400) = v49;
  *(_QWORD *)(a4 + 416) = v48;
  *(_OWORD *)(a4 + 424) = v74;
  *(_QWORD *)(a4 + 440) = v20;
  *(_BYTE *)(a4 + 448) = v18;
  *(_BYTE *)(a4 + 455) = BYTE6(v19);
  *(_WORD *)(a4 + 453) = WORD2(v19);
  *(_DWORD *)(a4 + 449) = v19;
  *(_OWORD *)(a4 + 456) = v42;
  *(_OWORD *)(a4 + 472) = v41;
  *(_OWORD *)(a4 + 488) = v40;
  result = v39;
  *(__n128 *)(a4 + 504) = v39;
  return result;
}

void one-time initialization function for defaultChamferProfile()
{
  CGPath *v0;

  v0 = CGPathCreateMutable();
  CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();

  defaultChamferProfile = v0;
}

uint64_t $defer #1 () in static ExtrudedShapeDescriptor.compile(shapes:instances:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t j;

  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v3; ++i)
      RERelease();
    result = swift_bridgeObjectRelease();
  }
  v5 = *a2;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      for (j = 0; j != v6; ++j)
        RERelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void closure #2 in extrude(path:options:)(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  int64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  double v17;
  double v18;
  double v19;
  float32x4_t v20;
  float32x4_t v21;
  __int128 v22;
  int v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 v26;
  _BYTE v27[80];

  v11 = *(_QWORD *)(a1 + 8);
  v12 = *a2;
  v13 = *(float *)(a3 + 56);
  *(_QWORD *)&v22 = *(_QWORD *)(a3 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized TesselatedShape.init(shape:chamferProfile:chamferRadius:resolution:triangulatePreInset:)(v11, v12, (uint64_t *)&v22, a4, (uint64_t)v27, v13);
  if (v6)
  {
    *a5 = v6;
  }
  else
  {
    v14 = *(_QWORD *)a3;
    v15 = *(_BYTE *)(a3 + 8);
    v25 = v14;
    v26 = v15;
    v24 = *(_BYTE *)(a3 + 80);
    v16 = *(_DWORD *)(a3 + 100);
    v22 = *(_OWORD *)(a3 + 84);
    v23 = v16;
    outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v14, v15);
    TesselatedShape.extractAll(extrusionMethod:chamferMode:materialAssignment:)(&v25, &v24, (unsigned int *)&v22, a6, v17, v18, v19, v20, v21);
    outlined release of TesselatedShape((uint64_t)v27);
    outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v14, v15);
  }
}

void partial apply for closure #2 in extrude(path:options:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  closure #2 in extrude(path:options:)(a1, *(unint64_t **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), a2, a3);
}

unint64_t lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeExtrusionError and conformance ShapeExtrusionError;
  if (!lazy protocol witness table cache variable for type ShapeExtrusionError and conformance ShapeExtrusionError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShapeExtrusionError, &type metadata for ShapeExtrusionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeExtrusionError and conformance ShapeExtrusionError);
  }
  return result;
}

uint64_t outlined init with take of PathSpan(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_u);
  lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u, 0x24BE3D228, MEMORY[0x24BE3D1F0]);
  result = dispatch thunk of Collection.startIndex.getter();
  v8 = v14;
  if (!a2)
  {
LABEL_5:
    v9 = 0;
LABEL_12:
    *a1 = v3;
    a1[1] = v8;
    return v9;
  }
  if (!a3)
  {
    v9 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    dispatch thunk of Collection.endIndex.getter();
    if (v14 != v13)
    {
      lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u, 0x24BE3D228, MEMORY[0x24BE3D1E8]);
      v9 = 0;
      v11 = a3;
      v10 = a3 - 1;
      while (1)
      {
        GeometryCollection.subscript.getter();
        dispatch thunk of Collection.index(after:)();
        v8 = v12;
        *(_DWORD *)(a2 + 4 * v9) = v12;
        if (v10 == v9)
          break;
        dispatch thunk of Collection.endIndex.getter();
        ++v9;
        if (v12 == v3)
          goto LABEL_12;
      }
      v9 = v11;
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

char *specialized UnsafeMutableBufferPointer._copyContents(initializing:)(char *a1, uint64_t a2, char *__src, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  char *result;

  v4 = __src;
  if (!a4 || !a2)
    return v4;
  if (a4 >= a2)
    v5 = a2;
  else
    v5 = a4;
  if ((v5 & 0x8000000000000000) == 0 && (&a1[16 * v5] <= __src || &__src[16 * v5] <= a1))
  {
    memcpy(a1, __src, 16 * v5);
    v4 += 16 * v5;
    return v4;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.min(by:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;

  if (result == a2)
    return 0;
  if (a2 < result)
    goto LABEL_25;
  if (result >= a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v4 = result + 1;
  v3 = result;
  if (result + 1 == a2)
    return v3;
  if (result + 1 >= a2)
    goto LABEL_22;
  if (result >= -1)
  {
    v5 = *(_QWORD *)(a3 + 16);
    if (v4 >= v5)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v5 <= result)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (*(double *)(a3 + 32 + 32 * v4 + 8) >= *(double *)(a3 + 32 + 32 * result + 8))
      v4 = result;
    v6 = result + 2;
    if (result + 2 == a2)
      return v4;
    v7 = (double *)(a3 + 32 * result + 104);
    v3 = v4;
    while (v6 < a2)
    {
      if (v6 >= v5)
        goto LABEL_23;
      if (v4 >= v5)
        goto LABEL_24;
      v8 = *v7;
      v7 += 4;
      if (v8 < *(double *)(a3 + 40 + 32 * v4))
      {
        v3 = v6;
        v4 = v6;
      }
      if (a2 == ++v6)
        return v3;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static ExtrudedShapeDescriptor.compile(shapes:instances:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  int64_t *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  char v76;
  uint64_t v77;
  _QWORD __dst[65];
  uint64_t v79[2];
  uint64_t v80;

  v2 = MEMORY[0x24BEE4AF8];
  v80 = MEMORY[0x24BEE4AF8];
  v79[0] = 0;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v58 = a2;
    v4 = a1 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = (_QWORD *)v2;
    v59 = v4;
    v60 = v3;
    do
    {
      memcpy(__dst, (const void *)(v4 + 520 * v5), sizeof(__dst));
      v7 = ExtrudedShapeDescriptor.allDescriptors.getter();
      v8 = v7[2];
      if (v8)
      {
        v61 = v5;
        v62 = v6;
        v77 = v2;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
        v9 = v77;
        v10 = v7 + 8;
        while (1)
        {
          v64 = v8;
          v65 = v9;
          v11 = *(v10 - 3);
          v12 = *(v10 - 2);
          v13 = *(v10 - 1);
          v14 = *(_BYTE *)v10;
          v15 = v10[1];
          v16 = *((_BYTE *)v10 + 24);
          v17 = v10[4];
          v18 = v10[5];
          v19 = v10[7];
          v66 = v10[2];
          v67 = v10[6];
          v20 = v10[8];
          __dst[0] = *(v10 - 4);
          __dst[1] = v11;
          __dst[2] = v12;
          __dst[3] = v13;
          LOBYTE(__dst[4]) = v14;
          __dst[5] = v15;
          __dst[6] = v66;
          LOBYTE(__dst[7]) = v16;
          __dst[8] = v17;
          __dst[9] = v18;
          __dst[10] = v67;
          __dst[11] = v19;
          __dst[12] = v20;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v70 = v14;
          outlined copy of MeshDescriptor.Materials(v13, v14);
          v72 = v15;
          v21 = v15;
          v22 = v66;
          outlined copy of MeshDescriptor.Primitives?(v21, v66, v16);
          outlined copy of MeshDescriptor.Skinning?(v17, v18);
          MeshDescriptor.makeGeomMesh()((uint64_t)&v73);
          v23 = v73;
          if ((v76 & 1) != 0)
            break;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of MeshDescriptor.Materials(v13, v70);
          outlined consume of MeshDescriptor.Primitives?(v72, v66, v16);
          outlined consume of StateMachineGraph?(v17, v18);
          v9 = v65;
          v77 = v65;
          v25 = *(_QWORD *)(v65 + 16);
          v24 = *(_QWORD *)(v65 + 24);
          if (v25 >= v24 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
            v9 = v77;
          }
          v10 += 13;
          *(_QWORD *)(v9 + 16) = v25 + 1;
          *(_QWORD *)(v9 + 8 * v25 + 32) = v23;
          v8 = v64 - 1;
          if (v64 == 1)
          {
            swift_bridgeObjectRelease();
            v6 = v62;
            v4 = v59;
            v3 = v60;
            v5 = v61;
            goto LABEL_11;
          }
        }
        v33 = v74;
        v34 = v75;
        __dst[0] = v73;
        __dst[1] = v74;
        LOWORD(__dst[2]) = v75;
        lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
        swift_willThrowTypedImpl();
        swift_allocError();
        *(_QWORD *)v35 = v23;
        *(_QWORD *)(v35 + 8) = v33;
        *(_WORD *)(v35 + 16) = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MeshDescriptor.Materials(v13, v70);
        outlined consume of MeshDescriptor.Primitives?(v72, v66, v16);
        outlined consume of StateMachineGraph?(v17, v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      v9 = v2;
LABEL_11:
      v26 = *(_QWORD *)(v80 + 16);
      v27 = *(_QWORD *)(v9 + 16);
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
        goto LABEL_54;
      if (v28 < v26)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        while (1)
        {
LABEL_58:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      v29 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      v31 = v6[2];
      v30 = v6[3];
      if (v31 >= v30 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v6);
      ++v5;
      v6[2] = v31 + 1;
      v32 = &v6[2 * v31];
      v32[4] = v26;
      v32[5] = v28;
      specialized Array.append<A>(contentsOf:)(v29);
      v2 = MEMORY[0x24BEE4AF8];
    }
    while (v5 != v3);
    swift_bridgeObjectRelease();
    a2 = v58;
    if (v58)
      goto LABEL_22;
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (a2)
    {
LABEL_22:
      v79[0] = v2;
      v36 = *(_QWORD *)(a2 + 16);
      if (v36)
      {
        v37 = a2 + 32;
        v38 = v6 + 4;
        swift_bridgeObjectRetain();
        v39 = 0;
        v40 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v63 = v6;
        v69 = v37;
        v71 = v36;
        v68 = v6 + 4;
        do
        {
          v41 = *(unsigned int *)(v37 + 80 * v39);
          if (v6[2] <= v41)
            goto LABEL_51;
          v42 = &v38[2 * v41];
          v44 = *v42;
          v43 = v42[1];
          if (*v42 != v43)
          {
            if (v43 < v44)
              goto LABEL_52;
            if (v44 >= v43)
            {
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            if (v44 < 0 || HIDWORD(v44))
              goto LABEL_58;
            v45 = *v42;
            while (1)
            {
              v46 = REGeomInstanceCreate();
              if (!v46)
                goto LABEL_56;
              if (!v40)
                goto LABEL_57;
              v47 = v46;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
              v49 = v40[2];
              v48 = v40[3];
              v50 = v40;
              if (v49 >= v48 >> 1)
                v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v40);
              v50[2] = v49 + 1;
              v40 = v50;
              v50[v49 + 4] = v47;
              v79[0] = (uint64_t)v50;
              if (v43 - 1 == v45)
                break;
              if (++v45 < v44 || v45 >= v43)
              {
                __break(1u);
LABEL_51:
                __break(1u);
LABEL_52:
                __break(1u);
                goto LABEL_53;
              }
              if (v45 == 0x100000000)
                goto LABEL_58;
            }
            v6 = v63;
            v37 = v69;
            v36 = v71;
            v38 = v68;
          }
          ++v39;
        }
        while (v39 != v36);
        swift_bridgeObjectRelease();
      }
    }
  }
  type metadata accessor for __MeshCompileOptions();
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = REMeshCompileOptionsCreate();
  v52 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v52, (uint64_t)__dst);
  v53 = __dst[3];
  v54 = __dst[4];
  __swift_project_boxed_opaque_existential_1(__dst, __dst[3]);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 32))(v53, v54);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
  v55 = REAssetManagerMeshAssetCreateFromModelsAndSkeletonsWithOptionsNullable();
  if (v55)
  {
    v22 = v55;
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_bridgeObjectRelease();
    $defer #1 () in static ExtrudedShapeDescriptor.compile(shapes:instances:)((uint64_t)&v80, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(_QWORD *)v57 = 0xD00000000000003FLL;
    *(_QWORD *)(v57 + 8) = 0x800000021BE932E0;
    *(_BYTE *)(v57 + 16) = 2;
    swift_willThrow();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_bridgeObjectRelease();
LABEL_20:
    $defer #1 () in static ExtrudedShapeDescriptor.compile(shapes:instances:)((uint64_t)&v80, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v22;
}

uint64_t specialized static TesselatedShape.endcapTransform(frontFace:sweepCurve:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if ((result & 1) == 0)
  {
    if (v2)
    {
      __asm { FMOV            V7.4S, #-1.0 }
      return result;
    }
    goto LABEL_7;
  }
  if (!v2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

void specialized TesselatedShape.init(shape:chamferProfile:chamferRadius:resolution:triangulatePreInset:)(int64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char **v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float64x2_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t collection_2d;
  void *collection_u;
  id v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  char **v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  int64_t v61;
  char *v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  char **v71;
  __int128 v72;
  __int128 v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  double v77;
  uint64_t v78;
  char *v79;
  double v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t collection_d;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  double v104;
  float64x2_t v105;
  double v106;
  float64x2_t v107;
  double v108;
  double v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  __int128 v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  id v119;
  unint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  int64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  __int128 v135;
  void *v136;
  unint64_t v137;
  int64_t v138;
  uint64_t v139;
  _QWORD *v140;
  void *v141;
  _QWORD *v142;
  void *v143;
  uint64_t v144;
  char *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  unint64_t v151;
  unint64_t v152;
  int64_t v154;
  void *v155;
  _QWORD *v156;
  unint64_t v157;
  double v158;
  char *v159;
  __int128 v160;
  char *v161;
  uint64_t v162;
  char *v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  char *v168;
  uint64_t v169;
  char v170;

  LOBYTE(v158) = a4;
  v9 = *a3;
  *(_QWORD *)&v164 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v164 + 1) = MEMORY[0x24BEE4AF8];
  v165 = 0;
  *((_QWORD *)&v166 + 1) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v167 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v167 + 1) = MEMORY[0x24BEE4AF8];
  v168 = (char *)MEMORY[0x24BEE4AF8];
  v169 = 0;
  v170 = 1;
  v10 = swift_bridgeObjectRetain();
  v159 = (char *)&v164 + 8;
  v11 = v9;
  trace(path:points:tangents:uniformSegmentsPerSpan:)(v10, (unint64_t)&v164, (unint64_t)&v164 + 8, v9, v12);
  swift_bridgeObjectRelease();
  v13 = (char **)v164;
  v14 = *(int64_t *)(v164 + 16);
  if (HIDWORD(v14))
    goto LABEL_210;
  *(double *)&v15 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]));
  v17 = *(_QWORD *)(v15 + 16);
  v16 = *(_QWORD *)(v15 + 24);
  v18 = v17 + 1;
  if (v17 >= v16 >> 1)
    goto LABEL_188;
LABEL_3:
  *(_QWORD *)(v15 + 16) = v18;
  *(_DWORD *)(v15 + 4 * v17 + 32) = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v166 = v15;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v151 = a2;
    v20 = swift_bridgeObjectRetain();
    trace(path:points:tangents:uniformSegmentsPerSpan:)(v20, (unint64_t)&v164, (unint64_t)v159, v11, v21);
    swift_bridgeObjectRelease();
    v13 = (char **)v164;
    v14 = *(int64_t *)(v164 + 16);
    if (HIDWORD(v14))
      goto LABEL_210;
    v18 = 0;
    v17 = v19 - 1;
    while (1)
    {
      a2 = *(_QWORD *)(v15 + 16);
      v22 = *(_QWORD *)(v15 + 24);
      if (a2 >= v22 >> 1)
        *(double *)&v15 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), a2 + 1, 1, (char *)v15));
      *(_QWORD *)(v15 + 16) = a2 + 1;
      *(_DWORD *)(v15 + 4 * a2 + 32) = v14;
      if (v17 == v18)
        break;
      v16 = v18 + 1;
      if ((unint64_t)(v18 + 1) >= *(_QWORD *)(a1 + 16))
      {
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        *(double *)&v15 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v18, 1, (char *)v15));
        goto LABEL_3;
      }
      v23 = swift_bridgeObjectRetain();
      trace(path:points:tangents:uniformSegmentsPerSpan:)(v23, (unint64_t)&v164, (unint64_t)v159, v11, v24);
      swift_bridgeObjectRelease();
      v13 = (char **)v164;
      v14 = *(int64_t *)(v164 + 16);
      ++v18;
      if (HIDWORD(v14))
        goto LABEL_210;
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v166 = v15;
    a2 = v151;
    if ((LOBYTE(v158) & 1) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  if ((LOBYTE(v158) & 1) != 0)
  {
LABEL_13:
    *(_QWORD *)&v160 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    triangulateByEarClippingFix(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)((uint64_t)v13, v15, (char **)&v160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v165 = v160;
  }
LABEL_14:
  if (!a2)
    goto LABEL_29;
  if (fabs(a6) <= 0.000001)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if (a6 <= 0.0)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(_QWORD *)v42 = 0xD000000000000022;
    *(_QWORD *)(v42 + 8) = 0x800000021BE931F0;
    *(_BYTE *)(v42 + 16) = 1;
    swift_willThrow();
    goto LABEL_31;
  }
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
  {
LABEL_205:
    __break(1u);
    goto LABEL_206;
  }
  v17 = a2 + 32;
  __asm { FMOV            V1.2D, #-1.0 }
  v29 = vaddq_f64(*(float64x2_t *)(a2 + 32 + 16 * v11 - 16), _Q1);
  if (sqrt(vaddvq_f64(vmulq_f64(v29, v29))) > 0.000001)
  {
LABEL_206:
    __break(1u);
    goto LABEL_207;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_inset_evaluator_2d);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(double *)&v30 = COERCE_DOUBLE(OS_geom_inset_evaluator_2d.init(points:accumulatedOutlineIndexCount:)());
  if (*(_QWORD *)(a2 + 16))
  {
    v14 = v30;
    v31 = *(double *)(a2 + 32) * a6;
    swift_bridgeObjectRetain();
    geom_inset_evaluator_get_computed_inset_distance_2d();
    if (v32 <= v31)
    {
      *(double *)&v15 = 0.0;
      v13 = (char **)(v11 - 1);
      while (1)
      {
        geom_inset_evaluator_advance_inset_to_2d();
        if (v13 == (char **)v15)
          break;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >= *(_QWORD *)(a2 + 16))
          goto LABEL_187;
        v33 = *(double *)(a2 + 16 * v15 + 48) * a6;
        geom_inset_evaluator_get_computed_inset_distance_2d();
        ++v15;
        if (v34 > v33)
          goto LABEL_25;
      }
      v137 = a2 + 32;
      v152 = a2;
      swift_bridgeObjectRelease();
      collection_2d = geom_create_collection_2d();
      collection_u = (void *)geom_create_collection_u();
      v146 = (void *)v14;
      v149 = (void *)collection_2d;
      geom_inset_evaluator_extract_offset_curve_2d();
      *(_QWORD *)&v160 = collection_u;
      a2 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_u);
      lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u, 0x24BE3D228, MEMORY[0x24BE3D1F0]);
      v45 = collection_u;
      dispatch thunk of Collection.startIndex.getter();
      v46 = v163;
      v150 = v45;
      *(_QWORD *)&v160 = v45;
      dispatch thunk of Collection.endIndex.getter();
      v157 = a2;
      if (v46 != (char *)v162)
      {
        lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u, 0x24BE3D228, MEMORY[0x24BE3D1E8]);
        v86 = 0;
        v156 = (_QWORD *)MEMORY[0x24BEE4AF8];
        while (1)
        {
          v162 = (uint64_t)v45;
          GeometryCollection.subscript.getter();
          v87 = v161;
          v162 = (uint64_t)v45;
          dispatch thunk of Collection.index(after:)();
          v88 = v161;
          v163 = v161;
          v89 = geom_collection_data_2d();
          if (v87 < v86)
            break;
          v90 = v89;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v156 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v156[2] + 1, 1, v156);
          v92 = v156[2];
          v91 = v156[3];
          if (v92 >= v91 >> 1)
            v156 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v91 > 1), v92 + 1, 1, v156);
          v156[2] = v92 + 1;
          v93 = &v156[2 * v92];
          v93[4] = v90 + 16 * v86;
          v93[5] = v87 - v86;
          a2 = v157;
          dispatch thunk of Collection.endIndex.getter();
          v86 = v87;
          if (v88 == (char *)v162)
            goto LABEL_33;
        }
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
LABEL_33:

      v47 = swift_bridgeObjectRetain();
      v48 = specialized classify<A>(subpaths:)(v47);
      swift_bridgeObjectRelease();
      v144 = v48[2];
      if (v144)
      {
        *(double *)&a1 = 0.0;
        v142 = v48 + 4;
        v49 = (char *)MEMORY[0x24BEE4AF8];
        v140 = v48;
        do
        {
          if ((unint64_t)a1 >= v48[2])
            goto LABEL_191;
          v50 = (char **)&v142[3 * a1];
          v14 = *((int64_t *)v50 + 2);
          *(double *)&v15 = COERCE_DOUBLE(specialized _copyCollectionToContiguousArray<A>(_:)(*v50, (uint64_t)v50[1]));
          *(_QWORD *)&v160 = v15;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
          v51 = swift_allocObject();
          *(_OWORD *)(v51 + 16) = xmmword_21BE411F0;
          v52 = *(_QWORD *)(v15 + 16);
          if (HIDWORD(v52))
            goto LABEL_210;
          a2 = v51;
          *(_DWORD *)(v51 + 32) = v52;
          v159 = *(char **)(v14 + 16);
          v154 = a1;
          if (v159)
          {
            v17 = v14 + 32;
            v53 = *(char **)(v14 + 32);
            v54 = *(char **)(v14 + 40);
            swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v53, v54);
            v15 = *(uint64_t *)&v160;
            a1 = *(int64_t *)(v160 + 16);
            if (HIDWORD(a1))
              goto LABEL_210;
            v18 = 1;
            v158 = *(double *)&v14;
            while (1)
            {
              v11 = *(_QWORD *)(a2 + 16);
              v55 = *(_QWORD *)(a2 + 24);
              v13 = (char **)(v11 + 1);
              if (v11 >= v55 >> 1)
                a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v11 + 1, 1, (char *)a2);
              *(_QWORD *)(a2 + 16) = v13;
              *(_DWORD *)(a2 + 4 * v11 + 32) = a1;
              if ((char *)v18 == v159)
                break;
              v16 = *(_QWORD *)(v14 + 16);
              if (v18 >= v16)
                goto LABEL_179;
              v16 = v17 + 16 * v18;
              a1 = *(int64_t *)(v16 + 8);
              v11 = *(_QWORD *)(v15 + 16);
              v14 = v11 + a1;
              if (__OFADD__(v11, a1))
                goto LABEL_180;
              v56 = *(char **)v16;
              isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
              if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v58 = *(_QWORD *)(v15 + 24) >> 1, v58 < v14))
              {
                if ((uint64_t)v11 <= v14)
                  v59 = v11 + a1;
                else
                  v59 = v11;
                *(double *)&v15 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v59, 1, (_QWORD *)v15));
                v58 = *(_QWORD *)(v15 + 24) >> 1;
              }
              v60 = *(_QWORD *)(v15 + 16);
              v61 = v58 - v60;
              if (*(double *)&a1 == 0.0 || v58 == v60)
              {
                v16 = (unint64_t)&v56[16 * a1];
                if (v56)
                  v11 = (unint64_t)v56;
                else
                  v11 = 0;
                if (v56)
                  v13 = (char **)&v56[16 * a1];
                else
                  v13 = 0;
                *(double *)&v14 = 0.0;
              }
              else
              {
                if (a1 >= v61)
                  v14 = v58 - v60;
                else
                  v14 = a1;
                if (v14 < 0)
                  goto LABEL_211;
                v62 = (char *)(v15 + 16 * v60 + 32);
                v11 = (unint64_t)&v56[16 * v14];
                if (&v62[16 * v14] > v56 && (unint64_t)v62 < v11)
                  goto LABEL_211;
                memcpy(v62, v56, 16 * v14);
                v13 = (char **)&v56[16 * a1];
              }
              if (v14 < a1)
                goto LABEL_181;
              if (*(double *)&v14 != 0.0)
              {
                v63 = *(_QWORD *)(v15 + 16);
                _VF = __OFADD__(v63, v14);
                v16 = v63 + v14;
                if (_VF)
                  goto LABEL_183;
                *(_QWORD *)(v15 + 16) = v16;
              }
              a1 = *(int64_t *)(v15 + 16);
              if (v14 != v61)
              {
                *(double *)&v14 = v158;
                goto LABEL_75;
              }
              *(double *)&v14 = v158;
              if (v11 && v13 != (char **)v11)
              {
                v64 = (char **)(v11 + 16);
                v65 = *(_QWORD *)v11;
                v66 = *(_QWORD *)(v11 + 8);
                while (1)
                {
                  v67 = *(_QWORD *)(v15 + 24);
                  v68 = v67 >> 1;
                  v69 = a1 + 1;
                  if ((uint64_t)(v67 >> 1) < a1 + 1)
                  {
                    v74 = (_QWORD *)v15;
                    v75 = v65;
                    v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), a1 + 1, 1, v74);
                    v69 = a1 + 1;
                    v65 = v75;
                    v15 = (uint64_t)v76;
                    v68 = v76[3] >> 1;
                    if (a1 >= v68)
                      goto LABEL_80;
LABEL_83:
                    v70 = v15 + 16 * a1;
                    *(_QWORD *)(v70 + 32) = v65;
                    *(_QWORD *)(v70 + 40) = v66;
                    if (v13 == v64)
                    {
LABEL_91:
                      *(_QWORD *)(v15 + 16) = v69;
                      a1 = v69;
                      break;
                    }
                    v71 = v64;
                    v64 += 2;
                    while (1)
                    {
                      v72 = *(_OWORD *)v71;
                      v71 += 2;
                      v73 = v72;
                      if (v68 - 1 == a1)
                        break;
                      *(_OWORD *)(v15 + 48 + 16 * a1++) = v73;
                      v64 += 2;
                      if (v71 == v13)
                      {
                        v69 = a1 + 1;
                        goto LABEL_91;
                      }
                    }
                    v66 = *((_QWORD *)&v73 + 1);
                    v65 = v73;
                    a1 = v68;
                    *(_QWORD *)(v15 + 16) = v68;
                  }
                  else
                  {
                    if (a1 < v68)
                      goto LABEL_83;
LABEL_80:
                    *(double *)(v15 + 16) = *(double *)&a1;
                  }
                }
              }
LABEL_75:
              ++v18;
              if (HIDWORD(a1))
                goto LABEL_210;
            }
            swift_bridgeObjectRelease();
            v49 = (char *)MEMORY[0x24BEE4AF8];
            a1 = v154;
          }
          v163 = v49;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          triangulateByEarClippingFix(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)(v15, a2, &v163);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v77 = *(double *)(*((_QWORD *)&v166 + 1) + 16);
          v78 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v78);
          v79 = v163;
          v14 = *((int64_t *)v163 + 2);
          if (*(double *)&v14 == 0.0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v13 = (char **)v49;
          }
          else
          {
            v162 = (uint64_t)v49;
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
            if (HIDWORD(*(_QWORD *)&v77))
              goto LABEL_210;
            v80 = v77;
            v81 = *((_DWORD *)v79 + 8);
            v82 = v81 + LODWORD(v77);
            if (__CFADD__(v81, LODWORD(v77)))
              goto LABEL_201;
            v13 = (char **)v162;
            v84 = *(_QWORD *)(v162 + 16);
            v83 = *(_QWORD *)(v162 + 24);
            if (v84 >= v83 >> 1)
            {
              LOBYTE(v158) = LOBYTE(v77);
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
              v80 = v77;
              v13 = (char **)v162;
            }
            v13[2] = (char *)(v84 + 1);
            v16 = (unint64_t)v13 + 4 * v84;
            *(_DWORD *)(v16 + 32) = v82;
            v17 = v14 - 1;
            v159 = v79;
            if (v14 != 1)
            {
              v85 = v84 + 9;
              v18 = (int64_t)(v79 + 36);
              v11 = 0x7FFFFFFFFFFFFFFFLL;
              while (v11)
              {
                v16 = *(unsigned int *)v18;
                a1 = (v16 + LODWORD(v80));
                if (__CFADD__((_DWORD)v16, LODWORD(v80)))
                  goto LABEL_185;
                v162 = (uint64_t)v13;
                v16 = (unint64_t)v13[3];
                v14 = v85 - 7;
                if (v85 - 8 >= v16 >> 1)
                {
                  v158 = v80;
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v85 - 7, 1);
                  v80 = v158;
                  v13 = (char **)v162;
                }
                v13[2] = (char *)v14;
                *((_DWORD *)v13 + v85++) = a1;
                --v11;
                v18 += 4;
                if (!--v17)
                  goto LABEL_35;
              }
              goto LABEL_184;
            }
LABEL_35:
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v49 = (char *)MEMORY[0x24BEE4AF8];
            a1 = v154;
          }
          ++a1;
          specialized Array.append<A>(contentsOf:)((uint64_t)v13);
          a2 = v157;
          v48 = v140;
        }
        while (a1 != v144);
      }
      swift_bridgeObjectRelease();
      v94 = geom_create_collection_2d();
      v95 = geom_create_collection_u();
      v96 = geom_create_collection_u();
      v97 = geom_create_collection_u();
      collection_d = geom_create_collection_d();
      v141 = (void *)v94;
      v155 = (void *)v95;
      v136 = (void *)v96;
      v143 = (void *)v97;
      geom_inset_evaluator_extract_joiner_mesh_2d();
      geom_inset_evaluator_get_computed_inset_distance_2d();
      v169 = v99;
      v170 = 0;
      v145 = (char *)collection_d;
      *(double *)&v100 = COERCE_DOUBLE(geom_collection_size_d());
      v11 = v152;
      if (v100 < 0)
        goto LABEL_208;
      v14 = v100;
      a1 = v137;
      if (*(double *)&v100 != 0.0)
      {
        v139 = *(_QWORD *)(v152 + 16);
        v17 = v139 - 2;
        *(double *)&v15 = COERCE_DOUBLE(&lazy cache variable for type metadata for OS_geom_collection_d);
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_d);
        lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_d and conformance OS_geom_collection_d, &lazy cache variable for type metadata for OS_geom_collection_d, 0x24BE3D220, MEMORY[0x24BE3D1E0]);
        v18 = 0;
        v148 = 0;
        v101 = 0;
        v138 = v14;
        while (v101 != v14)
        {
          v163 = v145;
          v13 = &v163;
          GeometryCollection.subscript.getter();
          v102 = v148;
          if (__OFADD__(v148, 2))
            goto LABEL_193;
          if (v148 + 2 >= v139)
            goto LABEL_131;
          if (v148 < -1)
            goto LABEL_202;
          v103 = v148 + 1;
          v16 = *(_QWORD *)(v11 + 16);
          if (v148 + 1 >= v16)
            goto LABEL_203;
          if (*(double *)(a1 + 16 * v103) * a6 >= *(double *)&v160)
          {
LABEL_131:
            if ((v102 & 0x8000000000000000) != 0)
              goto LABEL_194;
            v16 = *(_QWORD *)(v11 + 16);
            if (v102 >= v16)
            {
LABEL_160:
              __break(1u);
              goto LABEL_161;
            }
          }
          else
          {
            if (v17 > (uint64_t)v103)
              v103 = v17;
            while ((uint64_t)(v102 + 1) < v17)
            {
              if (v16 - 2 == v102)
                goto LABEL_186;
              v104 = *(double *)(v152 + 64 + 16 * v102++) * a6;
              if (v104 >= *(double *)&v160)
                goto LABEL_131;
            }
            v102 = v103;
            if (v103 >= v16)
              goto LABEL_160;
          }
          if (v102 + 1 >= v16)
            goto LABEL_195;
          v105 = *(float64x2_t *)(a1 + 16 * v102);
          v106 = a6 * v105.f64[0];
          v158 = vmuld_lane_f64(a6, v105, 1);
          v107 = *(float64x2_t *)(a1 + 16 * (v102 + 1));
          v108 = a6 * v107.f64[0];
          v148 = v102;
          if (v106 != a6 * v107.f64[0])
          {
            v109 = fabs(a6 * v107.f64[0]);
            _ZF = (*(_QWORD *)&v106 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000
               && *(_QWORD *)&v109 == 0x7FF0000000000000;
            if (_ZF || vabdd_f64(v106, v108) >= (fabs(v106) + fabs(v108) + 1.0) * 0.000001)
              v158 = vmuld_lane_f64(a6, v107, 1) * ((*(double *)&v160 - v106) / (v108 - v106))
                   + v158 * (1.0 - (*(double *)&v160 - v106) / (v108 - v106));
          }
          *(_QWORD *)&v160 = v143;
          lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u, 0x24BE3D228, MEMORY[0x24BE3D1E8]);
          GeometryCollection.subscript.getter();
          v15 = v163;
          if (v163 < (unint64_t)v18)
            goto LABEL_196;
          v147 = v101;
          *(_QWORD *)&v160 = v141;
          v11 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_2d);
          v111 = lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_2d and conformance OS_geom_collection_2d, &lazy cache variable for type metadata for OS_geom_collection_2d, 0x24BE3D218, MEMORY[0x24BE3D200]);
          v17 = v141;
          dispatch thunk of Collection.startIndex.getter();
          v159 = (char *)v111;
          dispatch thunk of Collection.endIndex.getter();
          if (v162 < (uint64_t)v163)
            goto LABEL_197;
          if (v18 < (uint64_t)v163 || v162 < v15)
            goto LABEL_198;
          *(_QWORD *)&v160 = v17;
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          if (v18 < (uint64_t)v163 || v162 < v18)
            goto LABEL_199;
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          if ((uint64_t)v163 > v15 || v162 < v15)
            goto LABEL_200;
          v112 = v15 - v18;
          if (v15 == v18)
          {

            a2 = MEMORY[0x24BEE4AF8];
          }
          else
          {
            v163 = (char *)MEMORY[0x24BEE4AF8];
            v13 = &v163;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v112 & ~(v112 >> 63), 0);
            a2 = (unint64_t)v163;
            v162 = v18;
            if (v112 < 0)
              goto LABEL_204;
            v14 = v15;
            a1 = v18;
            do
            {
              if (a1 < v18 || a1 >= v15)
                goto LABEL_182;
              v113 = v15;
              v114 = v18;
              v161 = (char *)v17;
              lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_2d and conformance OS_geom_collection_2d, &lazy cache variable for type metadata for OS_geom_collection_2d, 0x24BE3D218, MEMORY[0x24BE3D1F8]);
              GeometryCollection.subscript.getter();
              v115 = v160;
              v163 = (char *)a2;
              v117 = *(_QWORD *)(a2 + 16);
              v116 = *(_QWORD *)(a2 + 24);
              if (v117 >= v116 >> 1)
              {
                v135 = v160;
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v116 > 1, v117 + 1, 1);
                v115 = v135;
                a2 = (unint64_t)v163;
              }
              *(_QWORD *)(a2 + 16) = v117 + 1;
              v118 = a2 + 32 * v117;
              *(_OWORD *)(v118 + 32) = v115;
              *(_OWORD *)(v118 + 48) = *(unint64_t *)&v158;
              *(_QWORD *)&v160 = v17;
              v13 = (char **)&v160;
              dispatch thunk of Collection.index(after:)();
              a1 = (int64_t)v161;
              v162 = (uint64_t)v161;
              --v14;
              v18 = v114;
              _ZF = v114 == v14;
              v15 = v113;
            }
            while (!_ZF);

            a1 = v137;
          }
          v101 = v147 + 1;
          specialized Array.append<A>(contentsOf:)(a2);
          v18 = v15;
          v17 = v139 - 2;
          v14 = v138;
          v11 = v152;
          a2 = v157;
          if (v147 + 1 == v138)
            goto LABEL_161;
        }
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
        goto LABEL_205;
      }
LABEL_161:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v160 = v136;
      v119 = v136;
      dispatch thunk of Collection.startIndex.getter();
      v120 = 0;
      v121 = v163;
      *(_QWORD *)&v160 = v119;
      v122 = (char *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        v123 = v120;
        dispatch thunk of Collection.endIndex.getter();
        if (v121 == (char *)v162)
          break;
        v162 = (uint64_t)v119;
        lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u, 0x24BE3D228, MEMORY[0x24BE3D1E8]);
        GeometryCollection.subscript.getter();
        v120 = v161;
        v162 = (uint64_t)v119;
        dispatch thunk of Collection.index(after:)();
        v121 = v161;
        v163 = v161;
        v124 = v123 + 1;
        if (v123 + 1 >= v120)
          goto LABEL_190;
        if (v124 != v120 - 1)
        {
          if (v124 >= (uint64_t)(v120 - 1))
            goto LABEL_209;
          v125 = v123 + 2;
          do
          {
            v162 = (uint64_t)v155;
            GeometryCollection.subscript.getter();
            v126 = (int)v161;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v122 + 2) + 1, 1, v122);
            v128 = *((_QWORD *)v122 + 2);
            v127 = *((_QWORD *)v122 + 3);
            if (v128 >= v127 >> 1)
              v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v127 > 1), v128 + 1, 1, v122);
            *((_QWORD *)v122 + 2) = v128 + 1;
            *(_DWORD *)&v122[4 * v128 + 32] = v126;
            v162 = (uint64_t)v155;
            GeometryCollection.subscript.getter();
            v129 = (int)v161;
            v131 = *((_QWORD *)v122 + 2);
            v130 = *((_QWORD *)v122 + 3);
            if (v131 >= v130 >> 1)
              v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v130 > 1), v131 + 1, 1, v122);
            *((_QWORD *)v122 + 2) = v131 + 1;
            *(_DWORD *)&v122[4 * v131 + 32] = v129;
            v162 = (uint64_t)v155;
            GeometryCollection.subscript.getter();
            v132 = (int)v161;
            v134 = *((_QWORD *)v122 + 2);
            v133 = *((_QWORD *)v122 + 3);
            if (v134 >= v133 >> 1)
              v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v133 > 1), v134 + 1, 1, v122);
            *((_QWORD *)v122 + 2) = v134 + 1;
            *(_DWORD *)&v122[4 * v134 + 32] = v132;
            ++v125;
          }
          while (v120 != v125);
          v168 = v122;
        }
      }

LABEL_29:
      v36 = v165;
      v37 = v168;
      v38 = v169;
      v39 = v170;
      v40 = v166;
      v41 = v167;
      *(_OWORD *)a5 = v164;
      *(_QWORD *)(a5 + 16) = v36;
      *(_OWORD *)(a5 + 24) = v40;
      *(_OWORD *)(a5 + 40) = v41;
      *(_QWORD *)(a5 + 56) = v37;
      *(_QWORD *)(a5 + 64) = v38;
      *(_BYTE *)(a5 + 72) = v39;
      return;
    }
LABEL_25:
    swift_bridgeObjectRelease_n();
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(_QWORD *)v35 = 0xD000000000000083;
    *(_QWORD *)(v35 + 8) = 0x800000021BE93220;
    *(_BYTE *)(v35 + 16) = 0;
    swift_willThrow();

LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_211:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined release of TesselatedShape(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BDBBBE0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = type metadata accessor for OS_os_log(255, a2);
    result = MEMORY[0x220772E3C](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21BDBBC64()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in spansFromCGPath(path:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in spansFromCGPath(path:)(a1, *(uint64_t **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t sub_21BDBBC7C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for PiecewiseBezierCurve()
{
  return &type metadata for PiecewiseBezierCurve;
}

uint64_t type metadata completion function for PiecewiseLinearPolygon()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PiecewiseLinearPolygon(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for PiecewiseLinearPolygon(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21BDBBF10 + 4 * byte_21BE7BB10[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PiecewiseLinearPolygon(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PiecewiseLinearPolygon);
}

uint64_t type metadata completion function for Shape()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Shape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Shape(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Shape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21BDBC434 + 4 * byte_21BE7BB1E[v10]))();
  }
}

void storeEnumTagSinglePayload for Shape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21BDBC5AC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21BDBC620);
}

void sub_21BDBC5B4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21BDBC5BCLL);
  JUMPOUT(0x21BDBC620);
}

void sub_21BDBC5FC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BDBC620);
}

void sub_21BDBC604()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BDBC620);
}

uint64_t sub_21BDBC60C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21BDBC620);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21BDBC61CLL);
    JUMPOUT(0x21BDBC618);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for Shape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Shape);
}

uint64_t destroy for ExtrudedShapeDescriptor(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t result;
  int v7;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    v2 = *(unsigned __int8 *)(a1 + 56);
    if (v2 != 255)
      outlined consume of MeshDescriptor.Primitives(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v2);
    if (*(_QWORD *)(a1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
    v3 = *(unsigned __int8 *)(a1 + 160);
    if (v3 != 255)
      outlined consume of MeshDescriptor.Primitives(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), v3);
    if (*(_QWORD *)(a1 + 176))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (*(_QWORD *)(a1 + 216))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(_QWORD *)(a1 + 232), *(_BYTE *)(a1 + 240));
    v4 = *(unsigned __int8 *)(a1 + 264);
    if (v4 != 255)
      outlined consume of MeshDescriptor.Primitives(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 256), v4);
    if (*(_QWORD *)(a1 + 280))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (*(_QWORD *)(a1 + 320))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(_QWORD *)(a1 + 336), *(_BYTE *)(a1 + 344));
    v5 = *(unsigned __int8 *)(a1 + 368);
    if (v5 != 255)
      outlined consume of MeshDescriptor.Primitives(*(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), v5);
    if (*(_QWORD *)(a1 + 384))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  result = *(_QWORD *)(a1 + 424);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(_QWORD *)(a1 + 440), *(_BYTE *)(a1 + 448));
    v7 = *(unsigned __int8 *)(a1 + 472);
    if (v7 != 255)
      outlined consume of MeshDescriptor.Primitives(*(_QWORD *)(a1 + 456), *(_QWORD *)(a1 + 464), v7);
    result = *(_QWORD *)(a1 + 488);
    if (result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for ExtrudedShapeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    v12 = *(_QWORD *)(a2 + 112);
    if (!v12)
      goto LABEL_13;
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  v7 = *(unsigned __int8 *)(a2 + 56);
  if (v7 != 255)
  {
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    outlined copy of MeshDescriptor.Primitives(v8, v9, *(_BYTE *)(a2 + 56));
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = v7;
    v10 = *(_QWORD *)(a2 + 72);
    if (v10)
      goto LABEL_4;
LABEL_12:
    v24 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v12 = *(_QWORD *)(a2 + 112);
    if (!v12)
      goto LABEL_13;
    goto LABEL_7;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  if (!v10)
    goto LABEL_12;
LABEL_4:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = *(_QWORD *)(a2 + 112);
  if (!v12)
  {
LABEL_13:
    v25 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v25;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v26 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v26;
    v27 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v27;
    v23 = *(_QWORD *)(a2 + 216);
    if (v23)
      goto LABEL_14;
LABEL_19:
    v36 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v36;
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    v37 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v37;
    v38 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v38;
    goto LABEL_22;
  }
LABEL_7:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  v16 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v17 = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v16, v17);
  *(_QWORD *)(a1 + 128) = v16;
  *(_BYTE *)(a1 + 136) = v17;
  v18 = *(unsigned __int8 *)(a2 + 160);
  if (v18 != 255)
  {
    v19 = *(_QWORD *)(a2 + 144);
    v20 = *(_QWORD *)(a2 + 152);
    outlined copy of MeshDescriptor.Primitives(v19, v20, *(_BYTE *)(a2 + 160));
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v20;
    *(_BYTE *)(a1 + 160) = v18;
    v21 = *(_QWORD *)(a2 + 176);
    if (v21)
      goto LABEL_9;
LABEL_18:
    v35 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v35;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v23 = *(_QWORD *)(a2 + 216);
    if (v23)
      goto LABEL_14;
    goto LABEL_19;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 176);
  if (!v21)
    goto LABEL_18;
LABEL_9:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v21;
  v22 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v22;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = *(_QWORD *)(a2 + 216);
  if (!v23)
    goto LABEL_19;
LABEL_14:
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v23;
  v28 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v29 = *(_BYTE *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v28, v29);
  *(_QWORD *)(a1 + 232) = v28;
  *(_BYTE *)(a1 + 240) = v29;
  v30 = *(unsigned __int8 *)(a2 + 264);
  if (v30 == 255)
  {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
    v33 = *(_QWORD *)(a2 + 280);
    if (v33)
      goto LABEL_16;
  }
  else
  {
    v31 = *(_QWORD *)(a2 + 248);
    v32 = *(_QWORD *)(a2 + 256);
    outlined copy of MeshDescriptor.Primitives(v31, v32, *(_BYTE *)(a2 + 264));
    *(_QWORD *)(a1 + 248) = v31;
    *(_QWORD *)(a1 + 256) = v32;
    *(_BYTE *)(a1 + 264) = v30;
    v33 = *(_QWORD *)(a2 + 280);
    if (v33)
    {
LABEL_16:
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = v33;
      v34 = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = v34;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
  }
  v39 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v39;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
LABEL_22:
  v40 = *(_QWORD *)(a2 + 320);
  if (!v40)
  {
    v49 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v49;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    v50 = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 328) = v50;
    v51 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 360) = v51;
    v48 = *(_QWORD *)(a2 + 424);
    if (v48)
      goto LABEL_28;
    goto LABEL_33;
  }
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v40;
  v41 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  v42 = *(_BYTE *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v41, v42);
  *(_QWORD *)(a1 + 336) = v41;
  *(_BYTE *)(a1 + 344) = v42;
  v43 = *(unsigned __int8 *)(a2 + 368);
  if (v43 != 255)
  {
    v44 = *(_QWORD *)(a2 + 352);
    v45 = *(_QWORD *)(a2 + 360);
    outlined copy of MeshDescriptor.Primitives(v44, v45, *(_BYTE *)(a2 + 368));
    *(_QWORD *)(a1 + 352) = v44;
    *(_QWORD *)(a1 + 360) = v45;
    *(_BYTE *)(a1 + 368) = v43;
    v46 = *(_QWORD *)(a2 + 384);
    if (v46)
      goto LABEL_25;
    goto LABEL_32;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  v46 = *(_QWORD *)(a2 + 384);
  if (!v46)
  {
LABEL_32:
    v59 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v59;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    v48 = *(_QWORD *)(a2 + 424);
    if (v48)
      goto LABEL_28;
LABEL_33:
    v60 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v60;
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    v61 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v61;
    v62 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v62;
    return a1;
  }
LABEL_25:
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v46;
  v47 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = v47;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48 = *(_QWORD *)(a2 + 424);
  if (!v48)
    goto LABEL_33;
LABEL_28:
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v48;
  v52 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  v53 = *(_BYTE *)(a2 + 448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v52, v53);
  *(_QWORD *)(a1 + 440) = v52;
  *(_BYTE *)(a1 + 448) = v53;
  v54 = *(unsigned __int8 *)(a2 + 472);
  if (v54 == 255)
  {
    *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
    *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
    v57 = *(_QWORD *)(a2 + 488);
    if (v57)
      goto LABEL_30;
LABEL_35:
    v63 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v63;
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    return a1;
  }
  v55 = *(_QWORD *)(a2 + 456);
  v56 = *(_QWORD *)(a2 + 464);
  outlined copy of MeshDescriptor.Primitives(v55, v56, *(_BYTE *)(a2 + 472));
  *(_QWORD *)(a1 + 456) = v55;
  *(_QWORD *)(a1 + 464) = v56;
  *(_BYTE *)(a1 + 472) = v54;
  v57 = *(_QWORD *)(a2 + 488);
  if (!v57)
    goto LABEL_35;
LABEL_30:
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = v57;
  v58 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = v58;
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtrudedShapeDescriptor(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  __int128 *v53;
  __int128 *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 *v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 *v90;
  __int128 *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  __int128 *v97;
  __int128 *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  char v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 *v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char *v134;
  char *v135;
  __int128 *v136;
  __int128 *v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  __int128 *v143;
  __int128 *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t v151;
  char v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  char v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 *v173;
  __int128 *v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 *v180;
  __int128 *v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  char v186;
  __int128 *v187;
  __int128 *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  char v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  char v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 *v217;
  __int128 *v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;

  v4 = *((_QWORD *)a2 + 1);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (!v4)
    {
      v29 = *a2;
      v30 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v30;
      *(_OWORD *)a1 = v29;
      v31 = a2[3];
      v32 = a2[4];
      v33 = a2[5];
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *(_OWORD *)(a1 + 64) = v32;
      *(_OWORD *)(a1 + 80) = v33;
      *(_OWORD *)(a1 + 48) = v31;
      goto LABEL_25;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    v17 = *((_QWORD *)a2 + 3);
    v18 = *((_BYTE *)a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v17, v18);
    *(_QWORD *)(a1 + 24) = v17;
    *(_BYTE *)(a1 + 32) = v18;
    v19 = *((unsigned __int8 *)a2 + 56);
    if (v19 == 255)
    {
      v35 = *(__int128 *)((char *)a2 + 40);
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_OWORD *)(a1 + 40) = v35;
      if (*((_QWORD *)a2 + 9))
        goto LABEL_22;
    }
    else
    {
      v20 = *((_QWORD *)a2 + 5);
      v21 = *((_QWORD *)a2 + 6);
      outlined copy of MeshDescriptor.Primitives(v20, v21, *((_BYTE *)a2 + 56));
      *(_QWORD *)(a1 + 40) = v20;
      *(_QWORD *)(a1 + 48) = v21;
      *(_BYTE *)(a1 + 56) = v19;
      if (*((_QWORD *)a2 + 9))
        goto LABEL_22;
    }
    v36 = a2[4];
    v37 = a2[5];
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v36;
    *(_OWORD *)(a1 + 80) = v37;
    goto LABEL_25;
  }
  if (!v4)
  {
    outlined destroy of MeshDescriptor(a1);
    v23 = a2[1];
    v22 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v23;
    *(_OWORD *)(a1 + 32) = v22;
    v25 = a2[4];
    v24 = a2[5];
    v26 = a2[3];
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v25;
    *(_OWORD *)(a1 + 80) = v24;
    *(_OWORD *)(a1 + 48) = v26;
    goto LABEL_25;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *((_QWORD *)a2 + 3);
  v6 = *((_BYTE *)a2 + 32);
  outlined copy of MeshDescriptor.Materials(v5, v6);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  outlined consume of MeshDescriptor.Materials(v7, v8);
  v9 = (__int128 *)(a1 + 40);
  v10 = (__int128 *)((char *)a2 + 40);
  v11 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v11 == 255)
    {
      v38 = *v10;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *v9 = v38;
    }
    else
    {
      v27 = *((_QWORD *)a2 + 5);
      v28 = *((_QWORD *)a2 + 6);
      outlined copy of MeshDescriptor.Primitives(v27, v28, *((_BYTE *)a2 + 56));
      *(_QWORD *)(a1 + 40) = v27;
      *(_QWORD *)(a1 + 48) = v28;
      *(_BYTE *)(a1 + 56) = v11;
    }
  }
  else if (v11 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 40);
    v34 = *((_BYTE *)a2 + 56);
    *v9 = *v10;
    *(_BYTE *)(a1 + 56) = v34;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 5);
    v13 = *((_QWORD *)a2 + 6);
    outlined copy of MeshDescriptor.Primitives(v12, v13, *((_BYTE *)a2 + 56));
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    v16 = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v11;
    outlined consume of MeshDescriptor.Primitives(v14, v15, v16);
  }
  v39 = (__int128 *)(a1 + 64);
  v40 = a2 + 4;
  v41 = *((_QWORD *)a2 + 9);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (!v41)
    {
      v44 = *v40;
      v45 = a2[5];
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *v39 = v44;
      *(_OWORD *)(a1 + 80) = v45;
      goto LABEL_25;
    }
LABEL_22:
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  if (v41)
  {
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 64);
    v42 = *((_QWORD *)a2 + 12);
    v43 = a2[5];
    *v39 = *v40;
    *(_OWORD *)(a1 + 80) = v43;
    *(_QWORD *)(a1 + 96) = v42;
  }
LABEL_25:
  v46 = (__int128 *)(a1 + 104);
  v47 = (__int128 *)((char *)a2 + 104);
  v48 = *((_QWORD *)a2 + 14);
  if (!*(_QWORD *)(a1 + 112))
  {
    if (!v48)
    {
      v73 = *v47;
      v74 = *(__int128 *)((char *)a2 + 136);
      *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
      *(_OWORD *)(a1 + 136) = v74;
      *v46 = v73;
      v75 = *(__int128 *)((char *)a2 + 152);
      v76 = *(__int128 *)((char *)a2 + 168);
      v77 = *(__int128 *)((char *)a2 + 184);
      *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
      *(_OWORD *)(a1 + 168) = v76;
      *(_OWORD *)(a1 + 184) = v77;
      *(_OWORD *)(a1 + 152) = v75;
      goto LABEL_49;
    }
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    v61 = *((_QWORD *)a2 + 16);
    v62 = *((_BYTE *)a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v61, v62);
    *(_QWORD *)(a1 + 128) = v61;
    *(_BYTE *)(a1 + 136) = v62;
    v63 = *((unsigned __int8 *)a2 + 160);
    if (v63 == 255)
    {
      v79 = a2[9];
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      *(_OWORD *)(a1 + 144) = v79;
      if (*((_QWORD *)a2 + 22))
        goto LABEL_46;
    }
    else
    {
      v64 = *((_QWORD *)a2 + 18);
      v65 = *((_QWORD *)a2 + 19);
      outlined copy of MeshDescriptor.Primitives(v64, v65, *((_BYTE *)a2 + 160));
      *(_QWORD *)(a1 + 144) = v64;
      *(_QWORD *)(a1 + 152) = v65;
      *(_BYTE *)(a1 + 160) = v63;
      if (*((_QWORD *)a2 + 22))
        goto LABEL_46;
    }
    v80 = *(__int128 *)((char *)a2 + 168);
    v81 = *(__int128 *)((char *)a2 + 184);
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
    *(_OWORD *)(a1 + 168) = v80;
    *(_OWORD *)(a1 + 184) = v81;
    goto LABEL_49;
  }
  if (!v48)
  {
    outlined destroy of MeshDescriptor(a1 + 104);
    v67 = *(__int128 *)((char *)a2 + 120);
    v66 = *(__int128 *)((char *)a2 + 136);
    *v46 = *v47;
    *(_OWORD *)(a1 + 120) = v67;
    *(_OWORD *)(a1 + 136) = v66;
    v69 = *(__int128 *)((char *)a2 + 168);
    v68 = *(__int128 *)((char *)a2 + 184);
    v70 = *(__int128 *)((char *)a2 + 152);
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
    *(_OWORD *)(a1 + 168) = v69;
    *(_OWORD *)(a1 + 184) = v68;
    *(_OWORD *)(a1 + 152) = v70;
    goto LABEL_49;
  }
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = *((_QWORD *)a2 + 16);
  v50 = *((_BYTE *)a2 + 136);
  outlined copy of MeshDescriptor.Materials(v49, v50);
  v51 = *(_QWORD *)(a1 + 128);
  v52 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v49;
  *(_BYTE *)(a1 + 136) = v50;
  outlined consume of MeshDescriptor.Materials(v51, v52);
  v53 = (__int128 *)(a1 + 144);
  v54 = a2 + 9;
  v55 = *((unsigned __int8 *)a2 + 160);
  if (*(unsigned __int8 *)(a1 + 160) == 255)
  {
    if (v55 == 255)
    {
      v82 = *v54;
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      *v53 = v82;
    }
    else
    {
      v71 = *((_QWORD *)a2 + 18);
      v72 = *((_QWORD *)a2 + 19);
      outlined copy of MeshDescriptor.Primitives(v71, v72, *((_BYTE *)a2 + 160));
      *(_QWORD *)(a1 + 144) = v71;
      *(_QWORD *)(a1 + 152) = v72;
      *(_BYTE *)(a1 + 160) = v55;
    }
  }
  else if (v55 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 144);
    v78 = *((_BYTE *)a2 + 160);
    *v53 = *v54;
    *(_BYTE *)(a1 + 160) = v78;
  }
  else
  {
    v56 = *((_QWORD *)a2 + 18);
    v57 = *((_QWORD *)a2 + 19);
    outlined copy of MeshDescriptor.Primitives(v56, v57, *((_BYTE *)a2 + 160));
    v58 = *(_QWORD *)(a1 + 144);
    v59 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 144) = v56;
    *(_QWORD *)(a1 + 152) = v57;
    v60 = *(_BYTE *)(a1 + 160);
    *(_BYTE *)(a1 + 160) = v55;
    outlined consume of MeshDescriptor.Primitives(v58, v59, v60);
  }
  v83 = (__int128 *)(a1 + 168);
  v84 = (__int128 *)((char *)a2 + 168);
  v85 = *((_QWORD *)a2 + 22);
  if (!*(_QWORD *)(a1 + 176))
  {
    if (!v85)
    {
      v88 = *v84;
      v89 = *(__int128 *)((char *)a2 + 184);
      *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
      *v83 = v88;
      *(_OWORD *)(a1 + 184) = v89;
      goto LABEL_49;
    }
LABEL_46:
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_49;
  }
  if (v85)
  {
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 168);
    v86 = *((_QWORD *)a2 + 25);
    v87 = *(__int128 *)((char *)a2 + 184);
    *v83 = *v84;
    *(_OWORD *)(a1 + 184) = v87;
    *(_QWORD *)(a1 + 200) = v86;
  }
LABEL_49:
  v90 = (__int128 *)(a1 + 208);
  v91 = a2 + 13;
  v92 = *((_QWORD *)a2 + 27);
  if (!*(_QWORD *)(a1 + 216))
  {
    if (!v92)
    {
      v117 = *v91;
      v118 = a2[15];
      *(_OWORD *)(a1 + 224) = a2[14];
      *(_OWORD *)(a1 + 240) = v118;
      *v90 = v117;
      v119 = a2[16];
      v120 = a2[17];
      v121 = a2[18];
      *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
      *(_OWORD *)(a1 + 272) = v120;
      *(_OWORD *)(a1 + 288) = v121;
      *(_OWORD *)(a1 + 256) = v119;
      goto LABEL_73;
    }
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
    v105 = *((_QWORD *)a2 + 29);
    v106 = *((_BYTE *)a2 + 240);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v105, v106);
    *(_QWORD *)(a1 + 232) = v105;
    *(_BYTE *)(a1 + 240) = v106;
    v107 = *((unsigned __int8 *)a2 + 264);
    if (v107 == 255)
    {
      v123 = *(__int128 *)((char *)a2 + 248);
      *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
      *(_OWORD *)(a1 + 248) = v123;
      if (*((_QWORD *)a2 + 35))
        goto LABEL_70;
    }
    else
    {
      v108 = *((_QWORD *)a2 + 31);
      v109 = *((_QWORD *)a2 + 32);
      outlined copy of MeshDescriptor.Primitives(v108, v109, *((_BYTE *)a2 + 264));
      *(_QWORD *)(a1 + 248) = v108;
      *(_QWORD *)(a1 + 256) = v109;
      *(_BYTE *)(a1 + 264) = v107;
      if (*((_QWORD *)a2 + 35))
        goto LABEL_70;
    }
    v124 = a2[17];
    v125 = a2[18];
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
    *(_OWORD *)(a1 + 272) = v124;
    *(_OWORD *)(a1 + 288) = v125;
    goto LABEL_73;
  }
  if (!v92)
  {
    outlined destroy of MeshDescriptor(a1 + 208);
    v111 = a2[14];
    v110 = a2[15];
    *v90 = *v91;
    *(_OWORD *)(a1 + 224) = v111;
    *(_OWORD *)(a1 + 240) = v110;
    v113 = a2[17];
    v112 = a2[18];
    v114 = a2[16];
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
    *(_OWORD *)(a1 + 272) = v113;
    *(_OWORD *)(a1 + 288) = v112;
    *(_OWORD *)(a1 + 256) = v114;
    goto LABEL_73;
  }
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v93 = *((_QWORD *)a2 + 29);
  v94 = *((_BYTE *)a2 + 240);
  outlined copy of MeshDescriptor.Materials(v93, v94);
  v95 = *(_QWORD *)(a1 + 232);
  v96 = *(_BYTE *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v93;
  *(_BYTE *)(a1 + 240) = v94;
  outlined consume of MeshDescriptor.Materials(v95, v96);
  v97 = (__int128 *)(a1 + 248);
  v98 = (__int128 *)((char *)a2 + 248);
  v99 = *((unsigned __int8 *)a2 + 264);
  if (*(unsigned __int8 *)(a1 + 264) == 255)
  {
    if (v99 == 255)
    {
      v126 = *v98;
      *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
      *v97 = v126;
    }
    else
    {
      v115 = *((_QWORD *)a2 + 31);
      v116 = *((_QWORD *)a2 + 32);
      outlined copy of MeshDescriptor.Primitives(v115, v116, *((_BYTE *)a2 + 264));
      *(_QWORD *)(a1 + 248) = v115;
      *(_QWORD *)(a1 + 256) = v116;
      *(_BYTE *)(a1 + 264) = v99;
    }
  }
  else if (v99 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 248);
    v122 = *((_BYTE *)a2 + 264);
    *v97 = *v98;
    *(_BYTE *)(a1 + 264) = v122;
  }
  else
  {
    v100 = *((_QWORD *)a2 + 31);
    v101 = *((_QWORD *)a2 + 32);
    outlined copy of MeshDescriptor.Primitives(v100, v101, *((_BYTE *)a2 + 264));
    v102 = *(_QWORD *)(a1 + 248);
    v103 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 248) = v100;
    *(_QWORD *)(a1 + 256) = v101;
    v104 = *(_BYTE *)(a1 + 264);
    *(_BYTE *)(a1 + 264) = v99;
    outlined consume of MeshDescriptor.Primitives(v102, v103, v104);
  }
  v127 = (__int128 *)(a1 + 272);
  v128 = a2 + 17;
  v129 = *((_QWORD *)a2 + 35);
  if (!*(_QWORD *)(a1 + 280))
  {
    if (!v129)
    {
      v132 = *v128;
      v133 = a2[18];
      *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
      *v127 = v132;
      *(_OWORD *)(a1 + 288) = v133;
      goto LABEL_73;
    }
LABEL_70:
    *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
    *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
    *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
    *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_73;
  }
  if (v129)
  {
    *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
    *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 272);
    v130 = *((_QWORD *)a2 + 38);
    v131 = a2[18];
    *v127 = *v128;
    *(_OWORD *)(a1 + 288) = v131;
    *(_QWORD *)(a1 + 304) = v130;
  }
LABEL_73:
  v134 = (char *)(a1 + 344);
  v135 = (char *)a2 + 344;
  v136 = (__int128 *)(a1 + 312);
  v137 = (__int128 *)((char *)a2 + 312);
  v138 = *((_QWORD *)a2 + 40);
  if (!*(_QWORD *)(a1 + 320))
  {
    if (!v138)
    {
      v163 = *v137;
      v164 = *(__int128 *)((char *)a2 + 344);
      *(_OWORD *)(a1 + 328) = *(__int128 *)((char *)a2 + 328);
      *(_OWORD *)(a1 + 344) = v164;
      *v136 = v163;
      v165 = *(__int128 *)((char *)a2 + 360);
      v166 = *(__int128 *)((char *)a2 + 376);
      v167 = *(__int128 *)((char *)a2 + 392);
      *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
      *(_OWORD *)(a1 + 376) = v166;
      *(_OWORD *)(a1 + 392) = v167;
      *(_OWORD *)(a1 + 360) = v165;
      goto LABEL_97;
    }
    *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
    *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
    v151 = *((_QWORD *)a2 + 42);
    v152 = *v135;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v151, v152);
    *(_QWORD *)(a1 + 336) = v151;
    *v134 = v152;
    v153 = *((unsigned __int8 *)a2 + 368);
    if (v153 == 255)
    {
      v169 = a2[22];
      *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
      *(_OWORD *)(a1 + 352) = v169;
      if (*((_QWORD *)a2 + 48))
        goto LABEL_94;
    }
    else
    {
      v154 = *((_QWORD *)a2 + 44);
      v155 = *((_QWORD *)a2 + 45);
      outlined copy of MeshDescriptor.Primitives(v154, v155, *((_BYTE *)a2 + 368));
      *(_QWORD *)(a1 + 352) = v154;
      *(_QWORD *)(a1 + 360) = v155;
      *(_BYTE *)(a1 + 368) = v153;
      if (*((_QWORD *)a2 + 48))
        goto LABEL_94;
    }
    v170 = *(__int128 *)((char *)a2 + 376);
    v171 = *(__int128 *)((char *)a2 + 392);
    *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
    *(_OWORD *)(a1 + 376) = v170;
    *(_OWORD *)(a1 + 392) = v171;
    goto LABEL_97;
  }
  if (!v138)
  {
    outlined destroy of MeshDescriptor(a1 + 312);
    v157 = *(__int128 *)((char *)a2 + 328);
    v156 = *(__int128 *)((char *)a2 + 344);
    *v136 = *v137;
    *(_OWORD *)(a1 + 328) = v157;
    *(_OWORD *)(a1 + 344) = v156;
    v159 = *(__int128 *)((char *)a2 + 376);
    v158 = *(__int128 *)((char *)a2 + 392);
    v160 = *(__int128 *)((char *)a2 + 360);
    *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
    *(_OWORD *)(a1 + 376) = v159;
    *(_OWORD *)(a1 + 392) = v158;
    *(_OWORD *)(a1 + 360) = v160;
    goto LABEL_97;
  }
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v139 = *((_QWORD *)a2 + 42);
  v140 = *v135;
  outlined copy of MeshDescriptor.Materials(v139, *v135);
  v141 = *(_QWORD *)(a1 + 336);
  v142 = *v134;
  *(_QWORD *)(a1 + 336) = v139;
  *v134 = v140;
  outlined consume of MeshDescriptor.Materials(v141, v142);
  v143 = (__int128 *)(a1 + 352);
  v144 = a2 + 22;
  v145 = *((unsigned __int8 *)a2 + 368);
  if (*(unsigned __int8 *)(a1 + 368) == 255)
  {
    if (v145 == 255)
    {
      v172 = *v144;
      *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
      *v143 = v172;
    }
    else
    {
      v161 = *((_QWORD *)a2 + 44);
      v162 = *((_QWORD *)a2 + 45);
      outlined copy of MeshDescriptor.Primitives(v161, v162, *((_BYTE *)a2 + 368));
      *(_QWORD *)(a1 + 352) = v161;
      *(_QWORD *)(a1 + 360) = v162;
      *(_BYTE *)(a1 + 368) = v145;
    }
  }
  else if (v145 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 352);
    v168 = *((_BYTE *)a2 + 368);
    *v143 = *v144;
    *(_BYTE *)(a1 + 368) = v168;
  }
  else
  {
    v146 = *((_QWORD *)a2 + 44);
    v147 = *((_QWORD *)a2 + 45);
    outlined copy of MeshDescriptor.Primitives(v146, v147, *((_BYTE *)a2 + 368));
    v148 = *(_QWORD *)(a1 + 352);
    v149 = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 352) = v146;
    *(_QWORD *)(a1 + 360) = v147;
    v150 = *(_BYTE *)(a1 + 368);
    *(_BYTE *)(a1 + 368) = v145;
    outlined consume of MeshDescriptor.Primitives(v148, v149, v150);
  }
  v173 = (__int128 *)(a1 + 376);
  v174 = (__int128 *)((char *)a2 + 376);
  v175 = *((_QWORD *)a2 + 48);
  if (!*(_QWORD *)(a1 + 384))
  {
    if (!v175)
    {
      v178 = *v174;
      v179 = *(__int128 *)((char *)a2 + 392);
      *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
      *v173 = v178;
      *(_OWORD *)(a1 + 392) = v179;
      goto LABEL_97;
    }
LABEL_94:
    *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
    *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
    *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
    *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
    *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_97;
  }
  if (v175)
  {
    *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
    *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 376);
    v176 = *((_QWORD *)a2 + 51);
    v177 = *(__int128 *)((char *)a2 + 392);
    *v173 = *v174;
    *(_OWORD *)(a1 + 392) = v177;
    *(_QWORD *)(a1 + 408) = v176;
  }
LABEL_97:
  v180 = (__int128 *)(a1 + 416);
  v181 = a2 + 26;
  v182 = *((_QWORD *)a2 + 53);
  if (!*(_QWORD *)(a1 + 424))
  {
    if (!v182)
    {
      v207 = *v181;
      v208 = a2[28];
      *(_OWORD *)(a1 + 432) = a2[27];
      *(_OWORD *)(a1 + 448) = v208;
      *v180 = v207;
      v209 = a2[29];
      v210 = a2[30];
      v211 = a2[31];
      *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
      *(_OWORD *)(a1 + 480) = v210;
      *(_OWORD *)(a1 + 496) = v211;
      *(_OWORD *)(a1 + 464) = v209;
      return a1;
    }
    *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
    *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
    *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
    v195 = *((_QWORD *)a2 + 55);
    v196 = *((_BYTE *)a2 + 448);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v195, v196);
    *(_QWORD *)(a1 + 440) = v195;
    *(_BYTE *)(a1 + 448) = v196;
    v197 = *((unsigned __int8 *)a2 + 472);
    if (v197 == 255)
    {
      v213 = *(__int128 *)((char *)a2 + 456);
      *(_BYTE *)(a1 + 472) = *((_BYTE *)a2 + 472);
      *(_OWORD *)(a1 + 456) = v213;
      if (!*((_QWORD *)a2 + 61))
      {
LABEL_112:
        v214 = a2[30];
        v215 = a2[31];
        *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
        *(_OWORD *)(a1 + 480) = v214;
        *(_OWORD *)(a1 + 496) = v215;
        return a1;
      }
    }
    else
    {
      v198 = *((_QWORD *)a2 + 57);
      v199 = *((_QWORD *)a2 + 58);
      outlined copy of MeshDescriptor.Primitives(v198, v199, *((_BYTE *)a2 + 472));
      *(_QWORD *)(a1 + 456) = v198;
      *(_QWORD *)(a1 + 464) = v199;
      *(_BYTE *)(a1 + 472) = v197;
      if (!*((_QWORD *)a2 + 61))
        goto LABEL_112;
    }
LABEL_118:
    *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
    *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
    *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
    *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
    *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  if (!v182)
  {
    outlined destroy of MeshDescriptor(a1 + 416);
    v201 = a2[27];
    v200 = a2[28];
    *v180 = *v181;
    *(_OWORD *)(a1 + 432) = v201;
    *(_OWORD *)(a1 + 448) = v200;
    v203 = a2[30];
    v202 = a2[31];
    v204 = a2[29];
    *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
    *(_OWORD *)(a1 + 480) = v203;
    *(_OWORD *)(a1 + 496) = v202;
    *(_OWORD *)(a1 + 464) = v204;
    return a1;
  }
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v183 = *((_QWORD *)a2 + 55);
  v184 = *((_BYTE *)a2 + 448);
  outlined copy of MeshDescriptor.Materials(v183, v184);
  v185 = *(_QWORD *)(a1 + 440);
  v186 = *(_BYTE *)(a1 + 448);
  *(_QWORD *)(a1 + 440) = v183;
  *(_BYTE *)(a1 + 448) = v184;
  outlined consume of MeshDescriptor.Materials(v185, v186);
  v187 = (__int128 *)(a1 + 456);
  v188 = (__int128 *)((char *)a2 + 456);
  v189 = *((unsigned __int8 *)a2 + 472);
  if (*(unsigned __int8 *)(a1 + 472) == 255)
  {
    if (v189 == 255)
    {
      v216 = *v188;
      *(_BYTE *)(a1 + 472) = *((_BYTE *)a2 + 472);
      *v187 = v216;
    }
    else
    {
      v205 = *((_QWORD *)a2 + 57);
      v206 = *((_QWORD *)a2 + 58);
      outlined copy of MeshDescriptor.Primitives(v205, v206, *((_BYTE *)a2 + 472));
      *(_QWORD *)(a1 + 456) = v205;
      *(_QWORD *)(a1 + 464) = v206;
      *(_BYTE *)(a1 + 472) = v189;
    }
  }
  else if (v189 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 456);
    v212 = *((_BYTE *)a2 + 472);
    *v187 = *v188;
    *(_BYTE *)(a1 + 472) = v212;
  }
  else
  {
    v190 = *((_QWORD *)a2 + 57);
    v191 = *((_QWORD *)a2 + 58);
    outlined copy of MeshDescriptor.Primitives(v190, v191, *((_BYTE *)a2 + 472));
    v192 = *(_QWORD *)(a1 + 456);
    v193 = *(_QWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 456) = v190;
    *(_QWORD *)(a1 + 464) = v191;
    v194 = *(_BYTE *)(a1 + 472);
    *(_BYTE *)(a1 + 472) = v189;
    outlined consume of MeshDescriptor.Primitives(v192, v193, v194);
  }
  v217 = (__int128 *)(a1 + 480);
  v218 = a2 + 30;
  v219 = *((_QWORD *)a2 + 61);
  if (!*(_QWORD *)(a1 + 488))
  {
    if (!v219)
    {
      v222 = *v218;
      v223 = a2[31];
      *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
      *v217 = v222;
      *(_OWORD *)(a1 + 496) = v223;
      return a1;
    }
    goto LABEL_118;
  }
  if (v219)
  {
    *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
    *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 480);
    v220 = *((_QWORD *)a2 + 64);
    v221 = a2[31];
    *v217 = *v218;
    *(_OWORD *)(a1 + 496) = v221;
    *(_QWORD *)(a1 + 512) = v220;
  }
  return a1;
}

uint64_t outlined destroy of MeshDescriptor(uint64_t a1)
{
  destroy for MeshDescriptor(a1);
  return a1;
}

void *__swift_memcpy520_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x208uLL);
}

uint64_t assignWithTake for ExtrudedShapeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _OWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  _OWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  _OWORD *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  _OWORD *v65;
  _OWORD *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_7;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of MeshDescriptor(a1);
LABEL_7:
    v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    goto LABEL_15;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v5;
  outlined consume of MeshDescriptor.Materials(v6, v7);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 != 255)
  {
    v10 = *(unsigned __int8 *)(a2 + 56);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *v8;
      *(_BYTE *)(a1 + 56) = v10;
      outlined consume of MeshDescriptor.Primitives(v11, v12, v9);
      goto LABEL_10;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_10:
  if (*(_QWORD *)(a1 + 72))
  {
    v16 = *(_QWORD *)(a2 + 72);
    if (v16)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v16;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      goto LABEL_15;
    }
    outlined destroy of MeshDescriptor.Skinning(a1 + 64);
  }
  v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
LABEL_15:
  if (!*(_QWORD *)(a1 + 112))
  {
LABEL_21:
    v27 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v27;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v28 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v28;
    v29 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v29;
    goto LABEL_29;
  }
  v18 = *(_QWORD *)(a2 + 112);
  if (!v18)
  {
    outlined destroy of MeshDescriptor(a1 + 104);
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  v19 = *(_BYTE *)(a2 + 136);
  v20 = *(_QWORD *)(a1 + 128);
  v21 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = v19;
  outlined consume of MeshDescriptor.Materials(v20, v21);
  v22 = (_OWORD *)(a2 + 144);
  v23 = *(unsigned __int8 *)(a1 + 160);
  if (v23 != 255)
  {
    v24 = *(unsigned __int8 *)(a2 + 160);
    if (v24 != 255)
    {
      v25 = *(_QWORD *)(a1 + 144);
      v26 = *(_QWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 144) = *v22;
      *(_BYTE *)(a1 + 160) = v24;
      outlined consume of MeshDescriptor.Primitives(v25, v26, v23);
      goto LABEL_24;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 144);
  }
  *(_OWORD *)(a1 + 144) = *v22;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
LABEL_24:
  if (*(_QWORD *)(a1 + 176))
  {
    v30 = *(_QWORD *)(a2 + 176);
    if (v30)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v30;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      goto LABEL_29;
    }
    outlined destroy of MeshDescriptor.Skinning(a1 + 168);
  }
  v31 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v31;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
LABEL_29:
  v32 = (char *)(a1 + 344);
  if (!*(_QWORD *)(a1 + 216))
  {
LABEL_35:
    v42 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v42;
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    v43 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v43;
    v44 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v44;
    goto LABEL_43;
  }
  v33 = *(_QWORD *)(a2 + 216);
  if (!v33)
  {
    outlined destroy of MeshDescriptor(a1 + 208);
    goto LABEL_35;
  }
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v33;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease();
  v34 = *(_BYTE *)(a2 + 240);
  v35 = *(_QWORD *)(a1 + 232);
  v36 = *(_BYTE *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = v34;
  outlined consume of MeshDescriptor.Materials(v35, v36);
  v37 = (_OWORD *)(a2 + 248);
  v38 = *(unsigned __int8 *)(a1 + 264);
  if (v38 != 255)
  {
    v39 = *(unsigned __int8 *)(a2 + 264);
    if (v39 != 255)
    {
      v40 = *(_QWORD *)(a1 + 248);
      v41 = *(_QWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 248) = *v37;
      *(_BYTE *)(a1 + 264) = v39;
      outlined consume of MeshDescriptor.Primitives(v40, v41, v38);
      goto LABEL_38;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 248);
  }
  *(_OWORD *)(a1 + 248) = *v37;
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
LABEL_38:
  if (*(_QWORD *)(a1 + 280))
  {
    v45 = *(_QWORD *)(a2 + 280);
    if (v45)
    {
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = v45;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      goto LABEL_43;
    }
    outlined destroy of MeshDescriptor.Skinning(a1 + 272);
  }
  v46 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v46;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
LABEL_43:
  if (!*(_QWORD *)(a1 + 320))
  {
LABEL_49:
    v56 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v56;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    v57 = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 328) = v57;
    v58 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 360) = v58;
    goto LABEL_57;
  }
  v47 = *(_QWORD *)(a2 + 320);
  if (!v47)
  {
    outlined destroy of MeshDescriptor(a1 + 312);
    goto LABEL_49;
  }
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v47;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRelease();
  v48 = *(_BYTE *)(a2 + 344);
  v49 = *(_QWORD *)(a1 + 336);
  v50 = *v32;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *v32 = v48;
  outlined consume of MeshDescriptor.Materials(v49, v50);
  v51 = (_OWORD *)(a2 + 352);
  v52 = *(unsigned __int8 *)(a1 + 368);
  if (v52 != 255)
  {
    v53 = *(unsigned __int8 *)(a2 + 368);
    if (v53 != 255)
    {
      v54 = *(_QWORD *)(a1 + 352);
      v55 = *(_QWORD *)(a1 + 360);
      *(_OWORD *)(a1 + 352) = *v51;
      *(_BYTE *)(a1 + 368) = v53;
      outlined consume of MeshDescriptor.Primitives(v54, v55, v52);
      goto LABEL_52;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 352);
  }
  *(_OWORD *)(a1 + 352) = *v51;
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
LABEL_52:
  if (*(_QWORD *)(a1 + 384))
  {
    v59 = *(_QWORD *)(a2 + 384);
    if (v59)
    {
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = v59;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      goto LABEL_57;
    }
    outlined destroy of MeshDescriptor.Skinning(a1 + 376);
  }
  v60 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v60;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
LABEL_57:
  if (*(_QWORD *)(a1 + 424))
  {
    v61 = *(_QWORD *)(a2 + 424);
    if (v61)
    {
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 424) = v61;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
      swift_bridgeObjectRelease();
      v62 = *(_BYTE *)(a2 + 448);
      v63 = *(_QWORD *)(a1 + 440);
      v64 = *(_BYTE *)(a1 + 448);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_BYTE *)(a1 + 448) = v62;
      outlined consume of MeshDescriptor.Materials(v63, v64);
      v65 = (_OWORD *)(a1 + 456);
      v66 = (_OWORD *)(a2 + 456);
      v67 = *(unsigned __int8 *)(a1 + 472);
      if (v67 != 255)
      {
        v68 = *(unsigned __int8 *)(a2 + 472);
        if (v68 != 255)
        {
          v69 = *(_QWORD *)(a1 + 456);
          v70 = *(_QWORD *)(a1 + 464);
          *v65 = *v66;
          *(_BYTE *)(a1 + 472) = v68;
          outlined consume of MeshDescriptor.Primitives(v69, v70, v67);
          goto LABEL_66;
        }
        outlined destroy of MeshDescriptor.Primitives((uint64_t)v65);
      }
      *v65 = *v66;
      *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
LABEL_66:
      if (*(_QWORD *)(a1 + 488))
      {
        v74 = *(_QWORD *)(a2 + 488);
        if (v74)
        {
          *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
          *(_QWORD *)(a1 + 488) = v74;
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
          return a1;
        }
        outlined destroy of MeshDescriptor.Skinning(a1 + 480);
      }
      v75 = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = v75;
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      return a1;
    }
    outlined destroy of MeshDescriptor(a1 + 416);
  }
  v71 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v71;
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  v72 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v72;
  v73 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v73;
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtrudedShapeDescriptor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 520))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtrudedShapeDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 520) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 520) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtrudedShapeDescriptor()
{
  return &type metadata for ExtrudedShapeDescriptor;
}

uint64_t getEnumTagSinglePayload for PathSpan(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PathSpan(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for PathSpan()
{
  return &unk_24DFD6110;
}

uint64_t outlined copy of ShapeExtrusionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for ShapeExtrusionError(uint64_t a1)
{
  return outlined consume of ShapeExtrusionError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of ShapeExtrusionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ShapeExtrusionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ShapeExtrusionError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ShapeExtrusionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ShapeExtrusionError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ShapeExtrusionError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ShapeExtrusionError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ShapeExtrusionError(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ShapeExtrusionError()
{
  return &type metadata for ShapeExtrusionError;
}

void static AnimationHandoffType.compose.getter(_BYTE *a1@<X8>)
{
  *a1 = 0x80;
}

void Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:handoffType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  int v6;

  v6 = *a6;
  REAnimationHandoffDefaultDescEx();
  __asm { BR              X9 }
}

uint64_t sub_21BDBE6E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CMTimebaseRef timebaseOut, int a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  char v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  const void *v37;
  CFTypeID v38;
  const __CFAllocator *v39;
  OpaqueCMClock *v40;
  OpaqueCMTimebase *v41;
  CFTypeID v42;
  OpaqueCMTimebase *v43;
  uint64_t v44;
  CMTimebaseRef v46;
  int v47;
  uint64_t v48;
  BOOL v49;

  v35 = (v32 & 1) == 0;
  if (v30)
  {
    if (v30 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v30 <= 0x7FFFFFFF)
    {
      v33 = v30;
      goto LABEL_5;
    }
    __break(1u);
  }
LABEL_5:
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  LODWORD(v46) = 1;
  HIDWORD(v46) = v34;
  v47 = v33;
  v48 = v31;
  v49 = v35;
  v36 = REAnimationComponentPlay();
  if (!v29)
    goto LABEL_13;
  v37 = (const void *)swift_unknownObjectRetain();
  v38 = CFGetTypeID(v37);
  if (v38 == CMClockGetTypeID())
  {
    v46 = 0;
    v39 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    type metadata accessor for CMClockRef(0);
    swift_unknownObjectRetain();
    v40 = (OpaqueCMClock *)swift_dynamicCastUnknownClassUnconditional();
    CMTimebaseCreateWithSourceClock(v39, v40, &v46);

    if (v46)
    {
      v41 = v46;
LABEL_11:
      v43 = v41;
      REAnimationComponentSetAnimationParentTimebase();

    }
  }
  else
  {
    v42 = CFGetTypeID(v29);
    if (v42 == CMTimebaseGetTypeID())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      v41 = (OpaqueCMTimebase *)(id)swift_dynamicCastUnknownClassUnconditional();
      goto LABEL_11;
    }
  }
  swift_unknownObjectRelease();
LABEL_13:
  if ((v28 & 1) != 0)
    REAnimationComponentPauseAnimation();
  type metadata accessor for AnimationPlaybackController();
  v44 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v44 + 16) = v36;
  swift_beginAccess();
  swift_weakAssign();
  return v44;
}

uint64_t Entity.playAnimation(named:transitionDuration:startsPaused:recursive:)(unint64_t a1, uint64_t a2, char a3, char a4, double a5)
{
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t Child;
  uint64_t v12;
  uint64_t Object;
  unsigned __int8 *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  ValueMetadata *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSString *v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t TimelineGroup;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  char v50;
  float v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char v56;
  float v57;
  uint64_t v58;
  uint64_t result;
  char v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if ((a4 & 1) != 0)
  {
    swift_retain();
    if (REEntityGetChildCount() >= 1)
    {
      v9 = 0;
      v10 = &type metadata for __EntityInfoComponent;
      v60 = a3;
      while (v9 < REEntityGetChildCount())
      {
        Child = REEntityGetChild();
        if (!Child)
          goto LABEL_67;
        v12 = Child;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
            goto LABEL_54;
          specialized static SceneManager.customComponentType(_:)((uint64_t)v10, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent())
            goto LABEL_33;
          Object = RECustomComponentGetObject();
          if (!Object)
            goto LABEL_33;
          v14 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v15 = 1;
          else
            v15 = v14 == 0;
          if (v15)
          {
            swift_retain();
          }
          else
          {
            v16 = *v14;
            v17 = String.init(utf8String:)();
            if (v18)
              v19 = v17;
            else
              v19 = 0;
            if (v18)
              v20 = v18;
            else
              v20 = 0xE000000000000000;
            v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v16 == 42, v19, v20);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(_QWORD *)(swift_allocObject() + 16) = v14;
          }
          if (!v14)
            goto LABEL_68;
          v21 = v10;
          swift_retain();
          v22 = String.init(utf8String:)();
          v24 = v23;
          swift_release();
          if (v24)
            v25 = v22;
          else
            v25 = 0;
          if (!v24)
            v24 = 0xE000000000000000;
          v26 = (NSString *)MEMORY[0x220768C3C](v25, v24);
          swift_bridgeObjectRelease();
          v27 = NSClassFromString(v26);

          swift_release();
          v10 = v21;
          a3 = v60;
          if (!v27)
            goto LABEL_33;
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          v28 = swift_dynamicCastMetatype();
          if (v28)
          {
            v29 = (*(uint64_t (**)(void))(v28 + 232))();
            v30 = *(_QWORD *)(v29 + 16);
            swift_retain();
            MEMORY[0x22076D160](v30, 0);
            *(_QWORD *)(v29 + 16) = v12;
            MEMORY[0x22076D160](v12, v29);
            swift_release();
          }
          else
          {
LABEL_33:
            makeEntity(for:)(v12);
          }
        }
        if (v9 >= REEntityGetChildCount())
          goto LABEL_53;
        ++v9;
        Entity.playAnimation(named:transitionDuration:startsPaused:recursive:)(a1, a2, a3 & 1, 1, a5);
        swift_release();
        swift_release();
        if (v9 >= REEntityGetChildCount())
          goto LABEL_36;
      }
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
LABEL_36:
    swift_release();
  }
  v31 = Entity.availableAnimations.getter();
  swift_bridgeObjectRetain();
  a1 = specialized _ArrayProtocol.filter(_:)(v31, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(a1 >> 62))
  {
    v32 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32 == 1)
      goto LABEL_56;
    goto LABEL_39;
  }
LABEL_55:
  v32 = _CocoaArrayWrapper.endIndex.getter();
  if (v32 == 1)
  {
LABEL_56:
    if ((a1 & 0xC000000000000001) == 0)
    {
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
LABEL_59:
        swift_bridgeObjectRelease();
        REAnimationHandoffDefaultDescEx();
        v53 = v61;
        v54 = v62;
        v55 = v63;
        v56 = v64;
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        LODWORD(v61) = v53;
        v57 = a5;
        *((float *)&v61 + 1) = v57;
        v62 = v54;
        v63 = v55;
        LOBYTE(v64) = v56;
        v58 = REAnimationComponentPlay();
        if ((a3 & 1) != 0)
          REAnimationComponentPauseAnimation();
        type metadata accessor for AnimationPlaybackController();
        v33 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v33 + 16) = v58;
        swift_beginAccess();
        swift_weakAssign();
        swift_release();
        return v33;
      }
      goto LABEL_66;
    }
LABEL_64:
    MEMORY[0x220769770](0, a1);
    goto LABEL_59;
  }
LABEL_39:
  if (!v32)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for AnimationPlaybackController();
    v33 = swift_allocObject();
    swift_weakInit();
    *(_QWORD *)(v33 + 16) = 0;
    swift_beginAccess();
    swift_weakAssign();
    return v33;
  }
  v34 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v34, (uint64_t)&v61);
  v35 = v64;
  v36 = v65;
  __swift_project_boxed_opaque_existential_1(&v61, v64);
  (*(void (**)(uint64_t, uint64_t))(v36 + 32))(v35, v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
  if ((unint64_t)(v32 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_64;
  }
  v37 = swift_slowAlloc();
  if (v32 < 0)
  {
    __break(1u);
LABEL_66:
    __break(1u);
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v38 = v37;
  for (i = 0; i != v32; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v40 = MEMORY[0x220769770](i, a1);
    else
      v40 = swift_retain();
    v41 = *(_QWORD *)(v40 + 16);
    swift_release();
    *(_QWORD *)(v38 + 8 * i) = v41;
  }
  swift_bridgeObjectRelease();
  TimelineGroup = REAssetManagerTimelineAssetCreateTimelineGroup();
  if (TimelineGroup)
  {
    v43 = TimelineGroup;
    REEntityGetName();
    v44 = String.init(cString:)();
    v46 = v45;
    type metadata accessor for AnimationResource();
    v47 = (_QWORD *)swift_allocObject();
    v47[2] = v43;
    v47[3] = v44;
    v47[4] = v46;
    RERetain();
    REAssetSetSwiftObject();
    REAnimationHandoffDefaultDescEx();
    LODWORD(v46) = v61;
    v48 = v62;
    v49 = v63;
    v50 = v64;
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    LODWORD(v61) = v46;
    v51 = a5;
    *((float *)&v61 + 1) = v51;
    v62 = v48;
    v63 = v49;
    LOBYTE(v64) = v50;
    v52 = REAnimationComponentPlay();
    if ((a3 & 1) != 0)
      REAnimationComponentPauseAnimation();
    type metadata accessor for AnimationPlaybackController();
    v33 = swift_allocObject();
    swift_weakInit();
    *(_QWORD *)(v33 + 16) = v52;
    swift_beginAccess();
    swift_weakAssign();
    swift_release();
    MEMORY[0x220772F44](v38, -1, -1);
    return v33;
  }
LABEL_69:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, const void *a6)
{
  int v10;
  float v11;
  uint64_t v12;
  const void *v13;
  CFTypeID v14;
  const __CFAllocator *v15;
  OpaqueCMClock *v16;
  OpaqueCMTimebase *v17;
  CFTypeID v18;
  OpaqueCMTimebase *v19;
  uint64_t v20;
  CMTimebaseRef timebaseOut;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  REAnimationHandoffDefaultDescEx();
  if (a3)
  {
    if (a3 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a3 <= 0x7FFFFFFF)
    {
      v10 = 2;
      goto LABEL_6;
    }
    __break(1u);
  }
  v10 = (int)timebaseOut;
  LODWORD(a3) = v23;
LABEL_6:
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  LODWORD(timebaseOut) = v10;
  v11 = a1;
  *((float *)&timebaseOut + 1) = v11;
  v23 = a3;
  v12 = REAnimationComponentPlay();
  if (!a6)
    goto LABEL_14;
  v13 = (const void *)swift_unknownObjectRetain();
  v14 = CFGetTypeID(v13);
  if (v14 == CMClockGetTypeID())
  {
    timebaseOut = 0;
    v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    type metadata accessor for CMClockRef(0);
    swift_unknownObjectRetain();
    v16 = (OpaqueCMClock *)swift_dynamicCastUnknownClassUnconditional();
    CMTimebaseCreateWithSourceClock(v15, v16, &timebaseOut);

    if (timebaseOut)
    {
      v17 = timebaseOut;
LABEL_12:
      v19 = v17;
      REAnimationComponentSetAnimationParentTimebase();

    }
  }
  else
  {
    v18 = CFGetTypeID(a6);
    if (v18 == CMTimebaseGetTypeID())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      v17 = (OpaqueCMTimebase *)(id)swift_dynamicCastUnknownClassUnconditional();
      goto LABEL_12;
    }
  }
  swift_unknownObjectRelease();
LABEL_14:
  if ((a5 & 1) != 0)
    REAnimationComponentPauseAnimation();
  type metadata accessor for AnimationPlaybackController();
  v20 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v20 + 16) = v12;
  swift_beginAccess();
  swift_weakAssign();
  return v20;
}

uint64_t Entity.playAnimation(_:transitionDuration:startsPaused:)(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  REAnimationHandoffDefaultDescEx();
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  v3 = REAnimationComponentPlay();
  if ((a2 & 1) != 0)
    REAnimationComponentPauseAnimation();
  type metadata accessor for AnimationPlaybackController();
  v4 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v4 + 16) = v3;
  swift_beginAccess();
  swift_weakAssign();
  return v4;
}

Swift::Void __swiftcall Entity.stopAllAnimations(recursive:)(Swift::Bool recursive)
{
  uint64_t v2;
  uint64_t Child;
  uint64_t v4;
  uint64_t Object;
  unsigned __int8 *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSString *v18;
  Class v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  REAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REAnimationComponentStopAllAnimations();
    RENetworkMarkComponentDirty();
  }
  if (recursive)
  {
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_39:
      swift_release();
    }
    else
    {
      v2 = 0;
      while (v2 < REEntityGetChildCount())
      {
        Child = REEntityGetChild();
        if (!Child)
          goto LABEL_44;
        v4 = Child;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
            goto LABEL_43;
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent())
            goto LABEL_36;
          Object = RECustomComponentGetObject();
          if (!Object)
            goto LABEL_36;
          v6 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v7 = 1;
          else
            v7 = v6 == 0;
          if (v7)
          {
            swift_retain();
          }
          else
          {
            v8 = *v6;
            v9 = String.init(utf8String:)();
            if (v10)
              v11 = v9;
            else
              v11 = 0;
            if (v10)
              v12 = v10;
            else
              v12 = 0xE000000000000000;
            v6 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(_QWORD *)(swift_allocObject() + 16) = v6;
          }
          if (!v6)
            goto LABEL_45;
          swift_retain();
          v13 = String.init(utf8String:)();
          v15 = v14;
          swift_release();
          v16 = v15 ? v13 : 0;
          v17 = v15 ? v15 : 0xE000000000000000;
          v18 = (NSString *)MEMORY[0x220768C3C](v16, v17);
          swift_bridgeObjectRelease();
          v19 = NSClassFromString(v18);

          swift_release();
          if (!v19)
            goto LABEL_36;
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          v20 = swift_dynamicCastMetatype();
          if (v20)
          {
            v21 = (*(uint64_t (**)(void))(v20 + 232))();
            v22 = *(_QWORD *)(v21 + 16);
            swift_retain();
            MEMORY[0x22076D160](v22, 0);
            *(_QWORD *)(v21 + 16) = v4;
            MEMORY[0x22076D160](v4, v21);
            swift_release();
          }
          else
          {
LABEL_36:
            makeEntity(for:)(v4);
          }
        }
        if (v2 >= REEntityGetChildCount())
          goto LABEL_42;
        ++v2;
        Entity.stopAllAnimations(recursive:)(1);
        swift_release();
        if (v2 >= REEntityGetChildCount())
          goto LABEL_39;
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
    }
  }
}

id Entity.defaultAnimationClock.getter()
{
  id result;
  uint64_t ServiceLocator;

  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  result = (id)REAnimationComponentCopyDefaultTimebaseRef();
  if (!result)
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    ServiceLocator = REEngineGetServiceLocator();
    result = (id)MEMORY[0x22076FD4C](ServiceLocator);
    if (result)
      return (id)REAnimationServiceGetRootTimebase();
    else
      __break(1u);
  }
  return result;
}

uint64_t key path setter for Entity.defaultAnimationClock : Entity()
{
  void *v0;

  swift_unknownObjectRetain();
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETimebaseComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    type metadata accessor for CMTimebaseRef(0);
    swift_unknownObjectRetain();
    v0 = (void *)swift_dynamicCastUnknownClassUnconditional();
    RETimebaseComponentAddTimebase();

    REAnimationComponentSetDefaultTimebaseID();
  }
  return swift_unknownObjectRelease();
}

uint64_t Entity.defaultAnimationClock.setter()
{
  void *v0;

  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETimebaseComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    type metadata accessor for CMTimebaseRef(0);
    swift_unknownObjectRetain();
    v0 = (void *)swift_dynamicCastUnknownClassUnconditional();
    RETimebaseComponentAddTimebase();

    REAnimationComponentSetDefaultTimebaseID();
  }
  return swift_unknownObjectRelease();
}

void (*Entity.defaultAnimationClock.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  uint64_t ServiceLocator;
  void (*result)(void **, char);

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  v4 = (id)REAnimationComponentCopyDefaultTimebaseRef();
  if (v4)
    goto LABEL_4;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  ServiceLocator = REEngineGetServiceLocator();
  result = (void (*)(void **, char))MEMORY[0x22076FD4C](ServiceLocator);
  if (result)
  {
    v4 = (id)REAnimationServiceGetRootTimebase();
LABEL_4:
    v3[3] = v4;
    return Entity.defaultAnimationClock.modify;
  }
  __break(1u);
  return result;
}

void Entity.defaultAnimationClock.modify(void **a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RETimebaseComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      v3 = (void *)swift_dynamicCastUnknownClassUnconditional();
      RETimebaseComponentAddTimebase();

      REAnimationComponentSetDefaultTimebaseID();
    }
    swift_unknownObjectRelease();
  }
  else
  {
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RETimebaseComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      v4 = (void *)swift_dynamicCastUnknownClassUnconditional();
      RETimebaseComponentAddTimebase();

      REAnimationComponentSetDefaultTimebaseID();
    }
  }
  swift_unknownObjectRelease();
  free(v2);
}

void AnimationHandoffType.HandoffType.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

void sub_21BDBFB40(uint64_t a1, char a2)
{
  Swift::UInt8 v2;

  v2 = a2 & 1;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
}

uint64_t AnimationHandoffType.HandoffType.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21BDBFBCC + 4 * byte_21BE7BC54[a1]))(0xD000000000000012, 0x800000021BE93380);
}

uint64_t sub_21BDBFBCC()
{
  return 0x6563616C706572;
}

uint64_t sub_21BDBFBE4()
{
  return 0x65736F706D6F63;
}

uint64_t sub_21BDBFBFC()
{
  return 1886352499;
}

void AnimationHandoffType.HandoffType.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_21BDBFC5C()
{
  char v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0 & 1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationHandoffType.HandoffType.CodingKeys()
{
  unsigned __int8 *v0;

  return AnimationHandoffType.HandoffType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationHandoffType.HandoffType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AnimationHandoffType.HandoffType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.CodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.CodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.ComposeCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.ComposeCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.StopCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.StopCodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance AnimationHandoffType.HandoffType()
{
  char *v0;

  AnimationHandoffType.HandoffType.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AnimationHandoffType.HandoffType(uint64_t a1)
{
  char *v1;

  AnimationHandoffType.HandoffType.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationHandoffType.HandoffType()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_21BDBFFB0()
{
  char v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0 & 1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimationHandoffType.HandoffType(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_21BDC0044 + 4 * byte_21BE7BC61[*a1 >> 6]))();
}

uint64_t sub_21BDC0044@<X0>(unsigned int a1@<W8>)
{
  char v1;
  char v2;
  char v3;

  v2 = ((v1 & 1) == 0) ^ a1;
  if (a1 >= 0x40)
    v3 = 0;
  else
    v3 = v2;
  return v3 & 1;
}

BOOL sub_21BDC0060@<W0>(int a1@<W8>)
{
  int v1;
  BOOL v2;
  BOOL v3;

  v2 = a1 == 128;
  v3 = a1 == 129;
  if (v1 == 128)
    return v2;
  return v3;
}

BOOL sub_21BDC0080@<W0>(int a1@<W8>)
{
  return a1 == 192;
}

uint64_t sub_21BDC0090@<X0>(char a1@<W8>)
{
  char v1;
  int v2;
  char v3;

  v2 = a1 & 0xC0;
  v3 = ((v1 & 1) == 0) ^ a1;
  if (v2 != 64)
    v3 = 0;
  return v3 & 1;
}

uint64_t static AnimationHandoffType.snapshotAndReplace(applyToAllLayers:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static AnimationHandoffType.replace(applyToAllLayers:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result | 0x40;
  return result;
}

void static AnimationHandoffType.stop.getter(_BYTE *a1@<X8>)
{
  *a1 = -127;
}

void static AnimationHandoffType.default.getter(_BYTE *a1@<X8>)
{
  *a1 = -64;
}

uint64_t static AnimationHandoffType.== infix(_:_:)(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_21BDC0100 + 4 * byte_21BE7BC65[*a1 >> 6]))();
}

BOOL sub_21BDC0100@<W0>(unsigned int a1@<W8>)
{
  char v1;
  _BOOL4 v2;

  v2 = (v1 & 1) == 0;
  return a1 <= 0x3F && ((v2 ^ a1) & 1) != 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationHandoffType.CodingKeys()
{
  return 0x5466666F646E6168;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationHandoffType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x5466666F646E6168 && a2 == 0xEB00000000657079)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.CodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.CodingKeys()
{
  lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimationHandoffType(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_21BDC02C4 + 4 * byte_21BE7BC69[*a1 >> 6]))();
}

BOOL sub_21BDC02C4@<W0>(unsigned int a1@<W8>)
{
  char v1;
  _BOOL4 v2;

  v2 = (v1 & 1) == 0;
  return a1 <= 0x3F && ((v2 ^ a1) & 1) != 0;
}

uint64_t AnimationHandoffType.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AnimationHandoffType.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void AnimationHandoffType.HandoffType.encode(to:)(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[12];
  int v14;
  uint64_t v15;
  uint64_t v16;

  v14 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys>);
  v13[10] = *(_QWORD *)(v4 - 8);
  v13[11] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v13[9] = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.StopCodingKeys>);
  v13[5] = *(_QWORD *)(v6 - 8);
  v13[6] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v13[4] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.ComposeCodingKeys>);
  v13[2] = *(_QWORD *)(v8 - 8);
  v13[3] = v8;
  MEMORY[0x24BDAC7A8](v8);
  v13[1] = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.ReplaceCodingKeys>);
  v13[7] = *(_QWORD *)(v10 - 8);
  v13[8] = v10;
  MEMORY[0x24BDAC7A8](v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys>);
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.CodingKeys>);
  v15 = *(_QWORD *)(v12 - 8);
  v16 = v12;
  MEMORY[0x24BDAC7A8](v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X10 }
}

uint64_t sub_21BDC0740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 69) = 0;
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys();
  v5 = *(_QWORD *)(v4 - 96);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v0, v5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnimationHandoffType@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AnimationHandoffType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnimationHandoffType(_QWORD *a1)
{
  return AnimationHandoffType.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnimationHandoffType.HandoffType@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized AnimationHandoffType.HandoffType.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance AnimationHandoffType.HandoffType(_QWORD *a1)
{
  unsigned __int8 *v1;

  AnimationHandoffType.HandoffType.encode(to:)(a1, *v1);
}

uint64_t specialized AnimationHandoffType.HandoffType.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;

  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys>);
  v32 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.StopCodingKeys>);
  v22[3] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.ComposeCodingKeys>);
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v29 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.ReplaceCodingKeys>);
  v22[2] = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.CodingKeys>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys();
  v16 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    v34 = v10;
    v22[0] = v8;
    v22[1] = v7;
    v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v17 + 16) == 1)
      __asm { BR              X10 }
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v14;
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v20 = &type metadata for AnimationHandoffType.HandoffType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v20, *MEMORY[0x24BEE26D0], v7);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  return v7;
}

void sub_21BDC0EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 88) = a1;
  *(_BYTE *)(v7 - 65) = 4;
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v4)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x21BDC0E7CLL);
  }
  (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v3, *(_QWORD *)(v7 - 144));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v6);
  JUMPOUT(0x21BDC0F9CLL);
}

uint64_t specialized AnimationHandoffType.HandoffType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000021BE93380
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6563616C706572 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736F706D6F63 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1886352499 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000021BE933A0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = a1;
  v17 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_21:
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      v15 = v5;
      v7 = 0;
      v8 = v5 & 0xC000000000000001;
      v9 = v5 & 0xFFFFFFFFFFFFFF8;
      v16 = v5 & 0xC000000000000001;
      while (1)
      {
        if (v8)
        {
          v10 = MEMORY[0x220769770](v7, v5);
          v11 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
LABEL_18:
            __break(1u);
            return v17;
          }
        }
        else
        {
          if (v7 >= *(_QWORD *)(v9 + 16))
          {
            __break(1u);
            goto LABEL_21;
          }
          v10 = *(_QWORD *)(v5 + 8 * v7 + 32);
          swift_retain();
          v11 = v7 + 1;
          if (__OFADD__(v7, 1))
            goto LABEL_18;
        }
        v12 = *(_QWORD *)(v10 + 32);
        if (v12
          && (*(_QWORD *)(v10 + 24) == a2 ? (v13 = v12 == a3) : (v13 = 0),
              v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v5 = v15;
          v8 = v16;
        }
        else
        {
          swift_release();
        }
        ++v7;
        if (v11 == v6)
          return v17;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.CodingKeys, &unk_24DFD63B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.CodingKeys, &unk_24DFD63B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.CodingKeys, &unk_24DFD63B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.CodingKeys, &unk_24DFD63B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType, &type metadata for AnimationHandoffType.HandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType, &type metadata for AnimationHandoffType.HandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType, &type metadata for AnimationHandoffType.HandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType);
  }
  return result;
}

id sub_21BDC1414@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = Entity.defaultAnimationClock.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for AnimationHandoffType()
{
  return &type metadata for AnimationHandoffType;
}

uint64_t getEnumTagSinglePayload for AnimationHandoffType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x7D)
    goto LABEL_17;
  if (a2 + 131 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 131) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 131;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 131;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 131;
  }
LABEL_17:
  v6 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v6 >= 0x7C)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimationHandoffType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 131 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 131) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7D)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7C)
    return ((uint64_t (*)(void))((char *)&loc_21BDC1544 + 4 * byte_21BE7BC7B[v4]))();
  *a1 = a2 - 125;
  return ((uint64_t (*)(void))((char *)sub_21BDC1578 + 4 * byte_21BE7BC76[v4]))();
}

uint64_t sub_21BDC1578(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDC1580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDC1588);
  return result;
}

uint64_t sub_21BDC15A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDC15A8);
  *(_BYTE *)result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_21BDC15AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDC15B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for AnimationHandoffType.HandoffType(unsigned __int8 *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *a1;
  v2 = (char)v1;
  v3 = v1 >> 6;
  v4 = (v1 | 0xFFFFFFFE) + 2 * (v1 >> 6);
  if (v2 >= 0)
    return v3;
  else
    return v4;
}

_BYTE *destructiveProjectEnumData for AnimationHandoffType.HandoffType(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *destructiveInjectEnumTag for AnimationHandoffType.HandoffType(_BYTE *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 1 | ((_BYTE)a2 << 6);
  else
    *result = (a2 & 1 | ((a2 >> 1) << 6)) + 64;
  return result;
}

ValueMetadata *type metadata accessor for AnimationHandoffType.HandoffType()
{
  return &type metadata for AnimationHandoffType.HandoffType;
}

void *type metadata accessor for AnimationHandoffType.CodingKeys()
{
  return &unk_24DFD63B0;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.CodingKeys, &unk_24DFD6440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.CodingKeys, &unk_24DFD6440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.CodingKeys, &unk_24DFD6440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.CodingKeys, &unk_24DFD6440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys, &unk_24DFD65C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys, &unk_24DFD65C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys, &unk_24DFD65C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.StopCodingKeys, &unk_24DFD65A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.StopCodingKeys, &unk_24DFD65A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.StopCodingKeys, &unk_24DFD65A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.ComposeCodingKeys, &unk_24DFD6580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.ComposeCodingKeys, &unk_24DFD6580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.ComposeCodingKeys, &unk_24DFD6580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.ReplaceCodingKeys, &unk_24DFD6560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.ReplaceCodingKeys, &unk_24DFD6560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.ReplaceCodingKeys, &unk_24DFD6560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.ReplaceCodingKeys, &unk_24DFD6560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys, &unk_24DFD64D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys, &unk_24DFD64D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys, &unk_24DFD64D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys, &unk_24DFD64D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys);
  }
  return result;
}

void specialized static AnimationLogger.logError(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for logger != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static AnimationLogger.logger);
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v9 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_21B9AA000, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v8, -1, -1);
    MEMORY[0x220772F44](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t storeEnumTagSinglePayload for AnimationHandoffType.HandoffType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BDC1AE8 + 4 * byte_21BE7BC85[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BDC1B1C + 4 * byte_21BE7BC80[v4]))();
}

uint64_t sub_21BDC1B1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDC1B24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDC1B2CLL);
  return result;
}

uint64_t sub_21BDC1B38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDC1B40);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BDC1B44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDC1B4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.CodingKeys()
{
  return &unk_24DFD6440;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys()
{
  return &unk_24DFD64D0;
}

uint64_t storeEnumTagSinglePayload for AnimationHandoffType.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BDC1BB8 + 4 * byte_21BE7BC8A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BDC1BD8 + 4 * byte_21BE7BC8F[v4]))();
}

_BYTE *sub_21BDC1BB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BDC1BD8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BDC1BE0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BDC1BE8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BDC1BF0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BDC1BF8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.ReplaceCodingKeys()
{
  return &unk_24DFD6560;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.ComposeCodingKeys()
{
  return &unk_24DFD6580;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.StopCodingKeys()
{
  return &unk_24DFD65A0;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys()
{
  return &unk_24DFD65C0;
}

uint64_t StateMachineController.currentState.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;

  REStateMachineComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    if (REStateMachineComponentGetCurrentStateName())
      return String.init(cString:)();
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v6);
    v1 = v6;
    v2 = v7;
    swift_release();
    if (v2)
    {
      if (v1)
      {
        swift_retain();
        REStateMachineAssetGetInitialStateName();
        v3 = String.init(cString:)();
        swift_release();
        outlined consume of StateMachineComponent?(v1, v2);
        return v3;
      }
    }
    else
    {
      v6 = 0;
      v7 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v6 = 0xD000000000000023;
      v7 = 0x800000021BE933F0;
      REEntityGetName();
      v5._countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v6 = 0xD000000000000023;
    v7 = 0x800000021BE933F0;
    REEntityGetName();
    v4._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of StateMachineComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t StateMachineController.previousState.getter()
{
  return StateMachineController.previousState.getter(MEMORY[0x24BE24B08]);
}

uint64_t StateMachineController.currentTransition.getter()
{
  return StateMachineController.previousState.getter(MEMORY[0x24BE24B00]);
}

uint64_t StateMachineController.previousState.getter(uint64_t (*a1)(uint64_t, const char *))
{
  uint64_t ComponentByClass;
  uint64_t result;
  Swift::String v4;

  REStateMachineComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    result = a1(ComponentByClass, "");
    if (result)
      return String.init(cString:)();
  }
  else
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    REEntityGetName();
    v4._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t StateMachineController.ParametersReference.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int HasBoundParameterAtName;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t result;
  Swift::String v18;
  __int128 v19;
  char v20;

  REStateMachineComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    static StateMachineUtils.convert<A>(_:)(a3);
    String.utf8CString.getter();
    HasBoundParameterAtName = REStateMachineComponentHasBoundParameterAtName();
    swift_release();
    if (HasBoundParameterAtName)
    {
      String.utf8CString.getter();
      REStateMachineComponentGetBoundParameterIndexAtName();
      swift_release();
      REStateMachineComponentGetBoundParameterBindTargetAtIndex();
      v13 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v13, v14, (uint64_t)&v19);
      swift_bridgeObjectRelease();
      v15 = v19;
      v16 = v20;
    }
    else
    {
      v15 = 0uLL;
      v16 = -1;
    }
    v19 = v15;
    v20 = v16;
    StateMachineParameter.init(name:bindTarget:)(a1, a2, (uint64_t *)&v19, a4, a5, a6);
    return swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t StateMachineController.ParametersReference.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  void (*v17)(uint64_t, uint64_t);
  int v18;
  int HasBoundParameterAtName;
  uint64_t result;
  Swift::String v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  __int128 v24;
  char v25;

  v11 = type metadata accessor for StateMachineParameter(0, a5, a6, a4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v22 - v14);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v22 - v14, a1, v11, v13);
  v16 = *v15 == a2 && v15[1] == a3;
  if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_15;
  v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v17((uint64_t)v15, v11);
  if (a4 != a5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  REStateMachineComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
LABEL_16:
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v24 = 0xD000000000000023;
    *((_QWORD *)&v24 + 1) = 0x800000021BE933F0;
    REEntityGetName();
    v21._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  static StateMachineUtils.convert<A>(_:)(a5);
  v18 = *(unsigned __int8 *)(a1 + 32);
  if (v18 == 255)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REStateMachineComponentRemoveBoundParameterAtName();
    v17(a1, v11);
  }
  else
  {
    v23 = v17;
    v24 = *(_OWORD *)(a1 + 16);
    v25 = v18;
    specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v24);
    String.utf8CString.getter();
    HasBoundParameterAtName = REStateMachineComponentHasBoundParameterAtName();
    swift_release();
    if (HasBoundParameterAtName)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REStateMachineComponentGetBoundParameterIndexAtName();
      swift_release();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REStateMachineComponentSetBoundParameterBindTargetAtIndex();
      v23(a1, v11);
    }
    else
    {
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REStateMachineComponentAddBoundParameter();
      v23(a1, v11);
      swift_release();
    }
  }
  return swift_release();
}

uint64_t StateMachineController.ParameterValuesReference.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v13 = type metadata accessor for StateMachineParameter(0, a4, a5, a4);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v19 - v15;
  v17 = *v6;
  StateMachineController.ParametersReference.subscript.getter(a1, a2, a3, a4, a5, (uint64_t)&v19 - v15);
  StateMachineParameter.value(entity:)(v17, v13, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t StateMachineController.ParameterValuesReference.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  specialized StateMachineController.ParameterValuesReference.subscript.setter(a1, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

void (*StateMachineController.ParameterValuesReference.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t v14;
  size_t v15;
  void *v16;

  v13 = malloc(0x48uLL);
  *a1 = v13;
  v13[4] = a6;
  v13[5] = v6;
  v13[2] = a4;
  v13[3] = a5;
  *v13 = a2;
  v13[1] = a3;
  v14 = *(_QWORD *)(a5 - 8);
  v13[6] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v13[7] = malloc(v15);
  v16 = malloc(v15);
  v13[8] = v16;
  StateMachineController.ParameterValuesReference.subscript.getter(a2, a3, a4, a5, a6, (uint64_t)v16);
  return StateMachineController.ParameterValuesReference.subscript.modify;
}

void StateMachineController.ParameterValuesReference.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[7];
  v4 = (void *)(*a1)[8];
  v5 = (*a1)[6];
  v6 = (*a1)[3];
  v7 = (*a1)[4];
  v9 = (*a1)[1];
  v8 = (*a1)[2];
  v10 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))((*a1)[7], v4, v6);
    swift_bridgeObjectRetain();
    specialized StateMachineController.ParameterValuesReference.subscript.setter((uint64_t)v3, v10, v9, v8, v6, v7);
    v11 = *(void (**)(void *, uint64_t))(v5 + 8);
    v11(v3, v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized StateMachineController.ParameterValuesReference.subscript.setter((uint64_t)v4, v10, v9, v8, v6, v7);
    v11 = *(void (**)(void *, uint64_t))(v5 + 8);
  }
  v11(v4, v6);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t StateMachineController.ParameterBindTargetsReference.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v7 = a4;
  v12 = type metadata accessor for StateMachineParameter(0, a4, a5, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v19 - v14;
  StateMachineController.ParametersReference.subscript.getter(a1, a2, a3, v7, a5, (uint64_t)&v19 - v14);
  v16 = *((_QWORD *)v15 + 2);
  v17 = *((_QWORD *)v15 + 3);
  LOBYTE(v7) = v15[32];
  outlined copy of BindTarget?(v16, v17, v7);
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(_QWORD *)a6 = v16;
  *(_QWORD *)(a6 + 8) = v17;
  *(_BYTE *)(a6 + 16) = v7;
  return result;
}

uint64_t StateMachineController.ParameterBindTargetsReference.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[4];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a4;
  v11 = type metadata accessor for StateMachineParameter(0, a5, a6, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v24[-v16];
  v18 = *a1;
  v26 = a1[1];
  v27 = v18;
  v25 = *((unsigned __int8 *)a1 + 16);
  v19 = a2;
  v20 = a2;
  v21 = v28;
  StateMachineController.ParametersReference.subscript.getter(v20, a3, v28, a5, a6, (uint64_t)&v24[-v16]);
  outlined consume of BindTarget?(*((_QWORD *)v17 + 2), *((_QWORD *)v17 + 3), v17[32]);
  v22 = v26;
  *((_QWORD *)v17 + 2) = v27;
  *((_QWORD *)v17 + 3) = v22;
  v17[32] = v25;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v14, v17, v11);
  StateMachineController.ParametersReference.subscript.setter((uint64_t)v14, v19, a3, v21, a5, a6);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v17, v11);
}

void (*StateMachineController.ParameterBindTargetsReference.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = malloc(0x48uLL);
  *a1 = v13;
  v13[7] = a6;
  v13[8] = v6;
  v13[5] = a4;
  v13[6] = a5;
  v13[3] = a2;
  v13[4] = a3;
  StateMachineController.ParameterBindTargetsReference.subscript.getter(a2, a3, a4, a5, a6, (uint64_t)v13);
  return StateMachineController.ParameterBindTargetsReference.subscript.modify;
}

void StateMachineController.ParameterBindTargetsReference.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[2];
  unsigned __int8 v12;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = *((_BYTE *)*a1 + 16);
  v6 = (*a1)[7];
  v8 = (*a1)[5];
  v7 = (*a1)[6];
  v10 = (*a1)[3];
  v9 = (*a1)[4];
  v11[0] = v4;
  v11[1] = v3;
  v12 = v5;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v3, v5);
    StateMachineController.ParameterBindTargetsReference.subscript.setter(v11, v10, v9, v8, v7, v6);
    outlined consume of BindTarget?(*v2, v2[1], *((_BYTE *)v2 + 16));
  }
  else
  {
    swift_bridgeObjectRetain();
    StateMachineController.ParameterBindTargetsReference.subscript.setter(v11, v10, v9, v8, v7, v6);
  }
  free(v2);
}

uint64_t (*StateMachineController.values.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *a1 = v3;
  a1[1] = v3;
  swift_retain();
  return Entity.bindableValues.modify;
}

uint64_t StateMachineController.bindTargets.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t StateMachineController.values.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 16);
  result = swift_release();
  if (v2 != v3)
    __break(1u);
  return result;
}

uint64_t StateMachineController.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t StateMachineController.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized StateMachineController.ParameterValuesReference.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v13 = type metadata accessor for StateMachineParameter(0, a5, a6, a4);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v19 - v15;
  v17 = *v6;
  StateMachineController.ParametersReference.subscript.getter(a2, a3, a4, a5, a6, (uint64_t)&v19 - v15);
  swift_bridgeObjectRelease();
  StateMachineParameter.setValue(entity:newValue:)(v17, a1, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_21BDC30D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  return swift_retain();
}

_QWORD *keypath_setTm(_QWORD *result, uint64_t a2)
{
  if (*result != *(_QWORD *)(*(_QWORD *)a2 + 16))
    __break(1u);
  return result;
}

uint64_t type metadata accessor for StateMachineController()
{
  return objc_opt_self();
}

uint64_t method lookup function for StateMachineController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StateMachineController.currentState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of StateMachineController.previousState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of StateMachineController.currentTransition.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of StateMachineController.values.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of StateMachineController.values.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of StateMachineController.values.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of StateMachineController.bindTargets.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of StateMachineController.bindTargets.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of StateMachineController.bindTargets.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

ValueMetadata *type metadata accessor for StateMachineController.ParameterValuesReference()
{
  return &type metadata for StateMachineController.ParameterValuesReference;
}

ValueMetadata *type metadata accessor for StateMachineController.ParameterBindTargetsReference()
{
  return &type metadata for StateMachineController.ParameterBindTargetsReference;
}

ValueMetadata *type metadata accessor for StateMachineController.ParametersReference()
{
  return &type metadata for StateMachineController.ParametersReference;
}

RealityKit::REAngleF __swiftcall REAngleF.init(radians:)(RealityKit::REAngleF radians)
{
  RealityKit::REAngleF *v1;

  v1->radians = radians.radians;
  return radians;
}

RealityKit::REAngleF __swiftcall REAngleF.init(degrees:)(Swift::Float degrees)
{
  float *v1;
  RealityKit::REAngleF result;

  result.radians = (float)(degrees * 3.1416) / 180.0;
  *v1 = result.radians;
  return result;
}

float REAngleF.radians.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void REAngleF.radians.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*REAngleF.radians.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float REAngleF.degrees.getter()
{
  float *v0;

  return (float)(*v0 * 180.0) / 3.1416;
}

float REAngleF.degrees.setter(float a1)
{
  float *v1;
  float result;

  result = (float)(a1 * 3.1416) / 180.0;
  *v1 = result;
  return result;
}

float (*REAngleF.degrees.modify(uint64_t a1))(uint64_t a1)
{
  float *v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = (float)(*v1 * 180.0) / 3.1416;
  return REAngleF.degrees.modify;
}

float REAngleF.degrees.modify(uint64_t a1)
{
  float result;

  result = (float)(*(float *)(a1 + 8) * 3.1416) / 180.0;
  **(float **)a1 = result;
  return result;
}

void static RotationOrder.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static RotationOrder.sceneKit.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

RealityKit::RotationOrder_optional __swiftcall RotationOrder.init(rawValue:)(RealityKit::RotationOrder_optional rawValue)
{
  RealityKit::RotationOrder *v1;
  RealityKit::RotationOrder value;

  value = rawValue.value;
  if (rawValue.value >= RealityKit_RotationOrder_unknownDefault)
    value = RealityKit_RotationOrder_unknownDefault;
  *v1 = value;
  return rawValue;
}

uint64_t RotationOrder.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

RealityKit::RotationOrder_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RotationOrder(Swift::UInt8 *a1)
{
  return RotationOrder.init(rawValue:)(*a1);
}

double simd_quatf.init(eulerAngles:order:)()
{
  simd_float3x3 v1;

  REConvertIntrinsicEulersToMatrices3x3();
  v1.columns[1] = 0u;
  v1.columns[2] = 0u;
  v1.columns[0] = 0u;
  return simd_quaternion(v1);
}

double simd_quaternion(simd_float3x3 a1)
{
  float v1;
  float v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  unsigned __int32 v15;
  float32x2_t v20;
  float v21;
  unsigned int v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;

  v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    v8 = sqrtf(v1 + 1.0);
    v9 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8));
    v10 = vmul_f32(v9, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8), v9));
    v20 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v10, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8), v10)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      v21 = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      *(float *)&v22 = v21 + v21;
      v23 = vrecpe_f32((float32x2_t)v22);
      v24 = vmul_f32(v23, vrecps_f32((float32x2_t)v22, v23));
      v25.i32[0] = vmul_f32(v24, vrecps_f32((float32x2_t)v22, v24)).u32[0];
      v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v24.i32[1] = v22;
      v25.i32[1] = 0.25;
      v20 = vmul_f32(v24, v25);
    }
    else
    {
      v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      v5 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      v6 = vmul_f32(v5, vrecps_f32((float32x2_t)a1.columns[1].u32[0], v5));
      v20 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(v6, vrecps_f32((float32x2_t)a1.columns[1].u32[0], v6)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    v12 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, v11);
    v11.i32[0] = 2.0;
    v11.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), v11).u32[0];
    v11.i32[1] = v12.i32[1];
    v13 = vrecpe_f32((float32x2_t)v11.u32[0]);
    v14 = vmul_f32(v13, vrecps_f32((float32x2_t)v11.u32[0], v13));
    v15 = vmul_f32(v14, vrecps_f32((float32x2_t)v11.u32[0], v14)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v15;
    v20 = vmul_f32(v11, _D5);
  }
  return *(double *)&v20;
}

unint64_t lazy protocol witness table accessor for type RotationOrder and conformance RotationOrder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RotationOrder and conformance RotationOrder;
  if (!lazy protocol witness table cache variable for type RotationOrder and conformance RotationOrder)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RotationOrder, &type metadata for RotationOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationOrder and conformance RotationOrder);
  }
  return result;
}

float sub_21BDC35A8@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = (float)(*a1 * 180.0) / 3.1416;
  *a2 = result;
  return result;
}

float sub_21BDC35D0(float *a1, float *a2)
{
  float result;

  result = (float)(*a1 * 3.1416) / 180.0;
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for REAngleF()
{
  return &type metadata for REAngleF;
}

uint64_t storeEnumTagSinglePayload for RotationOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21BDC3654 + 4 * byte_21BE7C529[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21BDC3688 + 4 * asc_21BE7C524[v4]))();
}

uint64_t sub_21BDC3688(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDC3690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDC3698);
  return result;
}

uint64_t sub_21BDC36A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDC36ACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21BDC36B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDC36B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RotationOrder()
{
  return &type metadata for RotationOrder;
}

uint64_t __RKVisibilityHideScaleAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityHideScaleAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKVisibilityHideScaleUpAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for __RKVisibilityHideScaleAnimation()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __RKVisibilityHideScaleUpAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 128, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 83, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 127, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 120, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 96, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 53, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Entity.pins.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t EntityGeometricPins.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t PinByName;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  REPinComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result
    && (String.utf8CString.getter(), PinByName = REPinComponentGetPinByName(), result = swift_release(), PinByName))
  {
    REPinGetOffsetPose();
    v13 = v8;
    v14 = v9;
    if (REPinIsSkeletalJointPin())
    {
      REPinGetSkeletalJointName();
      v10 = String.init(cString:)();
      v12 = v11;
      RERelease();
      swift_weakInit();
      v20 = v13;
      v21 = v14;
      swift_weakAssign();
      v16 = a1;
      v17 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v18 = v10;
      v19 = v12;
    }
    else
    {
      RERelease();
      swift_weakInit();
      v20 = v13;
      v21 = v14;
      swift_weakAssign();
      v16 = a1;
      v17 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v18 = 0;
      v19 = 0;
    }
    return outlined init with take of GeometricPin((uint64_t)v15, (uint64_t)a3);
  }
  else
  {
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t EntityGeometricPins.set(named:position:orientation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>, float32x4_t a5@<Q1>)
{
  float32x4_t v8;
  float32x4_t v9;
  uint64_t result;
  int8x16_t v11;

  v8 = vmulq_f32(a5, a5);
  v9 = (float32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v9.f32);
  v8.f32[0] = fabsf(sqrtf(vaddv_f32(*(float32x2_t *)v8.f32)) + -1.0);
  v9.i32[0] = 981668463;
  v11 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v8, v9), 0), *(int8x16_t *)&zmmword_21BE41220[48], (int8x16_t)a5);
  REPoseIdentity();
  String.utf8CString.getter();
  REPinCreateExt();
  swift_release();
  REPinComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REPinComponentAddPin();
  RERelease();
  swift_weakInit();
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(__n128 *)(a3 + 48) = a4;
  *(int8x16_t *)(a3 + 64) = v11;
  swift_weakAssign();
  *(_QWORD *)(a3 + 8) = a1;
  *(_QWORD *)(a3 + 16) = a2;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t EntityGeometricPins.set(named:position:orientation:relativeTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>, float32x4_t a6@<Q1>)
{
  uint64_t *v6;
  float32x4_t v7;
  __n128 v11;
  unsigned __int32 v12;
  float32x4_t v13;

  v7 = a6;
  a6.i32[0] = a5.n128_i32[2];
  v11 = transformPose(_:from:to:)(a3, *v6, a5.n128_f64[0], *(double *)a6.i64, v7);
  v11.n128_u32[2] = v12;
  return EntityGeometricPins.set(named:position:orientation:)(a1, a2, a4, v11, v13);
}

uint64_t EntityGeometricPins.set(named:skeletalJointName:position:orientation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>, float32x4_t a7@<Q1>)
{
  float32x4_t v12;
  float32x4_t v13;
  uint64_t result;
  int8x16_t v15;

  v12 = vmulq_f32(a7, a7);
  v13 = (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL);
  *(float32x2_t *)v12.f32 = vadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32);
  v12.f32[0] = fabsf(sqrtf(vaddv_f32(*(float32x2_t *)v12.f32)) + -1.0);
  v13.i32[0] = 981668463;
  v15 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v12, v13), 0), *(int8x16_t *)&zmmword_21BE41220[48], (int8x16_t)a7);
  REPoseIdentity();
  String.utf8CString.getter();
  String.utf8CString.getter();
  REPinCreateExt();
  swift_release();
  swift_release();
  REPinComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REPinComponentAddPin();
  RERelease();
  swift_weakInit();
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(__n128 *)(a5 + 48) = a6;
  *(int8x16_t *)(a5 + 64) = v15;
  swift_weakAssign();
  *(_QWORD *)(a5 + 8) = a1;
  *(_QWORD *)(a5 + 16) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  return result;
}

Swift::Void __swiftcall EntityGeometricPins.remove(named:)(Swift::String named)
{
  REPinComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    String.utf8CString.getter();
    REPinComponentRemovePin();
    swift_release();
  }
}

uint64_t EntityGeometricPins.count.getter()
{
  uint64_t result;

  REPinComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
    return REPinComponentGetPinCount();
  return result;
}

BOOL EntityGeometricPins.isEmpty.getter()
{
  REPinComponentGetComponentType();
  return !REEntityGetComponentByClass() || REPinComponentGetPinCount() == 0;
}

void EntityGeometricPins.Iterator.next()(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  *(_QWORD *)(v1 + 16) = v4;
  if (v4 >= *(_QWORD *)(v1 + 8))
  {
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    return;
  }
  REPinComponentGetComponentType();
  if (!REEntityGetComponentByClass())
    goto LABEL_11;
  REPinComponentGetPinNameAtIndex();
  v5 = String.init(cString:)();
  v7 = v6;
  REPinComponentGetPinOffsetPoseAtIndex();
  v13 = v8;
  v14 = v9;
  if (REPinComponentIsSkeletalJointPinAtIndex())
  {
    REPinComponentGetSkeletalJointNameAtIndex();
    v10 = String.init(cString:)();
    v12 = v11;
    swift_weakInit();
    v20 = v13;
    v21 = v14;
    swift_weakAssign();
    v16 = v5;
    v17 = v7;
    swift_bridgeObjectRelease();
    v18 = v10;
    v19 = v12;
  }
  else
  {
    swift_weakInit();
    v20 = v13;
    v21 = v14;
    swift_weakAssign();
    v16 = v5;
    v17 = v7;
    swift_bridgeObjectRelease();
    v18 = 0;
    v19 = 0;
  }
  outlined init with take of GeometricPin((uint64_t)v15, (uint64_t)a1);
}

uint64_t EntityGeometricPins.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  swift_retain();
  REPinComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
    result = REPinComponentGetPinCount();
  *a1 = v3;
  a1[1] = result;
  a1[2] = -1;
  return result;
}

uint64_t EntityGeometricPins.entity.getter()
{
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type EntityGeometricPins.Iterator and conformance EntityGeometricPins.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EntityGeometricPins.Iterator and conformance EntityGeometricPins.Iterator;
  if (!lazy protocol witness table cache variable for type EntityGeometricPins.Iterator and conformance EntityGeometricPins.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EntityGeometricPins.Iterator, &type metadata for EntityGeometricPins.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityGeometricPins.Iterator and conformance EntityGeometricPins.Iterator);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance EntityGeometricPins@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t PinCount;
  uint64_t result;

  v3 = *v1;
  swift_retain();
  REPinComponentGetComponentType();
  if (REEntityGetComponentByClass())
    PinCount = REPinComponentGetPinCount();
  else
    PinCount = 0;
  result = swift_release();
  *a1 = v3;
  a1[1] = PinCount;
  a1[2] = -1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance EntityGeometricPins()
{
  uint64_t v0;

  v0 = specialized _copySequenceToContiguousArray<A>(_:)();
  swift_release();
  return v0;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance EntityGeometricPins(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

ValueMetadata *type metadata accessor for EntityGeometricPins()
{
  return &type metadata for EntityGeometricPins;
}

ValueMetadata *type metadata accessor for EntityGeometricPins.Iterator()
{
  return &type metadata for EntityGeometricPins.Iterator;
}

void static PhysicsSimulationComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 4005;
}

void static PhysicsSimulationComponent.CollisionOptions.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t PhysicsSimulationComponent.CollisionOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static PhysicsSimulationComponent.CollisionOptions.reportKinematicVsStatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static PhysicsSimulationComponent.CollisionOptions.reportKinematicVsKinematic.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static PhysicsSimulationComponent.CollisionOptions.all.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for all != -1)
    result = swift_once();
  *a1 = static PhysicsSimulationComponent.CollisionOptions.all;
  return result;
}

uint64_t PhysicsSimulationComponent.CollisionOptions.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

RealityFoundation::PhysicsSimulationComponent::SolverIterations __swiftcall PhysicsSimulationComponent.SolverIterations.init(positionIterations:velocityIterations:)(Swift::Int positionIterations, Swift::Int velocityIterations)
{
  Swift::Int *v2;
  RealityFoundation::PhysicsSimulationComponent::SolverIterations result;

  *v2 = positionIterations;
  v2[1] = velocityIterations;
  result.velocityIterations = velocityIterations;
  result.positionIterations = positionIterations;
  return result;
}

uint64_t PhysicsSimulationComponent.SolverIterations.positionIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PhysicsSimulationComponent.SolverIterations.positionIterations.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PhysicsSimulationComponent.SolverIterations.positionIterations.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsSimulationComponent.SolverIterations.velocityIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PhysicsSimulationComponent.SolverIterations.velocityIterations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*PhysicsSimulationComponent.SolverIterations.velocityIterations.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static PhysicsSimulationComponent.SolverIterations.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

__n128 PhysicsSimulationComponent.solverIterations.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 PhysicsSimulationComponent.solverIterations.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*PhysicsSimulationComponent.solverIterations.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PhysicsSimulationComponent.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 6;
  *(_OWORD *)a1 = xmmword_21BE7C750;
  *(_OWORD *)(a1 + 16) = xmmword_21BE7C760;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

id PhysicsSimulationComponent.init(_:)@<X0>(uint64_t a1@<X8>)
{
  __int128 *GravityOverride;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  char KinematicVsStaticFlag;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  GravityOverride = (__int128 *)REPhysicsSimulationComponentGetGravityOverride();
  if (GravityOverride)
  {
    v3 = *GravityOverride;
  }
  else
  {
    type metadata accessor for __ServiceLocator();
    v4 = static __ServiceLocator.shared.getter();
    swift_beginAccess();
    v5 = *(_QWORD *)(v4 + 16);
    swift_release();
    result = (id)MEMORY[0x22076FDD0](v5);
    if (!result)
    {
      __break(1u);
      return result;
    }
    REPhysicsSimulationServiceGetDefaultGravity();
  }
  v11 = v3;
  KinematicVsStaticFlag = REPhysicsSimulationComponentGetKinematicVsStaticFlag();
  if (REPhysicsSimulationComponentGetKinematicVsKinematicFlag())
    KinematicVsStaticFlag |= 2u;
  REPhysicsSimulationComponentGetSolverIterations();
  v9 = v8;
  result = (id)REPhysicsSimulationComponentGetParentTimebase();
  *(_QWORD *)&v10 = v9;
  *((_QWORD *)&v10 + 1) = HIDWORD(v9);
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 32) = KinematicVsStaticFlag;
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

__n128 PhysicsSimulationComponent.gravity.getter()
{
  __n128 *v0;

  return v0[1];
}

void PhysicsSimulationComponent.gravity.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*PhysicsSimulationComponent.gravity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsSimulationComponent.collisionOptions.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *PhysicsSimulationComponent.collisionOptions.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*PhysicsSimulationComponent.collisionOptions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsSimulationComponent.clock.getter()
{
  uint64_t v0;
  void *v1;
  const __CFAllocator *v2;
  OpaqueCMClock *v3;
  id v4;
  CMTimebaseRef v5[2];

  v5[1] = *(CMTimebaseRef *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 40);
  if (v1)
    goto LABEL_8;
  if (*(_QWORD *)(*(_QWORD *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    if (RETimebaseServiceCreateEngineSourceTimebase())
      goto LABEL_7;
  }
  else
  {
    swift_retain();
  }
  v5[0] = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v2, v3, v5);

  if (v5[0])
  {
LABEL_7:
    swift_release();
LABEL_8:
    v4 = v1;
    return;
  }
  __break(1u);
}

void key path getter for PhysicsSimulationComponent.clock : PhysicsSimulationComponent(uint64_t a1@<X0>, CMTimebaseRef *a2@<X8>)
{
  OpaqueCMTimebase *v3;
  CMTimebaseRef v4;
  uint64_t EngineSourceTimebase;
  const __CFAllocator *v6;
  OpaqueCMClock *v7;
  OpaqueCMTimebase *v8;
  CMTimebaseRef timebaseOut[2];

  timebaseOut[1] = *(CMTimebaseRef *)MEMORY[0x24BDAC8D0];
  v3 = *(OpaqueCMTimebase **)(a1 + 40);
  if (v3)
  {
    v4 = v3;
LABEL_9:
    *a2 = v4;
    v8 = v3;
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    EngineSourceTimebase = RETimebaseServiceCreateEngineSourceTimebase();
    if (EngineSourceTimebase)
    {
      v4 = (CMTimebaseRef)EngineSourceTimebase;
LABEL_8:
      swift_release();
      v3 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    swift_retain();
  }
  timebaseOut[0] = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v7 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v6, v7, timebaseOut);

  v4 = timebaseOut[0];
  if (timebaseOut[0])
    goto LABEL_8;
  __break(1u);
}

void PhysicsSimulationComponent.clock.setter(const void *a1)
{
  uint64_t v1;
  CFTypeID v2;
  const __CFAllocator *v3;
  OpaqueCMClock *v4;
  CMTimebaseRef v5;
  CMTimebaseRef v6[2];

  v6[1] = *(CMTimebaseRef *)MEMORY[0x24BDAC8D0];
  v2 = CFGetTypeID(a1);
  if (v2 == CMClockGetTypeID())
  {
    v6[0] = 0;
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    type metadata accessor for CMClockRef(0);
    swift_unknownObjectRetain();
    v4 = (OpaqueCMClock *)swift_dynamicCastUnknownClassUnconditional();
    CMTimebaseCreateWithSourceClock(v3, v4, v6);

    swift_unknownObjectRelease();
    v5 = v6[0];
  }
  else
  {
    type metadata accessor for CMTimebaseRef(0);
    v5 = (CMTimebaseRef)swift_dynamicCastUnknownClassUnconditional();
  }

  *(_QWORD *)(v1 + 40) = v5;
}

void PhysicsSimulationComponent.clock.modify(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t EngineSourceTimebase;
  const __CFAllocator *v6;
  OpaqueCMClock *v7;
  id v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(void **)(v1 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 40);
LABEL_9:
    *(_QWORD *)a1 = v4;
    v8 = v3;
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    EngineSourceTimebase = RETimebaseServiceCreateEngineSourceTimebase();
    if (EngineSourceTimebase)
    {
      v4 = EngineSourceTimebase;
LABEL_8:
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    swift_retain();
  }
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v7 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v6, v7, (CMTimebaseRef *)(a1 + 8));

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    goto LABEL_8;
  __break(1u);
}

void PhysicsSimulationComponent.clock.modify(const void **a1, char a2)
{
  const void *v2;

  if ((a2 & 1) != 0)
  {
    v2 = (const void *)swift_unknownObjectRetain();
    PhysicsSimulationComponent.clock.setter(v2);
    swift_unknownObjectRelease();
  }
  else
  {
    PhysicsSimulationComponent.clock.setter(*a1);
  }
}

id static PhysicsSimulationComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  __int128 *GravityOverride;
  __int128 v3;
  uint64_t v4;
  id result;
  char KinematicVsStaticFlag;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  GravityOverride = (__int128 *)REPhysicsSimulationComponentGetGravityOverride();
  if (GravityOverride)
  {
    v3 = *GravityOverride;
  }
  else
  {
    v4 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    result = (id)MEMORY[0x22076FDD0](*(_QWORD *)(v4 + 16));
    if (!result)
    {
      __break(1u);
      return result;
    }
    REPhysicsSimulationServiceGetDefaultGravity();
  }
  v10 = v3;
  KinematicVsStaticFlag = REPhysicsSimulationComponentGetKinematicVsStaticFlag();
  if (REPhysicsSimulationComponentGetKinematicVsKinematicFlag())
    KinematicVsStaticFlag |= 2u;
  REPhysicsSimulationComponentGetSolverIterations();
  v8 = v7;
  result = (id)REPhysicsSimulationComponentGetParentTimebase();
  *(_QWORD *)&v9 = v8;
  *((_QWORD *)&v9 + 1) = HIDWORD(v8);
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = KinematicVsStaticFlag;
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t PhysicsSimulationComponent.__toCore(_:)()
{
  REPhysicsSimulationComponentSetGravityOverride();
  REPhysicsSimulationComponentSetKinematicFlags();
  REPhysicsSimulationComponentSetParentTimebase();
  REPhysicsSimulationComponentSetSolverIterations();
  return RENetworkMarkComponentDirty();
}

id protocol witness for static Component.__fromCore(_:) in conformance PhysicsSimulationComponent@<X0>(uint64_t a1@<X8>)
{
  return PhysicsSimulationComponent.init(_:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance PhysicsSimulationComponent(_DWORD *a1@<X8>)
{
  *a1 = 4005;
}

void PhysicsSimulationComponent.customMirror.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  OpaqueCMTimebase *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  CMTimebaseRef v13;
  uint64_t EngineSourceTimebase;
  const __CFAllocator *v15;
  OpaqueCMClock *v16;
  uint64_t v17;
  OpaqueCMTimebase *v18;
  __int128 v19;
  CMTimebaseRef timebaseOut;
  __int128 v21;
  __int128 v22;
  char v23;
  OpaqueCMTimebase *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *((_BYTE *)v0 + 32);
  v9 = (OpaqueCMTimebase *)*((_QWORD *)v0 + 5);
  v10 = *v0;
  v19 = v0[1];
  v21 = v10;
  v22 = v19;
  v23 = v8;
  v24 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v11 + 32) = 0x79746976617267;
  *(_QWORD *)(v11 + 40) = 0xE700000000000000;
  *(_QWORD *)(v11 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v12 = swift_allocObject();
  *(_QWORD *)(v11 + 48) = v12;
  *(_OWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v11 + 80) = 0xD000000000000010;
  *(_QWORD *)(v11 + 88) = 0x800000021BE93520;
  *(_BYTE *)(v11 + 96) = v8;
  *(_QWORD *)(v11 + 120) = &type metadata for PhysicsSimulationComponent.CollisionOptions;
  *(_QWORD *)(v11 + 128) = 0x6B636F6C63;
  *(_QWORD *)(v11 + 136) = 0xE500000000000000;
  if (v9)
  {
    v13 = v9;
LABEL_9:
    *(_QWORD *)(v11 + 168) = swift_getObjectType();
    *(_QWORD *)(v11 + 144) = v13;
    v17 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
    v18 = v9;
    Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    EngineSourceTimebase = RETimebaseServiceCreateEngineSourceTimebase();
    if (EngineSourceTimebase)
    {
      v13 = (CMTimebaseRef)EngineSourceTimebase;
LABEL_8:
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    swift_retain();
  }
  timebaseOut = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v16 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v15, v16, &timebaseOut);

  v13 = timebaseOut;
  if (timebaseOut)
    goto LABEL_8;
  __break(1u);
}

BOOL specialized static PhysicsSimulationComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  __int128 v5;
  int v6;
  void *v7;
  __int128 v8;
  int v9;
  void *v10;
  BOOL v11;
  float v12;
  float v13;
  id v15;
  id v16;
  char v17;
  __int128 v18;
  __int128 v19;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v4 = 0;
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v8 = *(_OWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 32);
  v10 = *(void **)(a2 + 40);
  while (1)
  {
    v18 = v5;
    v12 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v19 = v8;
    v13 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v11 = v12 == v13;
    if (v4 == 2)
      break;
    while (1)
    {
      ++v4;
      if (v11)
        break;
      v11 = 0;
      result = 0;
      if (v4 == 2)
        return result;
    }
  }
  if (v12 != v13 || v6 != v9)
    return 0;
  if (v7)
  {
    if (v10)
    {
      type metadata accessor for CMTimebaseRef(0);
      lazy protocol witness table accessor for type CMTimebaseRef and conformance CMTimebaseRef();
      v15 = v10;
      v16 = v7;
      v17 = static _CFObject.== infix(_:_:)();

      if ((v17 & 1) != 0)
        return 1;
    }
    return 0;
  }
  return !v10;
}

uint64_t specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)()
{
  uint64_t v0;
  uint64_t RootSimulationEntity;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v0 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (!MEMORY[0x22076FDD0](*(_QWORD *)(v0 + 16)))
    return 0;
  RootSimulationEntity = REPhysicsSimulationServiceGetRootSimulationEntity();
  if (!RootSimulationEntity)
    return 0;
  v2 = RootSimulationEntity;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v6 = specialized static Entity.entityInfoType(_:)();
    if (v6)
    {
      v4 = (*(uint64_t (**)(void))(v6 + 232))();
      v7 = *(_QWORD *)(v4 + 16);
      swift_retain();
      MEMORY[0x22076D160](v7, 0);
      *(_QWORD *)(v4 + 16) = v2;
      MEMORY[0x22076D160](v2, v4);
      swift_release();
      return v4;
    }
    return makeEntity(for:)(v2);
  }
  __break(1u);
  return result;
}

uint64_t sub_21BDC51C8()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsSimulationComponent.CollisionOptions, &type metadata for PhysicsSimulationComponent.CollisionOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsSimulationComponent.CollisionOptions, &type metadata for PhysicsSimulationComponent.CollisionOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsSimulationComponent.CollisionOptions, &type metadata for PhysicsSimulationComponent.CollisionOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsSimulationComponent.CollisionOptions, &type metadata for PhysicsSimulationComponent.CollisionOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions);
  }
  return result;
}

void sub_21BDC52F8(uint64_t a1@<X0>, CMTimebaseRef *a2@<X8>)
{
  key path getter for PhysicsSimulationComponent.clock : PhysicsSimulationComponent(a1, a2);
}

void sub_21BDC533C()
{
  const void *v0;

  v0 = (const void *)swift_unknownObjectRetain();
  PhysicsSimulationComponent.clock.setter(v0);
}

void destroy for PhysicsSimulationComponent(uint64_t a1)
{

}

uint64_t initializeWithCopy for PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  id v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsSimulationComponent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsSimulationComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsSimulationComponent()
{
  return &type metadata for PhysicsSimulationComponent;
}

ValueMetadata *type metadata accessor for PhysicsSimulationComponent.CollisionOptions()
{
  return &type metadata for PhysicsSimulationComponent.CollisionOptions;
}

ValueMetadata *type metadata accessor for PhysicsSimulationComponent.SolverIterations()
{
  return &type metadata for PhysicsSimulationComponent.SolverIterations;
}

unint64_t lazy protocol witness table accessor for type CMTimebaseRef and conformance CMTimebaseRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef;
  if (!lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef)
  {
    type metadata accessor for CMTimebaseRef(255);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CMTimebaseRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef);
  }
  return result;
}

uint64_t USDDecodableContext.identifierForScene(uskNodePath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v29 = a3;
    v30 = 0;
    v34 = a1;
    v35 = a2;
    v32 = 91;
    v33 = 0xE100000000000000;
    v31 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v10 = MEMORY[0x24BEE0D00];
    v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v35 = v11;
    v32 = 93;
    v33 = 0xE100000000000000;
    v30 = 0;
    v31 = 0xE000000000000000;
    v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v3 + 32);
    if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14), (v17 & 1) != 0))
    {
      v18 = v16;
      v19 = *(_QWORD *)(v15 + 56);
      v20 = type metadata accessor for UUID();
      v21 = *(_QWORD *)(v20 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v9, v19 + *(_QWORD *)(v21 + 72) * v18, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, v20);
    }
    else
    {
      v20 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for UUID();
    v22 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v9, 1, v20) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_21BE411F0;
      *(_QWORD *)(v23 + 56) = v10;
      *(_QWORD *)(v23 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v23 + 32) = a1;
      *(_QWORD *)(v23 + 40) = a2;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v24 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v29, 1, 1, v20);
    }
    else
    {
      swift_bridgeObjectRelease();
      v27 = v29;
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v29, v9, v20);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v27, 0, 1, v20);
    }
  }
  else
  {
    v26 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a3, 1, 1, v26);
  }
}

uint64_t USDDecodableContext.identifierForPath(uskNodePath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v34 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v34 - v15;
  if (!a2)
    goto LABEL_10;
  v35 = a3;
  v36 = 0;
  v40 = a1;
  v41 = a2;
  v38 = 91;
  v39 = 0xE100000000000000;
  v37 = 0xE000000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v41 = v17;
  v38 = 93;
  v39 = 0xE100000000000000;
  v36 = 0;
  v37 = 0xE000000000000000;
  v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v20 = v19;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v4 + 24);
  if (!*(_QWORD *)(v21 + 16) || (v22 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    a3 = v35;
    goto LABEL_10;
  }
  v24 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v22);
  v25 = *v24;
  v26 = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v25, v26, *(_QWORD *)(v4 + 16), v21);
  swift_bridgeObjectRelease();
  a3 = v35;
  if (!v27)
  {
LABEL_10:
    v33 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a3, 1, 1, v33);
  }
  Entity.__interactionIdentifier.getter((uint64_t)v16);
  v28 = type metadata accessor for UUID();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v16, 1, v28);
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
  if (v31 == 1)
  {
    UUID.init()();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v14, 0, 1, v28);
    Entity.__interactionIdentifier.setter((uint64_t)v14);
  }
  Entity.__interactionIdentifier.getter((uint64_t)v11);
  result = v30(v11, 1, v28);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(a3, v11, v28);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(a3, 0, 1, v28);
  }
  return result;
}

uint64_t __USDExportContext.pathTo(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  void *v7;
  id v8;
  _QWORD v10[4];
  _BYTE v11[32];

  v3 = *(_QWORD *)(v1 + 24);
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v6 & 1) != 0)
    {
      v7 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v5);
      v8 = v7;
    }
    else
    {
      v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v10[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USKObjectPath?);
  v10[0] = v7;
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v11);
  outlined destroy of AnyMeshBuffer((uint64_t)v10);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
  if (swift_dynamicCast())
    return v10[0];
  else
    return 0;
}

uint64_t USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *), uint64_t a5)
{
  void **v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t result;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  const char *v73;
  unint64_t v74;
  const char *v75;
  void (*v76)(char *);
  uint64_t v77;
  void **v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v77 = a5;
  v76 = a4;
  v85 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v67 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v67 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v67 - v18;
  v20 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, v85, a3, *v5);
  v25 = v24;
  v70 = v11;
  v26 = v21;
  v71 = v23;
  v69 = v17;
  v68 = v14;
  v85 = v24;
  v79 = v19;
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v11 = (char *)v24;
    else
      v11 = (char *)(v24 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v25 = v85;
    v28 = v20;
    if (v27)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  v27 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
  v28 = v20;
  if (!v27)
    return swift_bridgeObjectRelease();
LABEL_3:
  v82 = a3;
  v78 = v5;
  if (v27 >= 1)
  {
    v29 = v26;
    v30 = 0;
    v31 = v78[1];
    v83 = v25 & 0xC000000000000001;
    v84 = v31;
    v81 = xmmword_21BE50940;
    v75 = "USD action loading";
    v74 = (unint64_t)"named \"%s\" for node at path: %s";
    v73 = "arReferenceByFullSchemePath";
    v72 = v28;
    while (1)
    {
      if (v83)
        v37 = (id)MEMORY[0x220769770](v30, v25);
      else
        v37 = *(id *)(v25 + 8 * v30 + 32);
      v38 = v37;
      v39 = objc_msgSend(v84, sel_objectAtPath_, v37);
      if (!v39)
        goto LABEL_28;
      v40 = v39;
      objc_opt_self();
      v41 = swift_dynamicCastObjCClass();

      if (!v41)
        goto LABEL_28;
      v42 = objc_msgSend(v38, sel_stringValue);
      if (v42)
      {
        v43 = v42;
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v46 = v45;

        v90 = v44;
        v91 = v46;
        v80 = v46;
        v88 = 91;
        v89 = 0xE100000000000000;
        v86 = 0;
        v87 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v90 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v91 = v47;
        v88 = 93;
        v89 = 0xE100000000000000;
        v86 = 0;
        v87 = 0xE000000000000000;
        v48 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v50 = v49;
        swift_bridgeObjectRelease();
        v51 = (uint64_t)v78[3];
        if (*(_QWORD *)(v51 + 16) && (v52 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v50), (v53 & 1) != 0))
        {
          v54 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 16 * v52);
          v55 = *v54;
          v56 = v54[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v57 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v55, v56, (uint64_t)v78[2], v51);
          swift_bridgeObjectRelease();
          if (v57)
          {
            swift_beginAccess();
            v28 = v72;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v58 = (uint64_t)v69;
              UUID.init(uuid:)();
              v11 = *(char **)(v29 + 56);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v11)(v58, 0, 1, v28);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v58, 1, v28) != 1)
              {
                outlined destroy of BodyTrackingComponent?(v58, &demangling cache variable for type metadata for UUID?);
                goto LABEL_35;
              }
            }
            else
            {
              v11 = *(char **)(v29 + 56);
              v58 = (uint64_t)v69;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v11)(v69, 1, 1, v28);
            }
            v64 = (uint64_t)v68;
            outlined destroy of BodyTrackingComponent?(v58, &demangling cache variable for type metadata for UUID?);
            UUID.init()();
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v11)(v64, 0, 1, v28);
            Entity.__interactionIdentifier.setter(v64);
LABEL_35:
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_47;
            }
            v65 = v70;
            UUID.init(uuid:)();
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v11)(v65, 0, 1, v28);
            v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
            result = v60(v65, 1, v28);
            if ((_DWORD)result == 1)
              goto LABEL_48;
            swift_release();
            v59 = (uint64_t)v79;
            (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v79, v65, v28);
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v11)(v59, 0, 1, v28);
            swift_bridgeObjectRelease();
            goto LABEL_26;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v28 = v72;
      }
      v59 = (uint64_t)v79;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v79, 1, 1, v28);
      swift_bridgeObjectRelease();
      v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
LABEL_26:
      if (v60((char *)v59, 1, v28) != 1)
      {
        v63 = v71;
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v71, v59, v28);
        v76(v63);

        (*(void (**)(char *, uint64_t))(v29 + 8))(v63, v28);
        goto LABEL_8;
      }
      outlined destroy of BodyTrackingComponent?(v59, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v61 = swift_allocObject();
      v62 = (_QWORD *)v61;
      *(_OWORD *)(v61 + 16) = v81;
      if ((_BYTE)v82)
      {
        if (v82 == 1)
        {
          v34 = v74 | 0x8000000000000000;
          v32 = 0xD000000000000012;
          goto LABEL_7;
        }
        v32 = 0xD000000000000013;
        v33 = &v92;
      }
      else
      {
        v32 = 0xD000000000000014;
        v33 = &v93;
      }
      v34 = *(v33 - 32) | 0x8000000000000000;
LABEL_7:
      *(_QWORD *)(v61 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v61 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v62[4] = v32;
      v62[5] = v34;
      v62[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v62[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v62[9] = v38;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v35 = v38;
      v36 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_8:
      ++v30;
      v25 = v85;
      if (v27 == v30)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_47:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v11)(v70, 1, 1, v28);
LABEL_48:
  __break(1u);
  return result;
}

void __USDExportContext.InstanceMapper.addMapping(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _BYTE v23[32];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v20 - v14;
  outlined init with copy of Any(a2, (uint64_t)v23);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
  swift_dynamicCast();
  v16 = v22;
  outlined init with copy of UUID?(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
    swift_beginAccess();
    v17 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + 16) = v21;
    swift_bridgeObjectRelease();
    v19 = *(void (**)(char *, uint64_t))(v10 + 8);
    v19(v12, v9);
    swift_endAccess();
    v19(v15, v9);
  }

}

uint64_t __USDExportContext.InstanceMapper.getMapping(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  void *v8;
  id v9;
  uint64_t result;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v7 & 1) != 0)
    {
      v8 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v6);
      v9 = v8;
    }
    else
    {
      v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USKObjectPath?);
  a2[3] = result;
  *a2 = v8;
  return result;
}

uint64_t __USDExportContext.InstanceMapper.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __USDExportContext.InstanceMapper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t __USDExportContext.instanceMapper.getter()
{
  return swift_retain();
}

uint64_t __USDExportContext.instanceMapper.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*__USDExportContext.instanceMapper.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double __USDExportContext.init(with:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  outlined init with copy of Any(a1, (uint64_t)v6);
  __USDExportContext.init(with:resolver:)(v6, 0, 0, (uint64_t *)v7);
  outlined destroy of AnyMeshBuffer(a1);
  result = *(double *)v7;
  v5 = v7[1];
  *a2 = v7[0];
  a2[1] = v5;
  return result;
}

double __USDExportContext.init(with:resolver:)@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  id v9;
  id v10;
  double result;
  void *v12;
  __int128 v13;

  type metadata accessor for __USDExportContext.InstanceMapper();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  outlined init with take of Any(a1, &v13);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKScene);
  swift_retain();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v9 = v12;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a2);
    v10 = v9;
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);

    swift_release();
    *a4 = a2;
    a4[1] = a3;
    a4[2] = (uint64_t)v10;
    a4[3] = v8;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
    swift_release();

  }
  else
  {
    swift_release();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
    swift_release();
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
  }
  return result;
}

uint64_t __USKNodeWrapper.erasedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any(v1, a1);
}

uint64_t __USKNodeWrapper.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t __USDEncoder.exportContext.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *v1;
  v3 = v1[1];
  v5 = (void *)v1[2];
  v4 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = (uint64_t)v5;
  a1[3] = v4;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v2);
  v6 = v5;
  return swift_retain();
}

__n128 __USDEncoder.exportContext.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __n128 result;

  v3 = a1->n128_u64[0];
  v4 = a1->n128_i64[1];
  v5 = (void *)v1[2];
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*v1);
  swift_release();

  *v1 = v3;
  v1[1] = v4;
  result = a1[1];
  *((__n128 *)v1 + 1) = result;
  return result;
}

uint64_t (*__USDEncoder.exportContext.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 __USDEncoder.init(exportContext:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata accessor for __USDExportContext.InstanceMapper()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for __USDExportContext()
{
  return &type metadata for __USDExportContext;
}

uint64_t method lookup function for __USDExportContext.InstanceMapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __USDExportContext.InstanceMapper.addMapping(from:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of __USDExportContext.InstanceMapper.getMapping(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

ValueMetadata *type metadata accessor for __USKSceneWrapper()
{
  return &type metadata for __USKSceneWrapper;
}

ValueMetadata *type metadata accessor for __USKNodeWrapper()
{
  return &type metadata for __USKNodeWrapper;
}

ValueMetadata *type metadata accessor for __USKObjectPathWrapper()
{
  return &type metadata for __USKObjectPathWrapper;
}

ValueMetadata *type metadata accessor for __USKNodeSpecifierTypeWrapper()
{
  return &type metadata for __USKNodeSpecifierTypeWrapper;
}

uint64_t dispatch thunk of __USDEncodablePublic.encode(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of __USDEncodablePublic.encode(to:at:sceneSpecifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t destroy for __USDExportContext(uint64_t a1)
{
  if (*(_QWORD *)a1)
    swift_release();

  return swift_release();
}

_QWORD *initializeWithCopy for __USDExportContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = (void *)a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = v5;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for __USDExportContext(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
LABEL_8:
  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for __USDExportContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (!*(_QWORD *)a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  swift_release();
LABEL_8:

  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __USDEncoder()
{
  return &type metadata for __USDEncoder;
}

uint64_t specialized USDDecodableContext.sceneChildEntityWithName(childEntityName:scene:)(uint64_t a1, uint64_t a2)
{
  char *EntitiesArray;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  EntitiesArray = (char *)RESceneGetEntitiesArray();
  v6 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v5);
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_16:
    swift_release();
    return 0;
  }
  v9 = *(_QWORD *)(v6 + 32);
  REEntityGetName();
  if (String.init(cString:)() == a1 && v10 == a2)
  {
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
    return v9;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    v14 = 0;
    v15 = v8 - 1;
    while (v15 != v14)
    {
      if ((unint64_t)(v14 + 1) >= *(_QWORD *)(v7 + 16))
      {
        __break(1u);
        return result;
      }
      v9 = *(_QWORD *)(v7 + 8 * v14 + 40);
      REEntityGetName();
      if (String.init(cString:)() == a1 && v16 == a2)
        goto LABEL_17;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      ++v14;
      if ((v18 & 1) != 0)
        goto LABEL_15;
    }
    goto LABEL_16;
  }
LABEL_15:
  swift_release();
  return v9;
}

uint64_t specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v8;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char v49[16];
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v55 = 47;
  v56 = 0xE100000000000000;
  v50 = &v55;
  swift_bridgeObjectRetain();
  result = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v49, a1, a2);
  v8 = (_QWORD *)result;
  if (*(_QWORD *)(a4 + 16)
    && (result = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * result);
    v12 = *v10;
    v11 = v10[1];
    v55 = v12;
    v56 = v11;
    v53 = 12079;
    v54 = 0xE200000000000000;
    v51 = 47;
    v52 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v15 = v14;
    swift_bridgeObjectRetain();
    v16 = specialized USDDecodableContext.sceneChildEntityWithName(childEntityName:scene:)(v13, v15);
    v17 = 0;
  }
  else
  {
    if (!v8[2])
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v18 = v8[4];
    v19 = v8[5];
    v20 = v8[6];
    v21 = v8[7];
    swift_bridgeObjectRetain();
    v22 = MEMORY[0x220768CFC](v18, v19, v20, v21);
    v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v16 = specialized USDDecodableContext.sceneChildEntityWithName(childEntityName:scene:)(v22, v24);
    v17 = 1;
  }
  result = swift_bridgeObjectRelease();
  v25 = v8[2];
  if (v25 && v17 != v25)
  {
    v48 = v8 + 4;
    v47 = v8[2];
    while (v17 < v25)
    {
      if (!v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      if (v17 >= v8[2])
        goto LABEL_39;
      v28 = v8;
      v29 = &v48[4 * v17];
      v30 = *v29;
      v31 = v29[1];
      v32 = v29[2];
      v33 = v29[3];
      swift_bridgeObjectRetain();
      v34 = MEMORY[0x220768CFC](v30, v31, v32, v33);
      v36 = v35;
      swift_bridgeObjectRelease();
      result = REEntityGetChildCount();
      if (result < 0)
        goto LABEL_40;
      v37 = result;
      if (result)
      {
        v38 = 0;
        while (v37 != v38)
        {
          result = REEntityGetChild();
          if (!result)
            goto LABEL_43;
          v39 = result;
          REEntityGetName();
          if (v34 == String.init(cString:)() && v36 == v40)
          {
            result = swift_bridgeObjectRelease_n();
            v16 = v39;
            goto LABEL_14;
          }
          v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = swift_bridgeObjectRelease();
          if ((v41 & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v16 = v39;
            goto LABEL_14;
          }
          if (v37 == ++v38)
            goto LABEL_13;
        }
        __break(1u);
        break;
      }
LABEL_13:
      result = swift_bridgeObjectRelease();
      v16 = 0;
LABEL_14:
      ++v17;
      v25 = v47;
      v8 = v28;
      if (v17 == v47)
        goto LABEL_8;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16)
    return 0;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v42 = specialized static Entity.entityInfoType(_:)();
    if (v42)
    {
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 232))(v42, v43, v44, v45);
      v46 = *(_QWORD *)(v27 + 16);
      swift_retain();
      MEMORY[0x22076D160](v46, 0);
      *(_QWORD *)(v27 + 16) = v16;
      MEMORY[0x22076D160](v16, v27);
      swift_release();
      return v27;
    }
    return makeEntity(for:)(v16);
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(unint64_t a1, uint64_t a2, int a3, void *a4, void *a5, void (*a6)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a7, unint64_t *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  _QWORD *v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  unint64_t *v72;
  unint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v75;
  unint64_t v76;
  uint64_t result;
  char *v78;
  char *v79;
  void (*v80)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v81;
  const char *v82;
  unint64_t v83;
  const char *v84;
  unint64_t *v85;
  void *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v85 = a8;
  v91 = a7;
  v86 = a5;
  v95 = a1;
  v96 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v81 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v78 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v78 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v78 - v20;
  v22 = type metadata accessor for UUID();
  v23 = *(char **)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v78 - v27;
  v29 = a2;
  LODWORD(a2) = a3;
  v30 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v95, v29, a3, v96);
  v88 = v28;
  v89 = v26;
  v31 = v23;
  v87 = v21;
  v78 = v19;
  v79 = v16;
  v93 = a2;
  v96 = (void *)v30;
  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v30 = (unint64_t)v96;
  }
  else
  {
    v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v33 = v86;
  v34 = v22;
  if (!v32)
    return swift_bridgeObjectRelease();
  if (v32 >= 1)
  {
    v35 = v31;
    v36 = 0;
    v95 = v30 & 0xC000000000000001;
    v92 = xmmword_21BE50940;
    v84 = "USD action loading";
    v83 = (unint64_t)"named \"%s\" for node at path: %s";
    v82 = "arReferenceByFullSchemePath";
    v94 = v32;
    v80 = a6;
    while (1)
    {
      if (v95)
        v42 = (id)MEMORY[0x220769770](v36, v30);
      else
        v42 = *(id *)(v30 + 8 * v36 + 32);
      v43 = v42;
      v44 = objc_msgSend(v33, sel_objectAtPath_, v42, v78);
      if (!v44)
        goto LABEL_28;
      v45 = v44;
      objc_opt_self();
      v46 = swift_dynamicCastObjCClass();

      if (!v46)
        goto LABEL_28;
      v47 = objc_msgSend(v43, sel_stringValue);
      if (v47)
      {
        v48 = v47;
        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v51 = v50;

        v101 = v49;
        v102 = v51;
        v90 = v51;
        v99 = 91;
        v100 = 0xE100000000000000;
        v97 = 0;
        v98 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v101 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v102 = v52;
        v99 = 93;
        v100 = 0xE100000000000000;
        v97 = 0;
        v98 = 0xE000000000000000;
        v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v55 = v54;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v91 + 16)
          && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v55), v57 = v91, (v58 & 1) != 0))
        {
          v59 = (uint64_t *)(*(_QWORD *)(v91 + 56) + 16 * v56);
          v60 = *v59;
          v61 = v59[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v62 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v60, v61, (uint64_t)v80, v57);
          swift_bridgeObjectRelease();
          if (v62)
          {
            swift_beginAccess();
            v33 = v86;
            v63 = (uint64_t)v79;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v64 = (uint64_t)v78;
              UUID.init(uuid:)();
              a6 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)v35 + 7);
              a6(v64, 0, 1, v34);
              if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v35 + 6))(v64, 1, v34) == 1)
              {
                v65 = v63;
                goto LABEL_38;
              }
              outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
              v31 = v81;
            }
            else
            {
              v65 = v63;
              a6 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)v35 + 7);
              v64 = (uint64_t)v78;
              a6(v78, 1, 1, v34);
LABEL_38:
              v31 = v81;
              outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
              UUID.init()();
              a6(v65, 0, 1, v34);
              Entity.__interactionIdentifier.setter(v65);
            }
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_50;
            }
            UUID.init(uuid:)();
            a6(v31, 0, 1, v34);
            v67 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v35 + 6);
            result = v67(v31, 1, v34);
            if ((_DWORD)result == 1)
              goto LABEL_51;
            swift_release();
            v66 = (uint64_t)v87;
            (*((void (**)(char *, char *, uint64_t))v35 + 4))(v87, v31, v34);
            a6(v66, 0, 1, v34);
            swift_bridgeObjectRelease();
            goto LABEL_26;
          }
          v33 = v86;
        }
        else
        {
          swift_bridgeObjectRelease();
          v33 = v86;
        }
      }
      v66 = (uint64_t)v87;
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v35 + 7))(v87, 1, 1, v34);
      swift_bridgeObjectRelease();
      v67 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v35 + 6);
LABEL_26:
      if (v67((char *)v66, 1, v34) != 1)
      {
        v70 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v35 + 4);
        v71 = v88;
        v70(v88, v66, v34);
        (*((void (**)(char *, char *, uint64_t))v35 + 2))(v89, v71, v34);
        v72 = v85;
        v73 = *v85;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v72 = v73;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v73 + 16) + 1, 1, v73);
          *v85 = v73;
        }
        v76 = *(_QWORD *)(v73 + 16);
        v75 = *(_QWORD *)(v73 + 24);
        if (v76 >= v75 >> 1)
        {
          v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1, v73);
          *v85 = v73;
        }
        *(_QWORD *)(v73 + 16) = v76 + 1;
        ((void (*)(unint64_t))v70)(v73+ ((v35[80] + 32) & ~(unint64_t)v35[80])+ *((_QWORD *)v35 + 9) * v76);

        (*((void (**)(char *, uint64_t))v35 + 1))(v88, v34);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v66, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v68 = swift_allocObject();
      v69 = (_QWORD *)v68;
      *(_OWORD *)(v68 + 16) = v92;
      if ((_BYTE)v93)
      {
        if (v93 == 1)
        {
          v39 = v83 | 0x8000000000000000;
          v37 = 0xD000000000000012;
          goto LABEL_8;
        }
        v37 = 0xD000000000000013;
        v38 = &v103;
      }
      else
      {
        v37 = 0xD000000000000014;
        v38 = &v104;
      }
      v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v68 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v68 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v69[4] = v37;
      v69[5] = v39;
      v69[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v69[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v69[9] = v43;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v40 = v43;
      v41 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_9:
      ++v36;
      v30 = (unint64_t)v96;
      if (v94 == v36)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_50:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))a6)(v31, 1, 1, v34);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, void (*a6)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a7, unint64_t *a8, _QWORD *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, void *);
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, void *);
  char *v74;
  unint64_t *v75;
  unint64_t v76;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t result;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  void (*v91)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v92;
  char *v93;
  const char *v94;
  unint64_t v95;
  const char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t *v100;
  void *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v100 = a8;
  v104 = a7;
  v101 = a5;
  v110 = a1;
  v111 = a4;
  v98 = a9;
  v97 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v99 = *(_QWORD *)(v97 - 8);
  MEMORY[0x24BDAC7A8](v97);
  v103 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v87 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v87 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v87 - v23;
  v25 = (_QWORD *)type metadata accessor for UUID();
  v26 = *(v25 - 1);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2;
  LODWORD(a2) = a3;
  v30 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v110, v29, a3, v111);
  v92 = v28;
  v107 = v26;
  v93 = v24;
  v111 = v25;
  v31 = v22;
  v89 = v16;
  v106 = a2;
  v110 = v30;
  v88 = v19;
  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v30 = v110;
  }
  else
  {
    v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v33 = v101;
  v34 = v92;
  v90 = (uint64_t)v31;
  v35 = (uint64_t)v93;
  if (!v32)
    return swift_bridgeObjectRelease();
  if (v32 >= 1)
  {
    v36 = 0;
    v109 = v30 & 0xC000000000000001;
    v105 = xmmword_21BE50940;
    v96 = "USD action loading";
    v95 = (unint64_t)"named \"%s\" for node at path: %s";
    v94 = "arReferenceByFullSchemePath";
    v31 = v111;
    v108 = v32;
    v91 = a6;
    while (1)
    {
      if (v109)
        v42 = (id)MEMORY[0x220769770](v36, v30);
      else
        v42 = *(id *)(v30 + 8 * v36 + 32);
      v43 = v42;
      v44 = objc_msgSend(v33, sel_objectAtPath_, v42);
      if (!v44)
        goto LABEL_28;
      v45 = v44;
      objc_opt_self();
      v46 = swift_dynamicCastObjCClass();

      if (!v46)
        goto LABEL_28;
      v47 = objc_msgSend(v43, sel_stringValue);
      if (v47)
      {
        v48 = v47;
        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v51 = v50;

        v116 = v49;
        v117 = v51;
        v102 = v51;
        v114 = 91;
        v115 = 0xE100000000000000;
        v112 = 0;
        v113 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v116 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v117 = v52;
        v114 = 93;
        v115 = 0xE100000000000000;
        v112 = 0;
        v113 = 0xE000000000000000;
        v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v55 = v54;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v104 + 16)
          && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v55), v57 = v104, (v58 & 1) != 0))
        {
          v59 = (uint64_t *)(*(_QWORD *)(v104 + 56) + 16 * v56);
          v60 = *v59;
          v61 = v59[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v62 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v60, v61, (uint64_t)v91, v57);
          swift_bridgeObjectRelease();
          if (v62)
          {
            swift_beginAccess();
            v33 = v101;
            v31 = v111;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v63 = v90;
              UUID.init(uuid:)();
              v64 = v107;
              a6 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v107 + 56);
              a6(v63, 0, 1, v31);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v64 + 48))(v63, 1, v31) != 1)
              {
                outlined destroy of BodyTrackingComponent?(v63, &demangling cache variable for type metadata for UUID?);
                v24 = v89;
                goto LABEL_39;
              }
            }
            else
            {
              a6 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v107 + 56);
              v63 = v90;
              a6(v90, 1, 1, v31);
            }
            v24 = v89;
            outlined destroy of BodyTrackingComponent?(v63, &demangling cache variable for type metadata for UUID?);
            v82 = (uint64_t)v88;
            UUID.init()();
            a6(v82, 0, 1, v31);
            Entity.__interactionIdentifier.setter(v82);
LABEL_39:
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_49;
            }
            UUID.init(uuid:)();
            a6(v24, 0, 1, v31);
            v83 = v24;
            v84 = v107;
            v66 = *(uint64_t (**)(char *, uint64_t, void *))(v107 + 48);
            result = v66(v83, 1, v31);
            if ((_DWORD)result == 1)
              goto LABEL_50;
            swift_release();
            v35 = (uint64_t)v93;
            (*(void (**)(void))(v84 + 32))();
            a6(v35, 0, 1, v31);
            swift_bridgeObjectRelease();
            v34 = v92;
            goto LABEL_26;
          }
          v33 = v101;
          v31 = v111;
        }
        else
        {
          swift_bridgeObjectRelease();
          v33 = v101;
          v31 = v111;
        }
      }
      v65 = v107;
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v107 + 56))(v35, 1, 1, v31);
      swift_bridgeObjectRelease();
      v66 = *(uint64_t (**)(char *, uint64_t, void *))(v65 + 48);
LABEL_26:
      if (v66((char *)v35, 1, v31) != 1)
      {
        v69 = v107;
        (*(void (**)(char *, uint64_t, void *))(v107 + 32))(v34, v35, v31);
        v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        v71 = *(int *)(v70 + 48);
        v72 = *(int *)(v70 + 64);
        v73 = *(void (**)(char *, char *, void *))(v69 + 16);
        v74 = v103;
        v73(v103, v34, v31);
        *(_QWORD *)&v74[v71] = *v98;
        *(_QWORD *)&v74[v72] = MEMORY[0x24BEE4AF8];
        swift_storeEnumTagMultiPayload();
        v75 = v100;
        v76 = *v100;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v75 = v76;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v76 + 16) + 1, 1, v76);
          *v100 = v76;
        }
        v79 = *(_QWORD *)(v76 + 16);
        v78 = *(_QWORD *)(v76 + 24);
        v80 = v99;
        v81 = (uint64_t)v103;
        if (v79 >= v78 >> 1)
        {
          v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1, v76);
          v80 = v99;
          v76 = v86;
          v81 = (uint64_t)v103;
          *v100 = v76;
        }
        *(_QWORD *)(v76 + 16) = v79 + 1;
        outlined init with take of __RKEntityActionSpecification(v81, v76+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(_QWORD *)(v80 + 72) * v79, type metadata accessor for __RKEntityTriggerSpecification);

        v31 = v111;
        (*(void (**)(char *, void *))(v107 + 8))(v34, v111);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v35, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v67 = swift_allocObject();
      v68 = (_QWORD *)v67;
      *(_OWORD *)(v67 + 16) = v105;
      if ((_BYTE)v106)
      {
        if (v106 == 1)
        {
          v39 = v95 | 0x8000000000000000;
          v37 = 0xD000000000000012;
          goto LABEL_8;
        }
        v37 = 0xD000000000000013;
        v38 = &v118;
      }
      else
      {
        v37 = 0xD000000000000014;
        v38 = &v119;
      }
      v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v67 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v67 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v68[4] = v37;
      v68[5] = v39;
      v68[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v68[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v68[9] = v43;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v40 = v43;
      v41 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      v31 = v111;
LABEL_9:
      ++v36;
      v30 = v110;
      if (v108 == v36)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_49:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, void *))a6)(v24, 1, 1, v31);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, void (*a6)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a7, unint64_t *a8, float a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, void *);
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void (*v75)(char *, char *, void *);
  char *v76;
  unint64_t *v77;
  unint64_t v78;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void (*v92)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v93;
  char *v94;
  const char *v95;
  unint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  void *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v100 = a8;
  v104 = a7;
  v101 = a5;
  v110 = a1;
  v111 = a4;
  v98 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v99 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v103 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v89 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v89 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v89 - v24;
  v26 = (_QWORD *)type metadata accessor for UUID();
  v27 = *(v26 - 1);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a2;
  LODWORD(a2) = a3;
  v31 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v110, v30, a3, v111);
  v93 = v29;
  v107 = v27;
  v94 = v25;
  v111 = v26;
  v32 = v23;
  v90 = v17;
  v106 = a2;
  v110 = v31;
  v89 = v20;
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v31 = v110;
  }
  else
  {
    v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v34 = v101;
  v35 = v93;
  v91 = (uint64_t)v32;
  v36 = (uint64_t)v94;
  if (!v33)
    return swift_bridgeObjectRelease();
  if (v33 >= 1)
  {
    v37 = 0;
    v109 = v31 & 0xC000000000000001;
    v105 = xmmword_21BE50940;
    v97 = "USD action loading";
    v96 = (unint64_t)"named \"%s\" for node at path: %s";
    v95 = "arReferenceByFullSchemePath";
    v32 = v111;
    v108 = v33;
    v92 = a6;
    while (1)
    {
      if (v109)
        v43 = (id)MEMORY[0x220769770](v37, v31);
      else
        v43 = *(id *)(v31 + 8 * v37 + 32);
      v44 = v43;
      v45 = objc_msgSend(v34, sel_objectAtPath_, v43, v89);
      if (!v45)
        goto LABEL_28;
      v46 = v45;
      objc_opt_self();
      v47 = swift_dynamicCastObjCClass();

      if (!v47)
        goto LABEL_28;
      v48 = objc_msgSend(v44, sel_stringValue);
      if (v48)
      {
        v49 = v48;
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v52 = v51;

        v116 = v50;
        v117 = v52;
        v102 = v52;
        v114 = 91;
        v115 = 0xE100000000000000;
        v112 = 0;
        v113 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v116 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v117 = v53;
        v114 = 93;
        v115 = 0xE100000000000000;
        v112 = 0;
        v113 = 0xE000000000000000;
        v54 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v56 = v55;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v104 + 16)
          && (v57 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v56), v58 = v104, (v59 & 1) != 0))
        {
          v60 = (uint64_t *)(*(_QWORD *)(v104 + 56) + 16 * v57);
          v61 = *v60;
          v62 = v60[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v63 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v61, v62, (uint64_t)v92, v58);
          swift_bridgeObjectRelease();
          if (v63)
          {
            swift_beginAccess();
            v34 = v101;
            v32 = v111;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v64 = v91;
              UUID.init(uuid:)();
              v65 = v107;
              a6 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v107 + 56);
              a6(v64, 0, 1, v32);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v65 + 48))(v64, 1, v32) != 1)
              {
                outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
                v25 = v90;
                goto LABEL_39;
              }
            }
            else
            {
              a6 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v107 + 56);
              v64 = v91;
              a6(v91, 1, 1, v32);
            }
            v25 = v90;
            outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
            v84 = (uint64_t)v89;
            UUID.init()();
            a6(v84, 0, 1, v32);
            Entity.__interactionIdentifier.setter(v84);
LABEL_39:
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_49;
            }
            UUID.init(uuid:)();
            a6(v25, 0, 1, v32);
            v85 = v25;
            v86 = v107;
            v67 = *(uint64_t (**)(char *, uint64_t, void *))(v107 + 48);
            result = v67(v85, 1, v32);
            if ((_DWORD)result == 1)
              goto LABEL_50;
            swift_release();
            v36 = (uint64_t)v94;
            (*(void (**)(void))(v86 + 32))();
            a6(v36, 0, 1, v32);
            swift_bridgeObjectRelease();
            v35 = v93;
            goto LABEL_26;
          }
          v34 = v101;
          v32 = v111;
        }
        else
        {
          swift_bridgeObjectRelease();
          v34 = v101;
          v32 = v111;
        }
      }
      v66 = v107;
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v107 + 56))(v36, 1, 1, v32);
      swift_bridgeObjectRelease();
      v67 = *(uint64_t (**)(char *, uint64_t, void *))(v66 + 48);
LABEL_26:
      if (v67((char *)v36, 1, v32) != 1)
      {
        v70 = v107;
        (*(void (**)(char *, uint64_t, void *))(v107 + 32))(v35, v36, v32);
        v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        v72 = *(int *)(v71 + 48);
        v73 = v32;
        v74 = *(int *)(v71 + 64);
        v75 = *(void (**)(char *, char *, void *))(v70 + 16);
        v76 = v103;
        v75(v103, v35, v73);
        *(float *)&v76[v72] = a9;
        v76[v74] = 0;
        swift_storeEnumTagMultiPayload();
        v77 = v100;
        v78 = *v100;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v77 = v78;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v78 + 16) + 1, 1, v78);
          *v100 = v78;
        }
        v81 = *(_QWORD *)(v78 + 16);
        v80 = *(_QWORD *)(v78 + 24);
        v82 = v99;
        v83 = (uint64_t)v103;
        if (v81 >= v80 >> 1)
        {
          v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1, v78);
          v82 = v99;
          v78 = v88;
          v83 = (uint64_t)v103;
          *v100 = v78;
        }
        *(_QWORD *)(v78 + 16) = v81 + 1;
        outlined init with take of __RKEntityActionSpecification(v83, v78+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v82 + 72) * v81, type metadata accessor for __RKEntityTriggerSpecification);

        v32 = v111;
        (*(void (**)(char *, void *))(v107 + 8))(v35, v111);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v36, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v68 = swift_allocObject();
      v69 = (_QWORD *)v68;
      *(_OWORD *)(v68 + 16) = v105;
      if ((_BYTE)v106)
      {
        if (v106 == 1)
        {
          v40 = v96 | 0x8000000000000000;
          v38 = 0xD000000000000012;
          goto LABEL_8;
        }
        v38 = 0xD000000000000013;
        v39 = &v118;
      }
      else
      {
        v38 = 0xD000000000000014;
        v39 = &v119;
      }
      v40 = *(v39 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v68 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v68 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v69[4] = v38;
      v69[5] = v40;
      v69[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v69[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v69[9] = v44;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v41 = v44;
      v42 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      v32 = v111;
LABEL_9:
      ++v37;
      v31 = v110;
      if (v108 == v37)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_49:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, void *))a6)(v25, 1, 1, v32);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.entityFromIdentifier(identifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *AllEntitiesArray;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  Swift::Int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSString *v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v59 = a1;
  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v54 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v60);
  v62 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v61 = (uint64_t)&v52 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v52 - v11;
  AllEntitiesArray = (char *)RESceneGetAllEntitiesArray();
  v15 = specialized _copyCollectionToContiguousArray<A>(_:)(AllEntitiesArray, v14);
  v58 = *(_QWORD *)(v15 + 16);
  if (!v58)
  {
LABEL_47:
    swift_release();
    return 0;
  }
  v55 = v8;
  v56 = v12;
  v16 = 0;
  v53 = v2;
  v57 = v15;
  while (1)
  {
    v17 = *(_QWORD *)(v15 + 8 * v16 + 32);
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v18 = swift_dynamicCastClassUnconditional();
LABEL_36:
      v37 = v18;
      goto LABEL_37;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      break;
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
      swift_once();
    swift_beginAccess();
    if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v20 & 1) == 0))
    {
      swift_endAccess();
      v21 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v63 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v63;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent())
      goto LABEL_35;
    Object = RECustomComponentGetObject();
    if (!Object)
      goto LABEL_35;
    v24 = *(unsigned __int8 **)Object;
    if (*(_QWORD *)(Object + 8) || !v24)
    {
      result = swift_retain();
    }
    else
    {
      v25 = *v24;
      v26 = String.init(utf8String:)();
      if (v27)
        v28 = v26;
      else
        v28 = 0;
      if (v27)
        v29 = v27;
      else
        v29 = 0xE000000000000000;
      v24 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v25 == 42, v28, v29);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v24;
    }
    if (!v24)
      goto LABEL_52;
    swift_retain();
    v30 = String.init(utf8String:)();
    v32 = v31;
    swift_release();
    if (v32)
      v33 = v30;
    else
      v33 = 0;
    if (!v32)
      v32 = 0xE000000000000000;
    v34 = (NSString *)MEMORY[0x220768C3C](v33, v32);
    swift_bridgeObjectRelease();
    v35 = NSClassFromString(v34);

    swift_release();
    v2 = v53;
    v12 = v56;
    if (!v35
      || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (v36 = swift_dynamicCastMetatype()) == 0))
    {
LABEL_35:
      v18 = makeEntity(for:)(v17);
      goto LABEL_36;
    }
    v37 = (*(uint64_t (**)(void))(v36 + 232))();
    v38 = *(_QWORD *)(v37 + 16);
    swift_retain();
    MEMORY[0x22076D160](v38, 0);
    *(_QWORD *)(v37 + 16) = v17;
    MEMORY[0x22076D160](v17, v37);
    swift_release();
LABEL_37:
    swift_beginAccess();
    if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
    {
      UUID.init(uuid:)();
      v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v39(v12, 0, 1, v1);
    }
    else
    {
      v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v39(v12, 1, 1, v1);
    }
    v40 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v61, v59, v1);
    v39((char *)v40, 0, 1, v1);
    v41 = v62;
    v42 = v62 + *(int *)(v60 + 48);
    outlined init with copy of UUID?((uint64_t)v12, v62);
    outlined init with copy of UUID?(v40, v42);
    v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    if (v43(v41, 1, v1) == 1)
    {
      outlined destroy of BodyTrackingComponent?(v61, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for UUID?);
      if (v43(v42, 1, v1) == 1)
      {
        outlined destroy of BodyTrackingComponent?(v62, &demangling cache variable for type metadata for UUID?);
LABEL_49:
        swift_release();
        return v37;
      }
      goto LABEL_4;
    }
    v44 = (uint64_t)v55;
    outlined init with copy of UUID?(v62, (uint64_t)v55);
    if (v43(v42, 1, v1) == 1)
    {
      outlined destroy of BodyTrackingComponent?(v61, &demangling cache variable for type metadata for UUID?);
      v45 = (uint64_t)v56;
      outlined destroy of BodyTrackingComponent?((uint64_t)v56, &demangling cache variable for type metadata for UUID?);
      v46 = v44;
      v12 = (char *)v45;
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v46, v1);
LABEL_4:
      outlined destroy of BodyTrackingComponent?(v62, &demangling cache variable for type metadata for (UUID?, UUID?));
      goto LABEL_5;
    }
    v47 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v54, v42, v1);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v48 = dispatch thunk of static Equatable.== infix(_:_:)();
    v49 = *(void (**)(char *, uint64_t))(v2 + 8);
    v49(v47, v1);
    outlined destroy of BodyTrackingComponent?(v61, &demangling cache variable for type metadata for UUID?);
    v50 = (uint64_t)v56;
    outlined destroy of BodyTrackingComponent?((uint64_t)v56, &demangling cache variable for type metadata for UUID?);
    v51 = v44;
    v12 = (char *)v50;
    v49((char *)v51, v1);
    outlined destroy of BodyTrackingComponent?(v62, &demangling cache variable for type metadata for UUID?);
    if ((v48 & 1) != 0)
      goto LABEL_49;
LABEL_5:
    ++v16;
    swift_release();
    v15 = v57;
    if (v58 == v16)
      goto LABEL_47;
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (**v16)(uint64_t, uint64_t, void *);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  unsigned int (**v26)(uint64_t, uint64_t, void *);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (**v65)(uint64_t, uint64_t, void *);
  unsigned int (**v66)(uint64_t, uint64_t, void *);
  unsigned int (*v67)(uint64_t, uint64_t, void *);
  uint64_t v68;
  _QWORD *v69;
  void (**v70)(char *, uint64_t, void *);
  unint64_t *v71;
  unint64_t v72;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (**v79)(uint64_t, uint64_t, void *);
  void (**v80)(void);
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unsigned int (**v85)(uint64_t, uint64_t, void *);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  const char *v90;
  unint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  void *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  unsigned int (**v103)(uint64_t, uint64_t, void *);
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v96 = a8;
  v100 = a7;
  v97 = a5;
  v106 = a1;
  v107 = a4;
  v94 = a9;
  v93 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v95 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v99 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (unsigned int (**)(uint64_t, uint64_t, void *))((char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v83 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v83 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v83 - v23;
  v25 = (_QWORD *)type metadata accessor for UUID();
  v26 = (unsigned int (**)(uint64_t, uint64_t, void *))*(v25 - 1);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2;
  LODWORD(a2) = a3;
  v30 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v106, v29, a3, v107);
  v88 = v28;
  v103 = v26;
  v89 = v24;
  v107 = v25;
  v31 = v22;
  v85 = v16;
  v102 = a2;
  v106 = v30;
  v84 = v19;
  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v30 = v106;
  }
  else
  {
    v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v33 = v97;
  v34 = (uint64_t)v88;
  v86 = (uint64_t)v31;
  v35 = (uint64_t)v89;
  if (!v32)
    return swift_bridgeObjectRelease();
  if (v32 >= 1)
  {
    v36 = 0;
    v105 = v30 & 0xC000000000000001;
    v101 = xmmword_21BE50940;
    v92 = "USD action loading";
    v91 = (unint64_t)"named \"%s\" for node at path: %s";
    v90 = "arReferenceByFullSchemePath";
    v31 = v107;
    v104 = v32;
    v87 = a6;
    while (1)
    {
      if (v105)
        v43 = (id)MEMORY[0x220769770](v36, v30);
      else
        v43 = *(id *)(v30 + 8 * v36 + 32);
      v44 = v43;
      v45 = objc_msgSend(v33, sel_objectAtPath_, v43);
      if (!v45)
        goto LABEL_28;
      v46 = v45;
      objc_opt_self();
      v47 = swift_dynamicCastObjCClass();

      if (!v47)
        goto LABEL_28;
      v48 = objc_msgSend(v44, sel_stringValue);
      if (v48)
      {
        v49 = v48;
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v52 = v51;

        v112 = v50;
        v113 = v52;
        v98 = v52;
        v110 = 91;
        v111 = 0xE100000000000000;
        v108 = 0;
        v109 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v112 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v113 = v53;
        v110 = 93;
        v111 = 0xE100000000000000;
        v108 = 0;
        v109 = 0xE000000000000000;
        v54 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v56 = v55;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v100 + 16)
          && (v57 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v56), v58 = v100, (v59 & 1) != 0))
        {
          v60 = (uint64_t *)(*(_QWORD *)(v100 + 56) + 16 * v57);
          v61 = *v60;
          v62 = v60[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v63 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v61, v62, v87, v58);
          swift_bridgeObjectRelease();
          if (v63)
          {
            swift_beginAccess();
            v33 = v97;
            v31 = v107;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v64 = v86;
              UUID.init(uuid:)();
              v65 = v103;
              v28 = (char *)v103[7];
              ((void (*)(uint64_t, _QWORD, uint64_t, void *))v28)(v64, 0, 1, v31);
              if (v65[6](v64, 1, v31) != 1)
              {
                outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
                v26 = v85;
                goto LABEL_42;
              }
            }
            else
            {
              v28 = (char *)v103[7];
              v64 = v86;
              ((void (*)(uint64_t, uint64_t, uint64_t, void *))v28)(v86, 1, 1, v31);
            }
            v26 = v85;
            outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
            v78 = (uint64_t)v84;
            UUID.init()();
            ((void (*)(uint64_t, _QWORD, uint64_t, void *))v28)(v78, 0, 1, v31);
            Entity.__interactionIdentifier.setter(v78);
LABEL_42:
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_52;
            }
            UUID.init(uuid:)();
            ((void (*)(unsigned int (**)(uint64_t, uint64_t, void *), _QWORD, uint64_t, void *))v28)(v26, 0, 1, v31);
            v79 = v26;
            v80 = (void (**)(void))v103;
            v67 = v103[6];
            result = ((uint64_t (*)(_QWORD, uint64_t, void *))v67)(v79, 1, v31);
            if ((_DWORD)result == 1)
              goto LABEL_53;
            swift_release();
            v35 = (uint64_t)v89;
            v80[4]();
            ((void (*)(uint64_t, _QWORD, uint64_t, void *))v28)(v35, 0, 1, v31);
            swift_bridgeObjectRelease();
            v34 = (uint64_t)v88;
            goto LABEL_26;
          }
          v33 = v97;
          v31 = v107;
        }
        else
        {
          swift_bridgeObjectRelease();
          v33 = v97;
          v31 = v107;
        }
      }
      v66 = v103;
      ((void (*)(uint64_t, uint64_t, uint64_t, void *))v103[7])(v35, 1, 1, v31);
      swift_bridgeObjectRelease();
      v67 = v66[6];
LABEL_26:
      if (v67(v35, 1, v31) != 1)
      {
        v70 = (void (**)(char *, uint64_t, void *))v103;
        v103[4](v34, v35, v31);
        v70[2](v99, v34, v31);
        swift_storeEnumTagMultiPayload();
        v71 = v96;
        v72 = *v96;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v71 = v72;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v72 + 16) + 1, 1, v72);
          *v96 = v72;
        }
        v75 = *(_QWORD *)(v72 + 16);
        v74 = *(_QWORD *)(v72 + 24);
        v76 = v95;
        v77 = (uint64_t)v99;
        if (v75 >= v74 >> 1)
        {
          v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1, v72);
          v76 = v95;
          v72 = v82;
          v77 = (uint64_t)v99;
          *v96 = v72;
        }
        *(_QWORD *)(v72 + 16) = v75 + 1;
        outlined init with take of __RKEntityActionSpecification(v77, v72+ ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80))+ *(_QWORD *)(v76 + 72) * v75, type metadata accessor for __RKEntityTriggerSpecification);
        if (specialized USDDecodableContext.entityFromIdentifier(identifier:)(v34))
        {
          Entity.generateCollisionShapes(recursive:)(1);

          swift_release();
        }
        else
        {

        }
        v31 = v107;
        v42 = v104;
        ((void (*)(uint64_t, void *))v103[1])(v34, v107);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v35, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v68 = swift_allocObject();
      v69 = (_QWORD *)v68;
      *(_OWORD *)(v68 + 16) = v101;
      if ((_BYTE)v102)
      {
        if (v102 == 1)
        {
          v39 = v91 | 0x8000000000000000;
          v37 = 0xD000000000000012;
          goto LABEL_8;
        }
        v37 = 0xD000000000000013;
        v38 = &v114;
      }
      else
      {
        v37 = 0xD000000000000014;
        v38 = &v115;
      }
      v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v68 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v68 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v69[4] = v37;
      v69[5] = v39;
      v69[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v69[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v69[9] = v44;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v40 = v44;
      v41 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      v31 = v107;
      v42 = v104;
LABEL_9:
      ++v36;
      v30 = v106;
      if (v42 == v36)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_52:
  result = ((uint64_t (*)(unsigned int (**)(uint64_t, uint64_t, void *), uint64_t, uint64_t, void *))v28)(v26, 1, 1, v31);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, double a9, uint64_t a10, unint64_t *a11, unsigned __int8 a12, unsigned __int8 a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (**v69)(uint64_t, uint64_t, _QWORD);
  char *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void (*v78)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v80[2];
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  const char *v89;
  uint64_t v90;
  unint64_t *v91;
  int v92;
  int v93;
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  int v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v94 = a8;
  v99 = a7;
  v84 = a6;
  v96 = a5;
  v103 = a4;
  v93 = a13;
  v92 = a12;
  v91 = a11;
  v90 = a10;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)v80 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)v80 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v80 - v27;
  v29 = type metadata accessor for UUID();
  v30 = *(void **)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)v80 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, v103);
  v101 = a3;
  v34 = v96;
  v85 = v32;
  v98 = v29;
  v103 = v30;
  v95 = v28;
  v82 = v26;
  v83 = v23;
  v81 = v20;
  v35 = v33;
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v36 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v37 = (uint64_t)v95;
  v38 = v103;
  v39 = v34;
  if (!v36)
    return swift_bridgeObjectRelease();
  if (v36 >= 1)
  {
    v40 = 0;
    v102 = v35 & 0xC000000000000001;
    v100 = xmmword_21BE50940;
    v89 = "USD action loading";
    v88 = (unint64_t)"named \"%s\" for node at path: %s";
    v87 = "arReferenceByFullSchemePath";
    v86 = v35;
    while (1)
    {
      if (v102)
        v46 = (id)MEMORY[0x220769770](v40, v35);
      else
        v46 = *(id *)(v35 + 8 * v40 + 32);
      v47 = v46;
      v48 = objc_msgSend(v39, sel_objectAtPath_, v46);
      if (!v48)
        goto LABEL_30;
      v49 = v48;
      objc_opt_self();
      v50 = swift_dynamicCastObjCClass();

      if (!v50)
        goto LABEL_30;
      v51 = objc_msgSend(v47, sel_stringValue);
      if (v51)
      {
        v52 = v51;
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v55 = v54;

        v108 = v53;
        v109 = v55;
        v97 = v55;
        v106 = 91;
        v107 = 0xE100000000000000;
        v104 = 0;
        v105 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v108 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v109 = v56;
        v106 = 93;
        v107 = 0xE100000000000000;
        v104 = 0;
        v105 = 0xE000000000000000;
        v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v59 = v58;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v99 + 16)
          && (v60 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v59), v61 = v99, (v62 & 1) != 0))
        {
          v63 = (uint64_t *)(*(_QWORD *)(v99 + 56) + 16 * v60);
          v64 = *v63;
          v65 = v63[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v66 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v64, v65, v84, v61);
          swift_bridgeObjectRelease();
          if (v66)
          {
            swift_beginAccess();
            v67 = (uint64_t)v83;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v68 = (uint64_t)v82;
              UUID.init(uuid:)();
              v69 = (unsigned int (**)(uint64_t, uint64_t, _QWORD))v103;
              v70 = (char *)*((_QWORD *)v103 + 7);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v70)(v68, 0, 1, v98);
              if (v69[6](v68, 1, v98) == 1)
              {
                v71 = v96;
                v37 = (uint64_t)v81;
                v72 = v98;
                goto LABEL_36;
              }
              outlined destroy of BodyTrackingComponent?(v68, &demangling cache variable for type metadata for UUID?);
              v71 = v96;
              v37 = (uint64_t)v81;
            }
            else
            {
              v70 = (char *)*((_QWORD *)v103 + 7);
              v68 = (uint64_t)v82;
              v72 = v98;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v70)(v82, 1, 1, v98);
              v71 = v96;
              v37 = (uint64_t)v81;
LABEL_36:
              outlined destroy of BodyTrackingComponent?(v68, &demangling cache variable for type metadata for UUID?);
              UUID.init()();
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v70)(v67, 0, 1, v72);
              Entity.__interactionIdentifier.setter(v67);
            }
            v35 = v86;
            v23 = v70;
            v38 = v103;
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_47;
            }
            v80[1] = v66;
            UUID.init(uuid:)();
            v73 = v98;
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v23)(v37, 0, 1, v98);
            v78 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v23;
            v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38[6];
            result = v74(v37, 1, v73);
            if ((_DWORD)result == 1)
              goto LABEL_48;
            swift_release();
            v37 = (uint64_t)v95;
            ((void (*)(void))v38[4])();
            v78(v37, 0, 1, v73);
            swift_bridgeObjectRelease();
            goto LABEL_28;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v71 = v96;
        v37 = (uint64_t)v95;
        v38 = v103;
        v35 = v86;
      }
      else
      {
        v71 = v39;
      }
      v73 = v98;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v38[7])(v37, 1, 1, v98);
      swift_bridgeObjectRelease();
      v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38[6];
LABEL_28:
      v39 = v71;
      if (v74(v37, 1, v73) != 1)
      {
        v77 = (uint64_t)v85;
        ((void (*)(char *, uint64_t, uint64_t))v38[4])(v85, v37, v73);
        specialized closure #1 in static __RKEntityActionSpecification.generateAudioActionSpecifications(decodeContext:)(v77, v94, v90, v91, v92, v93, a9);

        ((void (*)(uint64_t, uint64_t))v38[1])(v77, v73);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v37, &demangling cache variable for type metadata for UUID?);
LABEL_30:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v75 = swift_allocObject();
      v76 = (_QWORD *)v75;
      *(_OWORD *)(v75 + 16) = v100;
      if ((_BYTE)v101)
      {
        if (v101 == 1)
        {
          v43 = v88 | 0x8000000000000000;
          v41 = 0xD000000000000012;
          goto LABEL_8;
        }
        v41 = 0xD000000000000013;
        v42 = &v110;
      }
      else
      {
        v41 = 0xD000000000000014;
        v42 = &v111;
      }
      v43 = *(v42 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v75 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v75 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v76[4] = v41;
      v76[5] = v43;
      v76[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v76[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v76[9] = v47;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v44 = v47;
      v45 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      v38 = v103;
LABEL_9:
      if (v36 == ++v40)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_47:
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v37, 1, 1, v98);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, float a9, unsigned __int8 a10, unsigned __int8 a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(_QWORD, _QWORD, _QWORD);
  char v74;
  int v75;
  char v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  void (*v81)(_QWORD, _QWORD, _QWORD);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, _QWORD, uint64_t, _QWORD);
  char *v99;
  uint64_t v100;
  uint64_t result;
  void (*v102)(_QWORD, _QWORD, _QWORD);
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void (*v110)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v111;
  unint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  void *v128;
  id v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v116 = a8;
  v117 = a7;
  v109 = a6;
  v128 = a4;
  v129 = a5;
  v127 = a1;
  v122 = a11;
  v124 = a10;
  v114 = type metadata accessor for __RKEntityActionSpecification(0);
  v115 = *(_QWORD *)(v114 - 8);
  MEMORY[0x24BDAC7A8](v114);
  v123 = (uint64_t)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v104 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v104 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v104 - v25;
  v27 = type metadata accessor for UUID();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v104 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v104 - v32;
  v34 = a2;
  LODWORD(a2) = a3;
  v35 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v127, v34, a3, v128);
  v119 = v33;
  v120 = v31;
  v125 = v28;
  v36 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v27;
  v118 = v26;
  v37 = v24;
  v106 = v21;
  v108 = v18;
  LODWORD(v127) = a2;
  v38 = v35;
  if (v35 >> 62)
  {
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v40 = v36;
    if (v39)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  v39 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
  v40 = v36;
  if (!v39)
    return swift_bridgeObjectRelease();
LABEL_3:
  v105 = v24;
  if (v39 >= 1)
  {
    v41 = 0;
    v128 = (void *)(v38 & 0xC000000000000001);
    if (a9 < 0.0)
      a9 = 1.0;
    v126 = xmmword_21BE50940;
    v113 = "USD action loading";
    v112 = (unint64_t)"named \"%s\" for node at path: %s";
    v111 = "arReferenceByFullSchemePath";
    v121 = v39;
    v110 = v40;
    while (1)
    {
      if (v128)
        v47 = (id)MEMORY[0x220769770](v41, v38);
      else
        v47 = *(id *)(v38 + 8 * v41 + 32);
      v48 = v47;
      v49 = objc_msgSend(v129, sel_objectAtPath_, v47);
      if (!v49)
        goto LABEL_31;
      v50 = v49;
      objc_opt_self();
      v51 = swift_dynamicCastObjCClass();

      if (!v51)
        goto LABEL_31;
      v52 = objc_msgSend(v48, sel_stringValue);
      if (v52)
      {
        v53 = v52;
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v56 = v55;

        v134 = v54;
        v135 = v56;
        v132 = 91;
        v133 = 0xE100000000000000;
        v130 = 0;
        v131 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v134 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v135 = v57;
        v132 = 93;
        v133 = 0xE100000000000000;
        v130 = 0;
        v131 = 0xE000000000000000;
        v58 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v60 = v59;
        swift_bridgeObjectRelease();
        v61 = v117;
        if (*(_QWORD *)(v117 + 16) && (v62 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v60), (v63 & 1) != 0))
        {
          v64 = (uint64_t *)(*(_QWORD *)(v61 + 56) + 16 * v62);
          v65 = *v64;
          v66 = v64[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v67 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v65, v66, v109, v61);
          swift_bridgeObjectRelease();
          v68 = v125;
          if (v67)
          {
            swift_beginAccess();
            v39 = v121;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v69 = v68;
              v70 = (uint64_t)v105;
              UUID.init(uuid:)();
              v40 = v110;
              v36 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v69 + 56);
              v36(v70, 0, 1, v110);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD, _QWORD)))(v69 + 48))(v70, 1, v40) != 1)
              {
                outlined destroy of BodyTrackingComponent?(v70, &demangling cache variable for type metadata for UUID?);
                goto LABEL_42;
              }
            }
            else
            {
              v36 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v68 + 56);
              v70 = (uint64_t)v105;
              v40 = v110;
              v36(v105, 1, 1, v110);
            }
            v97 = (uint64_t)v106;
            outlined destroy of BodyTrackingComponent?(v70, &demangling cache variable for type metadata for UUID?);
            UUID.init()();
            v36(v97, 0, 1, v40);
            Entity.__interactionIdentifier.setter(v97);
LABEL_42:
            v37 = v108;
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_51;
            }
            v107 = v67;
            UUID.init(uuid:)();
            v36(v37, 0, 1, v40);
            v98 = v36;
            v99 = v37;
            v100 = v125;
            v73 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v125 + 48);
            result = v73(v99, 1, v40);
            if ((_DWORD)result == 1)
              goto LABEL_52;
            swift_release();
            v102 = *(void (**)(_QWORD, _QWORD, _QWORD))(v100 + 32);
            v71 = (uint64_t)v118;
            v102(v118, v99, v40);
            v98(v71, 0, 1, v40);
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v71 = (uint64_t)v118;
        v39 = v121;
        v40 = v110;
      }
      else
      {
        v71 = (uint64_t)v118;
      }
      v72 = v125;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v125 + 56))(v71, 1, 1, v40);
      swift_bridgeObjectRelease();
      v73 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v72 + 48);
LABEL_29:
      v74 = v122;
      v75 = v73(v71, 1, v40);
      v76 = v124;
      v77 = v120;
      if (v75 != 1)
      {
        v80 = v38;
        v81 = *(void (**)(_QWORD, _QWORD, _QWORD))(v125 + 32);
        v82 = v119;
        v83 = v71;
        v84 = v125;
        v81(v119, v83, v40);
        (*(void (**)(char *, char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD)))(v84 + 16))(v77, v82, v40);
        v85 = v123;
        v81(v123, v77, v40);
        v86 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        v87 = v85 + v86[5];
        v88 = v85 + v86[6];
        v89 = v86[7];
        v90 = v86[8];
        *(float *)v87 = a9;
        *(_BYTE *)(v87 + 4) = 0;
        *(_DWORD *)v88 = 1065353216;
        *(_BYTE *)(v88 + 4) = 0;
        *(_BYTE *)(v85 + v89) = v76;
        *(_BYTE *)(v85 + v90) = v74;
        swift_storeEnumTagMultiPayload();
        v91 = v116;
        v92 = *v116;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v91 = v92;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v92 + 16) + 1, 1, v92);
          *v116 = v92;
        }
        v95 = *(_QWORD *)(v92 + 16);
        v94 = *(_QWORD *)(v92 + 24);
        v96 = v115;
        v38 = v80;
        if (v95 >= v94 >> 1)
        {
          v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1, v92);
          v96 = v115;
          v92 = v103;
          *v116 = v103;
        }
        v39 = v121;
        *(_QWORD *)(v92 + 16) = v95 + 1;
        outlined init with take of __RKEntityActionSpecification(v123, v92+ ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))+ *(_QWORD *)(v96 + 72) * v95, type metadata accessor for __RKEntityActionSpecification);

        (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD)))(v84 + 8))(v119, v40);
        goto LABEL_10;
      }
      outlined destroy of BodyTrackingComponent?(v71, &demangling cache variable for type metadata for UUID?);
LABEL_31:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v78 = swift_allocObject();
      v79 = (_QWORD *)v78;
      *(_OWORD *)(v78 + 16) = v126;
      if ((_BYTE)v127)
      {
        if (v127 == 1)
        {
          v44 = v112 | 0x8000000000000000;
          v42 = 0xD000000000000012;
          goto LABEL_9;
        }
        v42 = 0xD000000000000013;
        v43 = &v136;
      }
      else
      {
        v42 = 0xD000000000000014;
        v43 = &v137;
      }
      v44 = *(v43 - 32) | 0x8000000000000000;
LABEL_9:
      *(_QWORD *)(v78 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v78 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v79[4] = v42;
      v79[5] = v44;
      v79[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v79[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v79[9] = v48;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v45 = v48;
      v46 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_10:
      if (v39 == ++v41)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_51:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, _QWORD))v36)(v37, 1, 1, v40);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, void (*a6)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a7, unint64_t *a8, __n128 a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, void *);
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void (*v70)(char *, char *, void *);
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t result;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  void (*v91)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  void *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  int v107;
  uint64_t v108;
  __n128 v109;
  unint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v109 = a9;
  v101 = a8;
  v105 = a7;
  v102 = a5;
  v111 = a1;
  v112 = a4;
  v99 = type metadata accessor for __RKEntityActionSpecification(0);
  v100 = *(_QWORD *)(v99 - 8);
  MEMORY[0x24BDAC7A8](v99);
  v104 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v88 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v88 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v88 - v23;
  v25 = (_QWORD *)type metadata accessor for UUID();
  v26 = *(v25 - 1);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2;
  LODWORD(a2) = a3;
  v30 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v111, v29, a3, v112);
  v92 = v28;
  v108 = v26;
  v93 = v24;
  v112 = v25;
  v31 = v22;
  v89 = v16;
  v107 = a2;
  v111 = v30;
  v88 = v19;
  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v30 = v111;
  }
  else
  {
    v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v33 = v102;
  v34 = v92;
  v90 = (uint64_t)v31;
  v35 = (uint64_t)v93;
  if (!v32)
    return swift_bridgeObjectRelease();
  if (v32 >= 1)
  {
    v36 = 0;
    v110 = v30 & 0xC000000000000001;
    v94 = v109.n128_u64[1];
    v95 = v109.n128_u64[0];
    v106 = xmmword_21BE50940;
    v98 = "USD action loading";
    v97 = (unint64_t)"named \"%s\" for node at path: %s";
    v96 = "arReferenceByFullSchemePath";
    v31 = v112;
    v109.n128_u64[0] = v32;
    v91 = a6;
    while (1)
    {
      if (v110)
        v42 = (id)MEMORY[0x220769770](v36, v30);
      else
        v42 = *(id *)(v30 + 8 * v36 + 32);
      v43 = v42;
      v44 = objc_msgSend(v33, sel_objectAtPath_, v42, v88);
      if (!v44)
        goto LABEL_28;
      v45 = v44;
      objc_opt_self();
      v46 = swift_dynamicCastObjCClass();

      if (!v46)
        goto LABEL_28;
      v47 = objc_msgSend(v43, sel_stringValue);
      if (v47)
      {
        v48 = v47;
        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v51 = v50;

        v117 = v49;
        v118 = v51;
        v103 = v51;
        v115 = 91;
        v116 = 0xE100000000000000;
        v113 = 0;
        v114 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v117 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v118 = v52;
        v115 = 93;
        v116 = 0xE100000000000000;
        v113 = 0;
        v114 = 0xE000000000000000;
        v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v55 = v54;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v105 + 16)
          && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v55), v57 = v105, (v58 & 1) != 0))
        {
          v59 = (uint64_t *)(*(_QWORD *)(v105 + 56) + 16 * v56);
          v60 = *v59;
          v61 = v59[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v62 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v60, v61, (uint64_t)v91, v57);
          swift_bridgeObjectRelease();
          if (v62)
          {
            swift_beginAccess();
            v33 = v102;
            v31 = v112;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v63 = v90;
              UUID.init(uuid:)();
              v64 = v108;
              a6 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v108 + 56);
              a6(v63, 0, 1, v31);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v64 + 48))(v63, 1, v31) != 1)
              {
                outlined destroy of BodyTrackingComponent?(v63, &demangling cache variable for type metadata for UUID?);
                v24 = v89;
                goto LABEL_39;
              }
            }
            else
            {
              a6 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v108 + 56);
              v63 = v90;
              a6(v90, 1, 1, v31);
            }
            v24 = v89;
            outlined destroy of BodyTrackingComponent?(v63, &demangling cache variable for type metadata for UUID?);
            v83 = (uint64_t)v88;
            UUID.init()();
            a6(v83, 0, 1, v31);
            Entity.__interactionIdentifier.setter(v83);
LABEL_39:
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_49;
            }
            UUID.init(uuid:)();
            a6(v24, 0, 1, v31);
            v84 = v24;
            v85 = v108;
            v66 = *(uint64_t (**)(char *, uint64_t, void *))(v108 + 48);
            result = v66(v84, 1, v31);
            if ((_DWORD)result == 1)
              goto LABEL_50;
            swift_release();
            v35 = (uint64_t)v93;
            (*(void (**)(void))(v85 + 32))();
            a6(v35, 0, 1, v31);
            swift_bridgeObjectRelease();
            v34 = v92;
            goto LABEL_26;
          }
          v33 = v102;
          v31 = v112;
        }
        else
        {
          swift_bridgeObjectRelease();
          v33 = v102;
          v31 = v112;
        }
      }
      v65 = v108;
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v108 + 56))(v35, 1, 1, v31);
      swift_bridgeObjectRelease();
      v66 = *(uint64_t (**)(char *, uint64_t, void *))(v65 + 48);
LABEL_26:
      if (v66((char *)v35, 1, v31) != 1)
      {
        v69 = v108;
        (*(void (**)(char *, uint64_t, void *))(v108 + 32))(v34, v35, v31);
        v70 = *(void (**)(char *, char *, void *))(v69 + 16);
        v71 = v104;
        v70(v104, v34, v31);
        v72 = type metadata accessor for __RKEntityForceActionArguments(0);
        v73 = &v71[*(int *)(v72 + 20)];
        v74 = &v71[*(int *)(v72 + 24)];
        *(_QWORD *)v73 = 0;
        *((_QWORD *)v73 + 1) = 0;
        v73[16] = 1;
        v75 = v94;
        *(_QWORD *)v74 = v95;
        *((_QWORD *)v74 + 1) = v75;
        v74[16] = 0;
        swift_storeEnumTagMultiPayload();
        v76 = v101;
        v77 = *v101;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v76 = v77;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v77 + 16) + 1, 1, v77);
          *v101 = v77;
        }
        v80 = *(_QWORD *)(v77 + 16);
        v79 = *(_QWORD *)(v77 + 24);
        v81 = v100;
        v82 = (uint64_t)v104;
        if (v80 >= v79 >> 1)
        {
          v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1, v77);
          v81 = v100;
          v77 = v87;
          v82 = (uint64_t)v104;
          *v101 = v77;
        }
        *(_QWORD *)(v77 + 16) = v80 + 1;
        outlined init with take of __RKEntityActionSpecification(v82, v77+ ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80))+ *(_QWORD *)(v81 + 72) * v80, type metadata accessor for __RKEntityActionSpecification);

        v31 = v112;
        (*(void (**)(char *, void *))(v108 + 8))(v34, v112);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v35, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v67 = swift_allocObject();
      v68 = (_QWORD *)v67;
      *(_OWORD *)(v67 + 16) = v106;
      if ((_BYTE)v107)
      {
        if (v107 == 1)
        {
          v39 = v97 | 0x8000000000000000;
          v37 = 0xD000000000000012;
          goto LABEL_8;
        }
        v37 = 0xD000000000000013;
        v38 = &v119;
      }
      else
      {
        v37 = 0xD000000000000014;
        v38 = &v120;
      }
      v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v67 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v67 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v68[4] = v37;
      v68[5] = v39;
      v68[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v68[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v68[9] = v43;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v40 = v43;
      v41 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      v31 = v112;
LABEL_9:
      ++v36;
      v30 = v111;
      if (v109.n128_u64[0] == v36)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_49:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, void *))a6)(v24, 1, 1, v31);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(unint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, float a9, __n128 a10, __n128 a11)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  void (*v33)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  unint64_t v103;
  const char *v104;
  uint64_t v105;
  unint64_t *v106;
  void (*v107)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  __n128 v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v116 = a11;
  v114 = (__int128)a10;
  v106 = a8;
  v112 = a7;
  v98 = a6;
  v108 = a5;
  v117 = a1;
  v118 = a4;
  v111 = type metadata accessor for __RKEntityActionSpecification(0);
  v105 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v93 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v93 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v93 - v26;
  v28 = type metadata accessor for UUID();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v93 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v117, a2, a3, v118);
  v97 = v31;
  v113 = v29;
  v109 = v27;
  v33 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v15;
  v94 = v22;
  v96 = v19;
  v115 = a3;
  v118 = (void *)v32;
  v95 = v25;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v32 = (unint64_t)v118;
  }
  else
  {
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v35 = v108;
  v36 = v97;
  if (!v34)
    return swift_bridgeObjectRelease();
  if (v34 >= 1)
  {
    v37 = 0;
    v117 = v32 & 0xC000000000000001;
    v100 = *((_QWORD *)&v114 + 1);
    v101 = v114;
    v99 = v116;
    v114 = xmmword_21BE50940;
    v104 = "USD action loading";
    v103 = (unint64_t)"named \"%s\" for node at path: %s";
    v102 = "arReferenceByFullSchemePath";
    v107 = v33;
    v116.n128_u64[0] = v34;
    while (1)
    {
      if (v117)
        v43 = (id)MEMORY[0x220769770](v37, v32);
      else
        v43 = *(id *)(v32 + 8 * v37 + 32);
      v44 = v43;
      v45 = objc_msgSend(v35, sel_objectAtPath_, v43);
      if (!v45)
        goto LABEL_28;
      v46 = v45;
      objc_opt_self();
      v47 = swift_dynamicCastObjCClass();

      if (!v47)
        goto LABEL_28;
      v48 = objc_msgSend(v44, sel_stringValue);
      if (v48)
      {
        v49 = v48;
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v52 = v51;

        v123 = v50;
        v124 = v52;
        v110 = v52;
        v121 = 91;
        v122 = 0xE100000000000000;
        v119 = 0;
        v120 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v123 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v124 = v53;
        v121 = 93;
        v122 = 0xE100000000000000;
        v119 = 0;
        v120 = 0xE000000000000000;
        v54 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v56 = v55;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v112 + 16)
          && (v57 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v56), v58 = v112, (v59 & 1) != 0))
        {
          v60 = (uint64_t *)(*(_QWORD *)(v112 + 56) + 16 * v57);
          v61 = *v60;
          v62 = v60[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v63 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v61, v62, v98, v58);
          swift_bridgeObjectRelease();
          if (v63)
          {
            swift_beginAccess();
            v35 = v108;
            v19 = v96;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v64 = (uint64_t)v95;
              UUID.init(uuid:)();
              v65 = v113;
              v33 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v113 + 56);
              v33(v64, 0, 1, v28);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v64, 1, v28) != 1)
              {
                outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
                goto LABEL_39;
              }
            }
            else
            {
              v33 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v113 + 56);
              v64 = (uint64_t)v95;
              v33(v95, 1, 1, v28);
            }
            v88 = (uint64_t)v94;
            outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
            UUID.init()();
            v33(v88, 0, 1, v28);
            Entity.__interactionIdentifier.setter(v88);
LABEL_39:
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_49;
            }
            UUID.init(uuid:)();
            v33(v19, 0, 1, v28);
            v89 = v19;
            v90 = v113;
            v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v113 + 48);
            result = v68(v89, 1, v28);
            if ((_DWORD)result == 1)
              goto LABEL_50;
            swift_release();
            v67 = (uint64_t)v109;
            (*(void (**)(void))(v90 + 32))();
            v33(v67, 0, 1, v28);
            swift_bridgeObjectRelease();
            v36 = v97;
            goto LABEL_26;
          }
          v35 = v108;
        }
        else
        {
          swift_bridgeObjectRelease();
          v35 = v108;
        }
      }
      v66 = v113;
      v67 = (uint64_t)v109;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56))(v109, 1, 1, v28);
      swift_bridgeObjectRelease();
      v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
LABEL_26:
      if (v68((char *)v67, 1, v28) != 1)
      {
        v71 = v113;
        (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v36, v67, v28);
        v72 = (uint64_t)v107;
        (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD, _QWORD), char *, uint64_t))(v71 + 16))(v107, v36, v28);
        v73 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        v74 = v72 + v73[5];
        v75 = v72 + v73[6];
        v76 = v72 + v73[7];
        v77 = v72 + v73[8];
        v78 = v73[10];
        v79 = v72 + v73[9];
        *(float *)v74 = a9;
        *(_BYTE *)(v74 + 4) = 0;
        *(_DWORD *)v75 = 0;
        *(_BYTE *)(v75 + 4) = 0;
        v80 = v100;
        *(_QWORD *)v76 = v101;
        *(_QWORD *)(v76 + 8) = v80;
        *(_BYTE *)(v76 + 16) = 0;
        *(_DWORD *)v77 = 0;
        *(_BYTE *)(v77 + 4) = 0;
        v81 = v99.n128_u64[1];
        *(_QWORD *)v79 = v99.n128_u64[0];
        *(_QWORD *)(v79 + 8) = v81;
        *(_BYTE *)(v79 + 16) = 0;
        *(_BYTE *)(v72 + v78) = 0;
        swift_storeEnumTagMultiPayload();
        v82 = v106;
        v83 = *v106;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v82 = v83;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v83 + 16) + 1, 1, v83);
          *v106 = v83;
        }
        v86 = *(_QWORD *)(v83 + 16);
        v85 = *(_QWORD *)(v83 + 24);
        v87 = v105;
        if (v86 >= v85 >> 1)
        {
          v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, v83);
          v87 = v105;
          v83 = v92;
          *v106 = v92;
        }
        *(_QWORD *)(v83 + 16) = v86 + 1;
        outlined init with take of __RKEntityActionSpecification((uint64_t)v107, v83+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(_QWORD *)(v87 + 72) * v86, type metadata accessor for __RKEntityActionSpecification);

        (*(void (**)(char *, uint64_t))(v71 + 8))(v36, v28);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v67, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v69 = swift_allocObject();
      v70 = (_QWORD *)v69;
      *(_OWORD *)(v69 + 16) = v114;
      if ((_BYTE)v115)
      {
        if (v115 == 1)
        {
          v40 = v103 | 0x8000000000000000;
          v38 = 0xD000000000000012;
          goto LABEL_8;
        }
        v38 = 0xD000000000000013;
        v39 = &v125;
      }
      else
      {
        v38 = 0xD000000000000014;
        v39 = &v126;
      }
      v40 = *(v39 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v69 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v69 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v70[4] = v38;
      v70[5] = v40;
      v70[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v70[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v70[9] = v44;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v41 = v44;
      v42 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_9:
      ++v37;
      v32 = (unint64_t)v118;
      if (v116.n128_u64[0] == v37)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_49:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v33)(v19, 1, 1, v28);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, char *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v72;
  uint64_t result;
  _QWORD v74[2];
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  const char *v81;
  unint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v86 = a8;
  v87 = a7;
  v78 = a6;
  v88 = a5;
  v94 = a4;
  v85 = a10;
  v84 = a9;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v74 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)v74 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v74 - v23;
  v25 = type metadata accessor for UUID();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1;
  v30 = 0;
  v31 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v29, a2, (char)a3, v94);
  v32 = v25;
  v79 = v28;
  v75 = v22;
  v77 = v19;
  v76 = v16;
  v92 = (int)a3;
  v94 = (void *)v31;
  v89 = v24;
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v31 = (unint64_t)v94;
    if (v33)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v33)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v33 >= 1)
  {
    v34 = v26;
    v35 = 0;
    v93 = v31 & 0xC000000000000001;
    v91 = xmmword_21BE50940;
    v83 = "USD action loading";
    v82 = (unint64_t)"named \"%s\" for node at path: %s";
    v81 = "arReferenceByFullSchemePath";
    v36 = v88;
    v80 = v25;
    while (1)
    {
      if (v93)
        v42 = (id)MEMORY[0x220769770](v35, v31);
      else
        v42 = *(id *)(v31 + 8 * v35 + 32);
      v43 = v42;
      v44 = objc_msgSend(v36, sel_objectAtPath_, v42);
      if (!v44)
        goto LABEL_28;
      v45 = v44;
      objc_opt_self();
      v46 = swift_dynamicCastObjCClass();

      if (!v46)
        goto LABEL_28;
      v47 = objc_msgSend(v43, sel_stringValue);
      if (v47)
      {
        v48 = v47;
        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v51 = v50;

        v99 = v49;
        v100 = v51;
        v90 = v51;
        v97 = 91;
        v98 = 0xE100000000000000;
        v95 = 0;
        v96 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v99 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v100 = v52;
        v97 = 93;
        v98 = 0xE100000000000000;
        v95 = 0;
        v96 = 0xE000000000000000;
        v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v55 = v54;
        swift_bridgeObjectRelease();
        v56 = v87;
        if (*(_QWORD *)(v87 + 16) && (v57 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v55), (v58 & 1) != 0))
        {
          v59 = (uint64_t *)(*(_QWORD *)(v56 + 56) + 16 * v57);
          v61 = *v59;
          v60 = v59[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v62 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v61, v60, v78, v56);
          swift_bridgeObjectRelease();
          if (v62)
          {
            swift_beginAccess();
            v36 = v88;
            v63 = (uint64_t)v77;
            v32 = v80;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v74[1] = v62;
              v64 = (uint64_t)v75;
              UUID.init(uuid:)();
              v30 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56);
              v30(v64, 0, 1, v32);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v64, 1, v32) == 1)
              {
LABEL_34:
                outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
                UUID.init()();
                v30(v63, 0, 1, v32);
                Entity.__interactionIdentifier.setter(v63);
                a3 = v76;
              }
              else
              {
                outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
                a3 = v76;
              }
              if (!static __RKEntityUUIDComponent.registration
                || !REEntityGetCustomComponent()
                || !RECustomComponentGetObject())
              {
                goto LABEL_46;
              }
              UUID.init(uuid:)();
              v30((uint64_t)a3, 0, 1, v32);
              v71 = v30;
              v72 = a3;
              v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
              result = v66(v72, 1, v32);
              if ((_DWORD)result == 1)
                goto LABEL_47;
              swift_release();
              v65 = (uint64_t)v89;
              (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v89, v72, v32);
              v71(v65, 0, 1, v32);
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
            v30 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56);
            v64 = (uint64_t)v75;
            v30((uint64_t)v75, 1, 1, v32);
            goto LABEL_34;
          }
          v36 = v88;
        }
        else
        {
          swift_bridgeObjectRelease();
          v36 = v88;
        }
        v32 = v80;
      }
      v65 = (uint64_t)v89;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v89, 1, 1, v32);
      swift_bridgeObjectRelease();
      v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
LABEL_26:
      if (v66((char *)v65, 1, v32) != 1)
      {
        v69 = v65;
        v70 = (uint64_t)v79;
        (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v79, v69, v32);
        closure #1 in static __RKEntityActionSpecification.generateNotificationActionSpecifications(decodeContext:)(v70, v86, v84, v85);

        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v70, v32);
        goto LABEL_8;
      }
      outlined destroy of BodyTrackingComponent?(v65, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v67 = swift_allocObject();
      v68 = (_QWORD *)v67;
      *(_OWORD *)(v67 + 16) = v91;
      if ((_BYTE)v92)
      {
        if (v92 == 1)
        {
          v39 = v82 | 0x8000000000000000;
          v37 = 0xD000000000000012;
          goto LABEL_7;
        }
        v37 = 0xD000000000000013;
        v38 = &v101;
      }
      else
      {
        v37 = 0xD000000000000014;
        v38 = &v102;
      }
      v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_7:
      *(_QWORD *)(v67 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v67 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v68[4] = v37;
      v68[5] = v39;
      v68[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v68[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v68[9] = v43;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v40 = v43;
      v41 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_8:
      ++v35;
      v31 = (unint64_t)v94;
      if (v33 == v35)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_46:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v30)(a3, 1, 1, v32);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, char *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, float a9, float a10, __n128 a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v74;
  uint64_t result;
  _QWORD v76[2];
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  const char *v83;
  unint64_t v84;
  const char *v85;
  unint64_t *v86;
  __n128 v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v87 = a11;
  v86 = a8;
  v88 = a7;
  v80 = a6;
  v89 = a5;
  v95 = a4;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)v76 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v76 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v76 - v26;
  v28 = type metadata accessor for UUID();
  v29 = *(_QWORD **)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v76 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, (char)a3, v95);
  v33 = v29;
  v81 = v31;
  v77 = v25;
  v79 = v22;
  v78 = v19;
  v93 = (int)a3;
  v95 = (void *)v32;
  v90 = v27;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v32 = (unint64_t)v95;
  }
  else
  {
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v35 = v89;
  v36 = v28;
  if (!v34)
    return swift_bridgeObjectRelease();
  if (v34 >= 1)
  {
    v37 = v33;
    v38 = 0;
    v94 = v32 & 0xC000000000000001;
    v92 = xmmword_21BE50940;
    v85 = "USD action loading";
    v84 = (unint64_t)"named \"%s\" for node at path: %s";
    v83 = "arReferenceByFullSchemePath";
    v82 = v28;
    while (1)
    {
      if (v94)
        v44 = (id)MEMORY[0x220769770](v38, v32);
      else
        v44 = *(id *)(v32 + 8 * v38 + 32);
      v45 = v44;
      v46 = objc_msgSend(v35, sel_objectAtPath_, v44);
      if (!v46)
        goto LABEL_29;
      v47 = v46;
      objc_opt_self();
      v48 = swift_dynamicCastObjCClass();

      if (!v48)
        goto LABEL_29;
      v49 = objc_msgSend(v45, sel_stringValue);
      if (v49)
      {
        v50 = v49;
        v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v53 = v52;

        v100 = v51;
        v101 = v53;
        v91 = v53;
        v98 = 91;
        v99 = 0xE100000000000000;
        v96 = 0;
        v97 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v100 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v101 = v54;
        v98 = 93;
        v99 = 0xE100000000000000;
        v96 = 0;
        v97 = 0xE000000000000000;
        v55 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v57 = v56;
        swift_bridgeObjectRelease();
        v58 = v88;
        if (*(_QWORD *)(v88 + 16) && (v59 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v57), (v60 & 1) != 0))
        {
          v61 = (uint64_t *)(*(_QWORD *)(v58 + 56) + 16 * v59);
          v63 = *v61;
          v62 = v61[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v64 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v63, v62, v80, v58);
          swift_bridgeObjectRelease();
          if (v64)
          {
            swift_beginAccess();
            v35 = v89;
            v65 = (uint64_t)v79;
            v36 = v82;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v76[1] = v64;
              v66 = (uint64_t)v77;
              UUID.init(uuid:)();
              v33 = (_QWORD *)v37[7];
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v33)(v66, 0, 1, v36);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v37[6])(v66, 1, v36) == 1)
              {
LABEL_35:
                outlined destroy of BodyTrackingComponent?(v66, &demangling cache variable for type metadata for UUID?);
                UUID.init()();
                ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v33)(v65, 0, 1, v36);
                Entity.__interactionIdentifier.setter(v65);
                a3 = v78;
              }
              else
              {
                outlined destroy of BodyTrackingComponent?(v66, &demangling cache variable for type metadata for UUID?);
                a3 = v78;
              }
              if (!static __RKEntityUUIDComponent.registration
                || !REEntityGetCustomComponent()
                || !RECustomComponentGetObject())
              {
                goto LABEL_47;
              }
              UUID.init(uuid:)();
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v33)(a3, 0, 1, v36);
              v73 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v33;
              v74 = a3;
              v68 = (uint64_t (*)(char *, uint64_t, uint64_t))v37[6];
              result = v68(v74, 1, v36);
              if ((_DWORD)result == 1)
                goto LABEL_48;
              swift_release();
              v67 = (uint64_t)v90;
              ((void (*)(char *, char *, uint64_t))v37[4])(v90, v74, v36);
              v73(v67, 0, 1, v36);
              swift_bridgeObjectRelease();
              goto LABEL_27;
            }
            v33 = (_QWORD *)v37[7];
            v66 = (uint64_t)v77;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v33)(v77, 1, 1, v36);
            goto LABEL_35;
          }
          v35 = v89;
        }
        else
        {
          swift_bridgeObjectRelease();
          v35 = v89;
        }
        v36 = v82;
      }
      v67 = (uint64_t)v90;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v37[7])(v90, 1, 1, v36);
      swift_bridgeObjectRelease();
      v68 = (uint64_t (*)(char *, uint64_t, uint64_t))v37[6];
LABEL_27:
      if (v68((char *)v67, 1, v36) != 1)
      {
        v71 = v67;
        v72 = (uint64_t)v81;
        ((void (*)(char *, uint64_t, uint64_t))v37[4])(v81, v71, v36);
        closure #1 in static __RKEntityActionSpecification.generateSpinActionSpecifications(decodeContext:)(v72, v86, a9, a10, v87);

        ((void (*)(uint64_t, uint64_t))v37[1])(v72, v36);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v67, &demangling cache variable for type metadata for UUID?);
LABEL_29:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v69 = swift_allocObject();
      v70 = (_QWORD *)v69;
      *(_OWORD *)(v69 + 16) = v92;
      if ((_BYTE)v93)
      {
        if (v93 == 1)
        {
          v41 = v84 | 0x8000000000000000;
          v39 = 0xD000000000000012;
          goto LABEL_8;
        }
        v39 = 0xD000000000000013;
        v40 = &v102;
      }
      else
      {
        v39 = 0xD000000000000014;
        v40 = &v103;
      }
      v41 = *(v40 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v69 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v69 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v70[4] = v39;
      v70[5] = v41;
      v70[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v70[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v70[9] = v45;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v42 = v45;
      v43 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_9:
      ++v38;
      v32 = (unint64_t)v95;
      if (v34 == v38)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_47:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v33)(a3, 1, 1, v36);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, double a9, double a10, float a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v78;
  uint64_t result;
  _QWORD v80[2];
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  int v86;
  char *v87;
  uint64_t v88;
  const char *v89;
  unint64_t v90;
  const char *v91;
  int v92;
  unint64_t *v93;
  uint64_t v94;
  void *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v93 = a8;
  v94 = a7;
  v84 = a6;
  v95 = a5;
  v101 = a4;
  LODWORD(v97) = a14;
  v86 = a13;
  v92 = a12;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)v80 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)v80 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)v80 - v30;
  v32 = type metadata accessor for UUID();
  v33 = *(_QWORD **)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, v101);
  v37 = v33;
  v87 = v35;
  v81 = v29;
  v83 = v26;
  v82 = v23;
  v99 = a3;
  v101 = (void *)v36;
  v96 = v31;
  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v36 = (unint64_t)v101;
  }
  else
  {
    v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v39 = v95;
  v40 = v32;
  if (!v38)
    return swift_bridgeObjectRelease();
  if (v38 >= 1)
  {
    v41 = v37;
    v42 = 0;
    v100 = v36 & 0xC000000000000001;
    v98 = xmmword_21BE50940;
    v91 = "USD action loading";
    v90 = (unint64_t)"named \"%s\" for node at path: %s";
    v89 = "arReferenceByFullSchemePath";
    LOBYTE(v86) = v86 & 1;
    v86 = v86;
    v85 = v97 & 1;
    v88 = v32;
    while (1)
    {
      if (v100)
        v48 = (id)MEMORY[0x220769770](v42, v36);
      else
        v48 = *(id *)(v36 + 8 * v42 + 32);
      v49 = v48;
      v50 = objc_msgSend(v39, sel_objectAtPath_, v48);
      if (!v50)
        goto LABEL_29;
      v51 = v50;
      objc_opt_self();
      v52 = swift_dynamicCastObjCClass();

      if (!v52)
        goto LABEL_29;
      v53 = objc_msgSend(v49, sel_stringValue);
      if (v53)
      {
        v54 = v53;
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v57 = v56;

        v106 = v55;
        v107 = v57;
        v97 = v57;
        v104 = 91;
        v105 = 0xE100000000000000;
        v102 = 0;
        v103 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v106 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v107 = v58;
        v104 = 93;
        v105 = 0xE100000000000000;
        v102 = 0;
        v103 = 0xE000000000000000;
        v59 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v61 = v60;
        swift_bridgeObjectRelease();
        v62 = v94;
        if (*(_QWORD *)(v94 + 16) && (v63 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v61), (v64 & 1) != 0))
        {
          v65 = (uint64_t *)(*(_QWORD *)(v62 + 56) + 16 * v63);
          v67 = *v65;
          v66 = v65[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v68 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v67, v66, v84, v62);
          swift_bridgeObjectRelease();
          if (v68)
          {
            swift_beginAccess();
            v39 = v95;
            v69 = (uint64_t)v83;
            v40 = v88;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v80[1] = v68;
              v70 = (uint64_t)v81;
              UUID.init(uuid:)();
              v37 = (_QWORD *)v41[7];
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v37)(v70, 0, 1, v40);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v41[6])(v70, 1, v40) == 1)
              {
LABEL_35:
                outlined destroy of BodyTrackingComponent?(v70, &demangling cache variable for type metadata for UUID?);
                UUID.init()();
                ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v37)(v69, 0, 1, v40);
                Entity.__interactionIdentifier.setter(v69);
                v26 = v82;
              }
              else
              {
                outlined destroy of BodyTrackingComponent?(v70, &demangling cache variable for type metadata for UUID?);
                v26 = v82;
              }
              if (!static __RKEntityUUIDComponent.registration
                || !REEntityGetCustomComponent()
                || !RECustomComponentGetObject())
              {
                goto LABEL_47;
              }
              UUID.init(uuid:)();
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v37)(v26, 0, 1, v40);
              v77 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v37;
              v78 = v26;
              v72 = (uint64_t (*)(char *, uint64_t, uint64_t))v41[6];
              result = v72(v78, 1, v40);
              if ((_DWORD)result == 1)
                goto LABEL_48;
              swift_release();
              v71 = (uint64_t)v96;
              ((void (*)(char *, char *, uint64_t))v41[4])(v96, v78, v40);
              v77(v71, 0, 1, v40);
              swift_bridgeObjectRelease();
              goto LABEL_27;
            }
            v37 = (_QWORD *)v41[7];
            v70 = (uint64_t)v81;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v37)(v81, 1, 1, v40);
            goto LABEL_35;
          }
          v39 = v95;
        }
        else
        {
          swift_bridgeObjectRelease();
          v39 = v95;
        }
        v40 = v88;
      }
      v71 = (uint64_t)v96;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v41[7])(v96, 1, 1, v40);
      swift_bridgeObjectRelease();
      v72 = (uint64_t (*)(char *, uint64_t, uint64_t))v41[6];
LABEL_27:
      if (v72((char *)v71, 1, v40) != 1)
      {
        v75 = v71;
        v76 = (uint64_t)v87;
        ((void (*)(char *, uint64_t, uint64_t))v41[4])(v87, v75, v40);
        closure #1 in static __RKEntityActionSpecification.generateStartAnimationActionSpecifications(decodeContext:)(v76, v93, v92, v86, v85, a9, a10, a11);

        ((void (*)(uint64_t, uint64_t))v41[1])(v76, v40);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v71, &demangling cache variable for type metadata for UUID?);
LABEL_29:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v73 = swift_allocObject();
      v74 = (_QWORD *)v73;
      *(_OWORD *)(v73 + 16) = v98;
      if ((_BYTE)v99)
      {
        if (v99 == 1)
        {
          v45 = v90 | 0x8000000000000000;
          v43 = 0xD000000000000012;
          goto LABEL_8;
        }
        v43 = 0xD000000000000013;
        v44 = &v108;
      }
      else
      {
        v43 = 0xD000000000000014;
        v44 = &v109;
      }
      v45 = *(v44 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v73 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v73 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v74[4] = v43;
      v74[5] = v45;
      v74[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v74[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v74[9] = v49;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v46 = v49;
      v47 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_9:
      ++v42;
      v36 = (unint64_t)v101;
      if (v38 == v42)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_47:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v37)(v26, 1, 1, v40);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, __n128 a9, __n128 a10, __n128 a11, float a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void *, uint64_t, uint64_t);
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t result;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  char *v86;
  const char *v87;
  unint64_t v88;
  const char *v89;
  int v90;
  int v91;
  uint64_t v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  unint64_t *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;

  v96 = a8;
  v99 = a7;
  v97 = a5;
  v105 = a4;
  v95 = a11;
  v94 = a10;
  v93 = a9;
  v104 = a2;
  v92 = a16;
  v91 = a15;
  v90 = a14;
  LODWORD(v103) = a13;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v80 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v80 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v80 - v30;
  v32 = type metadata accessor for UUID();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, v104, a3, v105);
  v86 = v35;
  v37 = v32;
  v105 = v31;
  v82 = v29;
  v83 = v26;
  v81 = v23;
  v102 = a3;
  v104 = v36;
  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v36 = v104;
  }
  else
  {
    v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v39 = v97;
  v40 = v105;
  v41 = v37;
  if (!v38)
    return swift_bridgeObjectRelease();
  v100 = v33;
  if (v38 >= 1)
  {
    v42 = 0;
    v85 = v103 & 1;
    v103 = v36 & 0xC000000000000001;
    v101 = xmmword_21BE50940;
    v89 = "USD action loading";
    v88 = (unint64_t)"named \"%s\" for node at path: %s";
    v87 = "arReferenceByFullSchemePath";
    v84 = a6;
    while (1)
    {
      if (v103)
        v48 = (id)MEMORY[0x220769770](v42, v36);
      else
        v48 = *(id *)(v36 + 8 * v42 + 32);
      v49 = v48;
      v50 = objc_msgSend(v39, sel_objectAtPath_, v48);
      if (!v50)
        goto LABEL_28;
      v51 = v50;
      objc_opt_self();
      v52 = swift_dynamicCastObjCClass();

      if (!v52)
        goto LABEL_28;
      v53 = objc_msgSend(v49, sel_stringValue);
      if (v53)
      {
        v54 = v53;
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v57 = v56;

        v110 = v55;
        v111 = v57;
        v98 = v57;
        v108 = 91;
        v109 = 0xE100000000000000;
        v106 = 0;
        v107 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v110 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v111 = v58;
        v108 = 93;
        v109 = 0xE100000000000000;
        v106 = 0;
        v107 = 0xE000000000000000;
        v59 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v61 = v60;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v99 + 16)
          && (v62 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v61), v63 = v99, (v64 & 1) != 0))
        {
          v65 = (uint64_t *)(*(_QWORD *)(v99 + 56) + 16 * v62);
          v66 = *v65;
          v67 = v65[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v68 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v66, v67, v84, v63);
          swift_bridgeObjectRelease();
          if (v68)
          {
            swift_beginAccess();
            v39 = v97;
            v69 = (uint64_t)v83;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v70 = (uint64_t)v82;
              UUID.init(uuid:)();
              v71 = v100;
              v26 = *(char **)(v100 + 56);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v26)(v70, 0, 1, v41);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v41) == 1)
              {
                v40 = v81;
                v69 = (uint64_t)v83;
                goto LABEL_34;
              }
              outlined destroy of BodyTrackingComponent?(v70, &demangling cache variable for type metadata for UUID?);
              v40 = v81;
            }
            else
            {
              v26 = *(char **)(v100 + 56);
              v70 = (uint64_t)v82;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v26)(v82, 1, 1, v41);
              v40 = v81;
LABEL_34:
              outlined destroy of BodyTrackingComponent?(v70, &demangling cache variable for type metadata for UUID?);
              UUID.init()();
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v26)(v69, 0, 1, v41);
              Entity.__interactionIdentifier.setter(v69);
            }
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_46;
            }
            UUID.init(uuid:)();
            ((void (*)(void *, _QWORD, uint64_t, uint64_t))v26)(v40, 0, 1, v41);
            v78 = v100;
            v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v100 + 48);
            result = v73(v40, 1, v41);
            if ((_DWORD)result == 1)
              goto LABEL_47;
            swift_release();
            v40 = v105;
            (*(void (**)(void))(v78 + 32))();
            ((void (*)(void *, _QWORD, uint64_t, uint64_t))v26)(v40, 0, 1, v41);
            swift_bridgeObjectRelease();
            goto LABEL_26;
          }
          v39 = v97;
          v40 = v105;
        }
        else
        {
          swift_bridgeObjectRelease();
          v39 = v97;
          v40 = v105;
        }
      }
      v72 = v100;
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v100 + 56))(v40, 1, 1, v41);
      swift_bridgeObjectRelease();
      v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v72 + 48);
LABEL_26:
      if (v73(v40, 1, v41) != 1)
      {
        v76 = v100;
        v77 = (uint64_t)v86;
        (*(void (**)(char *, void *, uint64_t))(v100 + 32))(v86, v40, v41);
        closure #1 in static __RKEntityActionSpecification.generateTransformActionSpecifications(decodeContext:)(v77, v96, v85, v90, v91, v92, v93, v94, v95, a12);

        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v41);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v40, &demangling cache variable for type metadata for UUID?);
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v74 = swift_allocObject();
      v75 = (_QWORD *)v74;
      *(_OWORD *)(v74 + 16) = v101;
      if ((_BYTE)v102)
      {
        if (v102 == 1)
        {
          v45 = v88 | 0x8000000000000000;
          v43 = 0xD000000000000012;
          goto LABEL_8;
        }
        v43 = 0xD000000000000013;
        v44 = &v111;
      }
      else
      {
        v43 = 0xD000000000000014;
        v44 = (uint64_t *)&v112;
      }
      v45 = *(v44 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v74 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v74 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v75[4] = v43;
      v75[5] = v45;
      v75[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v75[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v75[9] = v49;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v46 = v49;
      v47 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      v40 = v105;
LABEL_9:
      ++v42;
      v36 = v104;
      if (v38 == v42)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_46:
  result = ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v26)(v40, 1, 1, v41);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t a11, void **a12, unint64_t *a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v79;
  uint64_t result;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  unint64_t v89;
  const char *v90;
  uint64_t v91;
  void **v92;
  unint64_t *v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v97 = a8;
  v98 = a7;
  v85 = a6;
  v99 = a5;
  v105 = a4;
  v96 = a16;
  v95 = a15;
  v94 = a14;
  v93 = a13;
  v92 = a12;
  v91 = a11;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v81 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v81 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v81 - v31;
  v33 = type metadata accessor for UUID();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v81 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a2;
  v38 = 0;
  v39 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, v37, a3, v105);
  v86 = v36;
  v82 = v30;
  v84 = v27;
  v83 = v24;
  v103 = a3;
  v105 = (void *)v39;
  v100 = v32;
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v39 = (unint64_t)v105;
  }
  else
  {
    v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v41 = v99;
  v42 = v34;
  if (!v40)
    return swift_bridgeObjectRelease();
  if (v40 >= 1)
  {
    v43 = 0;
    v104 = v39 & 0xC000000000000001;
    v102 = xmmword_21BE50940;
    v90 = "USD action loading";
    v89 = (unint64_t)"named \"%s\" for node at path: %s";
    v88 = "arReferenceByFullSchemePath";
    v87 = v33;
    while (1)
    {
      if (v104)
        v49 = (id)MEMORY[0x220769770](v43, v39);
      else
        v49 = *(id *)(v39 + 8 * v43 + 32);
      v50 = v49;
      v51 = objc_msgSend(v41, sel_objectAtPath_, v49);
      if (!v51)
        goto LABEL_29;
      v52 = v51;
      objc_opt_self();
      v53 = swift_dynamicCastObjCClass();

      if (!v53)
        goto LABEL_29;
      v54 = objc_msgSend(v50, sel_stringValue);
      if (v54)
      {
        v55 = v54;
        v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v58 = v57;

        v110 = v56;
        v111 = v58;
        v101 = v58;
        v108 = 91;
        v109 = 0xE100000000000000;
        v106 = 0;
        v107 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v110 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v111 = v59;
        v108 = 93;
        v109 = 0xE100000000000000;
        v106 = 0;
        v107 = 0xE000000000000000;
        v60 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v62 = v61;
        swift_bridgeObjectRelease();
        v63 = v98;
        if (*(_QWORD *)(v98 + 16) && (v64 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v62), (v65 & 1) != 0))
        {
          v66 = (uint64_t *)(*(_QWORD *)(v63 + 56) + 16 * v64);
          v68 = *v66;
          v67 = v66[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v69 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v68, v67, v85, v63);
          swift_bridgeObjectRelease();
          if (v69)
          {
            swift_beginAccess();
            v41 = v99;
            v70 = (uint64_t)v84;
            v33 = v87;
            if (static __RKEntityUUIDComponent.registration
              && REEntityGetCustomComponent()
              && RECustomComponentGetObject())
            {
              v81 = v69;
              v71 = (uint64_t)v82;
              UUID.init(uuid:)();
              v38 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56);
              v38(v71, 0, 1, v33);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v71, 1, v33) == 1)
              {
LABEL_35:
                outlined destroy of BodyTrackingComponent?(v71, &demangling cache variable for type metadata for UUID?);
                UUID.init()();
                v38(v70, 0, 1, v33);
                Entity.__interactionIdentifier.setter(v70);
                v24 = v83;
              }
              else
              {
                outlined destroy of BodyTrackingComponent?(v71, &demangling cache variable for type metadata for UUID?);
                v24 = v83;
              }
              if (!static __RKEntityUUIDComponent.registration
                || !REEntityGetCustomComponent()
                || !RECustomComponentGetObject())
              {
                goto LABEL_47;
              }
              UUID.init(uuid:)();
              v38((uint64_t)v24, 0, 1, v33);
              v78 = v38;
              v79 = v24;
              v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
              result = v73(v79, 1, v33);
              if ((_DWORD)result == 1)
                goto LABEL_48;
              swift_release();
              v72 = (uint64_t)v100;
              (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v100, v79, v33);
              v78(v72, 0, 1, v33);
              swift_bridgeObjectRelease();
              goto LABEL_27;
            }
            v38 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56);
            v71 = (uint64_t)v82;
            v38((uint64_t)v82, 1, 1, v33);
            goto LABEL_35;
          }
          v41 = v99;
        }
        else
        {
          swift_bridgeObjectRelease();
          v41 = v99;
        }
        v33 = v87;
      }
      v72 = (uint64_t)v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v100, 1, 1, v33);
      swift_bridgeObjectRelease();
      v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
LABEL_27:
      if (v73((char *)v72, 1, v33) != 1)
      {
        v76 = v72;
        v77 = (uint64_t)v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v86, v76, v33);
        closure #1 in static __RKEntityActionSpecification.generateVisibilityActionSpecifications(decodeContext:)(v77, v97, v91, v92, v93, v94, v95, v96, a9, a10);

        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v77, v33);
        goto LABEL_9;
      }
      outlined destroy of BodyTrackingComponent?(v72, &demangling cache variable for type metadata for UUID?);
LABEL_29:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v74 = swift_allocObject();
      v75 = (_QWORD *)v74;
      *(_OWORD *)(v74 + 16) = v102;
      if ((_BYTE)v103)
      {
        if (v103 == 1)
        {
          v46 = v89 | 0x8000000000000000;
          v44 = 0xD000000000000012;
          goto LABEL_8;
        }
        v44 = 0xD000000000000013;
        v45 = &v112;
      }
      else
      {
        v44 = 0xD000000000000014;
        v45 = &v113;
      }
      v46 = *(v45 - 32) | 0x8000000000000000;
LABEL_8:
      *(_QWORD *)(v74 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v74 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v75[4] = v44;
      v75[5] = v46;
      v75[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v75[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v75[9] = v50;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v47 = v50;
      v48 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_9:
      ++v43;
      v39 = (unint64_t)v105;
      if (v40 == v43)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_47:
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v38)(v24, 1, 1, v33);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t destroy for USDDecodableContext(id *a1)
{

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for USDDecodableContext(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  v7 = v3;
  v8 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for USDDecodableContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for USDDecodableContext(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  swift_release();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for USDDecodableContext()
{
  return &type metadata for USDDecodableContext;
}

uint64_t static SpatialTrackingManager.shared.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static SpatialTrackingManager.shared.setter(void *a1)
{
  swift_beginAccess();
  static SpatialTrackingManager.shared = a1;
  return swift_release();
}

uint64_t (*static SpatialTrackingManager.shared.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path getter for SpatialTrackingManager.rfConfigureCallback : SpatialTrackingManager@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for SpatialTrackingManager.rfConfigureCallback : SpatialTrackingManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v7 + 32) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t SpatialTrackingManager.rfConfigureCallback.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t SpatialTrackingManager.rfConfigureCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

id SpatialTrackingManager.rfServiceManager.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

uint64_t key path setter for SpatialTrackingManager.currentAnchorCapabilities : SpatialTrackingManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t SpatialTrackingManager.currentAnchorCapabilities.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingManager.currentAnchorCapabilities.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for SpatialTrackingManager.currentConfiguration : SpatialTrackingManager@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(v3 + 72);
  return outlined copy of SpatialTrackingSession.Configuration?(v4);
}

uint64_t key path setter for SpatialTrackingManager.currentConfiguration : SpatialTrackingManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  v6 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v2;
  *(_QWORD *)(v4 + 64) = v3;
  *(_BYTE *)(v4 + 72) = v5;
  outlined copy of SpatialTrackingSession.Configuration?(v2);
  return outlined consume of SpatialTrackingSession.Configuration?(v6);
}

uint64_t SpatialTrackingManager.currentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v1 + 72);
  return outlined copy of SpatialTrackingSession.Configuration?(v3);
}

uint64_t outlined copy of SpatialTrackingSession.Configuration?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t SpatialTrackingManager.currentConfiguration.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v3;
  *(_BYTE *)(v1 + 72) = v4;
  return outlined consume of SpatialTrackingSession.Configuration?(v5);
}

uint64_t outlined consume of SpatialTrackingSession.Configuration?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SpatialTrackingManager.arkitRunnable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of __REAssetService(v1 + 80, a1);
}

uint64_t SpatialTrackingManager.isRunningUserSession.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t SpatialTrackingManager.isRunningUserSession.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 120) = a1;
  return result;
}

uint64_t SpatialTrackingManager.__allocating_init(serviceManager:arkitRunnable:)(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  SpatialTrackingManager.init(serviceManager:arkitRunnable:)(a1, a2);
  return v4;
}

uint64_t SpatialTrackingManager.init(serviceManager:arkitRunnable:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(id, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  id v12;

  v3 = v2;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v5 = MEMORY[0x24BEE4B08];
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = v5;
  outlined init with copy of __REAssetService(a2, v3 + 80);
  v6 = swift_allocObject();
  swift_weakInit();
  v7 = *(_QWORD *)(v3 + 104);
  v8 = *(_QWORD *)(v3 + 112);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + 80), v7);
  v9 = swift_allocObject();
  swift_weakInit();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v9;
  v10[3] = partial apply for closure #1 in SpatialTrackingManager.init(serviceManager:arkitRunnable:);
  v10[4] = v6;
  v11 = *(void (**)(id, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v8 + 8);
  v12 = a1;
  swift_retain();
  swift_retain();
  v11(v12, partial apply for closure #2 in SpatialTrackingManager.init(serviceManager:arkitRunnable:), v10, v7, v8);
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  swift_release();
  return v3;
}

uint64_t sub_21BDD003C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  _QWORD v8[2];
  char v9;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 56);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 64);
      v4 = *(_BYTE *)(v1 + 72) & 1;
      v5 = *(_QWORD *)(v1 + 104);
      v6 = *(_QWORD *)(v1 + 112);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 80), v5);
      v8[0] = v2;
      v8[1] = v3;
      v9 = v4;
      v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7(v8, v5, v6);
      swift_release();
      return outlined consume of SpatialTrackingSession.Configuration?(v2);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)()
{
  return closure #1 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)();
}

uint64_t closure #2 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = swift_beginAccess();
    if ((*(_BYTE *)(v6 + 16) & 1) != 0)
    {
      swift_beginAccess();
      v8 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = a2;
      *(_QWORD *)(v6 + 32) = a3;
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
    }
    else
    {
      a2(v7);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_21BDD0210()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)()
{
  uint64_t v0;

  return closure #2 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t SpatialTrackingManager.run(spatialTrackingConfiguration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v2;
  *(_OWORD *)(v3 + 192) = *(_OWORD *)a2;
  *(_BYTE *)(v3 + 49) = *(_BYTE *)(a2 + 16);
  return swift_task_switch();
}

uint64_t SpatialTrackingManager.run(spatialTrackingConfiguration:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 216) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release();
  swift_beginAccess();
  *(_BYTE *)(v1 + 16) = 1;
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v19[2];
  char v20;
  __int128 v21;
  char v22;

  v1 = *(_BYTE *)(v0 + 49);
  v2 = *(_QWORD **)(v0 + 184);
  v3 = v2 + 10;
  v4 = v2[13];
  v5 = v2[14];
  v17 = *(_OWORD *)(v0 + 192);
  __swift_project_boxed_opaque_existential_1(v2 + 10, v4);
  v21 = v17;
  v22 = v1;
  (*(void (**)(_QWORD *__return_ptr, __int128 *, uint64_t, uint64_t))(v5 + 16))(v19, &v21, v4, v5);
  v6 = (_QWORD *)v19[0];
  v7 = (_QWORD *)v19[1];
  *(_QWORD *)(v0 + 224) = v19[0];
  *(_QWORD *)(v0 + 232) = v7;
  v8 = v20;
  v9 = *(_QWORD *)(v0 + 192);
  if (v6[2] <= *(_QWORD *)(v17 + 16) >> 3)
  {
    *(_QWORD *)&v21 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v6);
    v10 = v21;
  }
  else
  {
    swift_bridgeObjectRetain();
    v10 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v6, v9);
  }
  *(_QWORD *)(v0 + 240) = v10;
  v11 = *(_QWORD *)(v0 + 200);
  if (v7[2] <= *(_QWORD *)(v11 + 16) >> 3)
  {
    *(_QWORD *)&v21 = *(_QWORD *)(v0 + 200);
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v7);
    v12 = v21;
  }
  else
  {
    swift_bridgeObjectRetain();
    v12 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v7, v11);
  }
  *(_QWORD *)(v0 + 248) = v12;
  v13 = v2[13];
  v14 = v2[14];
  __swift_project_boxed_opaque_existential_1(v3, v13);
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 160) = v7;
  *(_BYTE *)(v0 + 168) = v8;
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v14 + 24) + *(_QWORD *)(v14 + 24));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 256) = v15;
  *v15 = v0;
  v15[1] = SpatialTrackingManager.run(spatialTrackingConfiguration:);
  return v18(v0 + 16, v0 + 152, v13, v14);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 240);
    v2 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 24);
    v7 = *(_BYTE *)(v0 + 48);
    *(_QWORD *)&v19 = MEMORY[0x24BEE4B08];
    *((_QWORD *)&v19 + 1) = v3;
    v20 = v2;
    v21 = MEMORY[0x24BEE4B08];
    v22 = 2;
    v23 = v1;
    v24 = v6;
    v25 = v5;
    v26 = v4;
    v27 = v7;
    SpatialTrackingSession.UnavailableCapabilities.union(_:)((uint64_t)&v23, (uint64_t)&v15);
    outlined consume of RealityRenderer.CameraOutput?(v1);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = *((_QWORD *)&v15 + 1);
    v9 = v15;
    v10 = v16;
    v11 = v17;
    v12 = v18;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 248);
    v11 = MEMORY[0x24BEE4B08];
    v12 = 2;
    v9 = MEMORY[0x24BEE4B08];
  }
  *(_QWORD *)(v0 + 280) = v8;
  *(_QWORD *)(v0 + 288) = v9;
  *(_QWORD *)(v0 + 264) = v11;
  *(_QWORD *)(v0 + 272) = v10;
  *(_BYTE *)(v0 + 50) = v12;
  v13 = *(_BYTE *)(v0 + 49);
  v19 = *(_OWORD *)(v0 + 192);
  LOBYTE(v20) = v13;
  v23 = v9;
  v24 = v8;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  SpatialTrackingSession.Configuration.removing(unavailableCapabilities:)(&v23, (uint64_t)&v15);
  *(_OWORD *)(v0 + 296) = v15;
  *(_BYTE *)(v0 + 51) = v16;
  *(_QWORD *)(v0 + 312) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_BYTE *)(v0 + 51);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 184);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 64) = v1;
  *(_BYTE *)(v4 + 72) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of SpatialTrackingSession.Configuration?(v5);
  v6 = *(_QWORD *)(v4 + 48);
  swift_bridgeObjectRetain();
  v7 = (id)RFServiceManagerGetAnchorManagementService();
  if (v7)
  {
    v8 = v7;
    RFAnchorManagementSetNeedClientAnchoring();
    specialized Set.contains(_:)(1, v6);
    RFAnchorManagementSetClientNeedWorldAnchoring();
    specialized Set.contains(_:)(2, v6);
    RFAnchorManagementSetClientNeedPlaneAnchoring();
    specialized Set.contains(_:)(4, v6);
    RFAnchorManagementSetClientNeedImageAnchoring();
    specialized Set.contains(_:)(8, v6);
    RFAnchorManagementSetClientNeedObjectAnchoring();

  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 184);
  *(_BYTE *)(v9 + 16) = 0;
  swift_beginAccess();
  v10 = *(void (**)(uint64_t))(v9 + 24);
  if (v10)
  {
    v11 = swift_retain();
    v10(v11);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v1 = SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter();
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 272);
  if ((v1 & 1) != 0)
  {
    v6 = *(_BYTE *)(v0 + 50);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  v7 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = v3;
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SpatialTrackingManager.stop()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[13];
  v3 = v1[14];
  __swift_project_boxed_opaque_existential_1(v1 + 10, v2);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 40) + *(_QWORD *)(v3 + 40));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v4;
  *v4 = v0;
  v4[1] = SpatialTrackingManager.stop();
  return v6(v2, v3);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 32) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;

  swift_release();
  v1 = (id)RFServiceManagerGetAnchorManagementService();
  if (v1)
  {
    v2 = v1;
    RFAnchorManagementSetNeedClientAnchoring();
    v3 = MEMORY[0x24BEE4B08];
    specialized Set.contains(_:)(1, MEMORY[0x24BEE4B08]);
    RFAnchorManagementSetClientNeedWorldAnchoring();
    specialized Set.contains(_:)(2, v3);
    RFAnchorManagementSetClientNeedPlaneAnchoring();
    specialized Set.contains(_:)(4, v3);
    RFAnchorManagementSetClientNeedImageAnchoring();
    specialized Set.contains(_:)(8, v3);
    RFAnchorManagementSetClientNeedObjectAnchoring();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SpatialTrackingManager.deinit()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease();
  outlined consume of SpatialTrackingSession.Configuration?(*(_QWORD *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return v0;
}

uint64_t SpatialTrackingManager.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease();
  outlined consume of SpatialTrackingSession.Configuration?(*(_QWORD *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return swift_deallocClassInstance();
}

uint64_t sub_21BDD0BE4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_21BDD0C28(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_21BDD0C70@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BDD0CC4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 120);
  return result;
}

uint64_t sub_21BDD0D08(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 120) = v2;
  return result;
}

uint64_t type metadata accessor for SpatialTrackingManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for SpatialTrackingManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SpatialTrackingManager.configurationIsOutdated.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SpatialTrackingManager.configurationIsOutdated.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SpatialTrackingManager.configurationIsOutdated.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SpatialTrackingManager.rfConfigureCallback.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SpatialTrackingManager.rfConfigureCallback.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SpatialTrackingManager.rfConfigureCallback.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentAnchorCapabilities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentAnchorCapabilities.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentAnchorCapabilities.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentConfiguration.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentConfiguration.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentConfiguration.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SpatialTrackingManager.isRunningUserSession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SpatialTrackingManager.isRunningUserSession.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SpatialTrackingManager.isRunningUserSession.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SpatialTrackingManager.__allocating_init(serviceManager:arkitRunnable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of SpatialTrackingManager.run(spatialTrackingConfiguration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 264) + *(_QWORD *)(*(_QWORD *)v2 + 264));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of SpatialTrackingManager.stop()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 272) + *(_QWORD *)(*(_QWORD *)v0 + 272));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return v4();
}

uint64_t sub_21BDD0EFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_AF9TransformVs5NeverOTg504_s17d46Foundation12SkeletalPoseV2id4fromACSS_0A3Kit12fg5CAAE8i8VtcfcAF9k4VAJ5J54Vcfu0_33_95ebd61aca812b4992213a601e29e898AnLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v14;
    v4 = (__int128 *)(a1 + 160);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v15 = result;
      v9 = *(_QWORD *)(result + 16);
      v8 = *(_QWORD *)(result + 24);
      if (v9 >= v8 >> 1)
      {
        v12 = *(v4 - 1);
        v13 = *(v4 - 2);
        v11 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v7 = v11;
        v6 = v12;
        v5 = v13;
        result = v15;
      }
      *(_QWORD *)(result + 16) = v9 + 1;
      v10 = (_OWORD *)(result + 48 * v9);
      v10[2] = v5;
      v10[3] = v6;
      v10[4] = v7;
      v4 += 9;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_10RealityKit9TransformVtG_SSs5NeverOTg504_s17d53Foundation12SkeletalPoseV2id6jointsACSS_SaySS_0A3Kit9f54VtGtcfcS2S_AHt_tcfu_32a168a102879cc1a6a91172b0770f0c91o1_U12SSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v4 += 8;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_10RealityKit9TransformVtG_AHs5NeverOTg504_s17d53Foundation12SkeletalPoseV2id6jointsACSS_SaySS_0A3Kit9f57VtGtcfcAHSS_AHt_tcfu0_33_4e2c78491f386e2498f24848ee793634o1_U12AHTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v14;
    v4 = (__int128 *)(a1 + 80);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v15 = result;
      v9 = *(_QWORD *)(result + 16);
      v8 = *(_QWORD *)(result + 24);
      if (v9 >= v8 >> 1)
      {
        v12 = *(v4 - 1);
        v13 = *(v4 - 2);
        v11 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v7 = v11;
        v6 = v12;
        v5 = v13;
        result = v15;
      }
      *(_QWORD *)(result + 16) = v9 + 1;
      v10 = (_OWORD *)(result + 48 * v9);
      v10[2] = v5;
      v10[3] = v6;
      v10[4] = v7;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

int64_t SkeletalPose.jointNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(_QWORD *)v0)
    return MEMORY[0x24BEE4AF8];
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    result = RESkeletalPoseComponentGetModelSpaceJointCount();
    if ((result & 0x8000000000000000) == 0)
    {
      v3 = result;
      v1 = MEMORY[0x24BEE4AF8];
      if (result)
      {
        v19 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
        v4 = 0;
        v1 = v19;
        do
        {
          RESkeletalPoseComponentGetModelSpaceJointName();
          v5 = String.init(cString:)();
          v7 = v6;
          v9 = *(_QWORD *)(v19 + 16);
          v8 = *(_QWORD *)(v19 + 24);
          if (v9 >= v8 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
          ++v4;
          *(_QWORD *)(v19 + 16) = v9 + 1;
          v10 = v19 + 16 * v9;
          *(_QWORD *)(v10 + 32) = v5;
          *(_QWORD *)(v10 + 40) = v7;
        }
        while (v3 != v4);
      }
      return v1;
    }
    __break(1u);
  }
  else
  {
    result = RESkeletalPoseComponentGetJointCount();
    if ((result & 0x8000000000000000) == 0)
    {
      v11 = result;
      v1 = MEMORY[0x24BEE4AF8];
      if (result)
      {
        v20 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
        v12 = 0;
        v1 = v20;
        do
        {
          RESkeletalPoseComponentGetJointName();
          v13 = String.init(cString:)();
          v15 = v14;
          v17 = *(_QWORD *)(v20 + 16);
          v16 = *(_QWORD *)(v20 + 24);
          if (v17 >= v16 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          ++v12;
          *(_QWORD *)(v20 + 16) = v17 + 1;
          v18 = v20 + 16 * v17;
          *(_QWORD *)(v18 + 32) = v13;
          *(_QWORD *)(v18 + 40) = v15;
        }
        while (v11 != v12);
      }
      return v1;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SkeletalPose.PoseIndex(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

uint64_t SkeletalPose.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SkeletalPose.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SkeletalPose.id.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SkeletalPose.jointNames.setter(uint64_t a1)
{
  __int128 *v1;
  __int128 *v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = *((_BYTE *)v1 + 16);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v8 = *((_QWORD *)v1 + 5);
  v7 = *((_QWORD *)v1 + 6);
  v16 = *v1;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v8;
  v21 = v7;
  v9 = SkeletalPose.jointNames.getter();
  if (*(_QWORD *)(v7 + 16) >= *(_QWORD *)(v9 + 16))
    v10 = *(_QWORD *)(v9 + 16);
  else
    v10 = *(_QWORD *)(v7 + 16);
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, RESRT>);
    v11 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v11 = MEMORY[0x24BEE4B00];
  }
  *(_QWORD *)&v16 = v11;
  swift_bridgeObjectRetain_n();
  v12 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v12, v7, 1, &v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v2 + 5) = a1;
  swift_retain();
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_So5RESRTas5NeverOTg572_s17RealityFoundation12SkeletalPoseV10jointNamesSaySSGvsSo5RESRTaSSXEfU_SDySSAHGTf1cn_nTf4ng_n(a1, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release_n();
  *((_QWORD *)v2 + 6) = v14;
  return result;
}

uint64_t (*SkeletalPose.jointNames.modify(int64_t *a1))(uint64_t *a1, char a2)
{
  int64_t v1;

  a1[1] = v1;
  *a1 = SkeletalPose.jointNames.getter();
  return SkeletalPose.jointNames.modify;
}

uint64_t SkeletalPose.jointNames.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return SkeletalPose.jointNames.setter(*a1);
  v2 = swift_bridgeObjectRetain();
  SkeletalPose.jointNames.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t SkeletalPose.jointTransforms.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t SkeletalPose.jointTransforms.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  return result;
}

uint64_t (*SkeletalPose.jointTransforms.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SkeletalPose.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  _QWORD *v15;

  v9 = *(_QWORD *)(v3 + 48);
  v10 = (_QWORD *)SkeletalPose.jointNames.getter();
  v11 = specialized Collection<>.firstIndex(of:)(a1, a2, v10);
  v13 = v12;
  result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(_QWORD *)(v9 + 16))
    {
      v15 = (_QWORD *)(v9 + 48 * v11);
      a1 = v15[4];
      v11 = v15[5];
      v9 = v15[6];
      v10 = (_QWORD *)v15[7];
      v5 = v15[8];
      v4 = v15[9];
      if (one-time initialization token for identity == -1)
        goto LABEL_6;
LABEL_9:
      result = swift_once();
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_9;
  }
  a1 = 0;
  v11 = 0;
  v9 = 0;
  v10 = 0;
  v5 = 0;
  v4 = 0;
LABEL_6:
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v5;
  *(_QWORD *)(a3 + 40) = v4;
  *(_BYTE *)(a3 + 48) = v13 & 1;
  return result;
}

uint64_t key path getter for SkeletalPose.subscript(_:) : SkeletalPose@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *a2;
  v8 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)SkeletalPose.jointNames.getter();
  v10 = specialized Collection<>.firstIndex(of:)(v7, v8, v9);
  v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(_QWORD *)(v6 + 16))
    {
      v15 = (_QWORD *)(v6 + 48 * v10);
      v8 = v15[4];
      v16 = v15[5];
      v3 = v15[6];
      v9 = (_QWORD *)v15[7];
      v10 = v15[8];
      v4 = v15[9];
      if (one-time initialization token for identity == -1)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v14 = v16;
        goto LABEL_7;
      }
LABEL_10:
      swift_once();
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v8 = 0;
  v14 = 0;
  v3 = 0;
  v9 = 0;
  v10 = 0;
  v4 = 0;
LABEL_7:
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v3;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v10;
  *(_QWORD *)(a3 + 40) = v4;
  *(_BYTE *)(a3 + 48) = v12 & 1;
  return result;
}

uint64_t key path setter for SkeletalPose.subscript(_:) : SkeletalPose(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[64];

  v3 = *a3;
  v4 = a3[1];
  outlined init with take of Transform?(a1, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return SkeletalPose.subscript.setter((uint64_t)v6, v3, v4);
}

uint64_t SkeletalPose.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  __int128 *v4;
  char v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t result;
  _OWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[32];
  _QWORD *v27;

  v4 = v3;
  v8 = *((_BYTE *)v3 + 16);
  v9 = *(__int128 *)((char *)v3 + 24);
  v10 = *((_QWORD *)v3 + 5);
  v11 = (_QWORD *)*((_QWORD *)v3 + 6);
  v25 = *v3;
  v26[0] = v8;
  *(_OWORD *)&v26[8] = v9;
  *(_QWORD *)&v26[24] = v10;
  v27 = v11;
  v12 = (_QWORD *)SkeletalPose.jointNames.getter();
  v13 = v12;
  v14 = v12[2];
  if (!v14)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v15 = v12[4] == a2 && v12[5] == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v19 = v13 + 7;
    v20 = 1;
    while (v14 != v20)
    {
      if (*(v19 - 1) == a2 && *v19 == a3)
      {
        v16 = v20;
        goto LABEL_8;
      }
      v16 = v20++;
      v19 += 2;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_8;
    }
    goto LABEL_22;
  }
  v16 = 0;
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = outlined init with take of Transform?(a1, (uint64_t)&v25);
  if ((v27 & 1) == 0)
  {
    v23 = *(_OWORD *)v26;
    v24 = v25;
    v22 = *(_OWORD *)&v26[16];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      v11 = (_QWORD *)result;
    }
    if (v16 >= v11[2])
    {
      __break(1u);
    }
    else
    {
      v18 = &v11[6 * v16];
      v18[2] = v24;
      v18[3] = v23;
      v18[4] = v22;
      *((_QWORD *)v4 + 6) = v11;
    }
  }
  return result;
}

void (*SkeletalPose.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  char v14;
  _QWORD *v15;
  void (*result)(uint64_t **, char);

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = v3;
  v9[7] = a2;
  v10 = *(_QWORD *)(v3 + 48);
  v11 = (_QWORD *)SkeletalPose.jointNames.getter();
  v12 = specialized Collection<>.firstIndex(of:)(a2, a3, v11);
  v14 = v13;
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < *(_QWORD *)(v10 + 16))
    {
      v15 = (_QWORD *)(v10 + 48 * v12);
      a2 = v15[4];
      v12 = v15[5];
      v10 = v15[6];
      v11 = (_QWORD *)v15[7];
      v5 = v15[8];
      v4 = v15[9];
      if (one-time initialization token for identity == -1)
        goto LABEL_6;
LABEL_9:
      swift_once();
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_9;
  }
  a2 = 0;
  v12 = 0;
  v10 = 0;
  v11 = 0;
  v5 = 0;
  v4 = 0;
LABEL_6:
  *v9 = a2;
  v9[1] = v12;
  v9[2] = v10;
  v9[3] = v11;
  v9[4] = v5;
  v9[5] = v4;
  result = SkeletalPose.subscript.modify;
  *((_BYTE *)v9 + 48) = v14 & 1;
  return result;
}

void SkeletalPose.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *a1;
  v3 = (*a1)[8];
  v4 = (*a1)[1];
  v5 = (*a1)[3];
  v19 = (*a1)[2];
  v20 = **a1;
  v6 = (*a1)[5];
  v18 = (*a1)[4];
  v7 = *((unsigned __int8 *)*a1 + 48);
  v8 = *(_QWORD **)((*a1)[9] + 48);
  v9 = (*a1)[7];
  if ((a2 & 1) == 0)
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)SkeletalPose.jointNames.getter();
  v11 = specialized Collection<>.firstIndex(of:)(v9, v3, v10);
  v9 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (((v9 | v7) & 1) != 0)
  {
LABEL_12:
    free(v2);
    return;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v11 & 0x8000000000000000) != 0)
    goto LABEL_14;
LABEL_5:
  if (v11 < v8[2])
  {
LABEL_11:
    v16 = v2[9];
    v17 = &v8[6 * v11];
    v17[4] = v20;
    v17[5] = v4;
    v17[6] = v19;
    v17[7] = v5;
    v17[8] = v18;
    v17[9] = v6;
    *(_QWORD *)(v16 + 48) = v8;
    goto LABEL_12;
  }
  __break(1u);
LABEL_7:
  swift_bridgeObjectRetain();
  v13 = (_QWORD *)SkeletalPose.jointNames.getter();
  v11 = specialized Collection<>.firstIndex(of:)(v9, v3, v13);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (((v15 | v7) & 1) != 0)
    goto LABEL_12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_10;
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_15:
  v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
  if ((v11 & 0x8000000000000000) != 0)
    goto LABEL_16;
LABEL_10:
  if (v11 < v8[2])
    goto LABEL_11;
LABEL_17:
  __break(1u);
}

uint64_t SkeletalPose.init(id:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_SSs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i36V04makeF3Defs13OpaquePointerVyFSSAF5J53Vcfu_32ff38342fabfe801430b9473eed3cf0a7AKSSTf3nnnpk_nTf1cn_n(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = swift_bridgeObjectRetain();
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_AF9TransformVs5NeverOTg504_s17d46Foundation12SkeletalPoseV2id4fromACSS_0A3Kit12fg5CAAE8i8VtcfcAF9k4VAJ5J54Vcfu0_33_95ebd61aca812b4992213a601e29e898AnLTf3nnnpk_nTf1cn_n(v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = (__int128 *)(v9 + 64);
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v19 = *(v11 - 1);
      v20 = *(v11 - 2);
      v18 = *v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      v14 = v12[2];
      v13 = v12[3];
      if (v14 >= v13 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
      v12[2] = v14 + 1;
      v15 = &v12[6 * v14];
      v15[2] = v20;
      v15[3] = v19;
      v15[4] = v18;
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a1;
  *(_QWORD *)(a4 + 32) = a2;
  *(_QWORD *)(a4 + 40) = v7;
  *(_QWORD *)(a4 + 48) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SkeletalPose.init(id:joints:transforms:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  __int128 *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v6 = *(_QWORD *)(a3 + 16);
  if (v6 == *(_QWORD *)(a4 + 16))
  {
    v15 = result;
    if (v6)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = (__int128 *)(a4 + 64);
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v17 = *(v10 - 1);
        v18 = *(v10 - 2);
        v16 = *v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        v13 = v11[2];
        v12 = v11[3];
        if (v13 >= v12 >> 1)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
        v11[2] = v13 + 1;
        v14 = &v11[6 * v13];
        v14[2] = v18;
        v14[3] = v17;
        v14[4] = v16;
        v10 += 3;
        --v6;
      }
      while (v6);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = v15;
    *(_QWORD *)(a5 + 32) = a2;
    *(_QWORD *)(a5 + 40) = a3;
    *(_QWORD *)(a5 + 48) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 SkeletalPose.init(id:joints:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_10RealityKit9TransformVtG_SSs5NeverOTg504_s17d53Foundation12SkeletalPoseV2id6jointsACSS_SaySS_0A3Kit9f54VtGtcfcS2S_AHt_tcfu_32a168a102879cc1a6a91172b0770f0c91o1_U12SSTf3nnnpk_nTf1cn_n(a3);
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_10RealityKit9TransformVtG_AHs5NeverOTg504_s17d53Foundation12SkeletalPoseV2id6jointsACSS_SaySS_0A3Kit9f57VtGtcfcAHSS_AHt_tcfu0_33_4e2c78491f386e2498f24848ee793634o1_U12AHTf3nnnpk_nTf1cn_n(a3);
  swift_bridgeObjectRelease();
  SkeletalPose.init(id:joints:transforms:)(a1, a2, v8, v9, (uint64_t)&v14);
  v10 = v15;
  result = v16;
  v12 = v17;
  v13 = v18;
  *(_OWORD *)a4 = v14;
  *(_BYTE *)(a4 + 16) = v10;
  *(__n128 *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 40) = v12;
  *(_QWORD *)(a4 + 48) = v13;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance SkeletalPose@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  __int128 *v28;
  unint64_t i;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  if (!a1[2])
    goto LABEL_7;
  v54 = *(_QWORD *)(a2 + 16);
  if (!v54)
    goto LABEL_7;
  v53 = a1[2];
  v9 = a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = *(_OWORD *)(a2 + 48);
  v51 = *(_OWORD *)(a2 + 64);
  v47 = *(_OWORD *)(a2 + 32);
  v10 = (_QWORD *)*a4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v17 & 1) != (v18 & 1))
    {
LABEL_6:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
LABEL_9:
    if ((v17 & 1) != 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  if ((a3 & 1) != 0)
    goto LABEL_9;
  v21 = v11;
  specialized _NativeDictionary.copy()();
  v11 = v21;
  if ((v17 & 1) != 0)
  {
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_31;
  }
LABEL_13:
  v22 = (_QWORD *)*a4;
  *(_QWORD *)(*a4 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v23 = (uint64_t *)(v22[6] + 16 * v11);
  *v23 = v9;
  v23[1] = v8;
  v24 = (_OWORD *)(v22[7] + 48 * v11);
  *v24 = v47;
  v24[1] = v49;
  v24[2] = v51;
  v25 = v22[2];
  v15 = __OFADD__(v25, 1);
  v26 = v25 + 1;
  if (v15)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v22[2] = v26;
  if (v53 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return;
  }
  if (a1[2] >= 2uLL)
  {
    if (v54 == 1)
      goto LABEL_17;
    v27 = a1 + 7;
    v28 = (__int128 *)(a2 + 112);
    for (i = 2; ; ++i)
    {
      v31 = *(v27 - 1);
      v30 = *v27;
      swift_bridgeObjectRetain();
      v50 = *(v28 - 1);
      v52 = *v28;
      v48 = *(v28 - 2);
      v32 = (_QWORD *)*a4;
      v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
      v35 = v32[2];
      v36 = (v34 & 1) == 0;
      v15 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v15)
        break;
      v38 = v34;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_6;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v40 = (_QWORD *)*a4;
      *(_QWORD *)(*a4 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      v41 = (uint64_t *)(v40[6] + 16 * v33);
      *v41 = v31;
      v41[1] = v30;
      v42 = (_OWORD *)(v40[7] + 48 * v33);
      *v42 = v48;
      v42[1] = v50;
      v42[2] = v52;
      v43 = v40[2];
      v15 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v15)
        goto LABEL_29;
      v40[2] = v44;
      if (v53 == i)
        goto LABEL_17;
      if (i >= a1[2])
        goto LABEL_30;
      if (v54 == i)
        goto LABEL_17;
      v27 += 2;
      v28 += 3;
    }
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x800000021BE82E90;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)();
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_So5RESRTas5NeverOTg572_s17RealityFoundation12SkeletalPoseV10jointNamesSaySSGvsSo5RESRTaSSXEfU_SDySSAHGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v28 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v28;
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        swift_bridgeObjectRetain();
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        v10 = 0uLL;
        v11 = 0uLL;
        v12 = 0uLL;
        if ((v13 & 1) != 0)
        {
          v14 = (__int128 *)(*(_QWORD *)(a2 + 56) + 48 * v9);
          v10 = *v14;
          v11 = v14[1];
          v12 = v14[2];
        }
        v22 = v12;
        v24 = v11;
        v26 = v10;
        swift_bridgeObjectRelease();
        v16 = v22;
        v15 = v24;
        v17 = v26;
      }
      else
      {
        v17 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
      }
      v19 = *(_QWORD *)(v28 + 16);
      v18 = *(_QWORD *)(v28 + 24);
      if (v19 >= v18 >> 1)
      {
        v25 = v15;
        v27 = v17;
        v23 = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v16 = v23;
        v15 = v25;
        v17 = v27;
      }
      *(_QWORD *)(v28 + 16) = v19 + 1;
      v20 = (_OWORD *)(v28 + 48 * v19);
      v20[2] = v17;
      v20[3] = v15;
      v20[4] = v16;
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  return v3;
}

int64_t sub_21BDD2768@<X0>(int64_t *a1@<X8>)
{
  int64_t result;

  result = SkeletalPose.jointNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BDD27B8()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return SkeletalPose.jointNames.setter(v0);
}

uint64_t sub_21BDD27E8()
{
  return 0;
}

uint64_t destroy for SkeletalPose()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SkeletalPose(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SkeletalPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SkeletalPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SkeletalPose(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SkeletalPose(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SkeletalPose()
{
  return &type metadata for SkeletalPose;
}

ValueMetadata *type metadata accessor for SkeletalPose.PoseIndex()
{
  return &type metadata for SkeletalPose.PoseIndex;
}

uint64_t CustomMaterialResource.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t CustomMaterialResource.__deallocating_deinit()
{
  swift_beginAccess();
  REAssetSetSwiftObject();
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustomMaterialResource()
{
  return objc_opt_self();
}

uint64_t specialized FromToByAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 9) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 25) = 1;
      *(_QWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 41) = 1;
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 81) = 4;
      *(_QWORD *)(a1 + 88) = v9;
      *(_QWORD *)(a1 + 96) = ClipSourceRef;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 104) = v10;
      *(_BYTE *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(_BYTE *)(a1 + 138) = v15;
      *(_BYTE *)(a1 + 139) = v14;
      *(_QWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_BYTE *)(a1 + 192) = 1;
      *(_BYTE *)(a1 + 193) = 0;
      *(_BYTE *)(a1 + 194) = 1;
      *(_BYTE *)(a1 + 195) = 2;
      *(_QWORD *)(a1 + 200) = v8;
      *(_BYTE *)(a1 + 212) = 0;
      *(_DWORD *)(a1 + 208) = 0;
      *(_BYTE *)(a1 + 213) = 1;
      *(_DWORD *)(a1 + 216) = 0;
      *(_BYTE *)(a1 + 220) = 0;
      *(_BYTE *)(a1 + 221) = 1;
      *(_DWORD *)(a1 + 224) = 0;
      *(_BYTE *)(a1 + 228) = 0;
      *(_BYTE *)(a1 + 229) = 1;
      *(_QWORD *)(a1 + 232) = 0;
      *(_BYTE *)(a1 + 240) = 1;
      *(_DWORD *)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 256) = 0;
      *(_QWORD *)(a1 + 264) = 0;
      *(_BYTE *)(a1 + 276) = 10;
      *(_QWORD *)(a1 + 280) = 0;
      *(_WORD *)(a1 + 288) = 514;
      *(_BYTE *)(a1 + 290) = 2;
      *(_QWORD *)(a1 + 296) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 9) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 25) = 1;
      *(_QWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 41) = 1;
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 81) = 4;
      *(_QWORD *)(a1 + 88) = v9;
      *(_QWORD *)(a1 + 96) = ClipSourceRef;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 104) = v10;
      *(_BYTE *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(_BYTE *)(a1 + 138) = v15;
      *(_BYTE *)(a1 + 139) = v14;
      *(_QWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_BYTE *)(a1 + 192) = 1;
      *(_BYTE *)(a1 + 193) = 0;
      *(_BYTE *)(a1 + 194) = 1;
      *(_BYTE *)(a1 + 195) = 2;
      *(_QWORD *)(a1 + 200) = v8;
      *(_QWORD *)(a1 + 208) = 0;
      *(_BYTE *)(a1 + 216) = 0;
      *(_BYTE *)(a1 + 217) = 1;
      *(_QWORD *)(a1 + 224) = 0;
      *(_BYTE *)(a1 + 232) = 0;
      *(_BYTE *)(a1 + 233) = 1;
      *(_QWORD *)(a1 + 240) = 0;
      *(_BYTE *)(a1 + 248) = 0;
      *(_BYTE *)(a1 + 249) = 1;
      *(_QWORD *)(a1 + 256) = 0;
      *(_BYTE *)(a1 + 264) = 1;
      *(_DWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 280) = 0;
      *(_BYTE *)(a1 + 292) = 10;
      *(_QWORD *)(a1 + 296) = 0;
      *(_WORD *)(a1 + 304) = 514;
      *(_BYTE *)(a1 + 306) = 2;
      *(_QWORD *)(a1 + 312) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 9) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 25) = 1;
      *(_QWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 41) = 1;
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 81) = 4;
      *(_QWORD *)(a1 + 88) = v9;
      *(_QWORD *)(a1 + 96) = ClipSourceRef;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 104) = v10;
      *(_BYTE *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(_BYTE *)(a1 + 138) = v15;
      *(_BYTE *)(a1 + 139) = v14;
      *(_QWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_BYTE *)(a1 + 192) = 1;
      *(_BYTE *)(a1 + 193) = 0;
      *(_BYTE *)(a1 + 194) = 1;
      *(_BYTE *)(a1 + 195) = 2;
      *(_QWORD *)(a1 + 208) = 0;
      *(_QWORD *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 200) = v8;
      *(_BYTE *)(a1 + 224) = 0;
      *(_BYTE *)(a1 + 225) = 1;
      *(_BYTE *)(a1 + 256) = 0;
      *(_QWORD *)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
      *(_BYTE *)(a1 + 257) = 1;
      *(_BYTE *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 280) = 0;
      *(_BYTE *)(a1 + 289) = 1;
      *(_QWORD *)(a1 + 296) = 0;
      *(_BYTE *)(a1 + 304) = 1;
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
      *(_DWORD *)(a1 + 336) = 0;
      *(_BYTE *)(a1 + 340) = 10;
      *(_QWORD *)(a1 + 344) = 0;
      *(_WORD *)(a1 + 352) = 514;
      *(_BYTE *)(a1 + 354) = 2;
      *(_QWORD *)(a1 + 360) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 9) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 25) = 1;
      *(_QWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 41) = 1;
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 81) = 4;
      *(_QWORD *)(a1 + 88) = v9;
      *(_QWORD *)(a1 + 96) = ClipSourceRef;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 104) = v10;
      *(_BYTE *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(_BYTE *)(a1 + 138) = v15;
      *(_BYTE *)(a1 + 139) = v14;
      *(_QWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_BYTE *)(a1 + 192) = 1;
      *(_BYTE *)(a1 + 193) = 0;
      *(_BYTE *)(a1 + 194) = 1;
      *(_BYTE *)(a1 + 195) = 2;
      *(_QWORD *)(a1 + 200) = v8;
      *(_BYTE *)(a1 + 256) = 0;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_BYTE *)(a1 + 257) = 1;
      *(_BYTE *)(a1 + 320) = 0;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_BYTE *)(a1 + 321) = 1;
      *(_BYTE *)(a1 + 384) = 0;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_BYTE *)(a1 + 385) = 1;
      *(_QWORD *)(a1 + 392) = 0;
      *(_BYTE *)(a1 + 400) = 1;
      *(_QWORD *)(a1 + 416) = 0;
      *(_QWORD *)(a1 + 424) = 0;
      *(_DWORD *)(a1 + 432) = 0;
      *(_BYTE *)(a1 + 436) = 10;
      *(_QWORD *)(a1 + 440) = 0;
      *(_WORD *)(a1 + 448) = 514;
      *(_BYTE *)(a1 + 450) = 2;
      *(_QWORD *)(a1 + 456) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 9) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 25) = 1;
      *(_QWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 41) = 1;
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 81) = 4;
      *(_QWORD *)(a1 + 88) = v9;
      *(_QWORD *)(a1 + 96) = ClipSourceRef;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 104) = v10;
      *(_BYTE *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(_BYTE *)(a1 + 138) = v15;
      *(_BYTE *)(a1 + 139) = v14;
      *(_QWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_BYTE *)(a1 + 192) = 1;
      *(_BYTE *)(a1 + 193) = 0;
      *(_BYTE *)(a1 + 194) = 1;
      *(_BYTE *)(a1 + 195) = 2;
      *(_QWORD *)(a1 + 200) = v8;
      *(int64x2_t *)(a1 + 208) = vdupq_n_s64(1uLL);
      *(_OWORD *)(a1 + 224) = xmmword_21BE41200;
      *(_BYTE *)(a1 + 240) = 1;
      *(_DWORD *)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 256) = 0;
      *(_QWORD *)(a1 + 264) = 0;
      *(_BYTE *)(a1 + 276) = 10;
      *(_QWORD *)(a1 + 280) = 0;
      *(_WORD *)(a1 + 288) = 514;
      *(_BYTE *)(a1 + 290) = 2;
      *(_QWORD *)(a1 + 296) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationResource.__allocating_init(_:name:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  AnimationResource.init(_:name:)(a1, a2, a3);
  return v6;
}

uint64_t AnimationResource.definition.getter@<X0>(uint64_t *a1@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;

  v2 = REAssetHandleAssetType();
  if (v2 != 5 && (v2 != 11 || !REAnimationSceneAssetGetRootTimeline()))
  {
    __break(1u);
    JUMPOUT(0x21BDD41A0);
  }
  RETimelineDefinitionCreateFromTimeline();
  switch(RETimelineDefinitionGetTimelineType())
  {
    case 2u:
      a1[3] = (uint64_t)&type metadata for AnimationView;
      a1[4] = (uint64_t)&protocol witness table for AnimationView;
      v3 = swift_allocObject();
      v4 = v3 + 16;
      *a1 = v3;
      swift_retain();
      AnimationView.init(_:)(v4);
      return RERelease();
    case 3u:
      a1[3] = (uint64_t)&type metadata for AnimationGroup;
      a1[4] = (uint64_t)&protocol witness table for AnimationGroup;
      v5 = swift_allocObject();
      v6 = v5 + 16;
      *a1 = v5;
      swift_retain();
      AnimationGroup.init(_:)(v6);
      return RERelease();
    case 4u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Float>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      v7 = swift_allocObject();
      v8 = v7 + 16;
      *a1 = v7;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v8);
      return RERelease();
    case 5u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Double>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      goto LABEL_10;
    case 6u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD2<Float>>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
LABEL_10:
      v9 = swift_allocObject();
      v10 = v9 + 16;
      *a1 = v9;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v10);
      return RERelease();
    case 7u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD3<Float>>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      goto LABEL_14;
    case 8u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD4<Float>>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      goto LABEL_14;
    case 9u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<simd_quatf>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
LABEL_14:
      v11 = swift_allocObject();
      v12 = v11 + 16;
      *a1 = v11;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v12);
      return RERelease();
    case 0xAu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Transform>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      v13 = swift_allocObject();
      v14 = v13 + 16;
      *a1 = v13;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v14);
      return RERelease();
    case 0xBu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<JointTransforms>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      v15 = swift_allocObject();
      v16 = v15 + 16;
      *a1 = v15;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v16);
      return RERelease();
    case 0xCu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Float>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0xDu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Double>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0xEu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD2<Float>>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0xFu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD3<Float>>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0x10u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD4<Float>>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0x12u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Transform>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0x13u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<JointTransforms>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
LABEL_25:
      v18 = swift_allocObject();
      v19 = v18 + 16;
      *a1 = v18;
      swift_retain();
      specialized SampledAnimation.init(_:)(v19);
      return RERelease();
    case 0x14u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Float>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x15u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Double>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x16u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD2<Float>>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x17u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD3<Float>>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x18u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x19u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x1Au:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Transform>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x1Bu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
LABEL_34:
      v20 = swift_allocObject();
      v21 = v20 + 16;
      *a1 = v20;
      swift_retain();
      specialized BlendTreeAnimation.init(_:)(v21);
      return RERelease();
    case 0x1Cu:
      a1[3] = (uint64_t)&type metadata for OrbitAnimation;
      a1[4] = (uint64_t)&protocol witness table for OrbitAnimation;
      v23 = swift_allocObject();
      v24 = v23 + 16;
      *a1 = v23;
      swift_retain();
      OrbitAnimation.init(_:)(v24);
      return RERelease();
    case 0x1Du:
      AnimationResource.eventTimelineDefinition.getter((uint64_t)&v27);
      if (v28)
      {
        outlined init with take of BindableDataInternal(&v27, (uint64_t)a1);
      }
      else
      {
        a1[3] = (uint64_t)&type metadata for AnyActionAnimation;
        a1[4] = (uint64_t)&protocol witness table for AnyActionAnimation;
        v25 = swift_allocObject();
        v26 = v25 + 16;
        *a1 = v25;
        swift_retain();
        AnyActionAnimation.init(_:)(v26);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v27, &demangling cache variable for type metadata for AnimationDefinition?);
      }
      return RERelease();
    default:
      a1[3] = (uint64_t)&type metadata for InvalidAnimationDefinition;
      a1[4] = (uint64_t)&protocol witness table for InvalidAnimationDefinition;
      v17 = swift_allocObject();
      *a1 = v17;
      LOBYTE(v27) = 1;
      v30 = 1;
      v29 = 1;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0xE000000000000000;
      *(_DWORD *)(v17 + 32) = 0;
      *(_BYTE *)(v17 + 36) = 0;
      *(_OWORD *)(v17 + 40) = xmmword_21BE50F70;
      *(_BYTE *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_BYTE *)(v17 + 72) = 1;
      *(_QWORD *)(v17 + 80) = 0;
      *(_BYTE *)(v17 + 88) = 1;
      *(_QWORD *)(v17 + 96) = 0;
      *(_BYTE *)(v17 + 104) = 1;
      *(_QWORD *)(v17 + 112) = 0;
      *(_QWORD *)(v17 + 120) = 0;
      *(_QWORD *)(v17 + 125) = 0;
      return RERelease();
  }
}

uint64_t static AnimationResource.generate(with:)(uint64_t a1)
{
  return specialized static AnimationResource.generate(with:)(a1);
}

uint64_t specialized BlendTreeAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t v6;
  uint64_t ClipSourceRef;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  type metadata accessor for TimelineDefinition();
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      v6 = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = v6;
      if (v6)
      {
        if (RETimelineDefinitionGetTimelineType() == 2)
        {
          *(_QWORD *)(a1 + 56) = 0;
          *(_WORD *)(a1 + 64) = 256;
          *(_QWORD *)(a1 + 72) = 0;
          *(_WORD *)(a1 + 80) = 256;
          *(_QWORD *)(a1 + 88) = 0;
          *(_WORD *)(a1 + 96) = 256;
          *(_QWORD *)(a1 + 104) = 0;
          *(_BYTE *)(a1 + 112) = 1;
          *(_QWORD *)(a1 + 120) = 0;
          *(_BYTE *)(a1 + 128) = 1;
          *(_DWORD *)(a1 + 132) = 0;
          *(_BYTE *)(a1 + 136) = 1;
          *(_BYTE *)(a1 + 137) = 4;
          *(_QWORD *)(a1 + 176) = 0;
          *(_OWORD *)(a1 + 144) = 0u;
          *(_OWORD *)(a1 + 160) = 0u;
          *(_BYTE *)(a1 + 184) = -1;
          *(_DWORD *)(a1 + 188) = 0;
          *(_BYTE *)(a1 + 192) = 1;
          *(_BYTE *)(a1 + 193) = 0;
          *(_BYTE *)(a1 + 194) = 1;
          *(_BYTE *)(a1 + 195) = 2;
          *(_QWORD *)(a1 + 200) = v2;
          swift_retain();
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          if (ClipSourceRef)
          {
            v8 = ClipSourceRef;
            v9 = swift_allocObject();
            *(_QWORD *)(v9 + 16) = v8;
            RERetain();
            RERelease();
          }
          else
          {
            v9 = swift_allocObject();
            *(_QWORD *)(v9 + 16) = 0;
          }
          goto LABEL_12;
        }
        swift_retain();
        RETimelineDefinitionGetName();
        v6 = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_WORD *)(a1 + 64) = 256;
      *(_QWORD *)(a1 + 72) = 0;
      *(_WORD *)(a1 + 80) = 256;
      *(_QWORD *)(a1 + 88) = 0;
      *(_WORD *)(a1 + 96) = 256;
      *(_QWORD *)(a1 + 104) = 0;
      *(_BYTE *)(a1 + 112) = 1;
      *(_QWORD *)(a1 + 120) = 0;
      *(_BYTE *)(a1 + 128) = 1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = 1025;
      *(_QWORD *)(a1 + 144) = v2;
      *(_QWORD *)(a1 + 152) = v6;
      *(_QWORD *)(a1 + 160) = v10;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_BYTE *)(a1 + 192) = 0;
      *(_BYTE *)(a1 + 193) = 0;
      *(_BYTE *)(a1 + 194) = 0;
      *(_BYTE *)(a1 + 195) = 0;
      v9 = v2;
      *(_QWORD *)(a1 + 200) = v12;
LABEL_12:
      swift_retain();
      swift_release();
      result = swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_BYTE *)(a1 + 32) = -1;
      *(_QWORD *)(a1 + 36) = 0x201000100000000;
      *(_QWORD *)(a1 + 48) = v9;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized SampledAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_BYTE *)(a1 + 32) = -1;
      *(_DWORD *)(a1 + 36) = 0;
      *(_WORD *)(a1 + 40) = 1;
      *(_BYTE *)(a1 + 42) = 1;
      *(_BYTE *)(a1 + 43) = 2;
      *(_QWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 65) = 1;
      *(_QWORD *)(a1 + 72) = 0;
      *(_BYTE *)(a1 + 80) = 0;
      *(_BYTE *)(a1 + 81) = 1;
      *(_QWORD *)(a1 + 88) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      *(_BYTE *)(a1 + 97) = 1;
      *(_QWORD *)(a1 + 104) = 0;
      *(_BYTE *)(a1 + 112) = 1;
      *(_QWORD *)(a1 + 120) = 0;
      *(_BYTE *)(a1 + 128) = 1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_BYTE *)(a1 + 136) = 1;
      *(_BYTE *)(a1 + 137) = 4;
      *(_QWORD *)(a1 + 144) = v9;
      *(_QWORD *)(a1 + 152) = ClipSourceRef;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 160) = v10;
      *(_BYTE *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_WORD *)(a1 + 192) = v16;
      *(_BYTE *)(a1 + 194) = v15;
      *(_BYTE *)(a1 + 195) = v14;
      *(_QWORD *)(a1 + 200) = v12;
      *(_BYTE *)(a1 + 208) = 2;
      *(_DWORD *)(a1 + 212) = 0;
      *(_BYTE *)(a1 + 216) = 1;
      *(_QWORD *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 232) = 0;
      *(_BYTE *)(a1 + 240) = 1;
      *(_QWORD *)(a1 + 248) = 0;
      *(_BYTE *)(a1 + 256) = 1;
      *(_QWORD *)(a1 + 264) = 0;
      *(_WORD *)(a1 + 272) = 514;
      *(_BYTE *)(a1 + 274) = 2;
      *(_QWORD *)(a1 + 280) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationResource.timelineAsset()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = REAssetHandleAssetType();
  if (v2 == 11)
    return REAnimationSceneAssetGetRootTimeline();
  if (v2 == 5)
    return v1;
  return 0;
}

uint64_t AnimationResource.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *AnimationResource.init(_:name:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  unint64_t v5;

  v3[2] = a1;
  if (!a3)
  {
    if (REAssetHandleAssetType() == 11)
      REAnimationSceneAssetGetRootTimeline();
    if (REAnimationAssetGetName())
    {
      a2 = String.init(cString:)();
      a3 = v5;
    }
    else
    {
      a2 = 0;
      a3 = 0xE000000000000000;
    }
  }
  v3[3] = a2;
  v3[4] = a3;
  RERetain();
  REAssetSetSwiftObject();
  return v3;
}

uint64_t sub_21BDD490C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of BindTarget(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t AnimationResource.deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AnimationResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t one-time initialization function for actionHandlerCreators()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static AnimationResource.actionHandlerCreators = result;
  return result;
}

unint64_t one-time initialization function for actionHandlers()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static AnimationResource.actionHandlers = result;
  return result;
}

unint64_t one-time initialization function for actionSubscriptions()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static AnimationResource.actionSubscriptions = result;
  return result;
}

unint64_t one-time initialization function for actionTypeMap()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static AnimationResource.actionTypeMap = result;
  return result;
}

unint64_t one-time initialization function for codableActionTypeMap()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static AnimationResource.codableActionTypeMap = result;
  return result;
}

BOOL static AnimationRepeatMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AnimationRepeatMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AnimationRepeatMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AnimationResource.makeClip(clipStart:clipEnd:clipOffset:clipReversed:delay:duration:loopBehavior:speed:)(uint64_t a1, char a2, uint64_t a3, char a4, char a5, uint64_t a6, char a7, char *a8, double a9, double a10, float a11)
{
  uint64_t v11;
  uint64_t v12;
  char v17;
  uint64_t v21;
  uint64_t v22;
  double v23;
  int v24;
  uint64_t TimelineClip;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD v34[3];
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  float v39;
  char v40;
  char v41;
  char v42;

  v12 = v11;
  v17 = *a8;
  if ((a2 & 1) != 0)
    *(double *)&a1 = NAN;
  if ((a4 & 1) != 0)
    *(double *)&a3 = NAN;
  if ((a7 & 1) != 0)
    *(double *)&a6 = NAN;
  v21 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v21, (uint64_t)v34);
  v22 = v35;
  v23 = v36;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  (*(void (**)(uint64_t, double))(*(_QWORD *)&v23 + 32))(v22, COERCE_DOUBLE(*(_QWORD *)&v23));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  v24 = REAssetHandleAssetType();
  if (v24 != 5 && (v24 != 11 || !REAnimationSceneAssetGetRootTimeline()))
  {
    __break(1u);
    goto LABEL_19;
  }
  LOBYTE(v34[0]) = 0;
  v34[1] = 0;
  v34[2] = a1;
  v35 = a3;
  v36 = a9;
  v37 = a10;
  v38 = a6;
  v39 = a11;
  v40 = v17;
  v41 = a5 & 1;
  v42 = 0;
  TimelineClip = REAssetManagerTimelineAssetCreateTimelineClipEx();
  if (!TimelineClip)
  {
LABEL_19:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v26 = TimelineClip;
  if (REAssetHandleAssetType() == 11)
  {
    v27 = REAnimationSceneAssetCreateWithTimeline();
    v29 = *(_QWORD *)(v12 + 24);
    v28 = *(_QWORD *)(v12 + 32);
    type metadata accessor for AnimationResource();
    v30 = swift_allocObject();
    swift_bridgeObjectRetain();
    AnimationResource.init(_:name:)(v27, v29, v28);
    RERelease();
  }
  else
  {
    v32 = *(_QWORD *)(v12 + 24);
    v31 = *(_QWORD *)(v12 + 32);
    type metadata accessor for AnimationResource();
    v30 = swift_allocObject();
    swift_bridgeObjectRetain();
    AnimationResource.init(_:name:)(v26, v32, v31);
  }
  RERelease();
  return v30;
}

uint64_t AnimationResource.repeat(duration:)(double a1)
{
  char v2;

  v2 = 1;
  return AnimationResource.makeClip(clipStart:clipEnd:clipOffset:clipReversed:delay:duration:loopBehavior:speed:)(0, 1, 0, 1, 0, *(uint64_t *)&a1, 0, &v2, 0.0, 0.0, 1.0);
}

uint64_t AnimationResource.repeat(count:)(uint64_t a1)
{
  uint64_t result;
  double v3;
  char v4;

  result = REAssetHandleAssetType();
  if ((_DWORD)result == 5 || (_DWORD)result == 11 && (result = REAnimationSceneAssetGetRootTimeline()) != 0)
  {
    REAnimationAssetGetTotalDuration();
    v4 = 1;
    return AnimationResource.makeClip(clipStart:clipEnd:clipOffset:clipReversed:delay:duration:loopBehavior:speed:)(0, 1, 0, 1, 0, COERCE__INT64(v3 * (double)a1), 0, &v4, 0.0, 0.0, 1.0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AnimationResource.group(with:)(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  ValueMetadata *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33[2];
  char v34;
  char v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[3];
  ValueMetadata *v47;
  _UNKNOWN **v48;
  _QWORD *v49;
  unint64_t v50;

  v2 = a1;
  v3 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v49 = v5;
  if (!v3)
  {
    v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_5;
LABEL_17:
    swift_bridgeObjectRelease();
    v8 = 0;
LABEL_18:
    v47 = &type metadata for AnimationGroup;
    v48 = &protocol witness table for AnimationGroup;
    v23 = swift_allocObject();
    v46[0] = v23;
    type metadata accessor for TimelineDefinition();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = 0;
    v33[1] = 0;
    v33[0] = 0;
    v34 = -1;
    v35[0] = 0;
    v32 = 0;
    TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(0x70756F7267, 0xE500000000000000, v33, 0, v35, &v32, 0, 1, (uint64_t)&v36, 0.0, 0.0, 1.0, 0, 1, 0, 1);
    *(_OWORD *)(v23 + 120) = v42;
    v25 = v44;
    *(_OWORD *)(v23 + 136) = v43;
    *(_OWORD *)(v23 + 152) = v25;
    v26 = v39;
    *(_OWORD *)(v23 + 56) = v38;
    *(_OWORD *)(v23 + 72) = v26;
    v27 = v41;
    *(_OWORD *)(v23 + 88) = v40;
    *(_OWORD *)(v23 + 104) = v27;
    v28 = v37;
    *(_OWORD *)(v23 + 24) = v36;
    LOBYTE(v33[0]) = 0;
    v35[0] = 0;
    *(_QWORD *)(v23 + 16) = v5;
    *(_QWORD *)(v23 + 168) = v45;
    *(_OWORD *)(v23 + 40) = v28;
    *(_OWORD *)(v23 + 176) = xmmword_21BE7CC90;
    *(_QWORD *)(v23 + 192) = 0;
    *(_QWORD *)(v23 + 200) = 0;
    *(_BYTE *)(v23 + 208) = -1;
    *(_DWORD *)(v23 + 212) = 0;
    *(_BYTE *)(v23 + 216) = v33[0];
    *(_BYTE *)(v23 + 217) = v8;
    *(_WORD *)(v23 + 218) = v35[0];
    *(_QWORD *)(v23 + 224) = v24;
    v29 = specialized static AnimationResource.generate(with:)((uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return v29;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v6 = result;
  if (!result)
    goto LABEL_17;
LABEL_5:
  if (v6 >= 1)
  {
    v30 = v1;
    v8 = 0;
    v9 = 0;
    v31 = v2 & 0xC000000000000001;
    v50 = v2;
    do
    {
      if (v31)
        MEMORY[0x220769770](v9, v2);
      else
        swift_retain();
      AnimationResource.definition.getter((uint64_t *)&v36);
      v10 = *((_QWORD *)&v37 + 1);
      v11 = v38;
      __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 56))(v46, v10, v11);
      v12 = v46[0];
      outlined init with copy of __REAssetService((uint64_t)&v36, (uint64_t)v46);
      v13 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        v49 = v13;
      }
      v15 = v13[2];
      v14 = v13[3];
      if (v15 >= v14 >> 1)
        v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
      ++v9;
      v8 |= v12;
      v16 = v47;
      v17 = (uint64_t)v48;
      v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v46, (uint64_t)v47);
      v19 = MEMORY[0x24BDAC7A8](v18);
      v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v22 + 16))(v21, v19);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, (uint64_t)v21, (uint64_t *)&v49, (uint64_t)v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      v2 = v50;
    }
    while (v6 != v9);
    swift_bridgeObjectRelease();
    v5 = v49;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t static AnimationResource.sequence(with:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  __int128 *v3;
  double v4;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t RootTimeline;
  uint64_t result;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  double v39;
  int v40;
  uint64_t v41;
  double v42;
  double v43;
  Swift::String v44;
  Swift::String v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65[2];
  char v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t v69;
  char v70;
  char v71;
  uint64_t v72[5];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83[2];

  v5 = v1;
  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7 > 0)
      goto LABEL_3;
LABEL_49:
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v58 = 0xD000000000000033;
    *(_QWORD *)(v58 + 8) = 0x800000021BE93750;
    *(_BYTE *)(v58 + 16) = 0;
    swift_willThrow();
    return v2;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v7 <= 0)
    goto LABEL_49;
LABEL_3:
  v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0, MEMORY[0x24BEE4AF8]);
  v63 = a1 & 0xC000000000000001;
  v61 = v1;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_52:
    MEMORY[0x220769770](0, a1);
LABEL_6:
    v10 = REAssetHandleAssetType();
    if (v10 == 11)
    {
      RootTimeline = REAnimationSceneAssetGetRootTimeline();
      result = swift_release();
      if (!RootTimeline)
        goto LABEL_62;
    }
    else
    {
      if (v10 != 5)
        goto LABEL_61;
      swift_release();
    }
    v3 = &v73;
    REAnimationAssetGetTotalDuration();
    v4 = v13;
    if (v63)
      MEMORY[0x220769770](0, a1);
    else
      swift_retain();
    AnimationResource.definition.getter((uint64_t *)&v73);
    swift_release();
    v83[0] = v8;
    v5 = *(_QWORD *)(v8 + 16);
    v9 = *(_QWORD *)(v8 + 24);
    if (v5 < v9 >> 1)
      goto LABEL_14;
    goto LABEL_54;
  }
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
LABEL_54:
  *((_QWORD *)v3 + 19) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v5 + 1, 1, (_QWORD *)v8);
LABEL_14:
  v14 = *((_QWORD *)v3 + 3);
  v15 = *((_QWORD *)v3 + 4);
  v16 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v73, v14);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v20 + 16))(v19, v17);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, (uint64_t)v19, v83, v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
  v21 = v83[0];
  if (v7 == 1 || (~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    if (*(_QWORD *)(v21 + 16))
    {
      outlined init with copy of __REAssetService(v21 + 32, (uint64_t)&v73);
      v22 = *((_QWORD *)&v74 + 1);
      v23 = v75;
      __swift_project_boxed_opaque_existential_1(&v73, *((uint64_t *)&v74 + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 56))(v72, v22, v23);
      LODWORD(v5) = LOBYTE(v72[0]);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      if (one-time initialization token for backwards == -1)
        goto LABEL_18;
    }
    else
    {
      __break(1u);
    }
    swift_once();
LABEL_18:
    if ((static AnimationFillMode.backwards & ~(_DWORD)v5) != 0)
      v24 = 0;
    else
      v24 = static AnimationFillMode.backwards;
    v25 = v83[0];
    v26 = *(_QWORD *)(v83[0] + 16);
    if (v26)
    {
      outlined init with copy of __REAssetService(v83[0] + 40 * v26 - 8, (uint64_t)&v73);
      v27 = *((_QWORD *)&v74 + 1);
      v28 = v75;
      __swift_project_boxed_opaque_existential_1(&v73, *((uint64_t *)&v74 + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v28 + 56))(v72, v27, v28);
      LODWORD(v5) = LOBYTE(v72[0]);
      if (one-time initialization token for forwards == -1)
      {
LABEL_23:
        v29 = static AnimationFillMode.forwards;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
        v30 = static AnimationFillMode.forwards;
        if ((v29 & ~(_DWORD)v5) != 0)
          v30 = 0;
        v31 = v30 | v24;
        v72[3] = (uint64_t)&type metadata for AnimationGroup;
        v72[4] = (uint64_t)&protocol witness table for AnimationGroup;
        v32 = swift_allocObject();
        v72[0] = v32;
        type metadata accessor for TimelineDefinition();
        v33 = swift_allocObject();
        *(_QWORD *)(v33 + 16) = 0;
        v65[0] = 0;
        v65[1] = 0;
        v66 = -1;
        v69.i8[0] = 0;
        v71 = 0;
        TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(0x65636E6575716573, 0xEE0070756F72672DLL, v65, 0, v69.i8, &v71, 0, 1, (uint64_t)&v73, 0.0, 0.0, 1.0, 0, 1, 0, 1);
        v34 = v80;
        *(_OWORD *)(v32 + 120) = v79;
        *(_OWORD *)(v32 + 136) = v34;
        *(_OWORD *)(v32 + 152) = v81;
        v35 = v76;
        *(_OWORD *)(v32 + 56) = v75;
        *(_OWORD *)(v32 + 72) = v35;
        v36 = v78;
        *(_OWORD *)(v32 + 88) = v77;
        *(_OWORD *)(v32 + 104) = v36;
        v37 = v74;
        *(_OWORD *)(v32 + 24) = v73;
        LOBYTE(v65[0]) = 0;
        v69.i8[0] = 0;
        *(_QWORD *)(v32 + 16) = v25;
        *(_QWORD *)(v32 + 168) = v82;
        *(_OWORD *)(v32 + 40) = v37;
        *(_OWORD *)(v32 + 176) = xmmword_21BE7CCA0;
        *(_QWORD *)(v32 + 192) = 0;
        *(_QWORD *)(v32 + 200) = 0;
        *(_BYTE *)(v32 + 208) = -1;
        *(_DWORD *)(v32 + 212) = 0;
        *(_BYTE *)(v32 + 216) = 0;
        *(_BYTE *)(v32 + 217) = v31;
        *(_BYTE *)(v32 + 218) = 0;
        *(_BYTE *)(v32 + 219) = 0;
        *(_QWORD *)(v32 + 224) = v33;
        swift_bridgeObjectRetain();
        v2 = specialized static AnimationResource.generate(with:)((uint64_t)v72);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        swift_bridgeObjectRelease();
        return v2;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_23;
  }
  v38 = 0;
  v60 = a1 & 0xFFFFFFFFFFFFFF8;
  v62 = v7 - 2;
  v39 = 0.0;
  v8 = 1;
  while (1)
  {
    v7 = v63;
    if (v63)
    {
      MEMORY[0x220769770](v38 + 1, a1);
    }
    else
    {
      if ((unint64_t)(v38 + 1) >= *(_QWORD *)(v60 + 16))
      {
        __break(1u);
        goto LABEL_52;
      }
      swift_retain();
    }
    v40 = REAssetHandleAssetType();
    if (v40 != 11)
      break;
    v41 = REAnimationSceneAssetGetRootTimeline();
    swift_release();
    if (!v41)
      goto LABEL_60;
LABEL_35:
    REAnimationAssetGetTotalDuration();
    v43 = v42;
    if (v7)
      MEMORY[0x220769770](v38 + 1, a1);
    else
      swift_retain();
    AnimationResource.definition.getter(v72);
    swift_release();
    *(_QWORD *)&v73 = 0;
    *((_QWORD *)&v73 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)&v73, "sequence-anim(");
    HIBYTE(v73) = -18;
    v65[0] = v38 + 1;
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 41;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    v46 = v73;
    v69 = 0uLL;
    v70 = -1;
    if (v7)
      MEMORY[0x220769770](v38 + 1, a1);
    else
      swift_retain();
    v39 = v4 + v39;
    AnimationResource.definition.getter(v65);
    swift_release();
    v48 = v67;
    v47 = v68;
    __swift_project_boxed_opaque_existential_1(v65, v67);
    (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v47 + 56))(&v71, v48, v47);
    v64 = 0;
    *((_QWORD *)&v74 + 1) = &type metadata for AnimationView;
    *(_QWORD *)&v75 = &protocol witness table for AnimationView;
    *(_QWORD *)&v73 = swift_allocObject();
    AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)((uint64_t)v72, v46, *((uint64_t *)&v46 + 1), &v69, 0, &v64, &v71, 0, v73 + 16, 0.0, v39, 1.0, 1, 0, 1, 0, 1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    v49 = (_QWORD *)v83[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
      v83[0] = (uint64_t)v49;
    }
    v5 = v49[2];
    v50 = v49[3];
    if (v5 >= v50 >> 1)
      v83[0] = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v5 + 1, 1, v49);
    v51 = *((_QWORD *)&v74 + 1);
    v52 = v75;
    v53 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v73, *((uint64_t *)&v74 + 1));
    v54 = MEMORY[0x24BDAC7A8](v53);
    v56 = (char *)&v59 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v57 + 16))(v56, v54);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, (uint64_t)v56, v83, v51, v52);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    v21 = v83[0];
    if (v62 != v38)
    {
      ++v38;
      v4 = v43;
      if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) != 0)
        continue;
    }
    goto LABEL_16;
  }
  if (v40 == 5)
  {
    swift_release();
    goto LABEL_35;
  }
  swift_release();
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  result = swift_release();
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

void AnimationResource.store(in:)()
{
  int v0;
  uint64_t ServiceLocator;
  void *v2;
  void *v3;
  id v4;

  v0 = REAssetHandleAssetType();
  if (v0 == 5 || v0 == 11 && REAnimationSceneAssetGetRootTimeline())
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    ServiceLocator = REEngineGetServiceLocator();
    if (MEMORY[0x22076FD58](ServiceLocator))
    {
      REAnimationLibraryComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if (REAnimationLibraryComponentGetAnimationLibraryAsset())
      {
        if (!REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset())
        {
          static os_log_type_t.error.getter();
          type metadata accessor for OS_os_log();
          v2 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();

          return;
        }
      }
      else
      {
        REAnimationLibraryDefinitionCreate();
      }
      REAnimationLibraryDefinitionAddEntryAsset();
      if (REAnimationLibraryDefinitionCreateAnimationLibraryAsset())
      {
        REAnimationLibraryComponentAssignAnimationLibraryAsset();
      }
      else
      {
        static os_log_type_t.error.getter();
        type metadata accessor for OS_os_log();
        v3 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

      }
      RERelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v4 = (id)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

  }
}

uint64_t AnimationResource.eventTimelineDefinition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t inited;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;

  type metadata accessor for TimelineDefinition();
  inited = swift_initStackObject();
  swift_retain();
  v3 = REAssetHandleAssetType();
  if (v3 != 5 && (v3 != 11 || !REAnimationSceneAssetGetRootTimeline()))
  {
    __break(1u);
LABEL_16:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v4 = RETimelineDefinitionCreateFromTimeline();
  swift_release();
  *(_QWORD *)(inited + 16) = v4;
  if (!v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_12;
  }
  if (!RETimelineDefinitionEventTimelineGetEventTypeName())
    goto LABEL_16;
  v5 = String.init(cString:)();
  v7 = v6;
  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  swift_beginAccess();
  v8 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    swift_bridgeObjectRetain();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5, (uint64_t)v7);
    if ((v10 & 1) != 0)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      v12 = *v11;
      v13 = v11[1];
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      *(_QWORD *)(a1 + 24) = type metadata accessor for ActionAnimation(0, v12, v13, v14);
      *(_QWORD *)(a1 + 32) = &protocol witness table for ActionAnimation<A>;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
      static EntityAction.makeActionAnimation(_:)(v12, v13, (uint64_t)boxed_opaque_existential_1);
LABEL_12:
      swift_bridgeObjectRelease();
      outlined consume of BindTarget?(0, 0, 0xFFu);
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  _StringGuts.grow(_:)(67);
  v17._countAndFlagsBits = 0xD000000000000040;
  v17._object = (void *)0x800000021BE93900;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v5;
  v18._object = v7;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 39;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(0, 0, 0xFFu);
  swift_release();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_21BDD5FE8()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v1);
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BDD6054()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm_0()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  if (*(_QWORD *)(v0 + 248))
    __swift_destroy_boxed_opaque_existential_1(v0 + 224);
  return swift_deallocObject();
}

uint64_t objectdestroy_32Tm_1()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BDD61FC()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v1);
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  if (*(_QWORD *)(v0 + 224) != 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 232) != 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 240) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BDD62A8()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v1);
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_59Tm()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v1);
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_68Tm_0()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v1);
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BDD6430()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v1);
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BDD64AC()
{
  uint64_t v0;
  int v1;
  int v2;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 152);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v1);
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(v0 + 208);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), v2);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BDD6520()
{
  uint64_t v0;
  int v1;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v1);
  swift_release();
  return swift_deallocObject();
}

void AnimationResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AnimationResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 *a6, unsigned __int8 *a7, uint64_t a8, double a9, double a10, double a11, float a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  double v33;
  unsigned __int8 v34;
  uint64_t v35;
  double *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[2];
  unsigned __int8 v62;
  uint64_t v63[6];
  int v64;
  unsigned __int8 v65;
  char v66;

  v60 = a8;
  v64 = a5;
  v52 = a1;
  v53 = a3;
  v58 = a14;
  v59 = a2;
  v57 = a16;
  v55 = a15 & 1;
  v56 = a13 & 1;
  v54 = a17 & 1;
  v51 = *(_QWORD *)(a18 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v50 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v47 - v30;
  v32 = *(_QWORD *)(a4 + 8);
  v47 = *(_QWORD *)a4;
  v49 = *a6;
  v48 = *a7;
  v33 = fmax(a9, 0.0333333333);
  if (a9 <= 0.0)
    a9 = v33;
  v34 = *(_BYTE *)(a4 + 16);
  type metadata accessor for ActionEventDefinition(255, a18, a19, v29);
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  v35 = static Array._adoptStorage(_:count:)();
  v37 = v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v31, 1, 1, AssociatedTypeWitness);
  ActionEventDefinition.init(startTime:duration:parameter:)((uint64_t)v31, a18, a19, v38, v37, 0.0, a9);
  v39 = _finalizeUninitializedArray<A>(_:)(v35);
  v40 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v52, a18);
  v41 = v47;
  v61[0] = v47;
  v61[1] = v32;
  v62 = v34;
  v66 = v49;
  v65 = v48;
  v63[3] = type metadata accessor for ActionAnimation(0, a18, a19, v42);
  v63[4] = (uint64_t)&protocol witness table for ActionAnimation<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v63);
  v44 = v53;
  swift_bridgeObjectRetain();
  outlined copy of BindTarget?(v41, v32, v34);
  ActionAnimation.init(for:events:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(v40, v39, v59, v44, v61, v64, &v66, &v65, (uint64_t)boxed_opaque_existential_1, a10, a11, a12, v60, v56, v58, v55, v57, v54, a18,
    a19);
  v45 = specialized static AnimationResource.generate(with:)((uint64_t)v63);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  return v45;
}

uint64_t specialized static AnimationResource.generate(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[2];
  uint64_t v7;
  _BYTE v8[40];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinitionInternal);
  if (swift_dynamicCast())
  {
    outlined init with take of BindableDataInternal(v6, (uint64_t)v9);
    v2 = v10;
    v3 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for AnimationDefinitionInternal?);
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v4 = 0xD00000000000001CLL;
    *(_QWORD *)(v4 + 8) = 0x800000021BE822D0;
    *(_BYTE *)(v4 + 16) = 0;
    swift_willThrow();
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type AnimationRepeatMode and conformance AnimationRepeatMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationRepeatMode and conformance AnimationRepeatMode;
  if (!lazy protocol witness table cache variable for type AnimationRepeatMode and conformance AnimationRepeatMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationRepeatMode, &type metadata for AnimationRepeatMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationRepeatMode and conformance AnimationRepeatMode);
  }
  return result;
}

uint64_t type metadata accessor for AnimationResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnimationResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnimationResource.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AnimationResource.__allocating_init(_:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for AnimationRepeatMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BDD6AB0 + 4 * byte_21BE7CCB5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BDD6AE4 + 4 * byte_21BE7CCB0[v4]))();
}

uint64_t sub_21BDD6AE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDD6AEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDD6AF4);
  return result;
}

uint64_t sub_21BDD6B00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDD6B08);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BDD6B0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDD6B14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimationRepeatMode()
{
  return &type metadata for AnimationRepeatMode;
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of REDecoder.Error();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnimationError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of REDecoder.Error();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of REDecoder.Error();
  return a1;
}

uint64_t assignWithTake for AnimationError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of REDecoder.Error();
  return a1;
}

ValueMetadata *type metadata accessor for AnimationError()
{
  return &type metadata for AnimationError;
}

void *specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  id v13;

  if (a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v7 = 4;
    while (1)
    {
      v8 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x220769770](v7 - 4, a3) : *(id *)(a3 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v13 = v8;
      v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall Scene.updateAnchoring(with:frame:updatedAnchors:removedAnchors:)(ARSession with, ARFrame frame, Swift::OpaquePointer updatedAnchors, Swift::OpaquePointer removedAnchors)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t ComponentsOfType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t Entity;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  Swift::Int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  NSString *v41;
  Class v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char IsAuthoritative;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  Class v54;
  char *v55;
  char v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(char *, uint64_t);
  uint64_t Strong;
  uint64_t active;
  uint64_t v63;
  unint64_t v64;
  char v65;
  void *v66;
  id v67;
  unint64_t v68;
  char v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  char v85;
  objc_class *v86;
  id v87;
  uint64_t v88;
  char *v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  id v97;
  Class v98;
  id v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  _QWORD *rawValue;
  char *v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  Class isa;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;

  rawValue = removedAnchors._rawValue;
  v107 = updatedAnchors._rawValue;
  isa = frame.super.isa;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v117 = (uint64_t)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v100 - v8;
  v124 = type metadata accessor for UUID();
  v121 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124);
  v116 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v122 = (char *)&v100 - v12;
  v108 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v108);
  v113 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v14);
  v115 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v100 - v17;
  v118 = (_QWORD *)v4;
  ComponentsOfType = RESceneGetComponentsOfType();
  if (v20 < 0)
    goto LABEL_106;
  v21 = v20;
  if (v20)
  {
    v22 = ComponentsOfType;
    v106 = v118 + 14;
    v23 = v118 + 11;
    v105 = v118 + 9;
    swift_beginAccess();
    v104 = v23;
    swift_beginAccess();
    v103 = *(_OWORD *)&zmmword_21BE41220[48];
    v102 = *(_OWORD *)&zmmword_21BE41220[32];
    v101 = *(_OWORD *)&zmmword_21BE41220[16];
    v100 = *(_OWORD *)zmmword_21BE41220;
    v123 = v9;
    v120 = v18;
    do
    {
      if (!v21)
      {
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
        return;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v25 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
          goto LABEL_105;
        if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
          swift_once();
        swift_beginAccess();
        if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
              (v26 & 1) == 0))
        {
          swift_endAccess();
          v27 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
          swift_beginAccess();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v127 = static SceneManager.customComponentTypeObjectIdToHandles;
          static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
          static SceneManager.customComponentTypeObjectIdToHandles = v127;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        if (!REEntityGetCustomComponent())
          goto LABEL_37;
        Object = RECustomComponentGetObject();
        if (!Object)
          goto LABEL_37;
        v30 = *(unsigned __int8 **)Object;
        if (*(_QWORD *)(Object + 8) || !v30)
        {
          swift_retain();
        }
        else
        {
          v31 = *v30;
          v32 = String.init(utf8String:)();
          if (v33)
            v34 = v32;
          else
            v34 = 0;
          if (v33)
            v35 = v33;
          else
            v35 = 0xE000000000000000;
          v30 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v31 == 42, v34, v35);
          swift_bridgeObjectRelease();
          type metadata accessor for IntrospectionDataCleanupHelper();
          *(_QWORD *)(swift_allocObject() + 16) = v30;
        }
        if (!v30)
          goto LABEL_107;
        swift_retain();
        v36 = String.init(utf8String:)();
        v38 = v37;
        swift_release();
        v39 = v38 ? v36 : 0;
        v40 = v38 ? v38 : 0xE000000000000000;
        v41 = (NSString *)MEMORY[0x220768C3C](v39, v40);
        swift_bridgeObjectRelease();
        v42 = NSClassFromString(v41);

        swift_release();
        if (!v42)
          goto LABEL_37;
        swift_getObjCClassMetadata();
        type metadata accessor for Entity();
        v43 = swift_dynamicCastMetatype();
        if (v43)
        {
          v25 = (*(uint64_t (**)(void))(v43 + 232))();
          v44 = *(_QWORD *)(v25 + 16);
          swift_retain();
          MEMORY[0x22076D160](v44, 0);
          *(_QWORD *)(v25 + 16) = Entity;
          MEMORY[0x22076D160](Entity, v25);
          swift_release();
        }
        else
        {
LABEL_37:
          v25 = makeEntity(for:)(Entity);
        }
        v9 = v123;
      }
      v45 = swift_conformsToProtocol2();
      if (v45)
        v46 = v45;
      else
        v46 = 0;
      if (v45)
        v47 = v25;
      else
        v47 = 0;
      if (v47)
      {
        v48 = *(void **)v47;
        swift_retain_n();
        RENetworkComponentGetComponentType();
        if (!REEntityGetComponentByClass())
        {
          swift_release();
          goto LABEL_52;
        }
        IsAuthoritative = RENetworkComponentIsAuthoritative();
        swift_release();
        if ((IsAuthoritative & 1) != 0)
          goto LABEL_52;
        HasAnchoring.anchoring.getter((uint64_t)v18);
        outlined init with copy of AnchoringComponent.Target((uint64_t)v18, v113);
        if ((swift_getEnumCaseMultiPayload() | 8) != 8)
        {
          outlined destroy of __RKEntityActionSpecification(v113, type metadata accessor for AnchoringComponent.Target);
          outlined destroy of __RKEntityActionSpecification((uint64_t)v18, type metadata accessor for AnchoringComponent.Target);
LABEL_52:
          v125 = v46;
          HasAnchoring.anchorIdentifier.getter((uint64_t)v9);
          v50 = v121;
          v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48);
          v52 = v124;
          if (v51(v9, 1, v124) == 1)
          {
            outlined destroy of UUID?((uint64_t)v9);
            v53 = (uint64_t)v115;
            v54 = isa;
            goto LABEL_89;
          }
          (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v122, v9, v52);
          v55 = v116;
          UUID.init(uuid:)();
          v56 = static UUID.== infix(_:_:)();
          v57 = v50;
          v58 = v56;
          v59 = *(void (**)(char *, uint64_t))(v57 + 8);
          v59(v55, v52);
          if ((v58 & 1) == 0)
          {
            if (rawValue[2])
            {
              v64 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v122);
              if ((v65 & 1) != 0)
              {
                v66 = *(void **)(rawValue[7] + 8 * v64);
                swift_retain();
                v67 = v66;
                LOBYTE(v66) = specialized Scene.reanchorToReplacementAnchor(for:with:frame:)(v47, v67, isa, v48, v125);
                swift_release();
                if ((v66 & 1) != 0)
                {
                  v59(v122, v124);

                  goto LABEL_88;
                }
                HasAnchoring.removeActiveAnchor()();

LABEL_86:
                v75 = (uint64_t)v122;
                v76 = v124;
LABEL_87:
                v59((char *)v75, v76);
LABEL_88:
                v54 = isa;
                v53 = (uint64_t)v115;
LABEL_89:
                v81 = v117;
                HasAnchoring.anchorIdentifier.getter(v117);
                v82 = v51((char *)v81, 1, v124);
                outlined destroy of UUID?(v81);
                if (v82 == 1
                  || (v83 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 184),
                      v84 = swift_retain(),
                      v85 = v83(v84),
                      swift_release(),
                      (v85 & 1) == 0))
                {
                  v86 = v54;
                  HasAnchoring.anchoring.getter(v53);
                  v87 = Scene.matchingAnchor(for:frame:)(v53, (unint64_t)v54);
                  v88 = (uint64_t)v48;
                  v89 = v120;
                  if (v87)
                  {
                    v90 = v87;
                    specialized Scene.anchorEntity(_:to:with:frame:allowPlanePositioning:)(v47, v87, v53, v54, 1, v88);

                    outlined destroy of __RKEntityActionSpecification(v53, type metadata accessor for AnchoringComponent);
                    swift_release_n();
                  }
                  else
                  {
                    outlined destroy of __RKEntityActionSpecification(v53, type metadata accessor for AnchoringComponent);
                    swift_release_n();

                  }
                  v9 = v123;
                  v18 = v89;
                }
                else
                {
                  swift_release_n();
                  v9 = v123;
                  v18 = v120;
                }
                goto LABEL_5;
              }
            }
            if (!v107[2] || (v68 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v122), (v69 & 1) == 0))
            {
              v75 = (uint64_t)v122;
              v76 = v52;
              goto LABEL_87;
            }
            v70 = *(void **)(v107[7] + 8 * v68);
            objc_opt_self();
            v71 = (void *)swift_dynamicCastObjCClass();
            v72 = v70;
            v73 = v72;
            if (v71)
            {
              v74 = v72;
              if (objc_msgSend(v71, sel_isDetectionOnly))
              {
                specialized Scene.updateEntity(_:with:)(v47, v125, v74);
LABEL_85:

                goto LABEL_86;
              }

            }
            v126 = &unk_255202438;
            v79 = swift_dynamicCastObjCProtocolConditional();
            if (v79)
            {
              v80 = (void *)v79;
              v74 = v73;
              if ((objc_msgSend(v80, sel_isTracked) & 1) == 0)
              {
                HasAnchoring.removeActiveAnchor()();
                goto LABEL_85;
              }

            }
            specialized Scene.updateEntity(_:with:)(v47, v125, v73);

            goto LABEL_86;
          }
          v60 = v59;
          Strong = swift_weakLoadStrong();
          if (Strong)
          {
            active = Strong;
            v63 = v125;
            goto LABEL_101;
          }
          active = closure #1 in Scene.internalActiveCamera.getter(54, (uint64_t)v118);
          v63 = v125;
          if (active
            || (active = closure #1 in Scene.internalActiveCamera.getter(55, (uint64_t)v118)) != 0
            || (active = closure #1 in Scene.internalActiveCamera.getter(56, (uint64_t)v118)) != 0)
          {
LABEL_101:
            *(double *)&v91 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(active, 0);
            v112 = v91;
            v111 = v92;
            v110 = v93;
            v109 = v94;
            swift_release();
          }
          else
          {
            if (!*v105)
            {
              v78 = v118[10];
              v77 = v118[11];
              v118[10] = v77;
              swift_retain_n();
              if (v78)
              {
                if (!v77 || *(_QWORD *)(v78 + 16) != *(_QWORD *)(v77 + 16))
                {
                  swift_retain();
                  REListenerComponentGetComponentType();
                  if (REEntityGetComponentByClass())
                  {
                    REListenerComponentSetSystemListener();
                    REListenerComponentGetComponentType();
                    REEntityRemoveComponentByClass();
                  }
                  swift_release();
                  if (v118[10])
                  {
LABEL_77:
                    swift_retain();
                    REListenerComponentGetComponentType();
                    REEntityGetOrAddComponentByClass();
                    REListenerComponentSetSystemListener();
                    swift_release();
                    swift_release();
                    goto LABEL_98;
                  }
                }
              }
              else if (v77)
              {
                goto LABEL_77;
              }
              swift_release();
LABEL_98:
              swift_release();
              v52 = v124;
            }
            active = *v104;
            v112 = v100;
            v111 = v101;
            v110 = v102;
            v109 = v103;
            if (active)
            {
              swift_retain();
              goto LABEL_101;
            }
          }
          v95 = v116;
          UUID.init(uuid:)();
          v96 = v52;
          v97 = objc_allocWithZone(MEMORY[0x24BDB1470]);
          v98 = UUID._bridgeToObjectiveC()().super.isa;
          v99 = objc_msgSend(v97, sel_initWithIdentifier_transform_, v98, *(double *)&v112, *(double *)&v111, *(double *)&v110, *(double *)&v109);

          v60(v95, v96);
          specialized Scene.updateEntity(_:with:)(v47, v63, v99);
          swift_release_n();

          v9 = v123;
          v60(v122, v96);
          v18 = v120;
          goto LABEL_5;
        }
        outlined destroy of __RKEntityActionSpecification((uint64_t)v18, type metadata accessor for AnchoringComponent.Target);
        swift_release_n();
      }
      else
      {
        swift_release();
      }
LABEL_5:
      v22 += 8;
      --v21;
    }
    while (v21);
  }
}

id Scene.cameraAnchor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t active;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id v9;
  Class isa;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v0 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = Scene.internalActiveCamera.getter();
  if (active)
  {
    *(double *)&v5 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(active, 0);
    v13 = v5;
    v14 = v6;
    v15 = v7;
    v16 = v8;
    swift_release();
  }
  else
  {
    v16 = *(_OWORD *)&zmmword_21BE41220[48];
    v15 = *(_OWORD *)&zmmword_21BE41220[32];
    v14 = *(_OWORD *)&zmmword_21BE41220[16];
    v13 = *(_OWORD *)zmmword_21BE41220;
  }
  UUID.init(uuid:)();
  v9 = objc_allocWithZone(MEMORY[0x24BDB1470]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(v9, sel_initWithIdentifier_transform_, isa, *(double *)&v13, *(double *)&v14, *(double *)&v15, *(double *)&v16);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v11;
}

Swift::Void __swiftcall Scene.updateAnchoring()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t ComponentsOfType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Entity;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  Swift::Int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  NSString *v31;
  Class v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  void *v44;
  char *v45;
  char v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t ComponentByClass;
  void *v51;
  id v52;
  id v53;
  float32x4_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float v59;
  float32x4_t v60;
  int32x4_t v61;
  int8x16_t v62;
  __int128 v63;
  __int128 v64;
  int8x16_t v65;
  int32x4_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;

  v1 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v1);
  v69 = (uint64_t)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v73 = (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v74 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v71 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v64 - v8;
  v75 = Scene.cameraAnchor.getter();
  v70 = v0;
  ComponentsOfType = RESceneGetComponentsOfType();
  if (v11 < 0)
    goto LABEL_71;
  v12 = v11;
  if (!v11)
  {
LABEL_67:

    return;
  }
  v13 = ComponentsOfType;
  v68 = v70 + 64;
  swift_beginAccess();
  v72 = v5;
  while (v12)
  {
    Entity = REComponentGetEntity();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v15 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_70;
      if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
        swift_once();
      swift_beginAccess();
      if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
        || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
            (v16 & 1) == 0))
      {
        swift_endAccess();
        v17 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v76 = static SceneManager.customComponentTypeObjectIdToHandles;
        static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
        static SceneManager.customComponentTypeObjectIdToHandles = v76;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v20 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8) || !v20)
          {
            swift_retain();
          }
          else
          {
            v21 = *v20;
            v22 = String.init(utf8String:)();
            if (v23)
              v24 = v22;
            else
              v24 = 0;
            if (v23)
              v25 = v23;
            else
              v25 = 0xE000000000000000;
            v20 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v21 == 42, v24, v25);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(_QWORD *)(swift_allocObject() + 16) = v20;
          }
          if (!v20)
            goto LABEL_72;
          swift_retain();
          v26 = String.init(utf8String:)();
          v28 = v27;
          swift_release();
          v29 = v28 ? v26 : 0;
          v30 = v28 ? v28 : 0xE000000000000000;
          v31 = (NSString *)MEMORY[0x220768C3C](v29, v30);
          swift_bridgeObjectRelease();
          v32 = NSClassFromString(v31);

          swift_release();
          v5 = v72;
          if (v32)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v33 = swift_dynamicCastMetatype();
            if (v33)
            {
              v34 = (*(uint64_t (**)(void))(v33 + 232))();
              v35 = *(_QWORD *)(v34 + 16);
              swift_retain();
              MEMORY[0x22076D160](v35, 0);
              *(_QWORD *)(v34 + 16) = Entity;
              MEMORY[0x22076D160](Entity, v34);
              swift_release();
              goto LABEL_39;
            }
          }
        }
      }
      v15 = makeEntity(for:)(Entity);
    }
    v34 = v15;
LABEL_39:
    if (swift_conformsToProtocol2())
      v36 = (uint64_t *)v34;
    else
      v36 = 0;
    if (v36)
    {
      v37 = *v36;
      swift_retain();
      RENetworkComponentGetComponentType();
      if (REEntityGetComponentByClass() && (RENetworkComponentIsAuthoritative() & 1) == 0)
        goto LABEL_51;
      v38 = v73;
      HasAnchoring.anchorIdentifier.getter(v73);
      v39 = v74;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v38, 1, v5) == 1)
      {
        outlined destroy of UUID?(v38);
        RENetworkComponentGetComponentType();
        if (!REEntityGetComponentByClass() || RENetworkComponentIsAuthoritative())
        {
          v40 = (void *)MEMORY[0x22077301C](v68);
          v41 = objc_msgSend(v40, sel_currentFrame);

          v42 = v69;
          HasAnchoring.anchoring.getter(v69);
          v43 = Scene.matchingAnchor(for:frame:)(v42, (unint64_t)v41);
          if (v43)
          {
            v44 = v43;
            specialized Scene.anchorEntity(_:to:with:frame:allowPlanePositioning:)((uint64_t)v36, v43, v42, v41, 1, v37);

            outlined destroy of __RKEntityActionSpecification(v42, type metadata accessor for AnchoringComponent);
            swift_release_n();
          }
          else
          {
            outlined destroy of __RKEntityActionSpecification(v42, type metadata accessor for AnchoringComponent);
            swift_release_n();

          }
          v5 = v72;
          goto LABEL_5;
        }
LABEL_51:
        swift_release_n();
        goto LABEL_5;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v9, v38, v5);
      v45 = v71;
      UUID.init(uuid:)();
      v46 = static UUID.== infix(_:_:)();
      v47 = v39;
      v48 = v46;
      v49 = *(void (**)(char *, uint64_t))(v47 + 8);
      v49(v45, v5);
      if ((v48 & 1) != 0)
      {
        REAnchorComponentGetComponentType();
        ComponentByClass = REEntityGetComponentByClass();
        if (!ComponentByClass && !REComponentCreateByType())
          goto LABEL_73;
        objc_opt_self();
        v51 = (void *)swift_dynamicCastObjCClass();
        v52 = v75;
        if (v51)
        {
          v53 = v75;
          if (objc_msgSend(v51, sel_alignment))
          {

            v52 = v75;
            goto LABEL_58;
          }
          objc_msgSend(v51, sel_transform);
          if (one-time initialization token for identity != -1)
          {
            v66 = v55;
            v67 = (__int128)v54;
            v65 = v56;
            v64 = (__int128)v57;
            swift_once();
            v57 = (int32x4_t)v64;
            v56 = v65;
            v55 = v66;
            v54 = (float32x4_t)v67;
          }
          v58 = v57;
          v58.i32[3] = 0;
          v66 = v58;
          v67 = static simd_quatf.identity;
          LODWORD(v59) = simd_float4x4.scale.getter(v54, v55, v56).n64_u32[0];
          *(double *)v60.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v66.i64, (float32x4_t)v67, v59);
          v66 = v61;
          v67 = (__int128)v60;
          v65 = v62;
          v64 = v63;

        }
        else
        {
LABEL_58:
          objc_msgSend(v52, sel_transform);
        }
        v5 = v72;
        REAnchorComponentSetWorldTransform();
        REAnchorComponentSetAnchoredLocally();
        if (!ComponentByClass)
        {
          REEntityAddExistingComponent();
          RERelease();
        }
        swift_release_n();
        v49(v9, v5);
        goto LABEL_5;
      }
      v49(v9, v5);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
LABEL_5:
    v13 += 8;
    if (!--v12)
      goto LABEL_67;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
}

id Scene.matchingAnchor(for:frame:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  int EnumCaseMultiPayload;
  __int128 v22;
  __int128 v23;
  id v24;
  Class isa;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  id v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned __int8 v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  int v48;
  id v49;
  uint64_t v50;
  float v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  unint64_t v59;
  uint64_t (*v60)(id *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  id v62;
  id v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  unint64_t v76;
  id v77;
  id v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  unint64_t v82;
  void *v83;
  id v84;
  unint64_t v85;
  uint64_t v86;
  id v87;
  unint64_t v88;
  void *v89;
  id v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  int v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  double v103[3];
  void *v104;

  v4 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource(0);
  MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)&v103[0] = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AnchoringComponent.ImageAnchoringSource(0);
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)&v102 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v92 - v13;
  v15 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)((char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (__int128 *)((char *)&v92 - v19);
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)&v92 - v19);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v22 = v20[3];
    v102 = v20[2];
    *(_OWORD *)v103 = v22;
    v23 = v20[1];
    v100 = *v20;
    v101 = v23;
    UUID.init()();
    v24 = objc_allocWithZone(MEMORY[0x24BDB1470]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    a2 = (unint64_t)objc_msgSend(v24, sel_initWithIdentifier_transform_, isa, *(double *)&v100, *(double *)&v101, *(double *)&v102, v103[0]);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return (id)a2;
  }
  if (EnumCaseMultiPayload == 8)
    return Scene.cameraAnchor.getter();
  outlined destroy of __RKEntityActionSpecification((uint64_t)v20, type metadata accessor for AnchoringComponent.Target);
  if (!a2)
    return (id)a2;
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v27 = v17;
      v28 = v8;
      (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v27, v8);
      v29 = (id)a2;
      v30 = objc_msgSend(v29, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      MEMORY[0x24BDAC7A8](v32);
      *(&v92 - 2) = (uint64_t)v11;
      a2 = (unint64_t)specialized Sequence.first(where:)(partial apply for closure #1 in Scene.matchingAnchor(for:frame:), (uint64_t)(&v92 - 4), v31);
      swift_bridgeObjectRelease();
      if (a2 && (v104 = &unk_255202438, (v33 = (void *)swift_dynamicCastObjCProtocolConditional()) != 0))
      {
        v34 = objc_msgSend(v33, sel_isTracked);

        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v28);
        if ((v34 & 1) == 0)
        {

          return 0;
        }
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      }
      return (id)a2;
    case 2u:
      LODWORD(v35) = *(unsigned __int8 *)v17;
      *(_QWORD *)&v103[0] = v17[1];
      *(_QWORD *)&v26 = v17[2];
      v102 = v26;
      v97 = (id)a2;
      v36 = objc_msgSend(v97, sel_hitTest_types_, 16, 0.5, 0.5);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARHitTestResult);
      a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (a2 >> 62)
        goto LABEL_94;
      v37 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v37)
        goto LABEL_95;
      goto LABEL_13;
    case 3u:
      v53 = *v17;
      v54 = v17[1];
      v56 = v17[2];
      v55 = v17[3];
      v57 = (id)a2;
      v58 = objc_msgSend(v57, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in Scene.matchingAnchor(for:frame:);
      goto LABEL_49;
    case 4u:
      v61 = v102;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v17, v102, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
      v62 = (id)a2;
      v63 = objc_msgSend(v62, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v64 >> 62))
      {
        v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v65)
          goto LABEL_40;
LABEL_47:

        swift_bridgeObjectRelease();
        a2 = 0;
LABEL_86:
        swift_bridgeObjectRelease();
        outlined destroy of __RKEntityActionSpecification(v61, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
        return (id)a2;
      }
      swift_bridgeObjectRetain();
      v65 = _CocoaArrayWrapper.endIndex.getter();
      if (!v65)
        goto LABEL_47;
LABEL_40:
      v35 = v64 & 0xC000000000000001;
      v66 = 4;
      while (1)
      {
        v67 = v35 ? (id)MEMORY[0x220769770](v66 - 4, v64) : *(id *)(v64 + 8 * v66);
        a2 = (unint64_t)v67;
        v68 = v66 - 3;
        if (__OFADD__(v66 - 4, 1))
          break;
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {

          swift_bridgeObjectRelease();
          goto LABEL_86;
        }

        ++v66;
        if (v68 == v65)
          goto LABEL_47;
      }
      while (1)
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        swift_bridgeObjectRetain();
        v37 = _CocoaArrayWrapper.endIndex.getter();
        if (!v37)
          break;
LABEL_13:
        LODWORD(v101) = v35 & 2;
        v98 = v35 & 1;
        v95 = LOBYTE(v103[0]) & 8;
        v96 = LOBYTE(v103[0]) & 0x10;
        v93 = LOBYTE(v103[0]) & 2;
        v94 = LOBYTE(v103[0]) & 4;
        v99 = LOBYTE(v103[0]) & 1;
        v38 = *((float *)&v102 + 1);
        v39 = 4;
        while (1)
        {
          v40 = (a2 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x220769770](v39 - 4, a2)
              : *(id *)(a2 + 8 * v39);
          v41 = v40;
          v42 = v39 - 3;
          if (__OFADD__(v39 - 4, 1))
            break;
          v43 = objc_msgSend(v40, sel_anchor);
          if (v43)
          {
            v44 = v43;
            objc_opt_self();
            v45 = (void *)swift_dynamicCastObjCClass();
            if (!v45)
              goto LABEL_14;
            v46 = v45;
            v47 = objc_msgSend(v45, sel_alignment);
            if ((_DWORD)v35 != 255)
            {
              v48 = v101;
              if (v47 != (id)1)
              {
                v48 = v98;
                if (v47)
                  goto LABEL_14;
              }
              if (!v48)
                goto LABEL_14;
            }
            v49 = objc_msgSend(v46, sel_classification);
            if (*(_QWORD *)&v103[0] != -1)
            {
              v50 = v99;
              switch((unint64_t)v49)
              {
                case 1uLL:
                  break;
                case 2uLL:
                  v50 = v93;
                  break;
                case 3uLL:
                  v50 = v94;
                  break;
                case 4uLL:
                  v50 = v95;
                  break;
                case 5uLL:
                  v50 = v96;
                  break;
                default:
                  goto LABEL_14;
              }
              if (!v50)
                goto LABEL_14;
            }
            objc_msgSend(v46, sel_extent);
            if (*(float *)&v102 <= v51)
            {
              objc_msgSend(v46, sel_extent);
              v100 = v52;

              v44 = v41;
              if (v38 <= *((float *)&v100 + 2))
                goto LABEL_96;
            }
            else
            {
LABEL_14:

            }
          }
          else
          {
            v44 = v41;
          }

          ++v39;
          if (v42 == v37)
            goto LABEL_95;
        }
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
      }
LABEL_95:
      v41 = 0;
LABEL_96:
      swift_bridgeObjectRelease_n();
      v90 = v41;
      a2 = (unint64_t)objc_msgSend(v90, sel_anchor);

      return (id)a2;
    case 5u:
      v53 = *v17;
      v54 = v17[1];
      v56 = v17[2];
      v55 = v17[3];
      v57 = (id)a2;
      v69 = objc_msgSend(v57, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t, uint64_t))closure #5 in Scene.matchingAnchor(for:frame:);
LABEL_49:
      a2 = (unint64_t)specialized Sequence.first(where:)(v59, v53, v54, v56, v55, v60);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return (id)a2;
    case 6u:
      v70 = *(_QWORD *)&v103[0];
      outlined init with take of __RKEntityActionSpecification((uint64_t)v17, *(uint64_t *)&v103[0], type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
      v71 = (id)a2;
      v72 = objc_msgSend(v71, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v73 >> 62)
      {
        swift_bridgeObjectRetain();
        v74 = _CocoaArrayWrapper.endIndex.getter();
        if (v74)
        {
LABEL_52:
          v35 = 4;
          while (1)
          {
            if ((v73 & 0xC000000000000001) != 0)
              v75 = (id)MEMORY[0x220769770](v35 - 4, v73);
            else
              v75 = *(id *)(v73 + 8 * v35);
            a2 = (unint64_t)v75;
            v76 = v35 - 3;
            if (__OFADD__(v35 - 4, 1))
              goto LABEL_93;
            objc_opt_self();
            if (swift_dynamicCastObjCClass())
              break;

            ++v35;
            if (v76 == v74)
              goto LABEL_59;
          }

          swift_bridgeObjectRelease();
LABEL_88:
          swift_bridgeObjectRelease();
          outlined destroy of __RKEntityActionSpecification(v70, type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
          return (id)a2;
        }
      }
      else
      {
        v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v74)
          goto LABEL_52;
      }
LABEL_59:

      swift_bridgeObjectRelease();
      a2 = 0;
      goto LABEL_88;
    case 9u:
      v77 = (id)a2;
      v78 = objc_msgSend(v77, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v79 >> 62)
      {
        swift_bridgeObjectRetain();
        v80 = _CocoaArrayWrapper.endIndex.getter();
        if (!v80)
          goto LABEL_104;
      }
      else
      {
        v80 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v80)
          goto LABEL_104;
      }
      v35 = 4;
      while (2)
      {
        if ((v79 & 0xC000000000000001) != 0)
          v81 = (id)MEMORY[0x220769770](v35 - 4, v79);
        else
          v81 = *(id *)(v79 + 8 * v35);
        a2 = (unint64_t)v81;
        v82 = v35 - 3;
        if (__OFADD__(v35 - 4, 1))
          goto LABEL_90;
        objc_opt_self();
        v83 = (void *)swift_dynamicCastObjCClass();
        if (!v83 || !objc_msgSend(v83, sel_isTracked))
        {

          ++v35;
          if (v82 == v80)
            goto LABEL_104;
          continue;
        }
        goto LABEL_83;
      }
    case 0xAu:
      v77 = (id)a2;
      v84 = objc_msgSend(v77, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      v85 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v85 >> 62)
      {
        swift_bridgeObjectRetain();
        v86 = _CocoaArrayWrapper.endIndex.getter();
        if (v86)
        {
LABEL_75:
          v35 = 4;
          while (1)
          {
            if ((v85 & 0xC000000000000001) != 0)
              v87 = (id)MEMORY[0x220769770](v35 - 4, v85);
            else
              v87 = *(id *)(v85 + 8 * v35);
            a2 = (unint64_t)v87;
            v88 = v35 - 3;
            if (__OFADD__(v35 - 4, 1))
              goto LABEL_91;
            objc_opt_self();
            v89 = (void *)swift_dynamicCastObjCClass();
            if (v89)
            {
              if (objc_msgSend(v89, sel_isTracked))
                break;
            }

            ++v35;
            if (v88 == v86)
              goto LABEL_104;
          }
LABEL_83:

          swift_bridgeObjectRelease();
LABEL_105:
          swift_bridgeObjectRelease();
          return (id)a2;
        }
      }
      else
      {
        v86 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v86)
          goto LABEL_75;
      }
LABEL_104:

      swift_bridgeObjectRelease();
      a2 = 0;
      goto LABEL_105;
    default:
      outlined destroy of __RKEntityActionSpecification((uint64_t)v17, type metadata accessor for AnchoringComponent.Target);
      return 0;
  }
}

uint64_t closure #1 in Scene.matchingAnchor(for:frame:)(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  char v8;
  uint64_t v10;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = MEMORY[0x24BDAC7A8](v2).n128_u64[0];
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*a1, sel_identifier, v4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8 & 1;
}

id closure #3 in Scene.matchingAnchor(for:frame:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  char v51;
  char v52;
  char v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;

  v9 = *a1;
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = one-time initialization token for schemePrefix;
    v13 = v9;
    if (v12 != -1)
      swift_once();
    if (String.hasPrefix(_:)((Swift::String)static __RealityFileURLResolver.schemePrefix))
    {
      v59 = v13;
      v14 = type metadata accessor for __RealityFileURLResolver();
      v15 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v15, (uint64_t)&v55);
      v16 = v57;
      v17 = v58;
      v18 = __swift_project_boxed_opaque_existential_1(&v55, v57);
      specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v18, v14, v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
      v19._countAndFlagsBits = 47;
      v19._object = (void *)0xE100000000000000;
      if (String.hasSuffix(_:)(v19)
        || (v20 = 47,
            v21 = (void *)0xE100000000000000,
            v22._countAndFlagsBits = 47,
            v22._object = (void *)0xE100000000000000,
            String.hasPrefix(_:)(v22)))
      {
        v20 = 0;
        v21 = (void *)0xE000000000000000;
      }
      v55 = a2;
      v56 = a3;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = v20;
      v23._object = v21;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v24._countAndFlagsBits = a4;
      v24._object = a5;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v26 = v55;
      v25 = v56;
      v27 = objc_msgSend(v11, sel_name);
      if (v27)
      {
        v28 = v27;
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v31 = v30;

        v13 = v59;
        if (v29 == v26 && v31 == v25)
        {
          swift_bridgeObjectRelease_n();
          swift_release();
LABEL_33:
          v32 = objc_msgSend(v11, sel_isTracked);
          goto LABEL_34;
        }
        v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v32 = 0;
        if ((v51 & 1) != 0)
          goto LABEL_33;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        v32 = 0;
        v13 = v59;
      }
      goto LABEL_34;
    }
    v33._countAndFlagsBits = 979661685;
    v33._object = (void *)0xE400000000000000;
    if (String.hasPrefix(_:)(v33))
    {
      v34._countAndFlagsBits = 47;
      v34._object = (void *)0xE100000000000000;
      if (String.hasSuffix(_:)(v34)
        || (v35 = 47,
            v36 = (void *)0xE100000000000000,
            v37._countAndFlagsBits = 47,
            v37._object = (void *)0xE100000000000000,
            String.hasPrefix(_:)(v37)))
      {
        v35 = 0;
        v36 = (void *)0xE000000000000000;
      }
      v55 = a2;
      v56 = a3;
      swift_bridgeObjectRetain();
      v38._countAndFlagsBits = v35;
      v38._object = v36;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v39._countAndFlagsBits = a4;
      v39._object = a5;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40 = a2;
      v41 = objc_msgSend(v11, sel_name);
      if (v41)
      {
        v42 = v41;
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v45 = v44;

        if (v43 == v40 && v45 == a3)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_33;
        }
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32 = 0;
        if ((v52 & 1) != 0)
          goto LABEL_33;
LABEL_34:

        return v32;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = objc_msgSend(v11, sel_name);
      if (v46)
      {
        v47 = v46;
        v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v50 = v49;

        if (v48 == a4 && v50 == a5)
        {
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v32 = 0;
        if ((v53 & 1) != 0)
          goto LABEL_33;
        goto LABEL_34;
      }
    }
    v32 = 0;
    goto LABEL_34;
  }
  return 0;
}

uint64_t closure #5 in Scene.matchingAnchor(for:frame:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;

  v9 = *a1;
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (!v10)
    goto LABEL_29;
  v11 = (void *)v10;
  v12 = one-time initialization token for schemePrefix;
  v13 = v9;
  if (v12 != -1)
    swift_once();
  if (String.hasPrefix(_:)((Swift::String)static __RealityFileURLResolver.schemePrefix))
  {
    v57 = v13;
    v14 = type metadata accessor for __RealityFileURLResolver();
    v15 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v15, (uint64_t)&v53);
    v16 = v55;
    v17 = v56;
    v18 = __swift_project_boxed_opaque_existential_1(&v53, v55);
    specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v18, v14, v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    v19._countAndFlagsBits = 47;
    v19._object = (void *)0xE100000000000000;
    if (String.hasSuffix(_:)(v19)
      || (v20 = 47,
          v21 = (void *)0xE100000000000000,
          v22._countAndFlagsBits = 47,
          v22._object = (void *)0xE100000000000000,
          String.hasPrefix(_:)(v22)))
    {
      v20 = 0;
      v21 = (void *)0xE000000000000000;
    }
    v53 = a2;
    v54 = a3;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v20;
    v23._object = v21;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = a4;
    v24._object = a5;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v26 = v53;
    v25 = v54;
    v27 = objc_msgSend(v11, sel_name);
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v31 = v30;

      v32 = v57;
      if (v29 == v26 && v31 == v25)
        v33 = 1;
      else
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      return v33 & 1;
    }
    swift_bridgeObjectRelease();
    swift_release();

    goto LABEL_29;
  }
  v34._countAndFlagsBits = 979661685;
  v34._object = (void *)0xE400000000000000;
  if (String.hasPrefix(_:)(v34))
  {
    v35._countAndFlagsBits = 47;
    v35._object = (void *)0xE100000000000000;
    if (String.hasSuffix(_:)(v35)
      || (v36 = 47,
          v37 = (void *)0xE100000000000000,
          v38._countAndFlagsBits = 47,
          v38._object = (void *)0xE100000000000000,
          String.hasPrefix(_:)(v38)))
    {
      v36 = 0;
      v37 = (void *)0xE000000000000000;
    }
    v54 = a3;
    swift_bridgeObjectRetain();
    v39._countAndFlagsBits = v36;
    v39._object = v37;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v40._countAndFlagsBits = a4;
    v40._object = a5;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41 = objc_msgSend(v11, sel_name);
    if (v41)
    {
      v42 = v41;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v45 = v44;

      if (v43 == a2 && v45 == a3)
        v33 = 1;
      else
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v33 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  v46 = objc_msgSend(v11, sel_name);
  if (!v46)
  {
LABEL_28:

LABEL_29:
    v33 = 0;
    return v33 & 1;
  }
  v47 = v46;
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v50 = v49;

  if (v48 == a4 && v50 == a5)
  {
    swift_bridgeObjectRelease();

    v33 = 1;
    return v33 & 1;
  }
  v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();

  return v52 & 1;
}

float SIMD3<>.rotationOnPlane(normal:forward:)(int32x4_t a1, int8x16_t a2, float32x4_t a3)
{
  float32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x2_t v10;
  float result;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;

  v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a1, a1), (int8x16_t)a1, 0xCuLL);
  v4 = (int32x4_t)vmlaq_f32(vmulq_f32(v3, vnegq_f32(a3)), (float32x4_t)a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL);
  v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), vnegq_f32((float32x4_t)a1)), v5, v3);
  v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL);
  v8 = (int32x4_t)vmulq_f32(v6, v6);
  v5.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), *(float32x2_t *)v8.i8)).u32[0];
  *(float32x2_t *)v6.f32 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  *(float32x2_t *)v6.f32 = vmul_f32(*(float32x2_t *)v6.f32, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32)));
  v9 = (int8x16_t)vmulq_n_f32(v7, vmul_f32(*(float32x2_t *)v6.f32, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32))).f32[0]);
  v19 = (float32x4_t)v9;
  v6.i32[1] = a2.i32[1];
  v7.f32[0] = vmuls_n_f32(*(float *)a2.i32, *(float *)v9.i32);
  v6.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v9.i32[0] = vextq_s8(v9, v9, 8uLL).u32[0];
  v10 = vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v9.i8);
  result = acosf(fminf(fmaxf(v10.f32[0] + (float)(v7.f32[0] + v10.f32[1]), -1.0), 1.0));
  v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32((float32x4_t)a2)), v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), a2, 0xCuLL));
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  v14 = (int32x4_t)vmulq_f32(v12, v12);
  v14.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), *(float32x2_t *)v14.i8)).u32[0];
  v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
  v17 = (int8x16_t)vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  v18 = (int8x16_t)a1;
  *(float *)v14.i32 = vmuls_n_f32(*(float *)a1.i32, *(float *)v17.i32);
  v18.i32[0] = vextq_s8(v18, v18, 8uLL).u32[0];
  v17.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
  *(float32x2_t *)v17.i8 = vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v17.i8);
  if ((float)(*(float *)v17.i32 + (float)(*(float *)v14.i32 + *(float *)&v17.i32[1])) <= 0.0)
    return -result;
  return result;
}

void rotationThatFitsRect(rotation:size:rectSize:)(float a1, double a2, double a3)
{
  float v3;
  float v4;
  float v5;
  char v6;
  char v7;
  char v8;
  char v9;
  float32x2_t v11;

  v3 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&a2, *(float32x2_t *)&a2)));
  if (v3 >= 0.00000011921)
  {
    v4 = *((float *)&a3 + 1);
    v5 = *((float *)&a3 + 1) / v3;
    v6 = 2;
    v7 = -2;
    v8 = 1;
    if (a1 >= -0.7854)
      v9 = 0;
    else
      v9 = -1;
    if (a1 <= 0.7854)
      v8 = v9;
    if (a1 >= -2.3562)
      v7 = v8;
    if (a1 <= 2.3562)
      v6 = v7;
    v11 = (float32x2_t)vbsl_s8((int8x8_t)vceqd_s64(v6 & 1, 0), *(int8x8_t *)&a2, (int8x8_t)vrev64_s32(*(int32x2_t *)&a2));
    if ((float)(*(float *)&a3 / v3) >= 1.0)
    {
      if (v5 >= 1.0)
        return;
      goto LABEL_19;
    }
    acosf(*(float *)&a3 / v3);
    if ((vcgt_f32(*(float32x2_t *)&a3, v11).u8[0] & 1) != 0)
    {
      acosf(*(float *)&a2 / v3);
    }
    else if ((vcgt_f32(*(float32x2_t *)&a3, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1)).u32[0] & 1) != 0)
    {
      acosf(*((float *)&a2 + 1) / v3);
    }
    if (v5 < 1.0)
    {
LABEL_19:
      acosf(v5);
      if ((vcgt_f32(*(float32x2_t *)&a3, v11).i32[1] & 1) != 0)
      {
        acosf(*((float *)&a2 + 1) / v3);
      }
      else if (v11.f32[0] < v4)
      {
        acosf(*(float *)&a2 / v3);
      }
    }
  }
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(id *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  char v15;
  id v20;

  if (a1 >> 62)
    goto LABEL_16;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    v11 = 4;
    while (1)
    {
      v12 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x220769770](v11 - 4, a1) : *(id *)(a1 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v20 = v12;
      v15 = a6(&v20, a2, a3, a4, a5);
      if (v6)
      {
        swift_bridgeObjectRelease();

        return v13;
      }
      if ((v15 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v13;
      }

      ++v11;
      if (v14 == v10)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Scene.updateEntity(_:with:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ComponentByClass;
  uint64_t result;
  uint64_t v6;
  void *v7;
  id v8;
  float32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  double v12;
  float v13;
  int8x16_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  double v18;

  REAnchorComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (!ComponentByClass)
  {
    result = REComponentCreateByType();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  objc_opt_self();
  v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    v7 = (void *)v6;
    v8 = a3;
    if (!objc_msgSend(v7, sel_alignment))
    {
      objc_msgSend(v7, sel_transform);
      v18 = v12;
      if (one-time initialization token for identity != -1)
      {
        v15 = v10;
        v17 = v9;
        v14 = v11;
        swift_once();
        v11 = v14;
        v10 = v15;
        v9 = v17;
      }
      v16 = (float32x4_t)static simd_quatf.identity;
      LODWORD(v13) = simd_float4x4.scale.getter(v9, v10, v11).n64_u32[0];
      specialized simd_float4x4.init(translation:rotation:scale:)(v18, v16, v13);

      goto LABEL_10;
    }

  }
  objc_msgSend(a3, sel_transform);
LABEL_10:
  REAnchorComponentSetWorldTransform();
  result = REAnchorComponentSetAnchoredLocally();
  if (!ComponentByClass)
  {
    REEntityAddExistingComponent();
    return RERelease();
  }
  return result;
}

uint64_t specialized Scene.positionEntity(_:on:frame:minimumBounds:)(int a1, id a2, double a3, void *a4)
{
  unsigned int v6;
  unsigned int v7;
  float v8;
  float32x4_t v9;
  float v10;
  __float2 v11;
  __n128 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  id v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int128 v33;
  BOOL v34;
  BOOL v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  float32x4_t v44;
  float v45;
  double v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  __int128 v56;
  uint64_t result;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  unsigned int v70;
  unsigned int v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  __int128 v76;
  float32x4_t v77;
  float32x4_t v79;
  float32x4_t v80;
  _QWORD v81[5];
  _BYTE v82[64];
  _BYTE v83[64];
  _BYTE v84[64];
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t v88;
  char v89;
  uint64_t v90;
  simd_float4x4 v91;

  v90 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a2, sel_center);
  objc_msgSend(a2, sel_center);
  objc_msgSend(a2, sel_extent);
  v71 = v6;
  objc_msgSend(a2, sel_extent);
  v70 = v7;
  if (objc_msgSend(a2, sel_alignment))
  {
    v66 = *(float32x4_t *)&zmmword_21BE41220[48];
    v65 = *(float32x4_t *)&zmmword_21BE41220[32];
    v64 = *(float32x4_t *)&zmmword_21BE41220[16];
    v63 = *(float32x4_t *)zmmword_21BE41220;
    v8 = 0.0;
  }
  else
  {
    objc_msgSend(a2, sel_transform);
    v9.i32[3] = 0;
    v10 = SIMD3<>.rotationOnPlane(normal:forward:)(*(int32x4_t *)&zmmword_21BE41220[16], *(int8x16_t *)&zmmword_21BE41220[32], v9);
    v11 = __sincosf_stret(v10 * 0.5);
    v12 = (__n128)vmulq_n_f32(*(float32x4_t *)&zmmword_21BE41220[16], v11.__sinval);
    v12.n128_u32[3] = LODWORD(v11.__cosval);
    *(double *)v13.i64 = MEMORY[0x220769344](v12);
    v63 = v13;
    v64 = v14;
    v65 = v15;
    v66 = v16;
    v17 = objc_msgSend(a4, sel_camera);
    objc_msgSend(v17, sel_transform);
    v74 = v18;

    v19 = v74;
    v19.i32[3] = 0;
    v75 = v19;
    objc_msgSend(a2, sel_transform);
    v20.i32[3] = 0;
    v58 = v20;
    objc_msgSend(a2, sel_transform);
    v22 = v21;
    v22.i32[3] = 0;
    v23 = SIMD3<>.rotationOnPlane(normal:forward:)(v58, v22, v75);
    rotationThatFitsRect(rotation:size:rectSize:)(v23, a3, COERCE_DOUBLE(__PAIR64__(v70, v71)));
    v8 = v24;
    v25 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a3)));
    if (v25 >= 0.00000011921)
    {
      v26 = acosf(*(float *)&a3 / v25);
      fabsf(v25 * cosf(v8 + v26));
      v27 = acosf(*((float *)&a3 + 1) / v25);
      cosf(v8 + v27);
    }
  }
  v28 = objc_msgSend(a4, sel_camera);
  objc_msgSend(a2, sel_transform);
  objc_msgSend(v28, sel_unprojectPoint_ontoPlaneWithTransform_orientation_viewportSize_, 3, 0.5, 0.5, v29, v30, v31, v32, 1.0, 1.0);
  v76 = v33;

  if (((~(_DWORD)v76 & 0x7F800000) != 0 || (v76 & 0x7FFFFF) == 0)
    && ((~DWORD1(v76) & 0x7F800000) == 0 ? (v34 = (DWORD1(v76) & 0x7FFFFF) == 0) : (v34 = 1),
        v34 && ((~DWORD2(v76) & 0x7F800000) == 0 ? (v35 = (DWORD2(v76) & 0x7FFFFF) == 0) : (v35 = 1), v35)))
  {
    objc_msgSend(a2, sel_transform);
    __invert_f4(v91);
    __sincosf_stret(v8 * 0.5);
    REComposeMatrix();
    v68 = v36;
    v72 = v37;
    v77 = v38;
    v79 = v39;
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v81);
    v40 = *(float *)v81;
    v42 = v81[2];
    v41 = v81[3];
    v43 = *(double *)&v81[4];
    swift_release();
    outlined init with take of Transform?((uint64_t)v81, (uint64_t)v84);
    if ((v84[48] & 1) != 0)
    {
      if (one-time initialization token for identity != -1)
        swift_once();
      v45 = *(float *)&static Transform.identity;
      v44 = (float32x4_t)xmmword_2551B1050;
      v46 = *(double *)&xmmword_2551B1060;
    }
    else
    {
      v45 = v40;
      v44.i64[0] = v42;
      v44.i64[1] = v41;
      v46 = v43;
    }
    *(double *)v47.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v46, v44, v45);
    v59 = v47;
    v60 = v48;
    v61 = v50;
    v62 = v49;
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v82);
    swift_release();
    outlined init with take of Transform?((uint64_t)v82, (uint64_t)v83);
    if (v83[48] == 1 && one-time initialization token for identity != -1)
      swift_once();
    v51 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v68.f32[0]), v64, *(float32x2_t *)v68.f32, 1), v65, v68, 2), v66, v68, 3);
    v52 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v72.f32[0]), v64, *(float32x2_t *)v72.f32, 1), v65, v72, 2), v66, v72, 3);
    v53 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v77.f32[0]), v64, *(float32x2_t *)v77.f32, 1), v65, v77, 2), v66, v77, 3);
    v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v79.f32[0]), v64, *(float32x2_t *)v79.f32, 1), v65, v79, 2), v66, v79, 3);
    v67 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v59.f32[0]), v52, *(float32x2_t *)v59.f32, 1), v53, v59, 2), v54, v59, 3);
    v69 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v60.f32[0]), v52, *(float32x2_t *)v60.f32, 1), v53, v60, 2), v54, v60, 3);
    v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v61.f32[0]), v52, *(float32x2_t *)v61.f32, 1), v53, v61, 2), v54, v61, 3);
    v55.i32[3] = 0;
    v80 = v55;
    v85 = 0u;
    v73 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v62.f32[0]), v52, *(float32x2_t *)v62.f32, 1), v53, v62, 2), v54, v62, 3);
    REDecomposeMatrix();
    *(__n64 *)&v56 = simd_float4x4.scale.getter(v67, v69, v73);
    v85 = v56;
    v86 = 0;
    v87 = 0;
    v88 = v80;
    v89 = 0;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v85);
    return swift_release();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized Scene.anchorEntity(_:to:with:frame:allowPlanePositioning:)(uint64_t a1, void *a2, uint64_t a3, void *a4, int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t ComponentByClass;
  id v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  __n128 v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  double v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  __int128 v74;
  float32x4_t v75;
  __int128 v76;
  uint64_t v77;
  simd_float4x4 v78;
  simd_float4x4 v79;

  v57 = a6;
  v62 = a5;
  v55 = a4;
  v64 = a3;
  v77 = *MEMORY[0x24BDAC8D0];
  v63 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v63);
  v56 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v60 = (char *)&v54 - v10;
  v73.i64[0] = type metadata accessor for UUID();
  v72.i64[0] = *(_QWORD *)(v73.i64[0] - 8);
  MEMORY[0x24BDAC7A8](v73.i64[0]);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a1;
  REAnchorComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  v61 = ComponentByClass;
  if (!ComponentByClass)
    ComponentByClass = REComponentCreateByType();
  v14 = objc_msgSend(a2, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = UUID.uuid.getter();
  LOBYTE(v14) = v15;
  v17 = v16;
  v18 = v15 >> 8;
  v19 = v15 >> 16;
  v59 = a2;
  v20 = v15 >> 24;
  v21 = HIDWORD(v15);
  v22 = v15 >> 40;
  v23 = HIWORD(v15);
  v65 = HIBYTE(v15);
  v66.i64[0] = v16 >> 8;
  v67.i64[0] = v16 >> 16;
  v68.i64[0] = v16 >> 24;
  v69.i64[0] = HIDWORD(v16);
  v70.i64[0] = v16 >> 40;
  v71.i64[0] = HIWORD(v16);
  v24 = *(void (**)(char *, uint64_t))(v72.i64[0] + 8);
  v72.i64[0] = HIBYTE(v16);
  v24(v12, v73.i64[0]);
  LOBYTE(v76) = (_BYTE)v14;
  BYTE1(v76) = v18;
  BYTE2(v76) = v19;
  BYTE3(v76) = v20;
  BYTE4(v76) = v21;
  BYTE5(v76) = v22;
  BYTE6(v76) = v23;
  BYTE7(v76) = v65;
  BYTE8(v76) = v17;
  BYTE9(v76) = v66.i8[0];
  BYTE10(v76) = v67.i8[0];
  BYTE11(v76) = v68.i8[0];
  BYTE12(v76) = v69.i8[0];
  BYTE13(v76) = v70.i8[0];
  BYTE14(v76) = v71.i8[0];
  HIBYTE(v76) = v72.i8[0];
  if (!ComponentByClass)
    __break(1u);
  REAnchorComponentSetAnchorIdentifier();
  objc_opt_self();
  v25 = v59;
  v26 = swift_dynamicCastObjCClass();
  v27 = v64;
  v28 = (uint64_t)v60;
  if (!v26)
    goto LABEL_7;
  v29 = (void *)v26;
  v30 = v25;
  if (objc_msgSend(v29, sel_alignment))
  {

LABEL_7:
    objc_msgSend(v25, sel_transform);
    goto LABEL_11;
  }
  objc_msgSend(v29, sel_transform);
  v39 = v38;
  v39.i32[3] = 0;
  v73 = v39;
  if (one-time initialization token for identity != -1)
  {
    v71 = v36;
    v72 = v35;
    v69 = v38;
    v70 = (float32x4_t)v37;
    swift_once();
    v37 = (int8x16_t)v70;
    v36 = v71;
    v35 = v72;
  }
  v72 = (float32x4_t)static simd_quatf.identity;
  LODWORD(v40) = simd_float4x4.scale.getter(v35, v36, v37).n64_u32[0];
  *(double *)v41.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v73.i64, v72, v40);
  v72 = v42;
  v73 = v41;
  v70 = v44;
  v71 = (int32x4_t)v43;

  v34 = v70;
  v33 = (int8x16_t)v71;
  v32 = v72;
  v31 = v73;
LABEL_11:
  v72 = v32;
  v73 = v31;
  v70 = v34;
  v71 = (int32x4_t)v33;
  REAnchorComponentSetWorldTransform();
  outlined init with copy of AnchoringComponent.Target(v27, v28);
  if ((swift_getEnumCaseMultiPayload() | 8) != 8)
    outlined destroy of __RKEntityActionSpecification(v28, type metadata accessor for AnchoringComponent.Target);
  REAnchorComponentSetRequiresLocalAnchoring();
  REAnchorComponentSetAnchoredLocally();
  v45 = (float32x4_t *)(v27 + *(int *)(type metadata accessor for AnchoringComponent(0) + 28));
  if ((v45[4].i8[0] & 1) == 0)
  {
    v66 = *v45;
    v67 = v45[1];
    v68 = v45[2];
    v69 = v45[3];
    v78.columns[1] = (simd_float4)v72;
    v78.columns[0] = (simd_float4)v73;
    v78.columns[3] = (simd_float4)v70;
    v78.columns[2] = (simd_float4)v71;
    v79 = __invert_f4(v78);
    v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v79.columns[0], v66.f32[0]), (float32x4_t)v79.columns[1], *(float32x2_t *)v66.f32, 1), (float32x4_t)v79.columns[2], v66, 2), (float32x4_t)v79.columns[3], v66, 3);
    v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v79.columns[0], v67.f32[0]), (float32x4_t)v79.columns[1], *(float32x2_t *)v67.f32, 1), (float32x4_t)v79.columns[2], v67, 2), (float32x4_t)v79.columns[3], v67, 3);
    v71 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v79.columns[0], v68.f32[0]), (float32x4_t)v79.columns[1], *(float32x2_t *)v68.f32, 1), (float32x4_t)v79.columns[2], v68, 2), (float32x4_t)v79.columns[3], v68, 3);
    v70 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v79.columns[0], v69.f32[0]), (float32x4_t)v79.columns[1], *(float32x2_t *)v69.f32, 1), (float32x4_t)v79.columns[2], v69, 2), (float32x4_t)v79.columns[3], v69, 3);
    HasTransform.transform.getter();
    v46 = v70;
    v46.i32[3] = 0;
    v69 = v46;
    v75 = 0u;
    v76 = 0u;
    v74 = 0u;
    REDecomposeMatrix();
    v68 = v75;
    v47.n128_u64[0] = simd_float4x4.scale.getter(v73, (int32x4_t)v72, (int8x16_t)v71).n64_u64[0];
    HasTransform.transform.setter(v47, (__n128)v68, (__n128)v69);
  }
  if (!v61)
  {
    REEntityAddExistingComponent();
    RERelease();
  }
  objc_opt_self();
  if (!swift_dynamicCastObjCClass())
  {
    objc_opt_self();
    swift_dynamicCastObjCClass();
  }
  REAnchorComponentSetEnableShadows();
  if ((v62 & 1) != 0)
  {
    objc_opt_self();
    v48 = swift_dynamicCastObjCClass();
    if (v48)
    {
      v49 = (void *)v48;
      v50 = v56;
      outlined init with copy of AnchoringComponent.Target(v27, v56);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        if (v55)
        {
          v51 = *(double *)(v56 + 16);
          v52 = v25;
          v53 = v55;
          specialized Scene.positionEntity(_:on:frame:minimumBounds:)(v58, v49, v51, v53);

        }
      }
      else
      {
        outlined destroy of __RKEntityActionSpecification(v50, type metadata accessor for AnchoringComponent.Target);
      }
    }
  }
}

