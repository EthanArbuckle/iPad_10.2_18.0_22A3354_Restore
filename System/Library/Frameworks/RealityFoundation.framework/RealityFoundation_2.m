uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  char v24;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= result && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = (uint64_t *)(v22[7] + 32 * v16);
        *v23 = a1;
        v23[1] = a2;
        v23[2] = a3;
        v23[3] = a4;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v16, a5, a1, a2, a3, a4, v22);
    }
    if (v21 >= result && (a6 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((v20 & 1) == (v24 & 1))
    {
      v16 = result;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v16, a5, a1, a2, a3, a4, v22);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return swift_bridgeObjectRelease();
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v12);
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v12);
        *v19 = a1;
        v19[1] = a2;
        return swift_release();
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v12);
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v12) = a1;
        return swift_release();
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v12);
        result = swift_bridgeObjectRelease();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_bridgeObjectRelease();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  type metadata accessor for REComponentType(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v12);
        result = swift_bridgeObjectRelease();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_unknownObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[7];

  v5 = (_QWORD **)v4;
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v23 = a1[3];
  v24 = a1[4];
  v25 = a1[5];
  v26 = a1[6];
  v12 = (_QWORD *)*v4;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v20 = *v5;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 56 * v14);
        *v21 = v9;
        v21[1] = v10;
        v21[2] = v11;
        v21[3] = v23;
        v21[4] = v24;
        v21[5] = v25;
        v21[6] = v26;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v18 & 1) == (v22 & 1))
    {
      v14 = result;
      v20 = *v5;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v27[0] = v9;
      v27[1] = v10;
      v27[2] = v11;
      v27[3] = v23;
      v27[4] = v24;
      v27[5] = v25;
      v27[6] = v26;
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, (uint64_t)v27, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= result && (a5 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v22 & 1))
    {
      v14 = result;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_bridgeObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 16 * v14;
        result = outlined consume of Data._Representation(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
        *(_QWORD *)v21 = a1;
        *(_QWORD *)(v21 + 8) = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 40 * v10;
        __swift_destroy_boxed_opaque_existential_1(v17);
        return outlined init with take of BindableDataInternal(a1, v17);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(a1, v16[7] + 8 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(a1, v16[7] + 8 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), specialized _NativeDictionary._insert(at:key:value:));
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int64_t result;
  char v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (int64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  type metadata accessor for REComponentClassPtr(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ComponentInfo((uint64_t)a1, v16[7] + 80 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ComponentInfo((uint64_t)a1, v16[7] + 80 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  type metadata accessor for REComponentClassPtr(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ComponentInfo((uint64_t)a1, v16[7] + 80 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ComponentInfo((uint64_t)a1, v16[7] + 80 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t, Swift::UInt, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char v24;

  v9 = v6;
  v13 = *v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v9;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v15) = a1;
        return swift_release();
      }
      return a6(v15, a2, a1, v21);
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v24 & 1))
    {
      v15 = v23;
      v21 = *v9;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      return a6(v15, a2, a1, v21);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;

  v9 = v6;
  v13 = *v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v9;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = *(_QWORD *)(v21 + 56);
        result = swift_release();
        *(_QWORD *)(v22 + 8 * v15) = a1;
        return result;
      }
      return a6(v15, a2, a1, v21);
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v25 & 1))
    {
      v15 = v24;
      v21 = *v9;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      return a6(v15, a2, a1, v21);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[16];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)a2, a1, v16);
      outlined init with take of String?((uint64_t)(a2 + 3), (uint64_t)v21);
      return (_OWORD *)outlined retain of String?((uint64_t)v21);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of AudioMixGroup((uint64_t)a1, v18[7] + 80 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of AudioMixGroup((uint64_t)a1, v18[7] + 80 * v12);
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v9 = v6;
  v13 = *v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v9;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v15) = a1;
        return result;
      }
      return a6(v15, a2, a1, v21);
    }
    if (v20 >= result && (a3 & 1) == 0)
    {
      result = a4();
      goto LABEL_7;
    }
    a5();
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v22 & 1))
    {
      v15 = result;
      v21 = *v9;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      return a6(v15, a2, a1, v21);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>;
  if (!lazy protocol witness table cache variable for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LoadRequest<AUAudioUnit>);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LoadRequest<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>);
  }
  return result;
}

id outlined copy of Result<AUAudioUnit, Error>?(id a1, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined copy of Result<AUAudioUnit, Error>(a1);
  return a1;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in AudioPlaybackController()
{
  return MEMORY[0x24BEE4578];
}

uint64_t sub_21BA97BC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_21BA97C10()
{
  swift_beginAccess();
  return swift_weakAssign();
}

double sub_21BA97C64@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return keypath_get_3Tm(a1, (float (*)(_QWORD, _QWORD))MEMORY[0x24BE20E38], a2);
}

uint64_t sub_21BA97C70(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AudioPlaybackController.speed : AudioPlaybackController(a1, a2, a3, a4, (float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E38], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20ED0]);
}

double sub_21BA97C94@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return keypath_get_3Tm(a1, (float (*)(_QWORD, _QWORD))MEMORY[0x24BE20E28], a2);
}

uint64_t sub_21BA97CA0(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AudioPlaybackController.speed : AudioPlaybackController(a1, a2, a3, a4, (float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E28], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EA0]);
}

double sub_21BA97CC4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return keypath_get_3Tm(a1, (float (*)(_QWORD, _QWORD))MEMORY[0x24BE20E48], a2);
}

uint64_t sub_21BA97CD0(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AudioPlaybackController.speed : AudioPlaybackController(a1, a2, a3, a4, (float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E48], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EE0]);
}

double sub_21BA97CF4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return keypath_get_3Tm(a1, (float (*)(_QWORD, _QWORD))MEMORY[0x24BE20E30], a2);
}

double keypath_get_3Tm@<D0>(uint64_t a1@<X0>, float (*a2)(_QWORD, _QWORD)@<X3>, double *a3@<X8>)
{
  double result;

  result = a2(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(*(_QWORD *)a1 + 48));
  *a3 = result;
  return result;
}

uint64_t sub_21BA97D34(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AudioPlaybackController.speed : AudioPlaybackController(a1, a2, a3, a4, (float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E30], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EB0]);
}

void sub_21BA97D58(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = MEMORY[0x22076B8D0](*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t sub_21BA97D88(double *a1, uint64_t a2)
{
  MEMORY[0x22076B948](*(_QWORD *)(*(_QWORD *)a2 + 32), *(_QWORD *)(*(_QWORD *)a2 + 48), *a1);
  return RENetworkMarkComponentDirty();
}

uint64_t type metadata accessor for AudioPlaybackController()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudioPlaybackController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioPlaybackController.entity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AudioPlaybackController.completionHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of AudioPlaybackController.completionHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of AudioPlaybackController.completionHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t type metadata accessor for AudioPlaybackController.Internal()
{
  return objc_opt_self();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v20[7] + 8 * v14) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= result && (a5 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
    if ((v18 & 1) == (v21 & 1))
    {
      v14 = result;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4, a1, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = v17 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for LoadTrace(0) - 8) + 72) * v10;
        return outlined assign with take of LoadTrace(a1, v18);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, __int16 a2, Swift::UInt a3, int a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        result = swift_release();
        *(_QWORD *)(v21 + 8 * v14) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4 & 0xFFFF01, a1, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4 & 0xFFFF01, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        result = swift_release();
        *(_QWORD *)(v21 + 8 * v14) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4 & 0xFFFF01, a1, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4 & 0xFFFF01, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(v18 + 56);

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, __n128 a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 *v17;
  char v18;

  v5 = (_QWORD **)v4;
  v8 = (_QWORD *)*v4;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v16 = *v5;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (__n128 *)(v16[7] + 32 * v10);
        *v17 = a3;
        v17[1] = a4;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3, a4);
    }
    if (v15 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v14 & 1) == (v18 & 1))
    {
      v10 = result;
      v16 = *v5;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v10 = v7;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v17) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= result && (a4 & 1) == 0)
    {
      result = a5();
      goto LABEL_7;
    }
    a6();
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v21 & 1) == (v24 & 1))
    {
      v17 = result;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = *(_QWORD *)(v20 + 56);

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v14, v11, a1, v20);
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[6];

  v5 = v4;
  swift_weakInit();
  swift_weakInit();
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 80) = 1;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 16) = a1;
  swift_weakAssign();
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  v9 = swift_allocObject();
  swift_weakInit();
  v19[4] = partial apply for closure #1 in AudioPlaybackController.Internal.init(component:entity:resource:token:);
  v19[5] = v9;
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned REAudioPlaybackState, @unowned REAudioPlaybackState) -> ();
  v19[3] = &block_descriptor_4;
  v10 = _Block_copy(v19);
  swift_retain();
  swift_release();
  v11 = REAudioPlayerComponentAddDidChangeStateCallback();
  v13 = v12;
  _Block_release(v10);
  *(_QWORD *)(v5 + 64) = v11;
  *(_QWORD *)(v5 + 72) = v13;
  *(_BYTE *)(v5 + 80) = 0;
  type metadata accessor for AudioUnitResource();
  if (swift_dynamicCastClass())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AUAudioUnit>);
    v14 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AUAudioUnit, Error>?>);
    v15 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v16 = swift_allocObject();
    *(_DWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v15 + 16) = v16;
    *(_QWORD *)(v15 + 24) = 0;
    *(_BYTE *)(v15 + 32) = -1;
    *(_QWORD *)(v14 + 16) = v15;
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = partial apply for closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:);
    v17[3] = v5;
    v17[4] = v15;
    v17[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AUAudioUnit, Error>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v14 + 24) = Future.init(_:)();
    *(_QWORD *)(v5 + 56) = v14;
    swift_release();
  }
  REAudioPlayerComponentSetCompletionHandler();
  REAudioPlayerComponentSetRemoveFromSceneCallback();
  return v5;
}

uint64_t sub_21BA99A9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined assign with take of ComponentInfo(uint64_t a1, uint64_t a2)
{
  assignWithTake for ComponentInfo(a2, a1);
  return a2;
}

uint64_t outlined assign with take of LoadTrace(uint64_t a1, uint64_t a2)
{
  uint64_t Trace;

  Trace = type metadata accessor for LoadTrace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Trace - 8) + 40))(a2, a1, Trace);
  return a2;
}

uint64_t outlined retain of CustomMaterial.CustomShaderParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(void **)(a1 + 112);
  outlined copy of __MaterialResource.CoreMaterialFunction?(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64));
  outlined copy of __MaterialResource.CoreMaterialFunction?(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t specialized static AudioPlaybackController.audioPlaybackControllerForToken(token:)(uint64_t a1)
{
  char v2;
  uint64_t Strong;
  _QWORD *v4;
  void *v5;
  _QWORD *v7;

  if (one-time initialization token for playingControllers != -1)
    swift_once();
  swift_beginAccess();
  if (!*(_QWORD *)(static AudioPlaybackController.playingControllers + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) == 0))
  {
    swift_endAccess();
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
LABEL_8:

    return 0;
  }
  swift_endAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_retain();
    v7 = AudioPlaybackController.Internal.createAudioPlaybackController()();
    if (v7)
    {
      v4 = v7;
      swift_release();
      return (uint64_t)v4;
    }
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_release();
    goto LABEL_8;
  }
  return Strong;
}

uint64_t outlined assign with take of AudioMixGroup(uint64_t a1, uint64_t a2)
{
  assignWithTake for AudioMixGroup(a2, a1);
  return a2;
}

uint64_t sub_21BA99D70()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return closure #1 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(a1, a2, a3, a4);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void partial apply for closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(void (*a1)(void **), uint64_t a2)
{
  uint64_t v2;

  closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(a1, a2, v2);
}

uint64_t sub_21BA99DBC()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BA99DFC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;

  return closure #1 in closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void (**)(void *, uint64_t))(v4 + 24));
}

uint64_t outlined assign with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of __RKEntityAction.ActionStateObservation(uint64_t a1, uint64_t a2)
{
  assignWithTake for __RKRuntimeSceneCoordinator.WeakObserver(a2, a1);
  return a2;
}

uint64_t __ResolvedRealityCoordinateSpace.init(entity:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t __ResolvedRealityCoordinateSpace.entity.getter()
{
  return swift_retain();
}

uint64_t __ResolvedRealityCoordinateSpace.entity.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*__ResolvedRealityCoordinateSpace.entity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*__RealityCoordinateSpaceContext.camera.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __RealityCoordinateSpaceContext.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Entity._resolve(in:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t protocol witness for RealityCoordinateSpace._resolve(in:) in conformance Entity@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

void SceneRealityCoordinateSpace._resolve(in:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CameraRealityCoordinateSpace._resolve(in:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

_QWORD *initializeBufferWithCopyOfBuffer for __ResolvedRealityCoordinateSpace(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for __ResolvedRealityCoordinateSpace(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for __ResolvedRealityCoordinateSpace(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __ResolvedRealityCoordinateSpace()
{
  return &type metadata for __ResolvedRealityCoordinateSpace;
}

ValueMetadata *type metadata accessor for __RealityCoordinateSpaceContext()
{
  return &type metadata for __RealityCoordinateSpaceContext;
}

uint64_t dispatch thunk of RealityCoordinateSpace._resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for SceneRealityCoordinateSpace()
{
  return &type metadata for SceneRealityCoordinateSpace;
}

ValueMetadata *type metadata accessor for CameraRealityCoordinateSpace()
{
  return &type metadata for CameraRealityCoordinateSpace;
}

uint64_t LowLevelBuffer.Descriptor.capacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t LowLevelBuffer.Descriptor.capacity.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*LowLevelBuffer.Descriptor.capacity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelBuffer.Descriptor.sizeMultiple.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t LowLevelBuffer.Descriptor.sizeMultiple.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*LowLevelBuffer.Descriptor.sizeMultiple.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::LowLevelBuffer::Descriptor __swiftcall LowLevelBuffer.Descriptor.init(capacity:sizeMultiple:)(Swift::Int capacity, Swift::Int sizeMultiple)
{
  Swift::Int *v2;
  RealityFoundation::LowLevelBuffer::Descriptor result;

  *v2 = capacity;
  v2[1] = sizeMultiple;
  result.sizeMultiple = sizeMultiple;
  result.capacity = capacity;
  return result;
}

__n128 LowLevelBuffer.descriptor.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

uint64_t LowLevelBuffer.bytesUsed.getter()
{
  return DRBufferGetBytesUsed();
}

uint64_t LowLevelBuffer.bytesUsed.setter()
{
  return DRBufferSetBytesUsed();
}

uint64_t (*LowLevelBuffer.bytesUsed.modify(uint64_t *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = DRBufferGetBytesUsed();
  return LowLevelBuffer.bytesUsed.modify;
}

uint64_t LowLevelBuffer.bytesUsed.modify()
{
  return DRBufferSetBytesUsed();
}

uint64_t LowLevelBuffer.__allocating_init(descriptor:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  LowLevelBuffer.init(descriptor:)(a1);
  return v2;
}

uint64_t LowLevelBuffer.init(descriptor:)(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *Buffer;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v2 = v1;
  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = a1[1];
  v5 = DRBufferDescriptorCreate();
  if (v3 < 0)
    goto LABEL_13;
  v6 = (void *)v5;
  DRBufferDescriptorSetCapacity();
  if (v4 < 0)
    goto LABEL_13;
  DRBufferDescriptorSetSizeMultiple();
  v23 = 0;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v7 = (id)REServiceLocatorGetDirectResourceService();
  if (v7)
  {
    v8 = v7;
    Buffer = (void *)DRContextCreateBuffer();

LABEL_8:
    v2[3] = v3;
    v2[4] = v4;
    if (Buffer)
    {

      v2[2] = Buffer;
      return (uint64_t)v2;
    }
    goto LABEL_12;
  }
  v12 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of __RenderService?(v12, (uint64_t)&v18);
  if (v19)
  {
    outlined init with take of BindableDataInternal(&v18, (uint64_t)v20);
    v13 = v21;
    v14 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v15 = (id)RERenderManagerGetRenderDevice();
    Buffer = (void *)DRBufferCreateUnmanaged();
    swift_unknownObjectRelease();
    v16 = v23;
    if (v23)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *v10 = v16;
      v11 = v16;
      swift_willThrow();

      type metadata accessor for LowLevelBuffer();
      swift_deallocPartialClassInstance();
      return (uint64_t)v2;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t LowLevelBuffer.withUnsafeBytes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in LowLevelBuffer.withUnsafeBytes(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v11[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v11[5] = v7;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_5;
  v8 = _Block_copy(v11);
  v9 = v5;
  swift_retain();
  swift_release();
  DRBufferRead();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned UInt) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t LowLevelBuffer.withUnsafeMutableBytes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in LowLevelBuffer.withUnsafeBytes(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_12;
  v8 = _Block_copy(v11);
  v9 = v5;
  swift_retain();
  swift_release();
  DRBufferUpdate();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t LowLevelBuffer.replaceUnsafeMutableBytes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in LowLevelBuffer.withUnsafeBytes(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_22;
  v8 = _Block_copy(v11);
  v9 = v5;
  swift_retain();
  swift_release();
  DRBufferReplace();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  return result;
}

id LowLevelBuffer.read(using:)()
{
  return (id)DRBufferReadUsing();
}

id LowLevelBuffer.replace(using:)()
{
  return (id)DRBufferReplaceUsing();
}

uint64_t LowLevelBuffer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LowLevelBuffer.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of __RenderService?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef;
  if (!lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef)
  {
    type metadata accessor for CFErrorRef(255);
    result = MEMORY[0x220772E3C](MEMORY[0x24BDCFD90], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef);
  }
  return result;
}

uint64_t type metadata accessor for LowLevelBuffer()
{
  return objc_opt_self();
}

uint64_t sub_21BA9A8B8()
{
  return swift_deallocObject();
}

uint64_t sub_21BA9A8CC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_21BA9A8F4()
{
  return swift_deallocObject();
}

uint64_t sub_21BA9A904()
{
  return swift_deallocObject();
}

uint64_t sub_21BA9A914()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LowLevelBuffer.withUnsafeBytes(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(result, result + a2);
  __break(1u);
  return result;
}

uint64_t sub_21BA9A954()
{
  return swift_deallocObject();
}

uint64_t sub_21BA9A964@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = DRBufferGetBytesUsed();
  *a1 = result;
  return result;
}

uint64_t sub_21BA9A990()
{
  return DRBufferSetBytesUsed();
}

uint64_t method lookup function for LowLevelBuffer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LowLevelBuffer.bytesUsed.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of LowLevelBuffer.bytesUsed.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of LowLevelBuffer.bytesUsed.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of LowLevelBuffer.__allocating_init(descriptor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of LowLevelBuffer.withUnsafeBytes(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of LowLevelBuffer.withUnsafeMutableBytes(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of LowLevelBuffer.replaceUnsafeMutableBytes(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of LowLevelBuffer.read(using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of LowLevelBuffer.replace(using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

ValueMetadata *type metadata accessor for LowLevelBuffer.Descriptor()
{
  return &type metadata for LowLevelBuffer.Descriptor;
}

uint64_t (*CustomMaterial.GeometryModifier.constantValues.modify(_QWORD *a1))()
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 32);
  *a1 = v2;
  a1[1] = v1;
  v3 = v2;
  return CustomMaterial.GeometryModifier.constantValues.modify;
}

uint64_t CustomMaterial.GeometryModifier.init(named:in:constantValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:constantValues:)(a1, a2, a3, a4, a5);
}

{
  char ServicesToUpdate;
  uint64_t result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_retain();
  swift_release();
  ServicesToUpdate = REEngineConfigurationGetServicesToUpdate();
  result = swift_release();
  if ((ServicesToUpdate & 0x10) != 0)
  {
    *(_QWORD *)a5 = a1;
    *(_QWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = a3;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = a4;
    *(_BYTE *)(a5 + 40) = 0;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id CustomMaterial.SurfaceShader.constantValues.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

void CustomMaterial.SurfaceShader.constantValues.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
}

uint64_t (*CustomMaterial.SurfaceShader.constantValues.modify(_QWORD *a1))()
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 32);
  *a1 = v2;
  a1[1] = v1;
  v3 = v2;
  return CustomMaterial.GeometryModifier.constantValues.modify;
}

uint64_t CustomMaterial.SurfaceShader.init(named:in:constantValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:constantValues:)(a1, a2, a3, a4, a5);
}

uint64_t (*protocol witness for MaterialFunction.constantValues.modify in conformance CustomMaterial.GeometryModifier(_QWORD *a1))()
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 32);
  *a1 = v2;
  a1[1] = v1;
  v3 = v2;
  return CustomMaterial.GeometryModifier.constantValues.modify;
}

id protocol witness for MaterialFunction.constantValues.getter in conformance CustomMaterial.SurfaceShader()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

void protocol witness for MaterialFunction.constantValues.setter in conformance CustomMaterial.SurfaceShader(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
}

void CustomMaterial.GeometryModifier.constantValues.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(v2 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v3;

    *(_QWORD *)(v2 + 32) = v5;
  }
  else
  {

    *(_QWORD *)(v2 + 32) = v3;
  }
}

id sub_21BA9ACC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *a2 = v2;
  return v2;
}

void sub_21BA9ACD4(id *a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 32), *a1);
}

uint64_t PlayAnimationAction.animationName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlayAnimationAction.animationName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PlayAnimationAction.animationName.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PlayAnimationAction.transitionDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void PlayAnimationAction.transitionDuration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*PlayAnimationAction.transitionDuration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.blendLayer.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PlayAnimationAction.blendLayer.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*PlayAnimationAction.blendLayer.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.separateAnimatedValue.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t PlayAnimationAction.separateAnimatedValue.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*PlayAnimationAction.separateAnimatedValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PlayAnimationAction.handoffType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

_BYTE *PlayAnimationAction.handoffType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = *result;
  return result;
}

uint64_t (*PlayAnimationAction.handoffType.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t outlined copy of ActionEntityResolution()
{
  return swift_bridgeObjectRetain();
}

uint64_t PlayAnimationAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of ActionEntityResolution();
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 56) = v4;
  return result;
}

uint64_t outlined consume of ActionEntityResolution()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*PlayAnimationAction.targetEntity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.parentControllers.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t PlayAnimationAction.parentControllers.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = result;
  return result;
}

_BYTE *(*PlayAnimationAction.parentControllers.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 57);
  return PlayAnimationAction.parentControllers.modify;
}

_BYTE *PlayAnimationAction.parentControllers.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 57) = result[8];
  return result;
}

uint64_t (*PlayAnimationAction.useParentedControllers.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.animatedValueType.getter()
{
  return 0;
}

__n128 PlayAnimationAction.init(animationName:targetEntity:transitionDuration:blendLayer:separateAnimatedValue:useParentedControllers:handoffType:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  unsigned __int8 v9;
  char v10;
  __n128 result;

  v9 = a3[1].n128_u8[0];
  v10 = *a7;
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(double *)(a8 + 16) = a9;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a5;
  *(_BYTE *)(a8 + 33) = v10;
  result = *a3;
  *(__n128 *)(a8 + 40) = *a3;
  *(_BYTE *)(a8 + 56) = v9;
  *(_BYTE *)(a8 + 57) = a6;
  return result;
}

uint64_t PlayAnimationAction.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA9AF3C
                                                            + 4 * asc_21BE5B780[a1]))(0x6F6974616D696E61, 0xED0000656D614E6ELL);
}

unint64_t sub_21BA9AF3C()
{
  return 0xD000000000000012;
}

uint64_t sub_21BA9AF58()
{
  return 0x79614C646E656C62;
}

unint64_t sub_21BA9AF74()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlayAnimationAction.CodingKeys()
{
  unsigned __int8 *v0;

  return PlayAnimationAction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlayAnimationAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PlayAnimationAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlayAnimationAction.CodingKeys()
{
  lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlayAnimationAction.CodingKeys()
{
  lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PlayAnimationAction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _DWORD v12[2];
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlayAnimationAction.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v1 + 24);
  v7 = *(unsigned __int8 *)(v1 + 32);
  v16 = *(unsigned __int8 *)(v1 + 33);
  v17 = v7;
  v15 = *(_QWORD *)(v1 + 40);
  v13 = *(_QWORD *)(v1 + 48);
  v14 = *(unsigned __int8 *)(v1 + 56);
  v12[1] = *(unsigned __int8 *)(v1 + 57);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  v8 = v19;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v8)
  {
    v9 = v16;
    v10 = v15;
    LOBYTE(v20) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v20) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v20) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v20) = v9;
    v23 = 4;
    lazy protocol witness table accessor for type AnimationHandoffType and conformance AnimationHandoffType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v20 = v10;
    v21 = v13;
    v22 = v14;
    v23 = 5;
    lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAnimationAction.CodingKeys, &unk_24DFA7B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAnimationAction.CodingKeys, &unk_24DFA7B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAnimationAction.CodingKeys, &unk_24DFA7B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAnimationAction.CodingKeys, &unk_24DFA7B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType and conformance AnimationHandoffType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType, &type metadata for AnimationHandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationHandoffType, &type metadata for AnimationHandoffType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution;
  if (!lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEntityResolution, &type metadata for ActionEntityResolution);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution;
  if (!lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEntityResolution, &type metadata for ActionEntityResolution);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution);
  }
  return result;
}

uint64_t PlayAnimationAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  char v30;
  unsigned __int8 v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlayAnimationAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v27) = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  LOBYTE(v27) = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  v13 = v12;
  LOBYTE(v27) = 2;
  v26 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v27) = 3;
  v25 = KeyedDecodingContainer.decode(_:forKey:)();
  v30 = 4;
  lazy protocol witness table accessor for type AnimationHandoffType and conformance AnimationHandoffType();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24 = v27;
  v30 = 5;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v14 = v27;
  v31 = v29;
  LOBYTE(v27) = 6;
  v22 = v28;
  v23 = v14;
  v21 = v29;
  outlined copy of ActionEntityResolution();
  v15 = KeyedDecodingContainer.decode(_:forKey:)();
  v25 &= 1u;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  v17 = v22;
  v16 = v23;
  v18 = v21;
  outlined copy of ActionEntityResolution();
  outlined consume of ActionEntityResolution();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v26;
  *(_BYTE *)(a2 + 32) = v25;
  *(_BYTE *)(a2 + 33) = v24;
  *(_QWORD *)(a2 + 40) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  *(_BYTE *)(a2 + 56) = v18;
  *(_BYTE *)(a2 + 57) = v15 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return outlined consume of ActionEntityResolution();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlayAnimationAction@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PlayAnimationAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlayAnimationAction(_QWORD *a1)
{
  return PlayAnimationAction.encode(to:)(a1);
}

uint64_t sub_21BA9B7CC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 57);
  return result;
}

_BYTE *sub_21BA9B7D8(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 57) = *result;
  return result;
}

uint64_t destroy for PlayAnimationAction()
{
  swift_bridgeObjectRelease();
  return outlined consume of ActionEntityResolution();
}

uint64_t initializeWithCopy for PlayAnimationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  outlined copy of ActionEntityResolution();
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t assignWithCopy for PlayAnimationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_BYTE *)(a2 + 56);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = v6;
  outlined consume of ActionEntityResolution();
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PlayAnimationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v5 = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = v5;
  outlined consume of ActionEntityResolution();
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAnimationAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayAnimationAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayAnimationAction()
{
  return &type metadata for PlayAnimationAction;
}

uint64_t storeEnumTagSinglePayload for PlayAnimationAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_21BA9BAB8 + 4 * byte_21BE5B78C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_21BA9BAEC + 4 * byte_21BE5B787[v4]))();
}

uint64_t sub_21BA9BAEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA9BAF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA9BAFCLL);
  return result;
}

uint64_t sub_21BA9BB08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA9BB10);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_21BA9BB14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA9BB1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PlayAnimationAction.CodingKeys()
{
  return &unk_24DFA7B98;
}

uint64_t PlayAnimationActionHandler.triggerAnimation(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  uint64_t AnimationLibraryAsset;
  uint64_t v20;
  ValueMetadata *v21;
  uint64_t EntryCount;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  ValueMetadata *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  ValueMetadata *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  int v60;
  __int16 v61;
  __int128 v62;
  char v63;
  char v64;
  _BYTE v65[30];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];

  v2 = v1;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 41);
  v60 = *(_DWORD *)(a1 + 42);
  v61 = *(_WORD *)(a1 + 46);
  v10 = *(_BYTE *)(a1 + 64);
  v11 = *(_BYTE *)(a1 + 65);
  *(_OWORD *)v65 = *(_OWORD *)(a1 + 66);
  *(_OWORD *)&v65[14] = *(_OWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 96);
  v69 = *(_OWORD *)(a1 + 136);
  v68 = *(_OWORD *)(a1 + 120);
  v67 = *(_OWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 152);
  v14 = *(_BYTE *)(a1 + 160);
  v53 = (ValueMetadata *)v3;
  v54 = v4;
  v55 = (uint64_t)v5;
  v56 = v6;
  v57 = v7;
  v58 = v8;
  v59 = v9;
  v62 = *(_OWORD *)(a1 + 48);
  v63 = v10;
  v47 = v11;
  v64 = v11;
  v66 = v12;
  v70 = v13;
  v71 = v14;
  v72 = *(_OWORD *)(a1 + 161);
  v73 = *(_OWORD *)(a1 + 177);
  v15 = *(_OWORD *)(a1 + 193);
  v16 = *(_OWORD *)(a1 + 209);
  v17 = *(_OWORD *)(a1 + 225);
  *(_OWORD *)((char *)v76 + 15) = *(_OWORD *)(a1 + 240);
  v76[0] = v17;
  v75 = v16;
  v74 = v15;
  result = specialized PlayAnimationActionHandler.getTargetEntity(event:)((uint64_t)&v53);
  if (result)
  {
    if (REEntityGetComponent())
    {
      v43 = v3;
      AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
      if (AnimationLibraryAsset)
      {
        v20 = AnimationLibraryAsset;
        type metadata accessor for AnimationLibraryResource();
        v21 = (ValueMetadata *)swift_allocObject();
        v21[2].Kind = 0;
        v21[1].Kind = v20;
        RERetain();
        EntryCount = REAnimationLibraryAssetGetEntryCount();
        v23 = specialized Array.init(repeating:count:)(0, EntryCount);
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v21[1].Description = (void *)v23;
        v27 = 1;
      }
      else
      {
        specialized AnimationLibraryDefinition.init(_:)(MEMORY[0x24BEE4AF8], (uint64_t)&v53);
        v21 = v53;
        v24 = v54;
        v25 = v55;
        v27 = v56;
        v26 = v57;
      }
      v44 = v24;
      v45 = v27;
      v46 = v25;
      v48 = v21;
      v49 = v24;
      v50 = v25;
      v51 = v27;
      v52 = v26;
      v33 = AnimationLibraryComponent.animationResource(_:)(v4, v5);
      if (v33)
      {
        LOBYTE(v48) = v9;
        Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:handoffType:)(v33, v7, v8 & 1, 0, 0, (unsigned __int8 *)&v48);
        v35 = v34;
        swift_release();
        *v2 = v35;
        if ((v14 & 1) == 0)
        {
          swift_beginAccess();
          if (swift_weakLoadStrong())
          {
            REAnimationComponentGetComponentType();
            if (REEntityGetComponentByClass())
            {
              REAnimationComponentSetCurrentPlaybackTime();
              RENetworkMarkComponentDirty();
            }
            swift_release();
          }
        }
        if ((v47 & 1) != 0)
          AnimationPlaybackController.setParent(parent:)(v43);
        swift_release();
        v36 = (uint64_t)v21;
        v37 = v44;
      }
      else
      {
        v48 = 0;
        v49 = 0xE000000000000000;
        _StringGuts.grow(_:)(82);
        v38._countAndFlagsBits = 0x2072656C646E6148;
        v38._object = (void *)0xEC00000020726F66;
        String.append(_:)(v38);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAnimationAction.Type);
        v39._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._object = (void *)0x800000021BE855C0;
        v40._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v40);
        v41._countAndFlagsBits = v4;
        v41._object = v5;
        String.append(_:)(v41);
        v42._object = (void *)0x800000021BE855F0;
        v42._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v42);
        specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
        swift_bridgeObjectRelease();
        v36 = (uint64_t)v21;
        v37 = v44;
      }
      outlined consume of AnimationLibraryComponent?(v36, v37, v46, v45);
    }
    else
    {
      v53 = 0;
      v54 = 0xE000000000000000;
      _StringGuts.grow(_:)(80);
      v28._countAndFlagsBits = 0x2072656C646E6148;
      v28._object = (void *)0xEC00000020726F66;
      String.append(_:)(v28);
      v48 = &type metadata for PlayAnimationAction;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAnimationAction.Type);
      v29._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 0xD00000000000003ELL;
      v30._object = (void *)0x800000021BE85580;
      String.append(_:)(v30);
      REEntityGetName();
      v31._countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = 11815;
      v32._object = (void *)0xE200000000000000;
      String.append(_:)(v32);
      specialized static AnimationLogger.logError(_:)(v53, v54);
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance PlayAnimationActionHandler(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  if (*(_BYTE *)(a1 + 65) == 1)
  {
    if (*v1)
    {
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REAnimationComponentStopAnimation();
          RENetworkMarkComponentDirty();
        }
        swift_release();
      }
    }
  }
  result = swift_release();
  *v1 = 0;
  return result;
}

uint64_t specialized PlayAnimationAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F6974616D696E61 && a2 == 0xED0000656D614E6ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000021BE85520
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79614C646E656C62 && a2 == 0xEA00000000007265
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021BE85540
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5466666F646E6168 && a2 == 0xEB00000000657079
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E45746567726174 && a2 == 0xEC00000079746974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000021BE85560)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized PlayAnimationActionHandler.getTargetEntity(event:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t SceneNullable;
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_BYTE *)(a1 + 64);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if ((v2 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        v4 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v4)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(SceneNullable);
        }
        SceneNullable = Scene.findEntity(named:)();
        swift_release();
      }
      swift_release();
    }
    else
    {
      v9 = v1;
      swift_bridgeObjectRetain();
      SceneNullable = Entity.subscript.getter(&v9);
      swift_release();
    }
    outlined consume of ActionEntityResolution();
  }
  else
  {
    _StringGuts.grow(_:)(62);
    v5._countAndFlagsBits = 0x2072656C646E6148;
    v5._object = (void *)0xEC00000020726F66;
    String.append(_:)(v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAnimationAction.Type);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x800000021BE85620;
    v7._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v7);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    return 0;
  }
  return SceneNullable;
}

uint64_t outlined consume of AnimationLibraryComponent?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of String??(a3, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

ValueMetadata *type metadata accessor for PlayAnimationActionHandler()
{
  return &type metadata for PlayAnimationActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in PlayAnimationActionHandler()
{
  return &protocol witness table for PlayAnimationAction;
}

uint64_t getEnumTagSinglePayload for AudioFileResource.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AudioFileResource.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for AudioFileResource.Error(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for AudioFileResource.Error(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioFileResource.Error()
{
  return &type metadata for AudioFileResource.Error;
}

unint64_t lazy protocol witness table accessor for type AudioFileResource.Error and conformance AudioFileResource.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioFileResource.Error and conformance AudioFileResource.Error;
  if (!lazy protocol witness table cache variable for type AudioFileResource.Error and conformance AudioFileResource.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioFileResource.Error, &type metadata for AudioFileResource.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource.Error and conformance AudioFileResource.Error);
  }
  return result;
}

uint64_t AudioFileResource.Error.errorDescription.getter(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  if (!a2)
    return 0x206E776F6E6B6E55;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000012;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioFileResource.Error()
{
  uint64_t v0;

  return AudioFileResource.Error.errorDescription.getter(*(_QWORD *)v0, *(void **)(v0 + 8));
}

double __REAssetManager.__allocating_init(handle:)(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_BYTE *)(v2 + 80) = 2;
  *(_WORD *)(v2 + 96) = 514;
  *(_QWORD *)(v2 + 88) = a1;
  return result;
}

uint64_t __AssetLoadRequest.add(asset:)()
{
  return REAssetLoadRequestAddAsset();
}

{
  return REAssetLoadRequestAddAsset();
}

uint64_t static __REAsset.__fromHandleTransfer(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  type metadata accessor for __REAsset();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

RealityKit::__REAssetIdentifier __swiftcall __REAssetIdentifier.init(stringLiteral:)(RealityKit::__REAssetIdentifier stringLiteral)
{
  RealityKit::__REAssetIdentifier *v1;

  *v1 = stringLiteral;
  return stringLiteral;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetIdentifier.CodingKeys()
{
  return 0x65756C6176;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetIdentifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetIdentifier.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetIdentifier.CodingKeys()
{
  lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __REAssetIdentifier.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetIdentifier.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t __REAssetIdentifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetIdentifier.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

_QWORD *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance __REAssetIdentifier@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetIdentifier@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return __REAssetIdentifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetIdentifier(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetIdentifier.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t static __REAsset.__fromHandle(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  RERetain();
  type metadata accessor for __REAsset();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

uint64_t __REAsset.debugDescription.getter()
{
  void *v0;

  v0 = (void *)REAssetCopyDescription();
  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t __REAsset.sanitizedDescription.getter()
{
  void *v0;

  v0 = (void *)REAssetCopyDescription();
  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAsset()
{
  void *v0;

  v0 = (void *)REAssetCopyDescription();
  return String.init(_:)(v0)._countAndFlagsBits;
}

void __REAsset.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

BOOL static __REAsset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

Swift::Int __REAsset.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __REAsset()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __REAsset()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __REAsset()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
  return Hasher._finalize()();
}

uint64_t __REAssetManager.init(handle:)(uint64_t a1)
{
  uint64_t v1;

  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_BYTE *)(v1 + 80) = 2;
  *(_WORD *)(v1 + 96) = 514;
  *(_QWORD *)(v1 + 88) = a1;
  return v1;
}

uint64_t type metadata accessor for __REAsset()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetIdentifier.CodingKeys, &unk_24DFA80B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetIdentifier.CodingKeys, &unk_24DFA80B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetIdentifier.CodingKeys, &unk_24DFA80B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetIdentifier.CodingKeys, &unk_24DFA80B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys);
  }
  return result;
}

uint64_t __REAssetManager._mainBundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  Swift::Int v7;
  _BYTE v8[40];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  swift_beginAccess();
  result = outlined init with copy of __REAssetBundle?(v1 + 16, (uint64_t)&v9);
  if ((_QWORD)v9)
  {
    v4 = v10;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v4;
    v5 = v12;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 48) = v5;
  }
  else
  {
    outlined destroy of __REAssetBundle?((uint64_t)&v9);
    *((_QWORD *)&v10 + 1) = type metadata accessor for __REAssetManager();
    *(_QWORD *)&v11 = &protocol witness table for __REAssetManager;
    *(_QWORD *)&v9 = v1;
    outlined init with copy of __REAssetService((uint64_t)&v9, (uint64_t)v8);
    v6 = MEMORY[0x24BEE4AF8];
    v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_retain();
    __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v6, (uint64_t)v8, v7, 0, (uint64_t *)a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    outlined init with copy of __REAssetBundle(a1, (uint64_t)&v9);
    swift_beginAccess();
    outlined assign with take of __REAssetBundle?((uint64_t)&v9, v1 + 16);
    return swift_endAccess();
  }
  return result;
}

id __REAssetManager.engineQueue.getter()
{
  return (id)REAssetManagerGetEngineQueue();
}

uint64_t __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 80);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 80) = 0;
  return result;
}

uint64_t __REAssetManager.syncLoadsShouldWaitForResourceSharing.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

_BYTE *(*__REAssetManager.syncLoadsShouldWaitForResourceSharing.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter() & 1;
  return __REAssetManager.syncLoadsShouldWaitForResourceSharing.modify;
}

_BYTE *__REAssetManager.syncLoadsShouldWaitForResourceSharing.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 80) = result[8];
  return result;
}

uint64_t __REAssetManager.isFullLoadTracingEnabled.getter()
{
  return _REAssetManagerIsFullLoadTracingEnabled();
}

uint64_t __REAssetManager.loadBundle(at:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD v6[5];
  char v7;

  v6[3] = type metadata accessor for __REAssetManager();
  v6[4] = &protocol witness table for __REAssetManager;
  v6[0] = v2;
  v7 = 2;
  swift_retain();
  static __REAssetBundle.__init(url:assetService:materialDefinition:with:)(a1, v6, &v7, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t type metadata accessor for __REAssetManager()
{
  return objc_opt_self();
}

uint64_t __REAssetManager.makeBundle()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  Swift::Int v4;
  _BYTE v6[40];
  _QWORD v7[5];

  v7[3] = type metadata accessor for __REAssetManager();
  v7[4] = &protocol witness table for __REAssetManager;
  v7[0] = v1;
  outlined init with copy of __REAssetService((uint64_t)v7, (uint64_t)v6);
  v3 = MEMORY[0x24BEE4AF8];
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_retain();
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v3, (uint64_t)v6, v4, 0, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t __REAssetManager.__getDependencies(asset:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  REAssetHandleLoadNow();
  REAssetCopyDependencyArray();
  result = REAssetDynamicArrayGetSize();
  if ((result & 0x8000000000000000) == 0)
  {
    v1 = result;
    v2 = MEMORY[0x24BEE4AF8];
    if (!result)
    {
LABEL_8:
      RERelease();
      return v2;
    }
    v5 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    v3 = 0;
    while (v1 != v3)
    {
      result = REAssetDynamicArrayGetAsset();
      if (!result)
        goto LABEL_11;
      v4 = result;
      ++v3;
      RERetain();
      type metadata accessor for __REAsset();
      *(_QWORD *)(swift_allocObject() + 16) = v4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      if (v1 == v3)
      {
        v2 = v5;
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t __REAssetManager.__handle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter()
{
  uint64_t v0;
  int v1;
  id v2;
  void *v3;
  unsigned int v4;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 != 2)
    return v1 & 1;
  v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v3 = (void *)MEMORY[0x220768C3C](0xD00000000000003ALL, 0x800000021BE85680);
  v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  result = v4 ^ 1;
  *(_BYTE *)(v0 + 96) = v4 ^ 1;
  return result;
}

uint64_t __REAssetManager.asyncLoadsShouldWaitForResourceSharing.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = result;
  return result;
}

_BYTE *(*__REAssetManager.asyncLoadsShouldWaitForResourceSharing.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter() & 1;
  return __REAssetManager.asyncLoadsShouldWaitForResourceSharing.modify;
}

_BYTE *__REAssetManager.asyncLoadsShouldWaitForResourceSharing.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 96) = result[8];
  return result;
}

uint64_t __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter()
{
  uint64_t v0;
  int v1;
  id v2;
  void *v3;
  id v4;
  char v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(v0 + 97);
  if (v1 == 2)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v3 = (void *)MEMORY[0x220768C3C](0xD000000000000033, 0x800000021BE856C0);
    v4 = objc_msgSend(v2, sel_objectForKey_, v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(&v7, &v8);
    }
    else
    {
      v9 = MEMORY[0x24BEE1328];
      LOBYTE(v8) = 1;
    }
    v5 = swift_dynamicCast() ^ 1 | v7;
    *(_BYTE *)(v0 + 97) = v5 & 1;
  }
  else
  {
    v5 = v1 & 1;
  }
  return v5 & 1;
}

uint64_t __REAssetManager.syncLoadsShouldInitiateResourceSharing.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 97) = result;
  return result;
}

_BYTE *(*__REAssetManager.syncLoadsShouldInitiateResourceSharing.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter() & 1;
  return __REAssetManager.syncLoadsShouldInitiateResourceSharing.modify;
}

_BYTE *__REAssetManager.syncLoadsShouldInitiateResourceSharing.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 97) = result[8];
  return result;
}

uint64_t __REAssetManager.deinit()
{
  uint64_t v0;

  outlined destroy of __REAssetBundle?(v0 + 16);
  return v0;
}

uint64_t __REAssetManager.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of __REAssetBundle?(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for __REAssetService.mainBundle.getter in conformance __REAssetManager@<X0>(uint64_t a1@<X8>)
{
  return __REAssetManager._mainBundle.getter(a1);
}

uint64_t protocol witness for __REAssetService.loadBundle(at:) in conformance __REAssetManager@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  _QWORD v9[5];
  char v10;

  v7 = *v3;
  v9[3] = type metadata accessor for __REAssetManager();
  v9[4] = a2;
  v9[0] = v7;
  v10 = 2;
  swift_retain();
  static __REAssetBundle.__init(url:assetService:materialDefinition:with:)(a1, v9, &v10, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t protocol witness for __REAssetService.makeBundle() in conformance __REAssetManager@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _BYTE v9[40];
  _QWORD v10[5];

  v5 = *v2;
  v10[3] = type metadata accessor for __REAssetManager();
  v10[4] = a1;
  v10[0] = v5;
  outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)v9);
  v6 = MEMORY[0x24BEE4AF8];
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_retain();
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v6, (uint64_t)v9, v7, 0, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t protocol witness for __REAssetService.__getDependencies(asset:) in conformance __REAssetManager()
{
  return __REAssetManager.__getDependencies(asset:)();
}

uint64_t protocol witness for __REAssetService.syncLoadsShouldWaitForResourceSharing.getter in conformance __REAssetManager()
{
  return __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter() & 1;
}

uint64_t protocol witness for __REAssetService.asyncLoadsShouldWaitForResourceSharing.getter in conformance __REAssetManager()
{
  return __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter() & 1;
}

uint64_t protocol witness for __REAssetService.syncLoadsShouldInitiateResourceSharing.getter in conformance __REAssetManager()
{
  return __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter() & 1;
}

uint64_t __REAssetService.asset(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssetHandle;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  if (!AssetHandle)
    return 0;
  type metadata accessor for __REAsset();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = AssetHandle;
  return result;
}

uint64_t __REAssetService.assetRef(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __REAssetService.assetRef(named:in:)(a1, a2, a3);
}

uint64_t __REAssetService.resource<A>(ofType:at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  _QWORD v7[8];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v7, a1, a3);
  __REAssetBundle.__resource<A>(ofType:identifier:)(a2, a4);
  return outlined destroy of __REAssetBundle((uint64_t)v7);
}

uint64_t __REAssetBundle.resource<A>(ofType:at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return __REAssetBundle.resource<A>(ofType:identifier:)(a1, a2);
}

uint64_t __REAssetBundle.__renderGraphEmitter(at:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssetHandle;
  uint64_t v4;
  uint64_t result;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  if (!AssetHandle)
    return 0;
  type metadata accessor for __REAsset();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = AssetHandle;
  type metadata accessor for __RERenderGraphEmitter();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t __AssetLoadRequest.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

BOOL static __AssetLoadRequest.ResourceSharingSchedulingRequirement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
    return v3 == 2;
  if (v2 == 3)
    return v3 == 3;
  if ((v3 & 0xFE) == 2)
    return 0;
  return (((v2 & 1) == 0) ^ v3) & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __AssetLoadRequest.ResourceSharingSchedulingRequirement(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
    return v3 == 2;
  if (v2 == 3)
    return v3 == 3;
  if ((v3 & 0xFE) == 2)
    return 0;
  return (((v2 & 1) == 0) ^ v3) & 1;
}

uint64_t __AssetLoadRequest.__allocating_init(serviceLocator:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssetRequest;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v1 = a1 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)v7);
  v2 = v8;
  v3 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  AssetRequest = REAssetManagerCreateAssetRequest();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = AssetRequest;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  swift_release();
  return v5;
}

uint64_t __AssetLoadRequest.__allocating_init(assetService:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  v6 = specialized __AssetLoadRequest.__allocating_init(assetService:)(v5, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v6;
}

uint64_t __AssetLoadRequest.__allocating_init(assetService:shouldWaitForPeers:)(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssetRequest;
  uint64_t v7;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  AssetRequest = REAssetManagerCreateAssetRequest();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = AssetRequest;
  if ((a2 & 1) != 0)
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(_QWORD *a1, char a2, char a3)
{
  return specialized __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(a1, a2, a3);
}

uint64_t __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(_QWORD *a1)
{
  return specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(a1);
}

void __AssetLoadRequest.add(_:includeDescendants:)()
{
  JUMPOUT(0x22076B150);
}

uint64_t __AssetLoadRequest.progress.getter()
{
  return REAssetLoadRequestGetProgress();
}

uint64_t __AssetLoadRequest.error.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t *v2;

  result = REAssetLoadRequestCopyError();
  if (result)
  {
    v1 = result;
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
    result = swift_allocError();
    *v2 = v1;
  }
  return result;
}

void __AssetLoadRequest.setCompletionHandler(_:)(const void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v1 = _Block_copy(a1);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v4[4] = _sSbIeyBy_SbIegy_TRTA_0;
  v4[5] = v2;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v4[3] = &block_descriptor_6;
  v3 = _Block_copy(v4);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v3);
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1 & 1);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

Swift::Void __swiftcall __AssetLoadRequest.waitForCompletion()()
{
  REAssetLoadRequestWaitForCompletion();
}

Swift::Void __swiftcall __AssetLoadRequest.waitForCompletionFromNonEngineQueue()()
{
  REAssetLoadRequestWaitForCompletionFromOtherQueue();
}

uint64_t closure #1 in __AssetLoadRequest.Statistics.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, double))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t CumulativeFileSize;

  REAssetTypeStatsGetTypeName();
  v3 = String.init(cString:)();
  v5 = v4;
  REAssetTypeStatsGetCumulativeLoadTime();
  v7 = v6;
  CumulativeFileSize = REAssetTypeStatsGetCumulativeFileSize();
  a2(v3, v5, CumulativeFileSize, v7);
  return swift_bridgeObjectRelease();
}

uint64_t specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssetRequest;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  const char *v12;
  _QWORD *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = AssetRequest;
  if (!REAssetLoadRequestSetLoadAndWaitForResourceSharingClients())
  {
    type metadata accessor for REError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type REError and conformance REError, 255, (uint64_t (*)(uint64_t))type metadata accessor for REError, (uint64_t)&protocol conformance descriptor for REError);
    swift_allocError();
    v7 = v13;
    _StringGuts.grow(_:)(25);
    v14._object = (void *)0x800000021BE85A00;
    v14._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)();
    v15._countAndFlagsBits = 2105390;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v11 = 0xD000000000000045;
    v12 = "(Failed at REAssetLoadRequestSetLoadAndWaitForResourceSharingClients)";
    goto LABEL_5;
  }
  if ((REAssetLoadRequestSetShouldBlockECSSendsUntilCompleted() & 1) == 0)
  {
    type metadata accessor for REError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type REError and conformance REError, 255, (uint64_t (*)(uint64_t))type metadata accessor for REError, (uint64_t)&protocol conformance descriptor for REError);
    swift_allocError();
    v7 = v6;
    _StringGuts.grow(_:)(25);
    v8._object = (void *)0x800000021BE85A00;
    v8._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v8);
    _print_unlocked<A, B>(_:_:)();
    v9._countAndFlagsBits = 2105390;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v11 = 0xD000000000000042;
    v12 = "(Failed at REAssetLoadRequestSetShouldBlockECSSendsUntilCompleted)";
LABEL_5:
    v17 = (unint64_t)(v12 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v11);
    swift_bridgeObjectRelease();
    *v7 = 0xD00000000000002DLL;
    v7[1] = 0x800000021BE859D0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

uint64_t outlined destroy of __REAssetBundle?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized __REAssetService.assetRef(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t AssetDescriptorFromLabel;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v49 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v48 = (char *)&v44 - v11;
  v54 = 0;
  URL._bridgeToObjectiveC()((NSURL *)((char *)&v44 - v11));
  v13 = v12;
  v14 = RERealityFileCreateByOpeningFileAtURL();

  if (!v14)
  {
    v23 = v54;
    if (v54)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v24 = swift_allocError();
      *v25 = v23;
      a2 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v49);
      if (v24)
      {
LABEL_12:
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
        swift_willThrow();
        return a2;
      }
    }
    else
    {
      a2 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v49);
    }
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v33 = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = v34;
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(_QWORD *)v36 = v33;
    *(_QWORD *)(v36 + 8) = v35;
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = 0;
    *(_BYTE *)(v36 + 32) = 2;
    goto LABEL_12;
  }
  v45 = v7;
  v46 = v3;
  v15 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v15, (uint64_t)&v50);
  v16 = v52;
  v17 = v53;
  __swift_project_boxed_opaque_existential_1(&v50, v52);
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 32);
  swift_retain();
  v18(v16, v17);
  String.utf8CString.getter();
  v47 = v14;
  AssetDescriptorFromLabel = RERealityFileCreateAssetDescriptorFromLabel();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  if (!AssetDescriptorFromLabel)
  {
    v26 = v54;
    if (v54)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v27 = swift_allocError();
      *v28 = v26;
      v29 = v45;
      v30 = v48;
      v31 = a3;
      v32 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v48, v31, v49);
      if (v27)
      {
LABEL_15:
        (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v32);
        swift_willThrow();
        swift_release();
        RERelease();
        return a2;
      }
    }
    else
    {
      v29 = v45;
      v37 = a3;
      v32 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v48, v37, v49);
    }
    v50 = a1;
    v51 = a2;
    swift_bridgeObjectRetain();
    v38._countAndFlagsBits = 544106784;
    v38._object = (void *)0xE400000000000000;
    String.append(_:)(v38);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40 = v50;
    v41 = v51;
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(_QWORD *)v42 = v40;
    *(_QWORD *)(v42 + 8) = v41;
    v30 = v48;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_BYTE *)(v42 + 32) = 2;
    goto LABEL_15;
  }
  REAssetRegistrationOptionsCreate();
  REAssetRegistrationOptionsSetIsMutable();
  outlined init with copy of __REAssetService(v15, (uint64_t)&v50);
  v20 = v52;
  v21 = v53;
  __swift_project_boxed_opaque_existential_1(&v50, v52);
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
  v22 = REAssetHandleCreateFromAssetRegistrationOptions();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  type metadata accessor for __REAsset();
  a2 = swift_allocObject();
  *(_QWORD *)(a2 + 16) = v22;
  RERelease();
  RERelease();
  swift_release();
  RERelease();
  return a2;
}

uint64_t outlined destroy of __REAssetBundle(uint64_t a1)
{
  destroy for __REAssetBundle(a1);
  return a1;
}

uint64_t specialized __AssetLoadRequest.__allocating_init(assetService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssetRequest;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  AssetRequest = REAssetManagerCreateAssetRequest();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = AssetRequest;
  return result;
}

uint64_t specialized __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(_QWORD *a1, char a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssetRequest;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = AssetRequest;
  if ((REAssetLoadRequestSetLoadAndWaitForResourceSharingClients() & 1) == 0)
  {
    type metadata accessor for REError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type REError and conformance REError, 255, (uint64_t (*)(uint64_t))type metadata accessor for REError, (uint64_t)&protocol conformance descriptor for REError);
    swift_allocError();
    v11 = v10;
    _StringGuts.grow(_:)(92);
    v12._countAndFlagsBits = 0xD00000000000003FLL;
    v12._object = (void *)0x800000021BE85AC0;
    String.append(_:)(v12);
    if ((a2 & 1) != 0)
      v13 = 1702195828;
    else
      v13 = 0x65736C6166;
    if ((a2 & 1) != 0)
      v14 = 0xE400000000000000;
    else
      v14 = 0xE500000000000000;
    v15 = v14;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x800000021BE85B00;
    v16._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v16);
    if ((a3 & 1) != 0)
      v17 = 1702195828;
    else
      v17 = 0x65736C6166;
    if ((a3 & 1) != 0)
      v18 = 0xE400000000000000;
    else
      v18 = 0xE500000000000000;
    v19 = v18;
    String.append(_:)(*(Swift::String *)&v17);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 46;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    *v11 = 0;
    v11[1] = 0xE000000000000000;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

uint64_t sub_21BA9EAE8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t _sSbIeyBy_SbIegy_TRTA_0(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type __REAssetIdentifier and conformance __REAssetIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetIdentifier, &type metadata for __REAssetIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAssetIdentifier, &type metadata for __REAssetIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in __REAssetIdentifier()
{
  return MEMORY[0x24BEE0D80];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in __REAssetIdentifier()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in __REAssetIdentifier()
{
  return MEMORY[0x24BEE0D88];
}

uint64_t base witness table accessor for Equatable in __REAsset(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type __REAsset and conformance __REAsset, a2, (uint64_t (*)(uint64_t))type metadata accessor for __REAsset, (uint64_t)&protocol conformance descriptor for __REAsset);
}

uint64_t sub_21BA9EC18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter();
  *a1 = result & 1;
  return result;
}

_BYTE *sub_21BA9EC44(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 80) = *result;
  return result;
}

uint64_t sub_21BA9EC54@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter();
  *a1 = result & 1;
  return result;
}

_BYTE *sub_21BA9EC80(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 96) = *result;
  return result;
}

uint64_t sub_21BA9EC90@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter();
  *a1 = result & 1;
  return result;
}

_BYTE *sub_21BA9ECBC(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 97) = *result;
  return result;
}

ValueMetadata *type metadata accessor for __REAssetIdentifier()
{
  return &type metadata for __REAssetIdentifier;
}

uint64_t type metadata accessor for REAssetPathMapping()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for REAssetDeduplicationOperation()
{
  return objc_opt_self();
}

uint64_t method lookup function for __REAsset()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __REAsset.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of __REAsset.sanitizedDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of __REAsset.__handle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t type metadata accessor for __REAssetDescriptor()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for RESceneDescriptor()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for RERealityFileHeader()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of __REAssetService.mainBundle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __REAssetService.loadBundle(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of __REAssetService.makeBundle()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of __REAssetService.__handle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of __REAssetService.__getDependencies(asset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of __REAssetService.syncLoadsShouldWaitForResourceSharing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of __REAssetService.asyncLoadsShouldWaitForResourceSharing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of __REAssetService.syncLoadsShouldInitiateResourceSharing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t method lookup function for __REAssetManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __REAssetManager.__allocating_init(handle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of __REAssetManager.engineQueue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldWaitForResourceSharing.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldWaitForResourceSharing.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of __REAssetManager.isFullLoadTracingEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of __REAssetManager.mainBundle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of __REAssetManager.loadBundle(at:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of __REAssetManager.makeBundle()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of __REAssetManager.__getDependencies(asset:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of __REAssetManager.__handle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of __REAssetManager.asyncLoadsShouldWaitForResourceSharing.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of __REAssetManager.asyncLoadsShouldWaitForResourceSharing.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldInitiateResourceSharing.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldInitiateResourceSharing.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t type metadata accessor for __AssetLoadRequest()
{
  return objc_opt_self();
}

uint64_t method lookup function for __AssetLoadRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t getEnumTagSinglePayload for __AssetLoadRequest.ResourceSharingSchedulingRequirement(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 3;
  if (a2 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_21BA9EF5C + 4 * byte_21BE5BA10[v4]))();
}

uint64_t storeEnumTagSinglePayload for __AssetLoadRequest.ResourceSharingSchedulingRequirement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BA9F008 + 4 * byte_21BE5BA1A[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BA9F03C + 4 * byte_21BE5BA15[v5]))();
}

uint64_t sub_21BA9F03C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA9F044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA9F04CLL);
  return result;
}

uint64_t sub_21BA9F058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA9F060);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BA9F064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA9F06C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for __AssetLoadRequest.ResourceSharingSchedulingRequirement(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for __AssetLoadRequest.ResourceSharingSchedulingRequirement(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for __AssetLoadRequest.ResourceSharingSchedulingRequirement()
{
  return &type metadata for __AssetLoadRequest.ResourceSharingSchedulingRequirement;
}

uint64_t type metadata accessor for __AssetLoadRequest.Statistics()
{
  return objc_opt_self();
}

uint64_t outlined copy of __REAsset.LoadError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 && a5 != 2)
  {
    if (a5 != 1)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for __REAsset.LoadError(uint64_t a1)
{
  return outlined consume of __REAsset.LoadError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of __REAsset.LoadError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 && a5 != 2)
  {
    if (a5 != 1)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __REAsset.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of __REAsset.LoadError(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for __REAsset.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of __REAsset.LoadError(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of __REAsset.LoadError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for __REAsset.LoadError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of __REAsset.LoadError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAsset.LoadError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAsset.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for __REAsset.LoadError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for __REAsset.LoadError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __REAsset.LoadError()
{
  return &type metadata for __REAsset.LoadError;
}

uint64_t storeEnumTagSinglePayload for __REAssetIdentifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA9F3A0 + 4 * byte_21BE5BA1F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA9F3C0 + 4 * byte_21BE5BA24[v4]))();
}

_BYTE *sub_21BA9F3A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA9F3C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA9F3C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA9F3D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA9F3D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA9F3E0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for __REAssetIdentifier.CodingKeys()
{
  return &unk_24DFA80B8;
}

uint64_t type metadata accessor for REError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for REError;
  if (!type metadata singleton initialization cache for REError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x220772E3C](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAsset.LoadError and conformance __REAsset.LoadError;
  if (!lazy protocol witness table cache variable for type __REAsset.LoadError and conformance __REAsset.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAsset.LoadError, &type metadata for __REAsset.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAsset.LoadError and conformance __REAsset.LoadError);
  }
  return result;
}

uint64_t outlined init with copy of __REAssetBundle?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of __REAssetBundle(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for __REAssetBundle(a2, a1);
  return a2;
}

uint64_t outlined assign with take of __REAssetBundle?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for REError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithCopy for REError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for REError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of REError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of REError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for REError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *assignWithTake for REError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of REError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for REError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t Entity.ComponentSet.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v3;

  v3 = specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(*v1);
  swift_release();
  *a1 = v3;
  a1[1] = v3;
  a1[2] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ComponentSet.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v2 + 16);
  if (v3 == v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v3 >= v4)
  {
    __break(1u);
  }
  else
  {
    result = outlined init with copy of __REAssetService(v2 + 40 * v3 + 32, a1);
    *(_QWORD *)(v1 + 16) = v3 + 1;
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Entity.ComponentSet.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v2 + 16);
  if (v3 == v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v3 >= v4)
  {
    __break(1u);
  }
  else
  {
    result = outlined init with copy of __REAssetService(v2 + 40 * v3 + 32, a1);
    *(_QWORD *)(v1 + 16) = v3 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Entity.ComponentSet@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v3;

  v3 = specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(*v1);
  swift_release();
  *a1 = v3;
  a1[1] = v3;
  a1[2] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Entity.ComponentSet()
{
  return Entity.ComponentSet.count.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Entity.ComponentSet()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Entity.ComponentSet(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

BOOL static Entity.ComponentSet.Index.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL static Entity.ComponentSet.Index.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Entity.ComponentSet.Index(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Entity.ComponentSet.Index(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Entity.ComponentSet.Index(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Entity.ComponentSet.Index(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t Entity.ComponentSet.startIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t i;

  result = REEntityGetComponentCount();
  if (result < 1)
  {
    i = 0;
  }
  else
  {
    for (i = 0; i < result; ++i)
    {
      result = Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)();
      if ((result & 1) != 0)
        break;
      result = REEntityGetComponentCount();
    }
  }
  *a1 = i;
  return result;
}

uint64_t Entity.ComponentSet.index(after:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)result + 1;
  if (__OFADD__(*(_QWORD *)result, 1))
  {
    __break(1u);
  }
  else
  {
    while (1)
    {
      result = REEntityGetComponentCount();
      if (v3 >= result)
        break;
      result = Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)();
      if ((result & 1) != 0)
        break;
      ++v3;
    }
    *a2 = v3;
  }
  return result;
}

uint64_t Entity.ComponentSet.endIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REEntityGetComponentCount();
  *a1 = result;
  return result;
}

BOOL Entity.ComponentSet.isEmpty.getter()
{
  uint64_t v0;

  if (REEntityGetComponentCount() < 1)
  {
    v0 = 0;
  }
  else
  {
    v0 = 0;
    do
    {
      if (Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)())
        break;
      ++v0;
    }
    while (v0 < REEntityGetComponentCount());
  }
  return v0 == REEntityGetComponentCount();
}

BOOL Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt Class;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for __ServiceLocator();
  v0 = static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)&v13);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  v1 = v15;
  REEntityGetComponentAtIndex();
  Class = REComponentGetClass();
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
    if ((v6 & 1) != 0)
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 56) + 80 * v5 + 48);
      swift_release();
      return v7 == 2;
    }
  }
  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  swift_beginAccess();
  v9 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (v10 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v11 & 1) == 0))
  {
    swift_endAccess();
    swift_release();
    return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
  swift_endAccess();
  BuiltInComponentRegistry.componentInfo(for:)(v12, (uint64_t)&v13);
  swift_release();
  if (v14)
  {
    outlined consume of ComponentInfo?(v13, v14);
    return 0;
  }
  return 1;
}

uint64_t Entity.ComponentSet.formIndex(after:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)result + 1;
  if (__OFADD__(*(_QWORD *)result, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = (_QWORD *)result;
    while (1)
    {
      result = REEntityGetComponentCount();
      if (v1 >= result)
        break;
      result = Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)();
      if ((result & 1) != 0)
        break;
      ++v1;
    }
    *v2 = v1;
  }
  return result;
}

uint64_t *Entity.ComponentSet.distance(from:to:)(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t Shared;
  uint64_t v7;
  _QWORD *v8;
  uint64_t Default;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt Class;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[6];

  v2 = *result;
  if (*a2 < *result)
    goto LABEL_58;
  v37 = *a2;
  if (v2 != *a2)
  {
    v3 = 0;
    v4 = *a2;
    while (1)
    {
      v5 = __OFADD__(v3++, 1);
      if (v5)
        goto LABEL_56;
      v5 = __OFADD__(v2++, 1);
      if (v5)
        break;
      result = (uint64_t *)REEntityGetComponentCount();
      if (v2 < (uint64_t)result)
      {
        while (1)
        {
          Shared = REEngineGetShared();
          if (Shared)
          {
            v7 = Shared;
            if (one-time initialization token for lock != -1)
              swift_once();
            os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
            if (!static __ServiceLocator.sharedEngine || *((_QWORD *)static __ServiceLocator.sharedEngine + 3) != v7)
            {
              type metadata accessor for __Engine();
              swift_allocObject();
              static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v7);
              swift_release();
              specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
              specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
            v8 = static __ServiceLocator.sharedEngine;
            if (static __ServiceLocator.sharedEngine)
              goto LABEL_37;
          }
          else
          {
            static __ServiceLocator.sharedEngine = 0;
            swift_release();
            v8 = static __ServiceLocator.sharedEngine;
            if (static __ServiceLocator.sharedEngine)
              goto LABEL_37;
          }
          Default = REEngineConfigurationCreateDefault();
          type metadata accessor for EngineConfiguration();
          v10 = swift_allocObject();
          *(_QWORD *)(v10 + 16) = Default;
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v11 = REEngineConfigurationClone();
            v12 = swift_allocObject();
            *(_QWORD *)(v12 + 16) = v11;
            swift_release_n();
            v10 = v12;
          }
          REEngineConfigurationSetClockMode();
          if (one-time initialization token for defaultServices != -1)
            swift_once();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v13 = REEngineConfigurationClone();
            v14 = swift_allocObject();
            *(_QWORD *)(v14 + 16) = v13;
            swift_release_n();
            v10 = v14;
          }
          REEngineConfigurationSetServicesToCreate();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v15 = REEngineConfigurationClone();
            v16 = swift_allocObject();
            *(_QWORD *)(v16 + 16) = v15;
            swift_release_n();
            v10 = v16;
          }
          REEngineConfigurationSetServicesToUpdate();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v17 = REEngineConfigurationClone();
            v18 = swift_allocObject();
            *(_QWORD *)(v18 + 16) = v17;
            swift_release_n();
            v10 = v18;
          }
          REEngineConfigurationSetStartupOptions();
          if (one-time initialization token for defaultRenderFlags != -1)
            swift_once();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v19 = REEngineConfigurationClone();
            v20 = swift_allocObject();
            *(_QWORD *)(v20 + 16) = v19;
            swift_release_n();
            v10 = v20;
          }
          REEngineConfigurationSetRenderFlags();
          if (!specialized static __ServiceLocator.__sharedEngine.getter())
          {
            v39[0] = v10;
            v21 = specialized static __Engine.makeSharedEngine(_:)(v39);
            REEngineSetShared();
            static __ServiceLocator.sharedEngine = v21;
            swift_release();
            static __ServiceLocator.createdSharedEngine = 1;
          }
          swift_release();
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          result = (uint64_t *)specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
          v8 = static __ServiceLocator.sharedEngine;
          if (!static __ServiceLocator.sharedEngine)
            goto LABEL_60;
LABEL_37:
          result = (uint64_t *)swift_beginAccess();
          v22 = v8[5];
          if (!v22)
            goto LABEL_59;
          v23 = v22 + 80;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v23, (uint64_t)v39);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
          type metadata accessor for SceneManager();
          swift_dynamicCast();
          REEntityGetComponentAtIndex();
          Class = REComponentGetClass();
          swift_beginAccess();
          v25 = *(_QWORD *)(v38 + 16);
          swift_beginAccess();
          v26 = *(_QWORD *)(v25 + 24);
          if (*(_QWORD *)(v26 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v28 & 1) != 0))
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 56) + 80 * v27 + 48);
            result = (uint64_t *)swift_release();
            if (v29 == 2)
              goto LABEL_6;
          }
          else
          {
            if (one-time initialization token for handlesToCustomComponentTypes != -1)
              swift_once();
            swift_beginAccess();
            v30 = static SceneManager.handlesToCustomComponentTypes;
            if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
              && (v31 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v32 & 1) != 0))
            {
              v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 16 * v31);
              swift_endAccess();
              v34 = *(_QWORD *)(v38 + 16);
              swift_beginAccess();
              if (!*(_QWORD *)(*(_QWORD *)(v34 + 16) + 16)
                || (specialized __RawDictionaryStorage.find<A>(_:)(v33), (v35 & 1) == 0))
              {
                result = (uint64_t *)swift_release();
                goto LABEL_6;
              }
            }
            else
            {
              swift_endAccess();
            }
            result = (uint64_t *)swift_release();
          }
          v36 = v2 + 1;
          if (__OFADD__(v2, 1))
          {
            __break(1u);
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
          result = (uint64_t *)REEntityGetComponentCount();
          ++v2;
          if (v36 >= (uint64_t)result)
          {
            v2 = v36;
LABEL_6:
            v4 = v37;
            break;
          }
        }
      }
      if (v2 == v4)
        return (uint64_t *)v3;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    return result;
  }
  return 0;
}

uint64_t Entity.ComponentSet.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ComponentAtIndex;
  Swift::UInt Class;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Object;
  uint64_t v22;
  double v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  type metadata accessor for __ServiceLocator();
  v2 = static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v25);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  v3 = v27;
  ComponentAtIndex = REEntityGetComponentAtIndex();
  Class = REComponentGetClass();
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 16);
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 24);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(v7 + 56);
    if (*(_BYTE *)(v10 + 80 * v8 + 48) == 2)
    {
      v11 = v10 + 80 * v8;
      v12 = *(_QWORD *)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 24);
      v25 = ComponentAtIndex;
      v14 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 64);
      a1[3] = v12;
      a1[4] = v13;
      __swift_allocate_boxed_opaque_existential_1(a1);
      v14(&v25, v12, v13);
      return swift_release();
    }
  }
  else
  {
    if (one-time initialization token for handlesToCustomComponentTypes != -1)
      swift_once();
    swift_beginAccess();
    v15 = static SceneManager.handlesToCustomComponentTypes;
    if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
      && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v17 & 1) != 0))
    {
      v18 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v16);
      v19 = *v18;
      v20 = v18[1];
      swift_endAccess();
      Object = RECustomComponentGetObject();
      if (Object)
      {
        v22 = Object;
        v23 = BuiltInComponentRegistry.componentInfo(for:)(v19, (uint64_t)&v25);
        if (!v26)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, double))(v20 + 96))(v22, 0, v19, v20, v23);
          return swift_release();
        }
        outlined consume of ComponentInfo?(v25, v26);
      }
    }
    else
    {
      swift_endAccess();
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void Entity.ComponentSet.Indices.startIndex.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

void Entity.ComponentSet.Indices.endIndex.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

_QWORD *Entity.ComponentSet.Indices.index(after:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    while (v3 < REEntityGetComponentCount() && !Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)())
      ++v3;
    result = (_QWORD *)swift_release();
    *a2 = v3;
  }
  return result;
}

uint64_t Entity.ComponentSet.Indices.formIndex(after:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)result + 1;
  if (__OFADD__(*(_QWORD *)result, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = (_QWORD *)result;
    while (1)
    {
      result = REEntityGetComponentCount();
      if (v1 >= result)
        break;
      result = Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)();
      if ((result & 1) != 0)
        break;
      ++v1;
    }
    *v2 = v1;
  }
  return result;
}

_QWORD *Entity.ComponentSet.Indices.subscript.getter@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t *Entity.ComponentSet.Indices.distance(from:to:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[2];

  v3 = *a2;
  v4 = *v2;
  v7[0] = *a1;
  v7[1] = v4;
  v6 = v3;
  return Entity.ComponentSet.distance(from:to:)(v7, &v6);
}

uint64_t *Entity.ComponentSet.Indices.subscript.getter@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = result[1];
  v5 = v2[2];
  if (*result >= v2[1])
  {
    v7 = __OFSUB__(v5, v4);
    v6 = v5 - v4 < 0;
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  if (v6 != v7)
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2;
    a2[1] = v3;
    a2[2] = v4;
    return (uint64_t *)swift_retain();
  }
  return result;
}

uint64_t Entity.ComponentSet.Indices.indices.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return swift_retain();
}

void protocol witness for Collection.startIndex.getter in conformance Entity.ComponentSet.Indices(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Entity.ComponentSet.Indices(_QWORD *a1, _QWORD *a2))()
{
  *a1 = *a2;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Entity.ComponentSet.Indices@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = result[1];
  v5 = v2[2];
  if (*result >= v2[1])
  {
    v7 = __OFSUB__(v5, v4);
    v6 = v5 - v4 < 0;
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  if (v6 != v7)
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2;
    a2[1] = v3;
    a2[2] = v4;
    return (uint64_t *)swift_retain();
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance Entity.ComponentSet.Indices@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return swift_retain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Entity.ComponentSet.Indices()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) == *(_QWORD *)(v0 + 16);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance Entity.ComponentSet.Indices@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Entity.ComponentSet.Indices@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, a4);
}

uint64_t *protocol witness for Collection.distance(from:to:) in conformance Entity.ComponentSet.Indices(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[2];

  v3 = *a2;
  v4 = *v2;
  v7[0] = *a1;
  v7[1] = v4;
  v6 = v3;
  return Entity.ComponentSet.distance(from:to:)(v7, &v6);
}

__n128 protocol witness for Sequence.makeIterator() in conformance Entity.ComponentSet.Indices@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = result.n128_u64[0];
  return result;
}

uint64_t *protocol witness for Collection.count.getter in conformance Entity.ComponentSet.Indices()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5[2];

  v1 = *v0;
  v2 = v0[2];
  v5[0] = v0[1];
  v5[1] = v1;
  v4 = v2;
  return Entity.ComponentSet.distance(from:to:)(v5, &v4);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Entity.ComponentSet.Indices()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_release();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Entity.ComponentSet.Indices(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t Entity.ComponentSet.indices.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  swift_retain();
  if (REEntityGetComponentCount() < 1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      if (Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)())
        break;
      ++v4;
    }
    while (v4 < REEntityGetComponentCount());
  }
  result = REEntityGetComponentCount();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = result;
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *v1;
  v4[0] = -1;
  v4[1] = v2;
  return Entity.ComponentSet.index(after:)((uint64_t)v4, a1);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REEntityGetComponentCount();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance Entity.ComponentSet(uint64_t **a1))(uint64_t *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  Entity.ComponentSet.subscript.getter(v2);
  return protocol witness for Collection.subscript.read in conformance PhysicsJoints;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return specialized Collection<>.subscript.getter(*a1, a1[1], *v2, a2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, a4);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance Entity.ComponentSet(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  uint64_t v6;

  v3 = *v1;
  v5[0] = *a1;
  v5[1] = v3;
  result = Entity.ComponentSet.index(after:)((uint64_t)v5, &v6);
  *a1 = v6;
  return result;
}

_QWORD *specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t ComponentCount;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t ComponentAtIndex;
  Swift::UInt Class;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Object;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD v53[2];
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;

  type metadata accessor for __ServiceLocator();
  v2 = static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v63);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  ComponentCount = REEntityGetComponentCount();
  if (ComponentCount <= 0)
  {
    swift_release();
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v4 = ComponentCount;
    v53[1] = v61;
    v5 = (uint64_t *)(v61 + 16);
    swift_beginAccess();
    v6 = 0;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v55 = (uint64_t *)(v61 + 16);
    v56 = a1;
    v54 = v4;
    do
    {
      ComponentAtIndex = REEntityGetComponentAtIndex();
      Class = REComponentGetClass();
      v10 = *v5;
      swift_beginAccess();
      v11 = *(_QWORD *)(v10 + 24);
      if (*(_QWORD *)(v11 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(v11 + 56);
        v15 = v14 + 80 * v12;
        if (*(_BYTE *)(v15 + 48) == 2)
        {
          v17 = *(_QWORD *)(v15 + 8);
          v16 = *(_QWORD *)(v15 + 16);
          v18 = *(_QWORD *)(v15 + 24);
          v19 = *(_QWORD *)(v15 + 56);
          v20 = *(_QWORD *)(v14 + 80 * v12 + 72);
          v60 = ComponentAtIndex;
          v21 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 64);
          v64 = v16;
          v65 = v18;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v63);
          v57 = v20;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v58 = v19;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v21(&v60, v16, v18);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v24 = v7;
          v62 = v7;
          v59 = v17;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
            v62 = (_QWORD *)isUniquelyReferenced_nonNull_native;
            v24 = (_QWORD *)isUniquelyReferenced_nonNull_native;
          }
          v25 = v54;
          v27 = v24[2];
          v26 = v24[3];
          if (v27 >= v26 >> 1)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
            v62 = (_QWORD *)isUniquelyReferenced_nonNull_native;
          }
          v28 = MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
          v30 = (char *)v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v31 + 16))(v30, boxed_opaque_existential_1, v16, v28);
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v30, (uint64_t *)&v62, v16, v18);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
          v7 = v62;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v4 = v25;
          v5 = v55;
        }
      }
      else
      {
        if (one-time initialization token for handlesToCustomComponentTypes != -1)
          swift_once();
        swift_beginAccess();
        v32 = static SceneManager.handlesToCustomComponentTypes;
        if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
          && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v34 & 1) != 0))
        {
          v35 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 16 * v33);
          v36 = *v35;
          v37 = v35[1];
          swift_endAccess();
          Object = RECustomComponentGetObject();
          if (Object)
          {
            v39 = Object;
            v40 = *v5;
            swift_beginAccess();
            if (!*(_QWORD *)(*(_QWORD *)(v40 + 16) + 16)
              || (specialized __RawDictionaryStorage.find<A>(_:)(v36), (v41 & 1) == 0))
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 96))(v63, v39, 0, v36, v37);
              v42 = swift_isUniquelyReferenced_nonNull_native();
              v62 = v7;
              if ((v42 & 1) == 0)
              {
                v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
                v62 = v7;
              }
              v44 = v7[2];
              v43 = v7[3];
              if (v44 >= v43 >> 1)
                v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v7);
              v45 = v64;
              v46 = v65;
              v47 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v63, v64);
              v48 = MEMORY[0x24BDAC7A8](v47);
              v50 = (char *)v53 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, __n128))(v51 + 16))(v50, v48);
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, (uint64_t)v50, (uint64_t *)&v62, v45, v46);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
              v7 = v62;
            }
          }
        }
        else
        {
          swift_endAccess();
        }
      }
      ++v6;
    }
    while (v4 != v6);
    swift_release();
  }
  return v7;
}

uint64_t outlined consume of ComponentInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ComponentSet.Iterator and conformance Entity.ComponentSet.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ComponentSet.Iterator and conformance Entity.ComponentSet.Iterator;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Iterator and conformance Entity.ComponentSet.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ComponentSet.Iterator, &type metadata for Entity.ComponentSet.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Iterator and conformance Entity.ComponentSet.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ComponentSet.Index, &type metadata for Entity.ComponentSet.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ComponentSet.Index, &type metadata for Entity.ComponentSet.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ComponentSet.Indices, &type metadata for Entity.ComponentSet.Indices);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ComponentSet.Indices, &type metadata for Entity.ComponentSet.Indices);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Entity.ComponentSet.Indices()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<Entity.ComponentSet.Indices> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<Entity.ComponentSet.Indices>, MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Entity.ComponentSet and conformance Entity.ComponentSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ComponentSet and conformance Entity.ComponentSet;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet and conformance Entity.ComponentSet)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ComponentSet, &type metadata for Entity.ComponentSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet and conformance Entity.ComponentSet);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Entity.ComponentSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<Entity.ComponentSet> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<Entity.ComponentSet>, MEMORY[0x24BEE4238]);
}

_QWORD *initializeBufferWithCopyOfBuffer for Entity.ComponentSet.Iterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Entity.ComponentSet.Iterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Entity.ComponentSet.Iterator(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ComponentSet.Iterator()
{
  return &type metadata for Entity.ComponentSet.Iterator;
}

ValueMetadata *type metadata accessor for Entity.ComponentSet.Index()
{
  return &type metadata for Entity.ComponentSet.Index;
}

uint64_t initializeBufferWithCopyOfBuffer for Entity.ComponentSet.Indices(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Entity.ComponentSet.Indices(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Entity.ComponentSet.Indices(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ComponentSet.Iterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.ComponentSet.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.ComponentSet.Indices()
{
  return &type metadata for Entity.ComponentSet.Indices;
}

void one-time initialization function for basicSpinAnimationData()
{
  static EmphasizeAnimations.basicSpinAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicSpinAnimationData;
}

void one-time initialization function for playfulSpinAnimationData()
{
  static EmphasizeAnimations.playfulSpinAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulSpinAnimationData;
}

void one-time initialization function for wildSpinAnimationData()
{
  static EmphasizeAnimations.wildSpinAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildSpinAnimationData;
}

_QWORD *specialized static EmphasizeAnimations.createEmphasizeSpinAnimation(style:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (!*a1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 97, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for basicSpinAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 148, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for playfulSpinAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 27, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for wildSpinAnimationData != -1)
LABEL_9:
    swift_once();
LABEL_8:
  v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t HasSynchronization.synchronization.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *, _QWORD);
  _BYTE v4[32];
  uint64_t v5[5];

  outlined init with take of SynchronizationComponent?(a1, (uint64_t)v5);
  v2 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v4);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5);
  swift_release();
  outlined release of SynchronizationComponent?(v5);
  return v2(v4, 0);
}

uint64_t outlined init with take of SynchronizationComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t HasSynchronization.synchronization.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

double key path getter for HasSynchronization.synchronization : <A>A@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  HasSynchronization.synchronization.getter((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t key path setter for HasSynchronization.synchronization : <A>A(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[5];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6[0] = *a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  outlined copy of SynchronizationComponent?(v6[0], v1, v2, v3);
  return HasSynchronization.synchronization.setter((uint64_t)v6);
}

void (*HasSynchronization.synchronization.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v9;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[6] = a3;
  v7[7] = v3;
  v7[5] = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 96))(&v9);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v7);
  swift_release();
  return HasSynchronization.synchronization.modify;
}

void HasSynchronization.synchronization.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9[0] = v4;
  v9[1] = v5;
  v9[2] = v6;
  v9[3] = v7;
  v9[4] = v8;
  if ((a2 & 1) != 0)
  {
    outlined copy of SynchronizationComponent?(v4, v5, v6, v7);
    HasSynchronization.synchronization.setter((uint64_t)v9);
    outlined consume of SynchronizationComponent?(*v3, v3[1], v3[2], v3[3]);
  }
  else
  {
    HasSynchronization.synchronization.setter((uint64_t)v9);
  }
  free(v3);
}

uint64_t HasSynchronization.isOwner.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v0 + 96))(&v7);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v3);
  swift_release();
  v1 = (v6 == 2) | v4;
  outlined consume of SynchronizationComponent?(v3, v4, v5, v6);
  return v1 & 1;
}

uint64_t HasSynchronization.requestOwnership(timeout:_:)(uint64_t (*a1)(__int128 *), uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;

  if ((HasSynchronization.isOwner.getter() & 1) != 0)
  {
    LOBYTE(v14) = 0;
    return a1(&v14);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v3 + 96))(&v10);
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v14);
    swift_release();
    v8 = v16;
    if (v16 == 2)
    {
      v10 = v14;
      v11 = v15;
      v12 = 2;
      v13 = v17;
    }
    else
    {
      v9 = *(_QWORD *)&v15;
      swift_retain();
      outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v9, v8);
      v10 = v14;
      v11 = a3;
      v12 = (uint64_t)a1;
      v13 = a2;
    }
    return HasSynchronization.synchronization.setter((uint64_t)&v10);
  }
}

uint64_t HasSynchronization.withUnsynchronized(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  void (*v3)(uint64_t *__return_ptr);
  uint64_t ComponentByClass;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 88);
  v3(&v7);
  RENetworkComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
    ComponentByClass = RENetworkComponentSetSuppressMarkDirty();
  v5 = a1(ComponentByClass);
  ((void (*)(uint64_t *__return_ptr, uint64_t))v3)(&v7, v5);
  RENetworkComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
    return RENetworkComponentSetSuppressMarkDirty();
  return result;
}

BOOL static SynchronizationComponent.OwnershipTransferMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SynchronizationComponent.OwnershipTransferMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t SynchronizationComponent.identifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SynchronizationComponent.isOwner.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

void SynchronizationComponent.ownershipTransferMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 10);
}

_BYTE *SynchronizationComponent.ownershipTransferMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = *result;
  return result;
}

uint64_t (*SynchronizationComponent.ownershipTransferMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SynchronizationComponent.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 7) = 0;
  *(_QWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_21BE56B70;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

double static SynchronizationComponent.__fromCore(_:)@<D0>(uint64_t a1@<X8>)
{
  char IsAuthoritative;
  char ShouldAlwaysMigrate;
  uint64_t v4;
  char IsOwnershipLocked;
  double result;

  IsAuthoritative = RENetworkComponentIsAuthoritative();
  ShouldAlwaysMigrate = RENetworkComponentShouldAlwaysMigrate();
  v4 = RENetworkComponentGuid();
  IsOwnershipLocked = RENetworkComponentIsOwnershipLocked();
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = IsAuthoritative;
  *(_BYTE *)(a1 + 9) = ShouldAlwaysMigrate;
  *(_BYTE *)(a1 + 10) = IsOwnershipLocked;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_21BE56B70;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t SynchronizationComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(__int128 *);
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t IsOwnershipLocked;
  uint64_t SceneNullable;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FirstWhere<Scene.Publisher<SynchronizationEvents.OwnershipResponse>>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = *v1;
  v9 = *((_BYTE *)v1 + 10);
  v11 = v1[2];
  v10 = (void (*)(__int128 *))v1[3];
  v12 = v1[4];
  RENetworkComponentSetAlwaysMigrate();
  result = RENetworkComponentIsOwnershipLocked();
  if ((result & 1) != 0)
  {
    if ((v9 & 1) == 0)
      result = RENetworkComponentUnlockEntity();
  }
  else if ((v9 & 1) != 0)
  {
    result = RENetworkComponentLockEntity();
  }
  if (v10 != (void (*)(__int128 *))1)
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v10);
    result = RENetworkComponentIsAuthoritative();
    if ((result & 1) != 0)
    {
      if (v10)
      {
        LOBYTE(v24) = 0;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v10);
        v10(&v24);
        outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
        return outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
      }
    }
    else
    {
      IsOwnershipLocked = RENetworkComponentIsOwnershipLocked();
      result = MEMORY[0x22076EA68](v7, IsOwnershipLocked, 0, 0, *(double *)&v11);
      if (v10)
      {
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v10);
        REComponentGetEntity();
        SceneNullable = REEntityGetSceneNullable();
        if (SceneNullable)
        {
          v16 = SceneNullable;
          type metadata accessor for BoxedSubscription();
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = 0u;
          v22 = v17 + 16;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_QWORD *)(v17 + 48) = 0;
          v18 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v18)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            swift_allocObject();
            Scene.init(coreScene:)(v16);
          }
          v26 = 0;
          v24 = 0u;
          v25 = 0u;
          specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v24, &v23);
          swift_release();
          outlined destroy of BodyTrackingComponent?((uint64_t)&v24, &demangling cache variable for type metadata for EventSource?);
          *(_QWORD *)&v24 = v23;
          *(_QWORD *)(swift_allocObject() + 16) = v8;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipResponse>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<SynchronizationEvents.OwnershipResponse> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipResponse>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
          Publisher.first(where:)();
          swift_release();
          swift_release();
          v19 = (_QWORD *)swift_allocObject();
          v19[2] = v17;
          v19[3] = v10;
          v19[4] = v12;
          outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Publishers.FirstWhere<Scene.Publisher<SynchronizationEvents.OwnershipResponse>> and conformance Publishers.FirstWhere<A>, &demangling cache variable for type metadata for Publishers.FirstWhere<Scene.Publisher<SynchronizationEvents.OwnershipResponse>>, MEMORY[0x24BDB94E0]);
          swift_retain();
          v20 = Publisher<>.sink(receiveValue:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          *((_QWORD *)&v25 + 1) = type metadata accessor for AnyCancellable();
          v26 = MEMORY[0x24BDB9B58];
          outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
          outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
          *(_QWORD *)&v24 = v20;
          v21 = v22;
          swift_beginAccess();
          outlined assign with take of Cancellable?((uint64_t)&v24, v21);
          swift_endAccess();
          return swift_release();
        }
        else
        {
          outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
          return outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in SynchronizationComponent.__toCore(_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5[3];
  uint64_t v6;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v5);
  swift_release();
  result = 0;
  if (v6 != 2)
  {
    v4 = v5[0];
    outlined consume of SynchronizationComponent?(v5[0], v5[1], v5[2], v6);
    return v4 == a2;
  }
  return result;
}

uint64_t closure #2 in SynchronizationComponent.__toCore(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *))
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  uint64_t v8;

  v5 = a2 + 16;
  swift_beginAccess();
  result = outlined init with copy of Cancellable?(v5, (uint64_t)v7);
  if (v8)
  {
    __swift_project_boxed_opaque_existential_1(v7, v8);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    LOBYTE(v7[0]) = *(_BYTE *)(a1 + 48);
    return a3(v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static SynchronizationComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 9;
}

uint64_t static SynchronizationComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8) && *(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 10) ^ *(unsigned __int8 *)(a1 + 10) ^ 1) & 1;
  else
    return 0;
}

double protocol witness for static Component.__fromCore(_:) in conformance SynchronizationComponent@<D0>(uint64_t a1@<X8>)
{
  char IsAuthoritative;
  char ShouldAlwaysMigrate;
  uint64_t v4;
  char IsOwnershipLocked;
  double result;

  IsAuthoritative = RENetworkComponentIsAuthoritative();
  ShouldAlwaysMigrate = RENetworkComponentShouldAlwaysMigrate();
  v4 = RENetworkComponentGuid();
  IsOwnershipLocked = RENetworkComponentIsOwnershipLocked();
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = IsAuthoritative;
  *(_BYTE *)(a1 + 9) = ShouldAlwaysMigrate;
  *(_BYTE *)(a1 + 10) = IsOwnershipLocked;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_21BE56B70;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance SynchronizationComponent(_DWORD *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8) && *(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 10) ^ *(unsigned __int8 *)(a1 + 10) ^ 1) & 1;
  else
    return 0;
}

uint64_t SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

_BYTE *(*SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 9);
  return SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.modify;
}

_BYTE *SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 9) = result[8];
  return result;
}

uint64_t SynchronizationComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v21 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v19 = *(_QWORD *)(v2 - 8);
  v20 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *((_BYTE *)v1 + 8);
  LOBYTE(v6) = *((_BYTE *)v1 + 9);
  v10 = *((_BYTE *)v1 + 10);
  v11 = v1[2];
  v12 = v1[3];
  v13 = v1[4];
  v22 = *v1;
  v8 = v22;
  v23 = v9;
  v24 = v6;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  v28 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v14 + 32) = 0x696669746E656469;
  *(_QWORD *)(v14 + 40) = 0xEA00000000007265;
  v15 = MEMORY[0x24BEE4568];
  *(_QWORD *)(v14 + 48) = v8;
  *(_QWORD *)(v14 + 72) = v15;
  *(_QWORD *)(v14 + 80) = 0x72656E774F7369;
  *(_QWORD *)(v14 + 88) = 0xE700000000000000;
  v16 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v14 + 96) = v9;
  *(_QWORD *)(v14 + 120) = v16;
  *(_QWORD *)(v14 + 128) = 0xD000000000000015;
  *(_QWORD *)(v14 + 136) = 0x800000021BE85BD0;
  *(_QWORD *)(v14 + 168) = &type metadata for SynchronizationComponent.OwnershipTransferMode;
  *(_BYTE *)(v14 + 144) = v10;
  v17 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v4, *MEMORY[0x24BEE43C0], v20);
  outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, v12);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void outlined copy of SynchronizationComponent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 2)
    outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(a3, a4);
}

uint64_t sub_21BAA27A8()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in SynchronizationComponent.__toCore(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SynchronizationComponent.__toCore(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_21BAA27C0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SynchronizationComponent.__toCore(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in SynchronizationComponent.__toCore(_:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD *))(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type SynchronizationComponent.OwnershipTransferMode and conformance SynchronizationComponent.OwnershipTransferMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferMode and conformance SynchronizationComponent.OwnershipTransferMode;
  if (!lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferMode and conformance SynchronizationComponent.OwnershipTransferMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SynchronizationComponent.OwnershipTransferMode, &type metadata for SynchronizationComponent.OwnershipTransferMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferMode and conformance SynchronizationComponent.OwnershipTransferMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SynchronizationComponent.OwnershipTransferCompletionResult and conformance SynchronizationComponent.OwnershipTransferCompletionResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferCompletionResult and conformance SynchronizationComponent.OwnershipTransferCompletionResult;
  if (!lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferCompletionResult and conformance SynchronizationComponent.OwnershipTransferCompletionResult)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SynchronizationComponent.OwnershipTransferCompletionResult, &type metadata for SynchronizationComponent.OwnershipTransferCompletionResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferCompletionResult and conformance SynchronizationComponent.OwnershipTransferCompletionResult);
  }
  return result;
}

uint64_t sub_21BAA2890()
{
  return 16;
}

__n128 sub_21BAA289C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAA28A8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 9);
  return result;
}

_BYTE *sub_21BAA28B4(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 9) = *result;
  return result;
}

uint64_t destroy for SynchronizationComponent(uint64_t result)
{
  if (*(_QWORD *)(result + 24) >= 2uLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v3 = (_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v3;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v3;
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v5;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
  }
  return a1;
}

uint64_t assignWithCopy for SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v4 = (uint64_t *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  v5 = a1 + 16;
  v6 = (__int128 *)(a2 + 16);
  v8 = (_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 != 1)
  {
    if (v3 == 1)
    {
      outlined destroy of BodyTrackingComponent?(a1 + 16, &demangling cache variable for type metadata for (Double, (())?));
      v10 = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = *v6;
      *(_QWORD *)(v5 + 16) = v10;
      return a1;
    }
    *(_QWORD *)v5 = *(_QWORD *)v6;
    v11 = *v4;
    if (v7)
    {
      if (v11)
      {
        v12 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = v12;
        swift_retain();
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v11)
    {
      goto LABEL_12;
    }
LABEL_14:
    *v8 = *(_OWORD *)v4;
    return a1;
  }
  if (v3 != 1)
  {
    *(_QWORD *)v5 = *(_QWORD *)v6;
    v11 = *v4;
    if (!*v4)
      goto LABEL_14;
LABEL_12:
    v13 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v13;
    swift_retain();
    return a1;
  }
  v9 = *v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)v5 = v9;
  return a1;
}

uint64_t assignWithTake for SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v3 = (_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + 16);
  v6 = (_OWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 != 1)
  {
    v8 = (_OWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 24);
    if (v7 != 1)
    {
      *v3 = *v4;
      if (v5)
      {
        if (v7)
        {
          v10 = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 24) = v7;
          *(_QWORD *)(a1 + 32) = v10;
          swift_release();
          return a1;
        }
        swift_release();
      }
      else if (v7)
      {
        v11 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = v11;
        return a1;
      }
      *v6 = *v8;
      return a1;
    }
    outlined destroy of BodyTrackingComponent?(a1 + 16, &demangling cache variable for type metadata for (Double, (())?));
  }
  *(_OWORD *)v3 = *(_OWORD *)v4;
  v3[2] = v4[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for SynchronizationComponent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for SynchronizationComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationComponent()
{
  return &type metadata for SynchronizationComponent;
}

ValueMetadata *type metadata accessor for SynchronizationComponent.OwnershipTransferMode()
{
  return &type metadata for SynchronizationComponent.OwnershipTransferMode;
}

uint64_t storeEnumTagSinglePayload for SynchronizationComponent.OwnershipTransferMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BAA2C90 + 4 * byte_21BE5C315[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BAA2CC4 + 4 * asc_21BE5C310[v4]))();
}

uint64_t sub_21BAA2CC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAA2CCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAA2CD4);
  return result;
}

uint64_t sub_21BAA2CE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAA2CE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BAA2CEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAA2CF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationComponent.OwnershipTransferCompletionResult()
{
  return &type metadata for SynchronizationComponent.OwnershipTransferCompletionResult;
}

void Atomic.wrappedValue.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Atomic.load()(a1, a2);
}

uint64_t Atomic.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized Atomic.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void Atomic.load()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v4 = *v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v4 + 16);
  v7 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v6, v5);
  os_unfair_lock_unlock(v7);
}

void Atomic.store(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v4 + 16);
  v7 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  v8 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, a1, v5);
  os_unfair_lock_unlock(v7);
}

void (*Atomic.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  Atomic.load()(a2, (uint64_t)v9);
  return Atomic.wrappedValue.modify;
}

void Atomic.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    Atomic.store(_:)((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    Atomic.store(_:)((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Atomic.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = specialized OSAllocatedUnfairLock.init(uncheckedState:)();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t specialized OSAllocatedUnfairLock.init(uncheckedState:)()
{
  type metadata accessor for os_unfair_lock_s(255);
  type metadata accessor for ManagedBuffer();
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
}

void sub_21BAA3090(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for Atomic(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  Atomic.wrappedValue.getter(v5, a4);
}

uint64_t sub_21BAA30D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for Atomic(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return specialized Atomic.wrappedValue.setter(a1, v5);
}

uint64_t sub_21BAA3114()
{
  return 8;
}

_QWORD *sub_21BAA3120(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for Atomic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Atomic);
}

uint64_t partial apply for closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x24BEE27A8]) - 8) + 16))(a2, v3);
}

uint64_t OrbitEntityAction.pivotEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t OrbitEntityAction.pivotEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of ActionEntityResolution();
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*OrbitEntityAction.pivotEntity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float OrbitEntityAction.revolutions.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 20);
}

void OrbitEntityAction.revolutions.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 20) = a1;
}

uint64_t (*OrbitEntityAction.revolutions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 OrbitEntityAction.orbitalAxis.getter()
{
  __n128 *v0;

  return v0[2];
}

void OrbitEntityAction.orbitalAxis.setter(__n128 a1)
{
  __n128 *v1;

  v1[2] = a1;
}

uint64_t (*OrbitEntityAction.orbitalAxis.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t OrbitEntityAction.orientToPath.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t OrbitEntityAction.orientToPath.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

_BYTE *(*OrbitEntityAction.orientToPath.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 48);
  return OrbitEntityAction.orientToPath.modify;
}

_BYTE *OrbitEntityAction.orientToPath.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 48) = result[8];
  return result;
}

uint64_t (*OrbitEntityAction.isOrientedToPath.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

ValueMetadata *OrbitEntityAction.animatedValueType.getter()
{
  return &type metadata for Transform;
}

uint64_t OrbitEntityAction.isAdditive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t OrbitEntityAction.isAdditive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*OrbitEntityAction.isAdditive.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float32x4_t OrbitEntityAction.init(pivotEntity:revolutions:orbitalAxis:isOrientedToPath:isAdditive:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float32x4_t a6@<Q1>)
{
  char v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x4_t result;

  v6 = *(_BYTE *)(a1 + 16);
  v7 = (int32x4_t)vmulq_f32(a6, a6);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_BYTE *)(a4 + 16) = v6;
  *(float *)(a4 + 20) = a5;
  result = vmulq_n_f32(a6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  *(float32x4_t *)(a4 + 32) = result;
  *(_BYTE *)(a4 + 48) = a2;
  *(_BYTE *)(a4 + 49) = a3;
  return result;
}

float32x4_t OrbitEntityAction.init(pivotEntity:revolutions:orbitalAxis:orientToPath:isAdditive:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float32x4_t a6@<Q1>)
{
  char v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x4_t result;

  v6 = *(_BYTE *)(a1 + 16);
  v7 = (int32x4_t)vmulq_f32(a6, a6);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_BYTE *)(a4 + 16) = v6;
  *(float *)(a4 + 20) = a5;
  result = vmulq_n_f32(a6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  *(float32x4_t *)(a4 + 32) = result;
  *(_BYTE *)(a4 + 48) = a2;
  *(_BYTE *)(a4 + 49) = a3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance OrbitEntityAction.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BAA33A0 + 4 * byte_21BE5C540[*v0]))(0x746E45746F766970, 0xEB00000000797469);
}

uint64_t sub_21BAA33A0()
{
  return 0x6974756C6F766572;
}

uint64_t sub_21BAA33C4()
{
  return 0x416C61746962726FLL;
}

unint64_t sub_21BAA33E4()
{
  return 0xD000000000000010;
}

uint64_t sub_21BAA3400()
{
  return 0x6974696464417369;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance OrbitEntityAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized OrbitEntityAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrbitEntityAction.CodingKeys()
{
  lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrbitEntityAction.CodingKeys()
{
  lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t OrbitEntityAction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OrbitEntityAction.CodingKeys>);
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  v13 = *((_OWORD *)v1 + 2);
  v9 = *((unsigned __int8 *)v1 + 48);
  v14 = *((unsigned __int8 *)v1 + 49);
  v15 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_QWORD *)&v19 = v7;
  *((_QWORD *)&v19 + 1) = v6;
  v20 = v8;
  v18 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  v10 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v10)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v5, v3);
  v12 = v16;
  LOBYTE(v19) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  v19 = v13;
  v18 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4108]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v19) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v19) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v5, v3);
}

unint64_t lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for OrbitEntityAction.CodingKeys, &unk_24DFA8908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for OrbitEntityAction.CodingKeys, &unk_24DFA8908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for OrbitEntityAction.CodingKeys, &unk_24DFA8908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for OrbitEntityAction.CodingKeys, &unk_24DFA8908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys);
  }
  return result;
}

uint64_t OrbitEntityAction.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  char v10;
  int v11;
  int v12;
  char v14;
  _OWORD *v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _OWORD *v19;
  char v20;
  __int128 v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OrbitEntityAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v19 = a2;
  v9 = v21;
  v10 = v22;
  LOBYTE(v21) = 1;
  outlined copy of ActionEntityResolution();
  KeyedDecodingContainer.decode(_:forKey:)();
  v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v20 = 2;
  lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4118]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v18 = v21;
  LOBYTE(v21) = 3;
  v17 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v21) = 4;
  v14 = KeyedDecodingContainer.decode(_:forKey:)();
  v17 &= 1u;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v19;
  *v19 = v9;
  *((_BYTE *)v15 + 16) = v10;
  *((_DWORD *)v15 + 5) = v12;
  v15[2] = v18;
  *((_BYTE *)v15 + 48) = v17;
  *((_BYTE *)v15 + 49) = v14 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined consume of ActionEntityResolution();
}

uint64_t protocol witness for EntityAction.isAdditive.getter in conformance OrbitEntityAction()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t protocol witness for Decodable.init(from:) in conformance OrbitEntityAction@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return OrbitEntityAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance OrbitEntityAction(_QWORD *a1)
{
  return OrbitEntityAction.encode(to:)(a1);
}

uint64_t sub_21BAA39B4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 48);
  return result;
}

_BYTE *sub_21BAA39C0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 48) = *result;
  return result;
}

uint64_t destroy for OrbitEntityAction()
{
  return outlined consume of ActionEntityResolution();
}

uint64_t initializeWithCopy for OrbitEntityAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  return a1;
}

uint64_t assignWithCopy for OrbitEntityAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  return a1;
}

__n128 __swift_memcpy50_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OrbitEntityAction(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of ActionEntityResolution();
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrbitEntityAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 50))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OrbitEntityAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 50) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrbitEntityAction()
{
  return &type metadata for OrbitEntityAction;
}

uint64_t storeEnumTagSinglePayload for OrbitEntityAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BAA3C40 + 4 * byte_21BE5C54A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BAA3C74 + 4 * byte_21BE5C545[v4]))();
}

uint64_t sub_21BAA3C74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAA3C7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAA3C84);
  return result;
}

uint64_t sub_21BAA3C90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAA3C98);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BAA3C9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAA3CA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for OrbitEntityAction.CodingKeys()
{
  return &unk_24DFA8908;
}

uint64_t OrbitEntityActionHandler.actionStarted(event:)(__n128 *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t SceneNullable;
  uint64_t v16;
  id v17;
  uint64_t result;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  float32x4_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *boxed_opaque_existential_1;
  __int128 v45;
  float32x4_t v46;
  uint64_t *v47;
  float32x4_t v48;
  uint64_t v49;
  float32x4_t v50;
  simd_float3 v51;
  simd_float3 v52;
  simd_float3 v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x4_t v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  __int128 v80;
  _OWORD v81[2];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  float32x4_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t v90;
  __int128 v91;
  __int128 v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  uint64_t AssociatedConformanceWitness;
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  float32x4_t v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  float32x4_t v118;
  unsigned __int16 v119;
  __n128 v120;
  __n128 v121;
  char v122;

  v2 = v1;
  v3 = a1[13];
  v112 = a1[12];
  v113 = v3;
  v4 = a1[15];
  v114 = a1[14];
  v115 = v4;
  v5 = a1[9];
  v108 = a1[8];
  v109 = v5;
  v6 = a1[11];
  v110 = a1[10];
  v111 = v6;
  v7 = a1[5];
  v104 = a1[4];
  v105 = v7;
  v8 = a1[7];
  v106 = a1[6];
  v107 = v8;
  v9 = a1[1];
  v100 = *a1;
  v101 = v9;
  v10 = (float32x4_t)a1[3];
  v102 = a1[2];
  v103 = v10;
  v11 = outlined retain of ActionEvent<OrbitEntityAction>((uint64_t)&v100);
  specialized ActionEvent.animationState.getter(&v116, v11);
  outlined release of ActionEvent<OrbitEntityAction>((uint64_t)&v100);
  if (!v117.n128_u64[1])
    return outlined destroy of AnimationStateProtocol?((uint64_t)&v116);
  outlined init with take of BindableDataInternal((__int128 *)&v116, (uint64_t)v97);
  v12 = v104.n128_i64[1];
  if (!v104.n128_u64[1])
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v116.n128_u64[0] = 0;
    v116.n128_u64[1] = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(69);
    v19._countAndFlagsBits = 0x2072656C646E6148;
    v19._object = (void *)0xEC00000020726F66;
    String.append(_:)(v19);
    *(_QWORD *)&v91 = &type metadata for OrbitEntityAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
    v20._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 0xD000000000000037;
    v21._object = (void *)0x800000021BE85C50;
    String.append(_:)(v21);
    specialized static AnimationLogger.logError(_:)(v116.n128_u64[0], v116.n128_u64[1]);
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  }
  v14 = Strong;
  v116 = v101;
  v117 = v102;
  v118 = v103;
  v119 = v104.n128_u16[0];
  outlined init with take of ActionEntityResolution(&v116, &v120);
  outlined init with take of ActionEntityResolution(&v120, &v121);
  if ((v122 & 1) != 0)
  {
    swift_retain();
    outlined retain of OrbitEntityAction((uint64_t)&v116);
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
    {
      outlined release of OrbitEntityAction((uint64_t)&v116);
LABEL_22:
      *(_QWORD *)&v91 = 0;
      *((_QWORD *)&v91 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v31._countAndFlagsBits = 0x2072656C646E6148;
      v31._object = (void *)0xEC00000020726F66;
      String.append(_:)(v31);
      v94.i64[0] = (uint64_t)&type metadata for OrbitEntityAction;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
      v32._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 0xD000000000000030;
      v33._object = (void *)0x800000021BE85C90;
      String.append(_:)(v33);
      specialized static AnimationLogger.logError(_:)(v91, *((_QWORD *)&v91 + 1));
      swift_release();
      goto LABEL_23;
    }
    v16 = SceneNullable;
    v17 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v17)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v16);
    }
    v22 = Scene.findEntity(named:)();
    swift_release();
  }
  else
  {
    *(_QWORD *)&v91 = v121.n128_u64[0];
    swift_retain();
    outlined retain of OrbitEntityAction((uint64_t)&v116);
    v22 = Entity.subscript.getter((uint64_t *)&v91);
  }
  outlined release of OrbitEntityAction((uint64_t)&v116);
  if (!v22)
    goto LABEL_22;
  swift_retain();
  swift_release();
  *v2 = v22;
  v23 = specialized HasHierarchy.parent.getter();
  swift_release();
  v89 = v14;
  v90.i64[0] = v12;
  v87 = v2;
  v88 = v22;
  if (!v23)
  {
    specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v22, 0);
    REMakeSRTFromMatrix();
    v86 = v34;
    if (one-time initialization token for identity != -1)
      swift_once();
    goto LABEL_26;
  }
  result = specialized HasHierarchy.parent.getter();
  if (result)
  {
    v24 = result;
    if (one-time initialization token for identity != -1)
      swift_once();
    v85 = xmmword_2551B1050;
    v86.i32[0] = static Transform.identity;
    v82 = xmmword_2551B1060;
    v25 = swift_retain();
    *(double *)&v26 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v25, v24);
    v81[0] = v26;
    v81[1] = v27;
    v83 = v28;
    v84 = v29;
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v82, (float32x4_t)v85, v86.f32[0]);
    REMakeSRTFromMatrix();
    v86 = v30;
    if (one-time initialization token for identity != -1)
      swift_once();
    swift_release();
    swift_release();
LABEL_26:
    v35 = v98;
    v36 = v99;
    __swift_project_boxed_opaque_existential_1(v97, v98);
    v37 = *(void (**)(uint64_t, uint64_t))(v36 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v39 = type metadata accessor for Optional();
    v40 = *(_QWORD *)(v39 - 8);
    MEMORY[0x24BDAC7A8](v39);
    v42 = (char *)v81 - v41;
    v37(v35, v36);
    v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v42, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
    }
    else
    {
      v95 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v94);
      (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(boxed_opaque_existential_1, v42, AssociatedTypeWitness);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v45 = v92;
        v46 = v93;
        v47 = v87;
        v83 = v92;
        v84 = v91;
        *((_OWORD *)v87 + 5) = v91;
        *((_OWORD *)v47 + 6) = v45;
        v82 = (__int128)v46;
        v48 = vsubq_f32(v46, v86);
        v48.i32[3] = 0;
        v85 = (__int128)v48;
        *((float32x4_t *)v47 + 7) = v48;
        v49 = specialized HasHierarchy.parent.getter();
        v50 = v118;
        if (v49)
        {
          v86 = v118;
          *(double *)v51.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, v49);
          *(double *)v54.i64 = simd_float4x4.transform(normal:)(v86, v51, v52, v53);
          v86 = v54;
          swift_release();
          v50 = v86;
        }
        v55 = (int32x4_t)vmulq_f32((float32x4_t)v85, (float32x4_t)v85);
        v55.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v55, 2), vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1))).u32[0];
        v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
        v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
        v58 = vmulq_n_f32((float32x4_t)v85, vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0]);
        v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL);
        v60 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v58)), v50, v59);
        v61 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), (int8x16_t)v60, 0xCuLL);
        v62 = (int32x4_t)vmulq_f32(v60, v60);
        v62.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v62, 2), *(float32x2_t *)v62.i8)).u32[0];
        v63 = vrsqrte_f32((float32x2_t)v62.u32[0]);
        v64 = vmul_f32(v63, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v63, v63)));
        v65 = vmulq_n_f32(v61, vmul_f32(v64, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v64, v64))).f32[0]);
        v66 = vmulq_f32(v65, v65);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0] <= 0.00001)
        {
          *(_QWORD *)&v91 = 0;
          *((_QWORD *)&v91 + 1) = 0xE000000000000000;
          v86 = v50;
          _StringGuts.grow(_:)(140);
          v75._countAndFlagsBits = 0x2072656C646E6148;
          v75._object = (void *)0xEC00000020726F66;
          String.append(_:)(v75);
          v94.i64[0] = (uint64_t)&type metadata for OrbitEntityAction;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
          v76._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v76);
          swift_bridgeObjectRelease();
          v77._countAndFlagsBits = 0xD00000000000002FLL;
          v77._object = (void *)0x800000021BE85CF0;
          String.append(_:)(v77);
          v94 = v86;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4120]);
          v78._countAndFlagsBits = SIMD.description.getter();
          String.append(_:)(v78);
          swift_bridgeObjectRelease();
          v79._countAndFlagsBits = 0xD00000000000004DLL;
          v79._object = (void *)0x800000021BE85D20;
          String.append(_:)(v79);
          specialized static AnimationLogger.logError(_:)(v91, *((_QWORD *)&v91 + 1));
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          v72 = v86;
        }
        else
        {
          v90 = v58;
          v85 = (__int128)v65;
          v86 = v59;
          swift_release();
          swift_release();
          swift_release();
          v67 = vmlaq_f32(vmulq_f32(v86, vnegq_f32((float32x4_t)v85)), v90, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL));
          v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL);
          v69 = (int32x4_t)vmulq_f32(v67, v67);
          v69.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2), *(float32x2_t *)v69.i8)).u32[0];
          v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
          v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
          v72 = vmulq_n_f32(v68, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
        }
        *((float32x4_t *)v47 + 1) = v72;
        if ((v119 & 0x100) != 0)
        {
          v80 = v83;
          *((_OWORD *)v47 + 2) = v84;
          *((_OWORD *)v47 + 3) = v80;
          *((_OWORD *)v47 + 4) = v82;
        }
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      }
    }
    *(_QWORD *)&v91 = 0;
    *((_QWORD *)&v91 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    strcpy((char *)&v91, "Handler for ");
    BYTE13(v91) = 0;
    HIWORD(v91) = -5120;
    v94.i64[0] = (uint64_t)&type metadata for OrbitEntityAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
    v73._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    v74._object = (void *)0x800000021BE85CD0;
    v74._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v74);
    specialized static AnimationLogger.logError(_:)(v91, *((_QWORD *)&v91 + 1));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  }
  __break(1u);
  return result;
}

uint64_t OrbitEntityActionHandler.actionUpdated(event:)(__int128 *a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  _BOOL4 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[16];
  double v77;
  char v78;

  v2 = a1[13];
  v72 = a1[12];
  v73 = v2;
  v3 = a1[15];
  v74 = a1[14];
  v75 = v3;
  v4 = a1[9];
  v68 = a1[8];
  v69 = v4;
  v5 = a1[11];
  v70 = a1[10];
  v71 = v5;
  v6 = a1[5];
  v64 = a1[4];
  v65 = v6;
  v7 = a1[7];
  v66 = a1[6];
  v67 = v7;
  v8 = a1[1];
  v60 = *a1;
  v61 = v8;
  v9 = a1[3];
  v62 = a1[2];
  v63 = v9;
  v10 = outlined retain of ActionEvent<OrbitEntityAction>((uint64_t)&v60);
  specialized ActionEvent.animationState.getter(&v29, v10);
  outlined release of ActionEvent<OrbitEntityAction>((uint64_t)&v60);
  if (!*((_QWORD *)&v30 + 1))
    return outlined destroy of AnimationStateProtocol?((uint64_t)&v29);
  outlined init with take of BindableDataInternal(&v29, (uint64_t)v45);
  outlined init with take of Transform?((uint64_t)&v69 + 8, (uint64_t)v76, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v76, (uint64_t)&v77, &demangling cache variable for type metadata for Double?);
  if (v78 != 1)
  {
    v11 = v77;
    v12 = fabs(v77 + -1.0) <= 0.0001;
    v13 = v77 <= 0.0001 || v12;
    if (v13 == 1 && (v1[11] & 1) == 0 && vabdd_f64(*((double *)v1 + 23), v77) <= 0.0001)
    {
      v28 = v1[8];
      v27 = v1[9];
      v26 = v1[10];
    }
    else
    {
      v14 = v1[9];
      v56 = v1[8];
      v57 = v14;
      v15 = v1[11];
      v58 = v1[10];
      v59 = v15;
      v16 = v1[5];
      v52 = v1[4];
      v53 = v16;
      v17 = v1[7];
      v54 = v1[6];
      v55 = v17;
      v18 = v1[1];
      v48 = *v1;
      v49 = v18;
      v19 = v1[3];
      v50 = v1[2];
      v51 = v19;
      v41 = v72;
      v42 = v73;
      v43 = v74;
      v44 = v75;
      v37 = v68;
      v38 = v69;
      v39 = v70;
      v40 = v71;
      v33 = v64;
      v34 = v65;
      v35 = v66;
      v36 = v67;
      v29 = v60;
      v30 = v61;
      v31 = v62;
      v32 = v63;
      OrbitEntityActionHandler.computeOrbitTransform(event:normalizedTime:isAdditive:)((uint64_t)&v29, BYTE1(v64) & 1, v77);
      v27 = v21;
      v28 = v20;
      v26 = v22;
      if (v13)
      {
        v1[8] = v20;
        v1[9] = v21;
        v1[10] = v22;
        *((_BYTE *)v1 + 176) = 0;
      }
      else
      {
        v1[9] = 0u;
        v1[10] = 0u;
        v1[8] = 0u;
        *((_BYTE *)v1 + 176) = 1;
      }
    }
    v24 = v46;
    v25 = v47;
    __swift_project_boxed_opaque_existential_1(v45, v46);
    v29 = v28;
    v30 = v27;
    v31 = v26;
    (*(void (**)(__int128 *, ValueMetadata *, uint64_t, uint64_t))(v25 + 64))(&v29, &type metadata for Transform, v24, v25);
    *((double *)v1 + 23) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
}

uint64_t OrbitEntityActionHandler.computeOrbitTransform(event:normalizedTime:isAdditive:)(uint64_t a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  double v14;
  _BOOL4 v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  double v20;
  float v21;
  double v22;
  float v23;
  double v24;
  float32x4_t v25;
  double v26;
  double v27;
  float32x4_t v28;
  double v29;
  float32x4_t v30;
  double v31;
  float32x4_t v32;
  double v33;
  float v34;
  double v35;
  _QWORD v36[2];
  char v37[8];
  uint64_t v38;

  v4 = v3;
  v7 = *(float *)(a1 + 36);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(unsigned __int8 *)(a1 + 80);
  outlined init with take of Transform?(v4, (uint64_t)v37, &demangling cache variable for type metadata for Entity?);
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v38, &demangling cache variable for type metadata for Entity?);
  v10 = v38;
  if (v38)
  {
    if (v8)
    {
      swift_retain();
      outlined retain of OrbitEntityActionHandler(v4);
      v11 = specialized HasHierarchy.parent.getter();
      swift_release();
      if (!v11)
      {
        specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v10, 0);
        REMakeSRTFromMatrix();
        v35 = v20;
        if (one-time initialization token for identity != -1)
          swift_once();
        v15 = 1;
LABEL_18:
        v21 = -v7;
        v22 = 1.0 - a3;
        if (!v9)
        {
          v22 = a3;
          v21 = v7;
        }
        v23 = v22;
        *(_QWORD *)&v24 = vmulq_n_f32(*(float32x4_t *)(v4 + 16), __sincosf_stret((float)(v21 * (float)(v23 * 6.2832)) * 0.5).__sinval).u64[0];
        if (v15)
        {
          if ((a2 & 1) != 0)
          {
LABEL_22:
            RESRTInverse();
            *(double *)v28.i64 = specialized static Transform.* infix(_:_:)(v25, v26, v27, (float32x4_t)xmmword_21BE41210);
            v30 = *(float32x4_t *)(v4 + 80);
LABEL_25:
            specialized static Transform.* infix(_:_:)(v28, v24, v29, v30);
            outlined release of TimelineDefinition?(v4);
            return swift_release();
          }
        }
        else
        {
          v33 = v24;
          swift_once();
          v24 = v33;
          if ((a2 & 1) != 0)
            goto LABEL_22;
        }
        v30 = *(float32x4_t *)(v4 + 80);
        v28 = (float32x4_t)xmmword_21BE41210;
        v29 = v35;
        goto LABEL_25;
      }
      result = specialized HasHierarchy.parent.getter();
      if (result)
      {
        v13 = result;
        if (one-time initialization token for identity != -1)
          swift_once();
        v32 = (float32x4_t)xmmword_2551B1050;
        v34 = *(float *)&static Transform.identity;
        v31 = *(double *)&xmmword_2551B1060;
        outlined retain of OrbitEntityActionHandler(v4);
        specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v10, v13);
        specialized simd_float4x4.init(translation:rotation:scale:)(v31, v32, v34);
        REMakeSRTFromMatrix();
        v35 = v14;
        if (one-time initialization token for identity != -1)
          swift_once();
        outlined release of TimelineDefinition?(v4);
        swift_release();
        v15 = one-time initialization token for identity == -1;
        goto LABEL_18;
      }
      __break(1u);
    }
    else
    {
      outlined retain of OrbitEntityActionHandler(v4);
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      strcpy((char *)v36, "Handler for ");
      BYTE5(v36[1]) = 0;
      HIWORD(v36[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
      v18._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 0xD00000000000001DLL;
      v19._object = (void *)0x800000021BE85C30;
      String.append(_:)(v19);
      specialized static AnimationLogger.logError(_:)(v36[0], v36[1]);
      swift_bridgeObjectRelease();
      if (one-time initialization token for identity != -1)
        swift_once();
      return outlined release of TimelineDefinition?(v4);
    }
  }
  else
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "Handler for ");
    BYTE5(v36[1]) = 0;
    HIWORD(v36[1]) = -5120;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x800000021BE85C10;
    v17._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v17);
    specialized static AnimationLogger.logError(_:)(v36[0], v36[1]);
    result = swift_bridgeObjectRelease();
    if (one-time initialization token for identity != -1)
      return swift_once();
  }
  return result;
}

uint64_t specialized OrbitEntityAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E45746F766970 && a2 == 0xEB00000000797469;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974756C6F766572 && a2 == 0xEB00000000736E6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x416C61746962726FLL && a2 == 0xEB00000000736978
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021BE85BF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6974696464417369 && a2 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t outlined retain of ActionEvent<OrbitEntityAction>(uint64_t a1)
{
  swift_retain();
  outlined copy of ActionEntityResolution();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ActionEvent<OrbitEntityAction>(uint64_t a1)
{
  swift_release();
  outlined consume of ActionEntityResolution();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined retain of OrbitEntityActionHandler(uint64_t a1)
{
  swift_retain();
  return a1;
}

__n128 *outlined init with take of ActionEntityResolution(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_8(a2, a1);
  return a2;
}

uint64_t outlined retain of OrbitEntityAction(uint64_t a1)
{
  outlined copy of ActionEntityResolution();
  return a1;
}

uint64_t outlined release of OrbitEntityAction(uint64_t a1)
{
  outlined consume of ActionEntityResolution();
  return a1;
}

uint64_t lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD3<Float>);
    result = MEMORY[0x220772E3C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeWithCopy for OrbitEntityActionHandler(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OrbitEntityActionHandler(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v4 = *(_OWORD *)(a2 + 128);
  v5 = *(_OWORD *)(a2 + 144);
  v6 = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 128) = v4;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

__n128 __swift_memcpy192_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for OrbitEntityActionHandler(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrbitEntityActionHandler(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 192))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OrbitEntityActionHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 192) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrbitEntityActionHandler()
{
  return &type metadata for OrbitEntityActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in OrbitEntityActionHandler()
{
  return &protocol witness table for OrbitEntityAction;
}

uint64_t __RKEntityPlayTimelineAction.__allocating_init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  return __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(v7 + 240) = 0;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_QWORD *)(v7 + 112) = a2;
  *(_QWORD *)(v7 + 120) = a3;
  *(_QWORD *)(v7 + 128) = a4;
  *(_QWORD *)(v7 + 136) = a5;
  *(_QWORD *)(v7 + 144) = a6;
  *(_QWORD *)(v7 + 152) = a7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  v9 = __RKEntityAction.init(targetEntity:)(0);
  swift_beginAccess();
  *(_QWORD *)(v9 + 16) = a1;
  swift_release();
  swift_release();
  swift_release();
  swift_beginAccess();
  *(_BYTE *)(v9 + 105) = 0;
  return v9;
}

uint64_t __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ComponentByClass;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (!v0[17])
    goto LABEL_16;
  v2 = v0[19];
  if (!v2)
    goto LABEL_16;
  v3 = v0[18];
  swift_retain();
  swift_bridgeObjectRetain();
  REKeyValueComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (!ComponentByClass)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_16:
    v5 = v1[15];
    swift_bridgeObjectRetain();
    return v5;
  }
  MEMORY[0x24BDAC7A8](ComponentByClass);
  if ((v2 & 0x1000000000000000) != 0 || !(v2 & 0x2000000000000000 | v3 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    _StringGuts._slowWithCString<A>(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    v5 = v9;
    v6 = v10;
  }
  else if ((v2 & 0x2000000000000000) != 0)
  {
    v9 = v3;
    v10 = v2 & 0xFFFFFFFFFFFFFFLL;
    if (REKeyValueComponentGetStringValue())
    {
      v5 = String.init(cString:)();
      v6 = v7;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((v3 & 0x1000000000000000) == 0)
      _StringObject.sharedUTF8.getter();
    partial apply for closure #1 in __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter(&v9);
    v5 = v9;
    v6 = v10;
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (!v6)
    goto LABEL_16;
  return v5;
}

uint64_t __RKEntityPlayTimelineAction.startAnimations(targetEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t AnimationLibraryAsset;
  uint64_t v9;
  _QWORD *v10;
  uint64_t EntryCount;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v36 = 91;
  v37 = 0xE100000000000000;
  v30 = 0;
  v31 = 0xE000000000000000;
  v35 = a1;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  v7 = *(_QWORD *)(v1 + 112);
  if (!v7)
  {
    v36 = 91;
    v37 = 0xE100000000000000;
    v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v36);
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_retain();
  if (!REEntityGetComponent())
  {
    v36 = 91;
    v37 = 0xE100000000000000;
    v17 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v36);
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  v28 = 91;
  AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
  v29 = 0xE100000000000000;
  if (AnimationLibraryAsset)
  {
    v9 = AnimationLibraryAsset;
    type metadata accessor for AnimationLibraryResource();
    v10 = (_QWORD *)swift_allocObject();
    v10[4] = 0;
    v10[2] = v9;
    RERetain();
    EntryCount = REAnimationLibraryAssetGetEntryCount();
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v10[3] = specialized Array.init(repeating:count:)(0, EntryCount);
    v15 = 1;
  }
  else
  {
    specialized AnimationLibraryDefinition.init(_:)(MEMORY[0x24BEE4AF8], (uint64_t)&v36);
    v10 = (_QWORD *)v36;
    v12 = v37;
    v13 = v38;
    v15 = v39;
    v14 = v40;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v13, v15);
  swift_bridgeObjectRetain();
  v18 = __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter();
  v27 = v2;
  v30 = v10;
  v31 = v12;
  v32 = v13;
  v33 = v15;
  v34 = v14;
  v20 = AnimationLibraryComponent.AnimationCollection.subscript.getter(v18, v19);
  swift_bridgeObjectRelease();
  v21 = outlined consume of AnimationLibraryComponent?((uint64_t)v10, v12, v13, v15);
  if (!v20)
  {
    MEMORY[0x24BDAC7A8](v21);
    v26[2] = v27;
    v26[3] = v7;
    v30 = (_QWORD *)v28;
    v31 = v29;
    v24 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v24, &v30, partial apply for implicit closure #3 in __RKEntityPlayTimelineAction.startAnimations(targetEntity:), v26);
    outlined consume of AnimationLibraryComponent?((uint64_t)v10, v12, v13, v15);
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  swift_bridgeObjectRelease();
  LOBYTE(v30) = 0x80;
  Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:handoffType:)(v20, 0, 1, 0, 0, (unsigned __int8 *)&v30);
  v23 = v22;
  outlined consume of AnimationLibraryComponent?((uint64_t)v10, v12, v13, v15);
  swift_release();
  swift_release();
  return v23;
}

uint64_t implicit closure #3 in __RKEntityPlayTimelineAction.startAnimations(targetEntity:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(89);
  v0._object = (void *)0x800000021BE85E70;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0xD000000000000038;
  v2._object = (void *)0x800000021BE85E90;
  String.append(_:)(v2);
  REEntityGetName();
  v3._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t __RKEntityPlayTimelineAction.stopAnimations(targetEntity:)()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  os_log_type_t v5;
  uint64_t v7;
  unint64_t v8;

  v7 = 0;
  v8 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8285;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_release();
  REAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    if (REAnimationComponentHasRunningAnimations())
    {
      if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
        || (swift_beginAccess(), *(_BYTE *)(v0 + 104) == 1) && *(_QWORD *)(v0 + 96) == 3)
      {
        REAnimationComponentStopAllAnimations();
        RENetworkMarkComponentDirty();
      }
    }
  }
  v7 = 91;
  v8 = 0xE100000000000000;
  v5 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v5, &v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 160) = 0;
  return swift_release();
}

uint64_t __RKEntityPlayTimelineAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v31;
  char *v32;
  unint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v37 = 91;
  v38 = 0xE100000000000000;
  if (v2)
  {
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    v41 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v10 = (char *)v37;
  v9 = v38;
  v11 = *(_QWORD *)(v0 + 16);
  if (!v11)
  {
    v29 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v37);
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 105))
    {
      if (*(_BYTE *)(v1 + 105) != 1)
      {
        *(_QWORD *)(v1 + 96) = 2;
        v19 = 1;
        *(_BYTE *)(v1 + 104) = 1;
        v37 = 1;
        LOBYTE(v38) = 1;
        swift_retain();
        __RKEntityAction.state.didset((uint64_t)&v37);
        v37 = (uint64_t)v10;
        v38 = v9;
        v31 = static os_log_type_t.error.getter();
        specialized InteractionsLogger.log(_:_:)(v31, &v37);
        swift_bridgeObjectRelease();
        swift_release();
        return v19;
      }
      swift_retain();
      v13 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v13, &v37);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    v32 = (char *)v37;
    v33 = v38;
    swift_retain();
    __RKEntityPlayTimelineAction.stopAnimations(targetEntity:)();
  }
  else
  {
    v32 = (char *)v37;
    v33 = v38;
    swift_retain();
  }
  *(_QWORD *)(v1 + 160) = __RKEntityPlayTimelineAction.startAnimations(targetEntity:)(v11);
  swift_release();
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v11;
  v16 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = partial apply for closure #1 in __RKEntityPlayTimelineAction.perform(with:);
  *(_QWORD *)(v1 + 40) = v15;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
  v17 = *(char **)(v1 + 96);
  v18 = *(_BYTE *)(v1 + 104);
  v19 = 1;
  *(_QWORD *)(v1 + 96) = 1;
  *(_BYTE *)(v1 + 104) = 1;
  v37 = (uint64_t)v17;
  LOBYTE(v38) = v18;
  __RKEntityAction.state.didset((uint64_t)&v37);
  v20 = type metadata accessor for Entity();
  v35 = v20;
  v36 = &protocol witness table for Entity;
  v34[0] = v11;
  v21 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v34, 0, (char **)&v37);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for closure #2 in __RKEntityPlayTimelineAction.perform(with:);
  *(_QWORD *)(v22 + 24) = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  v23 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v24 = type metadata accessor for AnyCancellable();
  v39 = v24;
  v40 = MEMORY[0x24BDB9B58];
  swift_release();
  v37 = (uint64_t)v23;
  outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v37, v1 + 168);
  swift_endAccess();
  v35 = v20;
  v36 = &protocol witness table for Entity;
  v34[0] = v11;
  v25 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v34, 0, (char **)&v37);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for closure #2 in __RKEntityPlayTimelineAction.perform(with:);
  *(_QWORD *)(v26 + 24) = v25;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  v27 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v39 = v24;
  v40 = MEMORY[0x24BDB9B58];
  swift_release();
  v37 = (uint64_t)v27;
  outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v37, v1 + 208);
  swift_endAccess();
  v37 = (uint64_t)v32;
  v38 = v33;
  v28 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v28, &v37);
  swift_bridgeObjectRelease();
  swift_release();
  return v19;
}

uint64_t closure #1 in __RKEntityPlayTimelineAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = result + 168;
    swift_beginAccess();
    if (*(_QWORD *)(v1 + 192))
    {
      outlined init with copy of __REAssetService(v2, (uint64_t)&v3);
      __swift_project_boxed_opaque_existential_1(&v3, *((uint64_t *)&v4 + 1));
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
    }
    v5 = 0;
    v3 = 0u;
    v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v3, v2);
    swift_endAccess();
    swift_beginAccess();
    if (*(_QWORD *)(v1 + 232))
    {
      outlined init with copy of __REAssetService(v1 + 208, (uint64_t)&v3);
      __swift_project_boxed_opaque_existential_1(&v3, *((uint64_t *)&v4 + 1));
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
    }
    v5 = 0;
    v3 = 0u;
    v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v3, v1 + 208);
    swift_endAccess();
    __RKEntityPlayTimelineAction.stopAnimations(targetEntity:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityPlayTimelineAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 160);
    if (v4
      && (swift_retain(),
          swift_retain(),
          v5 = specialized static AnimationPlaybackController.== infix(_:_:)(v1, v4),
          swift_release(),
          swift_release(),
          v5))
    {
      swift_beginAccess();
      v6 = *(_QWORD *)(v3 + 96);
      v7 = *(_BYTE *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 2;
      *(_BYTE *)(v3 + 104) = 1;
      v8 = v6;
      v9 = v7;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v8);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntityPlayTimelineAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  swift_beginAccess();
  v4 = v1[2];
  v5 = v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v8 = v1[17];
  v10 = v1[18];
  v9 = v1[19];
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  result = __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(v4, v5, v6, v7, v8, v10, v9);
  a1[3] = v3;
  *a1 = result;
  return result;
}

uint64_t __RKEntityPlayTimelineAction.clone(matching:newEntity:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_beginAccess();
  v3 = v1[2];
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v11 = v1[14];
    v12 = v1[15];
    v13 = v1[16];
    v14 = v1[17];
    v16 = v1[18];
    v15 = v1[19];
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    return __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(v3, v11, v12, v13, v14, v16, v15);
  }
  else
  {
    v4 = v1[14];
    v5 = v1[15];
    v6 = v1[16];
    v7 = v1[17];
    v9 = v1[18];
    v8 = v1[19];
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(v3, v4, v5, v6, v7, v9, v8);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v17;
    else
      return 0;
  }
}

void __RKEntityPlayTimelineAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityPlayTimelineAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityPlayTimelineAction.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityPlayTimelineAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityPlayTimelineAction.__deallocating_deinit()
{
  __RKEntityPlayTimelineAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_21BAA6AFC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BAA6B20()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RKEntityPlayTimelineAction.perform(with:)()
{
  return closure #1 in __RKEntityPlayTimelineAction.perform(with:)();
}

uint64_t partial apply for closure #2 in __RKEntityPlayTimelineAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntityPlayTimelineAction.perform(with:)(a1);
}

uint64_t _s10RealityKit5SceneC0A10FoundationE9subscribe2to2on13componentType10rootEntity8matching_7Combine11Cancellable_pxm_AA11EventSource_pSgAA9Component_pXpSgAA0K0CSgSSSgyxctAA0O0RzlFyxcfU1_AA15AnimationEventsO17PlaybackCompletedV_TG5TA_0(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_21BAA6B74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *);
  int v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v10 = v3;
  v11 = v4;
  v12 = v5;
  v13 = v6;
  return v2(v9);
}

uint64_t lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.Publisher<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for __RKEntityPlayTimelineAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityPlayTimelineAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityPlayTimelineAction.__allocating_init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 576))();
}

uint64_t partial apply for implicit closure #3 in __RKEntityPlayTimelineAction.startAnimations(targetEntity:)()
{
  return implicit closure #3 in __RKEntityPlayTimelineAction.startAnimations(targetEntity:)();
}

uint64_t partial apply for closure #1 in __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = REKeyValueComponentGetStringValue();
  if (result)
    result = String.init(cString:)();
  else
    v3 = 0;
  *a1 = result;
  a1[1] = v3;
  return result;
}

_QWORD *HasModel.jointNames.getter()
{
  uint64_t JointCount;
  uint64_t v1;
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  RESkeletalPoseComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  if (!RESkeletalPoseComponentGetSkeletonCount())
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  JointCount = RESkeletalPoseComponentGetJointCount();
  if (!JointCount)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v1 = JointCount;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, JointCount & ~(JointCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  if ((v1 & 0x8000000000000000) == 0)
  {
    v3 = result;
    v4 = 0;
    do
    {
      RESkeletalPoseComponentGetJointName();
      v5 = String.init(cString:)();
      v7 = v6;
      v9 = v3[2];
      v8 = v3[3];
      if (v9 >= v8 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v3);
      ++v4;
      v3[2] = v9 + 1;
      v10 = &v3[2 * v9];
      v10[4] = v5;
      v10[5] = v7;
    }
    while (v1 != v4);
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t HasModel.jointTransforms.getter()
{
  uint64_t updated;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *PostUpdatePoseJoints;
  uint64_t JointCount;
  uint64_t result;

  RESkeletalPoseComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  if (RESkeletalPoseComponentCanAccessPostUpdatePoses())
  {
    if (RESkeletalPoseComponentPostUpdatePoseCount())
    {
      updated = RESkeletalPoseComponentPostUpdatePoseJointCount();
      if (updated)
      {
        v1 = updated;
        if ((updated & 0x8000000000000000) == 0)
        {
          v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v2 + 16) = v1;
          v3 = (char *)(v2 + 32);
          PostUpdatePoseJoints = (char *)RESkeletalPoseComponentGetPostUpdatePoseJoints();
          if ((unint64_t)PostUpdatePoseJoints < v2 + 32 + 48 * v1 && v3 < &PostUpdatePoseJoints[48 * v1])
            goto LABEL_19;
          memcpy(v3, PostUpdatePoseJoints, 48 * v1);
          goto LABEL_15;
        }
        goto LABEL_18;
      }
    }
    return MEMORY[0x24BEE4AF8];
  }
  RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  if (!RESkeletalPoseComponentGetSkeletonCount())
    return MEMORY[0x24BEE4AF8];
  JointCount = RESkeletalPoseComponentGetJointCount();
  if (!JointCount)
    return MEMORY[0x24BEE4AF8];
  v1 = JointCount;
  if ((JointCount & 0x8000000000000000) == 0)
  {
    v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v2 + 16) = v1;
    RESkeletalPoseComponentGetJointTransforms();
LABEL_15:
    *(_QWORD *)(v2 + 16) = v1;
    return v2;
  }
LABEL_18:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t HasModel.jointTransforms.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return swift_bridgeObjectRelease();
  RESkeletalPoseComponentGetComponentType();
  if (!REEntityGetComponentByClass())
    return swift_bridgeObjectRelease();
  if (RESkeletalPoseComponentCanAccessPostUpdatePoses())
  {
    if (RESkeletalPoseComponentPostUpdatePoseCount())
    {
      if (v2 == RESkeletalPoseComponentPostUpdatePoseJointCount())
        RESkeletalPoseComponentSetPostUpdatePoseJoints();
    }
    return swift_bridgeObjectRelease();
  }
  RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  if (!RESkeletalPoseComponentGetSkeletonCount())
    return swift_bridgeObjectRelease();
  result = RESkeletalPoseComponentGetJointCount();
  v4 = v2 >= result ? result : v2;
  if (!v4)
    return swift_bridgeObjectRelease();
  if (result <= v2)
  {
    RESkeletalPoseComponentSetJointTransforms();
LABEL_19:
    swift_bridgeObjectRelease();
    return RENetworkMarkComponentDirty();
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = a1 + 64;
    do
    {
      v7 = v5 + 1;
      RESkeletalPoseComponentSetJointTransform();
      v6 += 48;
      v5 = v7;
    }
    while (v4 != v7);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t (*HasModel.jointTransforms.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = HasModel.jointTransforms.getter();
  return HasModel.jointTransforms.modify;
}

uint64_t HasModel.jointTransforms.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return HasModel.jointTransforms.setter(*a1);
  v2 = swift_bridgeObjectRetain();
  HasModel.jointTransforms.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21BAA70D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = HasModel.jointTransforms.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BAA70FC()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return HasModel.jointTransforms.setter(v0);
}

uint64_t sub_21BAA7124()
{
  return 16;
}

__n128 sub_21BAA7130(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t static BlendWeight.fromCore(blendTreeCore:nodeIndex:)@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _QWORD v11[2];
  unsigned __int8 v12;

  RETimelineDefinitionBlendTreeNodeGetWeight();
  v3 = v2;
  result = RETimelineDefinitionBlendTreeNodeGetWeightPath();
  if (!result)
    goto LABEL_8;
  v5 = String.init(cString:)();
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    result = swift_bridgeObjectRelease();
LABEL_8:
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  static InternalBindPath.targetFromPath(_:)(v5, v6, (uint64_t)v11);
  result = swift_bridgeObjectRelease();
  v8 = v11[1];
  if (v12 == 1)
  {
    *(_QWORD *)a1 = v11[0];
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v3;
    v9 = 1;
  }
  else
  {
    v10 = v12 | ((unint64_t)v3 << 32);
    *(_QWORD *)a1 = v11[0];
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v10;
    v9 = 2;
  }
  *(_BYTE *)(a1 + 24) = v9;
  return result;
}

Swift::tuple_weight_Float_weightPath_String __swiftcall BlendWeight.toCore()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  float v11;
  _QWORD v12[2];
  char v13;
  Swift::tuple_weight_Float_weightPath_String result;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 24);
  if (*(_BYTE *)(v0 + 24))
  {
    v3 = *(_QWORD *)(v0 + 8);
    v4 = *(_QWORD *)(v0 + 16);
    if ((_DWORD)v2 == 1)
    {
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      v5 = (void *)REBindKeyEscape();
      swift_release();
      v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

      v8._countAndFlagsBits = v1;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 93;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      v2 = 0xD000000000000017;
      v10 = (void *)0x800000021BE826D0;
      LODWORD(v1) = v4;
    }
    else
    {
      v12[0] = *(_QWORD *)v0;
      v12[1] = v3;
      v13 = v4;
      specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v12);
      v1 = HIDWORD(v4);
    }
  }
  else
  {
    v10 = (void *)0xE000000000000000;
  }
  v11 = *(float *)&v1;
  result.weightPath._object = v10;
  result.weightPath._countAndFlagsBits = v2;
  result.weight = v11;
  return result;
}

uint64_t specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;

  v4 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v37 = v4;
  v5 = RETimelineDefinitionBlendTreeNodeCount();
  if (v5 < 0)
    goto LABEL_38;
  v6 = v5;
  if (!v5)
  {
LABEL_32:
    specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:blendNodeNameMap:)(a1, (uint64_t *)&v37, a2);
    return swift_bridgeObjectRelease();
  }
  v7 = 0;
  while (v6 != v7)
  {
    if (RETimelineDefinitionBlendTreeNodeGetName())
    {
      v8 = String.init(cString:)();
      v10 = v9;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
      v14 = v4[2];
      v15 = (v12 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        goto LABEL_34;
      v17 = v12;
      if (v4[3] >= v16)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v12 & 1) == 0)
            goto LABEL_21;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v17 & 1) == 0)
            goto LABEL_21;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
        v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_39;
        v13 = v18;
        if ((v17 & 1) == 0)
        {
LABEL_21:
          v4[(v13 >> 6) + 8] |= 1 << v13;
          v29 = (uint64_t *)(v4[6] + 16 * v13);
          *v29 = v8;
          v29[1] = v10;
          *(_QWORD *)(v4[7] + 8 * v13) = v7;
          v30 = v4[2];
          v31 = __OFADD__(v30, 1);
          v32 = v30 + 1;
          if (v31)
            goto LABEL_36;
          v4[2] = v32;
          swift_bridgeObjectRetain();
          goto LABEL_5;
        }
      }
      *(_QWORD *)(v4[7] + 8 * v13) = v7;
LABEL_5:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
    v23 = v4[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      goto LABEL_35;
    v26 = v21;
    if (v4[3] >= v25)
    {
      if ((v20 & 1) != 0)
      {
        if ((v21 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v26 & 1) != 0)
          goto LABEL_25;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v20);
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_39;
      v22 = v27;
      if ((v26 & 1) != 0)
      {
LABEL_25:
        *(_QWORD *)(v4[7] + 8 * v22) = v7;
        goto LABEL_6;
      }
    }
    v4[(v22 >> 6) + 8] |= 1 << v22;
    v33 = (_QWORD *)(v4[6] + 16 * v22);
    *v33 = 0;
    v33[1] = 0xE000000000000000;
    *(_QWORD *)(v4[7] + 8 * v22) = v7;
    v34 = v4[2];
    v31 = __OFADD__(v34, 1);
    v35 = v34 + 1;
    if (v31)
      goto LABEL_37;
    v4[2] = v35;
LABEL_6:
    swift_bridgeObjectRelease();
    if (v6 == ++v7)
    {
      v37 = v4;
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:blendNodeNameMap:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  if (RETimelineDefinitionBlendTreeNodeGetName())
  {
    v6 = String.init(cString:)();
    specialized Dictionary._Variant.removeValue(forKey:)(v6, v7);
    v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      goto LABEL_7;
  }
  if (RETimelineDefinitionBlendTreeNodeIsClipSource())
  {
    a3[3] = (uint64_t)&type metadata for BlendTreeSourceNode;
    a3[4] = (uint64_t)&protocol witness table for BlendTreeSourceNode;
    v10 = swift_allocObject();
    *a3 = v10;
    return BlendTreeSourceNode.init(core:nodeIndex:)(v10 + 16);
  }
  if (!RETimelineDefinitionBlendTreeNodeIsBlend())
  {
LABEL_7:
    a3[3] = (uint64_t)&type metadata for BlendTreeInvalidNode;
    a3[4] = (uint64_t)&protocol witness table for BlendTreeInvalidNode;
    result = swift_allocObject();
    *a3 = result;
    *(_QWORD *)(result + 16) = 0x64696C61766E69;
    *(_QWORD *)(result + 24) = 0xE700000000000000;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_BYTE *)(result + 56) = 0;
  }
  else
  {
    a3[3] = (uint64_t)&type metadata for BlendTreeBlendNode;
    a3[4] = (uint64_t)&protocol witness table for BlendTreeBlendNode;
    v12 = swift_allocObject();
    *a3 = v12;
    return BlendTreeBlendNode.init(core:nodeIndex:blendNodeNameMap:)(a1, a2, v12 + 16);
  }
  return result;
}

uint64_t BlendTreeSourceNode.init(core:nodeIndex:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t Name;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TimelineAsset;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  Name = RETimelineDefinitionBlendTreeNodeGetName();
  if (Name)
    Name = String.init(cString:)();
  else
    v3 = 0xE000000000000000;
  *(_QWORD *)(a1 + 40) = Name;
  *(_QWORD *)(a1 + 48) = v3;
  static BlendWeight.fromCore(blendTreeCore:nodeIndex:)((uint64_t)&v15);
  v4 = v16;
  v5 = v17;
  *(_OWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 80) = v5;
  result = RETimelineDefinitionCreateBlendTreeNodeSourceRef();
  if (result)
  {
    v7 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v7, (uint64_t)&v15);
    v8 = v17;
    v9 = v18;
    __swift_project_boxed_opaque_existential_1(&v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
    if (TimelineAsset)
    {
      v11 = TimelineAsset;
      type metadata accessor for AnimationResource();
      v12 = (_QWORD *)swift_allocObject();
      v12[2] = v11;
      if (REAssetHandleAssetType() == 11)
        REAnimationSceneAssetGetRootTimeline();
      v13 = REAnimationAssetGetName();
      if (v13)
        v13 = String.init(cString:)();
      else
        v14 = 0xE000000000000000;
      v12[3] = v13;
      v12[4] = v14;
      RERetain();
      REAssetSetSwiftObject();
      AnimationResource.definition.getter((uint64_t *)&v15);
      swift_release();
      outlined assign with take of AnimationDefinition?((uint64_t)&v15, a1);
      RERelease();
    }
    return RERelease();
  }
  return result;
}

uint64_t BlendTreeBlendNode.init(core:nodeIndex:blendNodeNameMap:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char IsBlendAdditive;
  __int128 v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  ValueMetadata *v44;
  _UNKNOWN **v45;

  if (RETimelineDefinitionBlendTreeNodeGetName())
  {
    v6 = String.init(cString:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0xE000000000000000;
  }
  IsBlendAdditive = RETimelineDefinitionBlendTreeNodeIsBlendAdditive();
  static BlendWeight.fromCore(blendTreeCore:nodeIndex:)((uint64_t)&v42);
  v10 = v42;
  v11 = v43;
  v40 = (char)v44;
  result = RETimelineDefinitionBlendTreeConnectionCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v13 = result;
    v37 = v11;
    v38 = IsBlendAdditive;
    v39 = a3;
    if (result)
    {
      v14 = 0;
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        result = RETimelineDefinitionBlendTreeConnectionGetTarget();
        if (result)
        {
          swift_bridgeObjectRetain();
          if (v6 == String.init(cString:)() && v8 == v16)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if ((v17 & 1) == 0)
              goto LABEL_8;
          }
          result = RETimelineDefinitionBlendTreeConnectionGetSource();
          if (result)
          {
            v18 = String.init(cString:)();
            v20 = *a2;
            if (*(_QWORD *)(*a2 + 16))
            {
              v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
              if ((v22 & 1) != 0)
              {
                v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
                swift_bridgeObjectRelease();
                if (!RETimelineDefinitionBlendTreeNodeGetName())
                  goto LABEL_22;
                v41 = v15;
                v24 = String.init(cString:)();
                v26 = v25;
                swift_bridgeObjectRetain();
                v36 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
                v27 = a2;
                v29 = v28;
                swift_bridgeObjectRelease();
                if ((v29 & 1) != 0)
                {
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v31 = *v27;
                  *(_QWORD *)&v42 = *v27;
                  *v27 = 0x8000000000000000;
                  a2 = v27;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    specialized _NativeDictionary.copy()();
                    v31 = v42;
                  }
                  swift_bridgeObjectRelease();
                  specialized _NativeDictionary._delete(at:)(v36, v31);
                  *v27 = v31;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v15 = v41;
LABEL_22:
                  if (RETimelineDefinitionBlendTreeNodeIsClipSource())
                  {
                    v44 = &type metadata for BlendTreeSourceNode;
                    v45 = &protocol witness table for BlendTreeSourceNode;
                    *(_QWORD *)&v42 = swift_allocObject();
                    BlendTreeSourceNode.init(core:nodeIndex:)(v42 + 16);
                  }
                  else if ((RETimelineDefinitionBlendTreeNodeIsBlend() & 1) != 0)
                  {
                    v44 = &type metadata for BlendTreeBlendNode;
                    v45 = &protocol witness table for BlendTreeBlendNode;
                    *(_QWORD *)&v42 = swift_allocObject();
                    BlendTreeBlendNode.init(core:nodeIndex:blendNodeNameMap:)(a1, v23, a2);
                  }
                  else
                  {
                    v44 = &type metadata for BlendTreeInvalidNode;
                    v45 = &protocol witness table for BlendTreeInvalidNode;
                    v33 = swift_allocObject();
                    *(_QWORD *)&v42 = v33;
                    *(_QWORD *)(v33 + 16) = 0x64696C61766E69;
                    *(_QWORD *)(v33 + 24) = 0xE700000000000000;
                    *(_QWORD *)(v33 + 32) = 0;
                    *(_QWORD *)(v33 + 40) = 0;
                    *(_QWORD *)(v33 + 48) = 0;
                    *(_BYTE *)(v33 + 56) = 0;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  v44 = &type metadata for BlendTreeInvalidNode;
                  v45 = &protocol witness table for BlendTreeInvalidNode;
                  v32 = swift_allocObject();
                  *(_QWORD *)&v42 = v32;
                  *(_QWORD *)(v32 + 16) = 0x64696C61766E69;
                  *(_QWORD *)(v32 + 24) = 0xE700000000000000;
                  *(_QWORD *)(v32 + 32) = 0;
                  *(_QWORD *)(v32 + 40) = 0;
                  *(_QWORD *)(v32 + 48) = 0;
                  *(_BYTE *)(v32 + 56) = 0;
                  a2 = v27;
                  v15 = v41;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
                v35 = v15[2];
                v34 = v15[3];
                if (v35 >= v34 >> 1)
                  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v15);
                v15[2] = v35 + 1;
                result = outlined init with take of BindableDataInternal(&v42, (uint64_t)&v15[5 * v35 + 4]);
                goto LABEL_8;
              }
            }
            result = swift_bridgeObjectRelease();
          }
        }
LABEL_8:
        if (v13 == ++v14)
          goto LABEL_34;
      }
    }
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_34:
    *(_QWORD *)v39 = v15;
    *(_BYTE *)(v39 + 8) = v38;
    *(_QWORD *)(v39 + 16) = v6;
    *(_QWORD *)(v39 + 24) = v8;
    *(_OWORD *)(v39 + 32) = v10;
    *(_QWORD *)(v39 + 48) = v37;
    *(_BYTE *)(v39 + 56) = v40;
  }
  return result;
}

__n128 BlendTreeSourceNode.init(source:name:weight:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  unsigned __int8 v10;
  __n128 result;
  __n128 v12;

  v12 = *a4;
  v9 = a4[1].n128_u64[0];
  v10 = a4[1].n128_u8[8];
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 32) = 0;
  outlined destroy of BodyTrackingComponent?(a5, &demangling cache variable for type metadata for AnimationDefinition?);
  outlined init with take of BindableDataInternal(a1, a5);
  *(_QWORD *)(a5 + 40) = a2;
  *(_QWORD *)(a5 + 48) = a3;
  result = v12;
  *(__n128 *)(a5 + 56) = v12;
  *(_QWORD *)(a5 + 72) = v9;
  *(_BYTE *)(a5 + 80) = v10;
  return result;
}

uint64_t BlendTreeSourceNode.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of (Int, URL)(v1, a1, &demangling cache variable for type metadata for AnimationDefinition?);
}

uint64_t BlendTreeSourceNode.source.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AnimationDefinition?(a1, v1);
}

uint64_t (*BlendTreeSourceNode.source.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeSourceNode.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BlendTreeSourceNode.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*BlendTreeSourceNode.name.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeSourceNode.weight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 80);
  *(_BYTE *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 BlendTreeSourceNode.weight.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80));
  result = v5;
  *(__n128 *)(v1 + 56) = v5;
  *(_QWORD *)(v1 + 72) = v2;
  *(_BYTE *)(v1 + 80) = v3;
  return result;
}

uint64_t (*BlendTreeSourceNode.weight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BlendTreeSourceNode.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:)(Swift::OpaquePointer blendTreeDefinition, Swift::OpaquePointer *duplicateNameMap)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *rawValue;
  unint64_t v11;
  char v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t RootTimeline;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  Swift::String result;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;
  unint64_t v41;

  v4 = v2;
  v8 = *(_QWORD *)(v2 + 40);
  v7 = *(_QWORD *)(v2 + 48);
  v40 = v8;
  v41 = v7;
  v9 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v9 = v8 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = 0x656372756F53;
    v7 = 0xE600000000000000;
    v40 = 0x656372756F53;
    v41 = 0xE600000000000000;
  }
  rawValue = duplicateNameMap->_rawValue;
  if (!*((_QWORD *)duplicateNameMap->_rawValue + 2))
    goto LABEL_11;
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39[0] = duplicateNameMap->_rawValue;
    duplicateNameMap->_rawValue = (void *)0x8000000000000000;
    v18 = 1;
    v19 = v8;
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(rawValue[7] + 8 * v11);
  swift_bridgeObjectRelease();
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  v39[0] = 45;
  v39[1] = 0xE100000000000000;
  *(_QWORD *)&v35 = v13 + 1;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 45;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16 = v40;
  v7 = v41;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v39[0] = duplicateNameMap->_rawValue;
  duplicateNameMap->_rawValue = (void *)0x8000000000000000;
  v18 = v13 + 1;
  v19 = v16;
LABEL_12:
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v19, v7, isUniquelyReferenced_nonNull_native);
  v20 = (uint64_t)duplicateNameMap->_rawValue;
  duplicateNameMap->_rawValue = (void *)v39[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of (Int, URL)(v4, (uint64_t)&v35, &demangling cache variable for type metadata for AnimationDefinition?);
  if (!v37)
  {
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v35, &demangling cache variable for type metadata for AnimationDefinition?);
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v22 = 0xD000000000000031;
    *(_QWORD *)(v22 + 8) = 0x800000021BE85F40;
    *(_BYTE *)(v22 + 16) = 0;
    swift_willThrow();
    goto LABEL_16;
  }
  outlined init with take of BindableDataInternal(&v35, (uint64_t)v39);
  v20 = type metadata accessor for AnimationResource();
  v21 = static AnimationResource.generate(with:)((uint64_t)v39);
  if (!v3)
  {
    v20 = v21;
    swift_retain();
    v25 = REAssetHandleAssetType();
    if (v25 == 11)
    {
      RootTimeline = REAnimationSceneAssetGetRootTimeline();
      v23 = swift_release();
      if (RootTimeline)
      {
LABEL_21:
        v27 = RETimelineDefinitionCreateFromTimeline();
        swift_release();
        if (v27)
        {
          v28 = specialized static __ServiceLocator.shared.getter() + 120;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v28, (uint64_t)&v35);
          v29 = v37;
          v30 = v38;
          __swift_project_boxed_opaque_existential_1(&v35, v37);
          (*(void (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
          v31 = *(_QWORD *)(v4 + 72);
          v32 = *(_BYTE *)(v4 + 80);
          v35 = *(_OWORD *)(v4 + 56);
          v36 = v31;
          LOBYTE(v37) = v32;
          BlendWeight.toCore()();
          String.utf8CString.getter();
          String.utf8CString.getter();
          RETimelineDefinitionBlendTreeAddTimelineSource();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
          swift_release();
          swift_release();
          blendTreeDefinition._rawValue = (void *)v40;
          v20 = v41;
          RERelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
          swift_allocError();
          *(_QWORD *)v33 = 0xD000000000000038;
          *(_QWORD *)(v33 + 8) = 0x800000021BE85F80;
          *(_BYTE *)(v33 + 16) = 0;
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
        }
        goto LABEL_16;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v25 == 5)
    {
      swift_release();
      goto LABEL_21;
    }
LABEL_25:
    v23 = swift_release();
    __break(1u);
    goto LABEL_26;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  swift_bridgeObjectRelease();
LABEL_16:
  v23 = (uint64_t)blendTreeDefinition._rawValue;
  v24 = (void *)v20;
LABEL_27:
  result._object = v24;
  result._countAndFlagsBits = v23;
  return result;
}

uint64_t protocol witness for BlendTreeNode.name.getter in conformance BlendTreeSourceNode()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for BlendTreeNode.name.setter in conformance BlendTreeSourceNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*protocol witness for BlendTreeNode.name.modify in conformance BlendTreeSourceNode())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNode.weight.getter in conformance BlendTreeSourceNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 80);
  *(_BYTE *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 protocol witness for BlendTreeNode.weight.setter in conformance BlendTreeSourceNode(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80));
  result = v5;
  *(__n128 *)(v1 + 56) = v5;
  *(_QWORD *)(v1 + 72) = v2;
  *(_BYTE *)(v1 + 80) = v3;
  return result;
}

uint64_t (*protocol witness for BlendTreeNode.weight.modify in conformance BlendTreeSourceNode())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNodeInternal.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:) in conformance BlendTreeSourceNode(Swift::OpaquePointer a1, Swift::OpaquePointer *a2)
{
  return BlendTreeSourceNode.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:)(a1, a2)._countAndFlagsBits;
}

double protocol witness for BlendTreeNodeInternal.duration.getter in conformance BlendTreeSourceNode()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  __int128 v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  outlined init with copy of (Int, URL)(v0, (uint64_t)&v5, &demangling cache variable for type metadata for AnimationDefinition?);
  if (v6)
  {
    outlined init with take of BindableDataInternal(&v5, (uint64_t)v7);
    v1 = v8;
    v2 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    v3 = (*(double (**)(uint64_t, uint64_t))(v2 + 272))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for AnimationDefinition?);
    return 0.0;
  }
  return v3;
}

__n128 BlendTreeBlendNode.init(sources:name:weight:isAdditive:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X3>, unsigned __int8 a5@<W4>, __n128 *a6@<X8>)
{
  unint64_t v6;
  unsigned __int8 v7;
  __n128 result;

  v6 = a4[1].n128_u64[0];
  v7 = a4[1].n128_u8[8];
  a6->n128_u64[0] = a1;
  a6->n128_u8[8] = a5;
  a6[1].n128_u64[0] = a2;
  a6[1].n128_u64[1] = a3;
  result = *a4;
  a6[2] = *a4;
  a6[3].n128_u64[0] = v6;
  a6[3].n128_u8[8] = v7;
  return result;
}

uint64_t BlendTreeBlendNode.sources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BlendTreeBlendNode.sources.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*BlendTreeBlendNode.sources.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeBlendNode.isAdditive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t BlendTreeBlendNode.isAdditive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*BlendTreeBlendNode.isAdditive.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeBlendNode.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BlendTreeBlendNode.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*BlendTreeBlendNode.name.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeBlendNode.weight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 56);
  *(_BYTE *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 BlendTreeBlendNode.weight.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
  result = v5;
  *(__n128 *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v3;
  return result;
}

uint64_t (*BlendTreeBlendNode.weight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BlendTreeBlendNode.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:)(Swift::OpaquePointer blendTreeDefinition, Swift::OpaquePointer *duplicateNameMap)
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *rawValue;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  Swift::String result;
  uint64_t v40;
  __int128 v41;
  void *v42;
  uint64_t v44;
  __int128 v45[2];
  uint64_t v46;
  _QWORD v47[5];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v4 = *v2;
  v5 = *((unsigned __int8 *)v2 + 8);
  v7 = v2[2];
  v6 = v2[3];
  v41 = *((_OWORD *)v2 + 2);
  v8 = v2[6];
  v9 = *((_BYTE *)v2 + 56);
  v52 = v7;
  v53 = v6;
  v10 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = 0x646E656C42;
    v6 = 0xE500000000000000;
    v52 = 0x646E656C42;
    v53 = 0xE500000000000000;
  }
  rawValue = duplicateNameMap->_rawValue;
  if (!*((_QWORD *)duplicateNameMap->_rawValue + 2))
    goto LABEL_11;
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(Swift::OpaquePointer *)&v48 = (Swift::OpaquePointer)duplicateNameMap->_rawValue;
    duplicateNameMap->_rawValue = (void *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v7, v6, isUniquelyReferenced_nonNull_native);
    duplicateNameMap->_rawValue = (void *)v48;
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(rawValue[7] + 8 * v12);
  v15 = swift_bridgeObjectRelease();
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)&v48 = 45;
  *((_QWORD *)&v48 + 1) = 0xE100000000000000;
  v47[0] = v14 + 1;
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 45;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19 = v52;
  v20 = v53;
  swift_bridgeObjectRetain();
  v21 = swift_isUniquelyReferenced_nonNull_native();
  *(Swift::OpaquePointer *)&v48 = (Swift::OpaquePointer)duplicateNameMap->_rawValue;
  duplicateNameMap->_rawValue = (void *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14 + 1, v19, v20, v21);
  duplicateNameMap->_rawValue = (void *)v48;
LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v4;
  v24 = *(_QWORD *)(v4 + 16);
  if (!v24)
  {
    v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_25:
    v48 = v41;
    v49 = v8;
    LOBYTE(v50) = v9;
    BlendWeight.toCore()();
    v29 = (_QWORD *)v52;
    v27 = v53;
    String.utf8CString.getter();
    String.utf8CString.getter();
    if (v5)
    {
      RETimelineDefinitionBlendTreeAddAdditiveBlend();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v37 = v26[2];
      if (!v37)
        goto LABEL_31;
    }
    else
    {
      RETimelineDefinitionBlendTreeAddBlend();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v37 = v26[2];
      if (!v37)
      {
LABEL_31:
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    v38 = v26 + 5;
    do
    {
      String.utf8CString.getter();
      String.utf8CString.getter();
      RETimelineDefinitionBlendTreeAddConnection();
      swift_release();
      swift_release();
      v38 += 2;
      --v37;
    }
    while (v37);
    goto LABEL_31;
  }
  v40 = v8;
  v25 = v23 + 32;
  swift_bridgeObjectRetain();
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v42 = blendTreeDefinition._rawValue;
  while (1)
  {
    outlined init with copy of __REAssetService(v25, (uint64_t)v47);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNodeInternal);
    if ((swift_dynamicCast() & 1) != 0)
      break;
    v46 = 0;
    memset(v45, 0, sizeof(v45));
    outlined destroy of BodyTrackingComponent?((uint64_t)v45, &demangling cache variable for type metadata for BlendTreeNodeInternal?);
LABEL_15:
    v25 += 40;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      v8 = v40;
      goto LABEL_25;
    }
  }
  outlined init with take of BindableDataInternal(v45, (uint64_t)&v48);
  v27 = v50;
  v28 = v51;
  v29 = __swift_project_boxed_opaque_existential_1(&v48, v50);
  v30 = (*(uint64_t (**)(void *, Swift::OpaquePointer *, uint64_t, uint64_t))(v28 + 8))(blendTreeDefinition._rawValue, duplicateNameMap, v27, v28);
  if (!v44)
  {
    v32 = v30;
    v33 = v31;
    v44 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    v35 = v26[2];
    v34 = v26[3];
    if (v35 >= v34 >> 1)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v26);
    v26[2] = v35 + 1;
    v36 = &v26[2 * v35];
    v36[4] = v32;
    v36[5] = v33;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
    blendTreeDefinition._rawValue = v42;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
LABEL_33:
  v15 = (uint64_t)v29;
  v16 = (void *)v27;
LABEL_35:
  result._object = v16;
  result._countAndFlagsBits = v15;
  return result;
}

double BlendTreeBlendNode.duration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int128 v8[2];
  uint64_t v9;
  _BYTE v10[40];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (!v1)
    return 0.0;
  v2 = *(_QWORD *)v0 + 32;
  swift_bridgeObjectRetain();
  v3 = 0.0;
  do
  {
    outlined init with copy of __REAssetService(v2, (uint64_t)v14);
    outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNodeInternal);
    if (swift_dynamicCast())
    {
      outlined init with take of BindableDataInternal(v8, (uint64_t)v11);
      v4 = v12;
      v5 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      v6 = (*(double (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      if (v3 <= v6)
        v3 = v6;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    }
    else
    {
      v9 = 0;
      memset(v8, 0, sizeof(v8));
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for BlendTreeNodeInternal?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v2 += 40;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for BlendTreeNode.name.setter in conformance BlendTreeBlendNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*protocol witness for BlendTreeNode.name.modify in conformance BlendTreeBlendNode())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNode.weight.getter in conformance BlendTreeBlendNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 56);
  *(_BYTE *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 protocol witness for BlendTreeNode.weight.setter in conformance BlendTreeBlendNode(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
  result = v5;
  *(__n128 *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v3;
  return result;
}

uint64_t (*protocol witness for BlendTreeNode.weight.modify in conformance BlendTreeBlendNode())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNodeInternal.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:) in conformance BlendTreeBlendNode(Swift::OpaquePointer a1, Swift::OpaquePointer *a2)
{
  return BlendTreeBlendNode.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:)(a1, a2)._countAndFlagsBits;
}

uint64_t BlendTreeInvalidNode.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BlendTreeInvalidNode.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*BlendTreeInvalidNode.name.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeInvalidNode.weight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 BlendTreeInvalidNode.weight.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
  result = v5;
  *(__n128 *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v3;
  return result;
}

uint64_t (*BlendTreeInvalidNode.weight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNode.name.getter in conformance BlendTreeInvalidNode()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for BlendTreeNode.name.setter in conformance BlendTreeInvalidNode(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t protocol witness for BlendTreeNode.weight.getter in conformance BlendTreeInvalidNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 protocol witness for BlendTreeNode.weight.setter in conformance BlendTreeInvalidNode(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
  result = v5;
  *(__n128 *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v3;
  return result;
}

uint64_t blend(_:_:name:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BlendTreeNode>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_21BE50940;
  outlined init with copy of __REAssetService(a1, v12 + 32);
  outlined init with copy of __REAssetService(a2, v12 + 72);
  a6[3] = (uint64_t)&type metadata for BlendTreeBlendNode;
  a6[4] = (uint64_t)&protocol witness table for BlendTreeBlendNode;
  v13 = swift_allocObject();
  *a6 = v13;
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a5;
  *(_QWORD *)(v13 + 32) = a3;
  *(_QWORD *)(v13 + 40) = a4;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 48) = 1065353216;
  *(_BYTE *)(v13 + 72) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t blend(sources:name:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;

  a5[3] = (uint64_t)&type metadata for BlendTreeBlendNode;
  a5[4] = (uint64_t)&protocol witness table for BlendTreeBlendNode;
  v10 = swift_allocObject();
  *a5 = v10;
  *(_QWORD *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 24) = a4;
  *(_QWORD *)(v10 + 32) = a2;
  *(_QWORD *)(v10 + 40) = a3;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 48) = 1065353216;
  *(_BYTE *)(v10 + 72) = 0;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t BlendTreeAnimation.init(_:name:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, int a6@<W5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v35;
  char v36;
  uint64_t v37[2];
  char v38;
  _OWORD v39[9];
  uint64_t v40;

  v22 = *a5;
  v23 = a5[1];
  v24 = *((_BYTE *)a5 + 16);
  v25 = *a7;
  v26 = *a8;
  *(_OWORD *)(a9 + 224) = 0u;
  *(_QWORD *)(a9 + 240) = 0;
  *(_OWORD *)(a9 + 208) = 0u;
  v37[0] = 0;
  v37[1] = 0;
  v38 = -1;
  v36 = v25;
  v35 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v37, 0, &v36, &v35, a13, a14 & 1, (uint64_t)v39, a10, a11, a12, a15, a16 & 1, a17, a18 & 1);
  *(_OWORD *)(a9 + 152) = v39[6];
  v27 = v39[8];
  *(_OWORD *)(a9 + 168) = v39[7];
  *(_OWORD *)(a9 + 184) = v27;
  v28 = v39[3];
  *(_OWORD *)(a9 + 88) = v39[2];
  *(_OWORD *)(a9 + 104) = v28;
  v29 = v39[5];
  *(_OWORD *)(a9 + 120) = v39[4];
  *(_OWORD *)(a9 + 136) = v29;
  v30 = v39[1];
  *(_OWORD *)(a9 + 56) = v39[0];
  *(_QWORD *)(a9 + 200) = v40;
  *(_OWORD *)(a9 + 72) = v30;
  type metadata accessor for TimelineDefinition();
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)a9 = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = v22;
  *(_QWORD *)(a9 + 24) = v23;
  *(_BYTE *)(a9 + 32) = v24;
  *(_DWORD *)(a9 + 36) = a6;
  *(_BYTE *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 41) = v26;
  *(_BYTE *)(a9 + 42) = 0;
  *(_BYTE *)(a9 + 43) = a4;
  *(_QWORD *)(a9 + 48) = v31;
  swift_bridgeObjectRetain();
  outlined destroy of BodyTrackingComponent?(a9 + 208, &demangling cache variable for type metadata for BlendTreeNode?);
  return outlined init with take of BindableDataInternal(a1, a9 + 208);
}

uint64_t specialized BlendTreeAnimation.root.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[2];

  outlined init with copy of (Int, URL)(v1 + 208, (uint64_t)&v50, &demangling cache variable for type metadata for BlendTreeNode?);
  if (v51)
  {
    outlined init with take of BindableDataInternal(&v50, (uint64_t)v52);
    return outlined init with take of BindableDataInternal(v52, (uint64_t)a1);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v50, &demangling cache variable for type metadata for BlendTreeNode?);
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
  if (!v4)
  {
LABEL_46:
    a1[3] = (uint64_t)&type metadata for BlendTreeInvalidNode;
    a1[4] = (uint64_t)&protocol witness table for BlendTreeInvalidNode;
    result = swift_allocObject();
    *a1 = result;
    *(_QWORD *)(result + 16) = 0x64696C61766E69;
    *(_QWORD *)(result + 24) = 0xE700000000000000;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_BYTE *)(result + 56) = 0;
    return result;
  }
  v5 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = RETimelineDefinitionBlendTreeNodeCount();
  if (v6 < 0)
    goto LABEL_52;
  v7 = v6;
  if (!v6)
  {
LABEL_34:
    v37 = RETimelineDefinitionBlendTreeConnectionCount();
    if (v37 < 0)
      goto LABEL_53;
    v38 = v37;
    if (v37)
    {
      v39 = 0;
      do
      {
        if (RETimelineDefinitionBlendTreeConnectionGetSource())
        {
          v40 = String.init(cString:)();
          v42 = v41;
          swift_bridgeObjectRetain();
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
          v45 = v44;
          swift_bridgeObjectRelease();
          if ((v45 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v52[0] = v5;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v5 = *(_QWORD **)&v52[0];
            }
            swift_bridgeObjectRelease();
            specialized _NativeDictionary._delete(at:)(v43, (uint64_t)v5);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        ++v39;
      }
      while (v38 != v39);
    }
    v47 = swift_bridgeObjectRetain();
    specialized Sequence.min(by:)(v47);
    v49 = v48;
    swift_bridgeObjectRelease_n();
    if (v49)
    {
      specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:)(v4, a1);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_46;
  }
  v8 = 0;
  while (v7 != v8)
  {
    if (RETimelineDefinitionBlendTreeNodeGetName())
    {
      v9 = String.init(cString:)();
      v11 = v10;
      v12 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v52[0] = v5;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
      v15 = v5[2];
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        goto LABEL_48;
      v18 = v13;
      if (v5[3] >= v17)
      {
        if ((v12 & 1) != 0)
        {
          v5 = *(_QWORD **)&v52[0];
          if ((v13 & 1) == 0)
            goto LABEL_24;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v5 = *(_QWORD **)&v52[0];
          if ((v18 & 1) == 0)
            goto LABEL_24;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v12);
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_54;
        v14 = v19;
        v5 = *(_QWORD **)&v52[0];
        if ((v18 & 1) == 0)
        {
LABEL_24:
          v5[(v14 >> 6) + 8] |= 1 << v14;
          v30 = (uint64_t *)(v5[6] + 16 * v14);
          *v30 = v9;
          v30[1] = v11;
          *(_QWORD *)(v5[7] + 8 * v14) = v8;
          v31 = v5[2];
          v32 = __OFADD__(v31, 1);
          v33 = v31 + 1;
          if (v32)
            goto LABEL_50;
          v5[2] = v33;
          swift_bridgeObjectRetain();
          goto LABEL_8;
        }
      }
      *(_QWORD *)(v5[7] + 8 * v14) = v8;
LABEL_8:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    v21 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v52[0] = v5;
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
    v24 = v5[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      goto LABEL_49;
    v27 = v22;
    if (v5[3] >= v26)
    {
      if ((v21 & 1) != 0)
      {
        v5 = *(_QWORD **)&v52[0];
        if ((v22 & 1) != 0)
          goto LABEL_28;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v5 = *(_QWORD **)&v52[0];
        if ((v27 & 1) != 0)
          goto LABEL_28;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v21);
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_54;
      v23 = v28;
      v5 = *(_QWORD **)&v52[0];
      if ((v27 & 1) != 0)
      {
LABEL_28:
        *(_QWORD *)(v5[7] + 8 * v23) = v8;
        goto LABEL_9;
      }
    }
    v5[(v23 >> 6) + 8] |= 1 << v23;
    v34 = (_QWORD *)(v5[6] + 16 * v23);
    *v34 = 0;
    v34[1] = 0xE000000000000000;
    *(_QWORD *)(v5[7] + 8 * v23) = v8;
    v35 = v5[2];
    v32 = __OFADD__(v35, 1);
    v36 = v35 + 1;
    if (v32)
      goto LABEL_51;
    v5[2] = v36;
LABEL_9:
    swift_bridgeObjectRelease();
    if (v7 == ++v8)
      goto LABEL_34;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t BlendTreeAnimation.root.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[2];

  outlined init with copy of (Int, URL)(v1 + 208, (uint64_t)&v50, &demangling cache variable for type metadata for BlendTreeNode?);
  if (v51)
  {
    outlined init with take of BindableDataInternal(&v50, (uint64_t)v52);
    return outlined init with take of BindableDataInternal(v52, (uint64_t)a1);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v50, &demangling cache variable for type metadata for BlendTreeNode?);
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
  if (!v4)
  {
LABEL_46:
    a1[3] = (uint64_t)&type metadata for BlendTreeInvalidNode;
    a1[4] = (uint64_t)&protocol witness table for BlendTreeInvalidNode;
    result = swift_allocObject();
    *a1 = result;
    *(_QWORD *)(result + 16) = 0x64696C61766E69;
    *(_QWORD *)(result + 24) = 0xE700000000000000;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_BYTE *)(result + 56) = 0;
    return result;
  }
  v5 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = RETimelineDefinitionBlendTreeNodeCount();
  if (v6 < 0)
    goto LABEL_52;
  v7 = v6;
  if (!v6)
  {
LABEL_34:
    v37 = RETimelineDefinitionBlendTreeConnectionCount();
    if (v37 < 0)
      goto LABEL_53;
    v38 = v37;
    if (v37)
    {
      v39 = 0;
      do
      {
        if (RETimelineDefinitionBlendTreeConnectionGetSource())
        {
          v40 = String.init(cString:)();
          v42 = v41;
          swift_bridgeObjectRetain();
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
          v45 = v44;
          swift_bridgeObjectRelease();
          if ((v45 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v52[0] = v5;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v5 = *(_QWORD **)&v52[0];
            }
            swift_bridgeObjectRelease();
            specialized _NativeDictionary._delete(at:)(v43, (uint64_t)v5);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        ++v39;
      }
      while (v38 != v39);
    }
    v47 = swift_bridgeObjectRetain();
    specialized Sequence.min(by:)(v47);
    v49 = v48;
    swift_bridgeObjectRelease_n();
    if (v49)
    {
      specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:)(v4, a1);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_46;
  }
  v8 = 0;
  while (v7 != v8)
  {
    if (RETimelineDefinitionBlendTreeNodeGetName())
    {
      v9 = String.init(cString:)();
      v11 = v10;
      v12 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v52[0] = v5;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
      v15 = v5[2];
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        goto LABEL_48;
      v18 = v13;
      if (v5[3] >= v17)
      {
        if ((v12 & 1) != 0)
        {
          v5 = *(_QWORD **)&v52[0];
          if ((v13 & 1) == 0)
            goto LABEL_24;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v5 = *(_QWORD **)&v52[0];
          if ((v18 & 1) == 0)
            goto LABEL_24;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v12);
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_54;
        v14 = v19;
        v5 = *(_QWORD **)&v52[0];
        if ((v18 & 1) == 0)
        {
LABEL_24:
          v5[(v14 >> 6) + 8] |= 1 << v14;
          v30 = (uint64_t *)(v5[6] + 16 * v14);
          *v30 = v9;
          v30[1] = v11;
          *(_QWORD *)(v5[7] + 8 * v14) = v8;
          v31 = v5[2];
          v32 = __OFADD__(v31, 1);
          v33 = v31 + 1;
          if (v32)
            goto LABEL_50;
          v5[2] = v33;
          swift_bridgeObjectRetain();
          goto LABEL_8;
        }
      }
      *(_QWORD *)(v5[7] + 8 * v14) = v8;
LABEL_8:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    v21 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v52[0] = v5;
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
    v24 = v5[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      goto LABEL_49;
    v27 = v22;
    if (v5[3] >= v26)
    {
      if ((v21 & 1) != 0)
      {
        v5 = *(_QWORD **)&v52[0];
        if ((v22 & 1) != 0)
          goto LABEL_28;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v5 = *(_QWORD **)&v52[0];
        if ((v27 & 1) != 0)
          goto LABEL_28;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v21);
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_54;
      v23 = v28;
      v5 = *(_QWORD **)&v52[0];
      if ((v27 & 1) != 0)
      {
LABEL_28:
        *(_QWORD *)(v5[7] + 8 * v23) = v8;
        goto LABEL_9;
      }
    }
    v5[(v23 >> 6) + 8] |= 1 << v23;
    v34 = (_QWORD *)(v5[6] + 16 * v23);
    *v34 = 0;
    v34[1] = 0xE000000000000000;
    *(_QWORD *)(v5[7] + 8 * v23) = v8;
    v35 = v5[2];
    v32 = __OFADD__(v35, 1);
    v36 = v35 + 1;
    if (v32)
      goto LABEL_51;
    v5[2] = v36;
LABEL_9:
    swift_bridgeObjectRelease();
    if (v7 == ++v8)
      goto LABEL_34;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t key path setter for BlendTreeAnimation.root : <A>BlendTreeAnimation<A>(uint64_t a1)
{
  __int128 v2[2];

  outlined init with copy of __REAssetService(a1, (uint64_t)v2);
  return BlendTreeAnimation.root.setter(v2);
}

uint64_t BlendTreeAnimation.root.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 208;
  outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for BlendTreeNode?);
  return outlined init with take of BindableDataInternal(a1, v3);
}

uint64_t specialized Sequence.min(by:)(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a1 + 64;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v10 = (unint64_t)(v4 + 63) >> 6;
    while (2)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_6:
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v7 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        if (v17 >= v10)
          goto LABEL_27;
        v18 = *(_QWORD *)(v2 + 8 * v17);
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_27;
          v18 = *(_QWORD *)(v2 + 8 * v7);
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_27;
            v18 = *(_QWORD *)(v2 + 8 * v7);
            if (!v18)
            {
              v7 = v17 + 3;
              if (v17 + 3 >= v10)
                goto LABEL_27;
              v18 = *(_QWORD *)(v2 + 8 * v7);
              if (!v18)
              {
                v19 = v17 + 4;
                if (v19 >= v10)
                {
LABEL_27:
                  swift_release();
                  return v11;
                }
                v18 = *(_QWORD *)(v2 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    v7 = v19 + 1;
                    if (__OFADD__(v19, 1))
                      break;
                    if (v7 >= v10)
                      goto LABEL_27;
                    v18 = *(_QWORD *)(v2 + 8 * v7);
                    ++v19;
                    if (v18)
                      goto LABEL_24;
                  }
                  __break(1u);
LABEL_44:
                  v21 = 0;
                  v22 = 6;
                  if (v10 > 6)
                    v22 = v10;
                  v23 = v22 - 6;
                  while (v23 != v21)
                  {
                    v20 = *(_QWORD *)(a1 + 112 + 8 * v21++);
                    if (v20)
                    {
                      v7 = v21 + 5;
                      goto LABEL_31;
                    }
                  }
                  return 0;
                }
                v7 = v19;
              }
            }
          }
        }
LABEL_24:
        v13 = v18 - 1;
        v9 = (v18 - 1) & v18;
        v15 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_7:
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
        if (v16 < v12)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v15);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v12 = v16;
          if (v9)
            goto LABEL_6;
        }
        else if (v9)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v13 >= 9)
      {
        v20 = *(_QWORD *)(a1 + 96);
        if (v20)
        {
          v7 = 4;
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 104);
          if (!v20)
            goto LABEL_44;
          v7 = 5;
        }
LABEL_31:
        v9 = (v20 - 1) & v20;
        v8 = __clz(__rbit64(v20)) + (v7 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    v13 = v3 & 0x3F;
    if (v13 > 6)
    {
      v10 = (unint64_t)(v4 + 63) >> 6;
      v20 = *(_QWORD *)(a1 + 72);
      if (v20)
      {
        v7 = 1;
        goto LABEL_31;
      }
      if (v13 >= 8)
      {
        v20 = *(_QWORD *)(a1 + 80);
        if (v20)
        {
          v7 = 2;
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 88);
          if (!v20)
            goto LABEL_38;
          v7 = 3;
        }
        goto LABEL_31;
      }
    }
  }
  return 0;
}

void (*BlendTreeAnimation.root.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  BlendTreeAnimation.root.getter(v3);
  return BlendTreeAnimation.root.modify;
}

void BlendTreeAnimation.root.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v2 + 80);
    outlined init with copy of __REAssetService(*a1, v2 + 40);
    v3 += 208;
    outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for BlendTreeNode?);
    outlined init with take of BindableDataInternal((__int128 *)(v2 + 40), v3);
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 80) + 208;
    outlined destroy of BodyTrackingComponent?(v4, &demangling cache variable for type metadata for BlendTreeNode?);
    outlined init with take of BindableDataInternal((__int128 *)v2, v4);
  }
  free((void *)v2);
}

_BYTE *BlendTreeAnimation.createResource()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v5)(_BYTE *, uint64_t, uint64_t);
  uint64_t *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t);
  _BYTE *v9;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BYTE v16[248];
  _BYTE v17[248];

  v3 = v1;
  v5 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16);
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Float>);
  if (swift_dynamicCast())
  {
    v6 = &demangling cache variable for type metadata for BlendTreeAnimation<Float>;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<Float>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    v7 = BlendTreeAnimation<>.createResource()();
LABEL_10:
    v9 = v7;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, v6);
    return v9;
  }
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Double>);
  if (swift_dynamicCast())
  {
    v6 = &demangling cache variable for type metadata for BlendTreeAnimation<Double>;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<Double>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24F10];
LABEL_9:
    v7 = BlendTreeAnimation<>.createResource()(v6, v8);
    goto LABEL_10;
  }
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD2<Float>>);
  if (swift_dynamicCast())
  {
    v6 = &demangling cache variable for type metadata for BlendTreeAnimation<SIMD2<Float>>;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<SIMD2<Float>>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24F18];
    goto LABEL_9;
  }
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD3<Float>>);
  if (swift_dynamicCast())
  {
    v6 = &demangling cache variable for type metadata for BlendTreeAnimation<SIMD3<Float>>;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<SIMD3<Float>>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BE24F20];
    goto LABEL_9;
  }
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>);
  if (swift_dynamicCast())
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    v9 = v16;
    v11 = BlendTreeAnimation<>.createResource()(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>, MEMORY[0x24BE24F28]);
    if (!v2)
      v9 = v11;
    v12 = &demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>;
  }
  else
  {
    v5(v17, v3, a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>);
    if (swift_dynamicCast())
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>);
      v5(v17, v3, a1);
      swift_dynamicCast();
      v9 = v16;
      v13 = BlendTreeAnimation<>.createResource()(&demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>, MEMORY[0x24BE24F90]);
      if (!v2)
        v9 = v13;
      v12 = &demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>;
    }
    else
    {
      v5(v17, v3, a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Transform>);
      if (swift_dynamicCast())
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<Transform>);
        v5(v17, v3, a1);
        swift_dynamicCast();
        v9 = v16;
        v14 = BlendTreeAnimation<>.createResource()(&demangling cache variable for type metadata for BlendTreeAnimation<Transform>, MEMORY[0x24BE24F98]);
        if (!v2)
          v9 = v14;
        v12 = &demangling cache variable for type metadata for BlendTreeAnimation<Transform>;
      }
      else
      {
        v5(v17, v3, a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>);
        if ((swift_dynamicCast() & 1) == 0)
          return 0;
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>);
        v5(v17, v3, a1);
        swift_dynamicCast();
        v9 = v16;
        v15 = BlendTreeAnimation<>.createResource()(&demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>, MEMORY[0x24BE24FE8]);
        if (!v2)
          v9 = v15;
        v12 = &demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>;
      }
    }
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, v12);
  return v9;
}

_QWORD *BlendTreeAnimation<>.createResource()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  void *FloatBlendTree;
  Swift::OpaquePointer v10;
  uint64_t v11;

  v2 = v0;
  if ((specialized BlendTreeAnimation.isModified.getter(&demangling cache variable for type metadata for BlendTreeAnimation<Float>) & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 8);
    v3 = *(_QWORD *)(v0 + 16);
    v5 = *(_QWORD *)(v2 + 24);
    v6 = *(_BYTE *)(v2 + 32);
    if (v4)
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v5, v6);
      swift_retain();
    }
    else if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16))
    {
      outlined copy of BindTarget?(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
      swift_retain();
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined copy of BindTarget?(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
      swift_retain();
    }
    outlined consume of BindTarget?(v3, v5, v6);
    swift_release();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    FloatBlendTree = (void *)RETimelineDefinitionCreateFloatBlendTree();
    swift_release();
    v10._rawValue = FloatBlendTree;
    v7 = (_QWORD *)v2;
    v11 = specialized BlendTreeAnimation.createResource(timelineDefinition:)(v10);
    if (!v1)
      v7 = (_QWORD *)v11;
    RERelease();
  }
  else
  {
    if (!TimelineClipProperties.isClipped.getter())
      return TimelineDefinition.resource.getter();
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      return (_QWORD *)TimelineClipProperties.createClip()();
    }
    else
    {
      swift_retain();
      v7 = TimelineDefinition.resource.getter();
      swift_release();
    }
  }
  return v7;
}

_QWORD *BlendTreeAnimation<>.createResource()(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v12;
  void *v13;
  Swift::OpaquePointer v14;
  uint64_t v15;

  v5 = v2;
  if ((specialized BlendTreeAnimation.isModified.getter(a1) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v2 + 16);
    v8 = *(_QWORD *)(v5 + 24);
    v9 = *(_BYTE *)(v5 + 32);
    if (v7)
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v6, v8, v9);
      swift_retain();
    }
    else if (*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16))
    {
      outlined copy of BindTarget?(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));
      swift_retain();
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined copy of BindTarget?(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));
      swift_retain();
    }
    outlined consume of BindTarget?(v6, v8, v9);
    swift_release();
    v12 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v13 = (void *)a2(v12 + 32);
    swift_release();
    v14._rawValue = v13;
    v10 = (_QWORD *)v5;
    v15 = specialized BlendTreeAnimation.createResource(timelineDefinition:)(v14);
    if (!v3)
      v10 = (_QWORD *)v15;
    RERelease();
  }
  else
  {
    if (!TimelineClipProperties.isClipped.getter())
      return TimelineDefinition.resource.getter();
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      return (_QWORD *)TimelineClipProperties.createClip()();
    }
    else
    {
      swift_retain();
      v10 = TimelineDefinition.resource.getter();
      swift_release();
    }
  }
  return v10;
}

uint64_t BlendTreeAnimation.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  if (*(_QWORD *)(v0 + 8))
  {
    v4 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path setter for BlendTreeAnimation.name : <A>BlendTreeAnimation<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return BlendTreeAnimation.name.setter(v1, v2);
}

uint64_t BlendTreeAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*BlendTreeAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = BlendTreeAnimation.name.getter();
  a1[1] = v3;
  return BlendTreeAnimation.name.modify;
}

uint64_t BlendTreeAnimation.name.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t BlendTreeAnimation.blendLayer.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 40) != 1)
    return *(unsigned int *)(v0 + 36);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t BlendTreeAnimation.blendLayer.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t *(*BlendTreeAnimation.blendLayer.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v3)
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 36);
  }
  *v2 = v3;
  return BlendTreeAnimation.blendLayer.modify;
}

uint64_t *BlendTreeAnimation.blendLayer.modify(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_DWORD *)(v1 + 36) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t BlendTreeAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 32);
  if (v5 == 255)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = v11;
      v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v9 = 0;
      v8 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  return swift_release();
}

double key path getter for BlendTreeAnimation.bindTarget : <A>BlendTreeAnimation<A>@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  BlendTreeAnimation.bindTarget.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for BlendTreeAnimation.bindTarget : <A>BlendTreeAnimation<A>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v4[2];
  unsigned __int8 v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 16);
  v4[0] = *(_QWORD *)a1;
  v4[1] = v1;
  v5 = v2;
  outlined copy of BindTarget(v4[0], v1, v2);
  return BlendTreeAnimation.bindTarget.setter(v4);
}

uint64_t BlendTreeAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*BlendTreeAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  BlendTreeAnimation.bindTarget.getter(a1);
  return BlendTreeAnimation.bindTarget.modify;
}

uint64_t BlendTreeAnimation.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if ((a2 & 1) != 0)
  {
    outlined copy of BindTarget(*(_QWORD *)a1, v2, v4);
    outlined consume of BindTarget?(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v2;
    *(_BYTE *)(v5 + 32) = v4;
    return outlined consume of BindTarget(v3, v2, v4);
  }
  else
  {
    result = outlined consume of BindTarget?(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v2;
    *(_BYTE *)(v5 + 32) = v4;
  }
  return result;
}

uint64_t BlendTreeAnimation.fillMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 42) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 41);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *BlendTreeAnimation.fillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 41) = *result;
  return result;
}

unsigned __int8 *(*BlendTreeAnimation.fillMode.modify(_QWORD *a1))(unsigned __int8 *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 42) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v3)
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)(v1 + 41);
  }
  *v2 = v3;
  return BlendTreeAnimation.fillMode.modify;
}

unsigned __int8 *BlendTreeAnimation.fillMode.modify(unsigned __int8 *result)
{
  *(_WORD *)(*(_QWORD *)result + 41) = result[8];
  return result;
}

uint64_t BlendTreeAnimation.isAdditive.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 43);
  if (v1 != 2)
    return v1 & 1;
  result = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  if (result)
    return RETimelineDefinitionIsAdditive();
  return result;
}

uint64_t BlendTreeAnimation.isAdditive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 43) = result;
  return result;
}

_BYTE *(*BlendTreeAnimation.isAdditive.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = *(unsigned __int8 *)(v1 + 43);
  if (v3 == 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v4)
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *v2 = v4;
  return BlendTreeAnimation.isAdditive.modify;
}

_BYTE *BlendTreeAnimation.isAdditive.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 43) = result[8];
  return result;
}

uint64_t BlendTreeAnimation.trimStart.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipStart;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 168);
  v8[6] = *(_OWORD *)(v0 + 152);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v8[4] = *(_OWORD *)(v0 + 120);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0)
    return *(_QWORD *)&v8[0];
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t BlendTreeAnimation.trimStart.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  *(_BYTE *)(v2 + 65) = 0;
  return result;
}

uint64_t (*BlendTreeAnimation.trimStart.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = BlendTreeAnimation.trimStart.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimStart.modify;
}

uint64_t BlendTreeAnimation.trimStart.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)result;
  *(_WORD *)(v1 + 64) = v2;
  return result;
}

uint64_t BlendTreeAnimation.trimEnd.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipEnd;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_OWORD *)(v0 + 168);
  v14 = *(_OWORD *)(v0 + 152);
  v15 = v1;
  v16 = *(_OWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v10 = *(_OWORD *)(v0 + 88);
  v11 = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v12 = *(_OWORD *)(v0 + 120);
  v13 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8 = *(_OWORD *)(v0 + 56);
  v9 = v4;
  if ((BYTE9(v4) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t BlendTreeAnimation.trimEnd.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  *(_BYTE *)(v2 + 81) = 0;
  return result;
}

uint64_t (*BlendTreeAnimation.trimEnd.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = BlendTreeAnimation.trimEnd.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimEnd.modify;
}

uint64_t BlendTreeAnimation.trimEnd.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)result;
  *(_WORD *)(v1 + 80) = v2;
  return result;
}

uint64_t BlendTreeAnimation.trimDuration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *ClipDuration;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_OWORD *)(v0 + 88);
  v2 = *(_OWORD *)(v0 + 168);
  v14 = *(_OWORD *)(v0 + 152);
  v15 = v2;
  v16 = *(_OWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v3 = *(_OWORD *)(v0 + 104);
  v10 = v1;
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 136);
  v12 = *(_OWORD *)(v0 + 120);
  v13 = v4;
  v5 = *(_OWORD *)(v0 + 72);
  v9[0] = *(_OWORD *)(v0 + 56);
  v9[1] = v5;
  if ((BYTE9(v1) & 1) == 0)
    return v10;
  v6 = *(_QWORD *)(v17 + 16);
  if (v6)
  {
    outlined retain of TimelineClipProperties((uint64_t)v9);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      v6 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v9);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v9);
      return 0;
    }
  }
  return v6;
}

uint64_t BlendTreeAnimation.trimDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  *(_BYTE *)(v2 + 97) = 0;
  return result;
}

uint64_t (*BlendTreeAnimation.trimDuration.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = BlendTreeAnimation.trimDuration.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimDuration.modify;
}

uint64_t BlendTreeAnimation.trimDuration.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 88) = *(_QWORD *)result;
  *(_WORD *)(v1 + 96) = v2;
  return result;
}

double BlendTreeAnimation.offset.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_OWORD *)(v0 + 168);
  v12 = *(_OWORD *)(v0 + 152);
  v13 = v1;
  v14 = *(_OWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v9 = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v10 = *(_OWORD *)(v0 + 120);
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void BlendTreeAnimation.offset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 104) = a1;
  *(_BYTE *)(v1 + 112) = 0;
}

double (*BlendTreeAnimation.offset.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = BlendTreeAnimation.offset.getter();
  return BlendTreeAnimation.offset.modify;
}

double BlendTreeAnimation.offset.modify(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)(v1 + 104) = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 112) = 0;
  return result;
}

double BlendTreeAnimation.delay.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 168);
  v11 = *(_OWORD *)(v0 + 152);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v9 = *(_OWORD *)(v0 + 120);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void BlendTreeAnimation.delay.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 120) = a1;
  *(_BYTE *)(v1 + 128) = 0;
}

double (*BlendTreeAnimation.delay.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = BlendTreeAnimation.delay.getter();
  return BlendTreeAnimation.delay.modify;
}

double BlendTreeAnimation.delay.modify(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)(v1 + 120) = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 128) = 0;
  return result;
}

float BlendTreeAnimation.speed.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 168);
  v11 = *(_OWORD *)(v0 + 152);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v9 = *(_OWORD *)(v0 + 120);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((v10 & 1) == 0)
    return *((float *)&v9 + 3);
  v5 = 1.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void BlendTreeAnimation.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 132) = a1;
  *(_BYTE *)(v1 + 136) = 0;
}

float (*BlendTreeAnimation.speed.modify(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = BlendTreeAnimation.speed.getter();
  return BlendTreeAnimation.speed.modify;
}

float BlendTreeAnimation.speed.modify(float *a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)a1;
  result = a1[2];
  *(float *)(v1 + 132) = result;
  *(_BYTE *)(v1 + 136) = 0;
  return result;
}

void BlendTreeAnimation.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int ClipLoopBehavior;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 168);
  v11 = *(_OWORD *)(v1 + 152);
  v12 = v3;
  v13 = *(_OWORD *)(v1 + 184);
  v14 = *(_QWORD *)(v1 + 200);
  v4 = *(_OWORD *)(v1 + 104);
  v9[2] = *(_OWORD *)(v1 + 88);
  v9[3] = v4;
  v5 = *(_OWORD *)(v1 + 136);
  v9[4] = *(_OWORD *)(v1 + 120);
  v10 = v5;
  v6 = *(_OWORD *)(v1 + 72);
  v9[0] = *(_OWORD *)(v1 + 56);
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    v7 = *(_QWORD *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

_BYTE *BlendTreeAnimation.repeatMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 137) = *result;
  return result;
}

_BYTE *(*BlendTreeAnimation.repeatMode.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  BlendTreeAnimation.repeatMode.getter((_BYTE *)(a1 + 8));
  return BlendTreeAnimation.repeatMode.modify;
}

_BYTE *BlendTreeAnimation.repeatMode.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 137) = result[8];
  return result;
}

double BlendTreeAnimation.duration.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  __int128 v4[2];
  uint64_t v5;
  uint64_t v6[5];
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  BlendTreeAnimation.root.getter(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNodeInternal);
  if (swift_dynamicCast())
  {
    outlined init with take of BindableDataInternal(v4, (uint64_t)v7);
    v0 = v8;
    v1 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    v2 = (*(double (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for BlendTreeNodeInternal?);
    return 0.0;
  }
  return v2;
}

uint64_t specialized BlendTreeAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  char v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  __int16 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int16 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t TimelineAsset;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  char v82;
  int v83;
  char v84;
  char v85;
  int v86;
  char v87;
  char v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _QWORD v106[3];
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _OWORD v119[9];
  uint64_t v120;
  uint64_t v121;

  v3 = v1;
  if (a1._rawValue)
  {
    v5 = *((_BYTE *)v1 + 32);
    v6 = *((_DWORD *)v1 + 9);
    v7 = *((_BYTE *)v1 + 40);
    v8 = *((_BYTE *)v1 + 41);
    v9 = *((_BYTE *)v1 + 42);
    v10 = *((_BYTE *)v1 + 43);
    v11 = *((_QWORD *)v1 + 6);
    v12 = v1[1];
    v109 = *v1;
    v110 = v12;
    LOBYTE(v111) = v5;
    DWORD1(v111) = v6;
    BYTE8(v111) = v7;
    BYTE9(v111) = v8;
    BYTE10(v111) = v9;
    BYTE11(v111) = v10;
    *(_QWORD *)&v112 = v11;
    TimelineBaseProperties.writeProperties(_:)(a1);
    specialized BlendTreeAnimation.root.getter((uint64_t *)&v109);
    v13 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNodeInternal);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of BindableDataInternal(&v96, (uint64_t)v106);
      v14 = v107;
      v15 = v108;
      __swift_project_boxed_opaque_existential_1(v106, v107);
      *(_QWORD *)&v109 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      (*(void (**)(Swift::OpaquePointer, __int128 *, uint64_t, uint64_t))(v15 + 8))(a1, &v109, v14, v15);
      v13 = v16;
      swift_bridgeObjectRelease();
      if (v2)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
      }
      else
      {
        swift_bridgeObjectRelease();
        v52 = *(__int128 *)((char *)v3 + 168);
        v115 = *(__int128 *)((char *)v3 + 152);
        v116 = v52;
        v117 = *(__int128 *)((char *)v3 + 184);
        v118 = *((_QWORD *)v3 + 25);
        v53 = *(__int128 *)((char *)v3 + 104);
        v111 = *(__int128 *)((char *)v3 + 88);
        v112 = v53;
        v54 = *(__int128 *)((char *)v3 + 136);
        v113 = *(__int128 *)((char *)v3 + 120);
        v114 = v54;
        v55 = *(__int128 *)((char *)v3 + 72);
        v109 = *(__int128 *)((char *)v3 + 56);
        v110 = v55;
        v56 = *(__int128 *)((char *)v3 + 168);
        v102 = *(__int128 *)((char *)v3 + 152);
        v103 = v56;
        v104 = *(__int128 *)((char *)v3 + 184);
        v105 = *((_QWORD *)v3 + 25);
        v57 = *(__int128 *)((char *)v3 + 104);
        v98 = *(__int128 *)((char *)v3 + 88);
        v99 = v57;
        v58 = *(__int128 *)((char *)v3 + 136);
        v100 = *(__int128 *)((char *)v3 + 120);
        v101 = v58;
        v59 = *(__int128 *)((char *)v3 + 72);
        v96 = *(__int128 *)((char *)v3 + 56);
        v97 = v59;
        if (TimelineClipProperties.isClipped.getter())
        {
          v92 = v116;
          v94 = *((_QWORD *)&v115 + 1);
          v90 = *((_QWORD *)&v116 + 1);
          v86 = DWORD1(v117);
          v88 = v117;
          v84 = BYTE8(v117);
          v80 = BYTE10(v117);
          v82 = BYTE9(v117);
          v79 = BYTE11(v117);
          v78 = v118;
          v76 = HIDWORD(v113);
          v77 = BYTE1(v114);
          v75 = v114;
          v74 = v113;
          v73 = BYTE8(v113);
          v72 = v112;
          v71 = BYTE8(v112);
          v69 = v111;
          v67 = BYTE9(v111);
          v68 = BYTE8(v111);
          v60 = v110;
          v65 = BYTE9(v110);
          v66 = BYTE8(v110);
          v61 = v109;
          v121 = 0;
          v62 = BYTE8(v109);
          v63 = BYTE9(v109);
          v70 = v115;
          type metadata accessor for TimelineDefinition();
          v64 = swift_allocObject();
          *(Swift::OpaquePointer *)(v64 + 16) = a1;
          outlined retain of TimelineClipProperties((uint64_t)&v109);
          RERetain();
          swift_release();
          *(_QWORD *)&v96 = v61;
          BYTE8(v96) = v62;
          BYTE9(v96) = v63;
          *(_QWORD *)&v97 = v60;
          BYTE8(v97) = v66;
          BYTE9(v97) = v65;
          *(_QWORD *)&v98 = v69;
          BYTE8(v98) = v68;
          BYTE9(v98) = v67;
          *(_QWORD *)&v99 = v72;
          BYTE8(v99) = v71;
          *(_QWORD *)&v100 = v74;
          BYTE8(v100) = v73;
          HIDWORD(v100) = v76;
          LOBYTE(v101) = v75;
          BYTE1(v101) = v77;
          *((_QWORD *)&v101 + 1) = v64;
          *(_QWORD *)&v102 = v70;
          *((_QWORD *)&v102 + 1) = v94;
          *(_QWORD *)&v103 = v92;
          *((_QWORD *)&v103 + 1) = v90;
          LOBYTE(v104) = v88;
          DWORD1(v104) = v86;
          BYTE8(v104) = v84;
          BYTE9(v104) = v82;
          BYTE10(v104) = v80;
          BYTE11(v104) = v79;
          v105 = v78;
          v120 = v78;
          v119[7] = v103;
          v119[8] = v104;
          v119[0] = v96;
          v119[1] = v97;
          v119[5] = v101;
          v119[6] = v102;
          v119[3] = v99;
          v119[4] = v100;
          v119[2] = v98;
          outlined retain of TimelineClipProperties((uint64_t)&v96);
          swift_retain();
          closure #1 in TimelineClipProperties.createClip()((uint64_t)v119, &v95);
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)&v96);
          outlined release of TimelineClipProperties((uint64_t)&v96);
          v13 = v95;
        }
        else
        {
          type metadata accessor for TimelineDefinition();
          *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
          RERetain();
          v13 = TimelineDefinition.resource.getter();
          swift_setDeallocating();
          RERelease();
          swift_deallocClassInstance();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
      }
    }
    else
    {
      *(_QWORD *)&v98 = 0;
      v96 = 0u;
      v97 = 0u;
      outlined destroy of BodyTrackingComponent?((uint64_t)&v96, &demangling cache variable for type metadata for BlendTreeNodeInternal?);
      lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
      swift_allocError();
      *(_QWORD *)v42 = 0xD00000000000001DLL;
      *(_QWORD *)(v42 + 8) = 0x800000021BE85F20;
      *(_BYTE *)(v42 + 16) = 0;
      swift_willThrow();
    }
  }
  else
  {
    v121 = v2;
    v17 = *((_QWORD *)v1 + 19);
    v18 = *((_QWORD *)v1 + 20);
    v19 = *((_QWORD *)v1 + 21);
    v20 = *((_QWORD *)v1 + 22);
    v21 = *((_BYTE *)v1 + 184);
    v22 = *((_DWORD *)v1 + 47);
    v23 = *((_BYTE *)v1 + 192);
    v24 = *((_BYTE *)v1 + 193);
    v25 = *((_BYTE *)v1 + 194);
    v26 = *((_BYTE *)v1 + 195);
    v27 = *((_DWORD *)v1 + 49);
    v28 = *((_QWORD *)v1 + 25);
    v30 = (__int16 *)((char *)v1 + 185);
    v29 = *(_WORD *)((char *)v1 + 185);
    v31 = *(__int128 *)((char *)v1 + 104);
    v111 = *(__int128 *)((char *)v1 + 88);
    v112 = v31;
    v32 = *(__int128 *)((char *)v1 + 136);
    v113 = *(__int128 *)((char *)v1 + 120);
    v114 = v32;
    v33 = *(__int128 *)((char *)v1 + 72);
    v109 = *(__int128 *)((char *)v1 + 56);
    v110 = v33;
    v81 = v17;
    *(_QWORD *)&v115 = v17;
    *((_QWORD *)&v115 + 1) = v18;
    *(_QWORD *)&v116 = v19;
    *((_QWORD *)&v116 + 1) = v20;
    LOBYTE(v117) = v21;
    BYTE3(v117) = *((_BYTE *)v1 + 187);
    *(_WORD *)((char *)&v117 + 1) = v29;
    v93 = v22;
    DWORD1(v117) = v22;
    v91 = v23;
    BYTE8(v117) = v23;
    v87 = v25;
    v89 = v24;
    BYTE9(v117) = v24;
    BYTE10(v117) = v25;
    v83 = v27;
    v85 = v26;
    BYTE11(v117) = v26;
    HIDWORD(v117) = v27;
    v118 = v28;
    if (TimelineClipProperties.isClipped.getter())
    {
      v34 = *(__int128 *)((char *)v1 + 104);
      v111 = *(__int128 *)((char *)v1 + 88);
      v112 = v34;
      v35 = *(__int128 *)((char *)v1 + 136);
      v113 = *(__int128 *)((char *)v1 + 120);
      v114 = v35;
      v36 = *(__int128 *)((char *)v1 + 72);
      v109 = *(__int128 *)((char *)v1 + 56);
      v110 = v36;
      *(_QWORD *)&v115 = v81;
      *((_QWORD *)&v115 + 1) = v18;
      *(_QWORD *)&v116 = v19;
      *((_QWORD *)&v116 + 1) = v20;
      LOBYTE(v117) = v21;
      v37 = *v30;
      BYTE3(v117) = *((_BYTE *)v1 + 187);
      *(_WORD *)((char *)&v117 + 1) = v37;
      DWORD1(v117) = v93;
      BYTE8(v117) = v91;
      BYTE9(v117) = v89;
      BYTE10(v117) = v87;
      BYTE11(v117) = v85;
      HIDWORD(v117) = v83;
      v118 = v28;
      if ((TimelineClipProperties.isModified.getter() & 1) != 0)
      {
        v38 = *(__int128 *)((char *)v1 + 104);
        v111 = *(__int128 *)((char *)v1 + 88);
        v112 = v38;
        v39 = *(__int128 *)((char *)v1 + 136);
        v113 = *(__int128 *)((char *)v1 + 120);
        v114 = v39;
        v40 = *(__int128 *)((char *)v1 + 72);
        v109 = *(__int128 *)((char *)v1 + 56);
        v110 = v40;
        *(_QWORD *)&v115 = v81;
        *((_QWORD *)&v115 + 1) = v18;
        *(_QWORD *)&v116 = v19;
        *((_QWORD *)&v116 + 1) = v20;
        LOBYTE(v117) = v21;
        v41 = *v30;
        BYTE3(v117) = *((_BYTE *)v1 + 187);
        *(_WORD *)((char *)&v117 + 1) = v41;
        DWORD1(v117) = v93;
        BYTE8(v117) = v91;
        BYTE9(v117) = v89;
        BYTE10(v117) = v87;
        BYTE11(v117) = v85;
        HIDWORD(v117) = v83;
        v118 = v28;
        return TimelineClipProperties.createClip()();
      }
      else
      {
        swift_retain();
        v13 = TimelineDefinition.resource.getter();
        swift_release();
      }
    }
    else
    {
      if (!*(_QWORD *)(*((_QWORD *)v1 + 6) + 16))
        return 0;
      v44 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v44, (uint64_t)&v109);
      v45 = *((_QWORD *)&v110 + 1);
      v46 = v111;
      __swift_project_boxed_opaque_existential_1(&v109, *((uint64_t *)&v110 + 1));
      (*(void (**)(uint64_t, uint64_t))(v46 + 32))(v45, v46);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v109);
      TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
      if (TimelineAsset)
      {
        v48 = TimelineAsset;
        RETimelineDefinitionGetName();
        v49 = String.init(cString:)();
        v51 = v50;
        type metadata accessor for AnimationResource();
        v13 = (_QWORD *)swift_allocObject();
        v13[2] = v48;
        v13[3] = v49;
        v13[4] = v51;
        RERetain();
        REAssetSetSwiftObject();
        RERelease();
      }
      else
      {
        return 0;
      }
    }
  }
  return (uint64_t)v13;
}

_BYTE *BlendTreeAnimation.generate()(uint64_t a1)
{
  uint64_t v1;
  _BYTE *result;
  uint64_t v3;

  result = BlendTreeAnimation.createResource()(a1);
  if (!v1 && !result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v3 = 0xD00000000000001CLL;
    *(_QWORD *)(v3 + 8) = 0x800000021BE822D0;
    *(_BYTE *)(v3 + 16) = 0;
    return (_BYTE *)swift_willThrow();
  }
  return result;
}

uint64_t specialized BlendTreeAnimation.isModified.getter(uint64_t *a1)
{
  uint64_t v1;
  BOOL v3;
  BOOL v4;
  int v5;
  _BOOL8 v6;
  _QWORD v8[5];
  _BYTE v9[208];
  uint64_t v10;

  if (*(_QWORD *)(v1 + 8)
    || (*(unsigned __int8 *)(v1 + 32) == 255 ? (v3 = *(_BYTE *)(v1 + 40) == 0) : (v3 = 1),
        !v3 ? (v4 = *(_BYTE *)(v1 + 42) == 0) : (v4 = 1),
        v4))
  {
    outlined init with copy of (Int, URL)(v1, (uint64_t)v9, a1);
    goto LABEL_12;
  }
  v5 = *(unsigned __int8 *)(v1 + 43);
  outlined init with copy of (Int, URL)(v1, (uint64_t)v9, a1);
  if (v5 != 2)
  {
LABEL_12:
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, a1);
    return 1;
  }
  outlined init with copy of (Int, URL)((uint64_t)&v10, (uint64_t)v8, &demangling cache variable for type metadata for BlendTreeNode?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v9, a1);
  v6 = v8[3] != 0;
  outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for BlendTreeNode?);
  return v6;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance BlendTreeAnimation<A>(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)BlendTreeAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.blendLayer.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance BlendTreeAnimation<A>(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return BlendTreeAnimation.fillMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.fillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance BlendTreeAnimation<A>()
{
  return BlendTreeAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance BlendTreeAnimation<A>(uint64_t a1, char a2)
{
  return BlendTreeAnimation.trimStart.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.trimStart.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance BlendTreeAnimation<A>()
{
  return BlendTreeAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance BlendTreeAnimation<A>(uint64_t a1, char a2)
{
  return BlendTreeAnimation.trimEnd.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.trimEnd.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance BlendTreeAnimation<A>()
{
  return BlendTreeAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance BlendTreeAnimation<A>(uint64_t a1, char a2)
{
  return BlendTreeAnimation.trimDuration.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.trimDuration.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.offset.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.delay.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.speed.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_BYTE *protocol witness for AnimationDefinition.repeatMode.setter in conformance BlendTreeAnimation<A>(char *a1)
{
  char v2;

  v2 = *a1;
  return BlendTreeAnimation.repeatMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance BlendTreeAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.repeatMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_BYTE *protocol witness for AnimationDefinitionInternal.generate() in conformance BlendTreeAnimation<A>(uint64_t a1)
{
  return BlendTreeAnimation.generate()(a1);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v17 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v17;
  }
  v8 = *(_QWORD *)(v7 + 48) + 120 * v4;
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(_QWORD *)(v8 + 80);
  v11 = *(_QWORD *)(v8 + 88);
  v12 = *(_QWORD *)(v8 + 96);
  v13 = *(_QWORD *)(v8 + 104);
  v14 = *(void **)(v8 + 112);
  outlined consume of __MaterialResource.CoreMaterialFunction?(*(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56), *(void **)(v8 + 64));
  outlined consume of __MaterialResource.CoreMaterialFunction?(v9, v10, v11, v12, v13, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v15;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;
  _OWORD v12[2];

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), v12);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    outlined init with take of Any(v12, a2);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v25 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v12 = v25;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 56) + 80 * v8;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_BYTE *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    v18 = *(_BYTE *)(v13 + 32);
    v19 = *(_BYTE *)(v13 + 33);
    v23 = *(_QWORD *)(v13 + 48);
    v24 = *(_QWORD *)(v13 + 40);
    v20 = *(_QWORD *)(v13 + 56);
    v21 = *(_QWORD *)(v13 + 64);
    v22 = *(_BYTE *)(v13 + 72);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    *v4 = v12;
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v15;
    *(_BYTE *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 24) = v17;
    *(_BYTE *)(a3 + 32) = v18;
    *(_BYTE *)(a3 + 33) = v19;
    *(_QWORD *)(a3 + 40) = v24;
    *(_QWORD *)(a3 + 48) = v23;
    *(_QWORD *)(a3 + 56) = v20;
    *(_QWORD *)(a3 + 64) = v21;
    *(_BYTE *)(a3 + 72) = v22;
  }
  else
  {
    *(_OWORD *)(a3 + 57) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v16 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v16;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, *(_QWORD *)(v9 + 56) + v13, v11);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v15 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    *a3 = *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = xmmword_21BE5C7C0;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  __int16 v9;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  double result;
  uint64_t v15;

  v5 = v4;
  v9 = a3 & 0x101;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, v9);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v5;
    v15 = *v5;
    *v5 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v13 = v15;
    }
    swift_bridgeObjectRelease();
    outlined init with take of BindableDataInternal((__int128 *)(*(_QWORD *)(v13 + 56) + 40 * v10), a4);
    specialized _NativeDictionary._delete(at:)(v10, v13);
    *v5 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_OWORD *)(v16 + 32 * v3);
            v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= v18 + 2))
            {
              v9 = v18[1];
              *v17 = *v18;
              v17[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            v16 = (_QWORD *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1)
              *v16 = *v12;
            v17 = *(_QWORD *)(a2 + 56);
            v18 = v17 + 40 * v3;
            v19 = (__int128 *)(v17 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              v9 = *v19;
              v10 = v19[1];
              *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
              *(_OWORD *)v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v3);
        v13 = (_QWORD *)(v11 + 8 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        if (v3 < (uint64_t)v6 || *(_QWORD *)(a2 + 56) + 8 * v3 >= *(_QWORD *)(a2 + 56) + 8 * v6 + 8)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v14 = v3 == v6;
          v3 = v6;
          if (v14)
            goto LABEL_6;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_19;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_19:
    v15 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v16 = *v15;
    v17 = (-1 << v3) - 1;
  }
  else
  {
    v15 = (uint64_t *)(v4 + 8 * (result >> 6));
    v17 = *v15;
    v16 = (-1 << result) - 1;
  }
  *v15 = v17 & v16;
  v18 = *(_QWORD *)(a2 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v20;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  Swift::UInt64 *v9;
  Swift::UInt v10;
  Swift::UInt64 v11;
  Swift::UInt v12;
  Swift::UInt64 v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v30 = (result + 1) & v7;
      v31 = v2;
      do
      {
        v9 = (Swift::UInt64 *)(*(_QWORD *)(v2 + 48) + 40 * v6);
        v11 = *v9;
        v10 = v9[1];
        v12 = v9[2];
        v13 = v9[4];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        if (v10)
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v10);
          if (v12)
            goto LABEL_8;
        }
        else
        {
          Hasher._combine(_:)(0);
          if (v12)
          {
LABEL_8:
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v12);
            if (v13)
              goto LABEL_9;
            goto LABEL_12;
          }
        }
        Hasher._combine(_:)(0);
        if (v13)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          goto LABEL_13;
        }
LABEL_12:
        Hasher._combine(_:)(0);
LABEL_13:
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v30)
        {
          v2 = v31;
          if (v15 < v30)
            goto LABEL_5;
        }
        else
        {
          v2 = v31;
          if (v15 >= v30)
            goto LABEL_18;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_18:
          v16 = *(_QWORD *)(v2 + 48);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || v17 >= (unint64_t)v18 + 40)
          {
            v19 = *v18;
            v20 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v19;
            *(_OWORD *)(v17 + 16) = v20;
          }
          v21 = *(_QWORD *)(v2 + 56);
          v22 = (_OWORD *)(v21 + 32 * v3);
          v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 2))
          {
            v8 = v23[1];
            *v22 = *v23;
            v22[1] = v8;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(v2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v29;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 80 * v3;
          v15 = (const void *)(v14 + 80 * v6);
          if (80 * v3 < (uint64_t)(80 * v6) || result >= (unint64_t)v15 + 80 || (v16 = v3 == v6, v3 = v6, !v16))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x50uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        result = v15 + 16 * v3;
        if (v3 < (uint64_t)v6 || result >= v15 + 16 * v6 + 16)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v16 = v3 == v6;
          v3 = v6;
          if (v16)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  int v12;
  int v13;
  int v14;
  Swift::UInt16 v15;
  Swift::UInt8 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v31 = v4;
      v32 = (result + 1) & v7;
      v33 = v7;
      do
      {
        v8 = 24 * v6;
        v9 = v2;
        v10 = *(_QWORD *)(v2 + 48) + 24 * v6;
        v11 = *(_QWORD *)(v10 + 8);
        v12 = *(unsigned __int8 *)(v10 + 16);
        v13 = *(unsigned __int8 *)(v10 + 17);
        v14 = *(unsigned __int8 *)(v10 + 18);
        v15 = *(_WORD *)v10;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v15);
        if (v12 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v11);
        }
        v2 = v9;
        if (v13 == 2)
        {
          Hasher._combine(_:)(0);
          if (v14 != 2)
            goto LABEL_11;
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v13 & 1);
          if (v14 != 2)
          {
LABEL_11:
            v16 = v14 & 1;
            Hasher._combine(_:)(1u);
            goto LABEL_14;
          }
        }
        v16 = 0;
LABEL_14:
        Hasher._combine(_:)(v16);
        result = Hasher._finalize()();
        v17 = result & v33;
        if (v3 >= (uint64_t)v32)
        {
          if (v17 >= v32 && v3 >= (uint64_t)v17)
          {
LABEL_20:
            v18 = *(_QWORD *)(v9 + 48);
            v19 = v18 + 24 * v3;
            v20 = (__int128 *)(v18 + v8);
            if (24 * v3 < v8 || v19 >= (unint64_t)v20 + 24 || v3 != v6)
            {
              v21 = *v20;
              *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
              *(_OWORD *)v19 = v21;
            }
            v22 = *(_QWORD *)(v9 + 56);
            v23 = (_QWORD *)(v22 + 8 * v3);
            v24 = (_QWORD *)(v22 + 8 * v6);
            v4 = v31;
            if (v3 != v6 || (v3 = v6, v23 >= v24 + 1))
            {
              *v23 = *v24;
              v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v17 >= v32 || v3 >= (uint64_t)v17)
        {
          goto LABEL_20;
        }
        v4 = v31;
LABEL_5:
        v6 = (v6 + 1) & v33;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(v2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v30;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_DWORD *)(v9 + 4 * v6);
        result = MEMORY[0x220769EF0](*(_QWORD *)(a2 + 40), *v10, 4);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_DWORD *)(v9 + 4 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for LoadTrace(0) - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = 24 * v6;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = v14 + 24 * v3;
          v16 = (__int128 *)(v14 + v11);
          if (24 * v3 < v11 || v15 >= (unint64_t)v16 + 24 || v3 != v6)
          {
            v17 = *v16;
            *(_QWORD *)(v15 + 16) = *((_QWORD *)v16 + 2);
            *(_OWORD *)v15 = v17;
          }
          v18 = *(_QWORD *)(a2 + 56);
          v19 = v18 + 40 * v3;
          v20 = (__int128 *)(v18 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= (unint64_t)v20 + 40))
          {
            v9 = *v20;
            v10 = v20[1];
            *(_QWORD *)(v19 + 32) = *((_QWORD *)v20 + 4);
            *(_OWORD *)v19 = v9;
            *(_OWORD *)(v19 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt32 v14;
  Swift::UInt16 v15;
  Swift::UInt64 v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v33 = v2;
      v34 = v4;
      do
      {
        v12 = *(_QWORD *)(v2 + 48) + 48 * v6;
        v13 = *(_QWORD *)(v12 + 16);
        v14 = *(_DWORD *)(v12 + 44);
        v15 = *(_WORD *)(v12 + 40);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v16 = v13;
        else
          v16 = 0;
        Hasher._combine(_:)(v16);
        Hasher._combine(_:)(v15);
        Hasher._combine(_:)(v14);
        v17 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v18 = v17 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v18 < v8)
          {
            v2 = v33;
            v4 = v34;
          }
          else
          {
            v2 = v33;
            v4 = v34;
            if (v3 >= v18)
              goto LABEL_15;
          }
        }
        else
        {
          v2 = v33;
          v4 = v34;
          if (v18 >= v8 || v3 >= v18)
          {
LABEL_15:
            v19 = *(_QWORD *)(v2 + 48);
            v20 = (__int128 *)(v19 + 48 * v3);
            v21 = (__int128 *)(v19 + 48 * v6);
            if (v3 != v6 || v20 >= v21 + 3)
            {
              v22 = *v21;
              v23 = v21[2];
              v20[1] = v21[1];
              v20[2] = v23;
              *v20 = v22;
            }
            v24 = *(_QWORD *)(v2 + 56);
            v25 = (__int128 *)(v24 + (v3 << 6));
            v26 = (__int128 *)(v24 + (v6 << 6));
            if (v3 != v6 || (v3 = v6, v25 >= v26 + 4))
            {
              v9 = *v26;
              v10 = v26[1];
              v11 = v26[3];
              v25[2] = v26[2];
              v25[3] = v11;
              *v25 = v9;
              v25[1] = v10;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v27 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v28 = *v27;
    v29 = (-1 << v3) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v4 + 8 * (result >> 6));
    v29 = *v27;
    v28 = (-1 << result) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(v2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v32;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  Swift::UInt16 v12;
  Swift::UInt8 v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48) + 4 * v6;
        v10 = *(unsigned __int8 *)(v9 + 2);
        v11 = *(unsigned __int8 *)(v9 + 3);
        v12 = *(_WORD *)v9;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        if (v10 == 2)
        {
          Hasher._combine(_:)(0);
          if (v11 != 2)
            goto LABEL_8;
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v10 & 1);
          if (v11 != 2)
          {
LABEL_8:
            v13 = v11 & 1;
            Hasher._combine(_:)(1u);
            goto LABEL_11;
          }
        }
        v13 = 0;
LABEL_11:
        Hasher._combine(_:)(v13);
        result = Hasher._finalize()();
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_16;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_16:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_DWORD *)(v15 + 4 * v3);
          v17 = (_DWORD *)(v15 + 4 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_QWORD *)(v18 + 8 * v3);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
          {
            *v19 = *v20;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;

  v4 = type metadata accessor for UUID();
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v31 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v32 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12 * v9;
        v16 = v13;
        v30(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v4);
        v13 = v16;
        v18 = v17 & v16;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            v21 = v12 * a1;
            if (v12 * a1 < v15
              || *(_QWORD *)(a2 + 48) + v12 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v15 + v12))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v21 != v15)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            if (v21 < v15 || *(_QWORD *)(a2 + 56) + v21 >= (unint64_t)(*(_QWORD *)(a2 + 56) + v15 + v12))
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v9;
              v7 = v14;
              v13 = v16;
            }
            else
            {
              a1 = v9;
              v22 = v21 == v15;
              v7 = v14;
              v13 = v16;
              if (!v22)
              {
                swift_arrayInitWithTakeBackToFront();
                v13 = v16;
                a1 = v9;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        v7 = v14;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v23 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Swift::UInt16 v18;
  Swift::UInt8 v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  Swift::UInt32 *v23;
  Swift::UInt32 v24;
  id v25;
  void *v26;
  uint64_t v27;
  Swift::UInt32 *v28;
  Swift::UInt32 v29;
  id v30;
  Swift::Int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;

  v2 = a2;
  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v48 = v7;
      v49 = v2;
      v46 = v4;
      v47 = (v8 + 1) & v7;
      do
      {
        v51 = v6;
        v52 = v3;
        v9 = *(_QWORD *)(v2 + 48) + 120 * v6;
        v10 = *(_QWORD *)(v9 + 8);
        v11 = *(unsigned __int8 *)(v9 + 16);
        v12 = *(unsigned __int8 *)(v9 + 18);
        v53 = *(_QWORD *)(v9 + 24);
        v54 = *(_QWORD *)(v9 + 32);
        v55 = *(_QWORD *)(v9 + 48);
        v56 = *(_QWORD *)(v9 + 40);
        v13 = *(_QWORD *)(v9 + 72);
        v57 = *(_QWORD *)(v9 + 56);
        v58 = *(void **)(v9 + 64);
        v14 = *(_QWORD *)(v9 + 88);
        v50 = *(_QWORD *)(v9 + 80);
        v15 = *(_QWORD *)(v9 + 96);
        v16 = *(_QWORD *)(v9 + 104);
        v17 = *(void **)(v9 + 112);
        v18 = *(_WORD *)v9;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v18);
        if (v11 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v10);
        }
        if (v12 == 2)
        {
          v19 = 0;
        }
        else
        {
          v19 = v12 & 1;
          Hasher._combine(_:)(1u);
        }
        Hasher._combine(_:)(v19);
        if (v56)
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v53);
          outlined copy of __MaterialResource.CoreMaterialFunction?(v53, v54, v56, v55, v57, v58);
          v20 = v50;
          outlined copy of __MaterialResource.CoreMaterialFunction?(v13, v50, v14, v15, v16, v17);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 = (void *)REAssetHandleCopyAssetIdentifierString();
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
          _CFObject.hash(into:)();

          Hasher._combine(_:)(*(_QWORD *)(v57 + 16));
          v22 = *(_QWORD *)(v57 + 16);
          if (v22)
          {
            v23 = (Swift::UInt32 *)(v57 + 32);
            do
            {
              v24 = *v23++;
              Hasher._combine(_:)(v24);
              --v22;
            }
            while (v22);
          }
          v25 = v58;
          NSObject.hash(into:)();

          if (!v14)
          {
LABEL_22:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }
        }
        else
        {
          Hasher._combine(_:)(0);
          outlined copy of __MaterialResource.CoreMaterialFunction?(v53, v54, 0, v55, v57, v58);
          v20 = v50;
          outlined copy of __MaterialResource.CoreMaterialFunction?(v13, v50, v14, v15, v16, v17);
          if (!v14)
            goto LABEL_22;
        }
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v13);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v26 = (void *)REAssetHandleCopyAssetIdentifierString();
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
        _CFObject.hash(into:)();

        Hasher._combine(_:)(*(_QWORD *)(v16 + 16));
        v27 = *(_QWORD *)(v16 + 16);
        if (v27)
        {
          v28 = (Swift::UInt32 *)(v16 + 32);
          do
          {
            v29 = *v28++;
            Hasher._combine(_:)(v29);
            --v27;
          }
          while (v27);
        }
        v30 = v17;
        NSObject.hash(into:)();

LABEL_23:
        v31 = Hasher._finalize()();
        outlined consume of __MaterialResource.CoreMaterialFunction?(v53, v54, v56, v55, v57, v58);
        outlined consume of __MaterialResource.CoreMaterialFunction?(v13, v20, v14, v15, v16, v17);
        v32 = v31 & v48;
        v3 = v52;
        v2 = v49;
        if (v52 >= (uint64_t)v47)
        {
          v33 = v51;
          v4 = v46;
          if (v32 < v47)
            goto LABEL_5;
        }
        else
        {
          v33 = v51;
          v4 = v46;
          if (v32 >= v47)
            goto LABEL_28;
        }
        if (v52 >= (uint64_t)v32)
        {
LABEL_28:
          v34 = *(_QWORD *)(v49 + 48);
          v35 = (char *)(v34 + 120 * v52);
          v36 = (char *)(v34 + 120 * v33);
          if (v52 != v33 || v35 >= v36 + 120)
            memmove(v35, v36, 0x78uLL);
          v37 = *(_QWORD *)(v49 + 56);
          v38 = (_QWORD *)(v37 + 8 * v52);
          v39 = (_QWORD *)(v37 + 8 * v33);
          if (v52 != v33 || (v3 = v33, v38 >= v39 + 1))
          {
            *v38 = *v39;
            v3 = v33;
          }
        }
LABEL_5:
        v6 = (v33 + 1) & v48;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v40 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v41 = *v40;
    v42 = (-1 << v3) - 1;
  }
  else
  {
    v40 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v42 = *v40;
    v41 = (-1 << a1) - 1;
  }
  *v40 = v42 & v41;
  v43 = *(_QWORD *)(v2 + 16);
  v44 = __OFSUB__(v43, 1);
  v45 = v43 - 1;
  if (v44)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v45;
    ++*(_DWORD *)(v2 + 36);
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a7[6] + 8 * result) = a2;
  v7 = (_QWORD *)(a7[7] + 32 * result);
  *v7 = a3;
  v7[1] = a4;
  v7[2] = a5;
  v7[3] = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 120 * result;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 80) = v5;
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 48) = v7;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a4 + 48);
  a5[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a5[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a5[7] + 56 * result;
  v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a4;
  *(_OWORD *)(v7 + 16) = v8;
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(v7 + 48) = v5;
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 24 * result);
  *v6 = a2;
  v6[1] = a3;
  v6[2] = a4;
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of BindableDataInternal(a3, a4[7] + 40 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = (_OWORD *)(a4[7] + 80 * result);
  v5 = a3[4];
  v6 = a3[2];
  v4[3] = a3[3];
  v4[4] = v5;
  v7 = a3[1];
  *v4 = *a3;
  v4[1] = v7;
  v4[2] = v6;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(a3, a4[7] + 8 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72) * a1;
  v12 = v8 + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v13(v12, a2, v9);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a4[7] + v11, a3, v9);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of __RKEntityAction.ActionStateObservation(a3, a4[7] + 16 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 80 * result);
  *(_OWORD *)((char *)v6 + 57) = *(_OWORD *)((char *)a4 + 57);
  v7 = a4[3];
  v6[2] = a4[2];
  v6[3] = v7;
  v8 = a4[1];
  *v6 = *a4;
  v6[1] = v8;
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, __int16 a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_WORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4 & 1;
  *(_BYTE *)(v6 + 17) = BYTE1(a4);
  *(_BYTE *)(v6 + 18) = BYTE2(a4);
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t Trace;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  v7 = a4[7];
  Trace = type metadata accessor for LoadTrace(0);
  result = outlined init with take of LoadTrace(a3, v7 + *(_QWORD *)(*(_QWORD *)(Trace - 8) + 72) * a1);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _QWORD *a3, __n128 a4, __n128 a5)
{
  __n128 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a3[6] + 8 * result) = a2;
  v5 = (__n128 *)(a3[7] + 32 * result);
  *v5 = a4;
  v5[1] = a5;
  v6 = a3[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a3[2] = v8;
  return result;
}

BOOL specialized static BlendWeight.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v12;
  _BOOL8 result;
  char v15;
  char v16;
  float v17;
  float v18;
  _QWORD v19[2];
  char v20;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      outlined consume of BlendWeight(*(_QWORD *)a1, v2, v4, 0);
      outlined consume of BlendWeight(v7, v6, v8, 0);
      return *(float *)&v3 == *(float *)&v7;
    }
    goto LABEL_17;
  }
  if (v5 == 1)
  {
    if (v9 == 1)
    {
      v10 = *(_QWORD *)a1;
      if (v3 == v7 && v2 == v6)
      {
        outlined copy of BlendWeight(v10, v2, v8, 1);
        outlined copy of BlendWeight(v3, v2, v4, 1);
        outlined consume of BlendWeight(v3, v2, v4, 1);
        outlined consume of BlendWeight(v3, v2, v8, 1);
      }
      else
      {
        v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of BlendWeight(v7, v6, v8, 1);
        outlined copy of BlendWeight(v3, v2, v4, 1);
        outlined consume of BlendWeight(v3, v2, v4, 1);
        outlined consume of BlendWeight(v7, v6, v8, 1);
        result = 0;
        if ((v12 & 1) == 0)
          return result;
      }
      v17 = *(float *)&v4;
      v18 = *(float *)&v8;
      return v17 == v18;
    }
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  if (v9 != 2)
  {
    outlined copy of BindTarget(*(_QWORD *)a1, v2, v4);
LABEL_17:
    outlined copy of BlendWeight(v7, v6, v8, v9);
    outlined consume of BlendWeight(v3, v2, v4, v5);
    outlined consume of BlendWeight(v7, v6, v8, v9);
    return 0;
  }
  v19[0] = *(_QWORD *)a1;
  v19[1] = v2;
  v20 = v4;
  outlined copy of BlendWeight(v7, v6, v8, 2);
  outlined copy of BlendWeight(v3, v2, v4, 2);
  outlined copy of BlendWeight(v7, v6, v8, 2);
  outlined copy of BlendWeight(v3, v2, v4, 2);
  specialized static BindTarget.== infix(_:_:)((uint64_t)v19);
  v16 = v15;
  outlined consume of BlendWeight(v3, v2, v4, 2);
  outlined consume of BlendWeight(v7, v6, v8, 2);
  outlined consume of BlendWeight(v7, v6, v8, 2);
  outlined consume of BlendWeight(v3, v2, v4, 2);
  if ((v16 & 1) == 0)
    return 0;
  v17 = *((float *)&v4 + 1);
  v18 = *((float *)&v8 + 1);
  return v17 == v18;
}

uint64_t outlined assign with take of AnimationDefinition?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of BlendWeight(uint64_t result, uint64_t a2, unsigned __int8 a3, char a4)
{
  if (a4 == 2)
    return outlined copy of BindTarget(result, a2, a3);
  if (a4 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of BlendWeight(uint64_t result, uint64_t a2, unsigned __int8 a3, char a4)
{
  if (a4 == 2)
    return outlined consume of BindTarget(result, a2, a3);
  if (a4 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_21BAB0BA8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of BlendWeight(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocObject();
}

uint64_t sub_21BAB0BE4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of BlendWeight(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t sub_21BAB0C18@<X0>(uint64_t *a1@<X8>)
{
  return BlendTreeAnimation.root.getter(a1);
}

uint64_t sub_21BAB0C3C()
{
  return 16;
}

__n128 sub_21BAB0C48(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAB0C54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = BlendTreeAnimation.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21BAB0C80()
{
  return 16;
}

__n128 sub_21BAB0C8C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAB0C98@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = BlendTreeAnimation.blendLayer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BAB0CC0(unsigned int *a1)
{
  return BlendTreeAnimation.blendLayer.setter(*a1);
}

uint64_t sub_21BAB0CE4()
{
  return 16;
}

__n128 sub_21BAB0CF0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAB0D04()
{
  return 16;
}

__n128 sub_21BAB0D10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAB0D1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = BlendTreeAnimation.fillMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned __int8 *sub_21BAB0D54(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return BlendTreeAnimation.fillMode.setter(&v2);
}

uint64_t sub_21BAB0D88()
{
  return 16;
}

__n128 sub_21BAB0D94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAB0DA0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = BlendTreeAnimation.isAdditive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_21BAB0DCC(unsigned __int8 *a1)
{
  return BlendTreeAnimation.isAdditive.setter(*a1);
}

uint64_t sub_21BAB0DF0()
{
  return 16;
}

__n128 sub_21BAB0DFC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAB0E08@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = BlendTreeAnimation.trimStart.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BAB0E38(uint64_t a1)
{
  return BlendTreeAnimation.trimStart.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BAB0E64()
{
  return 16;
}

__n128 sub_21BAB0E70(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAB0E7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = BlendTreeAnimation.trimEnd.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BAB0EAC(uint64_t a1)
{
  return BlendTreeAnimation.trimEnd.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BAB0ED8()
{
  return 16;
}

__n128 sub_21BAB0EE4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAB0EF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = BlendTreeAnimation.trimDuration.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BAB0F20(uint64_t a1)
{
  return BlendTreeAnimation.trimDuration.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21BAB0F4C()
{
  return 16;
}

__n128 sub_21BAB0F58(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BAB0F64(double *a1@<X8>)
{
  *a1 = BlendTreeAnimation.offset.getter();
}

void sub_21BAB0F8C(double *a1)
{
  BlendTreeAnimation.offset.setter(*a1);
}

uint64_t sub_21BAB0FB0()
{
  return 16;
}

__n128 sub_21BAB0FBC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BAB0FC8(double *a1@<X8>)
{
  *a1 = BlendTreeAnimation.delay.getter();
}

void sub_21BAB0FF0(double *a1)
{
  BlendTreeAnimation.delay.setter(*a1);
}

uint64_t sub_21BAB1014()
{
  return 16;
}

__n128 sub_21BAB1020(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BAB102C(float *a1@<X8>)
{
  *a1 = BlendTreeAnimation.speed.getter();
}

void sub_21BAB1054(float *a1)
{
  BlendTreeAnimation.speed.setter(*a1);
}

uint64_t sub_21BAB1078()
{
  return 16;
}

__n128 sub_21BAB1084(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BAB1090(_BYTE *a1@<X8>)
{
  char v2;

  BlendTreeAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

_BYTE *sub_21BAB10C8(char *a1)
{
  char v2;

  v2 = *a1;
  return BlendTreeAnimation.repeatMode.setter(&v2);
}

uint64_t sub_21BAB10FC()
{
  return 16;
}

__n128 sub_21BAB1108(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for BlendWeight(uint64_t a1)
{
  return outlined consume of BlendWeight(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for BlendWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of BlendWeight(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for BlendWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of BlendWeight(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BlendWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of BlendWeight(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendWeight(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendWeight(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for BlendWeight(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for BlendWeight(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BlendWeight()
{
  return &type metadata for BlendWeight;
}

uint64_t dispatch thunk of BlendTreeNode.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BlendTreeNode.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BlendTreeNode.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BlendTreeNode.weight.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of BlendTreeNode.weight.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of BlendTreeNode.weight.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t destroy for BlendTreeSourceNode(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return outlined consume of BlendWeight(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for BlendTreeSourceNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain();
  outlined copy of BlendWeight(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = v11;
  return a1;
}

uint64_t assignWithCopy for BlendTreeSourceNode(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 8);
  v9 = *((_QWORD *)a2 + 9);
  v10 = *((_BYTE *)a2 + 80);
  outlined copy of BlendWeight(v7, v8, v9, v10);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  v14 = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = v10;
  outlined consume of BlendWeight(v11, v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for BlendTreeSourceNode(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_BYTE *)(a2 + 80);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = v5;
  v10 = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = v6;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendTreeSourceNode(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendTreeSourceNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BlendTreeSourceNode()
{
  return &type metadata for BlendTreeSourceNode;
}

uint64_t destroy for BlendTreeBlendNode(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of BlendWeight(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for BlendTreeBlendNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of BlendWeight(v4, v5, v6, v7);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  return a1;
}

uint64_t assignWithCopy for BlendTreeBlendNode(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *((_BYTE *)v2 + 8);
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[4];
  v5 = v2[5];
  v6 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  outlined copy of BlendWeight(v4, v5, v6, (char)v2);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v10 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = (_BYTE)v2;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for BlendTreeBlendNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v5;
  v10 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v6;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendTreeBlendNode(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendTreeBlendNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BlendTreeBlendNode()
{
  return &type metadata for BlendTreeBlendNode;
}

uint64_t destroy for BlendTreeInvalidNode(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return outlined consume of BlendWeight(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for BlendTreeInvalidNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  outlined copy of BlendWeight(v4, v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for BlendTreeInvalidNode(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  outlined copy of BlendWeight(v4, v5, v6, (char)v2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v10 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for BlendTreeInvalidNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  v10 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendTreeInvalidNode(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendTreeInvalidNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BlendTreeInvalidNode()
{
  return &type metadata for BlendTreeInvalidNode;
}

uint64_t destroy for BlendTreeAnimation(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v3);
  result = swift_release();
  if (*(_QWORD *)(a1 + 232))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 208);
  return result;
}

uint64_t initializeWithCopy for BlendTreeAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    outlined copy of BindTarget(v6, v7, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v10 = *(unsigned __int8 *)(a2 + 184);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 168);
    v12 = *(_QWORD *)(a2 + 176);
    outlined copy of BindTarget(v11, v12, v10);
    *(_QWORD *)(a1 + 168) = v11;
    *(_QWORD *)(a1 + 176) = v12;
    *(_BYTE *)(a1 + 184) = v10;
  }
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v13 = *(_QWORD *)(a2 + 232);
  swift_retain();
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v13;
    *(_QWORD *)(a1 + 240) = v14;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8))(a1 + 208, a2 + 208, v13);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v15;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  }
  return a1;
}

uint64_t assignWithCopy for BlendTreeAnimation(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 16);
  v5 = (__int128 *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      v15 = *v5;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *v4 = v15;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      outlined copy of BindTarget(v12, v13, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_BYTE *)(a1 + 32) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
    v14 = *(_BYTE *)(a2 + 32);
    *v4 = *v5;
    *(_BYTE *)(a1 + 32) = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of BindTarget(v7, v8, *(_BYTE *)(a2 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v11 = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v6;
    outlined consume of BindTarget(v9, v10, v11);
  }
  v16 = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v16;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v17 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v17;
  v18 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v18;
  v19 = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v19;
  v20 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v20;
  v21 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (__int128 *)(a1 + 168);
  v23 = (__int128 *)(a2 + 168);
  v24 = *(unsigned __int8 *)(a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v24 == 255)
    {
      v33 = *v23;
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *v22 = v33;
    }
    else
    {
      v30 = *(_QWORD *)(a2 + 168);
      v31 = *(_QWORD *)(a2 + 176);
      outlined copy of BindTarget(v30, v31, *(_BYTE *)(a2 + 184));
      *(_QWORD *)(a1 + 168) = v30;
      *(_QWORD *)(a1 + 176) = v31;
      *(_BYTE *)(a1 + 184) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    v32 = *(_BYTE *)(a2 + 184);
    *v22 = *v23;
    *(_BYTE *)(a1 + 184) = v32;
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 176);
    outlined copy of BindTarget(v25, v26, *(_BYTE *)(a2 + 184));
    v27 = *(_QWORD *)(a1 + 168);
    v28 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = v25;
    *(_QWORD *)(a1 + 176) = v26;
    v29 = *(_BYTE *)(a1 + 184);
    *(_BYTE *)(a1 + 184) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  v34 = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v34;
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_retain();
  swift_release();
  v35 = *(_QWORD *)(a2 + 232);
  if (!*(_QWORD *)(a1 + 232))
  {
    if (v35)
    {
      *(_QWORD *)(a1 + 232) = v35;
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      (**(void (***)(uint64_t, uint64_t))(v35 - 8))(a1 + 208, a2 + 208);
      return a1;
    }
LABEL_21:
    v36 = *(_OWORD *)(a2 + 208);
    v37 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 208) = v36;
    *(_OWORD *)(a1 + 224) = v37;
    return a1;
  }
  if (!v35)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 208);
    goto LABEL_21;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  return a1;
}

__n128 __swift_memcpy248_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for BlendTreeAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 32);
    if (v7 != 255)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v5;
      *(_BYTE *)(a1 + 32) = v7;
      outlined consume of BindTarget(v8, v9, v6);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
LABEL_6:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  v12 = (_OWORD *)(a2 + 168);
  v13 = *(unsigned __int8 *)(a1 + 184);
  if (v13 != 255)
  {
    v14 = *(unsigned __int8 *)(a2 + 184);
    if (v14 != 255)
    {
      v15 = *(_QWORD *)(a1 + 168);
      v16 = *(_QWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *v12;
      *(_BYTE *)(a1 + 184) = v14;
      outlined consume of BindTarget(v15, v16, v13);
      goto LABEL_11;
    }
    outlined destroy of BindTarget(a1 + 168);
  }
  *(_OWORD *)(a1 + 168) = *v12;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
LABEL_11:
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_release();
  if (*(_QWORD *)(a1 + 232))
    __swift_destroy_boxed_opaque_existential_1(a1 + 208);
  v17 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v17;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendTreeAnimation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 248))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendTreeAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 248) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 248) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for BlendTreeAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BlendTreeAnimation);
}

uint64_t sub_21BAB2378()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  outlined consume of BlendWeight(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  return swift_deallocObject();
}

void one-time initialization function for basicFlipAnimationData()
{
  static EmphasizeAnimations.basicFlipAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicFlipAnimationData;
}

void one-time initialization function for playfulFlipAnimationData()
{
  static EmphasizeAnimations.playfulFlipAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulFlipAnimationData;
}

void one-time initialization function for wildFlipAnimationData()
{
  static EmphasizeAnimations.wildFlipAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildFlipAnimationData;
}

_QWORD *specialized static EmphasizeAnimations.createEmphasizeFlipAnimation(style:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (!*a1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 63, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for basicFlipAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 125, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for playfulFlipAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 183, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for wildFlipAnimationData != -1)
LABEL_9:
    swift_once();
LABEL_8:
  v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t InputManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t InputManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InputManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for InputManager()
{
  return swift_lookUpClassMethod();
}

id one-time initialization function for shared()
{
  uint64_t v0;
  id result;

  type metadata accessor for __RKSceneAssetLookupTable();
  v0 = swift_allocObject();
  result = objc_msgSend((id)objc_opt_self(), sel_strongToWeakObjectsMapTable);
  *(_QWORD *)(v0 + 16) = result;
  static __RKSceneAssetLookupTable.shared = (_UNKNOWN *)v0;
  return result;
}

uint64_t static __RKSceneAssetLookupTable.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

id __RKSceneAssetLookupTable.reSceneAsset(for:)()
{
  uint64_t v0;
  id v1;
  Class isa;
  id v3;

  v1 = *(id *)(v0 + 16);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v3 = objc_msgSend(v1, sel_objectForKey_, isa);

  return v3;
}

void __RKSceneAssetLookupTable.registerRESceneAsset(_:for:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  Class isa;

  v3 = *(id *)(v1 + 16);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_setObject_forKey_, a1, isa);

}

Swift::Void __swiftcall __RKSceneAssetLookupTable.removeAllRESceneAssets()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), sel_removeAllObjects);
}

uint64_t __RKSceneAssetLookupTable.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKSceneAssetLookupTable.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKSceneAssetLookupTable()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKSceneAssetLookupTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKSceneAssetLookupTable.reSceneAsset(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of __RKSceneAssetLookupTable.registerRESceneAsset(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of __RKSceneAssetLookupTable.removeAllRESceneAssets()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t QueryResult.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  static Array._allocateUninitialized(_:)();
  v2 = type metadata accessor for Array();
  MEMORY[0x220772E3C](MEMORY[0x24BEE12C8], v2);
  result = AnySequence.init<A>(_:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t QueryResult.init(_:count:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3 & 1;
  return result;
}

uint64_t QueryResult.Iterator.next()()
{
  return AnyIterator.next()();
}

uint64_t QueryResult.makeIterator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  swift_retain();
  v2 = dispatch thunk of _AnySequenceBox._makeIterator()();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance QueryResult<A>@<X0>(uint64_t *a1@<X8>)
{
  QueryResult.makeIterator()(a1);
  return swift_release();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance QueryResult<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  swift_release();
  return v3;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in QueryResult<A>()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t initializeBufferWithCopyOfBuffer for QueryResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for QueryResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for QueryResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for QueryResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryResult);
}

uint64_t type metadata accessor for QueryResult.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryResult.Iterator);
}

uint64_t __RKVisibilityShowRiseAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityShowRiseAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityShowRiseAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 109, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 94, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 109, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

float SIMD3<>._xy.setter(__n128 a1)
{
  __n128 *v1;

  a1.n128_u64[1] = v1->n128_u32[2];
  *v1 = a1;
  return a1.n128_f32[0];
}

float (*SIMD3<>._xy.modify(_QWORD *a1))(__int128 *a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return SIMD3<>._xy.modify;
}

float SIMD3<>._xy.modify(__int128 *a1)
{
  uint64_t v1;
  __int128 v2;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *a1;
  *((_QWORD *)&v2 + 1) = *(unsigned int *)(v1 + 8);
  *(_OWORD *)v1 = v2;
  return *(float *)&v2;
}

__n128 SIMD4<>._xyz.setter(__n128 result)
{
  __n128 *v1;

  result.n128_u32[3] = v1->n128_u32[3];
  *v1 = result;
  return result;
}

__n128 (*SIMD4<>._xyz.modify(_QWORD *a1))(void **a1)
{
  __int128 *v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v4 = *v1;
  HIDWORD(v4) = 0;
  v3[2] = v1;
  *(_OWORD *)v3 = v4;
  return SIMD4<>._xyz.modify;
}

__n128 SIMD4<>._xyz.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v1 = *a1;
  v2 = v1[2];
  v3 = *(_OWORD *)v1;
  HIDWORD(v3) = *(_DWORD *)(v2 + 12);
  *(_OWORD *)v2 = v3;
  free(v1);
  return result;
}

__n128 sub_21BAB2DA4@<Q0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = a1->n128_u64[0];
  return result;
}

float sub_21BAB2DB0(_QWORD *a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)&v2 = *a1;
  *((_QWORD *)&v2 + 1) = *(unsigned int *)(a2 + 8);
  *(_OWORD *)a2 = v2;
  return *(float *)&v2;
}

uint64_t sub_21BAB2DC8()
{
  return 0;
}

__n128 sub_21BAB2DD8@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

__n128 sub_21BAB2DE8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  result.n128_u32[3] = a2->n128_u32[3];
  *a2 = result;
  return result;
}

uint64_t sub_21BAB2DFC()
{
  return 0;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static ForceEffectLogger.logger);
  __swift_project_value_buffer(v0, (uint64_t)static ForceEffectLogger.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static AnimationLogger.logger);
  __swift_project_value_buffer(v0, (uint64_t)static AnimationLogger.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static BlendShapeLogger.logger);
  __swift_project_value_buffer(v0, (uint64_t)static BlendShapeLogger.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

uint64_t PhotogrammetrySample.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

{
  return MEMORY[0x24BE1EA08]();
}

id PhotogrammetrySample.image.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

uint64_t PhotogrammetrySample.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x24BE1EAA0]();
}

uint64_t PhotogrammetrySample.metadata.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return PhotogrammetrySample.metadata.didset();
}

uint64_t PhotogrammetrySample.metadata.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v16;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + 72;
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)&v19 + 1))
  {
    v5 = type metadata accessor for PhotogrammetrySample();
    swift_bridgeObjectRetain();
    v6 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))((char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v6 ^ 1u, 1, v5);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v5 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))((char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v5);
  }
  type metadata accessor for PhotogrammetrySample();
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8((char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v5))
  {
    v9 = swift_bridgeObjectRelease();
    v17[1] = v17;
    MEMORY[0x24BDAC7A8](v9);
    v10 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
    v11 = outlined init with copy of (Int, URL)((uint64_t)v17 - v10, (uint64_t)v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
    MEMORY[0x24BDAC7A8](v11);
    outlined init with copy of (Int, URL)((uint64_t)v17 - v10, (uint64_t)v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v8((char *)v17 - v10, 1, v5) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
      v18 = 0u;
      v19 = 0u;
    }
    else
    {
      *((_QWORD *)&v19 + 1) = v5;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 32))(boxed_opaque_existential_1, (char *)v17 - v10, v5);
      outlined destroy of BodyTrackingComponent?((uint64_t)v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v18, v4);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
  }
  else
  {
    v12 = PhotogrammetrySample.metadata.setter();
    MEMORY[0x24BDAC7A8](v12);
    v13 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of (Int, URL)((uint64_t)v3, (uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v8(v13, 1, v5) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySample?);
      v18 = 0u;
      v19 = 0u;
    }
    else
    {
      *((_QWORD *)&v19 + 1) = v5;
      v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 32))(v16, v13, v5);
      outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    return outlined assign with take of Any?((uint64_t)&v18, v4);
  }
}

uint64_t (*PhotogrammetrySample.metadata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return PhotogrammetrySample.metadata.modify;
}

uint64_t PhotogrammetrySample.metadata.modify(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return PhotogrammetrySample.metadata.didset();
  return result;
}

void *PhotogrammetrySample.depthDataMap.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void key path setter for PhotogrammetrySample.depthDataMap : PhotogrammetrySample(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 24);
  v5 = *a1;

  *(_QWORD *)(a2 + 24) = v3;
  PhotogrammetrySample.depthDataMap.didset();

}

void PhotogrammetrySample.depthDataMap.setter(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = *(void **)(v1 + 24);
  v4 = a1;

  *(_QWORD *)(v1 + 24) = a1;
  PhotogrammetrySample.depthDataMap.didset();

}

void PhotogrammetrySample.depthDataMap.didset()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v1 = *(void **)(v0 + 24);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)&v20 + 1))
  {
    v4 = type metadata accessor for PhotogrammetrySample();
    v5 = v1;
    v6 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 ^ 1u, 1, v4);
  }
  else
  {
    v7 = v1;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v4 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v4);
  }
  type metadata accessor for PhotogrammetrySample();
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
  if ((_DWORD)v10)
  {
    v17 = (uint64_t)&v17;
    v18 = v0 + 72;
    MEMORY[0x24BDAC7A8](v10);
    v11 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
    v12 = outlined init with copy of (Int, URL)((uint64_t)&v17 - v11, (uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    MEMORY[0x24BDAC7A8](v12);
    outlined init with copy of (Int, URL)((uint64_t)&v17 - v11, (uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v9((char *)&v17 - v11, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
      v19 = 0u;
      v20 = 0u;
    }
    else
    {
      *((_QWORD *)&v20 + 1) = v4;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(boxed_opaque_existential_1, (char *)&v17 - v11, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v19, v18);

    outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
  }
  else
  {
    v13 = v1;
    v14 = PhotogrammetrySample.depthDataMap.setter();
    MEMORY[0x24BDAC7A8](v14);
    outlined init with copy of (Int, URL)((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v9((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
      v19 = 0u;
      v20 = 0u;
    }
    else
    {
      *((_QWORD *)&v20 + 1) = v4;
      v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(v16, (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v19, v0 + 72);

  }
}

void (*PhotogrammetrySample.depthDataMap.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return PhotogrammetrySample.depthDataMap.modify;
}

void PhotogrammetrySample.depthDataMap.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    PhotogrammetrySample.depthDataMap.didset();
}

uint64_t PhotogrammetrySample.gravity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

{
  return MEMORY[0x24BE1EA90]();
}

uint64_t PhotogrammetrySample.gravity.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = a3;
  *(_BYTE *)(v4 + 56) = a4 & 1;
  return PhotogrammetrySample.gravity.didset();
}

uint64_t PhotogrammetrySample.gravity.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v15;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)&v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)&v18 + 1))
  {
    v4 = type metadata accessor for PhotogrammetrySample();
    v5 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v5 ^ 1u, 1, v4);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v4 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v4);
  }
  type metadata accessor for PhotogrammetrySample();
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7((char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
  if ((_DWORD)v8)
  {
    v16[1] = v16;
    MEMORY[0x24BDAC7A8](v8);
    v9 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
    v10 = outlined init with copy of (Int, URL)((uint64_t)v16 - v9, (uint64_t)v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
    MEMORY[0x24BDAC7A8](v10);
    outlined init with copy of (Int, URL)((uint64_t)v16 - v9, (uint64_t)v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v7((char *)v16 - v9, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
      v17 = 0u;
      v18 = 0u;
    }
    else
    {
      *((_QWORD *)&v18 + 1) = v4;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
      (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(boxed_opaque_existential_1, (char *)v16 - v9, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v17, v0 + 72);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
  }
  else
  {
    v11 = PhotogrammetrySample.gravity.setter();
    MEMORY[0x24BDAC7A8](v11);
    v12 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of (Int, URL)((uint64_t)v3, (uint64_t)v12, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v7(v12, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for PhotogrammetrySample?);
      v17 = 0u;
      v18 = 0u;
    }
    else
    {
      *((_QWORD *)&v18 + 1) = v4;
      v15 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
      (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(v15, v12, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    return outlined assign with take of Any?((uint64_t)&v17, v0 + 72);
  }
}

uint64_t (*PhotogrammetrySample.gravity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return PhotogrammetrySample.gravity.modify;
}

uint64_t PhotogrammetrySample.gravity.modify(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return PhotogrammetrySample.gravity.didset();
  return result;
}

void *PhotogrammetrySample.objectMask.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 64);
  v2 = v1;
  return v1;
}

void key path setter for PhotogrammetrySample.objectMask : PhotogrammetrySample(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *(void **)(a2 + 64);
  v5 = *a1;

  *(_QWORD *)(a2 + 64) = v3;
  PhotogrammetrySample.objectMask.didset();

}

void PhotogrammetrySample.objectMask.setter(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = *(void **)(v1 + 64);
  v4 = a1;

  *(_QWORD *)(v1 + 64) = a1;
  PhotogrammetrySample.objectMask.didset();

}

void PhotogrammetrySample.objectMask.didset()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v1 = *(void **)(v0 + 64);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)&v20 + 1))
  {
    v4 = type metadata accessor for PhotogrammetrySample();
    v5 = v1;
    v6 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 ^ 1u, 1, v4);
  }
  else
  {
    v7 = v1;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v4 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v4);
  }
  type metadata accessor for PhotogrammetrySample();
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
  if ((_DWORD)v10)
  {
    v17 = (uint64_t)&v17;
    v18 = v0 + 72;
    MEMORY[0x24BDAC7A8](v10);
    v11 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
    v12 = outlined init with copy of (Int, URL)((uint64_t)&v17 - v11, (uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    MEMORY[0x24BDAC7A8](v12);
    outlined init with copy of (Int, URL)((uint64_t)&v17 - v11, (uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v9((char *)&v17 - v11, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
      v19 = 0u;
      v20 = 0u;
    }
    else
    {
      *((_QWORD *)&v20 + 1) = v4;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(boxed_opaque_existential_1, (char *)&v17 - v11, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v19, v18);

    outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
  }
  else
  {
    v13 = v1;
    v14 = PhotogrammetrySample.objectMask.setter();
    MEMORY[0x24BDAC7A8](v14);
    outlined init with copy of (Int, URL)((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v9((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
      v19 = 0u;
      v20 = 0u;
    }
    else
    {
      *((_QWORD *)&v20 + 1) = v4;
      v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(v16, (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v19, v0 + 72);

  }
}

void (*PhotogrammetrySample.objectMask.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return PhotogrammetrySample.objectMask.modify;
}

void PhotogrammetrySample.objectMask.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    PhotogrammetrySample.objectMask.didset();
}

double PhotogrammetrySample.init(id:image:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  double result;

  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = v6;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_BYTE *)(a3 + 56) = 1;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)a3 = a1;
  return result;
}

uint64_t one-time initialization function for idManager()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;

  type metadata accessor for UniqueIDManager();
  v0 = (_QWORD *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  result = swift_allocObject();
  v2 = MEMORY[0x24BEE4B08];
  *(_DWORD *)(result + 16) = 0;
  v0[2] = result;
  v0[3] = v2;
  v0[4] = 0;
  static PhotogrammetrySample.idManager = (uint64_t)v0;
  return result;
}

uint64_t PhotogrammetrySample.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  char v17;
  Swift::String v18;
  Swift::String v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  char v33;
  Swift::String v34;
  _BYTE v36[144];
  uint64_t v37;
  char v38;
  __int128 v39;
  _BYTE v40[80];
  __int128 v41;
  uint64_t v42;
  char v43;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = &v36[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)&v41 = 0;
  *((_QWORD *)&v41 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(172);
  v39 = v41;
  v7._countAndFlagsBits = 540697705;
  v7._object = (void *)0xE400000000000000;
  String.append(_:)(v7);
  *(_QWORD *)&v41 = *(_QWORD *)v0;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3A6567616D690A2CLL;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  *(_QWORD *)&v41 = *(_QWORD *)(v0 + 8);
  type metadata accessor for CVBufferRef(0);
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0x61646174656D0A2CLL;
  v10._object = (void *)0xEC000000203A6174;
  String.append(_:)(v10);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._object = (void *)0x800000021BE86070;
  v12._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v12);
  *(_QWORD *)&v41 = *(_QWORD *)(v0 + 24);
  v13 = (id)v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVBufferRef?);
  v14._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x7469766172670A2CLL;
  v15._object = (void *)0xEB00000000203A79;
  String.append(_:)(v15);
  v16 = *(_QWORD *)(v0 + 48);
  v17 = *(_BYTE *)(v0 + 56);
  v41 = *(_OWORD *)(v0 + 32);
  v42 = v16;
  v43 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMAcceleration?);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x7463656A626F0A2CLL;
  v19._object = (void *)0xEE00203A6B73614DLL;
  String.append(_:)(v19);
  *(_QWORD *)&v41 = *(_QWORD *)(v0 + 64);
  v20 = (id)v41;
  v21._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x657275747061630ALL;
  v22._object = (void *)0xEE00203A656D6954;
  String.append(_:)(v22);
  PhotogrammetrySample.captureTime.getter((uint64_t)v6);
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0x800000021BE86090;
  String.append(_:)(v24);
  *(_QWORD *)&v41 = PhotogrammetrySample.depthConfidenceMap.getter();
  v25._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x6E69646E756F620ALL;
  v26._object = (void *)0xEE00203A786F4267;
  String.append(_:)(v26);
  PhotogrammetrySample.boundingBox.getter((uint64_t)v40);
  outlined init with take of Transform?((uint64_t)v40, (uint64_t)&v41, &demangling cache variable for type metadata for simd_float4x4?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x3A6172656D61630ALL;
  v28._object = (void *)0xE900000000000020;
  String.append(_:)(v28);
  PhotogrammetrySample.camera.getter((uint64_t)&v37);
  outlined init with take of Transform?((uint64_t)&v37, (uint64_t)&v41, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  outlined init with take of Transform?((uint64_t)&v41, (uint64_t)v36, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  v29._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x6E6F69737365730ALL;
  v30._object = (void *)0xEC000000203A4449;
  String.append(_:)(v30);
  PhotogrammetrySample.sessionID.getter((uint64_t)v3);
  v31._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0x746E656D6765730ALL;
  v32._object = (void *)0xEC000000203A4449;
  String.append(_:)(v32);
  v37 = PhotogrammetrySample.scanPassID.getter();
  v38 = v33 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  v34._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t PhotogrammetrySample.captureTime.getter@<X0>(uint64_t a1@<X8>)
{
  return PhotogrammetrySample.captureTime.getter(MEMORY[0x24BE1E9C8], (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t PhotogrammetrySample.depthConfidenceMap.getter()
{
  return PhotogrammetrySample.depthConfidenceMap.getter(MEMORY[0x24BE1E9F0]);
}

void PhotogrammetrySample.boundingBox.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[24];
  uint64_t v43;

  v3 = type metadata accessor for PhotogrammetrySample();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(v1 + 72, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v43)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    goto LABEL_7;
  }
  v10 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, v10 ^ 1u, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
LABEL_7:
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (one-time initialization token for logger != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)logger);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_21B9AA000, v22, v23, "No wrapped CoreOC.PhotogrammetrySample!", v24, 2u);
      MEMORY[0x220772F44](v24, -1, -1);
    }

    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample.Object?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  PhotogrammetrySample.object.getter();
  v14 = type metadata accessor for PhotogrammetrySample.Object();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    PhotogrammetrySample.Object.boundingBox.getter();
    v40 = v31;
    v41 = v30;
    v38 = v33;
    v39 = v32;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v29 = v38;
    v28 = v39;
    v27 = v40;
    v25 = v41;
    v26 = 0;
    goto LABEL_13;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySample.Object?);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample.Scene?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  PhotogrammetrySample.scene.getter();
  v19 = type metadata accessor for PhotogrammetrySample.Scene();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
  {
    PhotogrammetrySample.Scene.boundingBox.getter();
    v40 = v35;
    v41 = v34;
    v38 = v37;
    v39 = v36;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
    v29 = v38;
    v28 = v39;
    v27 = v40;
    v25 = v41;
    v26 = 0;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for PhotogrammetrySample.Scene?);
LABEL_12:
  v25 = 0uLL;
  v26 = 1;
  v27 = 0uLL;
  v28 = 0uLL;
  v29 = 0uLL;
LABEL_13:
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v28;
  *(_OWORD *)(a1 + 48) = v29;
  *(_BYTE *)(a1 + 64) = v26;
}

uint64_t PhotogrammetrySample.camera.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  char *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _DWORD v36[4];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v3 = type metadata accessor for PhotogrammetrySample.Camera();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(v1 + 72, (uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v37 + 1))
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v27 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 1, 1, v27);
    goto LABEL_6;
  }
  v13 = type metadata accessor for PhotogrammetrySample();
  v14 = swift_dynamicCast();
  v15 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, v14 ^ 1u, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v13) == 1)
  {
LABEL_6:
    outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for PhotogrammetrySample?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    goto LABEL_7;
  }
  PhotogrammetrySample.camera.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
LABEL_7:
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
    _s17RealityFoundation20PhotogrammetrySampleV6CameraVSgWOi0_((uint64_t)v36);
    return outlined init with take of Transform?((uint64_t)v36, a1, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  }
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v3);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v4 + 16))(v18, v18, v3, v17);
  v19 = PhotogrammetrySample.Camera.id.getter();
  PhotogrammetrySample.Camera.intrinsics.getter();
  v35 = v45;
  v34 = v46;
  v33 = v47;
  PhotogrammetrySample.Camera.transform.getter();
  v32 = v20;
  v31 = v21;
  v30 = v22;
  v29 = v23;
  v24 = PhotogrammetrySample.Camera.calibrationData.getter();
  v25 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25(v18, v3);
  v25(v6, v3);
  v36[0] = v19;
  v37 = v35;
  v38 = v34;
  v39 = v33;
  v40 = v32;
  v41 = v31;
  v42 = v30;
  v43 = v29;
  v44 = v24;
  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v36, v26);
  return outlined init with take of Transform?((uint64_t)v36, a1, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
}

uint64_t PhotogrammetrySample.sessionID.getter@<X0>(uint64_t a1@<X8>)
{
  return PhotogrammetrySample.captureTime.getter(MEMORY[0x24BE1E9F8], (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58], a1);
}

uint64_t PhotogrammetrySample.captureTime.getter@<X0>(void (*a1)(void)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of (Int, URL)(v3 + 72, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v17)
  {
    v10 = type metadata accessor for PhotogrammetrySample();
    v11 = swift_dynamicCast();
    v12 = *(_QWORD *)(v10 - 8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, v11 ^ 1u, 1, v10);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10) != 1)
    {
      a1();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v9, v10);
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v14 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
  v15 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a3, 1, 1, v15);
}

uint64_t PhotogrammetrySample.scanPassID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v11)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v8 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
    goto LABEL_5;
  }
  v4 = type metadata accessor for PhotogrammetrySample();
  v5 = swift_dynamicCast();
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v3, v5 ^ 1u, 1, v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v4) == 1)
  {
LABEL_5:
    outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
    return 0;
  }
  v7 = PhotogrammetrySample.staticSegmentID.getter();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v3, v4);
  return v7;
}

__n128 PhotogrammetrySample.init(contentsOf:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t *v24;
  uint64_t v25[4];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  _BYTE v30[40];
  uint64_t v31;

  *(_QWORD *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 1;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  if (one-time initialization token for idManager != -1)
    swift_once();
  UniqueIDManager.generateNextUnassignedID()();
  v5 = type metadata accessor for PhotogrammetrySample();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ObjectCaptureImageFolderReader();
  static ObjectCaptureImageFolderReader.loadPhotogrammetrySample(id:url:)();
  if (v2)
  {
    v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    swift_bridgeObjectRelease();

    outlined destroy of BodyTrackingComponent?(a2 + 72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  else
  {
    v11 = PhotogrammetrySample.id.getter();
    v31 = a2 + 72;
    v12 = v11;
    v13 = PhotogrammetrySample.image.getter();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v24 = &v22;
    memset(&v30[8], 0, 32);
    v23 = &v30[8];
    *(_QWORD *)&v26 = v12;
    *((_QWORD *)&v26 + 1) = v13;
    v14 = PhotogrammetrySample.metadata.getter();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v27 = v14;
    *((_QWORD *)&v27 + 1) = PhotogrammetrySample.depthDataMap.getter();
    *(_QWORD *)&v28 = PhotogrammetrySample.gravity.getter();
    *((_QWORD *)&v28 + 1) = v15;
    v29.n128_u64[0] = v16;
    v29.n128_u8[8] = v17 & 1;
    *(_QWORD *)v30 = PhotogrammetrySample.objectMask.getter();
    v25[3] = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
    (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(boxed_opaque_existential_1, v8, v5);
    outlined assign with take of Any?((uint64_t)v25, (uint64_t)v23);
    v19 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    swift_bridgeObjectRelease();

    outlined destroy of BodyTrackingComponent?(v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v20 = *(_OWORD *)&v30[16];
    *(_OWORD *)(a2 + 64) = *(_OWORD *)v30;
    *(_OWORD *)(a2 + 80) = v20;
    *(_QWORD *)(a2 + 96) = *(_QWORD *)&v30[32];
    v21 = v27;
    *(_OWORD *)a2 = v26;
    *(_OWORD *)(a2 + 16) = v21;
    result = v29;
    *(_OWORD *)(a2 + 32) = v28;
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t PhotogrammetrySample.init(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return swift_task_switch();
}

uint64_t PhotogrammetrySample.init(contentsOf:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_BYTE *)(v1 + 56) = 1;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 96) = 0;
  if (one-time initialization token for idManager != -1)
    swift_once();
  UniqueIDManager.generateNextUnassignedID()();
  v2 = type metadata accessor for PhotogrammetrySample();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = swift_task_alloc();
  type metadata accessor for ObjectCaptureImageFolderReader();
  static ObjectCaptureImageFolderReader.loadPhotogrammetrySample(id:url:)();
  v20 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 152);
  v19 = PhotogrammetrySample.id.getter();
  v6 = PhotogrammetrySample.image.getter();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_QWORD *)(v0 + 16) = v19;
  *(_QWORD *)(v0 + 24) = v6;
  v7 = PhotogrammetrySample.metadata.getter();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 32) = v7;
  *(_QWORD *)(v0 + 40) = PhotogrammetrySample.depthDataMap.getter();
  *(_QWORD *)(v0 + 48) = PhotogrammetrySample.gravity.getter();
  *(_QWORD *)(v0 + 56) = v8;
  *(_QWORD *)(v0 + 64) = v9;
  *(_BYTE *)(v0 + 72) = v10 & 1;
  *(_QWORD *)(v0 + 80) = PhotogrammetrySample.objectMask.getter();
  *(_QWORD *)(v0 + 144) = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 120));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v4, v2);
  outlined assign with take of Any?(v0 + 120, v0 + 88);
  swift_task_dealloc();
  v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v20, v12);
  swift_bridgeObjectRelease();

  outlined destroy of BodyTrackingComponent?(v1 + 72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  v14 = *(_OWORD *)(v0 + 32);
  v13 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v5 + 16) = v14;
  *(_OWORD *)(v5 + 32) = v13;
  v16 = *(_OWORD *)(v0 + 80);
  v15 = *(_OWORD *)(v0 + 96);
  v17 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v5 + 96) = *(_QWORD *)(v0 + 112);
  *(_OWORD *)(v5 + 64) = v16;
  *(_OWORD *)(v5 + 80) = v15;
  *(_OWORD *)(v5 + 48) = v17;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PhotogrammetrySample.pointCloudData.getter()
{
  return PhotogrammetrySample.depthConfidenceMap.getter(MEMORY[0x24BE1E9E0]);
}

uint64_t PhotogrammetrySample.depthConfidenceMap.getter(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of (Int, URL)(v1 + 72, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v13)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v10 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
    goto LABEL_5;
  }
  v6 = type metadata accessor for PhotogrammetrySample();
  v7 = swift_dynamicCast();
  v8 = *(_QWORD *)(v6 - 8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, v7 ^ 1u, 1, v6);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
LABEL_5:
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for PhotogrammetrySample?);
    return 0;
  }
  v9 = a1();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v5, v6);
  return v9;
}

uint64_t PhotogrammetrySample.Camera.id.getter()
{
  unsigned int *v0;

  return *v0;
}

{
  return MEMORY[0x24BE1EA48]();
}

uint64_t PhotogrammetrySample.Camera.id.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PhotogrammetrySample.Camera.id.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhotogrammetrySample.Camera.intrinsics.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 PhotogrammetrySample.Camera.intrinsics.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 48) = result;
  return result;
}

uint64_t (*PhotogrammetrySample.Camera.intrinsics.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhotogrammetrySample.Camera.transform.getter()
{
  __n128 *v0;

  return v0[4];
}

void PhotogrammetrySample.Camera.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 *v4;

  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*PhotogrammetrySample.Camera.transform.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void *PhotogrammetrySample.Camera.calibrationData.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 128);
  v2 = v1;
  return v1;
}

void PhotogrammetrySample.Camera.calibrationData.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
}

uint64_t (*PhotogrammetrySample.Camera.calibrationData.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double _s17RealityFoundation20PhotogrammetrySampleV6CameraVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 128) = 1;
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PhotogrammetrySample()
{
  return MEMORY[0x24BEE1778];
}

uint64_t sub_21BAB5604@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BAB5610(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 16) = v3;
  return PhotogrammetrySample.metadata.didset();
}

id sub_21BAB5654@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  *a2 = v2;
  return v2;
}

__n128 sub_21BAB5664@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[3].n128_u64[0];
  v3 = a1[3].n128_u8[8];
  result = a1[2];
  *a2 = result;
  a2[1].n128_u64[0] = v2;
  a2[1].n128_u8[8] = v3;
  return result;
}

uint64_t sub_21BAB5680(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 48) = v2;
  *(_BYTE *)(a2 + 56) = v3;
  return PhotogrammetrySample.gravity.didset();
}

id sub_21BAB56B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  *a2 = v2;
  return v2;
}

void destroy for PhotogrammetrySample(uint64_t a1)
{

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 96))
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
}

uint64_t initializeWithCopy for PhotogrammetrySample(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  __int128 v12;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  v5 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = (_OWORD *)(a1 + 72);
  v7 = (_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 96);
  v9 = v3;
  swift_bridgeObjectRetain();
  v10 = v4;
  v11 = v5;
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v8 - 8))(v6, v7, v8);
  }
  else
  {
    v12 = v7[1];
    *v6 = *v7;
    v6[1] = v12;
  }
  return a1;
}

uint64_t assignWithCopy for PhotogrammetrySample(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  __int128 v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 24);
  v8 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = v8;

  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 32) = v10;
  v11 = *(void **)(a1 + 64);
  v12 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = v12;

  v14 = *(_QWORD *)(a2 + 96);
  if (!*(_QWORD *)(a1 + 96))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 96) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 72, a2 + 72);
      return a1;
    }
LABEL_7:
    v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v15;
    return a1;
  }
  if (!v14)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for PhotogrammetrySample(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  v7 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  if (*(_QWORD *)(a1 + 96))
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySample(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySample(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySample()
{
  return &type metadata for PhotogrammetrySample;
}

void destroy for PhotogrammetrySample.Camera(uint64_t a1)
{

}

uint64_t initializeWithCopy for PhotogrammetrySample.Camera(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  id v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v6 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v6;
  v7 = v6;
  return a1;
}

uint64_t assignWithCopy for PhotogrammetrySample.Camera(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v3 = *(void **)(a1 + 128);
  v4 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v4;
  v5 = v4;

  return a1;
}

__n128 __swift_memcpy136_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for PhotogrammetrySample.Camera(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  void *v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v6 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  return a1;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySample.Camera(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySample.Camera(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_QWORD *)(result + 128) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySample.Camera()
{
  return &type metadata for PhotogrammetrySample.Camera;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_21BAB5DE8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_21BAB5F78()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_21BAB6044()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_21BAB6114()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_21BAB6218()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_21BAB62E0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_21BAB6428()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__REAnchoringType::Name_optional __swiftcall __REAnchoringType.Name.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__REAnchoringType::Name_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __REAnchoringType.Name.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static __REAnchoringType.Name.allCases.getter()
{
  return &outlined read-only object #0 of static __REAnchoringType.Name.allCases.getter;
}

uint64_t __REAnchoringType.Name.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BAB6574 + 4 * byte_21BE5CBD6[*v0]))(0x65636166727573, 0xE700000000000000);
}

uint64_t sub_21BAB6574()
{
  return 0x6567616D69;
}

uint64_t sub_21BAB6588()
{
  return 1701011814;
}

uint64_t sub_21BAB6598()
{
  return 0x7463656A626FLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance __REAnchoringType.Name(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance __REAnchoringType.Name()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_21BAB6604()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __REAnchoringType.Name()
{
  __asm { BR              X10 }
}

uint64_t sub_21BAB66A0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance __REAnchoringType.Name()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_21BAB6734()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__REAnchoringType::Name_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __REAnchoringType.Name(Swift::String *a1)
{
  return __REAnchoringType.Name.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __REAnchoringType.Name()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21BAB67D0 + 4 * byte_21BE5CBE6[*v0]))();
}

void sub_21BAB67D0(_QWORD *a1@<X8>)
{
  *a1 = 0x6567616D69;
  a1[1] = 0xE500000000000000;
}

void sub_21BAB67E8(_QWORD *a1@<X8>)
{
  *a1 = 1701011814;
  a1[1] = 0xE400000000000000;
}

void sub_21BAB67FC(_QWORD *a1@<X8>)
{
  *a1 = 0x7463656A626FLL;
  a1[1] = 0xE600000000000000;
}

void protocol witness for static CaseIterable.allCases.getter in conformance __REAnchoringType.Name(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __REAnchoringType.Name;
}

void __REAnchoringType.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = type metadata accessor for __REAnchoringType();
  MEMORY[0x24BDAC7A8](v1);
  outlined init with copy of __REAnchoringType(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_21BAB68A8 + 4 * byte_21BE5CBEA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21BAB68A8()
{
  _BYTE *v0;

  *v0 = 0;
}

uint64_t type metadata accessor for __REAnchoringType()
{
  uint64_t result;

  result = type metadata singleton initialization cache for __REAnchoringType;
  if (!type metadata singleton initialization cache for __REAnchoringType)
    return swift_getSingletonMetadata();
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance __REAnchoringType.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance __REAnchoringType.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance __REAnchoringType.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_21BAB69B8()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance __REAnchoringType.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __REAnchoringType.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized __REAnchoringType.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __REAnchoringType.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21BAB6AB8 + 4 * byte_21BE5CBF4[*v0]))();
}

void sub_21BAB6AB8(_QWORD *a1@<X8>)
{
  *a1 = 0x6E656D6E67696C61;
  a1[1] = 0xE900000000000074;
}

void sub_21BAB6AD8(char *a1@<X8>)
{
  strcpy(a1, "classification");
  a1[15] = -18;
}

void sub_21BAB6B00(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

void sub_21BAB6B14(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "physicalWidth");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_21BAB6B3C(_QWORD *a1@<X8>)
{
  *a1 = 0x747265566873656DLL;
  a1[1] = 0xEA00000000007865;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAnchoringType.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BAB6B84 + 4 * byte_21BE5CBFA[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_21BAB6B84()
{
  return 0x6E656D6E67696C61;
}

uint64_t sub_21BAB6BA0()
{
  return 0x6966697373616C63;
}

uint64_t sub_21BAB6BC4()
{
  return 7107189;
}

uint64_t sub_21BAB6BD4()
{
  return 0x6C61636973796870;
}

uint64_t sub_21BAB6BF8()
{
  return 0x747265566873656DLL;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAnchoringType.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized __REAnchoringType.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __REAnchoringType.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAnchoringType.CodingKeys()
{
  lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAnchoringType.CodingKeys()
{
  lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __REAnchoringType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for URL();
  v29 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAnchoringType.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __REAnchoringType();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - v14;
  v16 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys();
  v17 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    v27 = v12;
    v28 = v15;
    v37 = v7;
    LOBYTE(v38) = 0;
    v18 = KeyedDecodingContainer.decode(_:forKey:)();
    v20 = v19;
    v26 = v6;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = v18;
    v21._object = v20;
    __REAnchoringType.Name.init(rawValue:)(v21);
    v22 = v38;
    if (v38 != 4)
    {
      swift_bridgeObjectRelease();
      __asm { BR              X9; loc_21BAB6EFC }
    }
    lazy protocol witness table accessor for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError();
    swift_allocError();
    *v23 = v18;
    v23[1] = (uint64_t)v20;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v26);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.CodingKeys, &unk_24DFA9668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.CodingKeys, &unk_24DFA9668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.CodingKeys, &unk_24DFA9668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.CodingKeys, &unk_24DFA9668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.AnchoringError, &unk_24DFA95D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError);
  }
  return result;
}

uint64_t outlined init with take of __REAnchoringType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __REAnchoringType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Alignment, &type metadata for __REAnchoringType.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Alignment, &type metadata for __REAnchoringType.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Alignment, &type metadata for __REAnchoringType.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Alignment, &type metadata for __REAnchoringType.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Alignment, &type metadata for __REAnchoringType.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Alignment, &type metadata for __REAnchoringType.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Classification, &type metadata for __REAnchoringType.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Classification, &type metadata for __REAnchoringType.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Classification, &type metadata for __REAnchoringType.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Classification, &type metadata for __REAnchoringType.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Classification, &type metadata for __REAnchoringType.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Classification, &type metadata for __REAnchoringType.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

void __REAnchoringType.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v16[1] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16[2] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  v18 = v5;
  v19 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v16[0] = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v16[3] = (char *)v16 - v9;
  v10 = type metadata accessor for __REAnchoringType();
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v16 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAnchoringType.CodingKeys>);
  v20 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of __REAnchoringType(v2, (uint64_t)v13);
  v15 = (char *)sub_21BAB7550 + 4 * byte_21BE5CC04[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BAB7550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 152) + 8))(v2 + *(int *)(v6 + 48), *(_QWORD *)(v5 - 128));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 112) + 8))(v2, *(_QWORD *)(v5 - 120));
  *(_BYTE *)(v5 - 72) = 0;
  v7 = *(_QWORD *)(v5 - 96);
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    outlined init with copy of __REAnchoringType(v3, v4);
    v9 = (char *)&loc_21BAB7650 + 4 * byte_21BE5CC08[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v1, v0);
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL();
    result = MEMORY[0x220772E3C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __REAnchoringType.Alignment.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAnchoringType.Alignment()
{
  lazy protocol witness table accessor for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAnchoringType.Alignment()
{
  lazy protocol witness table accessor for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment();
  return RawRepresentable<>.encode(to:)();
}

RealityKit::__REAnchoringType::Classification __swiftcall __REAnchoringType.Classification.init(rawValue:)(RealityKit::__REAnchoringType::Classification rawValue)
{
  RealityKit::__REAnchoringType::Classification *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t __REAnchoringType.Classification.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static __REAnchoringType.Classification.wall.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static __REAnchoringType.Classification.floor.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static __REAnchoringType.Classification.ceiling.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static __REAnchoringType.Classification.table.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static __REAnchoringType.Classification.seat.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static __REAnchoringType.Classification.any.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAnchoringType.Classification()
{
  lazy protocol witness table accessor for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAnchoringType.Classification()
{
  lazy protocol witness table accessor for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAnchoringType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __REAnchoringType.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance __REAnchoringType(_QWORD *a1)
{
  __REAnchoringType.encode(to:)(a1);
}

void specialized static __REAnchoringType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD v20[8];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v20[4] = *(_QWORD *)(v4 - 8);
  v20[5] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v20[2] = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v20[3] = (char *)v20 - v7;
  v8 = type metadata accessor for URL();
  v20[6] = *(_QWORD *)(v8 - 8);
  v20[7] = v8;
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  v20[1] = (char *)v20 - v10;
  v11 = type metadata accessor for __REAnchoringType();
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAnchoringType, __REAnchoringType));
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v20 + *(int *)(v17 + 48) - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAnchoringType(a1, (uint64_t)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __REAnchoringType(a2, (uint64_t)v18);
  v19 = (char *)sub_21BAB7D44 + 4 * byte_21BE5CC0C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_21BAB7D44()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;

  outlined init with copy of __REAnchoringType(v0, (uint64_t)v2);
  v3 = v2[1];
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of (__REAnchoringType, __REAnchoringType)(v0);
    return 0;
  }
  if (*v2 != *v1)
  {
    outlined destroy of __REAnchoringType(v0);
    return 0;
  }
  v4 = v3 == v1[1];
  outlined destroy of __REAnchoringType(v0);
  return v4;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.Name and conformance __REAnchoringType.Name()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoringType.Name and conformance __REAnchoringType.Name;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Name and conformance __REAnchoringType.Name)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoringType.Name, &type metadata for __REAnchoringType.Name);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Name and conformance __REAnchoringType.Name);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __REAnchoringType.Name()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__REAnchoringType.Name] and conformance [A], &demangling cache variable for type metadata for [__REAnchoringType.Name], MEMORY[0x24BEE12E0]);
}

uint64_t *initializeBufferWithCopyOfBuffer for __REAnchoringType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v14 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                  + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t destroy for __REAnchoringType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 3)
  {
    v4 = type metadata accessor for URL();
  }
  else
  {
    if ((_DWORD)result != 1)
      return result;
    v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                 + 48);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

char *initializeWithCopy for __REAnchoringType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                + 48);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for __REAnchoringType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of __REAnchoringType((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v12 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                  + 48);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined destroy of __REAnchoringType(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for __REAnchoringType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for __REAnchoringType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                + 48);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for __REAnchoringType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of __REAnchoringType((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v12 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                  + 48);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for __REAnchoringType()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[8];

  v6[4] = &unk_21BE5D158;
  v0 = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Measurement<NSUnitLength>();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = *(_QWORD *)(v0 - 8) + 64;
      swift_getTupleTypeLayout2();
      v6[5] = v6;
      v6[6] = MEMORY[0x24BEE0178] + 64;
      v6[7] = v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

void type metadata accessor for Measurement<NSUnitLength>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Measurement<NSUnitLength>)
  {
    type metadata accessor for NSUnitLength();
    v0 = type metadata accessor for Measurement();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Measurement<NSUnitLength>);
  }
}

unint64_t type metadata accessor for NSUnitLength()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSUnitLength;
  if (!lazy cache variable for type metadata for NSUnitLength)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUnitLength);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for __REAnchoringType.Name(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BAB8A30 + 4 * byte_21BE5CC15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BAB8A64 + 4 * byte_21BE5CC10[v4]))();
}

uint64_t sub_21BAB8A64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAB8A6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAB8A74);
  return result;
}

uint64_t sub_21BAB8A80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAB8A88);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BAB8A8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAB8A94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __REAnchoringType.Name()
{
  return &type metadata for __REAnchoringType.Name;
}

ValueMetadata *type metadata accessor for __REAnchoringType.Alignment()
{
  return &type metadata for __REAnchoringType.Alignment;
}

ValueMetadata *type metadata accessor for __REAnchoringType.Classification()
{
  return &type metadata for __REAnchoringType.Classification;
}

void *type metadata accessor for __REAnchoringType.AnchoringError()
{
  return &unk_24DFA95D8;
}

uint64_t storeEnumTagSinglePayload for __REAnchoringType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21BAB8B2C + 4 * byte_21BE5CC1F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21BAB8B60 + 4 * byte_21BE5CC1A[v4]))();
}

uint64_t sub_21BAB8B60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAB8B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAB8B70);
  return result;
}

uint64_t sub_21BAB8B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAB8B84);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21BAB8B88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAB8B90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __REAnchoringType.CodingKeys()
{
  return &unk_24DFA9668;
}

unint64_t specialized __REAnchoringType.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __REAnchoringType.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t outlined destroy of (__REAnchoringType, __REAnchoringType)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAnchoringType, __REAnchoringType));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CustomMaterial.CustomMaterialTexture.resource.getter()
{
  return swift_retain();
}

uint64_t CustomMaterial.CustomMaterialTexture.resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*CustomMaterial.CustomMaterialTexture.resource.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.CustomMaterialTexture.swizzle.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t CustomMaterial.CustomMaterialTexture.swizzle.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*CustomMaterial.CustomMaterialTexture.swizzle.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double CustomMaterial.CustomMaterialTexture.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)&result = 84148994;
  *(_DWORD *)(a2 + 8) = 84148994;
  return result;
}

{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 8);

  *(_QWORD *)a2 = v3;
  *(_QWORD *)&result = 84148994;
  *(_DWORD *)(a2 + 8) = 84148994;
  return result;
}

uint64_t CustomMaterial.CustomMaterialTexture.init(_:_:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t static CustomMaterial.BaseColor.__tintKey.getter()
{
  return 0x6F6C6F4365736162;
}

uint64_t (*CustomMaterial.BaseColor.__tint.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static CustomMaterial.BaseColor.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*CustomMaterial.BaseColor.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.BaseColor.__defaultTexture.getter())(_QWORD *a1)
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return partial apply for closure #1 in static TextureResource.builtinTexture(named:);
}

uint64_t sub_21BAB8ED0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextureResource.builtinTexture(named:)(_QWORD *a1)
{
  return closure #1 in static TextureResource.builtinTexture(named:)(a1);
}

void outlined consume of MaterialParameters.Texture?(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();

  }
}

id CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_21BE51200, a3, a4, 0xD000000000000010, 0x800000021BE860B0);
}

void CustomMaterial.BaseColor.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  uint64_t v9;
  void *v10;
  CGColorRef value;
  Swift::String v12;
  CGColorRef_optional v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  CGColor *v18;
  void *v19;
  uint64_t v20;

  if (one-time initialization token for linearSRGBWhite != -1)
    swift_once();
  v8 = (void *)static CGColorRef.linearSRGBWhite;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (a3)
    v9 = a2;
  else
    v9 = 0x6F6C6F4365736162;
  if (a3)
    v10 = a3;
  else
    v10 = (void *)0xED0000746E695472;
  value = v8;
  v12._countAndFlagsBits = v9;
  v12._object = v10;
  v13.value = Material.getColorParameter(key:)(v12).value;
  swift_bridgeObjectRelease();
  if (v13.value)
  {

    value = v13.value;
  }
  v14 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  Material.getTextureParameter(key:)(0xD000000000000010, 0x800000021BE860B0, v14, (uint64_t)&v19);
  v15 = v20;
  if (v20)
  {
    v16 = v19;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v16, v15);
    v17 = 84148994;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)a4 = value;
  *(_QWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 16) = v17;
  v18 = value;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_release();

}

uint64_t static CustomMaterial.Metallic.__scaleKey.getter()
{
  return 0x63696C6C6174656DLL;
}

float CustomMaterial.Metallic.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*CustomMaterial.Metallic.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.Metallic.__textureKey.getter()
{
  return 0x4D65727574786574;
}

uint64_t (*CustomMaterial.Metallic.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Metallic.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_21BE51220, a3, a4, 0x4D65727574786574, 0xEF63696C6C617465);
}

uint64_t CustomMaterial.Metallic.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x63696C6C6174656DLL, (void *)0xED0000656C616353, 0x4D65727574786574, 0xEF63696C6C617465, a2);
}

uint64_t static CustomMaterial.Roughness.__scaleKey.getter()
{
  return 0x73656E6867756F72;
}

float CustomMaterial.Roughness.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*CustomMaterial.Roughness.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static CustomMaterial.Roughness.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*CustomMaterial.Roughness.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Roughness.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id CustomMaterial.Roughness.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_21BE51210, a3, a4, 0xD000000000000010, 0x800000021BE860D0);
}

uint64_t CustomMaterial.Roughness.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x73656E6867756F72, (void *)0xEE00656C61635373, 0xD000000000000010, 0x800000021BE860D0, a2);
}

uint64_t static CustomMaterial.EmissiveColor.__colorKey.getter()
{
  return 0x6576697373696D65;
}

id CustomMaterial.EmissiveColor.__color.getter()
{
  id *v0;

  return *v0;
}

void CustomMaterial.EmissiveColor.__color.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*CustomMaterial.EmissiveColor.__color.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.EmissiveColor.__textureKey.getter()
{
  return 0x4565727574786574;
}

uint64_t CustomMaterial.EmissiveColor.texture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t (*CustomMaterial.EmissiveColor.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.EmissiveColor.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.black");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

uint64_t CustomMaterial.EmissiveColor.init(color:texture:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void CustomMaterial.BaseColor.init(_:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *a1;
  v3 = (void *)a1[1];
  v5 = a1[2];
  if (v5)
  {
    swift_retain();
    v6 = 84148994;
  }
  else
  {
    v6 = 0;
  }
  outlined consume of MaterialParameters.Texture?(v3, v5);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v6;
}

id CustomMaterial.EmissiveColor.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_21BE51260, a3, a4, 0x4565727574786574, 0xEF6576697373696DLL);
}

id CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void *v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  __n128 v18;
  void *v19;

  v12 = *(void **)v7;
  v13 = *(_QWORD *)(v7 + 8);
  if (v13)
  {
    v19 = *(void **)v7;
    v18 = a3;
    swift_retain();
    v14 = (id)REMaterialCreateDefaultSamplerDescriptor();
    a3 = v18;
    v12 = v19;
    v15 = 1;
    v16 = 84148994;
  }
  else
  {
    v14 = 0;
    v16 = 0;
    v15 = -1;
  }
  *(_QWORD *)a1 = a6;
  *(_QWORD *)(a1 + 8) = a7;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = v15;
  *(__n128 *)a2 = a3;
  *(_QWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 6;
  return v12;
}

void CustomMaterial.EmissiveColor.init(material:alternateTintKey:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  CGColorRef v5;
  Swift::String v6;
  CGColorRef_optional v7;
  CGColorRef value;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  CGColor *v13;
  void *v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  if (one-time initialization token for linearSRGBWhite != -1)
    swift_once();
  v4 = (void *)static CGColorRef.linearSRGBWhite;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v5 = v4;
  v6._countAndFlagsBits = 0x6576697373696D65;
  v6._object = (void *)0xED0000726F6C6F43;
  v7.value = Material.getColorParameter(key:)(v6).value;
  if (v7.value)
  {
    value = v7.value;

    v5 = value;
  }
  v9 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  Material.getTextureParameter(key:)(0x4565727574786574, 0xEF6576697373696DLL, v9, (uint64_t)&v14);
  v10 = v15;
  if (v15)
  {
    v11 = v14;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v11, v10);
    v12 = 84148994;
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 16) = v12;
  v13 = v5;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_release();

}

uint64_t static CustomMaterial.Specular.__scaleKey.getter()
{
  return 0x72616C7563657073;
}

float CustomMaterial.Specular.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*CustomMaterial.Specular.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.Specular.__textureKey.getter()
{
  return 0x5365727574786574;
}

uint64_t (*CustomMaterial.Specular.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Specular.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id CustomMaterial.Specular.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_21BE51230, a3, a4, 0x5365727574786574, 0xEF72616C75636570);
}

uint64_t CustomMaterial.Specular.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x72616C7563657073, (void *)0xED0000656C616353, 0x5365727574786574, 0xEF72616C75636570, a2);
}

void CustomMaterial.Blending.init(blending:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v3 = *a1;
  v4 = (void *)a1[1];
  v5 = a1[2];
  if (!v5)
  {
    v8 = 0;
LABEL_6:
    outlined consume of PhysicallyBasedMaterial.Blending(v3, v4, v5);
    v6 = v3;
    v7 = v8;
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    swift_retain();
    v8 = 84148994;
    goto LABEL_6;
  }
  v6 = 0;
  v7 = 0;
LABEL_7:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = v7;
}

void CustomMaterial.Opacity.init(_:)(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (void *)*((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    swift_retain();
    v6 = 84148994;
    v7 = v4;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  outlined consume of MaterialParameters.Texture?(v5, v7);
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 20) = 0;
}

void outlined consume of PhysicallyBasedMaterial.Blending(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3 != 1)
    outlined consume of MaterialParameters.Texture?(a2, a3);
}

BOOL static CustomMaterial.BlendMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CustomMaterial.BlendMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int CustomMaterial.BlendMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static CustomMaterial.Opacity.__scaleKey.getter()
{
  return 0x537974696361706FLL;
}

float CustomMaterial.Opacity.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void CustomMaterial.Opacity.scale.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*CustomMaterial.Opacity.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.Opacity.__textureKey.getter()
{
  return 0x4F65727574786574;
}

uint64_t CustomMaterial.Opacity.texture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t CustomMaterial.Opacity.texture.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_release();
  *(_QWORD *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*CustomMaterial.Opacity.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Opacity.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void CustomMaterial.Opacity.blendMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 20);
}

_BYTE *CustomMaterial.Opacity.blendMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = *result;
  return result;
}

uint64_t (*CustomMaterial.Opacity.blendMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t *CustomMaterial.Opacity.init(scale:texture:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v3;
  int v4;

  v3 = *result;
  v4 = *((_DWORD *)result + 2);
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 20) = 0;
  return result;
}

uint64_t *CustomMaterial.Opacity.init(scale:texture:blendMode:)@<X0>(uint64_t *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v4;
  int v5;
  char v6;

  v4 = *result;
  v5 = *((_DWORD *)result + 2);
  v6 = *a2;
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = v5;
  *(_BYTE *)(a3 + 20) = v6;
  return result;
}

void CustomMaterial.Opacity.init(floatLiteral:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
}

double CustomMaterial.Opacity.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  double result;

  v5 = *v2;
  v6 = *((_QWORD *)v2 + 1);
  if (v6)
  {
    swift_retain();
    v7 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v8 = 1;
    v9 = 84148994;
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v8 = -1;
  }
  strcpy((char *)a1, "textureOpacity");
  *(_BYTE *)(a1 + 15) = -18;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = v8;
  v10 = RELinkedOnOrAfterFall2024OSVersions();
  if (v10)
    v11 = -1;
  else
    v11 = 0;
  *(int8x16_t *)a2 = vandq_s8((int8x16_t)vdupq_n_s64(v11), (int8x16_t)xmmword_21BE5D360);
  if (v10)
    v12 = v5;
  else
    v12 = 0;
  *(_QWORD *)(a2 + 16) = v12;
  if (v10)
    v13 = 2;
  else
    v13 = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = v13;
  return result;
}

uint64_t CustomMaterial.Opacity.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::String v4;
  Swift::Float_optional *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  if (RELinkedOnOrAfterFall2024OSVersions())
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v4._countAndFlagsBits = 0x537974696361706FLL;
    v4._object = (void *)0xEC000000656C6163;
    Material.getFloatParameter(key:)(v5, v4);
    if ((v6 & 0x100000000) != 0)
      v7 = 1065353216;
    else
      v7 = v6;
  }
  else
  {
    v7 = 1065353216;
  }
  v8 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, v8, (uint64_t)&v13);
  v9 = v14;
  if (v14)
  {
    v10 = v13;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v10, v9);
    v11 = 84148994;
  }
  else
  {
    v11 = 0;
  }
  *(_DWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 20) = 0;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_release();
}

float protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance CustomMaterial.Opacity@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  result = *a1;
  *(float *)a2 = *a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  return result;
}

uint64_t static CustomMaterial.Clearcoat.__scaleKey.getter()
{
  return 0x616F637261656C63;
}

float CustomMaterial.Clearcoat.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t (*CustomMaterial.Clearcoat.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static CustomMaterial.Clearcoat.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*CustomMaterial.Clearcoat.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Clearcoat.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id CustomMaterial.Clearcoat.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_21BE51250, a3, a4, 0xD000000000000010, 0x800000021BE860F0);
}

id CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v7;
  uint64_t v12;
  uint64_t v13;
  id result;
  char v15;
  uint64_t v16;
  __n128 v17;

  v12 = *v7;
  v13 = *((_QWORD *)v7 + 1);
  if (v13)
  {
    v17 = a3;
    swift_retain();
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    a3 = v17;
    v15 = 1;
    v16 = 84148994;
  }
  else
  {
    result = 0;
    v16 = 0;
    v15 = -1;
  }
  *(_QWORD *)a1 = a6;
  *(_QWORD *)(a1 + 8) = a7;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = v15;
  *(__n128 *)a2 = a3;
  *(_QWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 2;
  return result;
}

uint64_t CustomMaterial.Clearcoat.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x616F637261656C63, (void *)0xEE00656C61635374, 0xD000000000000010, 0x800000021BE860F0, a2);
}

unint64_t static CustomMaterial.ClearcoatRoughness.__scaleKey.getter()
{
  return 0xD000000000000017;
}

float CustomMaterial.ClearcoatRoughness.scale.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void CustomMaterial.ClearcoatRoughness.scale.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*CustomMaterial.ClearcoatRoughness.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static CustomMaterial.ClearcoatRoughness.__textureKey.getter()
{
  return 0xD000000000000019;
}

uint64_t CustomMaterial.BaseColor.texture.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_release();
  *(_QWORD *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*CustomMaterial.ClearcoatRoughness.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.ClearcoatRoughness.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

uint64_t *CustomMaterial.ClearcoatRoughness.init(scale:texture:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v3;
  int v4;

  v3 = *result;
  v4 = *((_DWORD *)result + 2);
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

void CustomMaterial.ClearcoatRoughness.init(floatLiteral:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

void CustomMaterial.Metallic.init(_:)(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (void *)*((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    swift_retain();
    v6 = 84148994;
    v7 = v4;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  outlined consume of MaterialParameters.Texture?(v5, v7);
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v6;
}

double CustomMaterial.ClearcoatRoughness.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  double result;

  v5 = *v2;
  v6 = *((_QWORD *)v2 + 1);
  if (v6)
  {
    swift_retain();
    v7 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v8 = 1;
    v9 = 84148994;
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v8 = -1;
  }
  *(_QWORD *)a1 = 0xD000000000000019;
  *(_QWORD *)(a1 + 8) = 0x800000021BE86110;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v9;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = v8;
  *(_QWORD *)a2 = 0xD000000000000017;
  *(_QWORD *)(a2 + 8) = 0x800000021BE81740;
  *(_QWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 2;
  return result;
}

uint64_t CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0xD000000000000017, (void *)0x800000021BE81740, 0xD000000000000019, 0x800000021BE86110, a2);
}

uint64_t CustomMaterial.Metallic.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, void *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  Swift::String v12;
  Swift::Float_optional *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  float v20;
  void *v22;
  uint64_t v23;

  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  Material.getFloatParameter(key:)(v13, v12);
  v15 = v14;
  v16 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  Material.getTextureParameter(key:)(a4, a5, v16, (uint64_t)&v22);
  v17 = v23;
  if (v23)
  {
    v18 = v22;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v18, v17);
    v19 = 84148994;
  }
  else
  {
    v19 = 0;
  }
  v20 = *(float *)&v15;
  if ((v15 & 0x100000000) != 0)
    v20 = 1.0;
  *(float *)a6 = v20;
  *(_QWORD *)(a6 + 8) = v17;
  *(_DWORD *)(a6 + 16) = v19;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_release();
}

float protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance CustomMaterial.ClearcoatRoughness@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  result = *a1;
  *(float *)a2 = *a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t static CustomMaterial.Normal.__textureKey.getter()
{
  return 0x4E65727574786574;
}

uint64_t (*CustomMaterial.Normal.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Normal.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0xD000000000000012;
  *(_QWORD *)(v0 + 24) = 0x800000021BE86130;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

uint64_t CustomMaterial.Normal.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Normal.init(material:alternateTintKey:)(a1, 0x4E65727574786574, 0xED00006C616D726FLL, a2);
}

unint64_t static CustomMaterial.AmbientOcclusion.__textureKey.getter()
{
  return 0xD000000000000017;
}

uint64_t (*CustomMaterial.AmbientOcclusion.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.AmbientOcclusion.__defaultTexture.getter())()
{
  uint64_t v0;

  v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(_BYTE *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

double CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:)(a1, a2, a3, a4, 0xD000000000000017, 0x800000021BE86150);
}

uint64_t CustomMaterial.AmbientOcclusion.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Normal.init(material:alternateTintKey:)(a1, 0xD000000000000017, 0x800000021BE86150, a2);
}

unint64_t static CustomMaterial.ClearcoatNormal.__textureKey.getter()
{
  return 0xD000000000000016;
}

uint64_t CustomMaterial.ClearcoatNormal.texture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t CustomMaterial.Normal.texture.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_release();
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*CustomMaterial.ClearcoatNormal.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.ClearcoatNormal.init(texture:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

void CustomMaterial.Normal.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(void **)a1;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v4, v3);
    v5 = 84148994;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v5;
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in CustomMaterial.Metallic()
{
  return MEMORY[0x24BEE1560];
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.BlendMode and conformance CustomMaterial.BlendMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.BlendMode and conformance CustomMaterial.BlendMode;
  if (!lazy protocol witness table cache variable for type CustomMaterial.BlendMode and conformance CustomMaterial.BlendMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.BlendMode, &type metadata for CustomMaterial.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.BlendMode and conformance CustomMaterial.BlendMode);
  }
  return result;
}

uint64_t assignWithTake for CustomMaterial.CustomMaterialTexture(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for CustomMaterial.CustomMaterialTexture()
{
  return &type metadata for CustomMaterial.CustomMaterialTexture;
}

ValueMetadata *type metadata accessor for CustomMaterial.BaseColor()
{
  return &type metadata for CustomMaterial.BaseColor;
}

ValueMetadata *type metadata accessor for CustomMaterial.Metallic()
{
  return &type metadata for CustomMaterial.Metallic;
}

ValueMetadata *type metadata accessor for CustomMaterial.Roughness()
{
  return &type metadata for CustomMaterial.Roughness;
}

uint64_t destroy for CustomMaterial.EmissiveColor(id *a1)
{

  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.BaseColor(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.BaseColor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.BaseColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.EmissiveColor()
{
  return &type metadata for CustomMaterial.EmissiveColor;
}

ValueMetadata *type metadata accessor for CustomMaterial.Specular()
{
  return &type metadata for CustomMaterial.Specular;
}

unint64_t destroy for CustomMaterial.Blending(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_release();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.Blending(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((int)v4 - 1 < 0)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  }
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Blending(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  __int128 v8;

  LODWORD(v4) = -1;
  if (*(_QWORD *)(a1 + 8) >= 0xFFFFFFFFuLL)
    LODWORD(v5) = -1;
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 - 1;
  if (*((_QWORD *)a2 + 1) < 0xFFFFFFFFuLL)
    v4 = *((_QWORD *)a2 + 1);
  v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
      *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
      *(_BYTE *)(a1 + 19) = *((_BYTE *)a2 + 19);
      *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
      return a1;
    }
    swift_release();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    v8 = *a2;
    *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    *(_OWORD *)a1 = v8;
    return a1;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
  swift_retain();
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CustomMaterial.Blending(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = *(_QWORD *)(a2 + 8);
    if ((int)v7 - 1 < 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_QWORD *)(a1 + 8) = v6;
      swift_release();
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
      return a1;
    }
    swift_release();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Blending(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Blending(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 13) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for CustomMaterial.Blending(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t destructiveInjectEnumTag for CustomMaterial.Blending(uint64_t result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Blending()
{
  return &type metadata for CustomMaterial.Blending;
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.BlendMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BABACF4 + 4 * byte_21BE5D375[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BABAD28 + 4 * byte_21BE5D370[v4]))();
}

uint64_t sub_21BABAD28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BABAD30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BABAD38);
  return result;
}

uint64_t sub_21BABAD44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BABAD4CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BABAD50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BABAD58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.BlendMode()
{
  return &type metadata for CustomMaterial.BlendMode;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.Opacity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Opacity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.Opacity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Opacity(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Opacity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Opacity()
{
  return &type metadata for CustomMaterial.Opacity;
}

ValueMetadata *type metadata accessor for CustomMaterial.Clearcoat()
{
  return &type metadata for CustomMaterial.Clearcoat;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Metallic(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Metallic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.ClearcoatRoughness()
{
  return &type metadata for CustomMaterial.ClearcoatRoughness;
}

ValueMetadata *type metadata accessor for CustomMaterial.Normal()
{
  return &type metadata for CustomMaterial.Normal;
}

ValueMetadata *type metadata accessor for CustomMaterial.AmbientOcclusion()
{
  return &type metadata for CustomMaterial.AmbientOcclusion;
}

uint64_t assignWithCopy for CustomMaterial.CustomMaterialTexture(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  return a1;
}

ValueMetadata *type metadata accessor for CustomMaterial.ClearcoatNormal()
{
  return &type metadata for CustomMaterial.ClearcoatNormal;
}

double CustomMaterial.ClearcoatNormal.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:)(a1, a2, a3, a4, 0xD000000000000016, 0x800000021BE86170);
}

double CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  double result;

  v11 = *v6;
  if (*v6)
  {
    swift_retain();
    v12 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v13 = 1;
    v14 = 84148994;
  }
  else
  {
    v12 = 0;
    v14 = 0;
    v13 = -1;
  }
  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v14;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = v13;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

uint64_t CustomMaterial.ClearcoatNormal.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Normal.init(material:alternateTintKey:)(a1, 0xD000000000000016, 0x800000021BE86170, a2);
}

uint64_t CustomMaterial.Normal.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  v8 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  Material.getTextureParameter(key:)(a2, a3, v8, (uint64_t)&v13);
  v9 = v14;
  if (v14)
  {
    v10 = v13;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v10, v9);
    v11 = 84148994;
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)a4 = v9;
  *(_DWORD *)(a4 + 8) = v11;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t __RKEmphasisPulseAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisPulseAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisPulseAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKEmphasisPulseAnimation.createPulseAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  int v9;
  float v10;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  _OWORD *v23;
  uint64_t SRTSampledAnimation;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[8];
  const char *v32;
  char v33;
  char v34;
  float v35;
  int v36;
  float v37;
  Swift::OpaquePointer v38;

  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 107, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for playfulPulseAnimationData == -1)
        goto LABEL_8;
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 99, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for wildPulseAnimationData == -1)
        goto LABEL_8;
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 71, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for basicPulseAnimationData != -1)
    goto LABEL_19;
LABEL_8:
  v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((_QWORD *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v18 = rawValue[2];
  if (v18)
  {
    v8 = v34;
    v10 = (float)v18;
    v9 = v36;
    v19 = (__int128 *)&rawValue[6 * v18];
    v29 = *v19;
    v30 = *(v19 - 1);
    v28 = v19[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  v21 = rawValue[2];
  v20 = rawValue[3];
  v22 = a5 / v10;
  if (v21 >= v20 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, rawValue);
  rawValue[2] = v21 + 1;
  v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  v32 = "Transform.transform";
  v33 = 1;
  v34 = v8;
  v35 = v22;
  v36 = v9;
  v37 = a5;
  SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation)
    goto LABEL_15;
  v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_21BE411F0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v26 + 32) = v25;
  return v26;
}

void CustomComponentProxy.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CustomComponentProxy.init(with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  CustomComponentProxy.updateJSON(with:)(a1, a2);
  result = outlined consume of Data?(a1, a2);
  *a3 = 0;
  return result;
}

uint64_t CustomComponentProxy.updateJSON(with:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = *v2;
  if (*v2)
  {
    result = RECIntrospectionFree();
    *v2 = 0;
  }
  if (a2 >> 60 != 15)
    __asm { BR              X9 }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t CustomComponentProxy.getJSONData()()
{
  const char **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(const char *, _QWORD);
  uint64_t v11;

  v1 = type metadata accessor for Data.Deallocator();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  if (!*v0)
    return 0;
  v6 = strlen(*v0);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BDCDB98], v1);
  Data.Deallocator._deallocator.getter();
  if (v6)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v7 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    v8 = specialized Data._Representation.init(_:count:)(v7, v6);
    swift_release();
  }
  else
  {
    v9 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
    v9(v5, 0);
    swift_release();
    swift_release();
    v8 = 0;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t CustomComponentProxy.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = __swift_destroy_boxed_opaque_existential_1(a1);
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance CustomComponentProxy(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  return specialized static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)(a1, a2, a4);
}

uint64_t static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  return specialized static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)(a1, a2, a4);
}

void protocol witness for static Component.__free(to:offset:) in conformance CustomComponentProxy(_QWORD *a1)
{
  if (*a1)
  {
    RECIntrospectionFree();
    *a1 = 0;
  }
  JUMPOUT(0x220772F44);
}

void static CustomComponentProxy.__free(to:offset:)(_QWORD *a1)
{
  if (*a1)
  {
    RECIntrospectionFree();
    *a1 = 0;
  }
  JUMPOUT(0x220772F44);
}

uint64_t protocol witness for static Component.__addIntrospectionData(_:) in conformance CustomComponentProxy(uint64_t result)
{
  if (result)
    return REStructBuilderAddMemberDataTypeWithTag();
  return result;
}

uint64_t static CustomComponentProxy.__addIntrospectionData(_:)(uint64_t result)
{
  if (result)
    return REStructBuilderAddMemberDataTypeWithTag();
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CustomComponentProxy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = __swift_destroy_boxed_opaque_existential_1(a1);
  *a2 = 0;
  return result;
}

uint64_t CustomComponentProxy.encodeToData(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t result;
  unint64_t v8;
  char *v9;

  static os_log_type_t.default.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v4 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v4 + 32) = 0xD00000000000001FLL;
  *(_QWORD *)(v4 + 40) = 0x800000021BE86520;
  type metadata accessor for OS_os_log();
  v5 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  if (a1 == 1852797802 && a2 == 0xE400000000000000
    || (v6 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result = CustomComponentProxy.getJSONData()();
    if (v8 >> 60 != 15)
      return result;
    v6 = 1;
  }
  lazy protocol witness table accessor for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError();
  swift_allocError();
  *v9 = v6;
  return swift_willThrow();
}

unint64_t one-time initialization function for customComponentTypesToHandles()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static SceneManager.customComponentTypesToHandles = result;
  return result;
}

unint64_t one-time initialization function for customComponentTypesToKeys()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static SceneManager.customComponentTypesToKeys = result;
  return result;
}

unint64_t one-time initialization function for handlesToCustomComponentTypes()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static SceneManager.handlesToCustomComponentTypes = result;
  return result;
}

unint64_t one-time initialization function for customComponentTypeObjectIdToHandles()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static SceneManager.customComponentTypeObjectIdToHandles = result;
  return result;
}

uint64_t SceneManager.builtinComponentRegistry.getter()
{
  swift_beginAccess();
  return swift_retain();
}

void SceneManager.coreECSManager.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

uint64_t SceneManager.scenes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void SceneManager.append(scene:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  void *v4;

  swift_beginAccess();
  v1 = swift_retain();
  MEMORY[0x220768F0C](v1);
  if (*(_QWORD *)((*(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  REECSManagerAddScene();
  swift_beginAccess();
  v2 = static RealityFusionSession.sharedSession;
  if (static RealityFusionSession.sharedSession)
  {
    swift_beginAccess();
    if (v2[2])
    {
      v3 = (id)RFServiceManagerGetAnchorManagementService();
      if (v3)
      {
        v4 = v3;
        RFAnchorManagementUpdateAnchoringInScene();

      }
    }
  }
}

uint64_t SceneManager.remove(scene:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  swift_retain();
  v3 = swift_bridgeObjectRetain();
  v4 = specialized _ArrayProtocol.filter(_:)(v3, a1);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v1 + 32) = v4;
  swift_bridgeObjectRelease();
  return REECSManagerRemoveScene();
}

_QWORD *SceneManager.init(coreECSManager:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x24BEE4AF8];
  v1[4] = MEMORY[0x24BEE4AF8];
  v1[5] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v1[6] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  type metadata accessor for BuiltInComponentRegistry();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *(_QWORD *)(v4 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v1[2] = v4;
  RERetain();
  v1[3] = a1;
  REECSManagerSetSwiftObject();
  if (one-time initialization token for sharedManager != -1)
    swift_once();
  SceneManager.registerBuiltInComponents()();
  return v1;
}

uint64_t SceneManager.deinit()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (uint64_t *)(v0 + 32);
  swift_beginAccess();
  v9 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    REECSManagerSetSwiftObject();
    RERelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v3 = result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x220769770](v5, v2);
      }
      else
      {
        v6 = *(_QWORD *)(v2 + 8 * v5 + 32);
        swift_retain();
      }
      ++v5;
      swift_retain();
      v7 = swift_bridgeObjectRetain();
      v8 = specialized _ArrayProtocol.filter(_:)(v7, v6);
      swift_bridgeObjectRelease();
      swift_release();
      *v1 = v8;
      swift_bridgeObjectRelease();
      REECSManagerRemoveScene();
      swift_release();
    }
    while (v3 != v5);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t SceneManager.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = (uint64_t *)(v0 + 32);
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    REECSManagerSetSwiftObject();
    RERelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_deallocClassInstance();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v3 = result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x220769770](v5, v2);
      }
      else
      {
        v6 = *(_QWORD *)(v2 + 8 * v5 + 32);
        swift_retain();
      }
      ++v5;
      swift_retain();
      v7 = swift_bridgeObjectRetain();
      v8 = specialized _ArrayProtocol.filter(_:)(v7, v6);
      swift_bridgeObjectRelease();
      swift_release();
      *v1 = v8;
      swift_bridgeObjectRelease();
      REECSManagerRemoveScene();
      swift_release();
    }
    while (v3 != v5);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

Class encodeComponent(_:_:_:)(uint64_t a1, Swift::UInt a2)
{
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSData v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  uint64_t v24[3];
  __int128 v25;

  Object = RECustomComponentGetObject();
  if (!Object)
    return 0;
  v4 = Object;
  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  swift_beginAccess();
  v5 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v7 & 1) == 0))
  {
    swift_endAccess();
    return 0;
  }
  v19 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
  swift_endAccess();
  v8 = *(void (**)(uint64_t))(*((_QWORD *)&v19 + 1) + 32);
  v25 = v19;
  __swift_allocate_boxed_opaque_existential_1(v24);
  v8(v4);
  outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)&v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Encodable);
  if (!swift_dynamicCast())
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    outlined destroy of BodyTrackingComponent?((uint64_t)v20, &demangling cache variable for type metadata for Encodable?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return 0;
  }
  outlined init with take of BindableDataInternal(v20, (uint64_t)v23);
  outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)&v22);
  if (swift_dynamicCast())
  {
    v22 = *(_QWORD *)&v20[0];
    v9 = String.init(cString:)();
    v11 = CustomComponentProxy.encodeToData(_:)(v9, v10);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    v16 = String.init(cString:)();
    v11 = Encodable.encodeToData(_:)(v16, v17);
  }
  v13 = v11;
  v14 = v12;
  swift_bridgeObjectRelease();
  v15.super.isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v15.super.isa;
}

uint64_t @objc decodeComponent(_:_:_:_:)(uint64_t a1, Swift::UInt a2, void *a3)
{
  id v5;
  char v6;

  v5 = a3;
  v6 = decodeComponent(_:_:_:_:)(a1, a2);

  return v6 & 1;
}

uint64_t decodeComponent(_:_:_:_:)(uint64_t a1, Swift::UInt a2)
{
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19[2];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[24];
  uint64_t v24;

  Object = RECustomComponentGetObject();
  if (!Object)
    return 0;
  v4 = Object;
  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  swift_beginAccess();
  v5 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v7 & 1) == 0))
  {
    swift_endAccess();
    return 0;
  }
  v18 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
  swift_endAccess();
  v8 = *(void (**)(uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v18 + 1) + 32);
  v22 = v18;
  __swift_allocate_boxed_opaque_existential_1(&v21);
  v8(v4, v18, *((_QWORD *)&v18 + 1));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable);
  if (!swift_dynamicCast())
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for Decodable?);
    return 0;
  }
  outlined init with take of BindableDataInternal(v19, (uint64_t)v23);
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;
  v12 = String.init(cString:)();
  v14 = v13;
  v15 = v24;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, v24);
  Decodable.decodeFromData(_:_:)(v9, v11, v12, v14, v15);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v9, v11);
  outlined init with copy of __REAssetService((uint64_t)v23, (uint64_t)&v21);
  swift_dynamicCast();
  v17 = 1;
  (*(void (**)(__int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v18 + 1) + 40))(v19, v4, 0, 1, v18, *((_QWORD *)&v18 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v17;
}

uint64_t closure #1 in closure #1 in static SceneManager.customComponentTypeHelper(_:typeName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, void *a7@<X6>, char a8@<W7>, Swift::UInt *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  Swift::UInt v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t ObjCClassFromMetadata;
  id v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char v29;
  uint64_t result;
  Swift::UInt *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v36 = 2;
  v37 = a2;
  v38 = 0;
  v39 = 0;
  v40 = @objc deinitComponent(componentTypeHandle:rawPointer:);
  v41 = 0u;
  v42 = 0u;
  v43 = a3;
  v44 = a1;
  v18 = MEMORY[0x22076C644](&v36, a4 & 1);
  if (v18)
  {
    v19 = v18;
    v31 = a9;
    REComponentTypeSetCloneCallback();
    if ((a5 & 1) != 0)
    {
      v33 = 0x6F436D6F74737543;
      v34 = 0xEF746E656E6F706DLL;
      v20._countAndFlagsBits = a6;
      v20._object = a7;
      String.append(_:)(v20);
      v21 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      MEMORY[0x22076F554](v21 + 32);
      swift_release();
    }
    if ((a8 & 1) != 0)
    {
      type metadata accessor for SceneManager();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v23 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v24 = objc_msgSend(v23, sel_bundleIdentifier);

      if (v24)
      {
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v27 = v26;

      }
      else
      {
        v25 = 0xD00000000000001BLL;
        v27 = 0x800000021BE863E0;
      }
      LOBYTE(v32) = 0;
      v34 = 0;
      v35 = 0;
      v33 = MEMORY[0x24BEE4AF8];
      static Component.registerBuiltin(bundleIdentifier:reComponentClass:access:availability:)(v25, v27, 0, (char *)&v32, &v33, a10, a11);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for customComponentTypesToHandles != -1)
      swift_once();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v32 = static SceneManager.customComponentTypesToHandles;
    static SceneManager.customComponentTypesToHandles = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, a12, a13, isUniquelyReferenced_nonNull_native);
    static SceneManager.customComponentTypesToHandles = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (one-time initialization token for handlesToCustomComponentTypes != -1)
      swift_once();
    swift_beginAccess();
    v29 = swift_isUniquelyReferenced_nonNull_native();
    v32 = static SceneManager.handlesToCustomComponentTypes;
    static SceneManager.handlesToCustomComponentTypes = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a10, a11, v19, v29);
    static SceneManager.handlesToCustomComponentTypes = v32;
    swift_bridgeObjectRelease();
    result = swift_endAccess();
    *v31 = v19;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t deinitComponent(componentTypeHandle:rawPointer:)(Swift::UInt a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  swift_beginAccess();
  v4 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
  v8 = *v7;
  v9 = v7[1];
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, v8, v9);
}

Swift::OpaquePointer __swiftcall cloneComponent(_:)(Swift::OpaquePointer a1)
{
  Swift::UInt Class;
  uint64_t v2;
  uint64_t Object;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(uint64_t, _QWORD, _QWORD);
  void *v11;
  __int128 v13;
  uint64_t v14[3];
  __int128 v15;

  Class = REComponentGetClass();
  v2 = REComponentCreateByClass();
  Object = RECustomComponentGetObject();
  if (!Object || (v4 = Object, (v5 = RECustomComponentGetObject()) == 0))
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v11 = (void *)static OS_os_log.default.getter();
    goto LABEL_11;
  }
  v6 = v5;
  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  swift_beginAccess();
  v7 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (v8 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v9 & 1) == 0))
  {
    swift_endAccess();
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v11 = (void *)static OS_os_log.default.getter();
LABEL_11:
    os_log(_:dso:log:_:_:)();

    return (Swift::OpaquePointer)v2;
  }
  v13 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v8);
  swift_endAccess();
  v10 = *(void (**)(uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v13 + 1) + 32);
  v15 = v13;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v10(v4, v13, *((_QWORD *)&v13 + 1));
  (*(void (**)(uint64_t *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v13 + 1) + 40))(v14, v6, 0, 1, v13, *((_QWORD *)&v13 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return (Swift::OpaquePointer)v2;
}

uint64_t SceneManager.registerBuiltInType(_:typeEnum:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  Swift::UInt v6;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = REComponentClassFromType();
  if (result)
  {
    v6 = result;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, a1, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 40) = v9;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_beginAccess();
    v8 = swift_isUniquelyReferenced_nonNull_native();
    v10 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v6, v8);
    *(_QWORD *)(v2 + 48) = v10;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SceneManager.componentTypeToComponentClass(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 40);
  if (!*(_QWORD *)(v5 + 16) || (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) == 0))
  {
    swift_endAccess();
    v9 = specialized static SceneManager.makeComponentTypeHandleKey(_:typeName:)(a1, a2, 0, 0);
    v11 = v10;
    if (one-time initialization token for customComponentTypesToHandles != -1)
      swift_once();
    swift_beginAccess();
    v12 = static SceneManager.customComponentTypesToHandles;
    if (*(_QWORD *)(static SceneManager.customComponentTypesToHandles + 16))
    {
      swift_bridgeObjectRetain();
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
      if ((v14 & 1) != 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
        swift_endAccess();
        swift_bridgeObjectRelease_n();
        return v8;
      }
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_endAccess();
  return v8;
}

uint64_t SceneManager.componentClassToComponentType(_:)(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 48);
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v5 & 1) != 0)
      goto LABEL_7;
  }
  swift_endAccess();
  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  swift_beginAccess();
  v3 = static SceneManager.handlesToCustomComponentTypes;
  if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
LABEL_7:
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  }
  else
  {
    v7 = 0;
  }
  swift_endAccess();
  return v7;
}

uint64_t protocol witness for __SceneService.scenes.getter in conformance SceneManager()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void protocol witness for __SceneService.append(scene:) in conformance SceneManager()
{
  SceneManager.append(scene:)();
}

uint64_t protocol witness for __SceneService.remove(scene:) in conformance SceneManager(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *v1;
  swift_beginAccess();
  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized _ArrayProtocol.filter(_:)(v4, a1);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v3 + 32) = v5;
  swift_bridgeObjectRelease();
  return REECSManagerRemoveScene();
}

void protocol witness for __SceneService.coreECSManager.getter in conformance SceneManager(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 24);
}

uint64_t Encodable.encodeToData(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  unint64_t v8;

  v4 = a1 == 1852797802 && a2 == 0xE400000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    swift_release();
  }
  else
  {
    type metadata accessor for REEncoder();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = REEncoderCreate();
    v7 = v2;
    v5 = inited;
    v8 = REEncoder.encode<A>(_:)(v7);
    if (!v3)
      v5 = v8;
    swift_setDeallocating();
    REEncoderDestroy();
  }
  return v5;
}

uint64_t Decodable.decodeFromData(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;

  v7 = *(_QWORD *)(a5 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v19 - v12;
  if (v14 == v15 && v11 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v5)
      return swift_release();
    v17 = v20;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, a5);
    swift_release();
  }
  else
  {
    type metadata accessor for REDecoder();
    inited = swift_initStackObject();
    v19 = REDecoderCreate();
    *(_QWORD *)(inited + 16) = v19;
    REDecoder.decode<A>(_:from:)(a5, (uint64_t)v10);
    if (v5)
    {
      swift_setDeallocating();
      return REDecoderDestroy();
    }
    v17 = v20;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, a5);
    swift_setDeallocating();
    REDecoderDestroy();
    v13 = v10;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v17, v13, a5);
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_16:
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x220769770](i, a1);
          v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v9;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          v6 = *(_QWORD *)(a1 + 8 * i + 32);
          swift_retain();
          v7 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_13;
        }
        if (v6 == a2)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4)
          return v9;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  Swift::UInt v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;

  v3 = a1;
  v21 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_21:
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      v5 = 0;
      v19 = v3 & 0xC000000000000001;
      v6 = v3 & 0xFFFFFFFFFFFFFF8;
      v18 = v3;
      v7 = (_BYTE *)(v3 + 32);
      v8 = a2 + 56;
      while (1)
      {
        if (v19)
        {
          v9 = MEMORY[0x220769770](v5, v18);
          v10 = __OFADD__(v5++, 1);
          if (v10)
          {
LABEL_18:
            __break(1u);
            return v21;
          }
        }
        else
        {
          if (v5 >= *(_QWORD *)(v6 + 16))
          {
            __break(1u);
            goto LABEL_21;
          }
          v9 = *(_QWORD *)&v7[8 * v5];
          swift_retain();
          v10 = __OFADD__(v5++, 1);
          if (v10)
            goto LABEL_18;
        }
        if (*(_QWORD *)(a2 + 16))
        {
          v11 = *(_QWORD *)(v9 + 16);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v11);
          v3 = (unint64_t)&v20;
          v12 = Hasher._finalize()();
          v13 = -1 << *(_BYTE *)(a2 + 32);
          v14 = v12 & ~v13;
          if (((*(_QWORD *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
          {
            v15 = *(_QWORD *)(a2 + 48);
            if (*(_QWORD *)(v15 + 8 * v14) == v11)
            {
LABEL_15:
              swift_release();
              goto LABEL_5;
            }
            v16 = ~v13;
            while (1)
            {
              v14 = (v14 + 1) & v16;
              if (((*(_QWORD *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
                break;
              if (*(_QWORD *)(v15 + 8 * v14) == v11)
                goto LABEL_15;
            }
          }
        }
        v3 = (unint64_t)&v21;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_5:
        if (v5 == v4)
          return v21;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized static SceneManager.makeComponentTypeHandleKey(_:typeName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  if (a4)
  {
    v18 = dispatch thunk of CustomStringConvertible.description.getter();
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 95;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = a3;
    v8._object = a4;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    return v18;
  }
  else
  {
    if (one-time initialization token for customComponentTypesToKeys != -1)
      swift_once();
    swift_beginAccess();
    v10 = static SceneManager.customComponentTypesToKeys;
    if (*(_QWORD *)(static SceneManager.customComponentTypesToKeys + 16)
      && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v12 & 1) != 0))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v11);
      swift_endAccess();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_endAccess();
      v9 = dispatch thunk of CustomStringConvertible.description.getter();
      v14 = v13;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = static SceneManager.customComponentTypesToKeys;
      static SceneManager.customComponentTypesToKeys = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v14, a1, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypesToKeys = v17;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
  }
  return v9;
}

uint64_t specialized static SceneManager.customComponentTypeHelper(_:typeName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, Swift::UInt);
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, Swift::UInt, _BYTE *, uint64_t);
  BOOL v45;
  uint64_t v46;

  v5 = a3;
  v46 = *MEMORY[0x24BDAC8D0];
  v8 = specialized static SceneManager.makeComponentTypeHandleKey(_:typeName:)(a1, a2, a3, a4);
  v10 = v9;
  if (one-time initialization token for customComponentTypesToHandles != -1)
    swift_once();
  swift_beginAccess();
  v11 = static SceneManager.customComponentTypesToHandles;
  if (*(_QWORD *)(static SceneManager.customComponentTypesToHandles + 16))
  {
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      return v14;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  if (a4)
  {
    v15 = (unint64_t)a4;
  }
  else
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    v15 = v16;
  }
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  swift_bridgeObjectRetain();
  v18 = v17(a1, a2);
  v19 = REStructBuilderCreate();
  if (v18 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v18 > 0x7FFFFFFF)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v20 = v19;
  String.utf8CString.getter();
  v21 = REStructBuilderInit();
  swift_release();
  if (v21)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 88))(v20, a1, a2);
    if (RECIntrospectionStructRegister())
    {
      v37 = v8;
      REStructBuilderDestroy();
      v22 = dynamic_cast_existential_2_conditional(a1);
      v40 = 48;
      v41 = 1;
      v43 = @objc ecsNetSyncWriteSnapshot(_:_:_:_:_:);
      v44 = @objc ecsNetSyncReadSnapshot(_:_:_:_:_:_:);
      v42 = 0;
      v45 = v22 != 0;
      if (v22)
      {
        RERegisterSwiftCodableCallbacks();
      }
      else
      {
        static os_log_type_t.default.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_21BE411F0;
        _StringGuts.grow(_:)(55);
        v24._object = (void *)0x800000021BE86340;
        v24._countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v24);
        v25._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._countAndFlagsBits = 0xD00000000000001DLL;
        v26._object = (void *)0x800000021BE86360;
        String.append(_:)(v26);
        swift_bridgeObjectRetain();
        v27._countAndFlagsBits = 0xD000000000000027;
        v27._object = (void *)0x800000021BE86380;
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v23 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v23 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 40) = 0xE000000000000000;
        type metadata accessor for OS_os_log();
        v28 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

      }
      if (swift_conformsToProtocol2())
        v29 = a1;
      else
        v29 = 0;
      v30 = swift_conformsToProtocol2();
      v31 = MEMORY[0x24BDAC7A8](v30);
      if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v5 & 0x1000000000000000))
      {
        _StringGuts._slowWithCString<A>(_:)();
        goto LABEL_26;
      }
      MEMORY[0x24BDAC7A8](v31);
      if ((v15 & 0x2000000000000000) != 0)
      {
        v38[0] = v5;
        v38[1] = v15 & 0xFFFFFFFFFFFFFFLL;
        closure #1 in closure #1 in static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&v40, (uint64_t)v38, v32, v29 != 0, v22 != 0, v5, (void *)v15, v33 != 0, (Swift::UInt *)&v39, a1, a2, v37, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v39;
      }
      if ((v5 & 0x1000000000000000) != 0)
      {
        v34 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v35 = v5 & 0xFFFFFFFFFFFFLL;
LABEL_25:
        v39 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v34, v35, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v39;
      }
LABEL_33:
      v34 = _StringObject.sharedUTF8.getter();
      goto LABEL_25;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static SceneManager.customComponentType(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
    swift_once();
  swift_beginAccess();
  v4 = static SceneManager.customComponentTypeObjectIdToHandles;
  if (*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
    && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  }
  else
  {
    swift_endAccess();
    v7 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)(a1, a2, 0, 0);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = static SceneManager.customComponentTypeObjectIdToHandles;
    static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a1, isUniquelyReferenced_nonNull_native);
    static SceneManager.customComponentTypeObjectIdToHandles = v10;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return v7;
}

uint64_t specialized static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10[5];

  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  v5 = CustomComponentProxy.getJSONData()();
  v7 = v6;
  v10[0] = 0;
  CustomComponentProxy.updateJSON(with:)(v5, v6);
  result = outlined consume of Data?(v5, v7);
  v9 = v10[0];
  if ((a3 & 1) != 0)
  {
    result = *a2;
    if (*a2)
      result = RECIntrospectionFree();
  }
  *a2 = v9;
  return result;
}

uint64_t dispatch thunk of __SceneService.scenes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __SceneService.append(scene:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of __SceneService.remove(scene:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of __SceneService.coreECSManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for CustomComponentProxy()
{
  return &type metadata for CustomComponentProxy;
}

uint64_t type metadata accessor for SceneManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for SceneManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2())
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in static SceneManager.customComponentTypeHelper(_:typeName:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  Swift::UInt v5;

  result = closure #1 in closure #1 in static SceneManager.customComponentTypeHelper(_:typeName:)(*(_QWORD *)(v2 + 16), a1, *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_BYTE *)(v2 + 33), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48), *(_BYTE *)(v2 + 56), &v5, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
  *a2 = v5;
  return result;
}

_QWORD *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in _StringGuts.withCString<A>(_:)(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError;
  if (!lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomComponentProxy.CustomComponentProxyEncodeError, &type metadata for CustomComponentProxy.CustomComponentProxyEncodeError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError;
  if (!lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomComponentProxy.CustomComponentProxyEncodeError, &type metadata for CustomComponentProxy.CustomComponentProxyEncodeError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError);
  }
  return result;
}

uint64_t specialized static SceneManager.unregisterCustomComponents()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (one-time initialization token for customComponentTypesToHandles != -1)
LABEL_33:
    swift_once();
  swift_beginAccess();
  v0 = static SceneManager.customComponentTypesToHandles + 64;
  v1 = 1 << *(_BYTE *)(static SceneManager.customComponentTypesToHandles + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(static SceneManager.customComponentTypesToHandles + 64);
  v4 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (1)
  {
    if (v3)
    {
      v3 &= v3 - 1;
      goto LABEL_6;
    }
    v6 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v6 >= v4)
      goto LABEL_24;
    v7 = *(_QWORD *)(v0 + 8 * v6);
    ++v5;
    if (!v7)
    {
      v5 = v6 + 1;
      if (v6 + 1 >= v4)
        goto LABEL_24;
      v7 = *(_QWORD *)(v0 + 8 * v5);
      if (!v7)
      {
        v5 = v6 + 2;
        if (v6 + 2 >= v4)
          goto LABEL_24;
        v7 = *(_QWORD *)(v0 + 8 * v5);
        if (!v7)
        {
          v5 = v6 + 3;
          if (v6 + 3 >= v4)
            goto LABEL_24;
          v7 = *(_QWORD *)(v0 + 8 * v5);
          if (!v7)
            break;
        }
      }
    }
LABEL_23:
    v3 = (v7 - 1) & v7;
LABEL_6:
    RECustomComponentTypeGetObjectIntrospection();
    RECustomComponentTypeDestroy();
    RECIntrospectionStructUnregister();
  }
  v8 = v6 + 4;
  if (v8 < v4)
  {
    v7 = *(_QWORD *)(v0 + 8 * v8);
    if (!v7)
    {
      while (1)
      {
        v5 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_32;
        if (v5 >= v4)
          goto LABEL_24;
        v7 = *(_QWORD *)(v0 + 8 * v5);
        ++v8;
        if (v7)
          goto LABEL_23;
      }
    }
    v5 = v8;
    goto LABEL_23;
  }
LABEL_24:
  swift_release();
  if (one-time initialization token for customComponentTypesToKeys != -1)
    swift_once();
  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  static SceneManager.customComponentTypesToKeys = v10;
  swift_bridgeObjectRelease();
  static SceneManager.customComponentTypesToHandles = specialized Dictionary.init(dictionaryLiteral:)(v9);
  swift_bridgeObjectRelease();
  if (one-time initialization token for handlesToCustomComponentTypes != -1)
    swift_once();
  v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  static SceneManager.handlesToCustomComponentTypes = v11;
  swift_bridgeObjectRelease();
  if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
    swift_once();
  v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  static SceneManager.customComponentTypeObjectIdToHandles = v12;
  return swift_bridgeObjectRelease();
}

uint64_t storeEnumTagSinglePayload for CustomComponentProxy.CustomComponentProxyEncodeError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BABE840 + 4 * byte_21BE5D755[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BABE874 + 4 * byte_21BE5D750[v4]))();
}

uint64_t sub_21BABE874(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BABE87C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BABE884);
  return result;
}

uint64_t sub_21BABE890(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BABE898);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BABE89C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BABE8A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomComponentProxy.CustomComponentProxyEncodeError()
{
  return &type metadata for CustomComponentProxy.CustomComponentProxyEncodeError;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, ModelDebugOptionsComponent.VisualizationMode.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, __RKEntityTriggerSpecification.Name.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, __RKEntityActionSpecification.Name.rawValue.getter);
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_21BABE970(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21BABEA68 + 4 * byte_21BE5D93A[a2]))(0x6F69647561);
}

uint64_t sub_21BABEA68(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F69647561 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65636E6575716573;
  else
    v3 = 0x7265646C6F66;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x65636E6575716573;
  else
    v5 = 0x7265646C6F66;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0xED000074754F6E6FLL;
  else
    v2 = 0xEC0000006E496E6FLL;
  if ((a2 & 1) != 0)
    v3 = 0xED000074754F6E6FLL;
  else
    v3 = 0xEC0000006E496E6FLL;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0x7369776B636F6C63;
  if (v2)
    v4 = 0xE900000000000065;
  else
    v4 = 0x800000021BE81A20;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 0x7369776B636F6C63;
  if ((a2 & 1) != 0)
    v6 = 0x800000021BE81A20;
  else
    v6 = 0xE900000000000065;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x800000021BE81580;
  else
    v2 = 0x800000021BE81560;
  if ((a2 & 1) != 0)
    v3 = 0x800000021BE81580;
  else
    v3 = 0x800000021BE81560;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x72416D6F74737563;
  else
    v3 = 0x696669746E656469;
  if (v2)
    v4 = 0xEA00000000007265;
  else
    v4 = 0xEF73746E656D7567;
  if ((a2 & 1) != 0)
    v5 = 0x72416D6F74737563;
  else
    v5 = 0x696669746E656469;
  if ((a2 & 1) != 0)
    v6 = 0xEF73746E656D7567;
  else
    v6 = 0xEA00000000007265;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65636E6575716573;
  else
    v3 = 0x65727275636E6F63;
  if (v2)
    v4 = 0xEA0000000000746ELL;
  else
    v4 = 0xE900000000000064;
  if ((a2 & 1) != 0)
    v5 = 0x65636E6575716573;
  else
    v5 = 0x65727275636E6F63;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000064;
  else
    v6 = 0xEA0000000000746ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x746E656D75677261;
  else
    v3 = 1701667182;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE900000000000073;
  if ((a2 & 1) != 0)
    v5 = 0x746E656D75677261;
  else
    v5 = 1701667182;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000073;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7954797469746E65;
  else
    v3 = 0x616A6E694E7369;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xEE00656D614E6570;
  if ((a2 & 1) != 0)
    v5 = 0x7954797469746E65;
  else
    v5 = 0x616A6E694E7369;
  if ((a2 & 1) != 0)
    v6 = 0xEE00656D614E6570;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x64616F6C657270;
  else
    v3 = 0x6D6165727473;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x64616F6C657270;
  else
    v5 = 0x6D6165727473;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E6F697461746F72;
    else
      v3 = 0x74616C736E617274;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xEB000000006E6F69;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E6F697461746F72;
      else
        v6 = 0x74616C736E617274;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xEB000000006E6F69;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x656C616373;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x656C616373)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xED00007473657571;
  v3 = 0x657220776F6C6C61;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x722065726F6E6769;
    else
      v5 = 0xD000000000000014;
    if (v4 == 1)
      v6 = 0xEE00747365757165;
    else
      v6 = 0x800000021BE81880;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x657220776F6C6C61;
  v6 = 0xED00007473657571;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x722065726F6E6769;
    else
      v3 = 0xD000000000000014;
    if (v7 == 1)
      v2 = 0xEE00747365757165;
    else
      v2 = 0x800000021BE81880;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x74756F2065736165;
    else
      v3 = 0xD000000000000010;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0x800000021BE815E0;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x74756F2065736165;
      else
        v6 = 0xD000000000000010;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0x800000021BE815E0;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6E692065736165;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x6E692065736165)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6C756679616C70;
    else
      v3 = 1684826487;
    if (v2 == 1)
      v4 = 0xE700000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6C756679616C70;
      else
        v6 = 1684826487;
      if (v5 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6369736162;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x6369736162)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x65636E6174736964;
    else
      v3 = 1701869940;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x65636E6174736964;
      else
        v6 = 1701869940;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x746567726174;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x746567726174)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1936154996;
    else
      v3 = 0xD000000000000011;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0x800000021BE81090;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1936154996;
      else
        v6 = 0xD000000000000011;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0x800000021BE81090;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x746567726174;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x746567726174)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x746E656D75677261;
    else
      v3 = 0x6F697469646E6F63;
    if (v2 == 1)
      v4 = 0xE900000000000073;
    else
      v4 = 0xEA0000000000736ELL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x746E656D75677261;
      else
        v6 = 0x6F697469646E6F63;
      if (v5 == 1)
        v7 = 0xE900000000000073;
      else
        v7 = 0xEA0000000000736ELL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701667182;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701667182)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6573756170;
    else
      v3 = 1886352499;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6573756170;
      else
        v6 = 1886352499;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 2036427888;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 2036427888)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC00000065637275;
  v3 = 0x6F7320746E696F70;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x746E6569626D61;
    else
      v5 = 0x636973756DLL;
    if (v4 == 1)
      v6 = 0xE700000000000000;
    else
      v6 = 0xE500000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6F7320746E696F70;
  v6 = 0xEC00000065637275;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x746E6569626D61;
    else
      v3 = 0x636973756DLL;
    if (v7 == 1)
      v2 = 0xE700000000000000;
    else
      v2 = 0xE500000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_21BABF104(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21BABF1D4 + 4 * byte_21BE5D94E[a2]))(1801675106);
}

uint64_t sub_21BABF1D4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1801675106 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_21BABF56C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21BABF60C + 4 * byte_21BE5D960[a2]))(0x6B6E696C62);
}

uint64_t sub_21BABF60C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6B6E696C62 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_21BABFBD8@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21BABFCA0 + 4 * byte_21BE5D972[a1]))(a2 - 1);
}

uint64_t sub_21BABFCA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  if (a1 == a2 - 1 && v2 == 0x800000021BE81AE0)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_21BABFE00@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21BABFEC8 + 4 * byte_21BE5D986[a1]))(a2 - 1);
}

uint64_t sub_21BABFEC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  if (a1 == a2 - 1 && v2 == 0x800000021BE81BB0)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = a3();
  v6 = v5;
  if (v4 == a3() && v6 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_21BAC0390(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_21BAC03F8 + 4 * byte_21BE5D994[a2]))();
}

uint64_t sub_21BAC03F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0xED00005241746E65)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_21BAC04F0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21BAC0570 + 4 * byte_21BE5D99D[a2]))(0x524165757161704FLL);
}

uint64_t sub_21BAC0570(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x524165757161704FLL && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_21BAC0738(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21BAC078C + 4 * byte_21BE5D9A6[a2]))(0x6567616D69);
}

uint64_t sub_21BAC078C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6567616D69 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_21BAC0864(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21BAC0910 + 4 * byte_21BE5D9B0[a2]))(0x6E656D6E67696C61);
}

uint64_t sub_21BAC0910(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E656D6E67696C61 && v1 == 0xE900000000000074)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  char v8;

  if (a2 - 2 >= 3)
  {
    v6 = a2;
    if (a2)
    {
      if (a2 == 1)
      {
        v6 = 0xE500000000000000;
        v7 = 0x534F63616DLL;
      }
      else
      {
        v7 = a1;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      v6 = 0xE300000000000000;
      v7 = 5459817;
    }
  }
  else
  {
    v6 = 0xE800000000000000;
    v7 = 0x534F6E6F69736976;
  }
  if (a4 - 2 >= 3)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        a4 = 0xE500000000000000;
        if (v7 != 0x534F63616DLL)
          goto LABEL_20;
      }
      else
      {
        swift_bridgeObjectRetain();
        if (v7 != a3)
        {
LABEL_20:
          v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_21;
        }
      }
    }
    else
    {
      a4 = 0xE300000000000000;
      if (v7 != 5459817)
        goto LABEL_20;
    }
  }
  else
  {
    a4 = 0xE800000000000000;
    if (v7 != 0x534F6E6F69736976)
      goto LABEL_20;
  }
  if (v6 != a4)
    goto LABEL_20;
  v8 = 1;
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

RealityKit::__RKEntityMoveSelection_optional __swiftcall __RKEntityMoveSelection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  RealityKit::__RKEntityMoveSelection_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveSelection.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

void *static __RKEntityMoveSelection.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityMoveSelection.allCases.getter;
}

unint64_t __RKEntityMoveSelection.rawValue.getter()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityMoveSelection(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityMoveSelection()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityMoveSelection()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityMoveSelection()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

RealityKit::__RKEntityMoveSelection_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityMoveSelection(Swift::String *a1)
{
  return __RKEntityMoveSelection.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityMoveSelection(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x800000021BE81560;
  if (*v1)
    v2 = 0x800000021BE81580;
  *a1 = 0xD000000000000010;
  a1[1] = v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityMoveSelection()
{
  lazy protocol witness table accessor for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityMoveSelection()
{
  lazy protocol witness table accessor for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveSelection(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveSelection;
}

RealityKit::__RKEntityMoveEase_optional __swiftcall __RKEntityMoveEase.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__RKEntityMoveEase_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveEase.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 10;
  if (v5 < 0xA)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static __RKEntityMoveEase.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityMoveEase.allCases.getter;
}

uint64_t __RKEntityMoveEase.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BAC0EA4 + 4 * byte_21BE5D9B6[*v0]))(0x7261656E696CLL, 0xE600000000000000);
}

uint64_t sub_21BAC0EA4()
{
  return 1801675106;
}

uint64_t sub_21BAC0EB4()
{
  return 0x65636E756F62;
}

uint64_t sub_21BAC0EC4()
{
  return 0x656C63726963;
}

uint64_t sub_21BAC0ED4()
{
  return 0x63697473616C65;
}

uint64_t sub_21BAC0EEC()
{
  return 0x746E656E6F707865;
}

uint64_t sub_21BAC0F0C()
{
  return 0x6574696D726568;
}

uint64_t sub_21BAC0F24()
{
  return 6778732;
}

uint64_t sub_21BAC0F34()
{
  return 0x7265776F70;
}

uint64_t sub_21BAC0F48()
{
  return 1701734771;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityMoveEase(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityMoveEase()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __RKEntityMoveEase(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityMoveEase()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

RealityKit::__RKEntityMoveEase_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityMoveEase(Swift::String *a1)
{
  return __RKEntityMoveEase.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityMoveEase@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = __RKEntityMoveEase.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityMoveEase()
{
  lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityMoveEase()
{
  lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveEase(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static __RKEntityMoveEase.allCases.getter;
}

RealityKit::__RKEntityMoveEaseType_optional __swiftcall __RKEntityMoveEaseType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__RKEntityMoveEaseType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveEaseType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static __RKEntityMoveEaseType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityMoveEaseType.allCases.getter;
}

uint64_t __RKEntityMoveEaseType.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x74756F2065736165;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x6E692065736165;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityMoveEaseType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityMoveEaseType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityMoveEaseType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityMoveEaseType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKEntityMoveEaseType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityMoveEaseType(Swift::String *a1)
{
  return __RKEntityMoveEaseType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityMoveEaseType(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x74756F2065736165;
  if (v2 != 1)
  {
    v5 = 0xD000000000000010;
    v4 = 0x800000021BE815E0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E692065736165;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityMoveEaseType()
{
  lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityMoveEaseType()
{
  lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveEaseType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveEaseType;
}

uint64_t key path setter for __RKEntityTransformAction.relativeToEntity : __RKEntityTransformAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 192) = v2;
  swift_retain();
  return swift_release();
}

uint64_t __RKEntityTransformAction.relativeToEntity.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t __RKEntityTransformAction.relativeToEntity.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 192) = a1;
  return swift_release();
}

uint64_t (*__RKEntityTransformAction.relativeToEntity.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityTransformAction.__allocating_init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8, float a9, float a10, float a11, char *a12, char *a13, char *a14, char a15)
{
  char v24;
  char v25;
  char v26;
  char v27;
  char v29;
  char v30;
  char v31;

  v24 = a4 & 1;
  v25 = a7 & 1;
  v26 = *a13;
  v27 = *a14;
  v31 = *a12;
  v30 = v26;
  v29 = v27;
  type metadata accessor for __RKEntityTransformAction();
  swift_allocObject();
  return specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(a1, a2, a3, v24, a5, a6, v25, a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11, &v31, &v30, &v29, a15, 0);
}

uint64_t __RKEntityTransformAction.__allocating_init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8, float a9, float a10, float a11, char *a12, char *a13, char *a14, char a15, uint64_t a16)
{
  char v23;
  char v24;
  uint64_t v25;

  v23 = a4 & 1;
  v24 = a7 & 1;
  swift_allocObject();
  v25 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(a1, a2, a3, v23, a5, a6, v24, a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11, a12, a13, a14, a15, a16);
  swift_release();
  return v25;
}

uint64_t type metadata accessor for __RKEntityTransformAction()
{
  return objc_opt_self();
}

uint64_t __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8, float a9, float a10, float a11, char *a12, char *a13, char *a14, char a15, uint64_t a16)
{
  uint64_t v16;

  v16 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(a1, a2, a3, a4 & 1, a5, a6, a7 & 1, a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11, a12, a13, a14, a15, a16);
  swift_release();
  return v16;
}

uint64_t __RKEntityTransformAction.perform(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  _BOOL4 v16;
  os_log_type_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  int MotionType;
  os_log_type_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t ServiceLocator;
  uint64_t v26;
  char v27;
  char v28;
  os_log_type_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  float32x4_t v44;
  uint64_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  BOOL v59;
  char v60;
  os_log_type_t v61;
  os_log_type_t v62;
  os_log_type_t v63;
  __int128 v64;
  char v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x2_t v74;
  unsigned __int32 v75;
  float32x2_t v76;
  float32x2_t v77;
  char v78;
  unint64_t v79;
  float32x4_t v80;
  const float *v81;
  float32x4_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  double v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int VisibilityMode;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  os_log_type_t v111;
  _OWORD v112[2];
  float32x4_t v113;
  float32x4_t v114;
  uint64_t v115;
  simd_float4 v116;
  simd_float4 v117;
  simd_float4 v118;
  simd_float4 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BOOL4 v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD v135[6];
  _OWORD v136[3];
  _OWORD v137[3];
  _OWORD v138[3];
  _OWORD v139[6];
  _QWORD v140[2];
  char v141;
  double v142;
  _UNKNOWN **v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  char v147[48];
  _OWORD v148[2];
  char v149;
  _OWORD v150[3];
  uint64_t v151;
  simd_float4x4 v152;

  v2 = v1;
  v151 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)&v139[0] = 91;
  *((_QWORD *)&v139[0] + 1) = 0xE100000000000000;
  if (v4)
  {
    *(_QWORD *)&v138[0] = 0;
    *((_QWORD *)&v138[0] + 1) = 0xE000000000000000;
    *(_QWORD *)&v137[0] = v4;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  else
  {
    v6 = 0xE300000000000000;
    v5 = 7104878;
  }
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8285;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  swift_release();
  v11 = v139[0];
  v12 = *(_QWORD *)(v1 + 16);
  if (!v12)
  {
    v18 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v18, v139);
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = (_QWORD *)(v1 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 104) == 1 && *v13 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v2 + 105) == 1)
    {
      swift_retain();
LABEL_15:
      v19 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v19, (uint64_t *)v139);
LABEL_16:
      swift_bridgeObjectRelease();
LABEL_17:
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_15;
  v14 = *(_QWORD *)(v12 + 16);
  RERigidBodyComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    v15 = *(float *)(v2 + 172);
    v16 = v15 == 0.0;
    if (v15 == 0.0)
    {
      v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, (uint64_t *)v139);
      RERigidBodyComponentIncrementVersion();
      LODWORD(v134) = 0;
    }
    else
    {
      MotionType = RERigidBodyComponentGetMotionType();
      if (MotionType == 1)
      {
        LODWORD(v134) = 1;
      }
      else
      {
        LODWORD(v134) = MotionType;
        v22 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v22, (uint64_t *)v139);
        RERigidBodyComponentSetMotionType();
      }
    }
    REMotionStateComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      v139[0] = v11;
      v23 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v23, (uint64_t *)v139);
      REMotionStateComponentSetLinearVelocity();
      REMotionStateComponentSetAngularVelocity();
      RENetworkMarkComponentDirty();
    }
    RENetworkMarkComponentDirty();
  }
  else
  {
    LODWORD(v134) = 0;
    v16 = 1;
  }
  REAnimationComponentGetComponentType();
  v24 = REEntityGetOrAddComponentByClass();
  if (!REEntityGetSceneNullable())
  {
    v139[0] = v11;
    v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, (uint64_t *)v139);
LABEL_36:
    swift_bridgeObjectRelease();
    swift_release();
    return 1;
  }
  if (!RESceneGetECSManagerNullable())
  {
    v139[0] = v11;
    v30 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v30, (uint64_t *)v139);
    goto LABEL_36;
  }
  ServiceLocator = REECSManagerGetServiceLocator();
  v26 = MEMORY[0x22076FD58](ServiceLocator);
  if (!v26)
  {
    v139[0] = v11;
    v31 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v31, (uint64_t *)v139);
    goto LABEL_36;
  }
  v128 = v24;
  v27 = *(_BYTE *)(v2 + 176);
  v133 = (uint64_t)"e";
  v129 = (unint64_t)"move by distance";
  v130 = v26;
  if ((v27 & 1) != 0 || 0x800000021BE81560 == 0x800000021BE81580)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
      goto LABEL_41;
  }
  swift_beginAccess();
  v33 = *(_QWORD *)(v2 + 192);
  if (v33)
  {
    v125 = v16;
    swift_retain();
    goto LABEL_43;
  }
LABEL_41:
  v34 = Entity.rcSceneEntity.getter();
  if (!v34)
  {
    v139[0] = v11;
    v62 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v62, (uint64_t *)v139);
    goto LABEL_16;
  }
  v33 = v34;
  v125 = v16;
LABEL_43:
  v35 = specialized HasHierarchy.parent.getter();
  if (!v35)
  {
    v139[0] = v11;
    v61 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v61, (uint64_t *)v139);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_17;
  }
  v36 = v35;
  swift_retain();
  *(double *)v37.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v36, v33);
  v118 = (simd_float4)v38;
  v119 = (simd_float4)v37;
  v116 = (simd_float4)v40;
  v117 = (simd_float4)v39;
  swift_release();
  v41 = one-time initialization token for identity;
  swift_retain();
  if (v41 != -1)
    swift_once();
  v126.i32[0] = static Transform.identity;
  v121 = xmmword_2551B1060;
  v122 = xmmword_2551B1050;
  *(double *)&v42 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v36, v33);
  v123 = v42;
  v124 = v43;
  v127 = v44;
  v132 = v45;
  specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v121, (float32x4_t)v122, v126.f32[0]);
  REMakeSRTFromMatrix();
  v126 = v46;
  v131 = v36;
  if (one-time initialization token for identity != -1)
    swift_once();
  v47 = swift_release();
  MEMORY[0x24BDAC7A8](v47);
  v114 = v126;
  v139[0] = v11;
  v48 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v48, v139, partial apply for implicit closure #12 in __RKEntityTransformAction.perform(with:), &v113);
  swift_retain();
  specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v131, v33);
  REMakeSRTFromMatrix();
  v127 = v49;
  v50 = swift_release();
  MEMORY[0x24BDAC7A8](v50);
  v114 = v127;
  v139[0] = v11;
  v51 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v51, v139, partial apply for implicit closure #13 in __RKEntityTransformAction.perform(with:), &v113);
  RETransformComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    v139[0] = v11;
    v63 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v63, (uint64_t *)v139);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_17;
  }
  v115 = v33;
  RETransformComponentGetLocalUnanimatedSRT();
  v121 = v53;
  v122 = (__int128)v52;
  *(_OWORD *)(v2 + 224) = v54;
  *(float32x4_t *)(v2 + 240) = v52;
  *(_OWORD *)(v2 + 208) = v53;
  v123 = v54;
  v139[0] = v11;
  v55 = static os_log_type_t.debug.getter();
  v56 = specialized InteractionsLogger.log(_:_:)(v55, v139, partial apply for implicit closure #15 in __RKEntityTransformAction.perform(with:), v2);
  v57 = *(_BYTE *)(v2 + 128);
  v120 = v3;
  if ((v57 & 1) == 0)
  {
    v124 = *(_OWORD *)(v2 + 112);
    v59 = v125;
    v58 = v129;
    goto LABEL_60;
  }
  v58 = v129;
  v59 = v125;
  if ((*(_BYTE *)(v2 + 176) & 1) != 0 || (v133 | 0x8000000000000000) == (v129 | 0x8000000000000000))
  {
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v56 = swift_bridgeObjectRelease();
  v124 = 0u;
  if ((v60 & 1) != 0)
  {
LABEL_59:
    *(float32x2_t *)&v64 = simd_float4x4.transform(position:)(*(float32x4_t *)(v2 + 208), (float32x4_t)v119, (float32x4_t)v118, (float32x4_t)v117, (float32x4_t)v116);
    v124 = v64;
  }
LABEL_60:
  if ((*(_BYTE *)(v2 + 160) & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 176) & 1) != 0 || (v133 | 0x8000000000000000) == (v58 | 0x8000000000000000))
    {
      v56 = swift_bridgeObjectRelease();
    }
    else
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v56 = swift_bridgeObjectRelease();
      if ((v65 & 1) == 0)
      {
        v66 = (float32x4_t)static simd_quatf.identity;
        goto LABEL_70;
      }
    }
    v67 = *(float32x4_t *)(v2 + 224);
    v68 = (int32x4_t)vnegq_f32(v67);
    v69 = (int8x16_t)vtrn2q_s32((int32x4_t)v67, vtrn1q_s32((int32x4_t)v67, v68));
    v70 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v68, 8uLL), *(float32x2_t *)v126.f32, 1), (float32x4_t)vextq_s8(v69, v69, 8uLL), v126.f32[0]);
    v71 = (float32x4_t)vrev64q_s32((int32x4_t)v67);
    v71.i32[0] = v68.i32[1];
    v71.i32[3] = v68.i32[2];
    v72 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v67, v126, 3), v71, v126, 2), v70);
    v73 = (int8x16_t)vmulq_f32(v72, v72);
    v74 = vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
    if (vaddv_f32(v74) == 0.0)
    {
      v66 = *(float32x4_t *)&zmmword_21BE41220[48];
    }
    else
    {
      v75 = vadd_f32(v74, (float32x2_t)vdup_lane_s32((int32x2_t)v74, 1)).u32[0];
      v76 = vrsqrte_f32((float32x2_t)v75);
      v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75, vmul_f32(v76, v76)));
      v66 = vmulq_n_f32(v72, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75, vmul_f32(v77, v77))).f32[0]);
    }
  }
  else
  {
    v66 = *(float32x4_t *)(v2 + 144);
  }
LABEL_70:
  v126 = v66;
  if ((*(_BYTE *)(v2 + 168) & 1) == 0)
  {
    v79 = v58;
    v81 = (const float *)(v2 + 164);
    v80 = vld1q_dup_f32(v81);
LABEL_78:
    v80.i32[3] = 0;
    goto LABEL_79;
  }
  if ((*(_BYTE *)(v2 + 176) & 1) != 0 || (v133 | 0x8000000000000000) == (v58 | 0x8000000000000000))
  {
    v56 = swift_bridgeObjectRelease();
    goto LABEL_77;
  }
  v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v56 = swift_bridgeObjectRelease();
  if ((v78 & 1) != 0)
  {
LABEL_77:
    v79 = v58;
    *(float32x2_t *)v80.f32 = vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)(v2 + 240));
    v80.f32[2] = v127.f32[2] * *(float *)(v2 + 248);
    goto LABEL_78;
  }
  v79 = v58;
  v80 = (float32x4_t)xmmword_21BE41210;
LABEL_79:
  v127 = v80;
  MEMORY[0x24BDAC7A8](v56);
  v112[1] = v124;
  v113 = v126;
  v114 = v82;
  v139[0] = v11;
  v83 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v83, v139, partial apply for implicit closure #16 in __RKEntityTransformAction.perform(with:), v112);
  REMakeSRT();
  v138[0] = v84;
  v138[1] = v85;
  v138[2] = v86;
  if ((*(_BYTE *)(v2 + 176) & 1) != 0 || (v133 | 0x8000000000000000) == (v79 | 0x8000000000000000))
  {
    swift_bridgeObjectRelease();
    goto LABEL_84;
  }
  v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v87 & 1) != 0)
  {
LABEL_84:
    v152.columns[1] = v118;
    v152.columns[0] = v119;
    v152.columns[3] = v116;
    v152.columns[2] = v117;
    __invert_f4(v152);
    REMakeSRTFromMatrix();
    goto LABEL_85;
  }
  REMakeSRT();
LABEL_85:
  v139[0] = v88;
  v139[1] = v89;
  v139[2] = v90;
  specialized static RESRT.* infix(_:_:)((float32x2_t *)v139, (uint64_t)v138, (uint64_t)v136);
  v137[0] = v136[0];
  v137[1] = v136[1];
  v137[2] = v136[2];
  if (*(float *)(v2 + 172) == 0.0)
  {
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      if (RERigidBodyComponentGetRigidBody())
      {
        RERigidBodySleep();
        RENetworkMarkComponentDirty();
      }
    }
  }
  REFromToByAnimationDefaultParameters();
  v91 = *(float *)(v2 + 172);
  RESRTInverse();
  v150[0] = v92;
  v150[1] = v93;
  v150[2] = v94;
  RESRTIdentity();
  v135[3] = v95;
  v135[4] = v96;
  v135[5] = v97;
  specialized static RESRT.* infix(_:_:)((float32x2_t *)v150, (uint64_t)v137, (uint64_t)v135);
  LOBYTE(v140[0]) = *(_BYTE *)(v2 + 177);
  LOBYTE(v148[0]) = *(_BYTE *)(v2 + 178);
  specialized static __RKEntityTransformAction.reEaseFunction(from:type:)((uint64_t)v140);
  outlined init with take of REEasingFunction?((uint64_t)v147, (uint64_t)v148);
  if ((v149 & 1) != 0)
  {
    LOBYTE(v144) = 1;
    *((_QWORD *)&v144 + 1) = "Transform.transform";
    LOBYTE(v145) = 1;
    *((double *)&v145 + 1) = v91;
    if (REAssetManagerTimelineAssetCreateSRTAnimation())
    {
LABEL_93:
      *(_QWORD *)&v144 = 5;
      DWORD2(v144) = 4352;
      *(_QWORD *)&v145 = "SRTFROMTO";
      BYTE8(v145) = 0;
      *(_QWORD *)(v2 + 256) = REAnimationComponentPlay();
      *(_BYTE *)(v2 + 264) = 0;
      RERelease();
      if ((REEntityGetSelfEnabled() & 1) == 0)
      {
        MEMORY[0x22076D154](*(_QWORD *)(v12 + 16), 0);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
        MEMORY[0x22076D154](*(_QWORD *)(v12 + 16), 1);
        RENetworkMarkEntityMetadataDirty();
      }
      RERenderOptionsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      VisibilityMode = RERenderOptionsComponentGetVisibilityMode();
      v20 = 1;
      v99 = 1;
      if (!VisibilityMode)
        v99 = REEntityGetSelfEnabled() ^ 1;
      *(_BYTE *)(v2 + 352) = v99;
      v100 = *(_QWORD *)(v2 + 96);
      v101 = *(_BYTE *)(v2 + 104);
      *(_QWORD *)(v2 + 96) = 1;
      *(_BYTE *)(v2 + 104) = 1;
      *(_QWORD *)&v144 = v100;
      BYTE8(v144) = v101;
      __RKEntityAction.state.didset((uint64_t)&v144);
      v102 = swift_allocObject();
      swift_weakInit();
      v103 = swift_allocObject();
      *(_QWORD *)(v103 + 16) = v102;
      *(_QWORD *)(v103 + 24) = v14;
      *(_DWORD *)(v103 + 32) = v134;
      *(_BYTE *)(v103 + 36) = v59;
      *(_QWORD *)(v103 + 40) = v12;
      v104 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v2 + 32) = partial apply for specialized closure #1 in __RKEntityTransformAction.perform(with:);
      *(_QWORD *)(v2 + 40) = v103;
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v104);
      v134 = type metadata accessor for Entity();
      v143 = &protocol witness table for Entity;
      v142 = *(double *)&v134;
      v140[0] = v12;
      v105 = swift_allocObject();
      swift_weakInit();
      swift_retain();
      specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v140, 0, (char **)&v144);
      v106 = swift_allocObject();
      *(_QWORD *)(v106 + 16) = partial apply for closure #2 in __RKEntityTransformAction.perform(with:);
      *(_QWORD *)(v106 + 24) = v105;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
      v107 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      v133 = type metadata accessor for AnyCancellable();
      *((_QWORD *)&v145 + 1) = v133;
      v146 = MEMORY[0x24BDB9B58];
      swift_release();
      *(_QWORD *)&v144 = v107;
      outlined destroy of BodyTrackingComponent?((uint64_t)v140, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v144, v2 + 272);
      swift_endAccess();
      v143 = &protocol witness table for Entity;
      v142 = *(double *)&v134;
      v140[0] = v12;
      v108 = swift_allocObject();
      swift_weakInit();
      swift_retain();
      specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v140, 0, (char **)&v144);
      v109 = swift_allocObject();
      *(_QWORD *)(v109 + 16) = partial apply for closure #2 in __RKEntityTransformAction.perform(with:);
      *(_QWORD *)(v109 + 24) = v108;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
      v110 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      *((_QWORD *)&v145 + 1) = v133;
      v146 = MEMORY[0x24BDB9B58];
      swift_release();
      *(_QWORD *)&v144 = v110;
      outlined destroy of BodyTrackingComponent?((uint64_t)v140, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v144, v2 + 312);
      swift_endAccess();
      v144 = v11;
      v111 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v111, (uint64_t *)&v144);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      return v20;
    }
    __break(1u);
  }
  v144 = v148[0];
  v145 = v148[1];
  LOBYTE(v140[0]) = 1;
  v140[1] = "Transform.transform";
  v141 = 1;
  v142 = v91;
  result = REAssetManagerTimelineAssetCreateSRTAnimation();
  if (result)
    goto LABEL_93;
  __break(1u);
  return result;
}

uint64_t implicit closure #12 in __RKEntityTransformAction.perform(with:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(25);
  v0._object = (void *)0x800000021BE86710;
  v0._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v0);
  type metadata accessor for simd_quatf(0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t implicit closure #13 in __RKEntityTransformAction.perform(with:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(19);
  v0._object = (void *)0x800000021BE866F0;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4120]);
  v1._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t implicit closure #15 in __RKEntityTransformAction.perform(with:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(62);
  v0._object = (void *)0x800000021BE866B0;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4120]);
  v1._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0xD000000000000015;
  v2._object = (void *)0x800000021BE866D0;
  String.append(_:)(v2);
  type metadata accessor for simd_quatf(0);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x616E696769726F20;
  v3._object = (void *)0xEF3D656C6163536CLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t implicit closure #16 in __RKEntityTransformAction.perform(with:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(47);
  v0._countAndFlagsBits = 0x736E61725477656ELL;
  v0._object = (void *)0xEF3D6E6F6974616CLL;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4120]);
  v1._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x800000021BE86690;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  type metadata accessor for simd_quatf(0);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x6C61635377656E20;
  v3._object = (void *)0xEA00000000003D65;
  String.append(_:)(v3);
  v4._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t specialized closure #1 in __RKEntityTransformAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v7 = result;
    v8 = result + 272;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v8, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v8);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7 + 312, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7 + 312);
    swift_endAccess();
    swift_beginAccess();
    if (*(_QWORD *)(v7 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(_BYTE *)(v7 + 104) == 1) && *(_QWORD *)(v7 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(_QWORD *)(v7 + 256) = 0;
      *(_BYTE *)(v7 + 264) = 1;
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a3 & 0x100000000) == 0 && (_DWORD)a3 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    if (*(_BYTE *)(v7 + 352) == 1)
    {
      RERenderOptionsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if (RERenderOptionsComponentGetVisibilityMode() || (REEntityGetSelfEnabled() & 1) == 0)
      {
        if (REEntityGetSelfEnabled())
        {
          MEMORY[0x22076D154](*(_QWORD *)(a4 + 16), 0);
          RENetworkMarkEntityMetadataDirty();
        }
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityTransformAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 264) & 1) != 0 || *(_QWORD *)(v1 + 16) != *(_QWORD *)(result + 256))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      v4 = *(_QWORD *)(v3 + 96);
      v5 = *(_BYTE *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 2;
      *(_BYTE *)(v3 + 104) = 1;
      v6 = v4;
      v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntityTransformAction.reversed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v11;
  char v12;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(unsigned int *)(v0 + 240);
  v6 = *(float *)(v0 + 172);
  v12 = 1;
  swift_beginAccess();
  v7 = *(_QWORD *)(v0 + 192);
  v11 = 0;
  type metadata accessor for __RKEntityTransformAction();
  swift_allocObject();
  swift_retain();
  v8 = swift_retain();
  v9 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(v8, v1, v2, 0, v4, v3, 0, v5, v6, 0.0, 0.0, &v12, (char *)&v11 + 1, (char *)&v11, 0, v7);
  swift_release();
  return v9;
}

uint64_t __RKEntityTransformAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unsigned __int8 v7;
  float v8;
  char v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  v18 = *(_QWORD *)(v1 + 120);
  v19 = *(_QWORD *)(v1 + 112);
  v17 = *(_BYTE *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 152);
  v16 = *(_QWORD *)(v1 + 144);
  v5 = *(_BYTE *)(v1 + 160);
  v6 = *(unsigned int *)(v1 + 164);
  v7 = *(_BYTE *)(v1 + 168);
  v8 = *(float *)(v1 + 172);
  v22 = *(_BYTE *)(v1 + 176);
  v21 = *(_BYTE *)(v1 + 177);
  v20 = *(_BYTE *)(v1 + 178);
  v9 = *(_BYTE *)(v1 + 179);
  v10 = *(float *)(v1 + 180);
  v11 = *(float *)(v1 + 184);
  swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 192);
  v13 = type metadata accessor for __RKEntityTransformAction();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v14 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(v3, v19, v18, v17, v16, v4, v5, v6 | ((unint64_t)v7 << 32), v8, v10, v11, &v22, &v21, &v20, v9, v12);
  result = swift_release();
  a1[3] = v13;
  *a1 = v14;
  return result;
}

uint64_t __RKEntityTransformAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  float v11;
  char v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23[4];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v18 = *(_QWORD *)(v1 + 120);
    v19 = *(_QWORD *)(v1 + 112);
    v5 = *(_BYTE *)(v1 + 128);
    v6 = *(_QWORD *)(v1 + 144);
    v7 = *(_QWORD *)(v1 + 152);
    v8 = *(_BYTE *)(v1 + 160);
    v9 = *(unsigned int *)(v1 + 164);
    v10 = *(_BYTE *)(v1 + 168);
    v11 = *(float *)(v1 + 172);
    LOBYTE(v22) = *(_BYTE *)(v1 + 176);
    v21 = *(_BYTE *)(v1 + 177);
    v20 = *(_BYTE *)(v1 + 178);
    v12 = *(_BYTE *)(v1 + 179);
    v13 = *(float *)(v1 + 180);
    v14 = *(float *)(v1 + 184);
    swift_beginAccess();
    v15 = *(_QWORD *)(v1 + 192);
    type metadata accessor for __RKEntityTransformAction();
    swift_allocObject();
    swift_retain();
    v16 = swift_retain();
    v4 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(v16, v19, v18, v5, v6, v7, v8, v9 | ((unint64_t)v10 << 32), v11, v13, v14, (char *)&v22, &v21, &v20, v12, v15);
    swift_release();
  }
  else
  {
    __RKEntityTransformAction.copy(with:)(v23);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v22;
    else
      return 0;
  }
  return v4;
}

void __RKEntityTransformAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityTransformAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityTransformAction.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 272, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 312, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityTransformAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 272, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 312, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityTransformAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 272, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 312, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

double specialized static HasTransform.conversionMatrix<A, B>(from:to:)(uint64_t a1, uint64_t a2)
{
  double result;
  float32x4_t v4;
  uint64_t v5;
  float32x4_t v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  uint64_t v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4x4 v16;
  simd_float4 v17;
  simd_float4 v18;
  simd_float4 v19;
  simd_float4 v20;
  float32x4_t v21;
  simd_float4x4 v22;

  if (a1)
  {
    if (a2 && a1 == a2)
    {
      *(_QWORD *)&result = 1065353216;
      return result;
    }
    swift_retain();
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RETransformComponentGetWorldMatrix4x4F();
      v21 = v4;
    }
    else
    {
      v5 = specialized HasHierarchy.parent.getter();
      if (!v5)
      {
        swift_release();
        v21 = *(float32x4_t *)zmmword_21BE41220;
        if (a2)
        {
LABEL_12:
          swift_retain();
          RETransformComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            RETransformComponentGetWorldMatrix4x4F();
            v19 = v8;
            v20 = v7;
            v17 = v10;
            v18 = v9;
          }
          else
          {
            v11 = specialized HasHierarchy.parent.getter();
            if (!v11)
            {
              swift_release();
              v16 = *(simd_float4x4 *)zmmword_21BE41220;
              goto LABEL_20;
            }
            *(double *)v12.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v11, 0);
            v19 = v13;
            v20 = v12;
            v17 = v15;
            v18 = v14;
            swift_release();
          }
          swift_release();
          v16.columns[1] = v19;
          v16.columns[0] = v20;
          v16.columns[3] = v17;
          v16.columns[2] = v18;
LABEL_20:
          v22 = __invert_f4(v16);
          *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v22.columns[0], v21.f32[0]), (float32x4_t)v22.columns[1], *(float32x2_t *)v21.f32, 1), (float32x4_t)v22.columns[2], v21, 2), (float32x4_t)v22.columns[3], v21, 3).u64[0];
          return result;
        }
LABEL_19:
        v16 = *(simd_float4x4 *)zmmword_21BE41220;
        goto LABEL_20;
      }
      *(double *)v6.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v5, 0);
      v21 = v6;
      swift_release();
    }
    swift_release();
    if (a2)
      goto LABEL_12;
    goto LABEL_19;
  }
  *(_QWORD *)&result = 1065353216;
  v21 = *(float32x4_t *)zmmword_21BE41220;
  if (a2)
    goto LABEL_12;
  return result;
}

uint64_t specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, float a9, float a10, float a11, char *a12, char *a13, char *a14, char a15, uint64_t a16)
{
  uint64_t v16;
  char v18;
  char v19;
  char v20;

  v18 = *a12;
  v19 = *a13;
  v20 = *a14;
  *(_QWORD *)(v16 + 192) = 0;
  *(_OWORD *)(v16 + 208) = 0u;
  *(_OWORD *)(v16 + 224) = 0u;
  *(_OWORD *)(v16 + 240) = xmmword_21BE41210;
  *(_QWORD *)(v16 + 256) = 0;
  *(_BYTE *)(v16 + 264) = 1;
  *(_OWORD *)(v16 + 272) = 0u;
  *(_OWORD *)(v16 + 288) = 0u;
  *(_OWORD *)(v16 + 304) = 0u;
  *(_OWORD *)(v16 + 320) = 0u;
  *(_OWORD *)(v16 + 336) = 0u;
  *(_BYTE *)(v16 + 352) = 0;
  *(_QWORD *)(v16 + 112) = a2;
  *(_QWORD *)(v16 + 120) = a3;
  *(_BYTE *)(v16 + 128) = a4 & 1;
  *(_QWORD *)(v16 + 144) = a5;
  *(_QWORD *)(v16 + 152) = a6;
  *(_BYTE *)(v16 + 160) = a7 & 1;
  *(_DWORD *)(v16 + 164) = a8;
  *(_BYTE *)(v16 + 168) = BYTE4(a8) & 1;
  *(float *)(v16 + 172) = a9;
  *(_BYTE *)(v16 + 176) = v18;
  *(_BYTE *)(v16 + 177) = v19;
  *(_BYTE *)(v16 + 178) = v20;
  *(float *)(v16 + 180) = a10;
  *(float *)(v16 + 184) = a11;
  *(_BYTE *)(v16 + 179) = a15;
  swift_beginAccess();
  *(_QWORD *)(v16 + 192) = a16;
  swift_retain();
  swift_release();
  return __RKEntityAction.init(targetEntity:)(a1);
}

void specialized static __RKEntityTransformAction.reEaseFunction(from:type:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_21BAC3A94()
{
  uint64_t v0;
  uint8x8_t v1;
  uint64_t result;
  __int128 v3;
  __int128 v4;

  RECreateBackEase();
  v1.i32[0] = *(_DWORD *)((char *)&v4 + 9);
  *(_DWORD *)((char *)&v4 + 9) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
  result = REEasingFunctionSetMode();
  *(_OWORD *)v0 = v3;
  *(_OWORD *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 32) = 0;
  return result;
}

uint64_t partial apply for implicit closure #12 in __RKEntityTransformAction.perform(with:)()
{
  return implicit closure #12 in __RKEntityTransformAction.perform(with:)();
}

uint64_t partial apply for implicit closure #13 in __RKEntityTransformAction.perform(with:)()
{
  return implicit closure #13 in __RKEntityTransformAction.perform(with:)();
}

uint64_t partial apply for implicit closure #15 in __RKEntityTransformAction.perform(with:)()
{
  return implicit closure #15 in __RKEntityTransformAction.perform(with:)();
}

uint64_t partial apply for implicit closure #16 in __RKEntityTransformAction.perform(with:)()
{
  return implicit closure #16 in __RKEntityTransformAction.perform(with:)();
}

__n128 specialized static RESRT.* infix(_:_:)@<Q0>(float32x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  __n128 result;
  float32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  result.n128_u64[0] = (unint64_t)vmul_f32(*a1, *(float32x2_t *)a2);
  v3 = a1[1].f32[0];
  result.n128_f32[2] = v3 * *(float *)(a2 + 8);
  result.n128_u32[3] = 0;
  v5 = *(float32x4_t *)(a2 + 16);
  v6 = (int32x4_t)vnegq_f32(v5);
  v7 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v6));
  v8 = *(float32x4_t *)a1[2].f32;
  v9 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL), *(float32x2_t *)v8.f32, 1), (float32x4_t)vextq_s8(v7, v7, 8uLL), v8.f32[0]);
  v10 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
  v10.i32[0] = v6.i32[1];
  v10.i32[3] = v6.i32[2];
  v11 = vmlaq_laneq_f32(vmulq_laneq_f32(v5, v8, 3), v10, v8, 2);
  v12 = vmulq_f32(v8, (float32x4_t)xmmword_21BE516F0);
  v13 = (int32x4_t)vnegq_f32(v12);
  v14 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v13, 8uLL), vmuls_lane_f32(*(float *)(a2 + 36), *a1, 1));
  v15 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v13));
  v16 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v16.i32[0] = v13.i32[1];
  v16.i32[3] = v13.i32[2];
  v17 = vmlaq_n_f32(vmlaq_n_f32(v14, (float32x4_t)vextq_s8(v15, v15, 8uLL), *(float *)(a2 + 32) * COERCE_FLOAT(*a1)), v16, v3 * *(float *)(a2 + 40));
  v18 = (int32x4_t)vnegq_f32(v17);
  v19 = (int8x16_t)vtrn2q_s32((int32x4_t)v17, vtrn1q_s32((int32x4_t)v17, v18));
  v20 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 8uLL), *(float32x2_t *)v8.f32, 1), (float32x4_t)vextq_s8(v19, v19, 8uLL), v8.f32[0]);
  v21 = (float32x4_t)vrev64q_s32((int32x4_t)v17);
  v21.i32[0] = v18.i32[1];
  v21.i32[3] = v18.i32[2];
  v22 = vaddq_f32(*(float32x4_t *)a1[4].f32, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v17, v8, 3), v21, v8, 2), v20));
  v22.i32[3] = 0;
  *(__n128 *)a3 = result;
  *(float32x4_t *)(a3 + 16) = vaddq_f32(v11, v9);
  *(float32x4_t *)(a3 + 32) = v22;
  return result;
}

uint64_t outlined init with take of REEasingFunction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for REEasingFunction?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BAC3D08()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BAC3D2C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in __RKEntityTransformAction.perform(with:)()
{
  uint64_t v0;

  return specialized closure #1 in __RKEntityTransformAction.perform(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32), *(_QWORD *)(v0 + 40));
}

uint64_t partial apply for closure #2 in __RKEntityTransformAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntityTransformAction.perform(with:)(a1);
}

uint64_t sub_21BAC3D98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityMoveSelection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityMoveSelection] and conformance [A], &demangling cache variable for type metadata for [__RKEntityMoveSelection], MEMORY[0x24BEE12E0]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityMoveEase()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityMoveEase] and conformance [A], &demangling cache variable for type metadata for [__RKEntityMoveEase], MEMORY[0x24BEE12E0]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityMoveEaseType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityMoveEaseType] and conformance [A], &demangling cache variable for type metadata for [__RKEntityMoveEaseType], MEMORY[0x24BEE12E0]);
}

uint64_t sub_21BAC3F18@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 192);
  return swift_retain();
}

uint64_t storeEnumTagSinglePayload for __RKEntityMoveSelection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BAC3FB0 + 4 * byte_21BE5D9CF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BAC3FE4 + 4 * byte_21BE5D9CA[v4]))();
}

uint64_t sub_21BAC3FE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAC3FEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAC3FF4);
  return result;
}

uint64_t sub_21BAC4000(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAC4008);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BAC400C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAC4014(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveSelection()
{
  return &type metadata for __RKEntityMoveSelection;
}

uint64_t storeEnumTagSinglePayload for __RKEntityMoveEase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_21BAC407C + 4 * byte_21BE5D9D9[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_21BAC40B0 + 4 * byte_21BE5D9D4[v4]))();
}

uint64_t sub_21BAC40B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAC40B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAC40C0);
  return result;
}

uint64_t sub_21BAC40CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAC40D4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_21BAC40D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAC40E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEase()
{
  return &type metadata for __RKEntityMoveEase;
}

uint64_t storeEnumTagSinglePayload for __RKEntityMoveEaseType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BAC4148 + 4 * byte_21BE5D9E3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BAC417C + 4 * byte_21BE5D9DE[v4]))();
}

uint64_t sub_21BAC417C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAC4184(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAC418CLL);
  return result;
}

uint64_t sub_21BAC4198(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAC41A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BAC41A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAC41AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEaseType()
{
  return &type metadata for __RKEntityMoveEaseType;
}

uint64_t method lookup function for __RKEntityTransformAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityTransformAction.relativeToEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of __RKEntityTransformAction.relativeToEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of __RKEntityTransformAction.relativeToEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
}

uint64_t dispatch thunk of __RKEntityTransformAction.__allocating_init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t))(v8 + 1024))(a1, a2, a3, a4 & 1, a5, a6, a7 & 1, a8 | ((HIDWORD(a8) & 1) << 32));
}

unint64_t static AudioFileGroupResource.load(named:from:in:)(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t inited;

  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 58;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11 = specialized static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(a3, a4, a5);
  swift_bridgeObjectRelease();
  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = type metadata accessor for AudioFileGroupResource();
    *(_QWORD *)(inited + 64) = &protocol witness table for AudioFileGroupResource;
    *(_QWORD *)(inited + 32) = v11;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v11;
}

void AudioFileGroupResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t AudioFileGroupResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

_QWORD *AnimationGroup.group.getter()
{
  _QWORD *v0;
  _QWORD *result;
  uint64_t ChildrenTimelineCount;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TimelineAsset;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE v23[24];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  if (*v0)
    return (_QWORD *)swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v0[26] + 16))
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  ChildrenTimelineCount = RETimelineDefinitionGetChildrenTimelineCount();
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ChildrenTimelineCount & ~(ChildrenTimelineCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  v30 = result;
  if (ChildrenTimelineCount < 0)
  {
    __break(1u);
  }
  else if (ChildrenTimelineCount)
  {
    for (i = 0; i != ChildrenTimelineCount; ++i)
    {
      if (RETimelineDefinitionCreateChildTimelineRef())
      {
        RERetain();
        v4 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v4, (uint64_t)v27);
        v5 = v28;
        v6 = v29;
        __swift_project_boxed_opaque_existential_1(v27, v28);
        (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          v8 = TimelineAsset;
          RETimelineDefinitionGetName();
          v9 = String.init(cString:)();
          v11 = v10;
          type metadata accessor for AnimationResource();
          v12 = (_QWORD *)swift_allocObject();
          v12[2] = v8;
          v12[3] = v9;
          v12[4] = v11;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
          RERelease();
          AnimationResource.definition.getter((uint64_t *)&v24);
          swift_release();
          outlined init with take of BindableDataInternal(&v24, (uint64_t)v27);
          outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)&v24);
          v13 = v30;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
            v30 = v13;
          }
          v15 = v13[2];
          v14 = v13[3];
          if (v15 >= v14 >> 1)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
          v16 = v25;
          v17 = v26;
          v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v24, v25);
          v19 = MEMORY[0x24BDAC7A8](v18);
          v21 = &v23[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
          (*(void (**)(_BYTE *, __n128))(v22 + 16))(v21, v19);
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, (uint64_t)v21, (uint64_t *)&v30, v16, v17);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        }
        else
        {
          RERelease();
        }
        RERelease();
      }
    }
    return v30;
  }
  return result;
}

uint64_t AnimationGroup.group.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AnimationGroup.group.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = AnimationGroup.group.getter();
  return AnimationGroup.group.modify;
}

uint64_t AnimationGroup.group.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v2;
  }
  return result;
}

uint64_t AnimationGroup.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_BYTE *)(v0 + 192);
  if (*(_QWORD *)(v0 + 168))
  {
    v4 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 208) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 192));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 192));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path getter for AnimationGroup.name : AnimationGroup@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  _OWORD v15[10];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = *(_OWORD *)(a1 + 176);
  v16 = *(_OWORD *)(a1 + 160);
  v17 = v3;
  v18 = *(_OWORD *)(a1 + 192);
  v19 = *(_QWORD *)(a1 + 208);
  v4 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v4;
  v5 = *(_OWORD *)(a1 + 144);
  v15[8] = *(_OWORD *)(a1 + 128);
  v15[9] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v6;
  v7 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v8;
  v9 = *((_QWORD *)&v16 + 1);
  v10 = v17;
  v11 = v18;
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = v16;
    outlined retain of AnimationGroup((uint64_t)v15);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v10, *((uint64_t *)&v10 + 1), v11);
    swift_retain();
  }
  else if (*(_QWORD *)(v19 + 16))
  {
    outlined retain of AnimationGroup((uint64_t)v15);
    outlined copy of BindTarget?(v10, *((uint64_t *)&v10 + 1), v11);
    swift_retain();
    RETimelineDefinitionGetName();
    v12 = String.init(cString:)();
    v9 = v13;
  }
  else
  {
    outlined retain of AnimationGroup((uint64_t)v15);
    outlined copy of BindTarget?(v10, *((uint64_t *)&v10 + 1), v11);
    swift_retain();
    v12 = 0;
    v9 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v10, *((uint64_t *)&v10 + 1), v11);
  swift_release();
  result = outlined release of AnimationGroup((uint64_t)v15);
  *a2 = v12;
  a2[1] = v9;
  return result;
}

uint64_t AnimationGroup.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return result;
}

uint64_t (*AnimationGroup.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 176);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_BYTE *)(v1 + 192);
  if (v3)
  {
    v7 = *(_QWORD *)(v1 + 160);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v5, v6);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 208) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_BYTE *)(v1 + 192));
    swift_retain();
    RETimelineDefinitionGetName();
    v7 = String.init(cString:)();
    v3 = v8;
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_BYTE *)(v1 + 192));
    swift_retain();
    v7 = 0;
    v3 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v4, v5, v6);
  swift_release();
  *a1 = v7;
  a1[1] = v3;
  return AnimationGroup.name.modify;
}

uint64_t AnimationGroup.name.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 160) = v4;
    *(_QWORD *)(v3 + 168) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 160) = v4;
    *(_QWORD *)(v3 + 168) = v2;
  }
  return result;
}

uint64_t AnimationGroup.blendLayer.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 200) != 1)
    return *(unsigned int *)(v0 + 196);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 208) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t AnimationGroup.blendLayer.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 196) = result;
  *(_BYTE *)(v1 + 200) = 0;
  return result;
}

uint64_t *(*AnimationGroup.blendLayer.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if (*(_BYTE *)(v1 + 200) == 1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 16);
    if (v3)
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 196);
  }
  *v2 = v3;
  return AnimationGroup.blendLayer.modify;
}

uint64_t *AnimationGroup.blendLayer.modify(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_DWORD *)(v1 + 196) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 200) = 0;
  return result;
}

uint64_t AnimationGroup.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 176);
  v4 = *(_QWORD *)(v1 + 184);
  v5 = *(unsigned __int8 *)(v1 + 192);
  if (v5 == 255)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 208) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = v11;
      v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v9 = 0;
      v8 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  return swift_release();
}

uint64_t key path setter for AnimationGroup.bindTarget : AnimationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 176);
  v6 = *(_QWORD *)(a2 + 184);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_BYTE *)(a2 + 192);
  outlined copy of BindTarget(*(_QWORD *)a1, v4, v7);
  result = outlined consume of BindTarget?(v5, v6, v8);
  *(_QWORD *)(a2 + 176) = v3;
  *(_QWORD *)(a2 + 184) = v4;
  *(_BYTE *)(a2 + 192) = v7;
  return result;
}

uint64_t AnimationGroup.bindTarget.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_BYTE *)(v1 + 192));
  *(_QWORD *)(v1 + 176) = v2;
  *(_QWORD *)(v1 + 184) = v3;
  *(_BYTE *)(v1 + 192) = v4;
  return result;
}

uint64_t (*AnimationGroup.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  __int128 v12;
  char v13;

  *(_QWORD *)(a1 + 24) = v1;
  v3 = *(_QWORD *)(v1 + 176);
  v4 = *(_QWORD *)(v1 + 184);
  v5 = *(unsigned __int8 *)(v1 + 192);
  v6 = *(_QWORD *)(v1 + 208);
  if (v5 == 255)
  {
    if (*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v7 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v7, v8, (uint64_t)&v12);
      swift_bridgeObjectRelease();
      v9 = v12;
      v10 = v13;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v10 = 0;
      v9 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v9;
    *(_BYTE *)(a1 + 16) = v10;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  swift_release();
  return AnimationGroup.bindTarget.modify;
}

uint64_t AnimationGroup.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(v2 + 176);
  v7 = *(_QWORD *)(v2 + 184);
  v8 = *(_BYTE *)(v2 + 192);
  if ((a2 & 1) != 0)
  {
    outlined copy of BindTarget(*(_QWORD *)a1, v3, v5);
    outlined consume of BindTarget?(v6, v7, v8);
    *(_QWORD *)(v2 + 176) = v4;
    *(_QWORD *)(v2 + 184) = v3;
    *(_BYTE *)(v2 + 192) = v5;
    return outlined consume of BindTarget(v4, v3, v5);
  }
  else
  {
    result = outlined consume of BindTarget?(*(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 184), *(_BYTE *)(v2 + 192));
    *(_QWORD *)(v2 + 176) = v4;
    *(_QWORD *)(v2 + 184) = v3;
    *(_BYTE *)(v2 + 192) = v5;
  }
  return result;
}

uint64_t AnimationGroup.fillMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 202) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 201);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *AnimationGroup.fillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 201) = *result;
  return result;
}

unsigned __int8 *(*AnimationGroup.fillMode.modify(_QWORD *a1))(unsigned __int8 *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 202) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 16);
    if (v3)
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)(v1 + 201);
  }
  *v2 = v3;
  return AnimationGroup.fillMode.modify;
}

unsigned __int8 *AnimationGroup.fillMode.modify(unsigned __int8 *result)
{
  *(_WORD *)(*(_QWORD *)result + 201) = result[8];
  return result;
}

uint64_t AnimationGroup.additive.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 203);
  if (v1 != 2)
    return v1 & 1;
  result = *(_QWORD *)(*(_QWORD *)(v0 + 208) + 16);
  if (result)
    return RETimelineDefinitionIsAdditive();
  return result;
}

uint64_t AnimationGroup.additive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 203) = result;
  return result;
}

_BYTE *(*AnimationGroup.additive.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = *(unsigned __int8 *)(v1 + 203);
  if (v3 == 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 16);
    if (v4)
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *v2 = v4;
  return AnimationGroup.additive.modify;
}

_BYTE *AnimationGroup.additive.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 203) = result[8];
  return result;
}

uint64_t AnimationGroup.trimStart.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipStart;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 120);
  v8[6] = *(_OWORD *)(v0 + 104);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 152);
  v2 = *(_OWORD *)(v0 + 56);
  v8[2] = *(_OWORD *)(v0 + 40);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 88);
  v8[4] = *(_OWORD *)(v0 + 72);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0)
    return *(_QWORD *)&v8[0];
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationGroup.trimStart.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

void (*AnimationGroup.trimStart.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipStart;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(_QWORD *)(v1 + 152);
  v6 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 9) & 1) == 0)
  {
    v10 = *v3;
    v11 = v3[1] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
  if (!ClipStart)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipStart;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return AnimationGroup.trimStart.modify;
}

void AnimationGroup.trimStart.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 16) = v3;
  free((void *)v1);
}

uint64_t AnimationGroup.trimEnd.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipEnd;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_OWORD *)(v0 + 120);
  v14 = *(_OWORD *)(v0 + 104);
  v15 = v1;
  v16 = *(_OWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 152);
  v2 = *(_OWORD *)(v0 + 56);
  v10 = *(_OWORD *)(v0 + 40);
  v11 = v2;
  v3 = *(_OWORD *)(v0 + 88);
  v12 = *(_OWORD *)(v0 + 72);
  v13 = v3;
  v4 = *(_OWORD *)(v0 + 24);
  v8 = *(_OWORD *)(v0 + 8);
  v9 = v4;
  if ((BYTE9(v4) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationGroup.trimEnd.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  *(_BYTE *)(v2 + 33) = 0;
  return result;
}

void (*AnimationGroup.trimEnd.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipEnd;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(_QWORD *)(v1 + 152);
  v6 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 25) & 1) == 0)
  {
    v10 = v3[2];
    v11 = v3[3] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
  if (!ClipEnd)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipEnd;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return AnimationGroup.trimEnd.modify;
}

void AnimationGroup.trimEnd.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 32) = v3;
  free((void *)v1);
}

uint64_t AnimationGroup.trimDuration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *ClipDuration;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_OWORD *)(v0 + 40);
  v2 = *(_OWORD *)(v0 + 120);
  v14 = *(_OWORD *)(v0 + 104);
  v15 = v2;
  v16 = *(_OWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 152);
  v3 = *(_OWORD *)(v0 + 56);
  v10 = v1;
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 88);
  v12 = *(_OWORD *)(v0 + 72);
  v13 = v4;
  v5 = *(_OWORD *)(v0 + 24);
  v9[0] = *(_OWORD *)(v0 + 8);
  v9[1] = v5;
  if ((BYTE9(v1) & 1) == 0)
    return v10;
  v6 = *(_QWORD *)(v17 + 16);
  if (v6)
  {
    outlined retain of TimelineClipProperties((uint64_t)v9);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      v6 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v9);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v9);
      return 0;
    }
  }
  return v6;
}

uint64_t AnimationGroup.trimDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  *(_BYTE *)(v2 + 49) = 0;
  return result;
}

void (*AnimationGroup.trimDuration.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipDuration;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(_QWORD *)(v1 + 152);
  v6 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 41) & 1) == 0)
  {
    v10 = v3[4];
    v11 = v3[5] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
  if (!ClipDuration)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipDuration;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return AnimationGroup.trimDuration.modify;
}

void AnimationGroup.trimDuration.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 48) = v3;
  free((void *)v1);
}

double AnimationGroup.offset.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_OWORD *)(v0 + 120);
  v12 = *(_OWORD *)(v0 + 104);
  v13 = v1;
  v14 = *(_OWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 152);
  v2 = *(_OWORD *)(v0 + 56);
  v8[2] = *(_OWORD *)(v0 + 40);
  v9 = v2;
  v3 = *(_OWORD *)(v0 + 88);
  v10 = *(_OWORD *)(v0 + 72);
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationGroup.offset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
  *(_BYTE *)(v1 + 64) = 0;
}

void (*AnimationGroup.offset.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = v3 + 19;
  v3[20] = v1;
  v6 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(_QWORD *)(v1 + 152);
  v7 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[7] & 1) != 0)
  {
    v10 = 0;
    if (*(_QWORD *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipOffset();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = v3[6];
  }
  *v5 = v10;
  return AnimationGroup.offset.modify;
}

void AnimationGroup.offset.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = v1[20];
  *(_QWORD *)(v2 + 56) = v1[19];
  *(_BYTE *)(v2 + 64) = 0;
  free(v1);
}

double AnimationGroup.delay.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 120);
  v11 = *(_OWORD *)(v0 + 104);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 152);
  v2 = *(_OWORD *)(v0 + 56);
  v8[2] = *(_OWORD *)(v0 + 40);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 88);
  v9 = *(_OWORD *)(v0 + 72);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationGroup.delay.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
  *(_BYTE *)(v1 + 80) = 0;
}

void (*AnimationGroup.delay.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = v3 + 19;
  v3[20] = v1;
  v6 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(_QWORD *)(v1 + 152);
  v7 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[9] & 1) != 0)
  {
    v10 = 0;
    if (*(_QWORD *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipDelay();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = v3[8];
  }
  *v5 = v10;
  return AnimationGroup.delay.modify;
}

void AnimationGroup.delay.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = v1[20];
  *(_QWORD *)(v2 + 72) = v1[19];
  *(_BYTE *)(v2 + 80) = 0;
  free(v1);
}

float AnimationGroup.speed.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 120);
  v11 = *(_OWORD *)(v0 + 104);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 152);
  v2 = *(_OWORD *)(v0 + 56);
  v8[2] = *(_OWORD *)(v0 + 40);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 88);
  v9 = *(_OWORD *)(v0 + 72);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  if ((v10 & 1) == 0)
    return *((float *)&v9 + 3);
  v5 = 1.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationGroup.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 84) = a1;
  *(_BYTE *)(v1 + 88) = 0;
}

void (*AnimationGroup.speed.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  float *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float v10;
  float v11;

  v3 = (char *)malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = (float *)(v3 + 160);
  v6 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  *((_QWORD *)v3 + 18) = *(_QWORD *)(v1 + 152);
  *((_QWORD *)v3 + 19) = v1;
  v7 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[80] & 1) != 0)
  {
    v10 = 1.0;
    if (*(_QWORD *)(*((_QWORD *)v3 + 18) + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipSpeed();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = *((float *)v3 + 19);
  }
  *v5 = v10;
  return AnimationGroup.speed.modify;
}

void AnimationGroup.speed.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 152);
  *(_DWORD *)(v2 + 84) = *(_DWORD *)(v1 + 160);
  *(_BYTE *)(v2 + 88) = 0;
  free((void *)v1);
}

void AnimationGroup.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int ClipLoopBehavior;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 120);
  v11 = *(_OWORD *)(v1 + 104);
  v12 = v3;
  v13 = *(_OWORD *)(v1 + 136);
  v14 = *(_QWORD *)(v1 + 152);
  v4 = *(_OWORD *)(v1 + 56);
  v9[2] = *(_OWORD *)(v1 + 40);
  v9[3] = v4;
  v5 = *(_OWORD *)(v1 + 88);
  v9[4] = *(_OWORD *)(v1 + 72);
  v10 = v5;
  v6 = *(_OWORD *)(v1 + 24);
  v9[0] = *(_OWORD *)(v1 + 8);
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    v7 = *(_QWORD *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

_BYTE *AnimationGroup.repeatMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 89) = *result;
  return result;
}

void (*AnimationGroup.repeatMode.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int ClipLoopBehavior;

  v2 = (unsigned __int8 *)malloc(0xA8uLL);
  v3 = (uint64_t)v2;
  *a1 = v2;
  v4 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v2 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v2 + 7) = v4;
  *((_OWORD *)v2 + 8) = *(_OWORD *)(v1 + 136);
  *((_QWORD *)v2 + 18) = *(_QWORD *)(v1 + 152);
  *((_QWORD *)v2 + 19) = v1;
  v5 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v2 + 3) = v5;
  v6 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v2 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v2 + 5) = v6;
  v7 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v2 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v2 + 1) = v7;
  LODWORD(a1) = v2[81];
  if ((_DWORD)a1 == 4)
  {
    a1 = *(_QWORD **)(*((_QWORD *)v2 + 18) + 16);
    if (a1)
    {
      outlined retain of TimelineClipProperties((uint64_t)v2);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(a1) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties(v3);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(a1) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_BYTE *)(v3 + 160) = (_BYTE)a1;
  return AnimationGroup.repeatMode.modify;
}

void AnimationGroup.repeatMode.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_BYTE *)(*(_QWORD *)(v1 + 152) + 89) = *(_BYTE *)(v1 + 160);
  free((void *)v1);
}

double AnimationGroup.duration.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v0 = AnimationGroup.group.getter();
  v1 = v0[2];
  if (v1)
  {
    v2 = (uint64_t)(v0 + 4);
    v3 = 0.0;
    do
    {
      outlined init with copy of __REAssetService(v2, (uint64_t)v8);
      v4 = v9;
      v5 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      v6 = (*(double (**)(uint64_t, uint64_t))(v5 + 272))(v4, v5);
      if (v3 <= v6)
        v3 = v6;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0.0;
  }
  return v3;
}

uint64_t AnimationGroup.init(group:name:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, char a13, uint64_t a14, char a15)
{
  char v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v32;
  char v34;
  uint64_t v35[2];
  char v36;
  char v37[2];
  _OWORD v38[9];
  uint64_t v39;

  v22 = a7 & 1;
  v23 = *a4;
  v32 = *a5;
  type metadata accessor for TimelineDefinition();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 0;
  v35[0] = 0;
  v35[1] = 0;
  v36 = -1;
  v37[0] = v23;
  v34 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v35, 0, v37, &v34, a6, v22, (uint64_t)v38, a10, a11, a12, a8, a13 & 1, a14, a15 & 1);
  *(_OWORD *)(a9 + 104) = v38[6];
  v25 = v38[8];
  *(_OWORD *)(a9 + 120) = v38[7];
  *(_OWORD *)(a9 + 136) = v25;
  v26 = v38[3];
  *(_OWORD *)(a9 + 40) = v38[2];
  *(_OWORD *)(a9 + 56) = v26;
  v27 = v38[5];
  *(_OWORD *)(a9 + 72) = v38[4];
  *(_OWORD *)(a9 + 88) = v27;
  v28 = v38[1];
  *(_OWORD *)(a9 + 8) = v38[0];
  *(_QWORD *)a9 = a1;
  v29 = v39;
  *(_OWORD *)(a9 + 24) = v28;
  *(_QWORD *)(a9 + 152) = v29;
  *(_QWORD *)(a9 + 160) = a2;
  *(_QWORD *)(a9 + 176) = 0;
  *(_QWORD *)(a9 + 184) = 0;
  *(_QWORD *)(a9 + 168) = a3;
  *(_BYTE *)(a9 + 192) = -1;
  *(_DWORD *)(a9 + 196) = 0;
  *(_BYTE *)(a9 + 200) = 0;
  *(_BYTE *)(a9 + 201) = v32;
  *(_BYTE *)(a9 + 202) = 0;
  *(_BYTE *)(a9 + 203) = 0;
  *(_QWORD *)(a9 + 208) = v24;
  return swift_bridgeObjectRetain();
}

uint64_t AnimationGroup.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(_QWORD *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            v9 = 0;
            ClipSourceRef = 0;
            v10 = 0;
          }
          else
          {
            v9 = 0;
            v10 = 0;
            *(_QWORD *)(v8 + 16) = 0;
          }
          v14 = 2;
          v13 = 1;
          v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        ClipSourceRef = String.init(cString:)();
        v10 = v11;
      }
      else
      {
        swift_retain();
        v10 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v8 = v2;
      v9 = v2;
LABEL_14:
      v16 = v13;
      v15 = v13;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 17) = 1;
      *(_QWORD *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 33) = 1;
      *(_QWORD *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 49) = 1;
      *(_QWORD *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 64) = 1;
      *(_QWORD *)(a1 + 72) = 0;
      *(_BYTE *)(a1 + 80) = 1;
      *(_DWORD *)(a1 + 84) = 0;
      *(_BYTE *)(a1 + 88) = 1;
      *(_BYTE *)(a1 + 89) = 4;
      *(_QWORD *)(a1 + 96) = v9;
      *(_QWORD *)(a1 + 104) = ClipSourceRef;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 112) = v10;
      *(_BYTE *)(a1 + 136) = -1;
      *(_DWORD *)(a1 + 140) = 0;
      *(_WORD *)(a1 + 144) = v16;
      *(_BYTE *)(a1 + 146) = v15;
      *(_BYTE *)(a1 + 147) = v14;
      *(_QWORD *)(a1 + 152) = v12;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_BYTE *)(a1 + 192) = -1;
      *(_DWORD *)(a1 + 196) = 0;
      *(_BYTE *)(a1 + 200) = 1;
      *(_BYTE *)(a1 + 201) = 0;
      *(_BYTE *)(a1 + 202) = 1;
      *(_BYTE *)(a1 + 203) = 2;
      *(_QWORD *)(a1 + 208) = v8;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AnimationGroup.createResource()()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned __int8 v9;
  char v10;
  uint64_t v11;
  uint64_t TimelineGroup;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  os_log_type_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  int v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76[2];
  uint64_t v77;
  uint64_t v78[5];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _BYTE v93[160];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v1 = *(_OWORD *)(v0 + 176);
  v94 = *(_OWORD *)(v0 + 160);
  v95 = v1;
  v96 = *(_OWORD *)(v0 + 192);
  v97 = *(_QWORD *)(v0 + 208);
  v2 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)&v93[96] = *(_OWORD *)(v0 + 96);
  *(_OWORD *)&v93[112] = v2;
  v3 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)&v93[128] = *(_OWORD *)(v0 + 128);
  *(_OWORD *)&v93[144] = v3;
  v4 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)&v93[32] = *(_OWORD *)(v0 + 32);
  *(_OWORD *)&v93[48] = v4;
  v5 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)&v93[64] = *(_OWORD *)(v0 + 64);
  *(_OWORD *)&v93[80] = v5;
  v6 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)v93 = *(_OWORD *)v0;
  *(_OWORD *)&v93[16] = v6;
  v7 = v94;
  v8 = v95;
  v9 = v96;
  v10 = BYTE8(v96);
  v11 = v97;
  if (*((_QWORD *)&v94 + 1))
  {
    v58 = BYTE11(v96);
    v60 = BYTE10(v96);
    v62 = BYTE9(v96);
    v64 = DWORD1(v96);
    outlined retain of AnimationGroup((uint64_t)v93);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v8, *((uint64_t *)&v8 + 1), v9);
    swift_retain();
  }
  else
  {
    if (v96 == 255)
      v29 = BYTE8(v96);
    else
      v29 = 0;
    if ((v29 & BYTE10(v96)) == 1 && BYTE11(v96) == 2 && !*(_QWORD *)v93)
    {
      v85 = *(_OWORD *)&v93[104];
      v86 = *(_OWORD *)&v93[120];
      v87 = *(_OWORD *)&v93[136];
      *(_QWORD *)&v88 = *(_QWORD *)&v93[152];
      v81 = *(_OWORD *)&v93[40];
      v82 = *(_OWORD *)&v93[56];
      v83 = *(_OWORD *)&v93[72];
      v84 = *(_OWORD *)&v93[88];
      v79 = *(_OWORD *)&v93[8];
      v80 = *(_OWORD *)&v93[24];
      if (!TimelineClipProperties.isClipped.getter())
        return TimelineDefinition.resource.getter();
      v85 = *(_OWORD *)&v93[104];
      v86 = *(_OWORD *)&v93[120];
      v87 = *(_OWORD *)&v93[136];
      *(_QWORD *)&v88 = *(_QWORD *)&v93[152];
      v81 = *(_OWORD *)&v93[40];
      v82 = *(_OWORD *)&v93[56];
      v83 = *(_OWORD *)&v93[72];
      v84 = *(_OWORD *)&v93[88];
      v79 = *(_OWORD *)&v93[8];
      v80 = *(_OWORD *)&v93[24];
      if ((TimelineClipProperties.isModified.getter() & 1) == 0)
        return TimelineDefinition.resource.getter();
      v85 = *(_OWORD *)&v93[104];
      v86 = *(_OWORD *)&v93[120];
      v87 = *(_OWORD *)&v93[136];
      *(_QWORD *)&v88 = *(_QWORD *)&v93[152];
      v81 = *(_OWORD *)&v93[40];
      v82 = *(_OWORD *)&v93[56];
      v83 = *(_OWORD *)&v93[72];
      v84 = *(_OWORD *)&v93[88];
      v79 = *(_OWORD *)&v93[8];
      v80 = *(_OWORD *)&v93[24];
      return (_QWORD *)TimelineClipProperties.createClip()();
    }
    v58 = BYTE11(v96);
    v60 = BYTE10(v96);
    v62 = BYTE9(v96);
    v64 = DWORD1(v96);
    if (*(_QWORD *)(v97 + 16))
    {
      outlined retain of AnimationGroup((uint64_t)v93);
      outlined copy of BindTarget?(v8, *((uint64_t *)&v8 + 1), v9);
      swift_retain();
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of AnimationGroup((uint64_t)v93);
      outlined copy of BindTarget?(v8, *((uint64_t *)&v8 + 1), v9);
      swift_retain();
    }
  }
  outlined consume of BindTarget?(v8, *((uint64_t *)&v8 + 1), v9);
  swift_release();
  outlined release of AnimationGroup((uint64_t)v93);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  TimelineGroup = RETimelineDefinitionCreateTimelineGroup();
  swift_release();
  v79 = v7;
  v80 = v8;
  LOBYTE(v81) = v9;
  DWORD1(v81) = v64;
  BYTE8(v81) = v10;
  BYTE9(v81) = v62;
  BYTE10(v81) = v60;
  BYTE11(v81) = v58;
  *(_QWORD *)&v82 = v11;
  v65 = TimelineGroup;
  TimelineBaseProperties.writeProperties(_:)((Swift::OpaquePointer)TimelineGroup);
  v13 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13, (uint64_t)&v79);
  v14 = *((_QWORD *)&v80 + 1);
  v15 = v81;
  __swift_project_boxed_opaque_existential_1(&v79, *((uint64_t *)&v80 + 1));
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
  v89 = v94;
  v90 = v95;
  v91 = v96;
  v92 = v97;
  v85 = *(_OWORD *)&v93[96];
  v86 = *(_OWORD *)&v93[112];
  v87 = *(_OWORD *)&v93[128];
  v88 = *(_OWORD *)&v93[144];
  v81 = *(_OWORD *)&v93[32];
  v82 = *(_OWORD *)&v93[48];
  v83 = *(_OWORD *)&v93[64];
  v84 = *(_OWORD *)&v93[80];
  v79 = *(_OWORD *)v93;
  v80 = *(_OWORD *)&v93[16];
  v16 = AnimationGroup.group.getter();
  v17 = v16[2];
  if (v17)
  {
    v18 = (uint64_t)(v16 + 4);
    while (1)
    {
      outlined init with copy of __REAssetService(v18, (uint64_t)&v79);
      outlined init with copy of __REAssetService((uint64_t)&v79, (uint64_t)v78);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinitionInternal);
      if (!swift_dynamicCast())
        break;
      outlined init with take of BindableDataInternal(v76, (uint64_t)&v66);
      v19 = *((_QWORD *)&v67 + 1);
      v20 = v68;
      __swift_project_boxed_opaque_existential_1(&v66, *((uint64_t *)&v67 + 1));
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
      RETimelineDefinitionCreateFromTimeline();
      RETimelineDefinitionAddChildTimeline();
      RERelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
      v18 += 40;
      if (!--v17)
        goto LABEL_7;
    }
    v77 = 0;
    memset(v76, 0, sizeof(v76));
    outlined destroy of AnimationDefinitionInternal?((uint64_t)v76);
    swift_bridgeObjectRelease();
    v31 = static os_log_type_t.error.getter();
    outlined init with copy of __REAssetService((uint64_t)&v79, (uint64_t)&v66);
    type metadata accessor for OS_os_log();
    v32 = static OS_os_log.default.getter();
    v33 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v78[0] = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = *((_QWORD *)&v67 + 1);
      v37 = v68;
      __swift_project_boxed_opaque_existential_1(&v66, *((uint64_t *)&v67 + 1));
      v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
      *(_QWORD *)&v76[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
      _os_log_impl(&dword_21B9AA000, v32, v33, "Animation group could not create resource for timeline %s.", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v35, -1, -1);
      MEMORY[0x220772F44](v34, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
    RERelease();
    return 0;
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v85 = *(_OWORD *)&v93[104];
    v86 = *(_OWORD *)&v93[120];
    v87 = *(_OWORD *)&v93[136];
    *(_QWORD *)&v88 = *(_QWORD *)&v93[152];
    v81 = *(_OWORD *)&v93[40];
    v82 = *(_OWORD *)&v93[56];
    v83 = *(_OWORD *)&v93[72];
    v84 = *(_OWORD *)&v93[88];
    v79 = *(_OWORD *)&v93[8];
    v80 = *(_OWORD *)&v93[24];
    if (TimelineClipProperties.isClipped.getter())
    {
      v61 = *(_QWORD *)&v93[120];
      v63 = *(_QWORD *)&v93[112];
      v59 = *(_QWORD *)&v93[128];
      v56 = *(_DWORD *)&v93[140];
      v57 = v93[136];
      v54 = v93[145];
      v55 = v93[144];
      v52 = v93[147];
      v53 = v93[146];
      v51 = *(_QWORD *)&v93[152];
      v49 = *(_DWORD *)&v93[84];
      v50 = v93[89];
      v48 = v93[88];
      v47 = *(_QWORD *)&v93[72];
      v46 = v93[80];
      v45 = *(_QWORD *)&v93[56];
      v44 = v93[64];
      v40 = v93[49];
      v41 = v93[48];
      v21 = *(_QWORD *)&v93[24];
      v22 = v93[32];
      v23 = v93[33];
      v24 = *(_QWORD *)&v93[8];
      v25 = v93[16];
      v26 = v93[17];
      v42 = *(_QWORD *)&v93[40];
      v43 = *(_QWORD *)&v93[104];
      type metadata accessor for TimelineDefinition();
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v65;
      outlined retain of TimelineClipProperties((uint64_t)&v93[8]);
      RERetain();
      swift_release();
      *(_QWORD *)&v66 = v24;
      BYTE8(v66) = v25;
      BYTE9(v66) = v26;
      *(_QWORD *)&v67 = v21;
      BYTE8(v67) = v22;
      BYTE9(v67) = v23;
      *(_QWORD *)&v68 = v42;
      BYTE8(v68) = v41;
      BYTE9(v68) = v40;
      *(_QWORD *)&v69 = v45;
      BYTE8(v69) = v44;
      *(_QWORD *)&v70 = v47;
      BYTE8(v70) = v46;
      HIDWORD(v70) = v49;
      LOBYTE(v71) = v48;
      BYTE1(v71) = v50;
      *((_QWORD *)&v71 + 1) = v27;
      *(_QWORD *)&v72 = v43;
      *((_QWORD *)&v72 + 1) = v63;
      *(_QWORD *)&v73 = v61;
      *((_QWORD *)&v73 + 1) = v59;
      LOBYTE(v74) = v57;
      DWORD1(v74) = v56;
      BYTE8(v74) = v55;
      BYTE9(v74) = v54;
      BYTE10(v74) = v53;
      BYTE11(v74) = v52;
      v75 = v51;
      *(_QWORD *)&v88 = v51;
      v86 = v73;
      v87 = v74;
      v79 = v66;
      v80 = v67;
      v84 = v71;
      v85 = v72;
      v82 = v69;
      v83 = v70;
      v81 = v68;
      if (v65)
      {
        outlined retain of TimelineClipProperties((uint64_t)&v66);
        swift_retain();
        closure #1 in TimelineClipProperties.createClip()((uint64_t)&v79, v78);
        swift_release();
        outlined release of TimelineClipProperties((uint64_t)&v66);
        outlined release of TimelineClipProperties((uint64_t)&v66);
        v28 = (_QWORD *)v78[0];
      }
      else
      {
        outlined release of TimelineClipProperties((uint64_t)&v66);
        v28 = 0;
      }
    }
    else
    {
      type metadata accessor for TimelineDefinition();
      *(_QWORD *)(swift_allocObject() + 16) = v65;
      RERetain();
      v28 = TimelineDefinition.resource.getter();
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
    }
    RERelease();
    return v28;
  }
}

uint64_t AnimationGroup.group_.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnimationGroup.group_.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AnimationGroup.group_.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return AnimationGroup.group.modify;
}

uint64_t protocol witness for AnimationDefinition.name.getter in conformance AnimationGroup()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_BYTE *)(v0 + 192);
  if (*(_QWORD *)(v0 + 168))
  {
    v4 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 208) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 192));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 192));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t protocol witness for AnimationDefinition.name.setter in conformance AnimationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance AnimationGroup(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)AnimationGroup.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance AnimationGroup()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 200) != 1)
    return *(unsigned int *)(v0 + 196);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 208) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance AnimationGroup(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 196) = result;
  *(_BYTE *)(v1 + 200) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.blendLayer.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.fillMode.getter in conformance AnimationGroup@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 202) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 201);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance AnimationGroup(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 201) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.fillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance AnimationGroup(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_BYTE *)(v1 + 192));
  *(_QWORD *)(v1 + 176) = v2;
  *(_QWORD *)(v1 + 184) = v3;
  *(_BYTE *)(v1 + 192) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance AnimationGroup()
{
  return AnimationGroup.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance AnimationGroup(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.trimStart.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance AnimationGroup()
{
  return AnimationGroup.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance AnimationGroup(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  *(_BYTE *)(v2 + 33) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.trimEnd.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance AnimationGroup()
{
  return AnimationGroup.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance AnimationGroup(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  *(_BYTE *)(v2 + 49) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.trimDuration.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.offset.setter in conformance AnimationGroup(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
  *(_BYTE *)(v1 + 64) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.offset.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.delay.setter in conformance AnimationGroup(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
  *(_BYTE *)(v1 + 80) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.delay.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.speed.setter in conformance AnimationGroup(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 84) = a1;
  *(_BYTE *)(v1 + 88) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.speed.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_BYTE *protocol witness for AnimationDefinition.repeatMode.setter in conformance AnimationGroup(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 89) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance AnimationGroup(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.repeatMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_QWORD *protocol witness for AnimationDefinitionInternal.generate() in conformance AnimationGroup()
{
  _QWORD *result;
  uint64_t v1;

  result = AnimationGroup.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v1 = 0xD00000000000001CLL;
    *(_QWORD *)(v1 + 8) = 0x800000021BE822D0;
    *(_BYTE *)(v1 + 16) = 0;
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

_QWORD *sub_21BAC7324@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = AnimationGroup.group.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BAC734C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_21BAC7390(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 160) = v4;
  *(_QWORD *)(a2 + 168) = v3;
  return result;
}

uint64_t sub_21BAC73D0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 200) == 1)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 16);
    if (result)
      result = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    result = *(unsigned int *)(a1 + 196);
  }
  *a2 = result;
  return result;
}

_DWORD *sub_21BAC7414(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 196) = *result;
  *(_BYTE *)(a2 + 200) = 0;
  return result;
}

double sub_21BAC7424@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  AnimationGroup.bindTarget.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_21BAC7468@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 202) == 1)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(a1 + 201);
  }
  *a2 = result;
  return result;
}

unsigned __int8 *sub_21BAC74AC(unsigned __int8 *result, uint64_t a2)
{
  *(_WORD *)(a2 + 201) = *result;
  return result;
}

uint64_t sub_21BAC74BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 203);
  if (v3 == 2)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 16);
    if (result)
      result = RETimelineDefinitionIsAdditive();
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21BAC7500(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 203) = *result;
  return result;
}

uint64_t sub_21BAC750C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = AnimationGroup.trimStart.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BAC753C(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)result;
  *(_WORD *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_21BAC7554@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = AnimationGroup.trimEnd.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BAC7584(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)result;
  *(_WORD *)(a2 + 32) = v2;
  return result;
}

uint64_t sub_21BAC759C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = AnimationGroup.trimDuration.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BAC75CC(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)result;
  *(_WORD *)(a2 + 48) = v2;
  return result;
}

void sub_21BAC75E4(double *a1@<X8>)
{
  *a1 = AnimationGroup.offset.getter();
}

_QWORD *sub_21BAC760C(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 56) = *result;
  *(_BYTE *)(a2 + 64) = 0;
  return result;
}

void sub_21BAC761C(double *a1@<X8>)
{
  *a1 = AnimationGroup.delay.getter();
}

_QWORD *sub_21BAC7644(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 72) = *result;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

void sub_21BAC7654(float *a1@<X8>)
{
  *a1 = AnimationGroup.speed.getter();
}

_DWORD *sub_21BAC767C(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 84) = *result;
  *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_21BAC768C(_BYTE *a1@<X8>)
{
  char v2;

  AnimationGroup.repeatMode.getter(&v2);
  *a1 = v2;
}

_BYTE *sub_21BAC76C4(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 89) = *result;
  return result;
}

uint64_t sub_21BAC76D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BAC76DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t destroy for AnimationGroup(uint64_t a1)
{
  int v2;
  int v3;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 136);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v2);
  swift_release();
  swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 192);
  if (v3 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), v3);
  return swift_release();
}

uint64_t initializeWithCopy for AnimationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 120);
    v8 = *(_QWORD *)(a2 + 128);
    outlined copy of BindTarget(v7, v8, v6);
    *(_QWORD *)(a1 + 120) = v7;
    *(_QWORD *)(a1 + 128) = v8;
    *(_BYTE *)(a1 + 136) = v6;
  }
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
  v9 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v9;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v10 = *(unsigned __int8 *)(a2 + 192);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 176);
    v12 = *(_QWORD *)(a2 + 184);
    outlined copy of BindTarget(v11, v12, v10);
    *(_QWORD *)(a1 + 176) = v11;
    *(_QWORD *)(a1 + 184) = v12;
    *(_BYTE *)(a1 + 192) = v10;
  }
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  int v21;
  __int128 *v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  int v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = v8;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (__int128 *)(a1 + 120);
  v10 = (__int128 *)(a2 + 120);
  v11 = *(unsigned __int8 *)(a2 + 136);
  if (*(unsigned __int8 *)(a1 + 136) == 255)
  {
    if (v11 == 255)
    {
      v20 = *v10;
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *v9 = v20;
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 120);
      v18 = *(_QWORD *)(a2 + 128);
      outlined copy of BindTarget(v17, v18, *(_BYTE *)(a2 + 136));
      *(_QWORD *)(a1 + 120) = v17;
      *(_QWORD *)(a1 + 128) = v18;
      *(_BYTE *)(a1 + 136) = v11;
    }
  }
  else if (v11 == 255)
  {
    outlined destroy of BindTarget(a1 + 120);
    v19 = *(_BYTE *)(a2 + 136);
    *v9 = *v10;
    *(_BYTE *)(a1 + 136) = v19;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 120);
    v13 = *(_QWORD *)(a2 + 128);
    outlined copy of BindTarget(v12, v13, *(_BYTE *)(a2 + 136));
    v14 = *(_QWORD *)(a1 + 120);
    v15 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(a1 + 128) = v13;
    v16 = *(_BYTE *)(a1 + 136);
    *(_BYTE *)(a1 + 136) = v11;
    outlined consume of BindTarget(v14, v15, v16);
  }
  v21 = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_DWORD *)(a1 + 140) = v21;
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (__int128 *)(a1 + 176);
  v23 = (__int128 *)(a2 + 176);
  v24 = *(unsigned __int8 *)(a2 + 192);
  if (*(unsigned __int8 *)(a1 + 192) == 255)
  {
    if (v24 == 255)
    {
      v33 = *v23;
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *v22 = v33;
    }
    else
    {
      v30 = *(_QWORD *)(a2 + 176);
      v31 = *(_QWORD *)(a2 + 184);
      outlined copy of BindTarget(v30, v31, *(_BYTE *)(a2 + 192));
      *(_QWORD *)(a1 + 176) = v30;
      *(_QWORD *)(a1 + 184) = v31;
      *(_BYTE *)(a1 + 192) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 176);
    v32 = *(_BYTE *)(a2 + 192);
    *v22 = *v23;
    *(_BYTE *)(a1 + 192) = v32;
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 176);
    v26 = *(_QWORD *)(a2 + 184);
    outlined copy of BindTarget(v25, v26, *(_BYTE *)(a2 + 192));
    v27 = *(_QWORD *)(a1 + 176);
    v28 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 176) = v25;
    *(_QWORD *)(a1 + 184) = v26;
    v29 = *(_BYTE *)(a1 + 192);
    *(_BYTE *)(a1 + 192) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  v34 = *(_DWORD *)(a2 + 196);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = v34;
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AnimationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v4;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  v5 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v5;
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a2 + 120);
  v7 = *(unsigned __int8 *)(a1 + 136);
  if (v7 != 255)
  {
    v8 = *(unsigned __int8 *)(a2 + 136);
    if (v8 != 255)
    {
      v9 = *(_QWORD *)(a1 + 120);
      v10 = *(_QWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 120) = *v6;
      *(_BYTE *)(a1 + 136) = v8;
      outlined consume of BindTarget(v9, v10, v7);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 120);
  }
  *(_OWORD *)(a1 + 120) = *v6;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
LABEL_6:
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_release();
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v11;
  swift_bridgeObjectRelease();
  v12 = (_OWORD *)(a2 + 176);
  v13 = *(unsigned __int8 *)(a1 + 192);
  if (v13 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 176) = *v12;
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    goto LABEL_11;
  }
  v14 = *(unsigned __int8 *)(a2 + 192);
  if (v14 == 255)
  {
    outlined destroy of BindTarget(a1 + 176);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(a1 + 176);
  v16 = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *v12;
  *(_BYTE *)(a1 + 192) = v14;
  outlined consume of BindTarget(v15, v16, v13);
LABEL_11:
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationGroup(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 152);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 152) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationGroup()
{
  return &type metadata for AnimationGroup;
}

uint64_t outlined retain of AnimationGroup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 120);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 176);
  v5 = *(_BYTE *)(a1 + 136);
  v6 = *(_BYTE *)(a1 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v5);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v8, v4, v6);
  swift_retain();
  return a1;
}

uint64_t outlined release of AnimationGroup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 120);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 176);
  v5 = *(_BYTE *)(a1 + 136);
  v6 = *(_BYTE *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v8, v4, v6);
  swift_release();
  return a1;
}

uint64_t outlined destroy of AnimationDefinitionInternal?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinitionInternal?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AudioBufferResource.Configuration.shouldLoop.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AudioBufferResource.Configuration.shouldLoop.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.shouldLoop.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.Configuration.shouldRandomizeStartTime.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AudioBufferResource.Configuration.shouldRandomizeStartTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.shouldRandomizeStartTime.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioBufferResource.Configuration.normalization.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AudioBufferResource.Configuration.normalization.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.normalization.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioBufferResource.Configuration.calibration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AudioBufferResource.Configuration.calibration.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.calibration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.Configuration.mixGroupName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioBufferResource.Configuration.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.mixGroupName.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t AudioBufferResource.Configuration.layoutTagOverride.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int8 *)(v0 + 60) << 32);
}

uint64_t AudioBufferResource.Configuration.layoutTagOverride.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 56) = result;
  *(_BYTE *)(v1 + 60) = BYTE4(result) & 1;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.layoutTagOverride.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.Configuration.init(shouldLoop:shouldRandomizeStartTime:normalization:calibration:mixGroupName:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v7 = *a3;
  v8 = *((_BYTE *)a3 + 8);
  v9 = *a4;
  v10 = *((_BYTE *)a4 + 8);
  *(_BYTE *)a7 = result;
  *(_BYTE *)(a7 + 1) = a2;
  *(_QWORD *)(a7 + 8) = v7;
  *(_BYTE *)(a7 + 16) = v8;
  *(_QWORD *)(a7 + 24) = v9;
  *(_BYTE *)(a7 + 32) = v10;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  *(_DWORD *)(a7 + 56) = 0;
  *(_BYTE *)(a7 + 60) = 1;
  return result;
}

void AudioBufferResource.Configuration.hash(into:)()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt64 v2;
  int v3;
  Swift::UInt64 v4;
  int v5;
  uint64_t v6;
  Swift::UInt32 v7;
  int v8;
  Swift::UInt v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;

  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_DWORD *)(v0 + 56);
  v8 = *(unsigned __int8 *)(v0 + 60);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
    if (v5 != 255)
      goto LABEL_16;
LABEL_12:
    Hasher._combine(_:)(0);
    if (!v6)
      goto LABEL_20;
    goto LABEL_13;
  }
  Hasher._combine(_:)(1u);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(0);
      if (v5 != 255)
        goto LABEL_16;
      goto LABEL_12;
    }
    v9 = 2;
  }
  else
  {
    v9 = 1;
  }
  Hasher._combine(_:)(v9);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v2;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if (v5 == 255)
    goto LABEL_12;
LABEL_16:
  Hasher._combine(_:)(1u);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v4;
  else
    v11 = 0;
  Hasher._combine(_:)((v5 & 1) != 0);
  Hasher._combine(_:)(v11);
  if (!v6)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    if (!v8)
      goto LABEL_21;
LABEL_14:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_13:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v8)
    goto LABEL_14;
LABEL_21:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7);
}

Swift::Int AudioBufferResource.Configuration.hashValue.getter()
{
  Hasher.init(_seed:)();
  AudioBufferResource.Configuration.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioBufferResource.Configuration()
{
  Hasher.init(_seed:)();
  AudioBufferResource.Configuration.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioBufferResource.Configuration()
{
  Hasher.init(_seed:)();
  AudioBufferResource.Configuration.hash(into:)();
  return Hasher._finalize()();
}

BOOL specialized static AudioBufferResource.Configuration.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t v2;
  double v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  int v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  double v18;
  double v19;
  char v20;
  char v21;

  v2 = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2
    || ((*((unsigned __int8 *)a1 + 1) ^ *((unsigned __int8 *)a2 + 1)) & 1) != 0)
  {
    return v2;
  }
  v2 = *((unsigned __int8 *)a1 + 16);
  v5 = a1[3];
  v6 = *((unsigned __int8 *)a1 + 32);
  v7 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  v9 = *((_DWORD *)a1 + 14);
  v10 = *((_BYTE *)a1 + 60);
  v11 = *((unsigned __int8 *)a2 + 16);
  v12 = a2[3];
  v13 = *((unsigned __int8 *)a2 + 32);
  v14 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)a2 + 6);
  v16 = *((_DWORD *)a2 + 14);
  v17 = *((_BYTE *)a2 + 60);
  if ((_DWORD)v2 == 255)
  {
    if (v11 != 255)
      return 0;
    goto LABEL_16;
  }
  if (v11 == 255)
    return 0;
  v18 = a1[1];
  v19 = a2[1];
  if (!(_DWORD)v2)
  {
    if (v11)
      return v2;
    goto LABEL_12;
  }
  if ((_DWORD)v2 == 1)
  {
    v2 = 0;
    if (v11 != 1)
      return v2;
LABEL_12:
    if (v18 != v19)
      return v2;
    goto LABEL_16;
  }
  v2 = 0;
  if (v11 != 2 || v19 != 0.0)
    return v2;
LABEL_16:
  if (v6 == 255)
  {
    if (v13 != 255)
      return 0;
  }
  else
  {
    if (v13 == 255)
      return 0;
    if ((v6 & 1) != 0)
    {
      if ((v13 & 1) == 0)
        return 0;
    }
    else if ((v13 & 1) != 0)
    {
      return 0;
    }
    if (v5 != v12)
      return 0;
  }
  if (!v8)
  {
    if (v15)
      return 0;
LABEL_32:
    if ((v10 & 1) == 0)
    {
      if (v9 == v16)
        v21 = v17;
      else
        v21 = 1;
      return (v21 & 1) == 0;
    }
    return (v17 & 1) != 0;
  }
  if (!v15)
    return 0;
  if (v7 == v14 && v8 == v15)
    goto LABEL_32;
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v2 = 0;
  if ((v20 & 1) != 0)
    goto LABEL_32;
  return v2;
}

unint64_t lazy protocol witness table accessor for type AudioBufferResource.Configuration and conformance AudioBufferResource.Configuration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioBufferResource.Configuration and conformance AudioBufferResource.Configuration;
  if (!lazy protocol witness table cache variable for type AudioBufferResource.Configuration and conformance AudioBufferResource.Configuration)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioBufferResource.Configuration, &type metadata for AudioBufferResource.Configuration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioBufferResource.Configuration and conformance AudioBufferResource.Configuration);
  }
  return result;
}

uint64_t destroy for AudioBufferResource.Configuration()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AudioBufferResource.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioBufferResource.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v6;
  return a1;
}

__n128 __swift_memcpy61_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AudioBufferResource.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioBufferResource.Configuration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 61))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioBufferResource.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 61) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 61) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioBufferResource.Configuration()
{
  return &type metadata for AudioBufferResource.Configuration;
}

uint64_t RERenderFrameSettings.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t RERenderFrameSettings.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall RERenderFrameSettings.setTotalTime(_:)(Swift::Float a1)
{
  RERenderFrameSettingsSetTotalTime();
}

uint64_t type metadata accessor for RERenderFrameSettings()
{
  return objc_opt_self();
}

uint64_t method lookup function for RERenderFrameSettings()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RERenderFrameSettings.setTotalTime(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t __RKVisibilityHideMoveOutAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityHideMoveOutAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityHideMoveOutAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 123, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 71, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 52, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  char *v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a3;
  v13 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v13);
  v5 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v12 - v9, v10);
  v12[1] = v5;
  v11 = (char *)sub_21BAC8DA0 + 4 * byte_21BE5E038[swift_getEnumCaseMultiPayload()];
  v15 = a2;
  __asm { BR              X10 }
}

uint64_t sub_21BAC8DA0()
{
  uint64_t v0;
  uint64_t v1;

  swift_retain_n();
  outlined init with copy of __RKEntityActionSpecification(v0, *(_QWORD *)(v1 - 152), type metadata accessor for __RKEntityTriggerSpecification);
  swift_release_n();
  return swift_release();
}

void sub_21BAC8DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
  v5 = *(_DWORD *)(v2 + *(int *)(v4 + 48));
  v6 = *(_BYTE *)(v2 + *(int *)(v4 + 64));
  v7 = *(_QWORD *)(v3 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v7);
  v8 = *(int *)(v4 + 48);
  v9 = *(int *)(v4 + 64);
  v10 = (uint64_t *)(*(_QWORD *)(v3 - 144) + 16);
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 - 152);
  static UuidRemapHelper.getOrAddUuidMapping(_:_:)(v1, v10, v11);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v7);
  *(_DWORD *)(v11 + v8) = v5;
  *(_BYTE *)(v11 + v9) = v6;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x21BAC8DCCLL);
}

void sub_21BAC8F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
  v5 = *(_QWORD *)(v2 + *(int *)(v4 + 48));
  v6 = *(_QWORD *)(v2 + *(int *)(v4 + 64));
  v7 = *(_QWORD *)(v3 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v7);
  v8 = *(int *)(v4 + 48);
  v9 = *(int *)(v4 + 64);
  v10 = (uint64_t *)(*(_QWORD *)(v3 - 144) + 16);
  swift_beginAccess();
  swift_retain_n();
  v11 = *(_QWORD *)(v3 - 152);
  static UuidRemapHelper.getOrAddUuidMapping(_:_:)(v1, v10, v11);
  swift_endAccess();
  swift_retain();
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_AHs5NeverOTg5051_s10RealityKit30__RKEntityTriggerSpecificationO0A10D64E10remapUUIDs23entityIdentifierMappingAC0F04UUIDVAIXE_tFA2IXEfU_A2HIgnr_Tf1cn_n04_s17h91Foundation15UuidRemapHelperO31remapIdentifiersAndInteractions4rooty0A3Kit6EntityC_tFZAF34__j11InteractionL24VAJXEfU0_0B04UUIDVAMcfU_0hD00Z11RemapHelperOXMtSDyA2HGz_XxTf1nc_nTf4ndg_n(v5, *(_QWORD *)(v3 - 144));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + v8) = v12;
  *(_QWORD *)(v11 + v9) = v6;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x21BAC8DC0);
}

void __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  char *v11;
  _QWORD v12[8];

  v12[4] = a2;
  v12[5] = a1;
  v12[3] = a3;
  v4 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  outlined init with copy of __RKEntityActionSpecification(v3, (uint64_t)v12 - v9, v10);
  v12[1] = v5;
  v11 = (char *)sub_21BAC92C0 + 4 * byte_21BE5E046[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BAC92C0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of __RKEntityActionSpecification(v0, *(_QWORD *)(v1 - 136), type metadata accessor for __RKEntityTriggerSpecification);
}

void sub_21BAC92F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
  v6 = *(_DWORD *)(v0 + *(int *)(v5 + 48));
  v7 = *(_BYTE *)(v0 + *(int *)(v5 + 64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v0, v2);
  v8 = *(int *)(v5 + 48);
  v9 = *(int *)(v5 + 64);
  v10 = *(_QWORD *)(v4 - 136);
  (*(void (**)(uint64_t))(v4 - 120))(v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  *(_DWORD *)(v10 + v8) = v6;
  *(_BYTE *)(v10 + v9) = v7;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x21BAC92D4);
}

void sub_21BAC9374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v0, v2);
  (*(void (**)(uint64_t))(v4 - 120))(v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x21BAC92D4);
}

void sub_21BAC93C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
  v6 = *(_QWORD *)(v0 + *(int *)(v5 + 48));
  *(_QWORD *)(v4 - 144) = *(_QWORD *)(v0 + *(int *)(v5 + 64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v0, v2);
  v7 = *(int *)(v5 + 48);
  v8 = *(int *)(v5 + 64);
  v10 = *(_QWORD *)(v4 - 136);
  v9 = *(_QWORD *)(v4 - 128);
  v11 = *(void (**)(uint64_t))(v4 - 120);
  v11(v3);
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_AHs5NeverOTg5051_s10RealityKit30__RKEntityTriggerSpecificationO0A10D64E10remapUUIDs23entityIdentifierMappingAC0F04UUIDVAIXE_tFA2IXEfU_A2HIgnr_Tf1cn_nTf4ng_n(v6, v11, v9);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v10 + v7) = v12;
  *(_QWORD *)(v10 + v8) = *(_QWORD *)(v4 - 144);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x21BAC92D4);
}

uint64_t sub_21BAC9464()
{
  swift_bridgeObjectRelease();
  return sub_21BAC92C0();
}

void sub_21BAC9480()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v6 = *v0;
  v7 = *(_QWORD *)(*v0 + 16);
  if (v7)
  {
    v8 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    *(_QWORD *)(v5 - 160) = v6;
    *(_QWORD *)(v5 - 144) = v8;
    v9 = v6 + v8;
    v10 = *(_QWORD *)(v2 + 72);
    v11 = MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of __RKEntityActionSpecification(v9, v1, type metadata accessor for __RKEntityTriggerSpecification);
      __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(*(_QWORD *)(v5 - 120), *(_QWORD *)(v5 - 128), v4);
      outlined init with copy of __RKEntityActionSpecification(v4, v3, type metadata accessor for __RKEntityTriggerSpecification);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
      v13 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)(v11 + 24);
      if (v13 >= v12 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v11);
      *(_QWORD *)(v11 + 16) = v13 + 1;
      outlined init with take of __RKEntityActionSpecification(v3, v11 + *(_QWORD *)(v5 - 144) + v13 * v10, type metadata accessor for __RKEntityTriggerSpecification);
      outlined destroy of __RKEntityActionSpecification(v4, type metadata accessor for __RKEntityTriggerSpecification);
      outlined destroy of __RKEntityActionSpecification(v1, type metadata accessor for __RKEntityTriggerSpecification);
      v9 += v10;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  **(_QWORD **)(v5 - 136) = v11;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x21BAC92D4);
}

void __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t started;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(_QWORD);
  char *v82;
  _QWORD v83[9];
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v120 = a5;
  v116 = a3;
  v117 = a4;
  v118 = a1;
  v119 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v107 = (char *)v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v110 = (char *)v83 - v8;
  v106 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x24BDAC7A8](v106);
  v109 = (char *)v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v108 = (char *)v83 - v11;
  v12 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x24BDAC7A8](v12);
  v105 = (char *)v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v104 = (char *)v83 - v15;
  v16 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v16);
  v83[8] = (char *)v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v83[7] = (char *)v83 - v19;
  v84 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v84);
  v86 = (char *)v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v87 = (char *)v83 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v85 = (char *)v83 - v24;
  v25 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x24BDAC7A8](v25);
  v103 = (char *)v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v102 = (char *)v83 - v28;
  v115 = type metadata accessor for UUID();
  v113 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v114 = (char *)v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v99);
  v100 = (char *)v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v101 = (char *)v83 - v32;
  MEMORY[0x24BDAC7A8](v33);
  v98 = (char *)v83 - v34;
  v35 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x24BDAC7A8](v35);
  v97 = (char *)v83 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v96 = (char *)v83 - v38;
  v39 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x24BDAC7A8](v39);
  v83[6] = (char *)v83 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v83[5] = (char *)v83 - v42;
  v43 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v43);
  v95 = (char *)v83 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v94 = (char *)v83 - v46;
  v47 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v47);
  v93 = (char *)v83 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v49);
  v92 = (char *)v83 - v50;
  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v83[4] = (char *)v83 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v53);
  v83[3] = (char *)v83 - v54;
  v55 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x24BDAC7A8](v55);
  v91 = (char *)v83 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v57);
  v112 = (char *)v83 - v58;
  v59 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x24BDAC7A8](v59);
  v83[2] = (char *)v83 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v61);
  v83[1] = (char *)v83 - v62;
  v63 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x24BDAC7A8](v63);
  v90 = (char *)v83 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v65);
  v111 = (char *)v83 - v66;
  v67 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x24BDAC7A8](v67);
  v89 = (char *)v83 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v69);
  v88 = (char *)v83 - v70;
  v71 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x24BDAC7A8](v71);
  MEMORY[0x24BDAC7A8](v72);
  v73 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v73);
  MEMORY[0x24BDAC7A8](v74);
  v75 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x24BDAC7A8](v75);
  MEMORY[0x24BDAC7A8](v76);
  v77 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v77);
  MEMORY[0x24BDAC7A8](v78);
  v79 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v79);
  outlined init with copy of __RKEntityActionSpecification(v121, (uint64_t)v83 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0), v81);
  v121 = v79;
  v82 = (char *)sub_21BAC9E1C + 4 * word_21BE5E054[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BAC9E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  outlined init with take of __RKEntityActionSpecification(v1, v2, type metadata accessor for __RKEntityAudioActionArguments);
  specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v2, *(void (**)(char *))(v3 - 152), (uint64_t (*)(_QWORD, __n128))type metadata accessor for __RKEntityAudioActionArguments, (uint64_t)&protocol witness table for __RKEntityAudioActionArguments, v0);
  outlined destroy of __RKEntityActionSpecification(v2, type metadata accessor for __RKEntityAudioActionArguments);
  outlined init with take of __RKEntityActionSpecification(v0, *(_QWORD *)(v3 - 136), type metadata accessor for __RKEntityAudioActionArguments);
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t (*a3)(_QWORD, __n128)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE v22[40];
  _BYTE v23[24];
  uint64_t v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;

  v21 = a5;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = &v22[-v15 - 8];
  v26 = a3(0, v14);
  v27 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))a3);
  outlined init with copy of __REAssetService((uint64_t)v25, (uint64_t)v23);
  v18 = __swift_project_boxed_opaque_existential_1(v25, v26);
  (*(void (**)(char *, _QWORD *, uint64_t))(v10 + 16))(v12, v18, v9);
  a2(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v19 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, v24);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v19, v16, v9);
  outlined init with copy of __REAssetService((uint64_t)v23, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKSpecificationHasTarget);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(int a1@<W0>, char a2@<W1>, void (*a3)(char *)@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _DWORD v24[2];
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24[-2] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24[-2] - v15;
  *(float *)v24 = a5;
  v24[1] = a1;
  v25 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKSpecificationHasTarget);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of BindableDataInternal(&v26, (uint64_t)v29);
    outlined init with copy of __REAssetService((uint64_t)v29, (uint64_t)&v26);
    v23 = a4;
    v17 = a3;
    v18 = v30;
    v19 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    v17(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v20 = *((_QWORD *)&v27 + 1);
    v21 = v28;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v26, *((uint64_t *)&v27 + 1));
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v16, v20, v21);
    outlined init with copy of __REAssetService((uint64_t)&v26, (uint64_t)v24);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    result = outlined destroy of BodyTrackingComponent?((uint64_t)&v26, &demangling cache variable for type metadata for __RKSpecificationHasTarget?);
    *(float *)a4 = a5;
    *(_DWORD *)(a4 + 4) = a1;
    *(_BYTE *)(a4 + 8) = a2 & 1;
  }
  return result;
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - v10;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v21 - v17;
  outlined init with copy of __RKEntityActionSpecification(a1, a3, type metadata accessor for __RKEntityStartAnimateActionArguments);
  a2(a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(a3, v18, v12);
  v19 = a3 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);
  outlined init with copy of UUID?(v19, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  a2((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  return outlined assign with take of UUID?((uint64_t)v8, v19);
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v26;
  uint64_t v27;
  void (*v29)(char *);
  uint64_t v30;
  _QWORD v31[2];
  void (*v32)(char *);
  uint64_t v33;
  _BYTE v34[40];
  _BYTE v35[24];
  uint64_t v36;
  uint64_t v37[3];
  uint64_t v38;
  _UNKNOWN **v39;

  v31[1] = a3;
  v32 = a2;
  v33 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v31[0] = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v31 - v8;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v31 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v31 - v18;
  v20 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v22, v23);
  v24 = (uint64_t)&v22[*(int *)(v20 + 60)];
  outlined init with copy of UUID?(v24, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
    outlined destroy of __RKEntityActionSpecification((uint64_t)v22, type metadata accessor for __RKEntityTransformActionArguments);
    v38 = v20;
    v39 = &protocol witness table for __RKEntityTransformActionArguments;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37);
    outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for __RKEntityTransformActionArguments);
    outlined init with copy of __REAssetService((uint64_t)v37, (uint64_t)v35);
    v26 = __swift_project_boxed_opaque_existential_1(v37, v38);
    (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))(v13, v26, v10);
    v32(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v27 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, v36);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v27, v16, v10);
    outlined init with copy of __REAssetService((uint64_t)v35, (uint64_t)v34);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKSpecificationHasTarget);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v9, v10);
    v29 = v32;
    v32(v22);
    (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v22, v16, v10);
    v30 = v31[0];
    v29(v19);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
    outlined assign with take of UUID?(v30, v24);
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v22, v33, type metadata accessor for __RKEntityTransformActionArguments);
    return outlined destroy of __RKEntityActionSpecification((uint64_t)v22, type metadata accessor for __RKEntityTransformActionArguments);
  }
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(void (*a1)(char *)@<X0>, float *a2@<X8>, float a3@<S0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  float *v19;
  float v20[10];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20[-2] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20[-2] - v11;
  v20[0] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKSpecificationHasTarget);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of BindableDataInternal(&v21, (uint64_t)v24);
    outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)&v21);
    v13 = v25;
    v14 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19 = a2;
    v15(v13, v14);
    a1(v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16 = *((_QWORD *)&v22 + 1);
    v17 = v23;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v21, *((uint64_t *)&v22 + 1));
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v12, v16, v17);
    outlined init with copy of __REAssetService((uint64_t)&v21, (uint64_t)v20);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
    result = outlined destroy of BodyTrackingComponent?((uint64_t)&v21, &demangling cache variable for type metadata for __RKSpecificationHasTarget?);
    *a2 = a3;
  }
  return result;
}

uint64_t Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t (*v17)(uint64_t);
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v56 = a3;
  v57 = a4;
  v54 = a1;
  v55 = a2;
  v53 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v44 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v52 = (uint64_t)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v43 - v7;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  gatherInteractionSpecifications #1 (from:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(v4, v9);
  v43[1] = v9;
  specialized enumerateCore #1 (entity:recursive:block:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(v4, 1, v9);
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v10 + 64);
  v45 = v10 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v46 = (unint64_t)(v12 + 63) >> 6;
  v47 = v10;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v17 = type metadata accessor for __RKEntityInteractionSpecification;
  if (v14)
    goto LABEL_6;
LABEL_7:
  while (2)
  {
    v20 = v16 + 1;
    if (!__OFADD__(v16, 1))
    {
      if (v20 < v46)
      {
        v21 = *(_QWORD *)(v45 + 8 * v20);
        ++v16;
        if (v21)
          goto LABEL_20;
        v16 = v20 + 1;
        if (v20 + 1 >= v46)
          goto LABEL_40;
        v21 = *(_QWORD *)(v45 + 8 * v16);
        if (v21)
          goto LABEL_20;
        v16 = v20 + 2;
        if (v20 + 2 >= v46)
          goto LABEL_40;
        v21 = *(_QWORD *)(v45 + 8 * v16);
        if (v21)
        {
LABEL_20:
          v14 = (v21 - 1) & v21;
          for (i = __clz(__rbit64(v21)) + (v16 << 6); ; i = v18 | (v16 << 6))
          {
            v23 = 8 * i;
            v24 = *(_QWORD *)(*(_QWORD *)(v47 + 48) + v23);
            v25 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + v23);
            v26 = *(_QWORD *)(v25 + 16);
            if (v26)
            {
              v50 = v14;
              v51 = v16;
              v60 = MEMORY[0x24BEE4AF8];
              v49 = v24;
              swift_retain();
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
              v27 = *(unsigned __int8 *)(v44 + 80);
              v48 = v25;
              v59 = (v27 + 32) & ~v27;
              v28 = v25 + v59;
              v58 = *(_QWORD *)(v44 + 72);
              v29 = v60;
              do
              {
                v30 = v52;
                outlined init with copy of __RKEntityActionSpecification(v28, v52, v17);
                v32 = v54;
                v31 = v55;
                __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(v54, v55, (uint64_t)v8);
                v33 = v17;
                v34 = v53;
                __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v32, v31, v56, v57, (uint64_t)&v8[*(int *)(v53 + 20)]);
                v35 = *(int *)(v34 + 24);
                v17 = v33;
                v37 = *(_QWORD *)(v30 + v35);
                v36 = *(_QWORD *)(v30 + v35 + 8);
                v38 = &v8[v35];
                *(_QWORD *)v38 = v37;
                *((_QWORD *)v38 + 1) = v36;
                swift_bridgeObjectRetain();
                outlined destroy of __RKEntityActionSpecification(v30, v33);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
                  v29 = v60;
                }
                v40 = *(_QWORD *)(v29 + 16);
                v39 = *(_QWORD *)(v29 + 24);
                if (v40 >= v39 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
                  v29 = v60;
                }
                *(_QWORD *)(v29 + 16) = v40 + 1;
                v41 = v58;
                outlined init with take of __RKEntityActionSpecification((uint64_t)v8, v29 + v59 + v40 * v58, v33);
                v28 += v41;
                --v26;
              }
              while (v26);
              swift_bridgeObjectRelease();
              v14 = v50;
              v16 = v51;
              v24 = v49;
            }
            else
            {
              swift_retain();
              v29 = MEMORY[0x24BEE4AF8];
            }
            swift_beginAccess();
            if (!static __RKEntityInteractionsComponent.registration)
              break;
            v42 = *((_QWORD *)static __RKEntityInteractionsComponent.registration + 3);
            if (*(_QWORD *)(v29 + 16))
            {
              if (!REEntityGetCustomComponent() && !MEMORY[0x22076CF2C](*(_QWORD *)(v24 + 16), v42)
                || !RECustomComponentGetObject())
              {
                break;
              }
              __RKEntityInteractionsComponent.specifications.setter(v29);
            }
            else
            {
              swift_bridgeObjectRelease();
              if (REEntityGetCustomComponent())
                REEntityRemoveComponentByClass();
            }
            result = swift_release();
            if (!v14)
              goto LABEL_7;
LABEL_6:
            v18 = __clz(__rbit64(v14));
            v14 &= v14 - 1;
          }
          swift_release();
          result = swift_bridgeObjectRelease();
          if (!v14)
            continue;
          goto LABEL_6;
        }
        v22 = v20 + 3;
        if (v22 < v46)
        {
          v21 = *(_QWORD *)(v45 + 8 * v22);
          if (v21)
          {
            v16 = v22;
            goto LABEL_20;
          }
          while (1)
          {
            v16 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_42;
            if (v16 >= v46)
              break;
            v21 = *(_QWORD *)(v45 + 8 * v16);
            ++v22;
            if (v21)
              goto LABEL_20;
          }
        }
      }
LABEL_40:
      swift_release();
      return swift_release();
    }
    break;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_21BACB8D4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t gatherInteractionSpecifications #1 (from:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t Object;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v10[48];
  uint64_t v11;

  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
  {
    if (REEntityGetCustomComponent())
    {
      Object = RECustomComponentGetObject();
      if (Object)
      {
        v5 = *(_QWORD *)(Object + 16);
        outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v10);
        if (v5)
          v6 = v5;
        else
          v6 = __RKEntityInteractionsComponent.decodedJSON()();
        swift_bridgeObjectRetain();
        outlined destroy of __RKEntityInteractionsComponent((uint64_t)v10);
        if (!*(_QWORD *)(v6 + 16))
          return swift_bridgeObjectRelease();
LABEL_7:
        v7 = (uint64_t *)(a2 + 16);
        swift_beginAccess();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v11 = *v7;
        *v7 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, a1, isUniquelyReferenced_nonNull_native);
        *v7 = v11;
        swift_release();
        swift_bridgeObjectRelease();
        return swift_endAccess();
      }
    }
  }
  v6 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_7;
  return swift_bridgeObjectRelease();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Transform>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RESRT>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(IKComponent.Solver.ID, Int)>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AcousticModelComponent.SoundReductionMaterial>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AcousticModelComponent.ScatteringMaterial>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AcousticModelComponent.AbsorptionMaterial>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID?>, &demangling cache variable for type metadata for UUID?);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityInteractionSpecification>, type metadata accessor for __RKEntityInteractionSpecification);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer?>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<REMeshAttributeDescriptorRef>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__Downsampling.Factor>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt64]>, &demangling cache variable for type metadata for [UInt64]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>, type metadata accessor for __RKEntityActionSpecification);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(IKRig.Joint.ID, Int)>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(IKRig.Constraint.ID, Int)>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__SceneImportOperation.ImportedScene>, type metadata accessor for __SceneImportOperation.ImportedScene);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(URL, Date)>, &demangling cache variable for type metadata for (URL, Date));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PhotogrammetrySession.Request>, (uint64_t (*)(_QWORD))MEMORY[0x24BE1ED70]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int16>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[__RKEntityActionSpecification]>, &demangling cache variable for type metadata for [__RKEntityActionSpecification]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>, type metadata accessor for __RKEntityTriggerSpecification);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[__RKEntityTriggerSpecification]>, &demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<REMeshInstanceDefinitionRef>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<REMeshModelDefinitionRef>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NetworkSendBlockingCategory>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<geom_bbox_2d>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeMutablePointer<Int8>?>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__SceneImportOperation.__ImportedScene>, type metadata accessor for __SceneImportOperation.__ImportedScene);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CurveExtruder.ShapePoint>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CollisionPlane_v1>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    memcpy(v12, v13, 80 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AudioMixGroup>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 80 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SkeletalPose>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(size: UInt64, offset: Int)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Joint>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 176);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[176 * v8])
      memmove(v12, v13, 176 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[176 * v8] || v12 >= &v13[176 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    memcpy(v13, v14, v8 << 6);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneResourceLoadResult>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MTLTextureLevelInfo>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[104 * v8] || v12 >= &v13[104 * v8])
  {
    memcpy(v12, v13, 104 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PhotogrammetrySession.PointCloud.Point>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource._Proto_Level_v1>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Part>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Proto_SkeletonDefinition_v1.Joint>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LowLevelMesh.Attribute>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LowLevelMesh.Layout>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKSolverDefinition>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 104 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CoreIKTransform>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PiecewiseBezierCurve>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PathSpan>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 80 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtrudedShapeDescriptor>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 520);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[520 * v8])
      memmove(v12, v13, 520 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[520 * v8] || v12 >= &v13[520 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CollisionCastHit>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 96 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(pass: __RKMaterialParameterBlock.TransparentPass, techniqueHash: Int)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Double>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RESystemDependency>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ComponentInfo>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v9])
      memmove(v13, v14, 48 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v9] || v13 >= &v14[48 * v9])
  {
    memcpy(v13, v14, 48 * v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9])
      memmove(v14, v15, 4 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v9])
      memmove(v14, v15, 2 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v9] || v14 >= &v15[2 * v9])
  {
    memcpy(v14, v15, 2 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9])
      memmove(v13, v14, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    memcpy(v14, v15, 32 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String, UInt)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String, UInt));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any, Any)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 96 * v8)
      memmove(v10 + 4, a4 + 4, 96 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 96 * v8 || v12 >= v13 + 96 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, Any, Any));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(__REAsset, [__REAssetDescriptor], RESceneDescriptor)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAsset, [__REAssetDescriptor], RESceneDescriptor));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<Entity.LoadStatistics.Observer>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v13 >= v14 + 8 * v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameterProtocol);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(URL, Date)>, &demangling cache variable for type metadata for (URL, Date));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Int)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: _Proto_SkeletonDefinition_v1.Joint)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 96 * v8)
      memmove(v10 + 4, a4 + 4, 96 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 96 * v8 || v12 >= v13 + 96 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: _Proto_SkeletonDefinition_v1.Joint));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_AHs5NeverOTg5051_s10RealityKit30__RKEntityTriggerSpecificationO0A10D64E10remapUUIDs23entityIdentifierMappingAC0F04UUIDVAIXE_tFA2IXEfU_A2HIgnr_Tf1cn_n04_s17h91Foundation15UuidRemapHelperO31remapIdentifiersAndInteractions4rooty0A3Kit6EntityC_tFZAF34__j11InteractionL24VAJXEfU0_0B04UUIDVAMcfU_0hD00Z11RemapHelperOXMtSDyA2HGz_XxTf1nc_nTf4ndg_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(unint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t *v46;
  int v47;
  _QWORD *v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t result;
  _QWORD v66[2];
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v5);
  v67 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v66 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v72 = (char *)v66 - v11;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v70 = (char *)v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v78 = (uint64_t)v66 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v77 = (char *)v66 - v18;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = MEMORY[0x24BEE4AF8];
  if (!v19)
    return v20;
  v66[1] = v2;
  v80 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
  v71 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v21 = a1 + v71;
  v22 = a2;
  v23 = (uint64_t *)(a2 + 16);
  v75 = *(_QWORD *)(v13 + 72);
  v76 = v22;
  v68 = v9;
  v69 = v13;
  v73 = v23;
  while (1)
  {
    swift_beginAccess();
    v24 = *v23;
    if (*(_QWORD *)(*v23 + 16))
    {
      swift_retain();
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
      if ((v26 & 1) != 0)
      {
        v27 = (uint64_t)v72;
        (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v72, *(_QWORD *)(v24 + 56) + v25 * v75, v12);
        v28 = v13;
        v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
        v29(v27, 0, 1, v12);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v27, 1, v12) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v77, v27, v12);
          v13 = v28;
          goto LABEL_27;
        }
      }
      else
      {
        v28 = v13;
        v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
        v27 = (uint64_t)v72;
        v29((uint64_t)v72, 1, 1, v12);
      }
    }
    else
    {
      v28 = v13;
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      v27 = (uint64_t)v72;
      v29((uint64_t)v72, 1, 1, v12);
      swift_retain();
    }
    v74 = v19;
    outlined destroy of BodyTrackingComponent?(v27, &demangling cache variable for type metadata for UUID?);
    v30 = v77;
    UUID.init()();
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    v32 = v78;
    v31(v78, v21, v12);
    v31((uint64_t)v9, (uint64_t)v30, v12);
    v29((uint64_t)v9, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v9, 1, v12) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      v23 = v73;
      swift_bridgeObjectRetain();
      v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
      v35 = v34;
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v37 = (_QWORD *)*v23;
        v79 = (_QWORD *)*v23;
        *v23 = 0x8000000000000000;
        v19 = v74;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v37 = v79;
        }
        v38 = v33 * v75;
        v39 = v69;
        v40 = *(void (**)(unint64_t, uint64_t))(v69 + 8);
        v40(v37[6] + v33 * v75, v12);
        v41 = (uint64_t)v79;
        v42 = v79[7] + v38;
        v43 = v33;
        v44 = (uint64_t)v67;
        (*(void (**)(char *, unint64_t, uint64_t))(v39 + 32))(v67, v42, v12);
        specialized _NativeDictionary._delete(at:)(v43, v41);
        v23 = v73;
        *v73 = v41;
        swift_bridgeObjectRelease();
        v29(v44, 0, 1, v12);
        v13 = v39;
        v9 = v68;
      }
      else
      {
        v44 = (uint64_t)v67;
        v29((uint64_t)v67, 1, 1, v12);
        v9 = v68;
        v13 = v69;
        v40 = *(void (**)(unint64_t, uint64_t))(v69 + 8);
        v19 = v74;
      }
      v40(v78, v12);
      outlined destroy of BodyTrackingComponent?(v44, &demangling cache variable for type metadata for UUID?);
      goto LABEL_27;
    }
    v45 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v45(v70, v9, v12);
    v46 = v73;
    v47 = swift_isUniquelyReferenced_nonNull_native();
    v79 = (_QWORD *)*v46;
    v48 = v79;
    *v46 = 0x8000000000000000;
    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
    v51 = v48[2];
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
      break;
    v54 = v49;
    if (v48[3] >= v53)
    {
      if ((v47 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, v47);
      v55 = specialized __RawDictionaryStorage.find<A>(_:)(v78);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_35;
      v50 = v55;
    }
    v13 = v69;
    v57 = v79;
    if ((v54 & 1) != 0)
    {
      (*(void (**)(unint64_t, char *, uint64_t))(v69 + 40))(v79[7] + v50 * v75, v70, v12);
    }
    else
    {
      v79[(v50 >> 6) + 8] |= 1 << v50;
      v58 = v50 * v75;
      v31(v57[6] + v50 * v75, v78, v12);
      v45((char *)(v57[7] + v58), v70, v12);
      v59 = v57[2];
      v60 = __OFADD__(v59, 1);
      v61 = v59 + 1;
      if (v60)
        goto LABEL_34;
      v57[2] = v61;
    }
    v23 = v73;
    *v73 = (uint64_t)v79;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v78, v12);
    v9 = v68;
    v19 = v74;
LABEL_27:
    swift_endAccess();
    swift_release();
    v20 = v80;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
      v20 = v80;
    }
    v63 = *(_QWORD *)(v20 + 16);
    v62 = *(_QWORD *)(v20 + 24);
    if (v63 >= v62 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
      v20 = v80;
    }
    *(_QWORD *)(v20 + 16) = v63 + 1;
    v64 = v75;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v20 + v71 + v63 * v75, v77, v12);
    v80 = v20;
    v21 += v64;
    if (!--v19)
      return v20;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHs5NeverOTg504_s10d7Kit29__fgH116O0A10FoundationE10remapUUIDs23entityIdentifierMapping010identifierK0AC0F04UUIDVAJc_A2JctF0G9ArgumentsL_yxxlFA2CXEfU_0N04UUIDVAOIegnr_A2OIegnr_Tf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a4;
  v23 = a5;
  v20 = a2;
  v21 = a3;
  v7 = type metadata accessor for __RKEntityActionSpecification(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v19[1] = v5;
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = v24;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v14 = a1 + v13;
    v15 = *(_QWORD *)(v8 + 72);
    do
    {
      __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v20, v21, v22, v23);
      v24 = v12;
      v17 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v12 = v24;
      }
      *(_QWORD *)(v12 + 16) = v17 + 1;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v10, v12 + v13 + v17 * v15, type metadata accessor for __RKEntityActionSpecification);
      v14 += v15;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_AHs5NeverOTg5051_s10RealityKit30__RKEntityTriggerSpecificationO0A10D64E10remapUUIDs23entityIdentifierMappingAC0F04UUIDVAIXE_tFA2IXEfU_A2HIgnr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v18 = a2;
  v19 = a3;
  v17 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v15[1] = v3;
    v20 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v20;
    v16 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v10 = a1 + v16;
    v11 = *(_QWORD *)(v5 + 72);
    do
    {
      v18(v10);
      v20 = v9;
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9 = v20;
      }
      *(_QWORD *)(v9 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v16 + v13 * v11, v7, v17);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t specialized enumerateCore #1 (entity:recursive:block:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t Child;
  uint64_t v11;
  uint64_t v12;
  uint64_t Object;
  unsigned __int8 *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSString *v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  const char *v51;
  size_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void (*v59)(const char *, _QWORD);
  void *v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  unsigned int v64;
  char *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  const char *v71[6];
  _QWORD *v72;

  v70 = a2;
  v4 = type metadata accessor for Data.Deallocator();
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_66:
    swift_release();
    return swift_release();
  }
  v65 = v6;
  v7 = 0;
  v8 = 0;
  v69 = a3;
  v9 = (_QWORD *)(a3 + 16);
  v64 = *MEMORY[0x24BDCDB98];
  while (v7 < REEntityGetChildCount())
  {
    Child = REEntityGetChild();
    if (!Child)
      goto LABEL_73;
    v11 = Child;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v12 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_71;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v14 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v15 = 1;
          else
            v15 = v14 == 0;
          if (v15)
          {
            swift_retain();
          }
          else
          {
            v16 = *v14;
            v17 = String.init(utf8String:)();
            if (v18)
              v19 = v17;
            else
              v19 = 0;
            if (v18)
              v20 = v18;
            else
              v20 = 0xE000000000000000;
            v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v16 == 42, v19, v20);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(_QWORD *)(swift_allocObject() + 16) = v14;
          }
          if (!v14)
            goto LABEL_74;
          swift_retain();
          v21 = String.init(utf8String:)();
          v23 = v22;
          swift_release();
          v24 = v23 ? v21 : 0;
          v25 = v23 ? v23 : 0xE000000000000000;
          v26 = (NSString *)MEMORY[0x220768C3C](v24, v25);
          swift_bridgeObjectRelease();
          v27 = NSClassFromString(v26);

          swift_release();
          if (v27)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v28 = swift_dynamicCastMetatype();
            if (v28)
            {
              v29 = (*(uint64_t (**)(void))(v28 + 232))();
              v30 = *(_QWORD *)(v29 + 16);
              swift_retain();
              MEMORY[0x22076D160](v30, 0);
              *(_QWORD *)(v29 + 16) = v11;
              MEMORY[0x22076D160](v11, v29);
              swift_release();
              goto LABEL_36;
            }
          }
        }
      }
      v12 = makeEntity(for:)(v11);
    }
    v29 = v12;
LABEL_36:
    if (v7 >= REEntityGetChildCount())
      goto LABEL_69;
    swift_beginAccess();
    if (!static __RKEntityInteractionsComponent.registration
      || !REEntityGetCustomComponent()
      || (v31 = RECustomComponentGetObject()) == 0)
    {
      v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
        goto LABEL_64;
      goto LABEL_43;
    }
    v32 = *(_QWORD **)(v31 + 16);
    outlined init with copy of __RKEntityInteractionsComponent(v31, (uint64_t)v71);
    if (v32)
    {
      v33 = v32;
      goto LABEL_63;
    }
    v51 = v71[0];
    if (!v71[0])
      goto LABEL_61;
    v66 = v8;
    v52 = strlen(v71[0]);
    v53 = v65;
    (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v65, v64, v68);
    v54 = Data.Deallocator._deallocator.getter();
    if (v52)
    {
      v63 = v54;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      v55 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      v56 = specialized Data._Representation.init(_:count:)(v55, v52);
      v58 = v57;
      swift_release();
    }
    else
    {
      v59 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
      v59(v51, 0);
      swift_release();
      swift_release();
      v56 = 0;
      v58 = 0xC000000000000000;
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v53, v68);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
    lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
    v60 = v66;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    v8 = v60;
    if (v60)
    {
      swift_release();
      outlined consume of Data._Representation(v56, v58);

      v8 = 0;
LABEL_61:
      v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
      goto LABEL_63;
    }
    swift_release();
    outlined consume of Data._Representation(v56, v58);
    v33 = v72;
LABEL_63:
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v71);
    if (!v33[2])
    {
LABEL_64:
      swift_bridgeObjectRelease();
      if ((v70 & 1) != 0)
        goto LABEL_65;
      goto LABEL_3;
    }
LABEL_43:
    v34 = v8;
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v72 = (_QWORD *)*v9;
    v36 = v72;
    *v9 = 0x8000000000000000;
    v38 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
    v39 = v36[2];
    v40 = (v37 & 1) == 0;
    v41 = v39 + v40;
    if (__OFADD__(v39, v40))
      goto LABEL_70;
    v42 = v37;
    if (v36[3] >= v41)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, isUniquelyReferenced_nonNull_native);
      v43 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
      if ((v42 & 1) != (v44 & 1))
        goto LABEL_75;
      v38 = v43;
    }
    v8 = v34;
    v45 = v72;
    if ((v42 & 1) != 0)
    {
      v46 = v72[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v46 + 8 * v38) = v33;
    }
    else
    {
      v72[(v38 >> 6) + 8] |= 1 << v38;
      v47 = 8 * v38;
      *(_QWORD *)(v45[6] + v47) = v29;
      *(_QWORD *)(v45[7] + v47) = v33;
      v48 = v45[2];
      v49 = __OFADD__(v48, 1);
      v50 = v48 + 1;
      if (v49)
        goto LABEL_72;
      v45[2] = v50;
      swift_retain();
    }
    *v9 = v45;
    swift_release();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if ((v70 & 1) != 0)
    {
LABEL_65:
      v61 = v69;
      swift_retain();
      specialized enumerateCore #1 (entity:recursive:block:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(v29, 1, v61);
      swift_release();
    }
LABEL_3:
    ++v7;
    swift_release();
    if (v7 >= REEntityGetChildCount())
      goto LABEL_66;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  swift_release();
  __break(1u);
LABEL_74:
  swift_release();
  __break(1u);
LABEL_75:
  type metadata accessor for Entity();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
    v2 = lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification();
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification)
  {
    v1 = type metadata accessor for __RKEntityInteractionSpecification(255);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionSpecification, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification);
  }
  return result;
}

uint64_t static __RERenderGraphEmitter.firstUsedEmitter()()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD aBlock[6];
  uint64_t v8;

  v8 = 0;
  if (one-time initialization token for dispatchQueue != -1)
    swift_once();
  v1 = static __RERenderGraphEmitter.dispatchQueue;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v8;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in static __RERenderGraphEmitter.firstUsedEmitter();
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_23;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t __RERenderGraphEmitter.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t one-time initialization function for dispatchQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v7[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static __RERenderGraphEmitter.dispatchQueue = result;
  return result;
}

void *one-time initialization function for activeEmitters()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static __RERenderGraphEmitter.activeEmitters = result;
  return result;
}

unint64_t __RERenderGraphEmitter.LoadError.errorDescription.getter(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x6E7562206E692022;
  v5._object = (void *)0xEB00000000656C64;
  String.append(_:)(v5);
  return 0xD000000000000023;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance __RERenderGraphEmitter.LoadError()
{
  uint64_t v0;

  return __RERenderGraphEmitter.LoadError.errorDescription.getter(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t static __RERenderGraphEmitter.__load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  if (a3)
    v6 = a3;
  else
    v6 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v7 = a3;
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v18);
  v9 = v19;
  v10 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
  swift_retain();
  v11(v9, v10);
  v12 = (void *)MEMORY[0x220768C3C](a1, a2);
  v13 = (void *)MEMORY[0x220768C3C](0xD000000000000014, 0x800000021BE867C0);
  v14 = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  if (v14)
  {
    type metadata accessor for __RERenderGraphEmitter();
    a2 = swift_allocObject();
    RERetain();
    type metadata accessor for __REAsset();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(a2 + 16) = v15;
    RERelease();
  }
  else
  {
    lazy protocol witness table accessor for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError();
    swift_allocError();
    *v16 = a1;
    v16[1] = a2;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }

  swift_release();
  return a2;
}

uint64_t __RERenderGraphEmitter.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t closure #1 in static __RERenderGraphEmitter.firstUsedEmitter()(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t AssetHandle;
  uint64_t v17;
  uint64_t v18;
  char *v21;
  int64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  if (one-time initialization token for activeEmitters != -1)
LABEL_29:
    swift_once();
  v2 = static __RERenderGraphEmitter.activeEmitters;
  v21 = (char *)static __RERenderGraphEmitter.activeEmitters + 64;
  v3 = 1 << *((_BYTE *)static __RERenderGraphEmitter.activeEmitters + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *((_QWORD *)static __RERenderGraphEmitter.activeEmitters + 8);
  v22 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    do
    {
      if (v5)
      {
        v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v8 = v7 | (v6 << 6);
      }
      else
      {
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        if (v9 >= v22)
          return swift_release();
        v10 = *(_QWORD *)&v21[8 * v9];
        ++v6;
        if (!v10)
        {
          v6 = v9 + 1;
          if (v9 + 1 >= v22)
            return swift_release();
          v10 = *(_QWORD *)&v21[8 * v6];
          if (!v10)
          {
            v6 = v9 + 2;
            if (v9 + 2 >= v22)
              return swift_release();
            v10 = *(_QWORD *)&v21[8 * v6];
            if (!v10)
            {
              v11 = v9 + 3;
              if (v11 >= v22)
                return swift_release();
              v10 = *(_QWORD *)&v21[8 * v11];
              if (!v10)
              {
                while (1)
                {
                  v6 = v11 + 1;
                  if (__OFADD__(v11, 1))
                    goto LABEL_28;
                  if (v6 >= v22)
                    return swift_release();
                  v10 = *(_QWORD *)&v21[8 * v6];
                  ++v11;
                  if (v10)
                    goto LABEL_20;
                }
              }
              v6 = v11;
            }
          }
        }
LABEL_20:
        v5 = (v10 - 1) & v10;
        v8 = __clz(__rbit64(v10)) + (v6 << 6);
      }
    }
    while (*(uint64_t *)(v2[7] + 8 * v8) < 1);
    swift_bridgeObjectRetain();
    v12 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v12, (uint64_t)v23);
    v13 = v24;
    v14 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v15 = *(void (**)(uint64_t, uint64_t))(v14 + 32);
    swift_retain();
    v15(v13, v14);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    AssetHandle = REAssetManagerCreateAssetHandle();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    if (AssetHandle)
      break;
    swift_release();
  }
  type metadata accessor for __RERenderGraphEmitter();
  v17 = swift_allocObject();
  RERetain();
  type metadata accessor for __REAsset();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = AssetHandle;
  *(_QWORD *)(v17 + 16) = v18;
  swift_release();
  swift_release();
  *a2 = v17;
  return swift_release();
}

uint64_t __RERenderGraphEmitter.unsetup(mgr:)(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v9[6];

  if (one-time initialization token for dispatchQueue != -1)
    swift_once();
  v3 = static __RERenderGraphEmitter.dispatchQueue;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in __RERenderGraphEmitter.unsetup(mgr:);
  *(_QWORD *)(v5 + 24) = v4;
  v9[4] = _sIg_Ieg_TRTA_0;
  v9[5] = v5;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  v9[3] = &block_descriptor_7;
  v6 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in __RERenderGraphEmitter.unsetup(mgr:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  Swift::String v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t);
  id v14;
  uint64_t (*v15)(_QWORD *, uint64_t);
  uint64_t result;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  char isUniquelyReferenced_nonNull_native;
  void *v24;
  _QWORD *v25;
  void *v26;
  id v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  uint64_t countAndFlagsBits;
  void *v35;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = *(_QWORD *)(a2 + 16);
  swift_retain();
  v7 = (id)REAssetHandleCopyAssetIdentifierString();
  v8 = String.init(_:)(v7);
  countAndFlagsBits = v8._countAndFlagsBits;
  v33 = OpaquePointer.hashValue.getter();

  swift_release();
  if (one-time initialization token for activeEmitters != -1)
    swift_once();
  v9 = static __RERenderGraphEmitter.activeEmitters;
  v10 = one-time initialization token for dispatchQueue;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = static __RERenderGraphEmitter.dispatchQueue;
  *v6 = static __RERenderGraphEmitter.dispatchQueue;
  v12 = *MEMORY[0x24BEE5610];
  v13 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v13(v6, v12, v3);
  v14 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  v15 = *(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8);
  result = v15(v6, v3);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v9[2])
  {
    swift_bridgeObjectRetain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v33, countAndFlagsBits, (uint64_t)v8._object);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v9[7] + 8 * v17);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  v19 = 0;
LABEL_12:
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v22 = static __RERenderGraphEmitter.activeEmitters;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35 = v22;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, v33, countAndFlagsBits, (uint64_t)v8._object, isUniquelyReferenced_nonNull_native);
  v24 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static __RERenderGraphEmitter.activeEmitters = v24;
  swift_bridgeObjectRelease();
  v25 = static __RERenderGraphEmitter.activeEmitters;
  v26 = (void *)static __RERenderGraphEmitter.dispatchQueue;
  *v6 = static __RERenderGraphEmitter.dispatchQueue;
  v13(v6, v12, v3);
  swift_bridgeObjectRetain();
  v27 = v26;
  v28 = _dispatchPreconditionTest(_:)();
  result = v15(v6, v3);
  if ((v28 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  if (v25[2])
  {
    swift_bridgeObjectRetain();
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v33, countAndFlagsBits, (uint64_t)v8._object);
    if ((v30 & 1) != 0)
    {
      v31 = *(_QWORD *)(v25[7] + 8 * v29);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      if (v31 > 0)
        return result;
      return RERenderGraphEmitterAssetUnregisterProviders();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return RERenderGraphEmitterAssetUnregisterProviders();
}

uint64_t __RERenderGraphEmitter.setup(mgr:)(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v9[6];

  if (one-time initialization token for dispatchQueue != -1)
    swift_once();
  v3 = static __RERenderGraphEmitter.dispatchQueue;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in __RERenderGraphEmitter.setup(mgr:);
  *(_QWORD *)(v5 + 24) = v4;
  v9[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v9[5] = v5;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  v9[3] = &block_descriptor_13;
  v6 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in __RERenderGraphEmitter.setup(mgr:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  Swift::String v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  uint64_t (*v12)(_QWORD *, uint64_t);
  uint64_t result;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  char isUniquelyReferenced_nonNull_native;
  void *v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t countAndFlagsBits;
  void *v29;

  v0 = type metadata accessor for DispatchPredicate();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (uint64_t *)((char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_retain();
  v4 = (id)REAssetHandleCopyAssetIdentifierString();
  v5 = String.init(_:)(v4);
  countAndFlagsBits = v5._countAndFlagsBits;
  v27 = OpaquePointer.hashValue.getter();

  swift_release();
  if (one-time initialization token for activeEmitters != -1)
    swift_once();
  v6 = static __RERenderGraphEmitter.activeEmitters;
  v7 = one-time initialization token for dispatchQueue;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = static __RERenderGraphEmitter.dispatchQueue;
  *v3 = static __RERenderGraphEmitter.dispatchQueue;
  v9 = *MEMORY[0x24BEE5610];
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v1 + 104);
  v10(v3, v9, v0);
  v11 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  v12 = *(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8);
  result = v12(v3, v0);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v6[2])
  {
    swift_bridgeObjectRetain();
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v27, countAndFlagsBits, (uint64_t)v5._object);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(v6[7] + 8 * v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16)
        goto LABEL_14;
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_13:
  RERenderGraphEmitterAssetRegisterProviders();
LABEL_14:
  v17 = static __RERenderGraphEmitter.activeEmitters;
  v18 = static __RERenderGraphEmitter.dispatchQueue;
  *v3 = static __RERenderGraphEmitter.dispatchQueue;
  v10(v3, v9, v0);
  swift_bridgeObjectRetain();
  v19 = (id)v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  result = v12(v3, v0);
  if ((v18 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v17[2])
  {
    swift_bridgeObjectRetain();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v27, countAndFlagsBits, (uint64_t)v5._object);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(v17[7] + 8 * v20);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  v22 = 0;
LABEL_21:
  if (!__OFADD__(v22, 1))
  {
    v23 = static __RERenderGraphEmitter.activeEmitters;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = v23;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22 + 1, v27, countAndFlagsBits, (uint64_t)v5._object, isUniquelyReferenced_nonNull_native);
    v25 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static __RERenderGraphEmitter.activeEmitters = v25;
    return swift_bridgeObjectRelease();
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t __RERenderGraphEmitter.execute(mgr:)()
{
  return RERenderGraphEmitterAssetExecute();
}

Swift::Void __swiftcall __RERenderGraphEmitter.setWireframeMode(displayWireframe:)(Swift::Bool displayWireframe)
{
  RERenderGraphSimpleForwardEmitterSetDisplayWireframe();
}

void __RERenderGraphEmitter.__handle.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
}

uint64_t __RERenderGraphEmitter.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t __RERenderGraphEmitter.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EmitterAssetKey()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EmitterAssetKey()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EmitterAssetKey()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EmitterAssetKey(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[1] == a2[1] && a1[2] == a2[2])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t lazy protocol witness table accessor for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError;
  if (!lazy protocol witness table cache variable for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RERenderGraphEmitter.LoadError, &unk_24DFAACF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError);
  }
  return result;
}

uint64_t type metadata accessor for __RERenderGraphEmitter()
{
  return objc_opt_self();
}

uint64_t sub_21BAD2E30()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_21BAD2E5C()
{
  return swift_deallocObject();
}

uint64_t method lookup function for __RERenderGraphEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.setup(mgr:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.execute(mgr:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.setWireframeMode(displayWireframe:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.__handle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

void *type metadata accessor for __RERenderGraphEmitter.LoadError()
{
  return &unk_24DFAACF0;
}

uint64_t sub_21BAD2ED0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __RERenderGraphEmitter.firstUsedEmitter()()
{
  uint64_t v0;

  return closure #1 in static __RERenderGraphEmitter.firstUsedEmitter()(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_21BAD2EE8()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for EmitterAssetKey(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for EmitterAssetKey()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for EmitterAssetKey(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EmitterAssetKey(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmitterAssetKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmitterAssetKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmitterAssetKey()
{
  return &type metadata for EmitterAssetKey;
}

unint64_t lazy protocol witness table accessor for type EmitterAssetKey and conformance EmitterAssetKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmitterAssetKey and conformance EmitterAssetKey;
  if (!lazy protocol witness table cache variable for type EmitterAssetKey and conformance EmitterAssetKey)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmitterAssetKey, &type metadata for EmitterAssetKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmitterAssetKey and conformance EmitterAssetKey);
  }
  return result;
}

uint64_t Material.name.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  (*(void (**)(void))(a2 + 8))();
  swift_beginAccess();
  swift_release();
  result = REMaterialAssetGetSourceName();
  if (result)
    return String.init(cString:)();
  return result;
}

void SimpleMaterial.color.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];

  v5[3] = &type metadata for SimpleMaterial;
  v5[4] = &protocol witness table for SimpleMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial(v1, v5[0] + 16);
  v4 = *(_QWORD *)(v1 + 80);
  v3 = *(void **)(v1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v5, v4, v3, a1);
}

void SimpleMaterial.metallic.getter(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8[8];
  unsigned __int8 v9;

  v3 = (unint64_t)specialized Material.getTexture(_:)(9u);
  if (!v3)
  {
    v5 = *(void **)(v1 + 72);
    swift_bridgeObjectRetain_n();
    v6 = v5;
    swift_bridgeObjectRetain_n();
    v7 = v6;
    specialized String.withCString<A>(_:)(0x63696C6C6174656DLL, 0xED0000656C616353, v7, (uint64_t)v8);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9 != 255)
    {
      if (v9 == 2)
      {
        v4 = LODWORD(v8[0]);
        goto LABEL_8;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v8[0], (uint64_t)v8[1], (uint64_t)v8[2], (uint64_t)v8[3], (uint64_t)v8[4], (uint64_t)v8[5], (uint64_t)v8[6], (uint64_t)v8[7], v9);
    }
    v4 = 0;
    goto LABEL_8;
  }
  v4 = v3 | 0x8000000000000000;
LABEL_8:
  *a1 = v4;
}

void SimpleMaterial.roughness.getter(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8[8];
  unsigned __int8 v9;

  v3 = (unint64_t)specialized Material.getTexture(_:)(0xAu);
  if (!v3)
  {
    v5 = *(void **)(v1 + 72);
    swift_bridgeObjectRetain_n();
    v6 = v5;
    swift_bridgeObjectRetain_n();
    v7 = v6;
    specialized String.withCString<A>(_:)(0x73656E6867756F72, 0xEE00656C61635373, v7, (uint64_t)v8);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9 != 255)
    {
      if (v9 == 2)
      {
        v4 = LODWORD(v8[0]);
        goto LABEL_8;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v8[0], (uint64_t)v8[1], (uint64_t)v8[2], (uint64_t)v8[3], (uint64_t)v8[4], (uint64_t)v8[5], (uint64_t)v8[6], (uint64_t)v8[7], v9);
    }
    v4 = 1065353216;
    goto LABEL_8;
  }
  v4 = v3 | 0x8000000000000000;
LABEL_8:
  *a1 = v4;
}

void SimpleMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 120) == 1;
}

void PortalMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40) == 1;
}

void VideoMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 56) == 1;
}

uint64_t static __MaterialResource.createMaterial(assetPath:in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  void *FailedMessage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;

  result = specialized static __MaterialResource.createAssetRef(named:in:)(a1, a2, a3);
  if (!v4)
  {
    v9 = result;
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      swift_bridgeObjectRetain();
      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v13 = v12;

      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(_QWORD *)v14 = a1;
      *(_QWORD *)(v14 + 8) = a2;
      *(_QWORD *)(v14 + 16) = v11;
      *(_QWORD *)(v14 + 24) = v13;
      *(_BYTE *)(v14 + 32) = 1;
      swift_willThrow();
    }
    else
    {
      v15 = (void *)REMaterialParameterBlockValueCreate();
      v16 = MEMORY[0x24BEE4AF8];
      v17 = 0;
      v18 = 0;
      v19 = v15;
      static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v9, &v16, 0, 0, 255, a4);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return RERelease();
  }
  return result;
}

void __MaterialResource.CoreMaterialFunction.getSurfaceShader()(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  void *v22;
  char v23;

  v4 = v1[1];
  v3 = v1[2];
  v6 = v1[3];
  v5 = v1[4];
  v7 = (void *)v1[5];
  v18 = v6;
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    goto LABEL_5;
  if (*(_DWORD *)(v5 + 32) == 2)
  {
    v9 = 1;
LABEL_13:
    swift_bridgeObjectRetain();
    CustomMaterial.SurfaceShader.init(named:in:linkSPI:)(v4, v3, &v18, v9, (uint64_t)&v19);
    v14 = v20;
    if (v20)
    {
      v15 = v22;
      v16 = v7;

    }
    else
    {
      v16 = v22;
    }
    v17 = v23;
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v14;
    *(_OWORD *)(a1 + 16) = v21;
    *(_QWORD *)(a1 + 32) = v16;
    *(_BYTE *)(a1 + 40) = v17;
    return;
  }
  if (v8 == 1)
  {
LABEL_5:
    v9 = 0;
    goto LABEL_13;
  }
  v10 = 9;
  while (1)
  {
    v11 = v10 - 7;
    if (__OFADD__(v10 - 8, 1))
      break;
    v12 = *(_DWORD *)(v5 + 4 * v10);
    v9 = v12 == 2;
    ++v10;
    if (v12 == 2 || v11 == v8)
      goto LABEL_13;
  }
  __break(1u);
}

void __MaterialResource.CoreMaterialFunction.getGeometryModifier()(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  void *v22;
  char v23;

  v4 = v1[1];
  v3 = v1[2];
  v6 = v1[3];
  v5 = v1[4];
  v7 = (void *)v1[5];
  v18 = v6;
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    goto LABEL_5;
  if (*(_DWORD *)(v5 + 32) == 8)
  {
    v9 = 1;
LABEL_13:
    swift_bridgeObjectRetain();
    CustomMaterial.GeometryModifier.init(named:in:linkSPI:)(v4, v3, &v18, v9, (uint64_t)&v19);
    v14 = v20;
    if (v20)
    {
      v15 = v22;
      v16 = v7;

    }
    else
    {
      v16 = v22;
    }
    v17 = v23;
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v14;
    *(_OWORD *)(a1 + 16) = v21;
    *(_QWORD *)(a1 + 32) = v16;
    *(_BYTE *)(a1 + 40) = v17;
    return;
  }
  if (v8 == 1)
  {
LABEL_5:
    v9 = 0;
    goto LABEL_13;
  }
  v10 = 9;
  while (1)
  {
    v11 = v10 - 7;
    if (__OFADD__(v10 - 8, 1))
      break;
    v12 = *(_DWORD *)(v5 + 4 * v10);
    v9 = v12 == 8;
    ++v10;
    if (v12 == 8 || v11 == v8)
      goto LABEL_13;
  }
  __break(1u);
}

uint64_t specialized SIMD4<>.cgColor.getter(__n128 a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  CGColorRef v16;
  uint64_t result;
  uint64_t v19;

  v19 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
  v1 = v19;
  v3 = *(_QWORD *)(v19 + 16);
  v2 = *(_QWORD *)(v19 + 24);
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v3 + 1, 1);
    v1 = v19;
    v2 = *(_QWORD *)(v19 + 24);
    v4 = v2 >> 1;
  }
  v6 = a1.n128_u64[1];
  *(_QWORD *)(v1 + 16) = v5;
  *(double *)(v1 + 8 * v3 + 32) = a1.n128_f32[0];
  v7 = v3 + 2;
  if (v4 < v7)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v7, 1);
    v6 = a1.n128_u64[1];
    v1 = v19;
  }
  v8 = *(float *)&v6;
  *(_QWORD *)(v1 + 16) = v7;
  *(double *)(v1 + 8 * v5 + 32) = a1.n128_f32[1];
  v10 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
    HIDWORD(v6) = a1.n128_u32[3];
  }
  v12 = *((float *)&v6 + 1);
  v13 = v19;
  *(_QWORD *)(v19 + 16) = v11;
  *(double *)(v19 + 8 * v10 + 32) = v8;
  v14 = *(_QWORD *)(v19 + 24);
  v15 = v10 + 2;
  if (v15 > (uint64_t)(v14 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15, 1);
    v13 = v19;
  }
  *(_QWORD *)(v13 + 16) = v15;
  *(double *)(v13 + 32 + 8 * v11) = v12;
  if (one-time initialization token for linearSRGBColorSpace != -1)
    swift_once();
  v16 = CGColorCreate((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, (const CGFloat *)(v13 + 32));
  swift_release();
  if (v16)
    return (uint64_t)v16;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

CGColorRef_optional __swiftcall Material.getColorParameter(key:)(Swift::String key)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  Material.subscript.getter(key._countAndFlagsBits, (uint64_t)key._object, v1, (uint64_t)&v12);
  if (v19 == 255)
    return 0;
  v2 = (void *)v12.n128_u64[0];
  if (v19 != 6)
  {
    v3 = v12.n128_i64[1];
    v4 = v13;
    v5 = v14;
    v6 = v15;
    v7 = v16;
    v8 = v17;
    v9 = v18;
    if (v19 == 5)
    {
      v10 = specialized SIMD4<>.cgColor.getter(v12);
      outlined consume of __RKMaterialParameterBlock.Parameter?(v2, v3, v4, v5, v6, v7, v8, v9, 5u);
      return (CGColorRef_optional)v10;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?((void *)v12.n128_u64[0], v12.n128_i64[1], v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  return (CGColorRef_optional)v2;
}

void Material.getTextureParameter(key:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  Material.subscript.getter(a1, a2, a3, (uint64_t)&v8);
  if (v16 != 255)
  {
    v5 = v9;
    v6 = v10;
    v7 = v11;
    if (v16 == 1)
    {
      *(_QWORD *)a4 = v8;
      *(_QWORD *)(a4 + 8) = v5;
      *(_QWORD *)(a4 + 16) = v6;
      *(_DWORD *)(a4 + 24) = v7;
      return;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v8, v9, v10, v11, v12, v13, v14, v15, v16);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = 0;
}

void __swiftcall Material.getFloatParameter(key:)(Swift::Float_optional *__return_ptr retstr, Swift::String key)
{
  uint64_t v2;
  void *v3[8];
  unsigned __int8 v4;

  Material.subscript.getter(key._countAndFlagsBits, (uint64_t)key._object, v2, (uint64_t)v3);
  if (v4 != 255 && v4 != 2)
    outlined consume of __RKMaterialParameterBlock.Parameter?(v3[0], (uint64_t)v3[1], (uint64_t)v3[2], (uint64_t)v3[3], (uint64_t)v3[4], (uint64_t)v3[5], (uint64_t)v3[6], (uint64_t)v3[7], v4);
}

uint64_t Material.__triangleFillMode.getter()
{
  return 0;
}

uint64_t Material.__triangleFillMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, a3);
}

{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, a3);
}

uint64_t (*Material.__triangleFillMode.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Material.__triangleFillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*Material.__triangleFillMode.modify(_QWORD *a1))(_QWORD, _QWORD)
{
  *a1 = 0;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Material.__writesDepthInternal.getter()
{
  return 1;
}

uint64_t (*Material.__writesDepthInternal.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Material.__writesDepthInternal.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*Material.__writesDepthInternal.modify(_BYTE *a1))(_QWORD, _QWORD)
{
  *a1 = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Material.__readsDepthInternal.getter()
{
  return 1;
}

uint64_t Material.__readsDepthInternal.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, a3);
}

uint64_t (*Material.__readsDepthInternal.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Material.__readsDepthInternal.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*Material.__readsDepthInternal.modify(_BYTE *a1))(_QWORD, _QWORD)
{
  *a1 = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Material.__faceCullMode.getter()
{
  return 0;
}

uint64_t Material.__faceCullMode.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a3, a4);
}

{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a3, a4);
}

uint64_t (*Material.__faceCullMode.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Material.__faceCullMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*Material.__faceCullMode.modify(uint64_t a1))(_QWORD, _QWORD)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Material.__parameters.getter()
{
  return 0;
}

uint64_t Material.__requiresUnmanagedVideoComponent.getter()
{
  return 0;
}

uint64_t Material.parameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
}

uint64_t Material.parameters.setter(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  uint64_t *v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;

  v4 = a3;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  swift_release();
  swift_release();
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  if (v7 == v10)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v38, v11, v12);
    v33 = v38;
    v34 = v39;
    v35 = v40;
    v36 = v41;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 24))(&v33, a2, v4);
  }
  else
  {
    v29 = a2;
    v32 = v3;
    v13 = Material.allKeys.getter(v11, v12);
    v14 = specialized Sequence.compactMap<A>(_:)(v13);
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v27 = v4;
      v16 = (uint64_t *)(v14 + 40);
      v28 = a1;
      v17 = a2;
      do
      {
        v31 = v15;
        v19 = *(v16 - 1);
        v20 = *v16;
        v21 = a1[3];
        __swift_project_boxed_opaque_existential_1(a1, v21);
        swift_bridgeObjectRetain();
        Material.subscript.getter(v19, v20, v21, (uint64_t)&v38);
        v22 = 255;
        v23 = 1;
        switch(v46)
        {
          case 0u:
            v23 = 0;
            v22 = 1;
            break;
          case 1u:
            v23 = 0;
            v22 = 0;
            break;
          case 2u:
            v23 = 0;
            v22 = 2;
            break;
          case 3u:
          case 6u:
          case 0xCu:
          case 0x10u:
            v23 = 0;
            goto LABEL_8;
          case 4u:
          case 5u:
          case 7u:
          case 0xDu:
          case 0xEu:
          case 0x11u:
          case 0x12u:
            v23 = 0;
            goto LABEL_8;
          case 8u:
            v23 = 0;
LABEL_8:
            v22 = v46;
            break;
          case 9u:
            v23 = 0;
            v22 = 9;
            break;
          case 0xAu:
            v23 = 0;
            v22 = 10;
            break;
          case 0xBu:
            v23 = 0;
            v22 = 11;
            break;
          case 0xFu:
            v23 = 0;
            v22 = 15;
            break;
          default:
            break;
        }
        v36 = v17;
        v37 = v4;
        v24 = v23;
        v25 = __swift_allocate_boxed_opaque_existential_1(&v33);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v25, v32, v17);
        if ((v24 & 1) == 0)
          __asm { BR              X9 }
        v16 += 2;
        v18 = v36;
        v30 = v37;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v33, v36);
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 19;
        Material.subscript.setter((uint64_t)&v38, v19, v20, v18, v30);
        v17 = v29;
        v4 = v27;
        Material.parameters.setter(&v33, v29, v27);
        v15 = v31 - 1;
        a1 = v28;
      }
      while (v31 != 1);
    }
    swift_bridgeObjectRelease();
  }
  return outlined destroy of MaterialParameters((uint64_t)a1);
}

void (*Material.parameters.modify(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t *boxed_opaque_existential_1;

  v7 = (uint64_t *)malloc(0x68uLL);
  *a1 = v7;
  v7[11] = a3;
  v7[12] = v3;
  v7[10] = a2;
  v7[3] = a2;
  v7[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, v3, a2);
  return Material.parameters.modify;
}

void Material.parameters.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[11];
    v4 = v2[10];
    outlined init with copy of MaterialParameters(*a1, (uint64_t)(v2 + 5));
    Material.parameters.setter(v2 + 5, v4, v3);
    outlined destroy of MaterialParameters((uint64_t)v2);
  }
  else
  {
    Material.parameters.setter((_QWORD *)*a1, v2[10], v2[11]);
  }
  free(v2);
}

uint64_t Material.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  _QWORD v34[8];
  unsigned __int8 v35;

  v32 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 16);
  v25 = v10;
  v11(v33, v12, v10);
  v13 = (void *)v33[3];
  swift_bridgeObjectRetain();
  v14 = v13;
  swift_bridgeObjectRetain();
  v26 = a1;
  specialized String.withCString<A>(_:)(a1, v32, v14, (uint64_t)v34);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v34[0];
  v16 = v34[1];
  v17 = v34[2];
  v18 = v34[4];
  v29 = v34[5];
  v30 = v34[3];
  v27 = v34[7];
  v28 = v34[6];
  v19 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v31, a3);
  if (v19 == 255)
  {
    (*(void (**)(uint64_t))(v25 + 8))(a3);
    __MaterialResource.subscript.getter(a4);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a3);
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v16;
    v21 = v30;
    *(_QWORD *)(a4 + 16) = v17;
    *(_QWORD *)(a4 + 24) = v21;
    v22 = v29;
    *(_QWORD *)(a4 + 32) = v18;
    *(_QWORD *)(a4 + 40) = v22;
    v23 = v27;
    *(_QWORD *)(a4 + 48) = v28;
    *(_QWORD *)(a4 + 56) = v23;
    *(_BYTE *)(a4 + 64) = v19;
  }
  return result;
}

void Material.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void (*v17)(_QWORD *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void (*v22)(_BYTE *, _QWORD);
  void *v23;
  _QWORD v24[8];
  char v25;
  _BYTE v26[48];

  v6 = *(unsigned __int8 *)(a1 + 64);
  if (v6 == 255)
  {
    v17 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a5 + 32))(v24, a4, a5);
    v19 = v18;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v20 = REMaterialParameterBlockValueCopy();
      v21 = *(void **)(v19 + 24);
      *(_QWORD *)(v19 + 24) = v20;

    }
    specialized String.withCString<A>(_:)(a2, a3);
    swift_bridgeObjectRelease();
    v17(v24, 0);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    v14 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v23 = *(void **)a1;
    v22 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a5 + 32))(v26, a4, a5);
    v24[0] = v14;
    v24[1] = v13;
    v24[2] = v11;
    v24[3] = v12;
    v24[4] = v10;
    v24[5] = v9;
    v24[6] = v8;
    v24[7] = v7;
    v25 = v6;
    v15 = String.utf8CString.getter();
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v15 + 32, (uint64_t)v24);
    swift_bridgeObjectRelease();
    swift_release();
    v22(v26, 0);
    outlined consume of __RKMaterialParameterBlock.Parameter?(v23, v13, v11, v12, v10, v9, v8, v7, v6);
  }
}

RealityFoundation::MaterialParameters::Metadata_optional __swiftcall Material.metadata(for:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t ParameterDisplayName;
  uint64_t v5;
  void *v6;
  RealityFoundation::MaterialParameters::Metadata_optional result;

  v3 = v2;
  (*(void (**)())(v1 + 8))();
  swift_beginAccess();
  swift_release();
  REMaterialAssetGetMaterialDefinition();
  String.utf8CString.getter();
  ParameterDisplayName = REMaterialDefinitionAssetGetParameterDisplayName();
  swift_release();
  if (ParameterDisplayName)
  {
    v5 = String.init(cString:)();
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *v3 = v5;
  v3[1] = (uint64_t)v6;
  result.value.displayName.value._object = v6;
  result.value.displayName.value._countAndFlagsBits = v5;
  return result;
}

uint64_t Material.allKeys.getter(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF0]), sel_init);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  swift_beginAccess();
  swift_release();
  REMaterialAssetGetMaterialDefinition();
  REMaterialDefinitionAssetGetParameterKeys();
  v4;
  result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

id specialized Material.makeMaterialParametersTextureFromTextureResource(_:textureKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id result;
  id v30;
  id v31;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;

  v7 = *(void **)(v4 + 72);
  swift_bridgeObjectRetain_n();
  v8 = v7;
  swift_bridgeObjectRetain_n();
  v9 = v8;
  specialized String.withCString<A>(_:)(a2, a3, v9, (uint64_t)&v34);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v42 == 255)
  {
LABEL_6:
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v34);
    swift_release();
    if (v42 != 255)
    {
      v21 = v34;
      v20 = v35;
      v22 = v36;
      v23 = v37;
      v24 = v38;
      v25 = v39;
      v26 = v40;
      v27 = v41;
      if (v42 == 1)
      {
        if (v34)
        {
          outlined copy of __RKMaterialParameterBlock.Parameter(v34, v35, v36, v37, v38, v39, v40, v41, 1);
          outlined copy of __RKMaterialParameterBlock.Parameter(v21, v20, v22, v23, v24, v25, v26, v27, 1);
          v28 = v21;
          v19 = v21;
        }
        else
        {
          outlined copy of __RKMaterialParameterBlock.Parameter(0, v35, v36, v37, v38, v39, v40, v41, 1);
          outlined copy of __RKMaterialParameterBlock.Parameter(0, v20, v22, v23, v24, v25, v26, v27, 1);
          v19 = (id)REMaterialCreateDefaultSamplerDescriptor();
          v28 = 0;
        }
        v31 = v28;
        outlined consume of __RKMaterialParameterBlock.Parameter?(v21, v20, v22, v23, v24, v25, v26, v27, 1u);
        outlined consume of __RKMaterialParameterBlock.Parameter?(v21, v20, v22, v23, v24, v25, v26, v27, 1u);
        outlined consume of __RKMaterialParameterBlock.Parameter(v21, v20, v22, v23, v24, v25, v26, v27, 1);
        goto LABEL_16;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v36, v37, v38, v39, v40, v41, v42);
    }
    swift_retain();
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    *(_QWORD *)(a4 + 8) = a1;
    *(_QWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = 84148994;
    *(_QWORD *)a4 = result;
    return result;
  }
  v10 = v34;
  v11 = v36;
  v12 = v37;
  v13 = v38;
  v14 = v39;
  v15 = v40;
  v16 = v41;
  if (v42 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v36, v37, v38, v39, v40, v41, v42);
    goto LABEL_6;
  }
  v17 = v35;
  if (v34)
  {
    outlined copy of __RKMaterialParameterBlock.Parameter(v34, v35, v36, v37, v38, v39, v40, v41, 1);
    outlined copy of __RKMaterialParameterBlock.Parameter(v10, v17, v11, v12, v13, v14, v15, v16, 1);
    v18 = v10;
    v19 = v10;
  }
  else
  {
    outlined copy of __RKMaterialParameterBlock.Parameter(0, v35, v36, v37, v38, v39, v40, v41, 1);
    outlined copy of __RKMaterialParameterBlock.Parameter(0, v17, v11, v12, v13, v14, v15, v16, 1);
    v19 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v18 = 0;
  }
  v30 = v18;
  outlined consume of __RKMaterialParameterBlock.Parameter?(v10, v17, v11, v12, v13, v14, v15, v16, 1u);
  outlined consume of __RKMaterialParameterBlock.Parameter?(v10, v17, v11, v12, v13, v14, v15, v16, 1u);
  outlined consume of __RKMaterialParameterBlock.Parameter(v10, v17, v11, v12, v13, v14, v15, v16, 1);
LABEL_16:
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 84148994;
  *(_QWORD *)a4 = v19;
  return (id)swift_retain();
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a3, a4, a5, (void (*)(uint64_t *, uint64_t *, uint64_t, uint64_t))CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a3, a4, a5, (void (*)(uint64_t *, uint64_t *, uint64_t, uint64_t))CustomMaterial.EmissiveColor.getCurrentValues(alternateTintKey:));
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  float v47;
  uint64_t v48;
  int v49;
  char v50;

  v47 = a3;
  v48 = a1;
  v49 = a2;
  v50 = BYTE4(a2) & 1;
  CustomMaterial.Opacity.getCurrentValues(alternateTintKey:)((uint64_t)&v36, (uint64_t)&v25);
  v3 = v37;
  v4 = v38;
  v5 = v39;
  v7 = v40;
  v6 = v41;
  v8 = v42;
  v9 = v43;
  v10 = v44;
  v11 = v45;
  v12 = v46;
  v21 = v26;
  v22 = v36;
  v19 = v27;
  v20 = v25;
  v23 = v30;
  v24 = v29;
  v17 = v31;
  v18 = v28;
  v15 = v33;
  v16 = v32;
  v14 = v34;
  v13 = v35;
  v36 = (uint64_t)v38;
  v37 = v39;
  v38 = (void *)v40;
  v39 = v41;
  v40 = v42;
  v41 = v43;
  v42 = v44;
  v43 = v45;
  LOBYTE(v44) = v46;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v4, v5, v7, v6, v8, v9, v10, v11, v12);
  specialized Material.subscript.setter((uint64_t)&v36, v22, v3);
  if (v21)
  {
    v25 = (uint64_t)v19;
    v26 = v18;
    v27 = (void *)v24;
    v28 = v23;
    v29 = v17;
    v30 = v16;
    v31 = v15;
    v32 = v14;
    LOBYTE(v33) = v13;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v19, v18, v24, v23, v17, v16, v15, v14, v13);
    specialized Material.subscript.setter((uint64_t)&v25, v20, v21);
    outlined consume of MaterialParameterKeyValue?(v20, v21, v19, v18, v24, v23, v17, v16, v15, v14, v13);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v5, v7, v6, v8, v9, v10, v11, v12);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  char v23;

  v2 = *(void **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = 1;
    v4 = *(void **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v3 = -1;
  }
  v11 = v3;
  v12 = v6;
  v13 = v5;
  v20[0] = v4;
  v20[1] = v1;
  v20[2] = v5;
  v20[3] = v6;
  v21 = 0u;
  v22 = 0u;
  v23 = v3;
  v7 = *(void **)a1;
  outlined copy of MaterialParameters.Texture?(v2, v1);
  outlined copy of MaterialParameters.Texture?(v2, v1);
  swift_bridgeObjectRetain();
  v8 = v7;
  specialized Material.subscript.setter((uint64_t)v20, 0xD000000000000010, 0x800000021BE860B0);
  v14 = v7;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 6;
  v9 = String.utf8CString.getter() + 32;
  v10 = v8;
  swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v9, (uint64_t)&v14);

  swift_bridgeObjectRelease_n();
  swift_release();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, 0, 0, 0, 0, 0, 0, 0, 6u);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v1, v13, v12, 0, 0, 0, 0, v11);
}

{
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  char v23;

  v2 = *(void **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = 1;
    v4 = *(void **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v3 = -1;
  }
  v11 = v3;
  v12 = v6;
  v13 = v5;
  v20[0] = v4;
  v20[1] = v1;
  v20[2] = v5;
  v20[3] = v6;
  v21 = 0u;
  v22 = 0u;
  v23 = v3;
  v7 = *(void **)a1;
  outlined copy of MaterialParameters.Texture?(v2, v1);
  outlined copy of MaterialParameters.Texture?(v2, v1);
  swift_bridgeObjectRetain();
  v8 = v7;
  specialized Material.subscript.setter((uint64_t)v20, 0xD000000000000010, 0x800000021BE860B0);
  v14 = v7;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 6;
  v9 = String.utf8CString.getter() + 32;
  v10 = v8;
  swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v9, (uint64_t)&v14);

  swift_bridgeObjectRelease_n();
  swift_release();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, 0, 0, 0, 0, 0, 0, 0, 6u);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v1, v13, v12, 0, 0, 0, 0, v11);
}

{
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  char v23;

  v2 = *(void **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = 1;
    v4 = *(void **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v3 = -1;
  }
  v11 = v3;
  v12 = v6;
  v13 = v5;
  v20[0] = v4;
  v20[1] = v1;
  v20[2] = v5;
  v20[3] = v6;
  v21 = 0u;
  v22 = 0u;
  v23 = v3;
  v7 = *(void **)a1;
  outlined copy of MaterialParameters.Texture?(v2, v1);
  outlined copy of MaterialParameters.Texture?(v2, v1);
  swift_bridgeObjectRetain();
  v8 = v7;
  specialized Material.subscript.setter((uint64_t)v20, 0x4565727574786574, 0xEF6576697373696DLL);
  v14 = v7;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 6;
  v9 = String.utf8CString.getter() + 32;
  v10 = v8;
  swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v9, (uint64_t)&v14);

  swift_bridgeObjectRelease_n();
  swift_release();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, 0, 0, 0, 0, 0, 0, 0, 6u);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v1, v13, v12, 0, 0, 0, 0, v11);
}

{
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  char v23;

  v2 = *(void **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = 1;
    v4 = *(void **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v3 = -1;
  }
  v11 = v3;
  v12 = v6;
  v13 = v5;
  v20[0] = v4;
  v20[1] = v1;
  v20[2] = v5;
  v20[3] = v6;
  v21 = 0u;
  v22 = 0u;
  v23 = v3;
  v7 = *(void **)a1;
  outlined copy of MaterialParameters.Texture?(v2, v1);
  outlined copy of MaterialParameters.Texture?(v2, v1);
  swift_bridgeObjectRetain();
  v8 = v7;
  specialized Material.subscript.setter((uint64_t)v20, 0xD000000000000011, 0x800000021BE86C70);
  v14 = v7;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 6;
  v9 = String.utf8CString.getter() + 32;
  v10 = v8;
  swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v9, (uint64_t)&v14);

  swift_bridgeObjectRelease_n();
  swift_release();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, 0, 0, 0, 0, 0, 0, 0, 6u);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v1, v13, v12, 0, 0, 0, 0, v11);
}

{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD v5[4];
  __int128 v6;
  __int128 v7;
  unsigned __int8 v8;

  if (a1)
  {
    swift_retain();
    v2 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v3 = 1;
    v4 = 84148994;
  }
  else
  {
    v2 = 0;
    v4 = 0;
    v3 = -1;
  }
  v5[0] = v2;
  v5[1] = a1;
  v5[2] = 0;
  v5[3] = v4;
  v6 = 0u;
  v7 = 0u;
  v8 = v3;
  outlined copy of __RKMaterialParameterBlock.Parameter?(v2, a1, 0, v4, 0, 0, 0, 0, v3);
  specialized Material.subscript.setter((uint64_t)v5, 0x4E65727574786574, 0xED00006C616D726FLL);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v2, a1, 0, v4, 0, 0, 0, 0, v3);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = 1;
    v6 = *(void **)(a1 + 8);
  }
  else
  {
    v6 = 0;
    v4 = 0;
    v3 = 0;
    v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  v9[2] = v4;
  v9[3] = v3;
  v10 = 0u;
  v11 = 0u;
  v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000010, 0x800000021BE860F0);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v7 = REMaterialParameterBlockValueCopy();
    v8 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v7;

  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = 1;
    v6 = *(void **)(a1 + 8);
  }
  else
  {
    v6 = 0;
    v4 = 0;
    v3 = 0;
    v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  v9[2] = v4;
  v9[3] = v3;
  v10 = 0u;
  v11 = 0u;
  v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0x4D65727574786574, 0xEF63696C6C617465);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v7 = REMaterialParameterBlockValueCopy();
    v8 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v7;

  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = 1;
    v6 = *(void **)(a1 + 8);
  }
  else
  {
    v6 = 0;
    v4 = 0;
    v3 = 0;
    v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  v9[2] = v4;
  v9[3] = v3;
  v10 = 0u;
  v11 = 0u;
  v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000010, 0x800000021BE860D0);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v7 = REMaterialParameterBlockValueCopy();
    v8 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v7;

  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = 1;
    v6 = *(void **)(a1 + 8);
  }
  else
  {
    v6 = 0;
    v4 = 0;
    v3 = 0;
    v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  v9[2] = v4;
  v9[3] = v3;
  v10 = 0u;
  v11 = 0u;
  v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0x5365727574786574, 0xEF72616C75636570);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v7 = REMaterialParameterBlockValueCopy();
    v8 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v7;

  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = 1;
    v6 = *(void **)(a1 + 8);
  }
  else
  {
    v6 = 0;
    v4 = 0;
    v3 = 0;
    v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  v9[2] = v4;
  v9[3] = v3;
  v10 = 0u;
  v11 = 0u;
  v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000019, 0x800000021BE86110);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v7 = REMaterialParameterBlockValueCopy();
    v8 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v7;

  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  __int128 v13;
  __int128 v14;
  unsigned __int8 v15;

  v3 = *(void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = v3;
  else
    v5 = 0;
  if (v4)
    v6 = *(_QWORD *)(a1 + 24);
  else
    v6 = 0;
  if (v4)
    v7 = *(unsigned int *)(a1 + 32);
  else
    v7 = 0;
  if (v4)
    v8 = 1;
  else
    v8 = -1;
  v12[0] = v5;
  v12[1] = v4;
  v12[2] = v6;
  v12[3] = v7;
  v13 = 0u;
  v14 = 0u;
  v15 = v8;
  outlined copy of MaterialParameters.Texture?(v3, v4);
  v9 = RELinkedOnOrAfterFall2024OSVersions();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v5, v4, v6, v7, 0, 0, 0, 0, v8);
  specialized Material.subscript.setter((uint64_t)v12, 0x4F65727574786574, 0xEE00797469636170);
  if ((v9 & 1) != 0)
  {
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v10 = REMaterialParameterBlockValueCopy();
      v11 = *(void **)(v1 + 32);
      *(_QWORD *)(v1 + 32) = v10;

    }
    REMaterialParameterBlockValueSetFloat();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v4, v6, v7, 0, 0, 0, 0, v8);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = 1;
    v6 = *(void **)(a1 + 8);
  }
  else
  {
    v6 = 0;
    v4 = 0;
    v3 = 0;
    v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  v9[2] = v4;
  v9[3] = v3;
  v10 = 0u;
  v11 = 0u;
  v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000016, 0x800000021BE86CB0);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v7 = REMaterialParameterBlockValueCopy();
    v8 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v7;

  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = 1;
    v6 = *(void **)(a1 + 8);
  }
  else
  {
    v6 = 0;
    v4 = 0;
    v3 = 0;
    v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  v9[2] = v4;
  v9[3] = v3;
  v10 = 0u;
  v11 = 0u;
  v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000016, 0x800000021BE86C90);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v7 = REMaterialParameterBlockValueCopy();
    v8 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v7;

  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  __int128 v13;
  __int128 v14;
  unsigned __int8 v15;

  v3 = *(void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = v3;
  else
    v5 = 0;
  if (v4)
    v6 = *(_QWORD *)(a1 + 24);
  else
    v6 = 0;
  if (v4)
    v7 = *(unsigned int *)(a1 + 32);
  else
    v7 = 0;
  if (v4)
    v8 = 1;
  else
    v8 = -1;
  v12[0] = v5;
  v12[1] = v4;
  v12[2] = v6;
  v12[3] = v7;
  v13 = 0u;
  v14 = 0u;
  v15 = v8;
  outlined copy of MaterialParameters.Texture?(v3, v4);
  v9 = RELinkedOnOrAfterFall2024OSVersions();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v5, v4, v6, v7, 0, 0, 0, 0, v8);
  specialized Material.subscript.setter((uint64_t)v12, 0x4F65727574786574, 0xEE00797469636170);
  if ((v9 & 1) != 0)
  {
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v10 = REMaterialParameterBlockValueCopy();
      v11 = *(void **)(v1 + 72);
      *(_QWORD *)(v1 + 72) = v10;

    }
    REMaterialParameterBlockValueSetFloat();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v4, v6, v7, 0, 0, 0, 0, v8);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.Metallic.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.Roughness.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.Specular.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.Clearcoat.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.ClearcoatRoughness.getCurrentValues(alternateTintKey:));
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t *, uint64_t, uint64_t))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;

  v50 = a1;
  v51 = a2;
  v52 = a3;
  a6(&v39, &v28, a4, a5);
  v6 = v40;
  v24 = v39;
  v7 = v41;
  v8 = v42;
  v10 = v43;
  v9 = v44;
  v12 = v45;
  v11 = v46;
  v13 = v47;
  v14 = v48;
  v15 = v49;
  v22 = v28;
  v23 = v29;
  v26 = v32;
  v27 = v31;
  v20 = v33;
  v21 = v30;
  v18 = v35;
  v19 = v34;
  v25 = v36;
  v17 = v37;
  v16 = v38;
  v39 = (uint64_t)v41;
  v40 = v42;
  v41 = (void *)v43;
  v42 = v44;
  v43 = v45;
  v44 = v46;
  v45 = v47;
  v46 = v48;
  LOBYTE(v47) = v49;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v7, v8, v10, v9, v12, v11, v13, v14, v15);
  specialized Material.subscript.setter((uint64_t)&v39, v24, v6);
  if (v23)
  {
    v28 = (uint64_t)v21;
    v29 = v27;
    v30 = (void *)v26;
    v31 = v20;
    v32 = v19;
    v33 = v18;
    v34 = v25;
    v35 = v17;
    LOBYTE(v36) = v16;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v21, v27, v26, v20, v19, v18, v25, v17, v16);
    specialized Material.subscript.setter((uint64_t)&v28, v22, v23);
    outlined consume of MaterialParameterKeyValue?(v22, v23, v21, v27, v26, v20, v19, v18, v25, v17, v16);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, v8, v10, v9, v12, v11, v13, v14, v15);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.ClearcoatNormal.getCurrentValues(alternateTintKey:));
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  float v50;
  uint64_t v51;
  int v52;

  v50 = a3;
  v51 = a1;
  v52 = a2;
  a6(&v39, &v28);
  v6 = v40;
  v24 = v39;
  v7 = v41;
  v8 = v42;
  v10 = v43;
  v9 = v44;
  v12 = v45;
  v11 = v46;
  v13 = v47;
  v14 = v48;
  v15 = v49;
  v22 = v28;
  v23 = v29;
  v26 = v32;
  v27 = v31;
  v20 = v33;
  v21 = v30;
  v18 = v35;
  v19 = v34;
  v25 = v36;
  v17 = v37;
  v16 = v38;
  v39 = (uint64_t)v41;
  v40 = v42;
  v41 = (void *)v43;
  v42 = v44;
  v43 = v45;
  v44 = v46;
  v45 = v47;
  v46 = v48;
  LOBYTE(v47) = v49;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v7, v8, v10, v9, v12, v11, v13, v14, v15);
  specialized Material.subscript.setter((uint64_t)&v39, v24, v6);
  if (v23)
  {
    v28 = (uint64_t)v21;
    v29 = v27;
    v30 = (void *)v26;
    v31 = v20;
    v32 = v19;
    v33 = v18;
    v34 = v25;
    v35 = v17;
    LOBYTE(v36) = v16;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v21, v27, v26, v20, v19, v18, v25, v17, v16);
    specialized Material.subscript.setter((uint64_t)&v28, v22, v23);
    outlined consume of MaterialParameterKeyValue?(v22, v23, v21, v27, v26, v20, v19, v18, v25, v17, v16);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, v8, v10, v9, v12, v11, v13, v14, v15);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  __n128 v47;
  uint64_t v48;
  int v49;

  v47 = a3;
  v48 = a1;
  v49 = a2;
  CustomMaterial.Custom.getCurrentValues(alternateTintKey:)((uint64_t)&v36, (uint64_t)&v25);
  v3 = v37;
  v21 = v36;
  v4 = v38;
  v5 = v39;
  v7 = v40;
  v6 = v41;
  v9 = v42;
  v8 = v43;
  v10 = v44;
  v11 = v45;
  v12 = v46;
  v19 = v25;
  v20 = v26;
  v23 = v29;
  v24 = v28;
  v17 = v30;
  v18 = v27;
  v15 = v32;
  v16 = v31;
  v22 = v33;
  v14 = v34;
  v13 = v35;
  v36 = (uint64_t)v38;
  v37 = v39;
  v38 = (void *)v40;
  v39 = v41;
  v40 = v42;
  v41 = v43;
  v42 = v44;
  v43 = v45;
  LOBYTE(v44) = v46;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v4, v5, v7, v6, v9, v8, v10, v11, v12);
  specialized Material.subscript.setter((uint64_t)&v36, v21, v3);
  if (v20)
  {
    v25 = (uint64_t)v18;
    v26 = v24;
    v27 = (void *)v23;
    v28 = v17;
    v29 = v16;
    v30 = v15;
    v31 = v22;
    v32 = v14;
    LOBYTE(v33) = v13;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v18, v24, v23, v17, v16, v15, v22, v14, v13);
    specialized Material.subscript.setter((uint64_t)&v25, v19, v20);
    outlined consume of MaterialParameterKeyValue?(v19, v20, v18, v24, v23, v17, v16, v15, v22, v14, v13);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v5, v7, v6, v9, v8, v10, v11, v12);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t *))
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  int v50;

  v49 = a1;
  v50 = a2;
  a5(&v38, &v27);
  v5 = v39;
  v23 = v38;
  v6 = v40;
  v7 = v41;
  v9 = v42;
  v8 = v43;
  v11 = v44;
  v10 = v45;
  v12 = v46;
  v13 = v47;
  v14 = v48;
  v21 = v27;
  v22 = v28;
  v25 = v31;
  v26 = v30;
  v19 = v32;
  v20 = v29;
  v17 = v34;
  v18 = v33;
  v24 = v35;
  v16 = v36;
  v15 = v37;
  v38 = (uint64_t)v40;
  v39 = v41;
  v40 = (void *)v42;
  v41 = v43;
  v42 = v44;
  v43 = v45;
  v44 = v46;
  v45 = v47;
  LOBYTE(v46) = v48;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v7, v9, v8, v11, v10, v12, v13, v14);
  specialized Material.subscript.setter((uint64_t)&v38, v23, v5);
  if (v22)
  {
    v27 = (uint64_t)v20;
    v28 = v26;
    v29 = (void *)v25;
    v30 = v19;
    v31 = v18;
    v32 = v17;
    v33 = v24;
    v34 = v16;
    LOBYTE(v35) = v15;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v20, v26, v25, v19, v18, v17, v24, v16, v15);
    specialized Material.subscript.setter((uint64_t)&v27, v21, v22);
    outlined consume of MaterialParameterKeyValue?(v21, v22, v20, v26, v25, v19, v18, v17, v24, v16, v15);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v7, v9, v8, v11, v10, v12, v13, v14);
}

void *Material.getFloat4Parameter(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *result;
  void *v4[8];
  unsigned __int8 v5;

  Material.subscript.getter(a1, a2, a3, (uint64_t)v4);
  if (v5 != 255)
  {
    result = v4[0];
    if (v5 == 5)
      return result;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v4[0], (uint64_t)v4[1], (uint64_t)v4[2], (uint64_t)v4[3], (uint64_t)v4[4], (uint64_t)v4[5], (uint64_t)v4[6], (uint64_t)v4[7], v5);
  }
  return 0;
}

Swift::Bool __swiftcall Material.syncMaterialRenderStateToCore(_:index:)(Swift::OpaquePointer _, Swift::Int index)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int CullModeAtIndex;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  BOOL v22;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t);
  _BOOL4 v26;
  char *v27;
  char v28;
  int v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  int v31;
  char v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  char v34;
  char v35;
  char v36;
  char v37;
  void (*v38)(uint64_t, uint64_t);
  char v39;
  void (*v40)(uint64_t, uint64_t);
  char v41;
  Swift::Bool result;
  char v43;
  void (*v44)(uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  Swift::Int v48;
  void *rawValue;
  char v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;

  v5 = v4;
  v6 = v3;
  v7 = v2;
  v54 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](_._rawValue);
  v45 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v44 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v44 - v16;
  v53 = 0;
  REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex();
  v52 = 2;
  CullModeAtIndex = REMaterialRenderStateArrayComponentGetCullModeAtIndex();
  v51 = 1;
  REMaterialRenderStateArrayComponentGetWritesDepthAtIndex();
  v50 = 1;
  v48 = index;
  rawValue = _._rawValue;
  REMaterialRenderStateArrayComponentGetReadsDepthAtIndex();
  v47 = v53;
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 40);
  v46 = v19(v7, v6);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v20(v17, v4, v7);
  v44 = (void (*)(uint64_t, uint64_t))v19;
  if (CullModeAtIndex)
  {
    v21 = v52;
    v22 = v21 != (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 112))(v7, v6);
    v24 = v23 | v22;
  }
  else
  {
    v24 = 0;
  }
  v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25(v17, v7);
  v20(v14, v5, v7);
  if ((v24 & 1) != 0)
  {
    v26 = 1;
  }
  else
  {
    v27 = v45;
    v20(v45, (uint64_t)v14, v7);
    if ((CullModeAtIndex & 1) != 0)
    {
      v26 = 0;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 112))(v7, v6);
      v26 = (v28 & 1) == 0;
    }
    v25(v27, v7);
  }
  v25(v14, v7);
  v29 = v51;
  v30 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 64);
  v31 = v29 ^ v30(v7, v6);
  v32 = v50;
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 88);
  v34 = v33(v7, v6);
  v35 = v32 ^ v34;
  if (v47 == (uint64_t (*)(uint64_t, uint64_t))v46)
  {
    if (!v26 && (v31 & 1) != 0)
    {
      v39 = 1;
LABEL_24:
      if ((v30(v7, v6) & 1) == 0)
      {
        REMaterialRenderStateArrayComponentSetWritesDepthAtIndex();
        if ((v35 & 1) == 0)
          return v39 & 1;
LABEL_29:
        if ((v33(v7, v6) & 1) != 0)
          REMaterialRenderStateArrayComponentClearReadsDepthAtIndex();
        else
          REMaterialRenderStateArrayComponentSetReadsDepthAtIndex();
        return v39 & 1;
      }
      REMaterialRenderStateArrayComponentClearWritesDepthAtIndex();
LABEL_26:
      if ((v35 & 1) == 0)
        return v39 & 1;
      goto LABEL_29;
    }
    v47 = v30;
    v36 = v26 | v35;
    if (!v26)
    {
LABEL_23:
      v39 = v36;
      v30 = v47;
      if ((v31 & 1) == 0)
        goto LABEL_26;
      goto LABEL_24;
    }
  }
  else
  {
    v46 = (uint64_t)v33;
    v47 = v30;
    v37 = v32 ^ v34;
    v38 = v44;
    if (((uint64_t (*)(uint64_t, uint64_t))v44)(v7, v6))
    {
      v38(v7, v6);
      REMaterialRenderStateArrayComponentSetTriangleFillModeAtIndex();
    }
    else
    {
      REMaterialRenderStateArrayComponentClearTriangleFillModeAtIndex();
    }
    v36 = 1;
    v35 = v37;
    v33 = (uint64_t (*)(uint64_t, uint64_t))v46;
    if (!v26)
      goto LABEL_23;
  }
  v40 = *(void (**)(uint64_t, uint64_t))(v6 + 112);
  v40(v7, v6);
  if ((v41 & 1) != 0)
  {
    REMaterialRenderStateArrayComponentClearCullModeAtIndex();
    goto LABEL_23;
  }
  result = ((uint64_t (*)(uint64_t, uint64_t))v40)(v7, v6);
  if ((v43 & 1) == 0)
  {
    REMaterialRenderStateArrayComponentSetCullModeAtIndex();
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall Material.syncMaterialRenderStateFromCore(coreComponent:index:)(Swift::OpaquePointer coreComponent, Swift::Int index)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3;
  v5 = v2;
  if (REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex())
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 48))(0, v5, v4);
  if (REMaterialRenderStateArrayComponentGetWritesDepthAtIndex())
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 72))(1, v5, v4);
  if (REMaterialRenderStateArrayComponentGetReadsDepthAtIndex())
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 96))(1, v5, v4);
  if (REMaterialRenderStateArrayComponentGetCullModeAtIndex())
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 120))(2, 0, v5, v4);
  else
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v4 + 120))(0, 1, v5, v4);
}

void __MaterialResource.CoreMaterialFunction.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  Swift::UInt32 *v5;
  Swift::UInt32 v6;
  id v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(void **)(v0 + 40);
  Hasher._combine(_:)(*(_BYTE *)v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v3 = (void *)REAssetHandleCopyAssetIdentifierString();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  _CFObject.hash(into:)();

  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  v7 = v2;
  NSObject.hash(into:)();

}

uint64_t __MaterialResource.CoreMaterialFunction.init(_:)@<X0>(uint64_t a1@<X8>)
{
  char Stage;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t LinkedFunctionLibrary;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  int LinkedShaderAPIAtIndex;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[32];
  _QWORD v20[4];

  Stage = REFunctionLinkGetStage();
  v3 = (id)REFunctionLinkCopyLinkedFunctionName();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  LinkedFunctionLibrary = REFunctionLinkGetLinkedFunctionLibrary();
  v20[3] = MEMORY[0x24BEE27D0];
  v20[0] = LinkedFunctionLibrary;
  outlined init with copy of Any((uint64_t)v20, (uint64_t)v19);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  result = REFunctionLinkGetLinkedShaderAPICount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    v17 = v6;
    v10 = v4;
    v11 = Stage;
    if (result)
    {
      v12 = 0;
      v13 = (char *)MEMORY[0x24BEE4AF8];
      do
      {
        LinkedShaderAPIAtIndex = REFunctionLinkGetLinkedShaderAPIAtIndex();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
        v16 = *((_QWORD *)v13 + 2);
        v15 = *((_QWORD *)v13 + 3);
        if (v16 >= v15 >> 1)
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v13);
        ++v12;
        *((_QWORD *)v13 + 2) = v16 + 1;
        *(_DWORD *)&v13[4 * v16 + 32] = LinkedShaderAPIAtIndex;
      }
      while (v9 != v12);
    }
    else
    {
      v13 = (char *)MEMORY[0x24BEE4AF8];
    }
    result = (uint64_t)(id)REFunctionLinkGetConstantValues();
    *(_BYTE *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 24) = v18;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = result;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __MaterialResource.CoreMaterialFunction()
{
  Hasher.init(_seed:)();
  __MaterialResource.CoreMaterialFunction.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __MaterialResource.CoreMaterialFunction()
{
  Hasher.init(_seed:)();
  __MaterialResource.CoreMaterialFunction.hash(into:)();
  return Hasher._finalize()();
}

uint64_t __MaterialResource.coreAsset.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_21BAD67F0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t __MaterialResource.coreAsset.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*__MaterialResource.coreAsset.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __MaterialResource.__coreAsset.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 16);
  return result;
}

uint64_t __MaterialResource.name.getter()
{
  swift_beginAccess();
  REMaterialAssetGetName();
  return String.init(cString:)();
}

uint64_t __MaterialResource.cullMode.getter()
{
  int CullMode;
  uint64_t v1;

  swift_beginAccess();
  CullMode = REMaterialAssetGetCullMode();
  v1 = 2;
  if (!CullMode)
    return 0;
  return v1;
}

_QWORD *one-time initialization function for mapping()
{
  _QWORD *result;

  result = closure #1 in variable initialization expression of static __MaterialResource.mapping();
  static __MaterialResource.mapping = result;
  return result;
}

_QWORD *closure #1 in variable initialization expression of static __MaterialResource.mapping()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = v0[2];
  v1 = v0[3];
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
    v1 = v0[3];
    v3 = v1 >> 1;
  }
  v0[2] = v4;
  v5 = &v0[3 * v2];
  *((_BYTE *)v5 + 32) = 1;
  v5[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v5[6] = 0;
  v6 = v2 + 2;
  if (v3 < (uint64_t)(v2 + 2))
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v2 + 2, 1, v0);
  v0[2] = v6;
  v7 = &v0[3 * v4];
  *((_BYTE *)v7 + 32) = 7;
  v7[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v7[6] = 0;
  v8 = v0[3];
  v9 = v2 + 3;
  if ((uint64_t)(v2 + 3) > (uint64_t)(v8 >> 1))
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v2 + 3, 1, v0);
  v0[2] = v9;
  v10 = &v0[3 * v6];
  *((_BYTE *)v10 + 32) = 2;
  v10[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v10[6] = 0;
  v11 = v0[3];
  v12 = v2 + 4;
  if ((uint64_t)(v2 + 4) > (uint64_t)(v11 >> 1))
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v2 + 4, 1, v0);
  v0[2] = v12;
  v13 = &v0[3 * v9];
  *((_BYTE *)v13 + 32) = 6;
  v13[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v13[6] = 0;
  v14 = v0[3];
  v15 = v2 + 5;
  if ((uint64_t)(v2 + 5) > (uint64_t)(v14 >> 1))
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v2 + 5, 1, v0);
  v0[2] = v15;
  v16 = &v0[3 * v12];
  *((_BYTE *)v16 + 32) = 3;
  v16[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v16[6] = 0;
  v17 = v0[3];
  v18 = v2 + 6;
  if ((uint64_t)(v2 + 6) > (uint64_t)(v17 >> 1))
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v2 + 6, 1, v0);
  v0[2] = v18;
  v19 = &v0[3 * v15];
  *((_BYTE *)v19 + 32) = 4;
  v19[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v19[6] = 0;
  v20 = v0[3];
  v21 = v2 + 7;
  if ((uint64_t)(v2 + 7) > (uint64_t)(v20 >> 1))
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v2 + 7, 1, v0);
  v0[2] = v21;
  v22 = &v0[3 * v18];
  *((_BYTE *)v22 + 32) = 8;
  v22[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v22[6] = 0;
  v23 = v0[3];
  if ((uint64_t)(v2 + 8) > (uint64_t)(v23 >> 1))
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v2 + 8, 1, v0);
  v0[2] = v2 + 8;
  v24 = &v0[3 * v21];
  *((_BYTE *)v24 + 32) = 0;
  v24[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v24[6] = 0;
  return v0;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;

  v4 = *a1;
  v5 = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v12 = *(_QWORD *)a2;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  a3[3] = (uint64_t)&type metadata for PhysicallyBasedMaterial;
  a3[4] = (uint64_t)&protocol witness table for PhysicallyBasedMaterial;
  v8 = swift_allocObject();
  v9 = v8 + 16;
  *a3 = v8;
  swift_bridgeObjectRetain();
  v10 = v7;
  swift_bridgeObjectRetain();
  return PhysicallyBasedMaterial.init(_:_:)(v4, &v12, v9);
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;

  v4 = *a1;
  v5 = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v12 = *(_QWORD *)a2;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  a3[3] = (uint64_t)&type metadata for UnlitMaterial;
  a3[4] = (uint64_t)&protocol witness table for UnlitMaterial;
  v8 = swift_allocObject();
  v9 = v8 + 16;
  *a3 = v8;
  swift_bridgeObjectRetain();
  v10 = v7;
  swift_bridgeObjectRetain();
  return UnlitMaterial.init(_:_:)(v4, &v12, v9);
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;

  v4 = *a1;
  v5 = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v12 = *(_QWORD *)a2;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  a3[3] = (uint64_t)&type metadata for SimpleMaterial;
  a3[4] = (uint64_t)&protocol witness table for SimpleMaterial;
  v8 = swift_allocObject();
  v9 = v8 + 16;
  *a3 = v8;
  swift_bridgeObjectRetain();
  v10 = v7;
  swift_bridgeObjectRetain();
  return SimpleMaterial.init(_:_:)(v4, &v12, v9);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;

  v4 = *a1;
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v7 = a2[2];
  v8 = (void *)a2[3];
  a3[3] = (uint64_t)&type metadata for ShaderGraphMaterial;
  a3[4] = (uint64_t)&protocol witness table for ShaderGraphMaterial;
  v9 = swift_allocObject();
  *a3 = v9;
  swift_bridgeObjectRetain();
  v10 = v8;
  swift_bridgeObjectRetain();
  result = specialized static LoadableResource.fromCore(assetRef:)(v4);
  if (result)
  {
    *(_QWORD *)(v9 + 16) = result;
    *(_QWORD *)(v9 + 24) = v5;
    *(_BYTE *)(v9 + 32) = v6;
    *(_QWORD *)(v9 + 40) = v7;
    *(_QWORD *)(v9 + 48) = v10;
    *(_QWORD *)(v9 + 56) = 0;
    *(_WORD *)(v9 + 64) = 257;
    *(_QWORD *)(v9 + 72) = 0;
    *(_BYTE *)(v9 + 80) = 1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = *a1;
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v7 = a2[2];
  v8 = (void *)a2[3];
  a3[3] = (uint64_t)&type metadata for OcclusionMaterial;
  a3[4] = (uint64_t)&protocol witness table for OcclusionMaterial;
  v9 = swift_allocObject();
  *a3 = v9;
  swift_bridgeObjectRetain();
  v10 = v8;
  swift_bridgeObjectRetain();
  v11 = specialized static LoadableResource.fromCore(assetRef:)(v4);
  if (v11)
  {
    v12 = v11;
    result = REMaterialAssetGetFeatureFlags();
    *(_QWORD *)(v9 + 16) = v12;
    *(_QWORD *)(v9 + 24) = v5;
    *(_BYTE *)(v9 + 32) = v6;
    *(_QWORD *)(v9 + 40) = v7;
    *(_QWORD *)(v9 + 48) = v10;
    *(_BYTE *)(v9 + 56) = result & 1;
    *(_BYTE *)(v9 + 57) = 1;
    *(_QWORD *)(v9 + 64) = 0;
    *(_BYTE *)(v9 + 72) = 1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;

  v4 = *a1;
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v7 = a2[2];
  v8 = (void *)a2[3];
  a3[3] = (uint64_t)&type metadata for PortalMaterial;
  a3[4] = (uint64_t)&protocol witness table for PortalMaterial;
  v9 = swift_allocObject();
  *a3 = v9;
  swift_bridgeObjectRetain();
  v10 = v8;
  swift_bridgeObjectRetain();
  result = specialized static LoadableResource.fromCore(assetRef:)(v4);
  if (result)
  {
    *(_QWORD *)(v9 + 16) = result;
    *(_QWORD *)(v9 + 24) = v5;
    *(_BYTE *)(v9 + 32) = v6;
    *(_QWORD *)(v9 + 40) = v7;
    *(_QWORD *)(v9 + 48) = v10;
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 64) = 0;
    *(_BYTE *)(v9 + 72) = 1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;

  v4 = *a1;
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v7 = a2[2];
  v8 = (void *)a2[3];
  a3[3] = (uint64_t)&type metadata for AnyMaterial;
  a3[4] = (uint64_t)&protocol witness table for AnyMaterial;
  v9 = swift_allocObject();
  *a3 = v9;
  swift_bridgeObjectRetain();
  v10 = v8;
  swift_bridgeObjectRetain();
  result = specialized static LoadableResource.fromCore(assetRef:)(v4);
  if (result)
  {
    *(_QWORD *)(v9 + 16) = result;
    *(_QWORD *)(v9 + 24) = v5;
    *(_BYTE *)(v9 + 32) = v6;
    *(_QWORD *)(v9 + 40) = v7;
    *(_QWORD *)(v9 + 48) = v10;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return closure #4 in closure #1 in variable initialization expression of static __MaterialResource.mapping(*a1, a2, *(void **)a3, *(void **)(a3 + 8), *(_BYTE *)(a3 + 16), a4);
}

uint64_t closure #4 in closure #1 in variable initialization expression of static __MaterialResource.mapping@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  ValueMetadata *v14;
  ValueMetadata *v15;
  uint64_t result;
  uint64_t v17;
  ValueMetadata *v18;
  _OWORD __src[21];
  __int128 v20;
  uint64_t v21;
  ValueMetadata *v22;
  _UNKNOWN **v23;

  v11 = *a2;
  v12 = *((_BYTE *)a2 + 8);
  v13 = a2[2];
  v14 = (ValueMetadata *)a2[3];
  *(_QWORD *)&v20 = *a2;
  BYTE8(v20) = v12;
  v21 = v13;
  v22 = v14;
  swift_bridgeObjectRetain();
  v15 = v14;
  swift_bridgeObjectRetain();
  outlined copy of CustomMaterial.CustomUniformsState?(a3, a4, a5);
  CustomMaterial.init(_:_:_:)(a1, (uint64_t *)&v20, a3, a4, a5, __src);
  if (*(_QWORD *)&__src[0])
  {
    v22 = &type metadata for CustomMaterial;
    v23 = &protocol witness table for CustomMaterial;
    *(_QWORD *)&v20 = swift_allocObject();
    memcpy((void *)(v20 + 16), __src, 0x14AuLL);
    return outlined init with take of BindableDataInternal(&v20, (uint64_t)a6);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)__src, &demangling cache variable for type metadata for CustomMaterial?);
    a6[3] = (uint64_t)&type metadata for AnyMaterial;
    a6[4] = (uint64_t)&protocol witness table for AnyMaterial;
    v17 = swift_allocObject();
    *a6 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = v15;
    result = specialized static LoadableResource.fromCore(assetRef:)(a1);
    if (result)
    {
      *(_QWORD *)(v17 + 16) = result;
      *(_QWORD *)(v17 + 24) = v11;
      *(_BYTE *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v13;
      *(_QWORD *)(v17 + 48) = v18;
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t SimpleMaterial.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[5];

  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v7 = a2[2];
  v8 = a2[3];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = 0;
  strcpy((char *)(a3 + 80), "baseColorTint");
  *(_WORD *)(a3 + 94) = -4864;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 136) = 1;
  *(_WORD *)(a3 + 137) = 257;
  v9 = specialized static LoadableResource.fromCore(assetRef:)(a1);
  if (v9)
  {
    *(_QWORD *)(a3 + 40) = v9;
    *(_QWORD *)(a3 + 48) = v5;
    *(_BYTE *)(a3 + 56) = v6;
    *(_QWORD *)(a3 + 64) = v7;
    *(_QWORD *)(a3 + 72) = v8;
    v10 = one-time initialization token for materialMapRegistry;
    swift_retain();
    if (v10 != -1)
      swift_once();
    SimpleMaterial.assetService.getter((uint64_t)v14);
    v11 = specialized AssetServiceScopedRegistry.instance(for:)(v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v12 = *(_QWORD *)(v11 + 64);
    swift_release();
    result = swift_release();
    *(_BYTE *)(a3 + 112) = v12 == a1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  int Type;
  uint64_t v16;
  char *v17;
  char v18;
  char *v19;
  int v20;
  void (*v21)(uint64_t *, uint64_t *, _QWORD *);
  uint64_t result;
  uint64_t v23;
  id v24;
  _QWORD v25[2];
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;

  v11 = *a2;
  v12 = *((_BYTE *)a2 + 8);
  v13 = a2[2];
  v14 = (void *)a2[3];
  Type = REMaterialAssetGetType();
  if (one-time initialization token for mapping != -1)
    swift_once();
  v16 = *((_QWORD *)static __MaterialResource.mapping + 2);
  if (!v16)
  {
LABEL_11:
    a6[3] = (uint64_t)&type metadata for AnyMaterial;
    a6[4] = (uint64_t)&protocol witness table for AnyMaterial;
    v23 = swift_allocObject();
    *a6 = v23;
    swift_bridgeObjectRetain();
    v24 = v14;
    swift_bridgeObjectRetain();
    result = specialized static LoadableResource.fromCore(assetRef:)(a1);
    if (result)
    {
      *(_QWORD *)(v23 + 16) = result;
      *(_QWORD *)(v23 + 24) = v11;
      *(_BYTE *)(v23 + 32) = v12;
      *(_QWORD *)(v23 + 40) = v13;
      *(_QWORD *)(v23 + 48) = v24;
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    return result;
  }
  v17 = (char *)static __MaterialResource.mapping + 40;
  if (*((unsigned __int8 *)static __MaterialResource.mapping + 32) != Type)
  {
    v19 = (char *)static __MaterialResource.mapping + 40;
    while (--v16)
    {
      v17 = v19 + 24;
      v20 = v19[16];
      v19 += 24;
      if (v20 == Type)
      {
        v18 = a5;
        goto LABEL_10;
      }
    }
    goto LABEL_11;
  }
  v18 = a5;
LABEL_10:
  v21 = *(void (**)(uint64_t *, uint64_t *, _QWORD *))v17;
  v27 = a1;
  v28 = v11;
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v25[0] = a3;
  v25[1] = a4;
  v26 = v18;
  swift_retain();
  v21(&v27, &v28, v25);
  return swift_release();
}

void __MaterialResource.LoadError.errorDescription.getter()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_21BAD7808()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v3;

  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  String.append(_:)(v3);
  v1._countAndFlagsBits = 0x6E7562206E692022;
  v1._object = (void *)0xEB00000000656C64;
  String.append(_:)(v1);
  return v0 + 17;
}

void protocol witness for LocalizedError.errorDescription.getter in conformance __MaterialResource.LoadError()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v1);
  __MaterialResource.LoadError.errorDescription.getter();
}

uint64_t static __MaterialResource.createMaterial(_:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[5];
  __int128 v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_BYTE *)a1 + 24);
  v12 = *a1;
  v13 = v3;
  LOBYTE(v14) = v4;
  *(_DWORD *)((char *)&v14 + 1) = *(_DWORD *)((char *)a1 + 25);
  v5 = a1[3];
  v15 = a1[2];
  v16 = v5;
  v6 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6, (uint64_t)v11);
  v7 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)((uint64_t *)&v12, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  REAssetHandleLoadNow();
  if ((REAssetHandleLoadFailed() & 1) != 0)
  {
    lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
    swift_allocError();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_BYTE *)(v8 + 32) = 3;
    swift_willThrow();
  }
  else
  {
    v9 = (void *)REMaterialParameterBlockValueCreate();
    *(_QWORD *)&v12 = MEMORY[0x24BEE4AF8];
    BYTE8(v12) = 0;
    v13 = 0;
    v14 = v9;
    static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v7, (uint64_t *)&v12, 0, 0, 255, a2);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return RERelease();
}

uint64_t static __MaterialResource.__load(named:in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  void *FailedMessage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;

  result = specialized static __MaterialResource.createAssetRef(named:in:)(a1, a2, a3);
  if (!v4)
  {
    v9 = result;
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      swift_bridgeObjectRetain();
      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v13 = v12;

      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(_QWORD *)v14 = a1;
      *(_QWORD *)(v14 + 8) = a2;
      *(_QWORD *)(v14 + 16) = v11;
      *(_QWORD *)(v14 + 24) = v13;
      *(_BYTE *)(v14 + 32) = 1;
      swift_willThrow();
    }
    else
    {
      v15 = (void *)REMaterialParameterBlockValueCreate();
      v16 = MEMORY[0x24BEE4AF8];
      v17 = 0;
      v18 = 0;
      v19 = v15;
      static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v9, &v16, 0, 0, 255, a4);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return RERelease();
  }
  return result;
}

uint64_t static __MaterialResource.loadAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  v8 = a3;
  swift_bridgeObjectRetain();
  v9 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  v10 = static __MaterialResource.loadAsync(_:services:)((uint64_t)partial apply for closure #1 in static __MaterialResource.loadAsync(named:in:), (uint64_t)v7, v9);
  swift_release();
  swift_release();
  return v10;
}

uint64_t static __MaterialResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssetRequest;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v7 = a3 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)v20);
  outlined init with copy of __REAssetService(v7, (uint64_t)v17);
  v8 = v18;
  v9 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
  v10 = v21;
  v11 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = AssetRequest;
  if ((v9 & 1) != 0)
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  v14 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  *(_QWORD *)(v14 + 16) = v13;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = v14;
  v15[5] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Material>);
  swift_allocObject();
  swift_retain();
  return specialized LoadRequest.init(_:dependencies:)((uint64_t)partial apply for closure #1 in static __MaterialResource.loadAsync(_:services:), (uint64_t)v15, 0);
}

uint64_t closure #1 in static __MaterialResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  _QWORD aBlock[6];

  v10 = a3();
  type metadata accessor for __REAsset();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  swift_beginAccess();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a6;
  v12[5] = v11;
  v12[6] = a5;
  aBlock[4] = partial apply for closure #1 in closure #1 in static __MaterialResource.loadAsync(_:services:);
  aBlock[5] = v12;
  v13 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_105;
  v14 = _Block_copy(aBlock);
  v15 = _Block_copy(v14);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v19[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v19[5] = v16;
  v19[0] = v13;
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v19[3] = &block_descriptor_112;
  v17 = _Block_copy(v19);
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v17);
  swift_release();
  _Block_release(v14);
  swift_release();
  swift_beginAccess();
  swift_retain();
  REAssetLoadRequestAddAsset();
  swift_release();
  return swift_release_n();
}

void closure #1 in closure #1 in static __MaterialResource.loadAsync(_:services:)(char a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t aBlock[5];
  uint64_t v24;

  if ((a1 & 1) != 0)
  {
    v6 = *(_QWORD *)(a5 + 16);
    v7 = (void *)REMaterialParameterBlockValueCreate();
    v17 = MEMORY[0x24BEE4AF8];
    LOBYTE(v18) = 0;
    v19 = 0;
    v20 = v7;
    static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v6, &v17, 0, 0, 255, aBlock);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v24) = 0;
  }
  else
  {
    v8 = (void *)REAssetHandleCopyAssetIdentifierString();
    v9 = String.init(_:)(v8);
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    v10 = swift_allocError();
    *(Swift::String *)v11 = v9;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_BYTE *)(v11 + 32) = 0;
    aBlock[0] = v10;
    LOBYTE(v24) = 1;
  }
  a2(aBlock);
  outlined destroy of BodyTrackingComponent?((uint64_t)aBlock, (uint64_t *)&demangling cache variable for type metadata for Result<Material, Error>);
  swift_beginAccess();
  aBlock[4] = (uint64_t)destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  v24 = 0;
  v12 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_115;
  v13 = _Block_copy(aBlock);
  v14 = _Block_copy(v13);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  v21 = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v22 = v15;
  v17 = v12;
  v18 = 1107296256;
  v19 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v20 = &block_descriptor_122;
  v16 = _Block_copy(&v17);
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v16);
  swift_release();
  _Block_release(v13);
}

void __MaterialResource.BuildParameters.Value.asString.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_21BAD8260()
{
  char v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if ((v0 & 1) != 0)
    v1 = 1702195828;
  else
    v1 = 0x65736C6166;
  if ((v0 & 1) != 0)
    v2 = 0xE400000000000000;
  else
    v2 = 0xE500000000000000;
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  return 0;
}

void __MaterialResource.BuildParameters.Value.hash(into:)()
{
  __asm { BR              X11 }
}

void sub_21BAD8508()
{
  char v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0 & 1);
}

Swift::Int __MaterialResource.BuildParameters.Value.hashValue.getter()
{
  Hasher.init(_seed:)();
  __MaterialResource.BuildParameters.Value.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __MaterialResource.BuildParameters.Value()
{
  Hasher.init(_seed:)();
  __MaterialResource.BuildParameters.Value.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __MaterialResource.BuildParameters.Value()
{
  Hasher.init(_seed:)();
  __MaterialResource.BuildParameters.Value.hash(into:)();
  return Hasher._finalize()();
}

uint64_t __MaterialResource.BuildParameters.materialDefinition.getter()
{
  return swift_retain();
}

uint64_t __MaterialResource.BuildParameters.materialDefinition.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.materialDefinition.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.functionConstants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __MaterialResource.BuildParameters.functionConstants.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.functionConstants.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.cullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t __MaterialResource.BuildParameters.cullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.cullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.passthroughBlur.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t __MaterialResource.BuildParameters.passthroughBlur.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.passthroughBlur.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.vcaBlur.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t __MaterialResource.BuildParameters.vcaBlur.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 26) = result;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.vcaBlur.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.multiUVs.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 27);
}

uint64_t __MaterialResource.BuildParameters.multiUVs.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 27) = result;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.multiUVs.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __MaterialResource.BuildParameters.blendMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 28);
}

_BYTE *__MaterialResource.BuildParameters.blendMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 28) = *result;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.blendMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.materialParameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __MaterialResource.BuildParameters.materialParameters.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.materialParameters.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.materialTextureParameterBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __MaterialResource.BuildParameters.materialTextureParameterBindings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.materialTextureParameterBindings.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.materialBufferParameterBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __MaterialResource.BuildParameters.materialBufferParameterBindings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.materialBufferParameterBindings.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.init(materialDefinition:functionConstants:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  swift_retain();
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x24BEE4AF8];
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRetain();
  v8 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  swift_bridgeObjectRetain();
  v9 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  result = swift_bridgeObjectRelease_n();
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 25) = 33686018;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = v9;
  *(_QWORD *)(a3 + 56) = v6;
  return result;
}

uint64_t static __MaterialResource.load(_:services:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[5];
  __int128 v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;

  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 24);
  v13 = *a1;
  v14 = v4;
  LOBYTE(v15) = v5;
  *(_DWORD *)((char *)&v15 + 1) = *(_DWORD *)((char *)a1 + 25);
  v6 = a1[3];
  v16 = a1[2];
  v17 = v6;
  v7 = a2 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)v12);
  v8 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)((uint64_t *)&v13, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  REAssetHandleLoadNow();
  if ((REAssetHandleLoadFailed() & 1) != 0)
  {
    lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
    swift_allocError();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_BYTE *)(v9 + 32) = 3;
    swift_willThrow();
  }
  else
  {
    v10 = (void *)REMaterialParameterBlockValueCreate();
    *(_QWORD *)&v13 = MEMORY[0x24BEE4AF8];
    BYTE8(v13) = 0;
    v14 = 0;
    v15 = v10;
    static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v8, (uint64_t *)&v13, 0, 0, 255, a3);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return RERelease();
}

uint64_t static __MaterialResource.loadAsync(_:services:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[4];

  v5 = a1[1];
  v12[0] = *a1;
  v12[1] = v5;
  v6 = a1[3];
  v12[2] = a1[2];
  v12[3] = v6;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v2;
  v8 = a1[1];
  *(_OWORD *)(v7 + 24) = *a1;
  *(_OWORD *)(v7 + 40) = v8;
  v9 = a1[3];
  *(_OWORD *)(v7 + 56) = a1[2];
  *(_OWORD *)(v7 + 72) = v9;
  *(_QWORD *)(v7 + 88) = a2;
  outlined retain of __MaterialResource.BuildParameters((uint64_t)v12);
  swift_retain();
  v10 = static __MaterialResource.loadAsync(_:services:)((uint64_t)partial apply for closure #1 in static __MaterialResource.loadAsync(_:services:), v7, a2);
  swift_release();
  return v10;
}

uint64_t closure #1 in static __MaterialResource.loadAsync(_:services:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  _OWORD v9[4];

  v3 = a2[1];
  v9[0] = *a2;
  v9[1] = v3;
  v4 = a2[3];
  v9[2] = a2[2];
  v9[3] = v4;
  v5 = a3 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v8);
  v6 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)((uint64_t *)v9, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t static __MaterialResource.load(named:in:services:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  void *FailedMessage;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;

  v11 = (_QWORD *)(a4 + 120);
  swift_beginAccess();
  __swift_project_boxed_opaque_existential_1(v11, *(_QWORD *)(a4 + 144));
  result = specialized __REAssetService.assetRef(named:in:)(a1, a2, a3);
  if (!v5)
  {
    v13 = *(_QWORD *)(result + 16);
    RERetain();
    swift_release();
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      swift_bridgeObjectRetain();
      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;

      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(_QWORD *)v18 = a1;
      *(_QWORD *)(v18 + 8) = a2;
      *(_QWORD *)(v18 + 16) = v15;
      *(_QWORD *)(v18 + 24) = v17;
      *(_BYTE *)(v18 + 32) = 1;
      swift_willThrow();
    }
    else
    {
      v19 = (void *)REMaterialParameterBlockValueCreate();
      v20 = MEMORY[0x24BEE4AF8];
      v21 = 0;
      v22 = 0;
      v23 = v19;
      static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v13, &v20, 0, 0, 255, a5);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return RERelease();
  }
  return result;
}

uint64_t static __MaterialResource.loadAsync(named:in:services:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v9, v12);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v4;
  *((_QWORD *)v14 + 3) = a1;
  *((_QWORD *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v14[v13], (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *(_QWORD *)&v14[(v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  v15 = static __MaterialResource.loadAsync(_:services:)((uint64_t)partial apply for closure #1 in static __MaterialResource.loadAsync(named:in:services:), (uint64_t)v14, a4);
  swift_release();
  return v15;
}

uint64_t closure #1 in static __MaterialResource.loadAsync(named:in:services:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = a5 + 15;
  swift_beginAccess();
  v12 = a5[18];
  v11 = a5[19];
  __swift_project_boxed_opaque_existential_1(v10, v12);
  v13 = specialized __REAssetService.assetRef(named:in:)(a2, a3, a4);
  if (!v5)
  {
    v11 = *(_QWORD *)(v13 + 16);
    RERetain();
    swift_release();
  }
  return v11;
}

uint64_t __MaterialResource.__allocating_init(fromCore:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  RERetain();
  *(_QWORD *)(v2 + 16) = a1;
  REAssetHandleLoadNow();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t __MaterialResource.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t __MaterialResource.__deallocating_deinit()
{
  swift_beginAccess();
  REAssetSetSwiftObject();
  RERelease();
  return swift_deallocClassInstance();
}

id __MaterialResource.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  int ParameterType;
  id result;
  char v4;
  uint64_t TextureAsset;
  uint64_t v6;
  uint64_t SamplerNameBoundToTexture;

  swift_beginAccess();
  String.utf8CString.getter();
  ParameterType = REMaterialAssetGetParameterType();
  result = (id)swift_release();
  switch(ParameterType)
  {
    case 1:
      String.utf8CString.getter();
      TextureAsset = REMaterialAssetGetTextureAsset();
      result = (id)swift_release();
      if (!TextureAsset)
        goto LABEL_2;
      type metadata accessor for TextureResource();
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = TextureAsset;
      *(_QWORD *)(v6 + 24) = 0;
      RERetain();
      REAssetSetSwiftObject();
      String.utf8CString.getter();
      SamplerNameBoundToTexture = REMaterialAssetGetSamplerNameBoundToTexture();
      swift_release();
      if (!SamplerNameBoundToTexture
        || (result = (id)REMaterialAssetCopySamplerDescriptor()) == 0)
      {
        result = (id)REMaterialCreateDefaultSamplerDescriptor();
      }
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = v6;
      *(_OWORD *)(a1 + 16) = xmmword_21BE5E810;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 1;
      break;
    case 2:
      String.utf8CString.getter();
      REMaterialAssetGetFloat();
      result = (id)swift_release();
      *(_QWORD *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 2;
      break;
    case 3:
      String.utf8CString.getter();
      REMaterialAssetGetFloat2F();
      result = (id)swift_release();
      *(_QWORD *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 3;
      break;
    case 4:
      String.utf8CString.getter();
      REMaterialAssetGetFloat3F();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 4;
      break;
    case 5:
      String.utf8CString.getter();
      REMaterialAssetGetFloat4F();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 5;
      break;
    case 6:
      String.utf8CString.getter();
      REMaterialAssetGetFloat2x2F();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 7;
      break;
    case 7:
      String.utf8CString.getter();
      REMaterialAssetGetFloat3x3F();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 8;
      break;
    case 8:
      String.utf8CString.getter();
      REMaterialAssetGetFloat4x4F();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 9;
      break;
    case 9:
      String.utf8CString.getter();
      REMaterialAssetGetBool();
      result = (id)swift_release();
      *(_QWORD *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 10;
      break;
    case 11:
      String.utf8CString.getter();
      REMaterialAssetGetInt();
      result = (id)swift_release();
      *(_QWORD *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 11;
      break;
    case 12:
      String.utf8CString.getter();
      REMaterialAssetGetUInt();
      result = (id)swift_release();
      *(_QWORD *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 15;
      break;
    case 13:
      String.utf8CString.getter();
      REMaterialAssetGetInt2();
      result = (id)swift_release();
      *(_QWORD *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 12;
      break;
    case 14:
      String.utf8CString.getter();
      REMaterialAssetGetUInt2();
      result = (id)swift_release();
      *(_QWORD *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 16;
      break;
    case 15:
      String.utf8CString.getter();
      REMaterialAssetGetInt3();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 13;
      break;
    case 16:
      String.utf8CString.getter();
      REMaterialAssetGetUInt3();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 17;
      break;
    case 17:
      String.utf8CString.getter();
      REMaterialAssetGetInt4();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 14;
      break;
    case 18:
      String.utf8CString.getter();
      REMaterialAssetGetUInt4();
      result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v4 = 18;
      break;
    case 19:
      String.utf8CString.getter();
      REMaterialAssetGetColor3F();
      swift_release();
      goto LABEL_26;
    case 20:
      String.utf8CString.getter();
      REMaterialAssetGetColor4F();
      swift_release();
LABEL_26:
      result = (id)RECreateCGColorFromColorGamut();
      *(_QWORD *)a1 = result;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      v4 = 6;
      break;
    default:
LABEL_2:
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      v4 = -1;
      break;
  }
  *(_BYTE *)(a1 + 64) = v4;
  return result;
}

uint64_t protocol witness for LoadableResource.init(fromCore:) in conformance __MaterialResource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 136))();
  *a1 = result;
  return result;
}

void __MaterialResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t __MaterialResource.addToLoadRequest(_:)()
{
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance __MaterialResource()
{
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

uint64_t static __MaterialResource.load(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  return swift_task_switch();
}

uint64_t static __MaterialResource.load(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(v0 + 2);
  v0[13] = v2;
  v3 = v2;
  v4 = v0[11];
  v5 = swift_task_alloc();
  v0[14] = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = (_QWORD *)swift_task_alloc();
  v0[15] = v6;
  *v6 = v0;
  v6[1] = static __MaterialResource.load(_:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;

  v2 = *(uint64_t **)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = (void *)REMaterialParameterBlockValueCreate();
  v5 = MEMORY[0x24BEE4AF8];
  v6 = 0;
  v7 = 0;
  v8 = v3;
  static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v1, &v5, 0, 0, 255, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in static __MaterialResource.load(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[6];
  _QWORD aBlock[6];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = partial apply for closure #1 in closure #1 in static __MaterialResource.load(_:);
  aBlock[5] = v7;
  v8 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_8;
  v9 = _Block_copy(aBlock);
  v10 = _Block_copy(v9);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  v14[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v14[5] = v11;
  v14[0] = v8;
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v14[3] = &block_descriptor_86;
  v12 = _Block_copy(v14);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v12);
  _Block_release(v9);
  swift_release();
  return REAssetLoadRequestAddAsset();
}

uint64_t AnyMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t AnyMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t AnyMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*AnyMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t specialized static LoadableResource.fromCore(assetRef:)(uint64_t a1)
{
  id v2;
  uint64_t v3;

  v2 = (id)REAssetGetSwiftObject();
  type metadata accessor for __MaterialResource();
  v3 = swift_dynamicCastClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
    v3 = swift_allocObject();
    RERetain();
    *(_QWORD *)(v3 + 16) = a1;
    REAssetHandleLoadNow();
    REAssetSetSwiftObject();
  }
  return v3;
}

uint64_t AnyMaterial.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = REMaterialParameterBlockValueCreate();
  result = specialized static LoadableResource.fromCore(assetRef:)(v3);
  if (result)
  {
    v6 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = v4;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Material.__resource.getter in conformance AnyMaterial()
{
  return swift_retain();
}

uint64_t protocol witness for Material.__parameterBlock.getter in conformance AnyMaterial@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Material.__parameterBlock.setter in conformance AnyMaterial(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*protocol witness for Material.__parameterBlock.modify in conformance AnyMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*protocol witness for Material.__triangleFillMode.modify in conformance AnyMaterial(_QWORD *a1))(_QWORD, _QWORD)
{
  *a1 = 0;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance AnyMaterial(_BYTE *a1))(_QWORD, _QWORD)
{
  *a1 = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*protocol witness for Material.__faceCullMode.modify in conformance AnyMaterial(uint64_t a1))(_QWORD, _QWORD)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t specialized Material.getColor(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  id v7;
  uint64_t result;
  __n128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;

  v5 = *(void **)(v2 + 72);
  swift_bridgeObjectRetain_n();
  v6 = v5;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  specialized String.withCString<A>(_:)(a1, a2, v7, (uint64_t)&v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v10;
  if (v17 > 5u)
  {
    if (v17 == 6)
      return result;
    if (v17 == 255)
      return 0;
    goto LABEL_7;
  }
  if (v17 == 4)
  {
    v9.n128_u64[1] = __PAIR64__(1.0, DWORD2(v10));
    v9.n128_u64[0] = v10;
    return specialized SIMD4<>.cgColor.getter(v9);
  }
  if (v17 != 5)
  {
LABEL_7:
    outlined consume of __RKMaterialParameterBlock.Parameter?((void *)v10, *((uint64_t *)&v10 + 1), v11, v12, v13, v14, v15, v16, v17);
    return 0;
  }
  v9 = (__n128)v10;
  return specialized SIMD4<>.cgColor.getter(v9);
}

uint64_t specialized Material.setScalarParameter(_:value:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint8x8_t v20;
  const char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  int16x8_t v25;
  _QWORD v26[3];
  unsigned __int32 v27;
  _QWORD v28[3];
  __int32 v29;

  v3 = v2;
  PbrCommonKeys.Constants.rawValue.getter(0x50204u >> (8 * a1));
  if (a2 < 0)
  {
    String.utf8CString.getter();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v11 = REMaterialParameterBlockValueCopy();
      v12 = *(void **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v11;

    }
    REMaterialParameterBlockValueSetFloat();
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with copy of SimpleMaterial(v3, (uint64_t)v26);
    v13 = PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    v15 = v14;
    v16 = swift_retain_n();
    specialized Material.makeMaterialParametersTextureFromTextureResource(_:textureKey:)(v16, v13, v15, (uint64_t)v28);
    swift_bridgeObjectRelease();
    outlined destroy of SimpleMaterial((uint64_t)v26);
    v18 = (void *)v28[0];
    v17 = v28[1];
    v19 = v28[2];
    v20.i32[0] = v29;
    v25 = (int16x8_t)vmovl_u8(v20);
    PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    v21 = (const char *)(String.utf8CString.getter() + 32);
    v22 = v18;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v23 = REMaterialParameterBlockValueCopy();
      v24 = *(void **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v23;

    }
    v26[0] = v18;
    v26[1] = v17;
    v26[2] = v19;
    v27 = vmovn_s16(v25).u32[0];
    __RKMaterialParameterBlock.setTextureParameter(texture:key:)((uint64_t)v26, v21);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of MaterialScalarParameter(a2);
    outlined consume of MaterialScalarParameter(a2);
    return swift_release();
  }
  else
  {
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v6 = REMaterialParameterBlockValueCopy();
      v7 = *(void **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v6;

    }
    REMaterialParameterBlockValueSetFloat();
    swift_bridgeObjectRelease();
    swift_release();
    PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v8 = REMaterialParameterBlockValueCopy();
      v9 = *(void **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v8;

    }
    REMaterialParameterBlockValueClearParameter();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

void specialized Material.setColorParameter(_:value:)(char a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  CGColorRef GenericRGB;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint8x8_t v22;
  const char *v23;
  id v24;
  uint64_t v25;
  void *v26;
  int16x8_t v27;
  CGColorRef v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  _QWORD v34[3];
  __int32 v35;

  v4 = v3;
  PbrCommonKeys.Constants.rawValue.getter(0x50204u >> (8 * a1));
  if ((a3 & 1) != 0)
  {
    swift_retain();
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v28 = GenericRGB;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0;
    v33 = 6;
    v13 = String.utf8CString.getter();
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v13 + 32, (uint64_t)&v28);

    swift_bridgeObjectRelease();
    swift_release();
    v14 = 10 - a1;
    outlined init with copy of SimpleMaterial(v3, (uint64_t)&v28);
    v15 = PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    v17 = v16;
    v18 = swift_retain_n();
    specialized Material.makeMaterialParametersTextureFromTextureResource(_:textureKey:)(v18, v15, v17, (uint64_t)v34);
    swift_bridgeObjectRelease();
    outlined destroy of SimpleMaterial((uint64_t)&v28);
    v20 = (void *)v34[0];
    v19 = v34[1];
    v21 = v34[2];
    v22.i32[0] = v35;
    v27 = (int16x8_t)vmovl_u8(v22);
    PbrCommonKeys.Textures.rawValue.getter(v14);
    v23 = (const char *)(String.utf8CString.getter() + 32);
    v24 = v20;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v25 = REMaterialParameterBlockValueCopy();
      v26 = *(void **)(v4 + 72);
      *(_QWORD *)(v4 + 72) = v25;

    }
    v28 = (CGColorRef)v20;
    *(_QWORD *)&v29 = v19;
    *((_QWORD *)&v29 + 1) = v21;
    LODWORD(v30) = vmovn_s16(v27).u32[0];
    __RKMaterialParameterBlock.setTextureParameter(texture:key:)((uint64_t)&v28, v23);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of __MaterialColorParameter(a2, 1);
    outlined consume of __MaterialColorParameter(a2, 1);
    swift_release();
  }
  else
  {
    v28 = (CGColorRef)a2;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0;
    v33 = 6;
    v8 = String.utf8CString.getter() + 32;
    outlined copy of __MaterialColorParameter(a2, 0);
    v9 = a2;
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v8, (uint64_t)&v28);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of __MaterialColorParameter(a2, 0);
    PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v10 = REMaterialParameterBlockValueCopy();
      v11 = *(void **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v10;

    }
    REMaterialParameterBlockValueClearParameter();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of __MaterialColorParameter(a2, 0);
  }
}

void specialized Material.getLegacyBase(legacy:)(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  CGColorRef GenericRGB;
  id v13;
  _QWORD v15[5];
  void *v16;
  void *v17;
  uint64_t v18;

  v15[3] = &type metadata for SimpleMaterial;
  v15[4] = &protocol witness table for SimpleMaterial;
  v15[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial(v4, v15[0] + 16);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v15, a1, a2, (uint64_t)&v16);
  v9 = v16;
  v8 = v17;
  v10 = v18;
  outlined copy of MaterialParameters.Texture?(v17, v18);

  outlined consume of MaterialParameters.Texture?(v8, v10);
  if (v10)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v8, v10);
    *(_QWORD *)a4 = v10;
    *(_BYTE *)(a4 + 8) = 1;
  }
  else
  {
    v11 = a3;
    GenericRGB = (CGColorRef)a3;
    if (!a3)
    {
      GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
      v11 = 0;
    }
    *(_QWORD *)a4 = GenericRGB;
    *(_BYTE *)(a4 + 8) = 0;
    v13 = v11;
  }
}

{
  uint64_t v4;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  CGColorRef GenericRGB;
  id v13;
  _QWORD v15[5];
  void *v16;
  void *v17;
  uint64_t v18;

  v15[3] = &type metadata for UnlitMaterial;
  v15[4] = &protocol witness table for UnlitMaterial;
  v15[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(v4, v15[0] + 16);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v15, a1, a2, (uint64_t)&v16);
  v9 = v16;
  v8 = v17;
  v10 = v18;
  outlined copy of MaterialParameters.Texture?(v17, v18);

  outlined consume of MaterialParameters.Texture?(v8, v10);
  if (v10)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v8, v10);
    *(_QWORD *)a4 = v10;
    *(_BYTE *)(a4 + 8) = 1;
  }
  else
  {
    v11 = a3;
    GenericRGB = (CGColorRef)a3;
    if (!a3)
    {
      GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
      v11 = 0;
    }
    *(_QWORD *)a4 = GenericRGB;
    *(_BYTE *)(a4 + 8) = 0;
    v13 = v11;
  }
}

void specialized Material.setLegacyBase(legacy:value:)(uint64_t a1, void *a2, char a3)
{
  void *v11;
  void *v12;
  id v13;
  void *v14;
  CGColor *v15;
  id v16;
  float32x4_t v17;
  CGColor *v18;
  float32x4_t v19;
  id GenericRGB;
  int v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  int v27;
  id v28;
  id v29;
  float32x4_t v30;
  _QWORD v31[4];
  int v32;

  __asm { FMOV            V0.4S, #1.0 }
  v11 = (void *)specialized SIMD4<>.cgColor.getter(_Q0);
  v12 = *(void **)(a1 + 24);
  if ((a3 & 1) != 0)
  {
    v21 = 84148994;
    swift_retain();

    *(_QWORD *)(a1 + 24) = 0;
    v23 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v24 = v23;
    v14 = *(void **)(a1 + 16);
    if (v14)
    {
      v22 = v23;
LABEL_13:
      GenericRGB = v14;
      goto LABEL_14;
    }
    v25 = a2;
    goto LABEL_10;
  }
  v13 = a2;

  *(_QWORD *)(a1 + 24) = a2;
  v14 = *(void **)(a1 + 16);
  if (!v14)
  {
    v24 = 0;
    v25 = 0;
    v21 = 0;
    v22 = 0;
    v26 = 0;
    v27 = 0;
    GenericRGB = v13;
    if (a2)
    {
LABEL_11:
      v28 = v13;
      v21 = v27;
      a2 = v26;
      goto LABEL_14;
    }
LABEL_10:
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v13 = 0;
    v22 = v24;
    v26 = v25;
    v27 = v21;
    goto LABEL_11;
  }
  if (!a2)
  {
    v22 = 0;
    v21 = 0;
    goto LABEL_13;
  }
  v15 = v14;
  v16 = v13;
  specialized SIMD4<>.init(_:)(v15);
  v30 = v17;
  v18 = (CGColor *)v16;
  specialized SIMD4<>.init(_:)(v18);
  GenericRGB = (id)specialized SIMD4<>.cgColor.getter((__n128)vmulq_f32(v30, v19));

  v21 = 0;
  a2 = 0;
  v22 = 0;
  v11 = v18;
LABEL_14:

  v31[0] = GenericRGB;
  v31[1] = v22;
  v31[2] = a2;
  v31[3] = 0;
  v32 = v21;
  v29 = GenericRGB;
  outlined copy of MaterialParameters.Texture?(v22, (uint64_t)a2);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v31);

  outlined consume of MaterialParameters.Texture?(v22, (uint64_t)a2);
  outlined consume of MaterialParameters.Texture?(v22, (uint64_t)a2);
}

uint64_t SimpleMaterial.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  outlined init with copy of (Int, URL)(v1, (uint64_t)&v5, &demangling cache variable for type metadata for __REAssetService?);
  if (v6)
    return outlined init with take of BindableDataInternal(&v5, a1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for __REAssetService?);
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, a1);
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for __REAssetService?);
  return outlined init with copy of __REAssetService(a1, v1);
}

uint64_t SimpleMaterial.SimpleMaterialMapping.init(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssetHandle;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  outlined init with copy of __REAssetService((uint64_t)a1, v1 + 16);
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  AssetHandle = REAssetManagerCreateAssetHandle();
  if (AssetHandle
    && (*(_QWORD *)(v1 + 56) = AssetHandle,
        v6 = a1[3],
        v7 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v6),
        (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7),
        (v8 = REAssetManagerCreateAssetHandle()) != 0))
  {
    *(_QWORD *)(v1 + 64) = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t SimpleMaterial.SimpleMaterialMapping.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

unint64_t one-time initialization function for materialMapRegistry()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<SimpleMaterial.SimpleMaterialMapping>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 24) = result;
  static SimpleMaterial.materialMapRegistry = v0;
  return result;
}

uint64_t SimpleMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t SimpleMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_BYTE *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(void **)(v1 + 72);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t SimpleMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = v4;
  *(_QWORD *)(v1 + 72) = v5;
  return result;
}

uint64_t (*SimpleMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::Void __swiftcall SimpleMaterial.updateMaterialResource(_:)(Swift::Bool a1)
{
  uint64_t v1;
  CGColor *v3;
  CGColor *v4;
  double Alpha;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v3 = (CGColor *)specialized Material.getColor(name:)(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
  if (v3)
  {
    v4 = v3;
    Alpha = CGColorGetAlpha(v3);

    a1 = Alpha < 1.0;
  }
  if (a1 != *(_BYTE *)(v1 + 112))
  {
    if (a1)
    {
      v6 = 0xD000000000000023;
      v7 = (void *)0x800000021BE868A0;
    }
    else
    {
      v7 = (void *)0x800000021BE86880;
      v6 = 0xD000000000000018;
    }
    v8 = specialized static LoadableResource.loadEngineResource(assetPath:)(v6, v7);
    swift_release();
    *(_QWORD *)(v1 + 40) = v8;
    *(_BYTE *)(v1 + 112) = a1;
  }
}

uint64_t specialized static LoadableResource.loadEngineResource(assetPath:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v14);
  v5 = v16;
  v6 = v17;
  __swift_project_boxed_opaque_existential_1(&v14, v16);
  swift_retain();
  v7 = __REAssetService.asset(_:)(a1, (uint64_t)a2, v5, v6);
  if (v7)
  {
    v8 = v7;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    v9 = specialized static LoadableResource.fromCore(assetRef:)(*(_QWORD *)(v8 + 16));
    if (v9)
    {
      v10 = v9;
      swift_release();
      swift_release();
      return v10;
    }
    v14 = 0;
    v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v14 = 0xD000000000000020;
    v15 = 0x800000021BE86D40;
    v13._countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    v14 = 0;
    v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v14 = 0xD000000000000020;
    v15 = 0x800000021BE86D40;
    v12._countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double key path getter for SimpleMaterial.color : SimpleMaterial@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;
  _QWORD v9[5];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v9[3] = &type metadata for SimpleMaterial;
  v9[4] = &protocol witness table for SimpleMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial(a1, v9[0] + 16);
  v5 = *(_QWORD *)(a1 + 80);
  v4 = *(void **)(a1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v9, v5, v4, (uint64_t)&v10);
  v6 = v12;
  v7 = v13;
  *(_QWORD *)a2 = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

void key path setter for SimpleMaterial.color : SimpleMaterial(uint64_t a1)
{
  __int128 v1;
  _OWORD v2[2];
  int v3;

  v1 = *(_OWORD *)(a1 + 16);
  v2[0] = *(_OWORD *)a1;
  v2[1] = v1;
  v3 = *(_DWORD *)(a1 + 32);
  outlined retain of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
  swift_bridgeObjectRetain();
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
  SimpleMaterial.updateMaterialResource(_:)(0);
}

void SimpleMaterial.color.setter(uint64_t a1)
{
  __int128 v1;
  _OWORD v2[2];
  int v3;

  v1 = *(_OWORD *)(a1 + 16);
  v2[0] = *(_OWORD *)a1;
  v2[1] = v1;
  v3 = *(_DWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
  SimpleMaterial.updateMaterialResource(_:)(0);
}

void (*SimpleMaterial.color.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[5];

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 10);
  v3[15] = v1;
  v8[3] = &type metadata for SimpleMaterial;
  v8[4] = &protocol witness table for SimpleMaterial;
  v8[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial(v1, v8[0] + 16);
  v6 = *(_QWORD *)(v1 + 80);
  v5 = *(void **)(v1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v8, v6, v5, v4);
  return SimpleMaterial.color.modify;
}

void SimpleMaterial.color.modify(char **a1, char a2)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  void *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 80);
  v4 = *((_OWORD *)*a1 + 6);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *(_OWORD *)v3;
    *((_OWORD *)v2 + 1) = v4;
    *((_DWORD *)v2 + 8) = *(_DWORD *)(v3 + 32);
    outlined retain of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
    swift_bridgeObjectRetain();
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v2);
    swift_bridgeObjectRelease();
    outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
    SimpleMaterial.updateMaterialResource(_:)(0);
    v5 = (void *)*((_QWORD *)v2 + 11);
    v6 = *((_QWORD *)v2 + 12);

    outlined consume of MaterialParameters.Texture?(v5, v6);
  }
  else
  {
    *(_OWORD *)(v2 + 40) = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 56) = v4;
    *((_DWORD *)v2 + 18) = *(_DWORD *)(v3 + 32);
    swift_bridgeObjectRetain();
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)(v2 + 40));
    swift_bridgeObjectRelease();
    outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)(v2 + 40));
    SimpleMaterial.updateMaterialResource(_:)(0);
  }
  free(v2);
}

CGColorRef SimpleMaterial.__tintColor.getter()
{
  uint64_t v0;
  void *v1;
  CGColorRef GenericRGB;
  id v3;

  v1 = *(void **)(v0 + 96);
  if (v1)
  {
    GenericRGB = *(CGColorRef *)(v0 + 96);
  }
  else
  {
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v1 = 0;
  }
  v3 = v1;
  return GenericRGB;
}

id key path getter for SimpleMaterial.__tintColor : SimpleMaterial@<X0>(uint64_t a1@<X0>, CGColorRef *a2@<X8>)
{
  void *v3;
  CGColorRef GenericRGB;

  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    GenericRGB = *(CGColorRef *)(a1 + 96);
  }
  else
  {
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v3 = 0;
  }
  *a2 = GenericRGB;
  return v3;
}

void SimpleMaterial.__tintColor.setter(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  CGColor *v9;
  id v10;
  __int128 v11;
  CGColor *v12;
  float32x4_t v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18[2];
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  v2 = v1;
  v5 = v1[10];
  v4 = v1[11];
  v6 = (void *)v1[13];
  if (v6)
  {
    v7 = a1;
    v8 = v6;
    v9 = (CGColor *)v7;
    v10 = v8;
    swift_bridgeObjectRetain();
    specialized SIMD4<>.init(_:)(v9);
    *(_OWORD *)v18 = v11;
    v12 = (CGColor *)v10;
    specialized SIMD4<>.init(_:)(v12);
    v14 = (id)specialized SIMD4<>.cgColor.getter((__n128)vmulq_f32(*(float32x4_t *)v18, v13));

  }
  else
  {
    v14 = a1;
    swift_bridgeObjectRetain();
    v12 = 0;
  }
  v20 = v14;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v25 = 6;
  v15 = String.utf8CString.getter() + 32;
  v16 = v14;
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v15, (uint64_t)&v20);

  swift_release();
  v17 = (void *)v2[12];
  v2[10] = v5;
  v2[11] = v4;
  v2[12] = a1;
  v2[13] = v6;
  v19 = a1;

  SimpleMaterial.updateMaterialResource(_:)(0);
  swift_bridgeObjectRelease();

}

void (*SimpleMaterial.__tintColor.modify(CGColorRef *a1))(void **a1, char a2)
{
  CGColorRef *v1;
  CGColorRef v3;
  CGColorRef GenericRGB;
  CGColor *v5;

  a1[1] = (CGColorRef)v1;
  v3 = v1[12];
  if (v3)
  {
    GenericRGB = v1[12];
  }
  else
  {
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v3 = 0;
  }
  *a1 = GenericRGB;
  v5 = v3;
  return SimpleMaterial.__tintColor.modify;
}

void SimpleMaterial.__tintColor.modify(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    SimpleMaterial.__tintColor.setter(v3);

  }
  else
  {
    SimpleMaterial.__tintColor.setter(v2);
  }
}

void SimpleMaterial.__baseColor.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  specialized Material.getLegacyBase(legacy:)(*(_QWORD *)(v1 + 80), *(void **)(v1 + 88), *(void **)(v1 + 104), a1);
}

uint64_t SimpleMaterial.__baseColor.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_QWORD *)(v1 + 88);
  v5 = *(void **)(v1 + 96);
  v6 = *(void **)(v1 + 104);
  v16 = *(_QWORD *)(v1 + 80);
  v17 = v4;
  v18 = v5;
  v19 = v6;
  swift_bridgeObjectRetain();
  v7 = v5;
  v8 = v6;
  specialized Material.setLegacyBase(legacy:value:)((uint64_t)&v16, v2, v3);
  outlined consume of __MaterialColorParameter(v2, v3);
  v10 = v16;
  v9 = v17;
  v11 = v18;
  v12 = v19;
  v13 = v19;
  swift_bridgeObjectRetain();
  v14 = v11;
  swift_bridgeObjectRelease();

  *(_QWORD *)(v1 + 80) = v10;
  *(_QWORD *)(v1 + 88) = v9;
  *(_QWORD *)(v1 + 96) = v11;
  *(_QWORD *)(v1 + 104) = v12;
  SimpleMaterial.updateMaterialResource(_:)(0);

  return swift_bridgeObjectRelease();
}

void (*SimpleMaterial.__baseColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  CGColor *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  CGColorRef GenericRGB;
  CGColor *v10;
  _QWORD v12[5];
  void *v13;
  void *v14;
  uint64_t v15;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = v1[10];
  v4 = (void *)v1[11];
  v5 = (CGColor *)v1[13];
  v12[3] = &type metadata for SimpleMaterial;
  v12[4] = &protocol witness table for SimpleMaterial;
  v12[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial((uint64_t)v1, v12[0] + 16);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v12, v3, v4, (uint64_t)&v13);
  v7 = v13;
  v6 = v14;
  v8 = v15;
  outlined copy of MaterialParameters.Texture?(v14, v15);

  outlined consume of MaterialParameters.Texture?(v6, v8);
  if (v8)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v6, v8);
    *(_QWORD *)a1 = v8;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    GenericRGB = v5;
    if (!v5)
      GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    *(_QWORD *)a1 = GenericRGB;
    *(_BYTE *)(a1 + 8) = 0;
    v10 = v5;
  }
  return SimpleMaterial.__baseColor.modify;
}

void SimpleMaterial.__baseColor.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(void **)a1;
  v4 = *(_BYTE *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 + 88);
    v6 = *(void **)(v2 + 96);
    v7 = *(void **)(v2 + 104);
    v27 = *(_QWORD *)(v2 + 80);
    v28 = v5;
    v29 = v6;
    v30 = v7;
    outlined copy of __MaterialColorParameter(v3, v4);
    swift_bridgeObjectRetain();
    v8 = v6;
    v9 = v7;
    specialized Material.setLegacyBase(legacy:value:)((uint64_t)&v27, v3, v4);
    outlined consume of __MaterialColorParameter(v3, v4);
    v11 = v27;
    v10 = v28;
    v12 = v29;
    v13 = v30;
    v14 = v30;
    swift_bridgeObjectRetain();
    v15 = v12;
    swift_bridgeObjectRelease();

    *(_QWORD *)(v2 + 80) = v11;
    *(_QWORD *)(v2 + 88) = v10;
    *(_QWORD *)(v2 + 96) = v12;
    *(_QWORD *)(v2 + 104) = v13;
    SimpleMaterial.updateMaterialResource(_:)(0);
    swift_bridgeObjectRelease();

    outlined consume of __MaterialColorParameter(v3, v4);
  }
  else
  {
    v16 = *(_QWORD *)(v2 + 88);
    v17 = *(void **)(v2 + 96);
    v18 = *(void **)(v2 + 104);
    v27 = *(_QWORD *)(v2 + 80);
    v28 = v16;
    v29 = v17;
    v30 = v18;
    swift_bridgeObjectRetain();
    v19 = v17;
    v20 = v18;
    specialized Material.setLegacyBase(legacy:value:)((uint64_t)&v27, v3, v4);
    outlined consume of __MaterialColorParameter(v3, v4);
    v22 = v27;
    v21 = v28;
    v23 = v29;
    v24 = v30;
    v26 = v30;
    swift_bridgeObjectRetain();
    v25 = v23;
    swift_bridgeObjectRelease();

    *(_QWORD *)(v2 + 80) = v22;
    *(_QWORD *)(v2 + 88) = v21;
    *(_QWORD *)(v2 + 96) = v23;
    *(_QWORD *)(v2 + 104) = v24;
    SimpleMaterial.updateMaterialResource(_:)(0);
    swift_bridgeObjectRelease();

  }
}

unint64_t key path getter for SimpleMaterial.roughness : SimpleMaterial@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = (unint64_t)specialized Material.getTexture(_:)(0xAu);
  if (result)
  {
    v3 = result | 0x8000000000000000;
  }
  else
  {
    result = specialized Material.getScalar(_:)(4u);
    v3 = result;
    if ((result & 0x100000000) != 0)
      v3 = 1065353216;
  }
  *a1 = v3;
  return result;
}

uint64_t SimpleMaterial.roughness.setter(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  specialized Material.setScalarParameter(_:value:)(0, *a1);
  return outlined consume of MaterialScalarParameter(v1);
}

void MaterialScalarParameter.init(floatLiteral:)(_QWORD *a1@<X8>, unsigned int a2@<S0>)
{
  *a1 = a2;
}

uint64_t (*SimpleMaterial.roughness.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v9[8];
  unsigned __int8 v10;

  a1[1] = v1;
  v3 = (unint64_t)specialized Material.getTexture(_:)(0xAu);
  if (!v3)
  {
    v5 = *(void **)(v1 + 72);
    swift_bridgeObjectRetain_n();
    v6 = v5;
    swift_bridgeObjectRetain_n();
    v7 = v6;
    specialized String.withCString<A>(_:)(0x73656E6867756F72, 0xEE00656C61635373, v7, (uint64_t)v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v10 != 255)
    {
      if (v10 == 2)
      {
        v4 = LODWORD(v9[0]);
        goto LABEL_8;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v9[0], (uint64_t)v9[1], (uint64_t)v9[2], (uint64_t)v9[3], (uint64_t)v9[4], (uint64_t)v9[5], (uint64_t)v9[6], (uint64_t)v9[7], v10);
    }
    v4 = 1065353216;
    goto LABEL_8;
  }
  v4 = v3 | 0x8000000000000000;
LABEL_8:
  *a1 = v4;
  return SimpleMaterial.roughness.modify;
}

uint64_t SimpleMaterial.roughness.modify(uint64_t *a1, char a2)
{
  return SimpleMaterial.roughness.modify(a1, a2, 0);
}

unint64_t key path getter for SimpleMaterial.metallic : SimpleMaterial@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = (unint64_t)specialized Material.getTexture(_:)(9u);
  if (result)
  {
    v3 = result | 0x8000000000000000;
  }
  else
  {
    result = specialized Material.getScalar(_:)(2u);
    v3 = result;
    if ((result & 0x100000000) != 0)
      v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t SimpleMaterial.metallic.setter(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  specialized Material.setScalarParameter(_:value:)(1, *a1);
  return outlined consume of MaterialScalarParameter(v1);
}

uint64_t (*SimpleMaterial.metallic.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v9[8];
  unsigned __int8 v10;

  a1[1] = v1;
  v3 = (unint64_t)specialized Material.getTexture(_:)(9u);
  if (!v3)
  {
    v5 = *(void **)(v1 + 72);
    swift_bridgeObjectRetain_n();
    v6 = v5;
    swift_bridgeObjectRetain_n();
    v7 = v6;
    specialized String.withCString<A>(_:)(0x63696C6C6174656DLL, 0xED0000656C616353, v7, (uint64_t)v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v10 != 255)
    {
      if (v10 == 2)
      {
        v4 = LODWORD(v9[0]);
        goto LABEL_8;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v9[0], (uint64_t)v9[1], (uint64_t)v9[2], (uint64_t)v9[3], (uint64_t)v9[4], (uint64_t)v9[5], (uint64_t)v9[6], (uint64_t)v9[7], v10);
    }
    v4 = 0;
    goto LABEL_8;
  }
  v4 = v3 | 0x8000000000000000;
LABEL_8:
  *a1 = v4;
  return SimpleMaterial.metallic.modify;
}

uint64_t SimpleMaterial.metallic.modify(uint64_t *a1, char a2)
{
  return SimpleMaterial.roughness.modify(a1, a2, 1);
}

uint64_t SimpleMaterial.roughness.modify(uint64_t *a1, char a2, char a3)
{
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined copy of MaterialScalarParameter(*a1);
    specialized Material.setScalarParameter(_:value:)(a3, v4);
    outlined consume of MaterialScalarParameter(v4);
  }
  else
  {
    specialized Material.setScalarParameter(_:value:)(a3, v4);
  }
  return outlined consume of MaterialScalarParameter(v4);
}

uint64_t SimpleMaterial.__emissive.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)specialized Material.getTexture(_:)(8u);
  v3 = result != 0;
  if (!result)
  {
    result = specialized Material.getColor(name:)(0x6576697373696D65, 0xED0000726F6C6F43);
    if (!result)
      result = (uint64_t)CGColorCreateGenericRGB(0.0, 0.0, 0.0, 1.0);
    v3 = 0;
  }
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

void key path setter for SimpleMaterial.__emissive : SimpleMaterial(uint64_t a1)
{
  void *v1;
  char v2;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(a1 + 8);
  outlined copy of __MaterialColorParameter(*(void **)a1, v2);
  specialized Material.setColorParameter(_:value:)(2, v1, v2);
  outlined consume of __MaterialColorParameter(v1, v2);
}

void SimpleMaterial.__emissive.setter(uint64_t a1)
{
  void *v1;
  char v2;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(a1 + 8);
  specialized Material.setColorParameter(_:value:)(2, *(void **)a1, v2);
  outlined consume of __MaterialColorParameter(v1, v2);
}

void (*SimpleMaterial.__emissive.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t GenericRGB;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v1;
  GenericRGB = (uint64_t)specialized Material.getTexture(_:)(8u);
  v4 = GenericRGB;
  if (!GenericRGB)
  {
    GenericRGB = specialized Material.getColor(name:)(0x6576697373696D65, 0xED0000726F6C6F43);
    if (!GenericRGB)
      GenericRGB = (uint64_t)CGColorCreateGenericRGB(0.0, 0.0, 0.0, 1.0);
  }
  *(_QWORD *)a1 = GenericRGB;
  *(_BYTE *)(a1 + 8) = v4 != 0;
  return SimpleMaterial.__emissive.modify;
}

void SimpleMaterial.__emissive.modify(uint64_t a1, char a2)
{
  void *v2;
  char v3;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    outlined copy of __MaterialColorParameter(*(void **)a1, v3);
    specialized Material.setColorParameter(_:value:)(2, v2, v3);
    outlined consume of __MaterialColorParameter(v2, v3);
  }
  else
  {
    specialized Material.setColorParameter(_:value:)(2, v2, v3);
  }
  outlined consume of __MaterialColorParameter(v2, v3);
}

uint64_t SimpleMaterial.__usesTransparency.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

void SimpleMaterial.__usesTransparency.setter(BOOL a1)
{
  uint64_t v1;
  CGColor *v3;
  CGColor *v4;
  double Alpha;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v3 = (CGColor *)specialized Material.getColor(name:)(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
  if (v3)
  {
    v4 = v3;
    Alpha = CGColorGetAlpha(v3);

    a1 = Alpha < 1.0;
  }
  if (a1 != *(_BYTE *)(v1 + 112))
  {
    if (a1)
    {
      v6 = 0xD000000000000023;
      v7 = (void *)0x800000021BE868A0;
    }
    else
    {
      v7 = (void *)0x800000021BE86880;
      v6 = 0xD000000000000018;
    }
    v8 = specialized static LoadableResource.loadEngineResource(assetPath:)(v6, v7);
    swift_release();
    *(_QWORD *)(v1 + 40) = v8;
    *(_BYTE *)(v1 + 112) = a1;
  }
}

void (*SimpleMaterial.__usesTransparency.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 112);
  return SimpleMaterial.__usesTransparency.modify;
}

void SimpleMaterial.__usesTransparency.modify(uint64_t *a1, char a2)
{
  int v2;
  uint64_t v3;
  CGColor *v4;
  CGColor *v5;
  double Alpha;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((unsigned __int8 *)a1 + 8);
  v3 = *a1;
  if ((a2 & 1) != 0)
  {
    SimpleMaterial.__usesTransparency.setter(*((_BYTE *)a1 + 8));
  }
  else
  {
    v4 = (CGColor *)specialized Material.getColor(name:)(*(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88));
    if (v4)
    {
      v5 = v4;
      Alpha = CGColorGetAlpha(v4);

      v2 = Alpha < 1.0;
    }
    if (v2 != *(unsigned __int8 *)(v3 + 112))
    {
      if (v2)
        v7 = (void *)0x800000021BE868A0;
      else
        v7 = (void *)0x800000021BE86880;
      if (v2)
        v8 = 0xD000000000000023;
      else
        v8 = 0xD000000000000018;
      v9 = specialized static LoadableResource.loadEngineResource(assetPath:)(v8, v7);
      swift_release();
      *(_QWORD *)(v3 + 40) = v9;
      *(_BYTE *)(v3 + 112) = v2;
    }
  }
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _BYTE v9[40];
  uint64_t v10;

  v10 = *a2;
  v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)v9);
  return SimpleMaterial.init(color:roughness:isMetallic:assetService:)(a1, &v10, a3, (uint64_t)v9, a4);
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:assetService:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  id v11;
  CGColor *v12;
  CGColor *v13;
  double Alpha;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  id v19;
  __int128 v21[2];
  _QWORD v22[4];
  int v23;

  v9 = *a2;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 32) = 0;
  strcpy((char *)(a5 + 80), "baseColorTint");
  *(_WORD *)(a5 + 94) = -4864;
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(_BYTE *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 120) = 0;
  *(_QWORD *)(a5 + 128) = 0;
  *(_BYTE *)(a5 + 136) = 1;
  *(_WORD *)(a5 + 137) = 257;
  *(_QWORD *)(a5 + 40) = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x800000021BE86880);
  v10 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)(a5 + 48) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = v10;
  v22[0] = a1;
  memset(&v22[1], 0, 24);
  v23 = 0;
  v11 = a1;
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v22);

  outlined consume of MaterialParameters.Texture?(0, 0);
  v12 = (CGColor *)specialized Material.getColor(name:)(*(_QWORD *)(a5 + 80), *(_QWORD *)(a5 + 88));
  if (!v12)
  {
    if ((*(_BYTE *)(a5 + 112) & 1) == 0)
      goto LABEL_8;
    goto LABEL_6;
  }
  v13 = v12;
  Alpha = CGColorGetAlpha(v12);

  if (Alpha < 1.0 == *(_BYTE *)(a5 + 112))
    goto LABEL_8;
  if (Alpha >= 1.0)
  {
LABEL_6:
    v15 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x800000021BE86880);
    v16 = 0;
    goto LABEL_7;
  }
  v15 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000023, (void *)0x800000021BE868A0);
  v16 = 1;
LABEL_7:
  swift_release();
  *(_QWORD *)(a5 + 40) = v15;
  *(_BYTE *)(a5 + 112) = v16;
LABEL_8:
  specialized Material.setScalarParameter(_:value:)(0, v9);
  outlined consume of MaterialScalarParameter(v9);
  if ((a3 & 1) != 0)
    v17 = 1065353216;
  else
    v17 = 0;
  specialized Material.setScalarParameter(_:value:)(1, v17);
  outlined consume of MaterialScalarParameter(v17);
  v18 = *(void **)(a5 + 104);
  v19 = v11;

  *(_QWORD *)(a5 + 104) = v11;
  outlined init with copy of __REAssetService(a4, (uint64_t)v21);
  outlined destroy of BodyTrackingComponent?(a5, &demangling cache variable for type metadata for __REAssetService?);
  outlined init with take of BindableDataInternal(v21, a5);

  return __swift_destroy_boxed_opaque_existential_1(a4);
}

uint64_t SimpleMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  __int128 v7[2];
  uint64_t v8;

  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v8);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  strcpy((char *)(a1 + 80), "baseColorTint");
  *(_WORD *)(a1 + 94) = -4864;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_WORD *)(a1 + 137) = 257;
  *(_QWORD *)(a1 + 40) = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x800000021BE86880);
  v3 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)(a1 + 48) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v3;
  outlined init with copy of __REAssetService((uint64_t)&v8, (uint64_t)v7);
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAssetService?);
  outlined init with take of BindableDataInternal(v7, a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  v4 = *(_QWORD *)(a1 + 40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(inited + 32) = v4;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return swift_release();
}

uint64_t SimpleMaterial.init(assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v6[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  strcpy((char *)(a2 + 80), "baseColorTint");
  *(_WORD *)(a2 + 94) = -4864;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 1;
  *(_WORD *)(a2 + 137) = 257;
  *(_QWORD *)(a2 + 40) = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x800000021BE86880);
  v4 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)(a2 + 48) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v4;
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for __REAssetService?);
  outlined init with take of BindableDataInternal(v6, a2);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t SimpleMaterial.__triangleFillMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t SimpleMaterial.__triangleFillMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = result;
  return result;
}

uint64_t (*SimpleMaterial.__triangleFillMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *SimpleMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = *result;
  return result;
}

unsigned __int8 *(*SimpleMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_QWORD *)(v1 + 120) == 1;
  return SimpleMaterial.triangleFillMode.modify;
}

unsigned __int8 *SimpleMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(_QWORD *)(*(_QWORD *)result + 120) = result[8];
  return result;
}

uint64_t SimpleMaterial.__faceCullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t SimpleMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = result;
  *(_BYTE *)(v2 + 136) = a2 & 1;
  return result;
}

uint64_t (*SimpleMaterial.__faceCullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*SimpleMaterial.__writesDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*SimpleMaterial.__readsDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__resource.getter in conformance SimpleMaterial()
{
  return swift_retain();
}

uint64_t protocol witness for Material.__parameterBlock.getter in conformance SimpleMaterial@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_BYTE *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(void **)(v1 + 72);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Material.__parameterBlock.setter in conformance SimpleMaterial(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = v4;
  *(_QWORD *)(v1 + 72) = v5;
  return result;
}

uint64_t (*protocol witness for Material.__parameterBlock.modify in conformance SimpleMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance SimpleMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance SimpleMaterial(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = result;
  return result;
}

uint64_t (*protocol witness for Material.__triangleFillMode.modify in conformance SimpleMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance SimpleMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance SimpleMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 137) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance SimpleMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance SimpleMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance SimpleMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 138) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance SimpleMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance SimpleMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance SimpleMaterial(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = result;
  *(_BYTE *)(v2 + 136) = a2 & 1;
  return result;
}

uint64_t (*protocol witness for Material.__faceCullMode.modify in conformance SimpleMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SimpleMaterial.writesDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t SimpleMaterial.writesDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 137) = result;
  return result;
}

_BYTE *(*SimpleMaterial.writesDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 137);
  return BlendTreeAnimation.repeatMode.modify;
}

uint64_t SimpleMaterial.readsDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t SimpleMaterial.readsDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 138) = result;
  return result;
}

_BYTE *(*SimpleMaterial.readsDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 138);
  return SimpleMaterial.readsDepth.modify;
}

_BYTE *SimpleMaterial.readsDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 138) = result[8];
  return result;
}

void SimpleMaterial.faceCulling.getter(char *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(v1 + 136) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 128) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 128);
  }
  *a1 = v2;
}

unsigned __int8 *SimpleMaterial.faceCulling.setter(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned int v2;
  _BOOL4 v3;

  v2 = *result;
  v3 = v2 > 1;
  *(_QWORD *)(v1 + 128) = v3 ^ (v2 != 0);
  *(_BYTE *)(v1 + 136) = v3;
  return result;
}

uint64_t *(*SimpleMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  v2 = 2;
  if ((*(_BYTE *)(v1 + 136) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 128) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 128);
  }
  *(_BYTE *)(a1 + 8) = v2;
  return SimpleMaterial.faceCulling.modify;
}

uint64_t *SimpleMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;

  v1 = *result;
  v2 = *((unsigned __int8 *)result + 8);
  v3 = v2 == 1;
  v4 = v2 > 1;
  v5 = v3;
  *(_QWORD *)(v1 + 128) = v5;
  *(_BYTE *)(v1 + 136) = v4;
  return result;
}

uint64_t OcclusionMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t (*OcclusionMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t OcclusionMaterial.receivesDynamicLighting.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t OcclusionMaterial.init(receivesDynamicLighting:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t result;
  uint64_t v10;

  if ((a1 & 1) != 0)
  {
    v4 = (void *)0x800000021BE86980;
    v5 = 0xD000000000000020;
  }
  else
  {
    v5 = 0xD000000000000023;
    v4 = (void *)0x800000021BE86910;
  }
  v6 = specialized static LoadableResource.loadEngineResource(assetPath:)(v5, v4);
  v7 = REMaterialParameterBlockValueCreate();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(inited + 32) = v6;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  result = swift_release();
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 40) = a1 & 1;
  *(_BYTE *)(a2 + 41) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  return result;
}

uint64_t (*OcclusionMaterial.__readsDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t OcclusionMaterial.__faceCullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t OcclusionMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*OcclusionMaterial.__faceCullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance OcclusionMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance OcclusionMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance OcclusionMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance OcclusionMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance OcclusionMaterial(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t OcclusionMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t result;
  uint64_t v6;

  v2 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000023, (void *)0x800000021BE86910);
  swift_retain();
  v3 = REMaterialParameterBlockValueCreate();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(inited + 32) = v2;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  result = swift_release();
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v3;
  *(_WORD *)(a1 + 40) = 256;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

uint64_t OcclusionMaterial.readsDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t OcclusionMaterial.readsDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

_BYTE *(*OcclusionMaterial.readsDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 41);
  return OcclusionMaterial.readsDepth.modify;
}

_BYTE *OcclusionMaterial.readsDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 41) = result[8];
  return result;
}

void OcclusionMaterial.faceCulling.getter(char *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(v1 + 56) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 48) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 48);
  }
  *a1 = v2;
}

unsigned __int8 *OcclusionMaterial.faceCulling.setter(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned int v2;
  _BOOL4 v3;

  v2 = *result;
  v3 = v2 > 1;
  *(_QWORD *)(v1 + 48) = v3 ^ (v2 != 0);
  *(_BYTE *)(v1 + 56) = v3;
  return result;
}

uint64_t (*OcclusionMaterial.faceCulling.modify(uint64_t a1))()
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  v2 = 2;
  if ((*(_BYTE *)(v1 + 56) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 48) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 48);
  }
  *(_BYTE *)(a1 + 8) = v2;
  return OcclusionMaterial.faceCulling.modify;
}

uint64_t one-time initialization function for __videoMaterialDefinitionResource()
{
  uint64_t result;

  result = specialized MaterialDefinitionResource.__allocating_init(path:)(0xD000000000000029, (void *)0x800000021BE86CE0);
  static VideoMaterial.__videoMaterialDefinitionResource = result;
  return result;
}

uint64_t VideoMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t VideoMaterial.__resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*VideoMaterial.__resource.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t VideoMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*VideoMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoMaterial.__videoResource.getter()
{
  return swift_retain();
}

uint64_t VideoMaterial.__videoResource.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*VideoMaterial.__videoResource.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static VideoMaterial.__makeVideoMaterial(videoResource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  swift_retain();
  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, (void *)0x800000021BE869B0);
  v4 = (void *)REMaterialParameterBlockValueCreate();
  type metadata accessor for VideoPlaybackController();
  swift_allocObject();
  v5 = swift_retain();
  v6 = VideoPlaybackController.init(videoResource:)(v5);
  v7 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7 + 120, (uint64_t)v25);
  v8 = v26;
  v9 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 32);
  swift_retain();
  v10(v8, v9);
  v11 = REAssetManagerCopyVideoMaterialAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  if (v11)
  {
LABEL_6:
    type metadata accessor for __MaterialResource();
    v16 = swift_allocObject();
    RERetain();
    *(_QWORD *)(v16 + 16) = v11;
    REAssetHandleLoadNow();
    REAssetSetSwiftObject();
    swift_release();
    v17 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v17;
    *(_BYTE *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = v4;
    *(_QWORD *)(a2 + 40) = a1;
    *(_QWORD *)(a2 + 48) = v6;
    *(_QWORD *)(a2 + 56) = 0;
    *(_WORD *)(a2 + 64) = 257;
    *(_QWORD *)(a2 + 72) = 0;
    *(_BYTE *)(a2 + 80) = 1;
    swift_retain();
    swift_bridgeObjectRetain();
    v18 = v4;
    swift_retain();
    swift_retain();
    RERelease();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  outlined init with copy of __REAssetService(v7 + 120, (uint64_t)v25);
  v12 = v26;
  v13 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v7 + 40, (uint64_t)&v20, &demangling cache variable for type metadata for __RenderService?);
  if (v21)
  {
    outlined init with take of BindableDataInternal(&v20, (uint64_t)v22);
    v14 = v23;
    v15 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
    if (one-time initialization token for __videoMaterialDefinitionResource != -1)
      swift_once();
    v11 = REAssetManagerMaterialMemoryAssetCreate();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (v11)
      goto LABEL_6;
  }
  else
  {
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double VideoMaterial.init(avPlayer:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  double result;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;

  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, (void *)0x800000021BE869B0);
  v4 = (void *)REMaterialParameterBlockValueCreate();
  type metadata accessor for __VideoResource();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 24) = MEMORY[0x24BEE4AF8];
  v6 = a1;
  v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)&v19);
  v8 = v21;
  v9 = v22;
  __swift_project_boxed_opaque_existential_1(&v19, v21);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 32);
  swift_retain();
  v10(v8, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  *(_QWORD *)(v5 + 16) = REAssetManagerMemoryAssetCreateWithRemotePlayer();
  swift_retain();
  REAssetSetSwiftObject();
  swift_release();
  swift_release();

  static VideoMaterial.__makeVideoMaterial(videoResource:)(v5, (uint64_t)&v19);
  swift_release();

  LOBYTE(v7) = v20;
  v11 = v21;
  v12 = v23;
  v13 = v24;
  v14 = v25;
  LOBYTE(v8) = v26;
  v15 = v27;
  v16 = v28;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = *(double *)&v19;
  v18 = v22;
  *(_OWORD *)a2 = v19;
  *(_BYTE *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v11;
  *(_OWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = v13;
  *(_BYTE *)(a2 + 64) = v14;
  *(_BYTE *)(a2 + 65) = v8;
  *(_QWORD *)(a2 + 72) = v15;
  *(_BYTE *)(a2 + 80) = v16;
  return result;
}

double VideoMaterial.init(remotePlayer:)@<D0>(uint64_t a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  double result;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, (void *)0x800000021BE869B0);
  v2 = (void *)REMaterialParameterBlockValueCreate();
  type metadata accessor for __VideoResource();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 24) = MEMORY[0x24BEE4AF8];
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v16);
  v5 = v18;
  v6 = v19;
  __swift_project_boxed_opaque_existential_1(&v16, v18);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  swift_retain();
  v7(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  *(_QWORD *)(v3 + 16) = REAssetManagerMemoryAssetCreateWithRemotePlayer();
  swift_retain();
  REAssetSetSwiftObject();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  static VideoMaterial.__makeVideoMaterial(videoResource:)(v3, (uint64_t)&v16);
  swift_release();
  LOBYTE(v4) = v17;
  v8 = v18;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  LOBYTE(v5) = v23;
  v12 = v24;
  v13 = v25;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = *(double *)&v16;
  v15 = v19;
  *(_OWORD *)a1 = v16;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 65) = v5;
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v13;
  return result;
}

id VideoMaterial.avPlayer.getter()
{
  return (id)REVideoAssetGetAVPlayer();
}

void VideoMaterial.avPlayer.setter(void *a1)
{
  REVideoAssetSetAVPlayer();

}

void (*VideoMaterial.avPlayer.modify(_QWORD *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = (id)REVideoAssetGetAVPlayer();
  return VideoMaterial.avPlayer.modify;
}

void VideoMaterial.avPlayer.modify(id *a1)
{
  id v1;

  v1 = *a1;
  REVideoAssetSetAVPlayer();

}

uint64_t VideoMaterial.remotePlayer.getter@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[32];
  _QWORD v6[4];

  v2 = (id)REVideoAssetGetRemotePlayer();
  v6[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RERemoteVideoPlayer?);
  v6[0] = v2;
  outlined init with copy of Any((uint64_t)v6, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  swift_dynamicCast();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  *a1 = v4;
  return result;
}

uint64_t key path getter for VideoMaterial.remotePlayer : VideoMaterial@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[32];
  _QWORD v9[4];

  v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  v4 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = (id)REVideoAssetGetRemotePlayer();
  v9[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RERemoteVideoPlayer?);
  v9[0] = v5;
  outlined init with copy of Any((uint64_t)v9, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t VideoMaterial.remotePlayer.setter()
{
  REVideoAssetSetRemotePlayer();
  return swift_unknownObjectRelease();
}

void (*VideoMaterial.remotePlayer.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = (id)REVideoAssetGetRemotePlayer();
  v3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RERemoteVideoPlayer?);
  *v3 = v4;
  outlined init with copy of Any((uint64_t)v3, (uint64_t)(v3 + 4));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  swift_dynamicCast();
  v5 = v3[9];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  v3[8] = v5;
  return VideoMaterial.remotePlayer.modify;
}

void VideoMaterial.remotePlayer.modify(void **a1)
{
  void *v1;

  v1 = *a1;
  REVideoAssetSetRemotePlayer();
  swift_unknownObjectRelease();
  free(v1);
}

uint64_t VideoMaterial.controller.getter()
{
  return swift_retain();
}

uint64_t VideoMaterial.__triangleFillMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t VideoMaterial.__triangleFillMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*VideoMaterial.__triangleFillMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *VideoMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = *result;
  return result;
}

unsigned __int8 *(*VideoMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_QWORD *)(v1 + 56) == 1;
  return VideoMaterial.triangleFillMode.modify;
}

unsigned __int8 *VideoMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(_QWORD *)(*(_QWORD *)result + 56) = result[8];
  return result;
}

uint64_t (*VideoMaterial.__writesDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*VideoMaterial.__readsDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoMaterial.__faceCullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t VideoMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*VideoMaterial.__faceCullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance VideoMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance VideoMaterial(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance VideoMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance VideoMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance VideoMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance VideoMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance VideoMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 65) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance VideoMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance VideoMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance VideoMaterial(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*protocol witness for Material.__faceCullMode.modify in conformance VideoMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoMaterial.writesDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t VideoMaterial.writesDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

_BYTE *(*VideoMaterial.writesDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 64);
  return VideoMaterial.writesDepth.modify;
}

_BYTE *VideoMaterial.writesDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 64) = result[8];
  return result;
}

uint64_t VideoMaterial.readsDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t VideoMaterial.readsDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 65) = result;
  return result;
}

_BYTE *(*VideoMaterial.readsDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 65);
  return VideoMaterial.readsDepth.modify;
}

_BYTE *VideoMaterial.readsDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 65) = result[8];
  return result;
}

void VideoMaterial.faceCulling.getter(char *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(v1 + 80) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 72) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 72);
  }
  *a1 = v2;
}

unsigned __int8 *VideoMaterial.faceCulling.setter(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned int v2;
  _BOOL4 v3;

  v2 = *result;
  v3 = v2 > 1;
  *(_QWORD *)(v1 + 72) = v3 ^ (v2 != 0);
  *(_BYTE *)(v1 + 80) = v3;
  return result;
}

uint64_t *(*VideoMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  v2 = 2;
  if ((*(_BYTE *)(v1 + 80) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 72) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 72);
  }
  *(_BYTE *)(a1 + 8) = v2;
  return VideoMaterial.faceCulling.modify;
}

uint64_t *VideoMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;

  v1 = *result;
  v2 = *((unsigned __int8 *)result + 8);
  v3 = v2 == 1;
  v4 = v2 > 1;
  v5 = v3;
  *(_QWORD *)(v1 + 72) = v5;
  *(_BYTE *)(v1 + 80) = v4;
  return result;
}

id VideoMaterial.videoRenderer.getter()
{
  return (id)REVideoAssetGetAVSampleBufferVideoRenderer();
}

__n128 VideoMaterial.init(videoRenderer:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;

  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, (void *)0x800000021BE869B0);
  v4 = (void *)REMaterialParameterBlockValueCreate();
  v5 = type metadata accessor for __VideoResource();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = MEMORY[0x24BEE4AF8];
  v7 = a1;
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)&v26);
  v10 = v28;
  v9 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  v11 = *(void (**)(uint64_t, uint64_t))(v9 + 32);
  swift_retain();
  v11(v10, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  *(_QWORD *)(v6 + 16) = REAssetManagerAVSampleBufferVideoRendererMemoryAssetCreate();
  swift_retain();
  REAssetSetSwiftObject();
  swift_release();
  swift_release();

  static VideoMaterial.__makeVideoMaterial(videoResource:)(v6, (uint64_t)&v26);
  v12 = v27;
  v13 = v28;
  v14 = v29;
  v24 = v30;
  v25 = v26;
  v23 = v31;
  v21 = v33;
  v22 = v32;
  v20 = v34;
  v19 = v35;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50950;
  *(_QWORD *)(inited + 32) = v24.n128_u64[0];
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 64) = &protocol witness table for __VideoResource;
  v16 = one-time initialization token for __videoMaterialDefinitionResource;
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = static VideoMaterial.__videoMaterialDefinitionResource;
  *(_QWORD *)(inited + 96) = type metadata accessor for MaterialDefinitionResource();
  *(_QWORD *)(inited + 104) = &protocol witness table for MaterialDefinitionResource;
  *(_QWORD *)(inited + 72) = v17;
  *(_QWORD *)(inited + 136) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(inited + 144) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(inited + 112) = v25;
  swift_retain();
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);

  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  *(_OWORD *)a2 = v25;
  *(_BYTE *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  result = v24;
  *(__n128 *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 56) = v23;
  *(_BYTE *)(a2 + 64) = v22;
  *(_BYTE *)(a2 + 65) = v21;
  *(_QWORD *)(a2 + 72) = v20;
  *(_BYTE *)(a2 + 80) = v19;
  return result;
}

float MaterialScalarParameter.init(integerLiteral:)@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  float result;

  result = (float)a1;
  *a2 = COERCE_UNSIGNED_INT((float)a1);
  return result;
}

void MaterialScalarParameter.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt32 v3;

  v1 = *v0;
  if (*v0 < 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFF) == 0 && (v1 & 0x7F800000) == 0)
      v3 = 0;
    else
      v3 = v1;
    Hasher._combine(_:)(v3);
  }
}

Swift::Int MaterialScalarParameter.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt32 v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 < 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFF) == 0 && (v1 & 0x7F800000) == 0)
      v3 = 0;
    else
      v3 = v1;
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

unsigned int *protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance MaterialScalarParameter@<X0>(unsigned int *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

float protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance MaterialScalarParameter@<S0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  float result;

  result = (float)*a1;
  *a2 = LODWORD(result);
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialScalarParameter()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt32 v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 < 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFF) == 0 && (v1 & 0x7F800000) == 0)
      v3 = 0;
    else
      v3 = v1;
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

CGColorRef __MaterialColorParameter.init(_colorLiteralRed:green:blue:alpha:)@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  CGColorRef result;

  result = CGColorCreateGenericRGB(a2, a3, a4, a5);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

void __MaterialColorParameter.hash(into:)()
{
  uint64_t v0;
  Swift::UInt *v1;
  Swift::UInt *v2;

  v1 = *(Swift::UInt **)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1[2]);
  }
  else
  {
    Hasher._combine(_:)(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v2 = v1;
    _CFObject.hash(into:)();
    outlined consume of __MaterialColorParameter(v1, 0);
  }
}

Swift::Int __MaterialColorParameter.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt *v1;
  char v2;
  Swift::UInt *v3;

  v1 = *(Swift::UInt **)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1[2]);
  }
  else
  {
    Hasher._combine(_:)(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v3 = v1;
    _CFObject.hash(into:)();
    outlined consume of __MaterialColorParameter(v1, 0);
  }
  return Hasher._finalize()();
}

CGColorRef protocol witness for _ExpressibleByColorLiteral.init(_colorLiteralRed:green:blue:alpha:) in conformance __MaterialColorParameter@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  CGColorRef result;

  result = CGColorCreateGenericRGB(a2, a3, a4, a5);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance __MaterialColorParameter()
{
  uint64_t v0;
  Swift::UInt *v1;
  Swift::UInt *v2;

  v1 = *(Swift::UInt **)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1[2]);
  }
  else
  {
    Hasher._combine(_:)(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v2 = v1;
    _CFObject.hash(into:)();
    outlined consume of __MaterialColorParameter(v1, 0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __MaterialColorParameter()
{
  uint64_t v0;
  Swift::UInt *v1;
  char v2;
  Swift::UInt *v3;

  v1 = *(Swift::UInt **)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1[2]);
  }
  else
  {
    Hasher._combine(_:)(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v3 = v1;
    _CFObject.hash(into:)();
    outlined consume of __MaterialColorParameter(v1, 0);
  }
  return Hasher._finalize()();
}

uint64_t PortalMaterial.__resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*PortalMaterial.__resource.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PortalMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PortalMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssetHandle;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v12);
  v3 = v13;
  v4 = v14;
  __swift_project_boxed_opaque_existential_1(&v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  AssetHandle = REAssetManagerCreateAssetHandle();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  if (AssetHandle
    && (v6 = REMaterialParameterBlockValueCreate(),
        (v7 = specialized static LoadableResource.fromCore(assetRef:)(AssetHandle)) != 0))
  {
    v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = type metadata accessor for __MaterialResource();
    *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
    *(_QWORD *)(inited + 32) = v8;
    swift_retain_n();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    result = swift_release();
    v11 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t PortalMaterial.__triangleFillMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t PortalMaterial.__triangleFillMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*PortalMaterial.__triangleFillMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *PortalMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = *result;
  return result;
}

unsigned __int8 *(*PortalMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_QWORD *)(v1 + 40) == 1;
  return PortalMaterial.triangleFillMode.modify;
}

unsigned __int8 *PortalMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(_QWORD *)(*(_QWORD *)result + 40) = result[8];
  return result;
}

uint64_t (*PortalMaterial.__faceCullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance PortalMaterial(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*PortalMaterial.faceCulling.modify(uint64_t a1))()
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  v2 = 2;
  if ((*(_BYTE *)(v1 + 56) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 48) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 48);
  }
  *(_BYTE *)(a1 + 8) = v2;
  return OcclusionMaterial.faceCulling.modify;
}

uint64_t *OcclusionMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;

  v1 = *result;
  v2 = *((unsigned __int8 *)result + 8);
  v3 = v2 == 1;
  v4 = v2 > 1;
  v5 = v3;
  *(_QWORD *)(v1 + 48) = v5;
  *(_BYTE *)(v1 + 56) = v4;
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v12)) + (v7 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v8 = (_QWORD *)result;
    }
    v18 = v8[2];
    v17 = v8[3];
    if (v18 >= v17 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v8);
      v8 = (_QWORD *)result;
    }
    v8[2] = v18 + 1;
    v19 = &v8[2 * v18];
    v19[4] = v15;
    v19[5] = v16;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v5)
      goto LABEL_27;
    v12 = *(_QWORD *)(v20 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v5)
        goto LABEL_27;
      v12 = *(_QWORD *)(v20 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v5)
          goto LABEL_27;
        v12 = *(_QWORD *)(v20 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v5)
            goto LABEL_27;
          v12 = *(_QWORD *)(v20 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v4 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v5)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v8;
  }
  v12 = *(_QWORD *)(v20 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v5)
      goto LABEL_27;
    v12 = *(_QWORD *)(v20 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = v1;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v10 << 6);
LABEL_22:
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(_QWORD *)(a1 + 56) + 40 * v12;
    if (*v16 != *(_QWORD *)(v19 + 16) || v17 != *(_QWORD *)(v19 + 24))
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull_native();
        v25 = v2;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
          v26 = (_QWORD *)result;
        }
        v22 = v26[2];
        v21 = v26[3];
        v23 = v22 + 1;
        if (v22 >= v21 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v26);
          v23 = v22 + 1;
          v26 = (_QWORD *)result;
        }
        v26[2] = v23;
        v24 = &v26[2 * v22];
        v24[4] = v18;
        v24[5] = v17;
        v2 = v25;
      }
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v13 >= v8)
    goto LABEL_32;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_21;
  v10 = v13 + 1;
  if (v13 + 1 >= v8)
    goto LABEL_32;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 2;
  if (v13 + 2 >= v8)
    goto LABEL_32;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 3;
  if (v13 + 3 >= v8)
    goto LABEL_32;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_21:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_22;
  }
  v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_32:
    swift_release();
    return (uint64_t)v26;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_32;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v2 = v1;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (v7)
  {
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v13 = v12 | (v10 << 6);
LABEL_22:
    v17 = 16 * v13;
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = (_QWORD *)(*(_QWORD *)(a1 + 56) + v17);
    if (*v18 != *v21 || v19 != v21[1])
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull_native();
        v27 = v2;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          v11 = (_QWORD *)result;
        }
        v24 = v11[2];
        v23 = v11[3];
        v25 = v11;
        if (v24 >= v23 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v11);
          v25 = (_QWORD *)result;
        }
        v25[2] = v24 + 1;
        v11 = v25;
        v26 = &v25[2 * v24];
        v26[4] = v20;
        v26[5] = v19;
        v2 = v27;
      }
    }
  }
  v14 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v14 >= v8)
    goto LABEL_32;
  v15 = *(_QWORD *)(v4 + 8 * v14);
  ++v10;
  if (v15)
    goto LABEL_21;
  v10 = v14 + 1;
  if (v14 + 1 >= v8)
    goto LABEL_32;
  v15 = *(_QWORD *)(v4 + 8 * v10);
  if (v15)
    goto LABEL_21;
  v10 = v14 + 2;
  if (v14 + 2 >= v8)
    goto LABEL_32;
  v15 = *(_QWORD *)(v4 + 8 * v10);
  if (v15)
    goto LABEL_21;
  v10 = v14 + 3;
  if (v14 + 3 >= v8)
    goto LABEL_32;
  v15 = *(_QWORD *)(v4 + 8 * v10);
  if (v15)
  {
LABEL_21:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_22;
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_32:
    swift_release();
    return (uint64_t)v11;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      goto LABEL_32;
    v15 = *(_QWORD *)(v4 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_21;
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;

  result = MEMORY[0x24BEE4AF8];
  v9 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *v5;
      v8[1] = *(v5 - 1);
      v8[2] = v6;
      swift_bridgeObjectRetain();
      closure #1 in static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(v8);
      if (v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v7 = swift_bridgeObjectRelease();
      if (v8[0])
      {
        MEMORY[0x220768F0C](v7);
        if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

uint64_t specialized LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  v4 = v3;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v14 = -1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Material, Error>?>);
  v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v8 + 16) = v9;
  outlined init with take of Result<Material, Error>?((uint64_t)v12, v8 + 24);
  *(_QWORD *)(v4 + 16) = v8;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = v8;
  v10[5] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Material, Error>);
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(v4 + 24) = Future.init(_:)();
  return v4;
}

void specialized SIMD.hash(into:)(__n128 a1)
{
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0)
    v1 = a1.n128_u32[0];
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0)
    v2 = a1.n128_u32[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0)
    v3 = a1.n128_u32[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

{
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0)
    v1 = a1.n128_u32[0];
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0)
    v2 = a1.n128_u32[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0)
    v3 = a1.n128_u32[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((a1.n128_u32[3] & 0x7FFFFFFF) != 0)
    v4 = a1.n128_u32[3];
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

void specialized SIMD.hash(into:)(double a1)
{
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  v3 = HIDWORD(a1);
  if ((LODWORD(a1) & 0x7FFFFFFF) != 0)
    v1 = LODWORD(a1);
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((v3 & 0x7FFFFFFF) != 0)
    v2 = v3;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

uint64_t specialized static __MaterialResource.CoreMaterialFunction.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  char v10;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v2 = a1[3];
  v3 = a1[4];
  v4 = (void *)a1[5];
  v6 = a2[3];
  v5 = a2[4];
  v7 = (void *)a2[5];
  if ((a1[1] != a2[1] || a1[2] != a2[2]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
  if (v2 != v6 || !specialized static Array<A>.== infix(_:_:)(v3, v5))
    return 0;
  type metadata accessor for NSObject();
  v8 = v4;
  v9 = v7;
  v10 = static NSObject.== infix(_:_:)();

  return v10 & 1;
}

void specialized static __MaterialResource.BuildParameters.Value.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X15 }
}

uint64_t sub_21BADEE80@<X0>(int a1@<W8>)
{
  char v1;
  char v2;
  char v3;
  char v4;

  v3 = ((v2 & 1) == 0) ^ v1;
  if (a1)
    v4 = 0;
  else
    v4 = v3;
  return v4 & 1;
}

BOOL specialized static MaterialScalarParameter.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  if ((*a1 & 0x8000000000000000) == 0)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      outlined consume of MaterialScalarParameter(*a1);
      outlined consume of MaterialScalarParameter(v3);
      return *(float *)&v2 == *(float *)&v3;
    }
LABEL_6:
    outlined copy of MaterialScalarParameter(v3);
    outlined consume of MaterialScalarParameter(v2);
    outlined consume of MaterialScalarParameter(v3);
    return 0;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    swift_retain();
    goto LABEL_6;
  }
  v6 = *(_QWORD *)((v2 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  v7 = *(_QWORD *)(v3 + 16);
  outlined copy of MaterialScalarParameter(*a2);
  outlined copy of MaterialScalarParameter(v2);
  outlined consume of MaterialScalarParameter(v2);
  outlined consume of MaterialScalarParameter(v3);
  return v6 == v7;
}

uint64_t specialized static __MaterialColorParameter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char v3;
  _QWORD *v4;
  char v5;
  char v6;

  v2 = *(_QWORD **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_QWORD **)a2;
  v5 = *(_BYTE *)(a2 + 8);
  if ((v3 & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    {
      type metadata accessor for CGColorRef(0);
      outlined copy of __MaterialColorParameter(v4, 0);
      outlined copy of __MaterialColorParameter(v2, 0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
      v6 = static _CFObject.== infix(_:_:)();
      v3 = 0;
      v5 = 0;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
  {
LABEL_5:
    outlined copy of __MaterialColorParameter(*(void **)a2, *(_BYTE *)(a2 + 8));
    outlined copy of __MaterialColorParameter(v2, v3);
    v6 = 0;
    goto LABEL_7;
  }
  v6 = v2[2] == v4[2];
  v3 = 1;
  outlined copy of __MaterialColorParameter(*(void **)a2, 1);
  outlined copy of __MaterialColorParameter(v2, 1);
  v5 = 1;
LABEL_7:
  outlined consume of __MaterialColorParameter(v2, v3);
  outlined consume of __MaterialColorParameter(v4, v5);
  return v6 & 1;
}

uint64_t specialized static __MaterialResource.createAssetRef(named:in:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t AssetHandle;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = specialized static __ServiceLocator.shared.getter();
  v35[0] = a1;
  v35[1] = a2;
  v34 = a1;
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  v7 = *(_QWORD *)(StringProtocol.components<A>(separatedBy:)() + 16);
  swift_bridgeObjectRelease();
  v8 = v6 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6 + 120, (uint64_t)v35);
  v9 = v36;
  v10 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  if (a3)
    v11 = a3;
  else
    v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v12 = a3;
  v13 = (void *)MEMORY[0x220768C3C](v34, a2);
  if (v7 == 1)
    v14 = (void *)MEMORY[0x220768C3C](0x69726574616D6572, 0xEA00000000006C61);
  else
    v14 = 0;
  AssetHandle = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  if (!AssetHandle)
  {
    if (one-time initialization token for resourceCoreLogger != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)resourceCoreLogger);
    v17 = v12;
    swift_bridgeObjectRetain_n();
    v18 = v17;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      v35[0] = v33;
      *(_DWORD *)v21 = 136315394;
      swift_bridgeObjectRetain();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a2, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      v22 = v18;
      if (!a3)
        v22 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
      v23 = v18;
      v24 = objc_msgSend(v22, sel_bundlePath);

      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v19, v20, "Could not resolve material name '%s' in bundle at '%s'. Loading via asset path.", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v33, -1, -1);
      MEMORY[0x220772F44](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    outlined init with copy of __REAssetService(v8, (uint64_t)v35);
    v28 = v36;
    v29 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
    String.utf8CString.getter();
    AssetHandle = REAssetManagerCreateAssetHandle();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    if (!AssetHandle)
    {
      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(_QWORD *)v31 = v34;
      *(_QWORD *)(v31 + 8) = a2;
      *(_QWORD *)(v31 + 16) = 0;
      *(_QWORD *)(v31 + 24) = 0;
      *(_BYTE *)(v31 + 32) = 0;
      goto LABEL_20;
    }
  }
  if (REAssetHandleAssetType() != 2)
  {
    lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
    swift_allocError();
    *(_QWORD *)v30 = v34;
    *(_QWORD *)(v30 + 8) = a2;
    *(_QWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v30 + 24) = 0;
    *(_BYTE *)(v30 + 32) = 2;
LABEL_20:
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_release();
    return AssetHandle;
  }
  swift_release();
  return AssetHandle;
}

uint64_t specialized static __MaterialResource.buildCoreAsset(_:assetService:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v49;
  int v50;
  int v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v2 = *a1;
  v3 = a1[1];
  v49 = *((_BYTE *)a1 + 24);
  v4 = *((unsigned __int8 *)a1 + 25);
  v50 = *((unsigned __int8 *)a1 + 26);
  v56 = *((unsigned __int8 *)a1 + 27);
  v51 = *((unsigned __int8 *)a1 + 28);
  v54 = a1[5];
  v55 = a1[4];
  v53 = a1[6];
  v57 = a1[7];
  REMaterialAssetBuilderCreate();
  if (v2)
    REMaterialAssetBuilderSetMaterialDefinition();
  v5 = v3 + 64;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v8 &= v8 - 1;
      goto LABEL_7;
    }
    v11 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    if (v11 >= v9)
      goto LABEL_23;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v10;
    if (!v12)
    {
      v10 = v11 + 1;
      if (v11 + 1 >= v9)
        goto LABEL_23;
      v12 = *(_QWORD *)(v5 + 8 * v10);
      if (!v12)
      {
        v10 = v11 + 2;
        if (v11 + 2 >= v9)
          goto LABEL_23;
        v12 = *(_QWORD *)(v5 + 8 * v10);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
LABEL_7:
    swift_bridgeObjectRetain();
    __MaterialResource.BuildParameters.Value.asString.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialAssetBuilderSetFunctionConstant();
    swift_release();
    swift_release();
  }
  v13 = v11 + 3;
  if (v13 < v9)
  {
    v12 = *(_QWORD *)(v5 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v10 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        if (v10 >= v9)
          goto LABEL_23;
        v12 = *(_QWORD *)(v5 + 8 * v10);
        ++v13;
        if (v12)
          goto LABEL_22;
      }
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    v10 = v13;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  if ((v49 & 1) == 0)
    REMaterialAssetBuilderSetMTLCullMode();
  if (v4 != 2)
    REMaterialAssetBuilderSetNeedsPassthroughBlur();
  if (v50 != 2)
    REMaterialAssetBuilderSetNeedsVCABlur();
  if (v51 != 2)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialAssetBuilderSetFunctionConstant();
    swift_release();
  }
  if (v56 != 2)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialAssetBuilderSetFunctionConstant();
    swift_release();
    REMaterialAssetBuilderSetBufferFromBinding();
  }
  v14 = *(_QWORD *)(v57 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    v15 = (void **)(v57 + 72);
    do
    {
      v16 = (uint64_t)*(v15 - 1);
      v17 = *v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v18 = v17;
      REFunctionLinkBuilderCreate();
      REFunctionLinkBuilderSetShaderStage();
      String.utf8CString.getter();
      REFunctionLinkBuilderSetLinkedFunctionName();
      swift_release();
      REFunctionLinkBuilderSetLinkedFunctionLibrary();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16), 0, (char *)v16);
      REFunctionLinkBuilderSetLinkedShaderAPIs();
      swift_bridgeObjectRelease();
      REFunctionLinkBuilderSetFunctionConstantValues();
      REMaterialAssetBuilderAddFunctionLinkBuilder();
      RERelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 += 6;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  v19 = 1 << *(_BYTE *)(v55 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(v55 + 64);
  v52 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v21)
  {
    v22 = __clz(__rbit64(v21));
    goto LABEL_56;
  }
  if (v52 > 1)
  {
    v23 = *(_QWORD *)(v55 + 72);
    v24 = 1;
    if (v23)
      goto LABEL_55;
    v24 = 2;
    if (v52 <= 2)
      goto LABEL_57;
    v23 = *(_QWORD *)(v55 + 80);
    if (v23)
      goto LABEL_55;
    v24 = 3;
    if (v52 <= 3)
      goto LABEL_57;
    v23 = *(_QWORD *)(v55 + 88);
    if (v23)
    {
LABEL_55:
      v22 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_56:
      __asm { BR              X9 }
    }
    v25 = 4;
    if (v52 > 4)
    {
      v23 = *(_QWORD *)(v55 + 96);
      if (!v23)
      {
        while (1)
        {
          v24 = v25 + 1;
          if (__OFADD__(v25, 1))
            goto LABEL_102;
          if (v24 >= v52)
            goto LABEL_57;
          v23 = *(_QWORD *)(v55 + 64 + 8 * v24);
          ++v25;
          if (v23)
            goto LABEL_55;
        }
      }
      v24 = 4;
      goto LABEL_55;
    }
  }
LABEL_57:
  swift_release();
  v26 = v54 + 64;
  v27 = 1 << *(_BYTE *)(v54 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & *(_QWORD *)(v54 + 64);
  v30 = (unint64_t)(v27 + 63) >> 6;
  swift_bridgeObjectRetain();
  v31 = 0;
  while (2)
  {
    if (v29)
    {
      v29 &= v29 - 1;
LABEL_61:
      String.utf8CString.getter();
      String.utf8CString.getter();
      REMaterialAssetBuilderSetTextureFromBinding();
      swift_release();
      swift_release();
      continue;
    }
    break;
  }
  v32 = v31 + 1;
  if (__OFADD__(v31, 1))
    goto LABEL_99;
  if (v32 < v30)
  {
    v33 = *(_QWORD *)(v26 + 8 * v32);
    ++v31;
    if (!v33)
    {
      v31 = v32 + 1;
      if (v32 + 1 >= v30)
        goto LABEL_77;
      v33 = *(_QWORD *)(v26 + 8 * v31);
      if (!v33)
      {
        v31 = v32 + 2;
        if (v32 + 2 >= v30)
          goto LABEL_77;
        v33 = *(_QWORD *)(v26 + 8 * v31);
        if (!v33)
        {
          v34 = v32 + 3;
          if (v34 >= v30)
            goto LABEL_77;
          v33 = *(_QWORD *)(v26 + 8 * v34);
          if (!v33)
          {
            while (1)
            {
              v31 = v34 + 1;
              if (__OFADD__(v34, 1))
                break;
              if (v31 >= v30)
                goto LABEL_77;
              v33 = *(_QWORD *)(v26 + 8 * v31);
              ++v34;
              if (v33)
                goto LABEL_76;
            }
LABEL_103:
            __break(1u);
            goto LABEL_104;
          }
          v31 = v34;
        }
      }
    }
LABEL_76:
    v29 = (v33 - 1) & v33;
    goto LABEL_61;
  }
LABEL_77:
  swift_release();
  v35 = v53 + 64;
  v36 = 1 << *(_BYTE *)(v53 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & *(_QWORD *)(v53 + 64);
  v39 = (unint64_t)(v36 + 63) >> 6;
  swift_bridgeObjectRetain();
  v40 = 0;
  while (2)
  {
    if (v38)
    {
      v38 &= v38 - 1;
LABEL_81:
      String.utf8CString.getter();
      String.utf8CString.getter();
      REMaterialAssetBuilderSetBufferFromBinding();
      swift_release();
      swift_release();
      continue;
    }
    break;
  }
  v41 = v40 + 1;
  if (__OFADD__(v40, 1))
    goto LABEL_100;
  if (v41 < v39)
  {
    v42 = *(_QWORD *)(v35 + 8 * v41);
    ++v40;
    if (!v42)
    {
      v40 = v41 + 1;
      if (v41 + 1 >= v39)
        goto LABEL_97;
      v42 = *(_QWORD *)(v35 + 8 * v40);
      if (!v42)
      {
        v40 = v41 + 2;
        if (v41 + 2 >= v39)
          goto LABEL_97;
        v42 = *(_QWORD *)(v35 + 8 * v40);
        if (!v42)
        {
          v43 = v41 + 3;
          if (v43 >= v39)
            goto LABEL_97;
          v42 = *(_QWORD *)(v35 + 8 * v43);
          if (!v42)
          {
            while (1)
            {
              v40 = v43 + 1;
              if (__OFADD__(v43, 1))
                break;
              if (v40 >= v39)
                goto LABEL_97;
              v42 = *(_QWORD *)(v35 + 8 * v40);
              ++v43;
              if (v42)
                goto LABEL_96;
            }
LABEL_104:
            __break(1u);
          }
          v40 = v43;
        }
      }
    }
LABEL_96:
    v38 = (v42 - 1) & v42;
    goto LABEL_81;
  }
LABEL_97:
  swift_release();
  v44 = a2[3];
  v45 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v44);
  (*(void (**)(uint64_t, uint64_t))(v45 + 32))(v44, v45);
  v46 = REAssetManagerMaterialAssetBuilderBuild();
  RERelease();
  return v46;
}

uint64_t outlined init with copy of MaterialParameters(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MaterialParameters(a2, a1);
  return a2;
}

uint64_t sub_21BAE04D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __MaterialResource.loadAsync(named:in:)()
{
  uint64_t v0;

  return specialized static __MaterialResource.createAssetRef(named:in:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_21BAE0520()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __MaterialResource.loadAsync(_:services:)()
{
  uint64_t v0;

  return closure #1 in static __MaterialResource.loadAsync(_:services:)(*(_QWORD *)(v0 + 16), (_OWORD *)(v0 + 24), *(_QWORD *)(v0 + 88));
}

uint64_t outlined retain of __MaterialResource.BuildParameters(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21BAE0600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __MaterialResource.loadAsync(named:in:services:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in static __MaterialResource.loadAsync(named:in:services:)(v0[2], v0[3], v0[4], (uint64_t)v0 + v2, *(_QWORD **)((char *)v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t outlined release of PhysicallyBasedMaterial.BaseColor(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);

  outlined consume of MaterialParameters.Texture?(v2, v3);
  return a1;
}

uint64_t outlined retain of PhysicallyBasedMaterial.BaseColor(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(id *)a1;
  outlined copy of MaterialParameters.Texture?(v2, v3);
  return a1;
}

void *outlined copy of MaterialParameters.Texture?(void *result, uint64_t a2)
{
  id v2;

  if (a2)
  {
    v2 = result;
    return (void *)swift_retain();
  }
  return result;
}

void outlined consume of __MaterialColorParameter(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_release();
  else

}

id outlined copy of __MaterialColorParameter(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_retain();
  else
    return a1;
}

uint64_t outlined consume of MaterialScalarParameter(uint64_t result)
{
  if (result < 0)
    return swift_release();
  return result;
}

uint64_t outlined copy of MaterialScalarParameter(uint64_t result)
{
  if (result < 0)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for __MaterialResource()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type __MaterialResource.BuildParameters.Value and conformance __MaterialResource.BuildParameters.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __MaterialResource.BuildParameters.Value and conformance __MaterialResource.BuildParameters.Value;
  if (!lazy protocol witness table cache variable for type __MaterialResource.BuildParameters.Value and conformance __MaterialResource.BuildParameters.Value)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __MaterialResource.BuildParameters.Value, &type metadata for __MaterialResource.BuildParameters.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MaterialResource.BuildParameters.Value and conformance __MaterialResource.BuildParameters.Value);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in MaterialScalarParameter()
{
  return MEMORY[0x24BEE17E8];
}

unint64_t lazy protocol witness table accessor for type MaterialScalarParameter and conformance MaterialScalarParameter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialScalarParameter and conformance MaterialScalarParameter;
  if (!lazy protocol witness table cache variable for type MaterialScalarParameter and conformance MaterialScalarParameter)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MaterialScalarParameter, &type metadata for MaterialScalarParameter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialScalarParameter and conformance MaterialScalarParameter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __MaterialColorParameter and conformance __MaterialColorParameter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __MaterialColorParameter and conformance __MaterialColorParameter;
  if (!lazy protocol witness table cache variable for type __MaterialColorParameter and conformance __MaterialColorParameter)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __MaterialColorParameter, &type metadata for __MaterialColorParameter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MaterialColorParameter and conformance __MaterialColorParameter);
  }
  return result;
}

void sub_21BAE08FC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_21BAE0904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(*(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_21BAE092C()
{
  return 16;
}

__n128 sub_21BAE0938(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BAE0944(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_21BAE0954()
{
  return 16;
}

__n128 sub_21BAE0960(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BAE096C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_21BAE0978()
{
  return 16;
}

__n128 sub_21BAE0984(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAE0990()
{
  return 16;
}

__n128 sub_21BAE099C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAE09A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return Material.parameters.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
}

uint64_t sub_21BAE09D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  outlined init with copy of MaterialParameters(a1, (uint64_t)v7);
  return Material.parameters.setter(v7, v4, v5);
}

uint64_t sub_21BAE0A1C()
{
  return 16;
}

__n128 sub_21BAE0A28(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BAE0A34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return result;
}

uint64_t sub_21BAE0A78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  return result;
}

void sub_21BAE0AC4(id *a1)
{
  SimpleMaterial.__tintColor.setter(*a1);
}

void sub_21BAE0AEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  char v5;

  specialized Material.getLegacyBase(legacy:)(*(_QWORD *)(a1 + 80), *(void **)(a1 + 88), *(void **)(a1 + 104), (uint64_t)&v4);
  v3 = v5;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v3;
}

uint64_t sub_21BAE0B38(uint64_t a1)
{
  char v1;
  void *v3;
  char v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(void **)a1;
  v4 = v1;
  outlined copy of __MaterialColorParameter(v3, v1);
  return SimpleMaterial.__baseColor.setter((uint64_t)&v3);
}

uint64_t sub_21BAE0B80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_37Tm(a1, a2, a3, a4, 0);
}

uint64_t sub_21BAE0B8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_37Tm(a1, a2, a3, a4, 1);
}

uint64_t keypath_set_37Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;

  v6 = *a1;
  outlined copy of MaterialScalarParameter(*a1);
  specialized Material.setScalarParameter(_:value:)(a5, v6);
  return outlined consume of MaterialScalarParameter(v6);
}

uint64_t sub_21BAE0BD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;

  result = SimpleMaterial.__emissive.getter((uint64_t)&v4);
  v3 = v5;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_21BAE0C1C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 112);
  return result;
}

void sub_21BAE0C28(BOOL *a1)
{
  SimpleMaterial.__usesTransparency.setter(*a1);
}

uint64_t sub_21BAE0C4C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 120) == 1;
  return result;
}

unsigned __int8 *sub_21BAE0C60(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 120) = *result;
  return result;
}

uint64_t sub_21BAE0C6C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 137);
  return result;
}

_BYTE *sub_21BAE0C78(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 137) = *result;
  return result;
}

uint64_t sub_21BAE0C84@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 138);
  return result;
}

_BYTE *sub_21BAE0C90(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 138) = *result;
  return result;
}

uint64_t sub_21BAE0C9C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(result + 136) & 1) == 0)
  {
    if (*(_QWORD *)(result + 128) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(result + 128);
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_21BAE0CBC(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return SimpleMaterial.faceCulling.setter(&v2);
}

uint64_t sub_21BAE0CF0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 41);
  return result;
}

_BYTE *sub_21BAE0CFC(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 41) = *result;
  return result;
}

unsigned __int8 *sub_21BAE0D0C(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return OcclusionMaterial.faceCulling.setter(&v2);
}

id sub_21BAE0D40@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = (id)REVideoAssetGetAVPlayer();
  *a1 = result;
  return result;
}

uint64_t sub_21BAE0D74()
{
  return REVideoAssetSetAVPlayer();
}

uint64_t sub_21BAE0D8C()
{
  return REVideoAssetSetRemotePlayer();
}

uint64_t sub_21BAE0DA0@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 56) == 1;
  return result;
}

unsigned __int8 *sub_21BAE0DB4(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 56) = *result;
  return result;
}

uint64_t sub_21BAE0DC0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 64);
  return result;
}

_BYTE *sub_21BAE0DCC(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = *result;
  return result;
}

uint64_t sub_21BAE0DD8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 65);
  return result;
}

_BYTE *sub_21BAE0DE4(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 65) = *result;
  return result;
}

uint64_t sub_21BAE0DF0@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(result + 80) & 1) == 0)
  {
    if (*(_QWORD *)(result + 72) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(result + 72);
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_21BAE0E10(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return VideoMaterial.faceCulling.setter(&v2);
}

uint64_t sub_21BAE0E44@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 40) == 1;
  return result;
}

unsigned __int8 *sub_21BAE0E58(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 40) = *result;
  return result;
}

uint64_t keypath_get_54Tm@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(result + 56) & 1) == 0)
  {
    if (*(_QWORD *)(result + 48) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(result + 48);
  }
  *a2 = v2;
  return result;
}

uint64_t dispatch thunk of Material.__resource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Material.__parameterBlock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Material.__parameterBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Material.__parameterBlock.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Material.__triangleFillMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Material.__triangleFillMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of Material.__triangleFillMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of Material.__writesDepthInternal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Material.__writesDepthInternal.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of Material.__writesDepthInternal.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of Material.__readsDepthInternal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of Material.__readsDepthInternal.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of Material.__readsDepthInternal.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of Material.__faceCullMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of Material.__faceCullMode.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 120))(a1, a2 & 1);
}

uint64_t dispatch thunk of Material.__faceCullMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of Material.__parameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of Material.__requiresUnmanagedVideoComponent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t method lookup function for __MaterialResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __MaterialResource.coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of __MaterialResource.coreAsset.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of __MaterialResource.coreAsset.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of __MaterialResource.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of __MaterialResource.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of __MaterialResource.cullMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t destroy for __MaterialResource.BuildParameters()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __MaterialResource.BuildParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __MaterialResource.BuildParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for __MaterialResource.BuildParameters(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __MaterialResource.BuildParameters(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialResource.BuildParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for __MaterialResource.BuildParameters()
{
  return &type metadata for __MaterialResource.BuildParameters;
}

__n128 __swift_memcpy17_16(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for __MaterialResource.BuildParameters.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialResource.BuildParameters.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for __MaterialResource.BuildParameters.Value(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __MaterialResource.BuildParameters.Value()
{
  return &type metadata for __MaterialResource.BuildParameters.Value;
}

uint64_t initializeWithCopy for AnyMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for AnyMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for AnyMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for AnyMaterial(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyMaterial()
{
  return &type metadata for AnyMaterial;
}

void destroy for SimpleMaterial(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SimpleMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(void **)(a2 + 96);
  v11 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = v8;
  swift_bridgeObjectRetain();
  v14 = v10;
  v15 = v11;
  return a1;
}

uint64_t assignWithCopy for SimpleMaterial(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = (void *)*((_QWORD *)a2 + 9);
  v8 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(void **)(a1 + 96);
  v11 = (void *)*((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 104);
  v14 = (void *)*((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 104) = v14;
  v15 = v14;

  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  v16 = *((_QWORD *)a2 + 16);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 128) = v16;
  *(_BYTE *)(a1 + 137) = *((_BYTE *)a2 + 137);
  *(_BYTE *)(a1 + 138) = *((_BYTE *)a2 + 138);
  return a1;
}

__n128 __swift_memcpy139_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 123) = *(_OWORD *)(a2 + 123);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SimpleMaterial(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  v8 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  v9 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimpleMaterial(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 139))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimpleMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 138) = 0;
    *(_WORD *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 139) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 139) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimpleMaterial()
{
  return &type metadata for SimpleMaterial;
}

uint64_t type metadata accessor for SimpleMaterial.SimpleMaterialMapping()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for OcclusionMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for OcclusionMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t assignWithTake for OcclusionMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for OcclusionMaterial()
{
  return &type metadata for OcclusionMaterial;
}

uint64_t destroy for VideoMaterial(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for VideoMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VideoMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  return a1;
}

uint64_t assignWithTake for VideoMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoMaterial(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoMaterial()
{
  return &type metadata for VideoMaterial;
}

uint64_t *initializeBufferWithCopyOfBuffer for MaterialScalarParameter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  outlined copy of MaterialScalarParameter(*a2);
  *a1 = v3;
  return a1;
}

uint64_t destroy for MaterialScalarParameter(uint64_t *a1)
{
  return outlined consume of MaterialScalarParameter(*a1);
}

uint64_t *assignWithCopy for MaterialScalarParameter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  outlined copy of MaterialScalarParameter(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of MaterialScalarParameter(v4);
  return a1;
}

uint64_t *assignWithTake for MaterialScalarParameter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of MaterialScalarParameter(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialScalarParameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 15);
  v3 = (((*(_QWORD *)a1 >> 60) >> 3) & 0xFFFFFFF1 | (2 * ((*(_QWORD *)a1 >> 60) & 7))) ^ 0xF;
  if (v3 >= 0xE)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MaterialScalarParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(_QWORD *)result = a2 - 15;
    if (a3 >= 0xF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = (unint64_t)(((-a2 >> 1) & 7) - 8 * a2) << 60;
  }
  return result;
}

uint64_t getEnumTag for MaterialScalarParameter(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *destructiveProjectEnumData for MaterialScalarParameter(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for MaterialScalarParameter(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for MaterialScalarParameter()
{
  return &type metadata for MaterialScalarParameter;
}

uint64_t initializeBufferWithCopyOfBuffer for __MaterialColorParameter(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of __MaterialColorParameter(*(void **)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for __MaterialColorParameter(uint64_t a1)
{
  outlined consume of __MaterialColorParameter(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for __MaterialColorParameter(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of __MaterialColorParameter(*(void **)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of __MaterialColorParameter(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for __MaterialColorParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of __MaterialColorParameter(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for __MaterialColorParameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialColorParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for __MaterialColorParameter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for __MaterialColorParameter(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for __MaterialColorParameter()
{
  return &type metadata for __MaterialColorParameter;
}

void destroy for AnyMaterial(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for PortalMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for PortalMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t assignWithTake for PortalMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for PortalMaterial()
{
  return &type metadata for PortalMaterial;
}

void destroy for LegacyBaseColor(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for LegacyBaseColor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  v6 = v4;
  v7 = v5;
  return a1;
}

_QWORD *assignWithCopy for LegacyBaseColor(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[2];
  v5 = (void *)a2[2];
  a1[2] = v5;
  v6 = v5;

  v7 = (void *)a1[3];
  v8 = (void *)a2[3];
  a1[3] = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for LegacyBaseColor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyBaseColor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyBaseColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBaseColor()
{
  return &type metadata for LegacyBaseColor;
}

void destroy for __MaterialResource.CoreMaterialFunction(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for __MaterialResource.CoreMaterialFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

uint64_t assignWithCopy for __MaterialResource.CoreMaterialFunction(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for __MaterialResource.CoreMaterialFunction(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for __MaterialResource.CoreMaterialFunction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialResource.CoreMaterialFunction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for __MaterialResource.CoreMaterialFunction()
{
  return &type metadata for __MaterialResource.CoreMaterialFunction;
}

uint64_t getEnumTagSinglePayload for __MaterialResource.LoadError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialResource.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for __MaterialResource.LoadError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for __MaterialResource.LoadError(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __MaterialResource.LoadError()
{
  return &type metadata for __MaterialResource.LoadError;
}

unint64_t lazy protocol witness table accessor for type __MaterialResource.CoreMaterialFunction and conformance __MaterialResource.CoreMaterialFunction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __MaterialResource.CoreMaterialFunction and conformance __MaterialResource.CoreMaterialFunction;
  if (!lazy protocol witness table cache variable for type __MaterialResource.CoreMaterialFunction and conformance __MaterialResource.CoreMaterialFunction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __MaterialResource.CoreMaterialFunction, &type metadata for __MaterialResource.CoreMaterialFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MaterialResource.CoreMaterialFunction and conformance __MaterialResource.CoreMaterialFunction);
  }
  return result;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t outlined init with take of __MaterialResource.LoadError(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t partial apply for closure #1 in static __MaterialResource.load(_:)(uint64_t a1)
{
  return closure #1 in static __MaterialResource.load(_:)(a1);
}

uint64_t sub_21BAE28E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static __MaterialResource.load(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

id outlined copy of __RKMaterialParameterBlock.Parameter?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return outlined copy of __RKMaterialParameterBlock.Parameter(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_21BAE3680()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(uint64_t a1)
{
  outlined copy of MaterialParameters.Texture?(*(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

void outlined consume of MaterialParameterKeyValue?(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    outlined consume of __RKMaterialParameterBlock.Parameter?(a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
}

uint64_t outlined destroy of SimpleMaterial(uint64_t a1)
{
  destroy for SimpleMaterial(a1);
  return a1;
}

uint64_t sub_21BAE37DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BAE3800()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static __MaterialResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static __MaterialResource.loadAsync(_:services:)(a1, a2, *(uint64_t (**)(void))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t outlined init with take of Result<Material, Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Material, Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BAE3880()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BAE38C0()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in static __MaterialResource.loadAsync(_:services:)(char a1)
{
  uint64_t v1;

  closure #1 in closure #1 in static __MaterialResource.loadAsync(_:services:)(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_21BAE3904()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_21BAE3928()
{
  return objectdestroy_124Tm();
}

uint64_t sub_21BAE3930()
{
  return objectdestroy_124Tm();
}

uint64_t sub_21BAE3938()
{
  return objectdestroy_124Tm();
}

id outlined copy of CustomMaterial.CustomUniformsState?(id result, void *a2, char a3)
{
  if (a3 != -1)
    return outlined copy of CustomMaterial.CustomUniformsState(result, a2, a3);
  return result;
}

id outlined copy of CustomMaterial.CustomUniformsState(id result, void *a2, char a3)
{
  id v3;

  if (a3)
  {
    if (a3 != 1)
      return result;
    v3 = result;
    result = a2;
  }
  return result;
}

uint64_t sub_21BAE398C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(_QWORD *)(v0 + 80) - 1) >= 2)
    swift_release();
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(v0 + 96), *(void **)(v0 + 104), *(_BYTE *)(v0 + 112));
  if (*(_QWORD *)(v0 + 144))
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  if (*(_QWORD *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if ((unint64_t)(*(_QWORD *)(v0 + 304) - 1) >= 3)
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BAE3A4C()
{
  return objectdestroy_124Tm();
}

uint64_t objectdestroy_124Tm()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_21BAE3A9C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t PbrCommonKeys.Constants.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BAE3BD0 + 4 * byte_21BE5E820[a1]))(0x6F6C6F4365736162, 0xED0000746E695472);
}

uint64_t sub_21BAE3BD0()
{
  return 0x6166727573627573;
}

uint64_t sub_21BAE3BEC()
{
  return 0x63696C6C6174656DLL;
}

unint64_t sub_21BAE3C80()
{
  return 0xD000000000000018;
}

uint64_t sub_21BAE3E70()
{
  return 0x6F437265746C6966;
}

uint64_t sub_21BAE3E90()
{
  return 0x6C6163536873656DLL;
}

uint64_t sub_21BAE3EB0()
{
  return 0x537974696361706FLL;
}

uint64_t PbrCommonKeys.Textures.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BAE3F0C + 4 * byte_21BE5E83D[a1]))(0x4265727574786574, 0xEB00000000666472);
}

unint64_t sub_21BAE3F0C()
{
  return 0xD000000000000010;
}

uint64_t sub_21BAE419C()
{
  return 0x6573696F4E6F7373;
}

unint64_t sub_21BAE41C0()
{
  return 0xD000000000000017;
}

void sub_21BAE41D8()
{
  JUMPOUT(0x21BAE41ECLL);
}

uint64_t getEnumTagSinglePayload for PbrCommonKeys.Constants(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE4)
    goto LABEL_17;
  if (a2 + 28 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 28) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 28;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 28;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 28;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1D;
  v8 = v6 - 29;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PbrCommonKeys.Constants(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 28 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 28) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE3)
    return ((uint64_t (*)(void))((char *)&loc_21BAE42D4 + 4 * byte_21BE5E860[v4]))();
  *a1 = a2 + 28;
  return ((uint64_t (*)(void))((char *)sub_21BAE4308 + 4 * byte_21BE5E85B[v4]))();
}

uint64_t sub_21BAE4308(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAE4310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAE4318);
  return result;
}

uint64_t sub_21BAE4324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAE432CLL);
  *(_BYTE *)result = a2 + 28;
  return result;
}

uint64_t sub_21BAE4330(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAE4338(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PbrCommonKeys.Constants()
{
  return &type metadata for PbrCommonKeys.Constants;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PbrCommonKeys.Constants(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = PbrCommonKeys.Constants.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == PbrCommonKeys.Constants.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PbrCommonKeys.Constants()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PbrCommonKeys.Constants.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PbrCommonKeys.Constants()
{
  unsigned __int8 *v0;

  PbrCommonKeys.Constants.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PbrCommonKeys.Constants()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PbrCommonKeys.Constants.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PbrCommonKeys.Constants@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized PbrCommonKeys.Constants.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PbrCommonKeys.Constants@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PbrCommonKeys.Constants.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type PbrCommonKeys.Constants and conformance PbrCommonKeys.Constants()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PbrCommonKeys.Constants and conformance PbrCommonKeys.Constants;
  if (!lazy protocol witness table cache variable for type PbrCommonKeys.Constants and conformance PbrCommonKeys.Constants)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PbrCommonKeys.Constants, &type metadata for PbrCommonKeys.Constants);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PbrCommonKeys.Constants and conformance PbrCommonKeys.Constants);
  }
  return result;
}

uint64_t specialized PbrCommonKeys.Constants.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1D)
    return 29;
  else
    return v0;
}

uint64_t PortalComponent.targetEntity.getter()
{
  return swift_retain();
}

uint64_t key path setter for PortalComponent.targetEntity : PortalComponent(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  if (*a1)
    swift_retain();
  result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t PortalComponent.targetEntity.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*PortalComponent.targetEntity.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_retain();
  return PortalComponent.targetEntity.modify;
}

uint64_t PortalComponent.targetEntity.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = (_QWORD *)a1[1];
    if (v2)
      swift_retain();
    swift_release();
    *v3 = v2;
    return swift_release();
  }
  else
  {
    v4 = (_QWORD *)a1[1];
    result = swift_release();
    *v4 = v2;
  }
  return result;
}

__n128 PortalComponent.ClippingPlane.position.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void PortalComponent.ClippingPlane.position.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*PortalComponent.ClippingPlane.position.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PortalComponent.ClippingPlane.normal.getter()
{
  __n128 *v0;

  return v0[1];
}

void PortalComponent.ClippingPlane.normal.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*PortalComponent.ClippingPlane.normal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PortalComponent.ClippingPlane.init(position:normal:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  *a1 = a2;
  a1[1] = a3;
}

void PortalComponent.clippingPlane.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;
  float32x2_t v5;

  v2 = *(_BYTE *)(v1 + 48);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v5 = *(float32x2_t *)(v1 + 32);
    v3 = *(_OWORD *)(v1 + 16);
    *(float32x2_t *)&v4 = vsub_f32(0, v5);
    *((float *)&v4 + 2) = 0.0 - COERCE_FLOAT(*(_QWORD *)(v1 + 40));
    HIDWORD(v4) = 0;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
}

double key path getter for PortalComponent.clippingPlane : PortalComponent@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  PortalComponent.clippingPlane.getter((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__int128 *PortalComponent.clippingPlane.setter(__int128 *result)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;
  float32x2_t v5;

  v2 = *((_BYTE *)result + 32);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v5 = (float32x2_t)result[1];
    v3 = *result;
    *(float32x2_t *)&v4 = vsub_f32(0, v5);
    *((float *)&v4 + 2) = 0.0 - COERCE_FLOAT(*((_QWORD *)result + 3));
    HIDWORD(v4) = 0;
  }
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  *(_BYTE *)(v1 + 48) = v2;
  return result;
}

void (*PortalComponent.clippingPlane.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  __int128 v5;
  __int128 v6;
  float32x2_t v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *(_BYTE *)(v1 + 48);
  v5 = 0uLL;
  v6 = 0uLL;
  if ((v4 & 1) == 0)
  {
    v7 = *(float32x2_t *)(v1 + 32);
    v5 = *(_OWORD *)(v1 + 16);
    *(float32x2_t *)&v6 = vsub_f32(0, v7);
    *((float *)&v6 + 2) = 0.0 - COERCE_FLOAT(*(_QWORD *)(v1 + 40));
    HIDWORD(v6) = 0;
  }
  *(_OWORD *)v3 = v5;
  *((_OWORD *)v3 + 1) = v6;
  *((_BYTE *)v3 + 32) = v4;
  return PortalComponent.clippingPlane.modify;
}

void PortalComponent.clippingPlane.modify(void **a1)
{
  float32x2_t *v1;
  __int8 v2;
  __int128 v3;
  __int128 v4;
  float32x2_t v5;
  float32x2_t v6;

  v1 = (float32x2_t *)*a1;
  v2 = v1[4].i8[0];
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v5 = v1[2];
    v3 = *(_OWORD *)v1->f32;
    *(float32x2_t *)&v4 = vsub_f32(0, v5);
    *((float *)&v4 + 2) = 0.0 - COERCE_FLOAT(*(_QWORD *)&v1[3]);
    HIDWORD(v4) = 0;
  }
  v6 = v1[5];
  *(_OWORD *)(*(_QWORD *)&v6 + 16) = v3;
  *(_OWORD *)(*(_QWORD *)&v6 + 32) = v4;
  *(_BYTE *)(*(_QWORD *)&v6 + 48) = v2;
  free(v1);
}

uint64_t PortalComponent.init(target:clippingPlane:)@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  float32x2_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = (float32x2_t)a2[1];
  v5 = *((_QWORD *)a2 + 3);
  v6 = *((_BYTE *)a2 + 32);
  v7 = 0uLL;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_BYTE *)(a3 + 96) = 1;
  v8 = 0uLL;
  *(_QWORD *)a3 = result;
  if ((v6 & 1) == 0)
  {
    *(float32x2_t *)&v8 = vsub_f32(0, v4);
    *((float *)&v8 + 2) = 0.0 - *(float *)&v5;
    HIDWORD(v8) = 0;
    v7 = v3;
  }
  *(_OWORD *)(a3 + 16) = v7;
  *(_OWORD *)(a3 + 32) = v8;
  *(_BYTE *)(a3 + 48) = v6;
  return result;
}

uint64_t static PortalComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t TargetWorldEntity;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int UseClipPlane;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  TargetWorldEntity = REPortalComponentGetTargetWorldEntity();
  if (TargetWorldEntity)
  {
    v3 = TargetWorldEntity;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v4 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
      {
        __break(1u);
        return result;
      }
      v7 = specialized static Entity.entityInfoType(_:)();
      if (v7)
      {
        v5 = (*(uint64_t (**)(void))(v7 + 232))();
        v8 = *(_QWORD *)(v5 + 16);
        swift_retain();
        MEMORY[0x22076D160](v8, 0);
        *(_QWORD *)(v5 + 16) = v3;
        MEMORY[0x22076D160](v3, v5);
        swift_release();
        goto LABEL_9;
      }
      v4 = makeEntity(for:)(v3);
    }
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
LABEL_9:
  UseClipPlane = REPortalComponentGetUseClipPlane();
  v10 = UseClipPlane;
  v11 = 0uLL;
  v17 = 0u;
  v18 = 0u;
  if (UseClipPlane)
  {
    REPortalComponentGetClipPlanePosition();
    v17 = v12;
    REPortalComponentGetClipPlaneNormal();
  }
  v16 = v11;
  result = REPortalComponentGetAllowsCrossing();
  v13 = result;
  v14 = 0uLL;
  if ((_DWORD)result)
  {
    REPortalComponentGetCrossPlanePosition();
    v18 = v15;
    result = REPortalComponentGetCrossPlaneNormal();
  }
  *(_QWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v17;
  *(_OWORD *)(a1 + 32) = v16;
  *(_BYTE *)(a1 + 48) = v10 ^ 1;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 96) = v13 ^ 1;
  return result;
}

uint64_t PortalComponent.__toCore(_:)()
{
  uint64_t v0;
  char v1;
  char v2;

  v1 = *(_BYTE *)(v0 + 48);
  v2 = *(_BYTE *)(v0 + 96);
  REPortalComponentUnsetTargetWorldRoot();
  REPortalComponentSetTargetWorldEntity();
  if ((v1 & 1) == 0)
  {
    REPortalComponentSetUseClipPlane();
    REPortalComponentSetClipPlanePosition();
    REPortalComponentSetClipPlaneNormal();
    if ((v2 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    REPortalComponentSetAllowsCrossing();
    goto LABEL_6;
  }
  REPortalComponentSetUseClipPlane();
  if ((v2 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  REPortalComponentSetAllowsCrossing();
  REPortalComponentSetCrossPlanePosition();
  REPortalComponentSetCrossPlaneNormal();
LABEL_6:
  REPortalComponentSetInheritsIBL();
  REPortalComponentSetInheritsProbeLighting();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PortalComponent(_DWORD *a1@<X8>)
{
  *a1 = 1008;
}

void static PortalComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 1008;
}

__n128 PortalComponent.Plane.position.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

uint64_t (*PortalComponent.Plane.position.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PortalComponent.Plane.normal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PortalComponent.clippingMode.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 48);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *(_OWORD *)(v1 + 16);
    v4 = *(_OWORD *)(v1 + 32);
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
}

__int128 *PortalComponent.clippingMode.setter(__int128 *result)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;

  v2 = *((_BYTE *)result + 32);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *result;
    v4 = result[1];
  }
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  *(_BYTE *)(v1 + 48) = v2;
  return result;
}

void (*PortalComponent.clippingMode.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  __int128 v5;
  __int128 v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *(_BYTE *)(v1 + 48);
  v5 = 0uLL;
  v6 = 0uLL;
  if ((v4 & 1) == 0)
  {
    v5 = *(_OWORD *)(v1 + 16);
    v6 = *(_OWORD *)(v1 + 32);
  }
  *(_OWORD *)v3 = v5;
  *((_OWORD *)v3 + 1) = v6;
  *((_BYTE *)v3 + 32) = v4;
  return PortalComponent.clippingMode.modify;
}

void PortalComponent.clippingMode.modify(void **a1)
{
  _BYTE *v1;
  char v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v1 = *a1;
  v2 = v1[32];
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *(_OWORD *)v1;
    v4 = *((_OWORD *)v1 + 1);
  }
  v5 = *((_QWORD *)v1 + 5);
  *(_OWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 48) = v2;
  free(v1);
}

uint64_t static PortalComponent.ClippingMode.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  BOOL v11;
  float v12;
  float v13;
  uint64_t v14;
  BOOL v15;
  float v16;
  float v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = *((unsigned __int8 *)a1 + 32);
  v4 = *((unsigned __int8 *)a2 + 32);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
  {
    v6 = 0;
    v7 = *a1;
    v8 = a1[1];
    v9 = *a2;
    v10 = a2[1];
    while (1)
    {
      v20 = v7;
      v12 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
      v21 = v9;
      v13 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
      v11 = v12 == v13;
      if (v6 == 2)
        break;
      while (1)
      {
        ++v6;
        if (v11)
          break;
        v11 = 0;
        result = 0;
        if (v6 == 2)
          return result;
      }
    }
    if (v12 != v13)
      return 0;
    v14 = 0;
    while (1)
    {
      v18 = v8;
      v16 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
      v19 = v10;
      v17 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
      v15 = v16 == v17;
      if (v14 == 2)
        break;
      while (1)
      {
        ++v14;
        if (v15)
          break;
        if (v14 == 2)
          return 0;
        v15 = 0;
      }
    }
    return v16 == v17;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PortalComponent.ClippingMode(uint64_t a1, uint64_t a2)
{
  char v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_BYTE *)(a1 + 32) & *(_BYTE *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0 && (*(_BYTE *)(a2 + 32) & 1) == 0)
  {
    v3 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v12 = *(_OWORD *)a1;
    v13 = v5;
    v14 = v4;
    v9 = v3;
    v10 = v6;
    v11 = v7;
    v2 = specialized static PortalComponent.Plane.== infix(_:_:)(&v12, &v9);
  }
  return v2 & 1;
}

void PortalComponent.crossingMode.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 96);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *(_OWORD *)(v1 + 64);
    v4 = *(_OWORD *)(v1 + 80);
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
}

__int128 *PortalComponent.crossingMode.setter(__int128 *result)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;

  v2 = *((_BYTE *)result + 32);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *result;
    v4 = result[1];
  }
  *(_OWORD *)(v1 + 64) = v3;
  *(_OWORD *)(v1 + 80) = v4;
  *(_BYTE *)(v1 + 96) = v2;
  return result;
}

void (*PortalComponent.crossingMode.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  __int128 v5;
  __int128 v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *(_BYTE *)(v1 + 96);
  v5 = 0uLL;
  v6 = 0uLL;
  if ((v4 & 1) == 0)
  {
    v5 = *(_OWORD *)(v1 + 64);
    v6 = *(_OWORD *)(v1 + 80);
  }
  *(_OWORD *)v3 = v5;
  *((_OWORD *)v3 + 1) = v6;
  *((_BYTE *)v3 + 32) = v4;
  return PortalComponent.crossingMode.modify;
}

void PortalComponent.crossingMode.modify(void **a1)
{
  _BYTE *v1;
  char v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v1 = *a1;
  v2 = v1[32];
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *(_OWORD *)v1;
    v4 = *((_OWORD *)v1 + 1);
  }
  v5 = *((_QWORD *)v1 + 5);
  *(_OWORD *)(v5 + 64) = v3;
  *(_OWORD *)(v5 + 80) = v4;
  *(_BYTE *)(v5 + 96) = v2;
  free(v1);
}

int8x16_t PortalComponent.init(target:clippingMode:crossingMode:)@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X2>, int8x16_t *a4@<X8>)
{
  int8x16_t v4;
  int8x16_t v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  int v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2].u8[0];
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2].u8[0];
  a4->i64[0] = a1;
  if (v6)
    v10 = -1;
  else
    v10 = 0;
  v11 = (int8x16_t)vdupq_n_s64(v10);
  a4[1] = vbicq_s8(v4, v11);
  a4[2] = vbicq_s8(v5, v11);
  if (v9)
    v12 = -1;
  else
    v12 = 0;
  v13 = (int8x16_t)vdupq_n_s64(v12);
  a4[3].i8[0] = v6;
  v14 = vbicq_s8(v7, v13);
  result = vbicq_s8(v8, v13);
  a4[4] = v14;
  a4[5] = result;
  a4[6].i8[0] = v9;
  return result;
}

RealityFoundation::PortalComponent::Options __swiftcall PortalComponent.Options.init(rawValue:)(RealityFoundation::PortalComponent::Options rawValue)
{
  RealityFoundation::PortalComponent::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t PortalComponent.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static PortalComponent.Options.clipContents.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static PortalComponent.Options.allowCrossing.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t PortalComponent.init(target:plane:options:)@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X1>, _QWORD *a3@<X2>, int8x16_t *a4@<X8>, int64x2_t a5@<Q0>, int64x2_t a6@<Q1>, int64x2_t a7@<Q4>)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  BOOL v10;
  uint64_t v11;
  int8x16_t v12;

  a5.i64[0] = 0;
  a6.i64[0] = *a3 & 1;
  v7 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(a6, a5)).i64[0], 0);
  v9 = *a2;
  v8 = a2[1];
  v10 = (*a3 & 1) == 0;
  v11 = *a3 & 2;
  a7.i64[0] = v11;
  v12 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(a7, a5)).i64[0], 0);
  a4->i64[0] = result;
  a4[1] = vandq_s8(v9, v7);
  a4[2] = vandq_s8(v8, v7);
  a4[3].i8[0] = v10;
  a4[4] = vandq_s8(v9, v12);
  a4[5] = vandq_s8(v8, v12);
  a4[6].i8[0] = v11 == 0;
  return result;
}

uint64_t one-time initialization function for positiveX()
{
  __int128 v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for positiveX);
  v3 = v0;
  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for positiveX);
  static PortalComponent.Plane.positiveX = v3;
  *(_OWORD *)algn_25519A0D0 = v2;
  return result;
}

double static PortalComponent.Plane.positiveX.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for positiveX, (__n128 *)&static PortalComponent.Plane.positiveX, (__n128 *)algn_25519A0D0, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for negativeX()
{
  __int128 v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for negativeX);
  v3 = v0;
  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for negativeX);
  static PortalComponent.Plane.negativeX = v3;
  *(_OWORD *)algn_25519A0F0 = v2;
  return result;
}

double static PortalComponent.Plane.negativeX.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for negativeX, (__n128 *)&static PortalComponent.Plane.negativeX, (__n128 *)algn_25519A0F0, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for positiveY()
{
  __int128 v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for positiveY);
  v3 = v0;
  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for positiveY);
  static PortalComponent.Plane.positiveY = v3;
  *(_OWORD *)algn_25519A110 = v2;
  return result;
}

double static PortalComponent.Plane.positiveY.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for positiveY, (__n128 *)&static PortalComponent.Plane.positiveY, (__n128 *)algn_25519A110, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for negativeY()
{
  __int128 v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for negativeY);
  v3 = v0;
  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for negativeY);
  static PortalComponent.Plane.negativeY = v3;
  *(_OWORD *)algn_25519A130 = v2;
  return result;
}

double static PortalComponent.Plane.negativeY.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for negativeY, (__n128 *)&static PortalComponent.Plane.negativeY, (__n128 *)algn_25519A130, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for positiveZ()
{
  __int128 v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for positiveZ);
  v3 = v0;
  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for positiveZ);
  static PortalComponent.Plane.positiveZ = v3;
  *(_OWORD *)algn_25519A150 = v2;
  return result;
}

double static PortalComponent.Plane.positiveZ.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for positiveZ, (__n128 *)&static PortalComponent.Plane.positiveZ, (__n128 *)algn_25519A150, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for negativeZ()
{
  __int128 v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for negativeZ);
  v3 = v0;
  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for negativeZ);
  static PortalComponent.Plane.negativeZ = v3;
  *(_OWORD *)algn_25519A170 = v2;
  return result;
}

double static PortalComponent.Plane.negativeZ.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for negativeZ, (__n128 *)&static PortalComponent.Plane.negativeZ, (__n128 *)algn_25519A170, a1).n128_u64[0];
  return result;
}

__n128 static PortalComponent.Plane.positiveX.getter@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;
  __n128 v8;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  v8 = *a3;
  *a4 = *a2;
  a4[1] = v8;
  return result;
}

uint64_t PortalComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v36 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v35 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v8 = v1[2];
  v7 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v11 = *((_BYTE *)v1 + 48);
  v12 = v1[8];
  v13 = v1[9];
  v15 = v1[10];
  v14 = v1[11];
  v16 = *((_BYTE *)v1 + 96);
  v37 = v6;
  v38 = v8;
  v39 = v7;
  v40 = v9;
  v41 = v10;
  v42 = v11;
  v29 = v13;
  v30 = v12;
  v43 = v12;
  v44 = v13;
  v45 = v15;
  v46 = v14;
  v47 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_21BE50950;
  strcpy((char *)(v17 + 32), "targetEntity");
  *(_BYTE *)(v17 + 45) = 0;
  *(_WORD *)(v17 + 46) = -5120;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity?);
  v31 = v6;
  *(_QWORD *)(v17 + 48) = v6;
  *(_QWORD *)(v17 + 72) = v18;
  strcpy((char *)(v17 + 80), "clippingMode");
  *(_BYTE *)(v17 + 93) = 0;
  *(_WORD *)(v17 + 94) = -5120;
  *(_QWORD *)(v17 + 120) = &type metadata for PortalComponent.ClippingMode;
  v19 = swift_allocObject();
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  *(_QWORD *)(v17 + 96) = v19;
  if ((v11 & 1) == 0)
  {
    v20 = v8;
    v21 = v7;
    v22 = v9;
    v23 = v10;
  }
  *(_QWORD *)(v19 + 16) = v20;
  *(_QWORD *)(v19 + 24) = v21;
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v23;
  *(_BYTE *)(v19 + 48) = v11;
  strcpy((char *)(v17 + 128), "crossingMode");
  *(_BYTE *)(v17 + 141) = 0;
  *(_WORD *)(v17 + 142) = -5120;
  *(_QWORD *)(v17 + 168) = &type metadata for PortalComponent.CrossingMode;
  v24 = swift_allocObject();
  *(_QWORD *)(v17 + 144) = v24;
  if ((v16 & 1) != 0)
  {
    v25 = 0;
    v26 = 0;
    v15 = 0;
    v14 = 0;
  }
  else
  {
    v26 = v29;
    v25 = v30;
  }
  *(_QWORD *)(v24 + 16) = v25;
  *(_QWORD *)(v24 + 24) = v26;
  *(_QWORD *)(v24 + 32) = v15;
  *(_QWORD *)(v24 + 40) = v14;
  *(_BYTE *)(v24 + 48) = v16;
  v27 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v32, 1, 1, v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v35, *MEMORY[0x24BEE43C0], v34);
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL specialized static PortalComponent.Plane.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  BOOL v7;
  _BOOL8 result;
  float v9;
  float v10;
  uint64_t v11;
  BOOL v12;
  float v13;
  float v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = 0;
  v4 = *a1;
  v3 = a1[1];
  v6 = *a2;
  v5 = a2[1];
  while (1)
  {
    v17 = v4;
    v9 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v18 = v6;
    v10 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v7 = v9 == v10;
    if (v2 == 2)
      break;
    while (1)
    {
      ++v2;
      if (v7)
        break;
      v7 = 0;
      result = 0;
      if (v2 == 2)
        return result;
    }
  }
  if (v9 != v10)
    return 0;
  v11 = 0;
  while (1)
  {
    v15 = v3;
    v13 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v16 = v5;
    v14 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v12 = v13 == v14;
    if (v11 == 2)
      break;
    while (1)
    {
      ++v11;
      if (v12)
        break;
      if (v11 == 2)
        return 0;
      v12 = 0;
    }
  }
  return v13 == v14;
}

uint64_t sub_21BAE56AC()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PortalComponent.Options and conformance PortalComponent.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options;
  if (!lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PortalComponent.Options, &type metadata for PortalComponent.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options;
  if (!lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PortalComponent.Options, &type metadata for PortalComponent.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options;
  if (!lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PortalComponent.Options, &type metadata for PortalComponent.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options;
  if (!lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PortalComponent.Options, &type metadata for PortalComponent.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options);
  }
  return result;
}

uint64_t sub_21BAE57DC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

__int128 *sub_21BAE57F0(uint64_t a1)
{
  char v1;
  __int128 v2;
  __int128 v4[2];
  char v5;

  v1 = *(_BYTE *)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  v5 = v1;
  return PortalComponent.clippingPlane.setter(v4);
}

uint64_t sub_21BAE582C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __int128 v3;
  __int128 v4;

  v2 = *(_BYTE *)(result + 48);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *(_OWORD *)(result + 16);
    v4 = *(_OWORD *)(result + 32);
  }
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v2;
  return result;
}

__int128 *sub_21BAE584C(__int128 *result, uint64_t a2)
{
  char v2;
  __int128 v3;
  __int128 v4;

  v2 = *((_BYTE *)result + 32);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *result;
    v4 = result[1];
  }
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 48) = v2;
  return result;
}

uint64_t sub_21BAE586C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __int128 v3;
  __int128 v4;

  v2 = *(_BYTE *)(result + 96);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *(_OWORD *)(result + 64);
    v4 = *(_OWORD *)(result + 80);
  }
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v2;
  return result;
}

__int128 *sub_21BAE588C(__int128 *result, uint64_t a2)
{
  char v2;
  __int128 v3;
  __int128 v4;

  v2 = *((_BYTE *)result + 32);
  v3 = 0uLL;
  v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    v3 = *result;
    v4 = result[1];
  }
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 80) = v4;
  *(_BYTE *)(a2 + 96) = v2;
  return result;
}

uint64_t initializeWithCopy for PortalComponent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PortalComponent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  return a1;
}

__n128 __swift_memcpy97_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for PortalComponent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for PortalComponent(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 97))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PortalComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PortalComponent()
{
  return &type metadata for PortalComponent;
}

ValueMetadata *type metadata accessor for PortalComponent.ClippingPlane()
{
  return &type metadata for PortalComponent.ClippingPlane;
}

ValueMetadata *type metadata accessor for PortalComponent.Plane()
{
  return &type metadata for PortalComponent.Plane;
}

__n128 __swift_memcpy33_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PortalComponent.ClippingMode(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PortalComponent.ClippingMode(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for PortalComponent.ClippingMode(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for PortalComponent.ClippingMode(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    *(_BYTE *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PortalComponent.ClippingMode()
{
  return &type metadata for PortalComponent.ClippingMode;
}

ValueMetadata *type metadata accessor for PortalComponent.CrossingMode()
{
  return &type metadata for PortalComponent.CrossingMode;
}

ValueMetadata *type metadata accessor for PortalComponent.Options()
{
  return &type metadata for PortalComponent.Options;
}

ValueMetadata *type metadata accessor for PortalComponent._CrossingMode()
{
  return &type metadata for PortalComponent._CrossingMode;
}

ValueMetadata *type metadata accessor for PortalComponent._ClippingMode()
{
  return &type metadata for PortalComponent._ClippingMode;
}

_QWORD *assignWithCopy for PortalComponent.Target(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for PortalComponent.Target(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PortalComponent.Target()
{
  return &type metadata for PortalComponent.Target;
}

ValueMetadata *type metadata accessor for PortalComponent._Plane()
{
  return &type metadata for PortalComponent._Plane;
}

uint64_t one-time initialization function for __debugDescriptionCoreComponentTypeToName()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static Entity.__debugDescriptionCoreComponentTypeToName();
  static Entity.__debugDescriptionCoreComponentTypeToName = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static Entity.__debugDescriptionCoreComponentTypeToName()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  int v6;
  _BYTE v7[32];
  _QWORD v8[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(REComponentType, String)>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21BE5EC10;
  *(_QWORD *)(v0 + 40) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 48) = 0x800000021BE870A0;
  *(_DWORD *)(v0 + 56) = 3009;
  *(_QWORD *)(v0 + 64) = 0xD000000000000015;
  *(_QWORD *)(v0 + 72) = 0x800000021BE870C0;
  *(_DWORD *)(v0 + 80) = 63;
  *(_QWORD *)(v0 + 88) = 0xD000000000000012;
  *(_QWORD *)(v0 + 96) = 0x800000021BE870E0;
  *(_DWORD *)(v0 + 104) = 45;
  *(_QWORD *)(v0 + 112) = 0xD000000000000019;
  *(_QWORD *)(v0 + 120) = 0x800000021BE87100;
  *(_DWORD *)(v0 + 128) = 3013;
  *(_QWORD *)(v0 + 136) = 0xD000000000000017;
  *(_QWORD *)(v0 + 144) = 0x800000021BE87120;
  *(_DWORD *)(v0 + 32) = 4006;
  *(_DWORD *)(v0 + 152) = 42;
  *(_QWORD *)(v0 + 160) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 168) = 0x800000021BE87140;
  *(_DWORD *)(v0 + 176) = 3008;
  *(_QWORD *)(v0 + 184) = 0xD000000000000015;
  *(_QWORD *)(v0 + 192) = 0x800000021BE87160;
  *(_DWORD *)(v0 + 200) = 2100;
  *(_QWORD *)(v0 + 208) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 216) = 0x800000021BE87180;
  *(_DWORD *)(v0 + 224) = 2102;
  *(_QWORD *)(v0 + 232) = 0xD000000000000021;
  *(_QWORD *)(v0 + 240) = 0x800000021BE871A0;
  *(_DWORD *)(v0 + 248) = 57;
  *(_QWORD *)(v0 + 256) = 0xD000000000000012;
  *(_QWORD *)(v0 + 264) = 0x800000021BE871D0;
  *(_DWORD *)(v0 + 272) = 56;
  *(_QWORD *)(v0 + 280) = 0xD000000000000022;
  *(_QWORD *)(v0 + 288) = 0x800000021BE871F0;
  *(_DWORD *)(v0 + 296) = 49;
  *(_QWORD *)(v0 + 304) = 0xD000000000000019;
  *(_QWORD *)(v0 + 312) = 0x800000021BE87220;
  *(_DWORD *)(v0 + 320) = 76;
  *(_QWORD *)(v0 + 328) = 0xD000000000000022;
  *(_QWORD *)(v0 + 336) = 0x800000021BE87240;
  *(_DWORD *)(v0 + 344) = 2023;
  *(_QWORD *)(v0 + 352) = 0xD000000000000016;
  *(_QWORD *)(v0 + 360) = 0x800000021BE87270;
  *(_DWORD *)(v0 + 368) = 4009;
  *(_QWORD *)(v0 + 376) = 0xD000000000000018;
  *(_QWORD *)(v0 + 384) = 0x800000021BE87290;
  *(_DWORD *)(v0 + 392) = 3022;
  *(_QWORD *)(v0 + 400) = 0xD000000000000014;
  *(_QWORD *)(v0 + 408) = 0x800000021BE872B0;
  *(_DWORD *)(v0 + 416) = 5;
  *(_QWORD *)(v0 + 424) = 0xD000000000000018;
  *(_QWORD *)(v0 + 432) = 0x800000021BE872D0;
  *(_DWORD *)(v0 + 440) = 2028;
  *(_QWORD *)(v0 + 448) = 0xD000000000000020;
  *(_QWORD *)(v0 + 456) = 0x800000021BE872F0;
  type metadata accessor for REComponentType(0);
  v8[3] = v1;
  LODWORD(v8[0]) = 4010;
  outlined init with copy of Any((uint64_t)v8, (uint64_t)v7);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  *(_DWORD *)(v0 + 464) = v6;
  *(_QWORD *)(v0 + 472) = 0xD000000000000014;
  *(_QWORD *)(v0 + 480) = 0x800000021BE87320;
  *(_DWORD *)(v0 + 488) = 7;
  strcpy((char *)(v0 + 496), "ModelComponent");
  *(_BYTE *)(v0 + 511) = -18;
  *(_DWORD *)(v0 + 512) = 1006;
  *(_QWORD *)(v0 + 520) = 0xD00000000000001ALL;
  *(_QWORD *)(v0 + 528) = 0x800000021BE87340;
  *(_DWORD *)(v0 + 536) = 2018;
  *(_QWORD *)(v0 + 544) = 0xD000000000000017;
  *(_QWORD *)(v0 + 552) = 0x800000021BE87360;
  *(_DWORD *)(v0 + 560) = 2005;
  *(_QWORD *)(v0 + 568) = 0xD000000000000010;
  *(_QWORD *)(v0 + 576) = 0x800000021BE87380;
  *(_DWORD *)(v0 + 584) = 55;
  *(_QWORD *)(v0 + 592) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 600) = 0x800000021BE873A0;
  *(_DWORD *)(v0 + 608) = 3003;
  *(_QWORD *)(v0 + 616) = 0xD000000000000018;
  *(_QWORD *)(v0 + 624) = 0x800000021BE873C0;
  *(_DWORD *)(v0 + 632) = 54;
  *(_QWORD *)(v0 + 640) = 0xD00000000000001ALL;
  *(_QWORD *)(v0 + 648) = 0x800000021BE873E0;
  *(_DWORD *)(v0 + 656) = 22;
  *(_QWORD *)(v0 + 664) = 0xD000000000000014;
  *(_QWORD *)(v0 + 672) = 0x800000021BE87400;
  *(_DWORD *)(v0 + 680) = 4012;
  *(_QWORD *)(v0 + 688) = 0xD000000000000016;
  *(_QWORD *)(v0 + 696) = 0x800000021BE87420;
  *(_DWORD *)(v0 + 704) = 58;
  *(_QWORD *)(v0 + 712) = 0xD000000000000016;
  *(_QWORD *)(v0 + 720) = 0x800000021BE87440;
  *(_DWORD *)(v0 + 728) = 4005;
  *(_QWORD *)(v0 + 736) = 0xD00000000000001ALL;
  *(_QWORD *)(v0 + 744) = 0x800000021BE87460;
  *(_DWORD *)(v0 + 752) = 51;
  *(_QWORD *)(v0 + 760) = 0xD000000000000013;
  *(_QWORD *)(v0 + 768) = 0x800000021BE87480;
  *(_DWORD *)(v0 + 776) = 75;
  *(_QWORD *)(v0 + 784) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 792) = 0x800000021BE874A0;
  *(_DWORD *)(v0 + 800) = 1008;
  *(_QWORD *)(v0 + 808) = 0x6F436C6174726F50;
  *(_QWORD *)(v0 + 816) = 0xEF746E656E6F706DLL;
  *(_DWORD *)(v0 + 824) = 46;
  *(_QWORD *)(v0 + 832) = 0xD000000000000019;
  *(_QWORD *)(v0 + 840) = 0x800000021BE874C0;
  *(_DWORD *)(v0 + 848) = 3010;
  *(_QWORD *)(v0 + 856) = 0xD000000000000015;
  *(_QWORD *)(v0 + 864) = 0x800000021BE874E0;
  *(_DWORD *)(v0 + 872) = 50;
  *(_QWORD *)(v0 + 880) = 0xD000000000000012;
  *(_QWORD *)(v0 + 888) = 0x800000021BE87500;
  *(_DWORD *)(v0 + 896) = 77;
  *(_QWORD *)(v0 + 904) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 912) = 0x800000021BE87520;
  *(_DWORD *)(v0 + 920) = 9;
  *(_QWORD *)(v0 + 928) = 0xD000000000000018;
  *(_QWORD *)(v0 + 936) = 0x800000021BE87540;
  *(_DWORD *)(v0 + 944) = 28;
  *(_QWORD *)(v0 + 952) = 0x726F66736E617254;
  *(_QWORD *)(v0 + 960) = 0xE90000000000006DLL;
  *(_DWORD *)(v0 + 968) = 2003;
  strcpy((char *)(v0 + 976), "VFXComponent");
  *(_BYTE *)(v0 + 989) = 0;
  *(_WORD *)(v0 + 990) = -5120;
  *(_DWORD *)(v0 + 992) = 1004;
  strcpy((char *)(v0 + 1000), "VideoComponent");
  *(_BYTE *)(v0 + 1015) = -18;
  *(_DWORD *)(v0 + 1016) = 3020;
  *(_QWORD *)(v0 + 1024) = 0xD000000000000014;
  *(_QWORD *)(v0 + 1032) = 0x800000021BE87560;
  *(_DWORD *)(v0 + 1040) = 1009;
  strcpy((char *)(v0 + 1048), "WorldComponent");
  *(_BYTE *)(v0 + 1063) = -18;
  *(_DWORD *)(v0 + 1064) = 53;
  *(_QWORD *)(v0 + 1072) = 0x776F64616853;
  *(_QWORD *)(v0 + 1080) = 0xE600000000000000;
  v2 = specialized Dictionary.init(dictionaryLiteral:)(v0);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (REComponentType, String));
  swift_arrayDestroy();
  swift_deallocClassInstance();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8[0] = v2;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000016, 0x800000021BE87580, 69, isUniquelyReferenced_nonNull_native);
  v4 = v8[0];
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t one-time initialization function for __arCoreComponentTypeToName()
{
  unint64_t v0;
  uint64_t result;

  v0 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for __arCoreComponentTypeToName);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (REComponentType, String));
  result = swift_arrayDestroy();
  static Entity.__arCoreComponentTypeToName = v0;
  return result;
}

uint64_t Entity.debugDescription.getter()
{
  return Entity.debugDescriptionRecursive(indent:)(0);
}

uint64_t Entity.debugDescriptionRecursive(indent:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t ComponentCount;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt ComponentAtIndex;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  void *v35;
  uint64_t v36;
  Swift::UInt Component;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t *v52;
  void *v53;
  uint64_t v54;
  Swift::UInt v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v69;
  _QWORD v70[2];

  v2 = MEMORY[0x220768DEC](32, 0xE100000000000000, a1);
  v4 = v3;
  if (REEntityGetChildCount())
  {
    strcpy((char *)v70, ", children: ");
    BYTE5(v70[1]) = 0;
    HIWORD(v70[1]) = -5120;
    swift_retain();
    result = REEntityGetChildCount();
    if (result < 0)
    {
      __break(1u);
LABEL_91:
      __break(1u);
      return result;
    }
    v6 = result;
    if (result)
    {
      v7 = 0;
      while (v7 < REEntityGetChildCount())
      {
        if (v6 == ++v7)
          goto LABEL_7;
      }
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
LABEL_7:
    swift_release();
    v69._countAndFlagsBits = v6;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v10 = v70[0];
    v9 = (void *)v70[1];
  }
  else
  {
    v10 = 0;
    v9 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70[0] = v2;
  v70[1] = v4;
  v11._countAndFlagsBits = 0x2720BF96E2;
  v11._object = (void *)0xA500000000000000;
  String.append(_:)(v11);
  REEntityGetName();
  v12._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 540680231;
  v13._object = (void *)0xE400000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = v10;
  v15._object = v9;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 10;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v69._countAndFlagsBits = v2;
  v69._object = v4;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 0x909FE22020;
  v17._object = (void *)0xA500000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v68 = v2;
  ComponentCount = REEntityGetComponentCount();
  if ((ComponentCount & 0x8000000000000000) == 0)
  {
    v19 = ComponentCount;
    if (ComponentCount)
    {
      v20 = 0;
      do
      {
        v21 = v20 + 1;
        ComponentAtIndex = REEntityGetComponentAtIndex();
        specialized Set._Variant.insert(_:)((Swift::UInt *)&v69, ComponentAtIndex);
        v20 = v21;
      }
      while (v19 != v21);
    }
    v65 = a1;
    if (one-time initialization token for __debugDescriptionCoreComponentTypeToName == -1)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  swift_once();
LABEL_14:
  v23 = static Entity.__debugDescriptionCoreComponentTypeToName;
  v66 = static Entity.__debugDescriptionCoreComponentTypeToName + 64;
  v24 = 1 << *(_BYTE *)(static Entity.__debugDescriptionCoreComponentTypeToName + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(static Entity.__debugDescriptionCoreComponentTypeToName + 64);
  v27 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain();
  v28 = 0;
  while (1)
  {
    if (v26)
    {
      v29 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v30 = v29 | (v28 << 6);
      goto LABEL_34;
    }
    v31 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    if (v31 >= v27)
      goto LABEL_36;
    v32 = *(_QWORD *)(v66 + 8 * v31);
    ++v28;
    if (!v32)
    {
      v28 = v31 + 1;
      if (v31 + 1 >= v27)
        goto LABEL_36;
      v32 = *(_QWORD *)(v66 + 8 * v28);
      if (!v32)
      {
        v28 = v31 + 2;
        if (v31 + 2 >= v27)
          goto LABEL_36;
        v32 = *(_QWORD *)(v66 + 8 * v28);
        if (!v32)
          break;
      }
    }
LABEL_33:
    v26 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v28 << 6);
LABEL_34:
    v34 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v30);
    v36 = *v34;
    v35 = (void *)v34[1];
    swift_bridgeObjectRetain();
    Component = REEntityGetComponent();
    if (Component)
    {
      specialized Set._Variant.remove(_:)(Component);
      v69._countAndFlagsBits = v68;
      v69._object = v4;
      swift_bridgeObjectRetain();
      v38._countAndFlagsBits = 32;
      v38._object = (void *)0xE100000000000000;
      String.append(_:)(v38);
      v39._countAndFlagsBits = v36;
      v39._object = v35;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = 10;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      String.append(_:)(v69);
    }
    swift_bridgeObjectRelease();
  }
  v33 = v31 + 3;
  if (v33 < v27)
  {
    v32 = *(_QWORD *)(v66 + 8 * v33);
    if (!v32)
    {
      while (1)
      {
        v28 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_85;
        if (v28 >= v27)
          goto LABEL_36;
        v32 = *(_QWORD *)(v66 + 8 * v28);
        ++v33;
        if (v32)
          goto LABEL_33;
      }
    }
    v28 = v33;
    goto LABEL_33;
  }
LABEL_36:
  swift_release();
  if (one-time initialization token for __arCoreComponentTypeToName != -1)
    swift_once();
  v41 = static Entity.__arCoreComponentTypeToName;
  v67 = static Entity.__arCoreComponentTypeToName + 64;
  v42 = 1 << *(_BYTE *)(static Entity.__arCoreComponentTypeToName + 32);
  v43 = -1;
  if (v42 < 64)
    v43 = ~(-1 << v42);
  v44 = v43 & *(_QWORD *)(static Entity.__arCoreComponentTypeToName + 64);
  v45 = (unint64_t)(v42 + 63) >> 6;
  swift_bridgeObjectRetain();
  v46 = 0;
  while (2)
  {
    if (v44)
    {
      v47 = __clz(__rbit64(v44));
      v44 &= v44 - 1;
      v48 = v47 | (v46 << 6);
LABEL_58:
      v52 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 16 * v48);
      v54 = *v52;
      v53 = (void *)v52[1];
      swift_bridgeObjectRetain();
      v55 = REEntityGetComponent();
      if (v55)
      {
        specialized Set._Variant.remove(_:)(v55);
        v69._countAndFlagsBits = v68;
        v69._object = v4;
        swift_bridgeObjectRetain();
        v56._countAndFlagsBits = 32;
        v56._object = (void *)0xE100000000000000;
        String.append(_:)(v56);
        v57._countAndFlagsBits = v54;
        v57._object = v53;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._countAndFlagsBits = 10;
        v58._object = (void *)0xE100000000000000;
        String.append(_:)(v58);
        String.append(_:)(v69);
      }
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  v49 = v46 + 1;
  if (__OFADD__(v46, 1))
    goto LABEL_80;
  if (v49 < v45)
  {
    v50 = *(_QWORD *)(v67 + 8 * v49);
    ++v46;
    if (!v50)
    {
      v46 = v49 + 1;
      if (v49 + 1 >= v45)
        goto LABEL_60;
      v50 = *(_QWORD *)(v67 + 8 * v46);
      if (!v50)
      {
        v46 = v49 + 2;
        if (v49 + 2 >= v45)
          goto LABEL_60;
        v50 = *(_QWORD *)(v67 + 8 * v46);
        if (!v50)
        {
          v51 = v49 + 3;
          if (v51 >= v45)
            goto LABEL_60;
          v50 = *(_QWORD *)(v67 + 8 * v51);
          if (!v50)
          {
            while (1)
            {
              v46 = v51 + 1;
              if (__OFADD__(v51, 1))
                goto LABEL_86;
              if (v46 >= v45)
                goto LABEL_60;
              v50 = *(_QWORD *)(v67 + 8 * v46);
              ++v51;
              if (v50)
                goto LABEL_57;
            }
          }
          v46 = v51;
        }
      }
    }
LABEL_57:
    v44 = (v50 - 1) & v50;
    v48 = __clz(__rbit64(v50)) + (v46 << 6);
    goto LABEL_58;
  }
LABEL_60:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (REEntityGetChildCount())
  {
    swift_retain();
    if (REEntityGetChildCount() >= 1)
    {
      v4 = 0;
      v59 = __OFADD__(v65, 2);
      while ((uint64_t)v4 < REEntityGetChildCount())
      {
        result = REEntityGetChild();
        if (!result)
          goto LABEL_91;
        v60 = result;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
            goto LABEL_87;
          v61 = specialized static Entity.entityInfoType(_:)();
          if (v61)
          {
            v62 = (*(uint64_t (**)(void))(v61 + 232))();
            v63 = *(_QWORD *)(v62 + 16);
            swift_retain();
            MEMORY[0x22076D160](v63, 0);
            *(_QWORD *)(v62 + 16) = v60;
            MEMORY[0x22076D160](v60, v62);
            swift_release();
          }
          else
          {
            makeEntity(for:)(v60);
          }
        }
        if ((uint64_t)v4 >= REEntityGetChildCount())
          goto LABEL_83;
        if (v59)
          goto LABEL_84;
        ++v4;
        v64._countAndFlagsBits = Entity.debugDescriptionRecursive(indent:)(v65 + 2);
        String.append(_:)(v64);
        swift_release();
        swift_bridgeObjectRelease();
        if ((uint64_t)v4 >= REEntityGetChildCount())
          goto LABEL_77;
      }
      goto LABEL_82;
    }
LABEL_77:
    swift_release();
  }
  return v70[0];
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Entity()
{
  return Entity.debugDescriptionRecursive(indent:)(0);
}

uint64_t Entity.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t LocalId;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v8 + 32) = 25705;
  *(_QWORD *)(v8 + 40) = 0xE200000000000000;
  swift_retain();
  LocalId = REEntityGetLocalId();
  v10 = MEMORY[0x24BEE4568];
  *(_QWORD *)(v8 + 48) = LocalId;
  *(_QWORD *)(v8 + 72) = v10;
  *(_QWORD *)(v8 + 80) = 1701667182;
  *(_QWORD *)(v8 + 88) = 0xE400000000000000;
  REEntityGetName();
  v11 = String.init(cString:)();
  v12 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 104) = v13;
  *(_QWORD *)(v8 + 120) = v12;
  *(_QWORD *)(v8 + 128) = 0x6E656E6F706D6F63;
  *(_QWORD *)(v8 + 136) = 0xEA00000000007374;
  *(_QWORD *)(v8 + 144) = v0;
  *(_QWORD *)(v8 + 168) = &type metadata for Entity.ComponentSet;
  *(_QWORD *)(v8 + 176) = 0x6E6572646C696863;
  *(_QWORD *)(v8 + 216) = &type metadata for Entity.ChildCollection;
  *(_QWORD *)(v8 + 184) = 0xE800000000000000;
  *(_QWORD *)(v8 + 192) = v0;
  v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  type metadata accessor for Entity();
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Entity()
{
  return Entity.customMirror.getter();
}

uint64_t Entity.ComponentSet.customMirror.getter()
{
  return Entity.ComponentSet.customMirror.getter(specialized _copyCollectionToContiguousArray<A>(_:), &demangling cache variable for type metadata for [Component], &lazy protocol witness table cache variable for type [Component] and conformance [A], (uint64_t)&type metadata for Entity.ComponentSet);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ComponentSet(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ComponentSet(a1, a2, specialized _copyCollectionToContiguousArray<A>(_:), &demangling cache variable for type metadata for [Component], &lazy protocol witness table cache variable for type [Component] and conformance [A]);
}

uint64_t Entity.ChildCollection.customMirror.getter()
{
  return Entity.ComponentSet.customMirror.getter(specialized _copyCollectionToContiguousArray<A>(_:), &demangling cache variable for type metadata for [Entity], &lazy protocol witness table cache variable for type [Entity] and conformance [A], (uint64_t)&type metadata for Entity.ChildCollection);
}

uint64_t Entity.ComponentSet.customMirror.getter(uint64_t (*a1)(uint64_t), uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];

  v20[1] = a4;
  v8 = type metadata accessor for Mirror.AncestorRepresentation();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[3] = *v4;
  v15 = swift_retain();
  v20[2] = a1(v15);
  v16 = *MEMORY[0x24BEE4368];
  v17 = type metadata accessor for Mirror.DisplayStyle();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v14, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE43C0], v8);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  lazy protocol witness table accessor for type [Component] and conformance [A](a3, a2);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ChildCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ComponentSet(a1, a2, specialized _copyCollectionToContiguousArray<A>(_:), &demangling cache variable for type metadata for [Entity], &lazy protocol witness table cache variable for type [Entity] and conformance [A]);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ComponentSet(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[4];

  v21[1] = a1;
  v9 = type metadata accessor for Mirror.AncestorRepresentation();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[3] = *v5;
  v16 = swift_retain();
  v21[2] = a3(v16);
  v17 = *MEMORY[0x24BEE4368];
  v18 = type metadata accessor for Mirror.DisplayStyle();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v15, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BEE43C0], v9);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  lazy protocol witness table accessor for type [Component] and conformance [A](a5, a4);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t lazy protocol witness table accessor for type [Component] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity and conformance Entity()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Entity and conformance Entity;
  if (!lazy protocol witness table cache variable for type Entity and conformance Entity)
  {
    v1 = type metadata accessor for Entity();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Entity and conformance Entity;
  if (!lazy protocol witness table cache variable for type Entity and conformance Entity)
  {
    v1 = type metadata accessor for Entity();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity);
  }
  return result;
}

void __RKEntityUUIDComponent.didAdd(componentRef:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Entity;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t SceneNullable;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  void *object;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD v40[4];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  unint64_t v50;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    Entity = REComponentGetEntity();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v9 = swift_dynamicCastClassUnconditional();
      goto LABEL_4;
    }
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      v11 = specialized static Entity.entityInfoType(_:)();
      if (v11)
      {
        v10 = (*(uint64_t (**)(void))(v11 + 232))();
        v12 = *(_QWORD *)(v10 + 16);
        swift_retain();
        MEMORY[0x22076D160](v12, 0);
        *(_QWORD *)(v10 + 16) = Entity;
        MEMORY[0x22076D160](Entity, v10);
        swift_release();
LABEL_8:
        swift_release();
        *(_QWORD *)(v2 + 16) = v10;
        v49 = 91;
        v50 = 0xE100000000000000;
        v46._countAndFlagsBits = 0;
        v46._object = (void *)0xE000000000000000;
        v48._countAndFlagsBits = v10;
        swift_retain();
        _print_unlocked<A, B>(_:_:)();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v13._countAndFlagsBits = 8285;
        v13._object = (void *)0xE200000000000000;
        String.append(_:)(v13);
        v14._countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = 8250;
        v15._object = (void *)0xE200000000000000;
        String.append(_:)(v15);
        swift_release();
        v17 = v49;
        v16 = (void *)v50;
        v18 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v18, &v49);
        SceneNullable = REEntityGetSceneNullable();
        if (SceneNullable)
        {
          v20 = SceneNullable;
          v21 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v21)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            swift_allocObject();
            Scene.init(coreScene:)(v20);
          }
          v22 = Scene.__interactionService.getter();
          swift_release();
          type metadata accessor for __RKEntityInteractionManager();
          v23 = swift_dynamicCastClass();
          if (v23)
          {
            v24 = v23;
            swift_beginAccess();
            v25 = *(_QWORD *)(v24 + 40);
            v26 = *(unsigned __int8 *)(v2 + 7);
            v44 = v16;
            v45 = v17;
            v40[2] = *(unsigned __int8 *)(v2 + 6);
            v40[3] = v26;
            v42 = v5;
            v43 = v4;
            v41 = v22;
            swift_retain();
            UUID.init(uuid:)();
            v46._countAndFlagsBits = 91;
            v46._object = (void *)0xE100000000000000;
            v48._countAndFlagsBits = 0;
            v48._object = (void *)0xE000000000000000;
            v47 = v25;
            swift_retain();
            _print_unlocked<A, B>(_:_:)();
            String.append(_:)(v48);
            swift_bridgeObjectRelease();
            v27._countAndFlagsBits = 8285;
            v27._object = (void *)0xE200000000000000;
            String.append(_:)(v27);
            v28._countAndFlagsBits = StaticString.description.getter();
            String.append(_:)(v28);
            swift_bridgeObjectRelease();
            v29._countAndFlagsBits = 8250;
            v29._object = (void *)0xE200000000000000;
            String.append(_:)(v29);
            v30 = swift_release();
            object = v46._object;
            MEMORY[0x24BDAC7A8](v30);
            v38 = (unint64_t)v7;
            v39 = v10;
            v46._countAndFlagsBits = v32;
            v46._object = object;
            swift_retain();
            v33 = static os_log_type_t.debug.getter();
            specialized InteractionsLogger.log(_:_:)(v33, &v46, partial apply for implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:), &v40[-8]);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v48._countAndFlagsBits = *(_QWORD *)(v25 + 16);
            *(_QWORD *)(v25 + 16) = 0x8000000000000000;
            specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v10, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
            *(_QWORD *)(v25 + 16) = v48._countAndFlagsBits;
            swift_bridgeObjectRelease();
            swift_endAccess();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v43);
            v46._countAndFlagsBits = v45;
            v46._object = v44;
            v35 = static os_log_type_t.debug.getter();
            specialized InteractionsLogger.log(_:_:)(v35, &v46);
LABEL_16:
            swift_bridgeObjectRelease();
            return;
          }
          SceneNullable = swift_unknownObjectRelease();
        }
        MEMORY[0x24BDAC7A8](SceneNullable);
        v38 = 0xD000000000000072;
        v39 = 0x800000021BE876D0;
        v49 = v17;
        v50 = (unint64_t)v16;
        v36 = static os_log_type_t.error.getter();
        specialized InteractionsLogger.log(_:_:)(v36, &v49, protocol witness for CodingKey.stringValue.getter in conformance UnkeyedEC.IndexedCodingKey, &v40[-8]);
        v49 = v17;
        v50 = (unint64_t)v16;
        v37 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v37, &v49);
        goto LABEL_16;
      }
      v9 = makeEntity(for:)(Entity);
LABEL_4:
      v10 = v9;
      goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #1 in SyncInfoContext.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Object;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v27[2];
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SyncInfoContext.Buffer();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v27 - v12;
  Object = RECustomComponentGetObject();
  if (!Object)
    return 0;
  v31 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v9;
  v28 = v10;
  v29 = v13;
  v33 = v6;
  v34 = v5;
  v30 = a4;
  v15 = v8;
  v16 = *(unsigned __int8 *)(Object + 5);
  v17 = *(unsigned __int8 *)(Object + 3);
  v18 = *(unsigned __int8 *)(Object + 1);
  v27[1] = *(_QWORD *)(Object + 16);
  swift_retain();
  UUID.init(uuid:)();
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    LOBYTE(v20) = 10;
    v18 = v33;
    v16 = v34;
    v17 = (uint64_t)v31;
    v15 = (char *)v32;
    goto LABEL_8;
  }
  if ((Character._isSingleScalar.getter() & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v19 = specialized Collection.first.getter(0x49uLL, 0xE100000000000000);
  if ((v19 & 0x100000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v18 = v33;
  v16 = v34;
  v17 = (uint64_t)v31;
  v15 = (char *)v32;
  if ((v19 & 0xFFFFFF80) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v20 = specialized Collection.first.getter(0x49uLL, 0xE100000000000000);
  if ((v20 & 0x100000000) != 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((v20 & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
LABEL_8:
  *(_BYTE *)v17 = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v17 + *((int *)v15 + 5), v8, v16);
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_22:
    v23 = 10;
    goto LABEL_14;
  }
  if ((Character._isSingleScalar.getter() & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v21 = specialized Collection.first.getter(0x45uLL, 0xE100000000000000);
  if ((v21 & 0x100000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((v21 & 0xFFFFFF80) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  v22 = specialized Collection.first.getter(0x45uLL, 0xE100000000000000);
  if ((v22 & 0x100000000) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v23 = v22;
  if ((v22 & 0xFFFFFF00) != 0)
    goto LABEL_26;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v16);
  *(_BYTE *)(v17 + *((int *)v15 + 6)) = v23;
  v24 = (uint64_t)v29;
  outlined init with take of SyncInfoContext.Buffer(v17, (uint64_t)v29);
  if ((v28 & 0x8000000000000000) == 0 && !HIDWORD(v28))
  {
    v25 = RENetSyncBufferWrite();
    swift_release();
    outlined destroy of SyncInfoContext.Buffer(v24);
    return v25;
  }
LABEL_31:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in SyncInfoContext.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  int v15;
  uint64_t v16;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SyncInfoContext.Buffer();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12 > a5)
    return 0;
  result = RECustomComponentGetObject();
  if (!result)
    return result;
  v15 = *a4;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if ((Character._isSingleScalar.getter() & 1) != 0)
    {
      result = specialized Collection.first.getter(0x49uLL, 0xE100000000000000);
      if ((result & 0x100000000) != 0)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if ((result & 0xFFFFFF80) == 0)
      {
        result = specialized Collection.first.getter(0x49uLL, 0xE100000000000000);
        if ((result & 0x100000000) != 0)
        {
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if ((result & 0xFFFFFF00) == 0)
        {
          if (v15 == result)
            goto LABEL_10;
          return 0;
        }
LABEL_22:
        __break(1u);
LABEL_23:
        if (v15 == 10)
          goto LABEL_17;
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  if (v15 == 10)
  {
LABEL_10:
    v15 = a4[*(int *)(v11 + 24)];
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      result = Character._isSingleScalar.getter();
      if ((result & 1) != 0)
      {
        result = specialized Collection.first.getter(0x45uLL, 0xE100000000000000);
        if ((result & 0x100000000) != 0)
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        if ((result & 0xFFFFFF80) == 0)
        {
          result = specialized Collection.first.getter(0x45uLL, 0xE100000000000000);
          if ((result & 0x100000000) != 0)
          {
LABEL_32:
            __break(1u);
            return result;
          }
          if ((result & 0xFFFFFF00) == 0)
          {
            if (v15 == result)
            {
LABEL_17:
              outlined init with copy of SyncInfoContext.Buffer((uint64_t)a4, (uint64_t)v13);
              (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, &v13[*(int *)(v11 + 20)], v7);
              __RKEntityUUIDComponent.uuid.setter((uint64_t)v10);
              return 1;
            }
            return 0;
          }
          goto LABEL_28;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    goto LABEL_23;
  }
  return 0;
}

uint64_t __RKEntityUUIDComponent.uuid.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t SceneNullable;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  void (*v38)(uint64_t, uint64_t);
  _QWORD v40[3];
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  Swift::String v44;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuid:)();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    *(_QWORD *)v1 = UUID.uuid.getter();
    *(_BYTE *)(v1 + 8) = v7;
    *(_BYTE *)(v1 + 9) = v8;
    *(_BYTE *)(v1 + 10) = v9;
    *(_BYTE *)(v1 + 11) = v10;
    *(_BYTE *)(v1 + 12) = v11;
    *(_BYTE *)(v1 + 13) = v12;
    *(_BYTE *)(v1 + 14) = v13;
    *(_BYTE *)(v1 + 15) = v14;
    v15 = *(_QWORD *)(v1 + 16);
    if (v15)
    {
      swift_retain();
      SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        v17 = SceneNullable;
        v18 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v18)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(v17);
        }
        v19 = Scene.__interactionService.getter();
        swift_release();
        type metadata accessor for __RKEntityInteractionManager();
        v20 = swift_dynamicCastClass();
        if (!v20)
        {
          swift_release();
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        v21 = v20;
        swift_beginAccess();
        v22 = *(_QWORD *)(v21 + 40);
        v41 = 91;
        v42 = 0xE100000000000000;
        v44._countAndFlagsBits = 0;
        v44._object = (void *)0xE000000000000000;
        v43 = v22;
        swift_retain_n();
        swift_unknownObjectRetain();
        _print_unlocked<A, B>(_:_:)();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 8285;
        v23._object = (void *)0xE200000000000000;
        String.append(_:)(v23);
        v24._countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._countAndFlagsBits = 8250;
        v25._object = (void *)0xE200000000000000;
        String.append(_:)(v25);
        v26 = swift_release();
        v27 = v42;
        MEMORY[0x24BDAC7A8](v26);
        v41 = v28;
        v42 = v27;
        v29 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v29, &v41, implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:)partial apply, &v40[-4]);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v40[2] = specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v6);
        swift_endAccess();
        v41 = 91;
        v42 = 0xE100000000000000;
        v44._countAndFlagsBits = 0;
        v44._object = (void *)0xE000000000000000;
        v43 = v22;
        swift_retain();
        swift_retain();
        _print_unlocked<A, B>(_:_:)();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v30._countAndFlagsBits = 8285;
        v30._object = (void *)0xE200000000000000;
        String.append(_:)(v30);
        v31._countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._countAndFlagsBits = 8250;
        v32._object = (void *)0xE200000000000000;
        String.append(_:)(v32);
        v33 = swift_release();
        v40[1] = v19;
        v34 = v42;
        MEMORY[0x24BDAC7A8](v33);
        v41 = v35;
        v42 = v34;
        swift_retain();
        v36 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v36, &v41, implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:)partial apply, &v40[-4]);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v44._countAndFlagsBits = *(_QWORD *)(v22 + 16);
        *(_QWORD *)(v22 + 16) = 0x8000000000000000;
        specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v15, a1, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v22 + 16) = v44._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        swift_unknownObjectRelease_n();
        swift_release_n();
        swift_release();
      }
      swift_release();
    }
  }
LABEL_12:
  v38 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v38(a1, v3);
  return ((uint64_t (*)(char *, uint64_t))v38)(v6, v3);
}

uint64_t __RKEntityUUIDComponent.Registration.componentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t __RKEntityUUIDComponent.Registration.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *(*v10)();
  uint64_t (*v11)();
  void (*v12)(uint64_t);
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberCStyleArrayDataTypeWithTag(), (v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    type metadata accessor for __RKEntityUUIDComponent.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  v2 = v1;
  *(_QWORD *)(v0 + 16) = v1;
  v3 = (_QWORD *)swift_slowAlloc();
  *v3 = closure #1 in SyncInfoContext.init(_:);
  v3[1] = 0;
  v3[2] = closure #2 in SyncInfoContext.init(_:);
  v3[3] = 0;
  v18 = 48;
  v19 = 1;
  v21 = @objc writeCallback(syncInfoContextRawPointer:entity:component:componentType:outBuffer:);
  v22 = @objc readCallback(syncInfoContextRawPointer:entity:component:componentType:snapshotBuffer:snapshotBufferLen:);
  v20 = v3;
  v23 = 1;
  v6 = xmmword_21BE5ECF0;
  v7 = 2;
  v8 = &v6;
  v9 = 0;
  v10 = @objc createEntityUUIDComponentObject(componentType:);
  v11 = @objc destroyEntityUUIDComponentObject(componentType:rawPointer:);
  v12 = @objc didAddEntityUUIDComponentObject(componentRef:);
  v13 = @objc willRemoveEntityUUIDComponentObject(componentRef:);
  v14 = 0;
  v15 = 0;
  v16 = v2;
  v17 = &v18;
  v4 = RECustomComponentTypeCreate();
  if (!v4)
  {
    lazy protocol witness table accessor for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  *(_QWORD *)(v0 + 24) = v4;
  REStructBuilderDestroy();
  return v0;
}

uint64_t @objc writeCallback(syncInfoContextRawPointer:entity:component:componentType:outBuffer:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v10;

  if (a1)
  {
    v9 = *a1;
    swift_retain();
    swift_retain();
    v10 = v9(a2, a3, a4, a5);
    swift_release();
    swift_release();
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t @objc readCallback(syncInfoContextRawPointer:entity:component:componentType:snapshotBuffer:snapshotBufferLen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v12;

  if (a1)
  {
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16);
    swift_retain();
    swift_retain();
    v12 = v11(a2, a3, a4, a5, a6);
    swift_release();
    swift_release();
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

_QWORD *@objc createEntityUUIDComponentObject(componentType:)()
{
  _QWORD *result;

  result = (_QWORD *)RECIntrospectionAlloc();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t @objc destroyEntityUUIDComponentObject(componentType:rawPointer:)()
{
  swift_arrayDestroy();
  return RECIntrospectionFree();
}

void @objc didAddEntityUUIDComponentObject(componentRef:)(uint64_t a1)
{
  if (RECustomComponentGetObject())
    __RKEntityUUIDComponent.didAdd(componentRef:)(a1);
}

uint64_t @objc willRemoveEntityUUIDComponentObject(componentRef:)()
{
  uint64_t result;

  result = RECustomComponentGetObject();
  if (result)
    return specialized __RKEntityUUIDComponent.willRemove(componentRef:)();
  return result;
}

uint64_t __RKEntityUUIDComponent.Registration.deinit()
{
  uint64_t v0;

  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKEntityUUIDComponent.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return swift_deallocClassInstance();
}

uint64_t static __RKEntityUUIDComponent.registration.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static __RKEntityUUIDComponent.registration.setter(void *a1)
{
  swift_beginAccess();
  static __RKEntityUUIDComponent.registration = a1;
  return swift_release();
}

uint64_t (*static __RKEntityUUIDComponent.registration.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Entity.__interactionIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    v2 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
  }
  else
  {
    v4 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
}

uint64_t key path setter for Entity.__interactionIdentifier : Entity(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v4);
  return Entity.__interactionIdentifier.setter((uint64_t)v4);
}

uint64_t Entity.__interactionIdentifier.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - v11;
  v13 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration)
  {
    v14 = *((_QWORD *)static __RKEntityUUIDComponent.registration + 3);
    outlined init with copy of UUID?(a1, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      outlined destroy of UUID?((uint64_t)v5);
      if (REEntityGetCustomComponent())
        REEntityRemoveComponentByClass();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      if ((REEntityGetCustomComponent() || MEMORY[0x22076CF2C](v13, v14)) && RECustomComponentGetObject())
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
        __RKEntityUUIDComponent.uuid.setter((uint64_t)v10);
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
  }
  return outlined destroy of UUID?(a1);
}

void (*Entity.__interactionIdentifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                             - 8)
                 + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    v6 = type metadata accessor for UUID();
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  }
  return Entity.__interactionIdentifier.modify;
}

void Entity.__interactionIdentifier.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of UUID?((uint64_t)v4, (uint64_t)v3);
    Entity.__interactionIdentifier.setter((uint64_t)v3);
    outlined destroy of UUID?((uint64_t)v4);
  }
  else
  {
    Entity.__interactionIdentifier.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t __EntityRef.__validInteractionIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  v9 = *v1;
  swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    v10 = type metadata accessor for UUID();
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  else
  {
    v10 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  }
  outlined destroy of UUID?((uint64_t)v8);
  UUID.init()();
  type metadata accessor for UUID();
  v13 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v5, a1, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v5, 0, 1, v10);
  specialized static __RKEntityUUIDComponent.setUUID(_:on:)((uint64_t)v5, v9);
  return outlined destroy of UUID?((uint64_t)v5);
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t specialized __RKEntityUUIDComponent.willRemove(componentRef:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t SceneNullable;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 16);
  v47 = 91;
  v48 = 0xE100000000000000;
  if (v6)
  {
    v43 = 0;
    v44 = 0xE000000000000000;
    v46._countAndFlagsBits = v6;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v7 = v43;
    v8 = v44;
  }
  else
  {
    v8 = 0xE300000000000000;
    v7 = 7104878;
  }
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_release();
  v14 = v47;
  v13 = v48;
  v15 = static os_log_type_t.debug.getter();
  v16 = specialized InteractionsLogger.log(_:_:)(v15, &v47);
  if (!v6)
    goto LABEL_13;
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    v16 = swift_release();
LABEL_13:
    *(_QWORD *)(v1 + 16) = 0;
    MEMORY[0x24BDAC7A8](v16);
    v36 = 0xD000000000000072;
    v37 = 0x800000021BE87610;
    v47 = v14;
    v48 = v13;
    v34 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v34, &v47, protocol witness for CodingKey.stringValue.getter in conformance UnkeyedDC.IndexedCodingKey, &v38[-8]);
    v47 = v14;
    v48 = v13;
    v32 = static os_log_type_t.debug.getter();
    v33 = &v47;
    goto LABEL_14;
  }
  v18 = SceneNullable;
  v19 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v19)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v18);
  }
  v20 = Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_release();
    v16 = swift_unknownObjectRelease();
    goto LABEL_13;
  }
  v22 = v21;
  swift_beginAccess();
  v23 = *(_QWORD *)(v22 + 40);
  v24 = *(unsigned __int8 *)(v1 + 7);
  v38[4] = *(unsigned __int8 *)(v1 + 6);
  v38[5] = v24;
  v41 = v2;
  v42 = v14;
  v38[3] = *(unsigned __int8 *)(v1 + 5);
  v39 = v20;
  v40 = v3;
  swift_retain();
  UUID.init(uuid:)();
  v43 = 91;
  v44 = 0xE100000000000000;
  v46._countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  v45 = v23;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 8285;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 8250;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28 = swift_release();
  v29 = v44;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (unint64_t)v5;
  v43 = v30;
  v44 = v29;
  v31 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v31, &v43, partial apply for implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:), &v38[-8]);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v41);
  swift_release();
  *(_QWORD *)(v1 + 16) = 0;
  v43 = v42;
  v44 = v13;
  v32 = static os_log_type_t.debug.getter();
  v33 = &v43;
LABEL_14:
  specialized InteractionsLogger.log(_:_:)(v32, v33);
  return swift_bridgeObjectRelease();
}

uint64_t specialized static __RKEntityUUIDComponent.setUUID(_:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v16 - v12;
  result = swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration)
  {
    v15 = *((_QWORD *)static __RKEntityUUIDComponent.registration + 3);
    outlined init with copy of UUID?(a1, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined destroy of UUID?((uint64_t)v6);
      result = REEntityGetCustomComponent();
      if (result)
        return REEntityRemoveComponentByClass();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
      if (REEntityGetCustomComponent() || MEMORY[0x22076CF2C](a2, v15))
      {
        if (RECustomComponentGetObject())
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
          __RKEntityUUIDComponent.uuid.setter((uint64_t)v10);
        }
      }
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKEntityUUIDComponent()
{
  return &protocol witness table for __RKEntityUUIDComponent.Registration;
}

uint64_t sub_21BAE9640@<X0>(uint64_t a1@<X8>)
{
  return Entity.__interactionIdentifier.getter(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t destroy for __RKEntityUUIDComponent()
{
  return swift_release();
}

uint64_t assignWithCopy for __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityUUIDComponent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityUUIDComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityUUIDComponent()
{
  return &type metadata for __RKEntityUUIDComponent;
}

uint64_t type metadata accessor for __RKEntityUUIDComponent.Registration()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityUUIDComponent.Registration()
{
  return swift_lookUpClassMethod();
}

unint64_t lazy protocol witness table accessor for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityUUIDComponent.Registration.RegistrationError, &type metadata for __RKEntityUUIDComponent.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityUUIDComponent.Registration.RegistrationError, &type metadata for __RKEntityUUIDComponent.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:)()
{
  return implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:)();
}

uint64_t partial apply for implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:)()
{
  return implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:)();
}

uint64_t type metadata accessor for SyncInfoContext.Buffer()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SyncInfoContext.Buffer;
  if (!type metadata singleton initialization cache for SyncInfoContext.Buffer)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of SyncInfoContext.Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SyncInfoContext.Buffer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of SyncInfoContext.Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SyncInfoContext.Buffer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SyncInfoContext.Buffer(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SyncInfoContext.Buffer();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for SyncInfoContext.Buffer(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t destroy for SyncInfoContext.Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for SyncInfoContext.Buffer(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *assignWithCopy for SyncInfoContext.Buffer(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *initializeWithTake for SyncInfoContext.Buffer(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *assignWithTake for SyncInfoContext.Buffer(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncInfoContext.Buffer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BAE9C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SyncInfoContext.Buffer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BAE9CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for SyncInfoContext.Buffer()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for __RKEntityUUIDComponent.Registration.RegistrationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BAE9DE0 + 4 * byte_21BE5ED00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BAE9E00 + 4 * byte_21BE5ED05[v4]))();
}

_BYTE *sub_21BAE9DE0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BAE9E00(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BAE9E08(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BAE9E10(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BAE9E18(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BAE9E20(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityUUIDComponent.Registration.RegistrationError()
{
  return &type metadata for __RKEntityUUIDComponent.Registration.RegistrationError;
}

uint64_t type metadata completion function for _OrderedCoatCheckBagRef()
{
  return swift_initClassMetadata2();
}

uint64_t _OrderedCoatCheckBagRef.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t _OrderedCoatCheckBagRef.asPointer()()
{
  uint64_t v0;

  return v0;
}

uint64_t _OrderedCoatCheckBagRef.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, __n128);
  char *v26;
  char *v27;
  uint64_t result;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = v4;
  v38 = a1;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  type metadata accessor for OrderedCoatCheckBag.Ticket(255, v6, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v36 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (_QWORD **)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (_QWORD **)((char *)&v35 - v11);
  MEMORY[0x24BDAC7A8](v13);
  v35 = (_QWORD **)((char *)&v35 - v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (_QWORD **)((char *)&v35 - v16);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (_QWORD **)((char *)&v35 - v20);
  v22 = *(_QWORD *)(v5 + 24);
  v24 = (char *)&v35 + *(int *)(v23 + 48) - v20;
  *v21 = v22;
  v21[1] = v5;
  v37 = *(_QWORD *)(v6 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v37 + 16);
  v25(v24, v38, v6, v19);
  v38 = v5 + 16;
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 16))
  {
    v26 = (char *)v12 + *(int *)(TupleTypeMetadata2 + 48);
    *v12 = v22;
    v12[1] = v5;
    ((void (*)(char *, char *, uint64_t))v25)(v26, v24, v6);
    v27 = (char *)v9 + *(int *)(TupleTypeMetadata2 + 48);
    *v9 = v22;
    v9[1] = v5;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v27, v26, v6);
    result = swift_beginAccess();
    if (!*(_QWORD *)(v5 + 16))
    {
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
LABEL_5:
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    swift_endAccess();
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v36 + 8))(v21, TupleTypeMetadata2);
    v32 = *(_QWORD *)(v5 + 24);
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (!v33)
    {
      *(_QWORD *)(v5 + 24) = v34;
      return v22;
    }
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)(v5 + 16) = MEMORY[0x220769854](TupleTypeMetadata2);
  swift_release();
  v29 = (char *)v17 + *(int *)(TupleTypeMetadata2 + 48);
  *v17 = v22;
  v17[1] = v5;
  ((void (*)(char *, char *, uint64_t))v25)(v29, v24, v6);
  v30 = v35;
  v31 = (char *)v35 + *(int *)(TupleTypeMetadata2 + 48);
  *v35 = v22;
  v30[1] = v5;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v31, v29, v6);
  result = swift_beginAccess();
  if (*(_QWORD *)(v5 + 16))
    goto LABEL_5;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t _OrderedCoatCheckBagRef.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  _QWORD *v40;
  char *v41;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD v50[2];
  char *v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v60 = a1;
  v8 = *(_QWORD *)(*(_QWORD *)v5 + 80);
  type metadata accessor for OrderedCoatCheckBag.Ticket(255, v8, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v57 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v54 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)v50 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v59 = (_QWORD *)((char *)v50 - v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v50 - v16;
  v18 = swift_getTupleTypeMetadata2();
  v19 = type metadata accessor for Optional();
  v63 = *(_QWORD *)(v19 - 8);
  v64 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v62 = (char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v50 - v23;
  if (a2 == v5)
  {
    v58 = *(_QWORD *)(v8 - 8);
    v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v58 + 56);
    v52((uint64_t)a5, 1, 1, v8, v22);
    v55 = (_QWORD *)(a2 + 16);
    result = swift_beginAccess();
    v26 = *(_QWORD *)(a2 + 16);
    if (v26)
    {
      v67 = v8;
      v51 = a5;
      v70 = v26;
      v27 = type metadata accessor for ContiguousArray();
      swift_retain();
      MEMORY[0x220772E3C](MEMORY[0x24BEE2A60], v27);
      if ((Collection.isEmpty.getter() & 1) != 0)
        goto LABEL_17;
      v65 = v17;
      v66 = TupleTypeMetadata2;
      v70 = v26;
      MEMORY[0x220772E3C](MEMORY[0x24BEE2A48], v27);
      Sequence.enumerated()();
      swift_release();
      v69 = v68;
      type metadata accessor for EnumeratedSequence();
      EnumeratedSequence.makeIterator()();
      v50[1] = v27;
      v61 = type metadata accessor for EnumeratedSequence.Iterator();
      v56 = v18;
      while (1)
      {
        v28 = v62;
        EnumeratedSequence.Iterator.next()();
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v24, v28, v64);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v24, 1, v18) == 1)
          return swift_release();
        v29 = v24;
        v30 = &v24[*(int *)(v18 + 48)];
        v31 = *(_QWORD *)v30;
        v32 = *((_QWORD *)v30 + 1);
        v34 = v66;
        v33 = v67;
        v35 = *(int *)(v66 + 48);
        v36 = &v30[v35];
        v37 = v59;
        v38 = (char *)v59 + v35;
        *v59 = v31;
        v37[1] = v32;
        v39 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
        v39(v38, v36, v33);
        v40 = v65;
        v41 = (char *)v65 + *(int *)(v34 + 48);
        *v65 = v31;
        v40[1] = v32;
        v39(v41, v38, v33);
        if (v31 == v60 && v32 == a2)
        {
          v43 = v55;
          swift_beginAccess();
          if (!*v43)
          {
            __break(1u);
            goto LABEL_17;
          }
          v44 = v66;
          v45 = &v53[*(int *)(v66 + 48)];
          ContiguousArray.remove(at:)();
          swift_endAccess();
          (*(void (**)(_QWORD *, uint64_t))(v57 + 8))(v65, v44);
          v46 = v67;
          v47 = type metadata accessor for Optional();
          v48 = v51;
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v51, v47);
          v49 = &v54[*(int *)(v44 + 48)];
          v39(v49, v45, v46);
          v39(v48, v49, v46);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v52)(v48, 0, 1, v46);
        }
        else
        {
          (*(void (**)(_QWORD *, uint64_t))(v57 + 8))(v40, v34);
        }
        v18 = v56;
        v24 = v29;
      }
    }
  }
  else
  {
LABEL_17:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

BOOL static OrderedCoatCheckBag.Ticket.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t _OrderedCoatCheckBagRef.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _OrderedCoatCheckBagRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _OrderedCoatCheckBagRef);
}

uint64_t type metadata accessor for OrderedCoatCheckBag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedCoatCheckBag);
}

uint64_t type metadata accessor for OrderedCoatCheckBag.Ticket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedCoatCheckBag.Ticket);
}

void OrderedCoatCheckBag.Ticket.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int OrderedCoatCheckBag.Ticket.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OrderedCoatCheckBag<A>.Ticket()
{
  Swift::UInt *v0;

  return OrderedCoatCheckBag.Ticket.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance OrderedCoatCheckBag<A>.Ticket(int a1)
{
  Swift::UInt *v1;

  OrderedCoatCheckBag.Ticket.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrderedCoatCheckBag<A>.Ticket()
{
  Swift::UInt *v0;
  char v2;

  Hasher.init(_seed:)();
  OrderedCoatCheckBag.Ticket.hash(into:)((int)&v2, *v0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance OrderedCoatCheckBag<A>.Ticket(uint64_t *a1, uint64_t *a2)
{
  return static OrderedCoatCheckBag.Ticket.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

void base witness table accessor for Equatable in OrderedCoatCheckBag<A>.Ticket()
{
  JUMPOUT(0x220772E3CLL);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedCoatCheckBag<A>()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t OrderedCoatCheckBag._checkForSharedOwnership()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v5 = *v4;
  type metadata accessor for _OrderedCoatCheckBagRef(0, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5)
  {
    result = isKnownUniquelyReferenced<A>(_:)();
    if ((result & 1) != 0)
      return result;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *v4 = result;
  return result;
}

uint64_t OrderedCoatCheckBag.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = OrderedCoatCheckBag._checkForSharedOwnership()(a2, a2, a3, a4);
  if (*v4)
    return _OrderedCoatCheckBagRef.append(_:)(a1, v7, v8, v9);
  __break(1u);
  return result;
}

uint64_t OrderedCoatCheckBag.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  result = OrderedCoatCheckBag._checkForSharedOwnership()(a3, a2, a3, a4);
  if (*v5)
    return _OrderedCoatCheckBagRef.remove(_:)(a1, a2, v10, v11, a5);
  __break(1u);
  return result;
}

void _OrderedCoatCheckBagRef.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(_QWORD *, uint64_t);
  Swift::String v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  unint64_t v39;

  v5 = *(_QWORD *)(*v4 + 80);
  type metadata accessor for OrderedCoatCheckBag.Ticket(255, v5, a3, a4);
  v34 = v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v36 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v33 = (char *)&v28 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v35 = (char *)&v28 - v12;
  swift_beginAccess();
  v13 = v4[2];
  if (v13)
  {
    v38 = 0;
    v39 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v38 = 0x6E756F6328676142;
    v39 = 0xEB00000000203A74;
    v37._countAndFlagsBits = ContiguousArray.count.getter();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x6E65746E6F63202CLL;
    v15._object = (void *)0xED00005B203A7374;
    String.append(_:)(v15);
    v32 = *(_QWORD *)(v13 + 16);
    if (v32)
    {
      v16 = 0;
      v30 = v13 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      v31 = v13;
      v17 = v36;
      v29 = &v35[*(int *)(TupleTypeMetadata2 + 48)];
      v18 = v33;
      v19 = v34;
      while (v16 < *(_QWORD *)(v13 + 16))
      {
        v20 = v35;
        (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v35, v30 + *(_QWORD *)(v17 + 72) * v16++, TupleTypeMetadata2);
        v22 = *(_QWORD *)v20;
        v21 = *((_QWORD *)v20 + 1);
        v23 = (char *)v18 + *(int *)(TupleTypeMetadata2 + 48);
        *v18 = *(_QWORD *)v20;
        v18[1] = v21;
        v24 = *(_QWORD *)(v19 - 8);
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v23, v29, v19);
        v37._countAndFlagsBits = 0;
        v37._object = (void *)0xE000000000000000;
        v25 = (char *)v8 + *(int *)(TupleTypeMetadata2 + 48);
        *v8 = v22;
        v8[1] = v21;
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v25, v23, v19);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v26 = *(void (**)(_QWORD *, uint64_t))(v17 + 8);
        v26(v8, TupleTypeMetadata2);
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v26(v18, TupleTypeMetadata2);
        v13 = v31;
        if (v32 == v16)
          goto LABEL_6;
      }
      __break(1u);
    }
    else
    {
LABEL_6:
      swift_release();
      v27._countAndFlagsBits = 10589;
      v27._object = (void *)0xE200000000000000;
      String.append(_:)(v27);
    }
  }
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _OrderedCoatCheckBagRef<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OrderedCoatCheckBagRef.debugDescription.getter(a1, a2, a3, a4);
}

void OrderedCoatCheckBag.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
    _OrderedCoatCheckBagRef.debugDescription.getter(a1, a2, a3, a4);
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedCoatCheckBag<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  OrderedCoatCheckBag.debugDescription.getter(*v4, a2, a3, a4);
}

uint64_t _OrderedCoatCheckBagRef.makeIterator()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *v0;
  swift_beginAccess();
  v2 = v0[2];
  if (v2)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    v4 = *(_QWORD *)(v1 + 80);
    type metadata accessor for OrderedCoatCheckBag.Ticket(255, v4, v5, v6);
    swift_retain();
    swift_getTupleTypeMetadata2();
    v7 = ContiguousArray.count.getter();
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v4;
    v8[3] = v3;
    v8[4] = v7;
    v8[5] = v2;
  }
  else
  {
    *(_QWORD *)(swift_allocObject() + 16) = *(_QWORD *)(v1 + 80);
  }
  return AnyIterator.init(_:)();
}

uint64_t closure #2 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[24];

  type metadata accessor for OrderedCoatCheckBag.Ticket(255, a4, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = &v15[-v10];
  v12 = (_QWORD *)(a1 + 16);
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 16) >= a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, 1, 1, a4);
  ContiguousArray.subscript.getter();
  v13 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(a5, &v11[*(int *)(TupleTypeMetadata2 + 48)], a4);
  result = swift_beginAccess();
  if (__OFADD__(*v12, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v12;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a5, 0, 1, a4);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _OrderedCoatCheckBagRef<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = _OrderedCoatCheckBagRef.makeIterator()();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _OrderedCoatCheckBagRef<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for _OrderedCoatCheckBagRef(0, *(_QWORD *)(a1 + 80), a3, a4);
  v7 = specialized Sequence._copyToContiguousArray()(v4, v6, a2);
  swift_release();
  return v7;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance _OrderedCoatCheckBagRef<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _OrderedCoatCheckBagRef(0, *(_QWORD *)(a4 + 80), a3, a4);
  JUMPOUT(0x220768E4CLL);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _OrderedCoatCheckBagRef<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _OrderedCoatCheckBagRef(0, *(_QWORD *)(a4 + 80), a3, a4);
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedCoatCheckBag.makeIterator()(uint64_t a1, uint64_t a2)
{
  if (a1)
    return _OrderedCoatCheckBagRef.makeIterator()();
  *(_QWORD *)(swift_allocObject() + 16) = a2;
  return AnyIterator.init(_:)();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance OrderedCoatCheckBag<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;

  v4 = OrderedCoatCheckBag.makeIterator()(*v2, *(_QWORD *)(a1 + 16));
  result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t sub_21BAEB0CC()
{
  return swift_deallocObject();
}

uint64_t sub_21BAEB0DC()
{
  return swift_deallocObject();
}

uint64_t sub_21BAEB0EC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[3], v1[4], v1[5], v1[2], a1);
}

uint64_t sub_21BAEB124()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OrderedCoatCheckBag.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 56))(a1, 1, 1);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  char v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = v5;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v5;
    *v5 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
    *v5 = v18;
  }
  else
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((v14 & 1) == 0)
      return result;
    v15 = result;
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v5;
    v19 = *v6;
    *v6 = 0x8000000000000000;
    if (!v16)
    {
      specialized _NativeDictionary.copy()();
      v17 = v19;
    }
    specialized _NativeDictionary._delete(at:)(v15, v17);
    *v6 = v17;
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12[2];
  __int128 v13[2];
  uint64_t v14;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of BindableDataInternal((__int128 *)a1, (uint64_t)v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v12[0] = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, a2, isUniquelyReferenced_nonNull_native);
    *v2 = *(_QWORD *)&v12[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      *(_QWORD *)&v13[0] = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = *(_QWORD *)&v13[0];
      }
      outlined init with take of BindableDataInternal((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v12);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
      outlined init with take of BindableDataInternal(v12, (uint64_t)v13);
    }
    else
    {
      v14 = 0;
      memset(v13, 0, sizeof(v13));
    }
    return outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for UUID?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v17;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = v2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>?);
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v6 & 1) != 0)
    {
      v7 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v9 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v9 = v13;
      }
      outlined init with take of Transform?(*(_QWORD *)(v9 + 56) + 8 * v7, (uint64_t)&v12, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
      specialized _NativeDictionary._delete(at:)(v7, v9);
      *v3 = v9;
      swift_bridgeObjectRelease();
      outlined init with take of Transform?((uint64_t)&v12, (uint64_t)&v13, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
      v14 = 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    return outlined destroy of BodyTrackingComponent?((uint64_t)&v13, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>?);
  }
  else
  {
    outlined init with take of Transform?(a1, (uint64_t)&v13, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v13, a2, v10);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _OWORD v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v7);
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return outlined release of REEventBus.DispatcherHandle((uint64_t)a2);
}

uint64_t specialized Dictionary.subscript.setter(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  BOOL v5;
  char v6;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v3 = v2;
  if (*a1)
    v5 = 0;
  else
    v5 = a1[1] == 1;
  if (v5)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for __RKEntityAction.ActionStateObservation?);
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      v10 = v8;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = *v2;
      v14 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v12 = v14;
      }
      outlined init with take of __RKEntityAction.ActionStateObservation(*(_QWORD *)(v12 + 56) + 16 * v10, (uint64_t)&v15);
      specialized _NativeDictionary._delete(at:)(v10, v12);
      *v3 = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = xmmword_21BE56B70;
    }
    return outlined destroy of BodyTrackingComponent?((uint64_t)&v15, &demangling cache variable for type metadata for __RKEntityAction.ActionStateObservation?);
  }
  else
  {
    outlined init with take of __RKEntityAction.ActionStateObservation((uint64_t)a1, (uint64_t)&v15);
    v6 = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v15, a2, v6);
    *v2 = v13;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Trace;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadTrace?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Trace = type metadata accessor for LoadTrace(0);
  v10 = *(_QWORD *)(Trace - 8);
  v11 = MEMORY[0x24BDAC7A8](Trace);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, Trace, v11) == 1)
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for LoadTrace?);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) != 0)
    {
      v16 = v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = *v3;
      v23 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v18 = v23;
      }
      outlined init with take of LoadTrace(*(_QWORD *)(v18 + 56) + *(_QWORD *)(v10 + 72) * v16, (uint64_t)v8);
      specialized _NativeDictionary._delete(at:)(v16, v18);
      *v3 = v18;
      swift_bridgeObjectRelease();
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1, Trace);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for LoadTrace?);
  }
  else
  {
    outlined init with take of LoadTrace(a1, (uint64_t)v13);
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, v20);
    *v3 = v23;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of BindableDataInternal((__int128 *)a1, (uint64_t)v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v4;
    *v4 = 0x8000000000000000;
    v9 = v19;
    v10 = v20;
    v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
    v12 = MEMORY[0x24BDAC7A8](v11);
    v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    (*(void (**)(_BYTE *, __n128))(v15 + 16))(v14, v12);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, a4 & 0x101, isUniquelyReferenced_nonNull_native, &v17, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    *v4 = v17;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for MeshBufferErased?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, a4 & 0x101, (uint64_t)v18);
    swift_bridgeObjectRelease();
    return outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for MeshBufferErased?);
  }
}

uint64_t __RKEntityAction.init(targetEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t SceneNullable;
  uint64_t v7;
  id v8;
  uint64_t ServiceLocator;
  uint64_t v10;

  v2 = v1;
  *(_OWORD *)(v1 + 16) = 0u;
  v4 = v1 + 16;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  v5 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 48) = v5;
  *(_DWORD *)(v4 + 71) = 0;
  *(_WORD *)(v4 + 88) = 257;
  swift_beginAccess();
  *(_QWORD *)v4 = a1;
  swift_retain();
  swift_release();
  if (!a1)
    goto LABEL_10;
  swift_retain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_9:
    swift_release_n();
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  v7 = SceneNullable;
  v8 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v8)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v7);
  }
  if (!RESceneGetECSManagerNullable())
  {
    swift_release();
    goto LABEL_9;
  }
  ServiceLocator = REECSManagerGetServiceLocator();
  v10 = MEMORY[0x22076FD94](ServiceLocator);
  swift_release();
  swift_release_n();
LABEL_11:
  *(_QWORD *)(v2 + 24) = v10;
  return v2;
}

uint64_t __RKEntityAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t __RKEntityAction.targetEntity.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t __RKEntityAction.targetEntity.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*__RKEntityAction.targetEntity.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAction.completionHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 72);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __RKEntityAction.completionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

uint64_t (*__RKEntityAction.completionHandler.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAction.isExclusive.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t __RKEntityAction.isExclusive.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 89) = a1;
  return result;
}

uint64_t (*__RKEntityAction.isExclusive.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAction.exclusiveBlocksForCompletion.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t __RKEntityAction.exclusiveBlocksForCompletion.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 90) = a1;
  return result;
}

uint64_t (*__RKEntityAction.exclusiveBlocksForCompletion.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

Swift::Bool __swiftcall __RKEntityAction.runningExclusiveAndBlocksForCompletion()()
{
  uint64_t v0;
  Swift::Bool result;

  swift_beginAccess();
  result = 0;
  if (*(_BYTE *)(v0 + 104) == 1 && *(_QWORD *)(v0 + 96) == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v0 + 89) == 1)
    {
      swift_beginAccess();
      if ((*(_BYTE *)(v0 + 90) & 1) != 0)
        return 1;
    }
  }
  return result;
}

uint64_t __RKEntityAction.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = swift_beginAccess();
  v4 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 96);
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t __RKEntityAction.state.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = v2;
  *(_BYTE *)(v1 + 104) = v3;
  v7 = v4;
  v8 = v5;
  return __RKEntityAction.state.didset((uint64_t)&v7);
}

void (*__RKEntityAction.state.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v3[3] = *(_QWORD *)(v1 + 96);
  *((_BYTE *)v3 + 32) = *(_BYTE *)(v1 + 104);
  return __RKEntityAction.state.modify;
}

void __RKEntityAction.state.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_BYTE *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = *(_QWORD *)(*(_QWORD *)a1 + 24);
  *(_BYTE *)(v2 + 104) = v3;
  v6 = v4;
  v7 = v5;
  __RKEntityAction.state.didset((uint64_t)&v6);
  free(v1);
}

uint64_t __RKEntityAction.multiplePerformBehaviour.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 105);
  return result;
}

uint64_t __RKEntityAction.multiplePerformBehaviour.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 105) = v2;
  return result;
}

uint64_t (*__RKEntityAction.multiplePerformBehaviour.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAction.performAction(with:)(_QWORD *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t result;
  void (*v5)(_QWORD *);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_BYTE **);
  void (*v10)(_BYTE **);
  _BYTE *v11;
  uint64_t v12;
  _QWORD v13[3];

  v2 = (_BYTE *)*a1;
  v3 = a1[1];
  swift_beginAccess();
  if (v2[18] == 1)
  {
    result = swift_beginAccess();
    if (v1[88] != 1)
      return result;
    v13[0] = v2;
    v13[1] = v3;
    v5 = *(void (**)(_QWORD *))(*(_QWORD *)v1 + 408);
    swift_retain();
    v5(v13);
    v2[18] = 0;
  }
  else
  {
    swift_beginAccess();
    if (v2[16] == 1)
    {
      swift_beginAccess();
      if ((v2[17] & 1) != 0)
      {
        v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 432);
        v7 = swift_retain();
        v8 = v6(v7);
        if (v8)
        {
          v11 = v2;
          v12 = v3;
          (*(void (**)(_BYTE **))(*(_QWORD *)v8 + 408))(&v11);
          swift_release();
        }
        v2[17] = 0;
      }
      else
      {
        v11 = v2;
        v12 = v3;
        v10 = *(void (**)(_BYTE **))(*(_QWORD *)v1 + 408);
        swift_retain();
        v10(&v11);
        v2[17] = 1;
      }
    }
    else
    {
      result = swift_beginAccess();
      if ((v1[88] & 1) != 0)
        return result;
      v11 = v2;
      v12 = v3;
      v9 = *(void (**)(_BYTE **))(*(_QWORD *)v1 + 408);
      swift_retain();
      v9(&v11);
    }
  }
  return swift_release();
}

BOOL __RKEntityAction.shouldContinueOnPerform(with:)()
{
  uint64_t v0;

  swift_beginAccess();
  if (*(_BYTE *)(v0 + 104) == 1 && *(_QWORD *)(v0 + 96) == 1 && (swift_beginAccess(), *(_BYTE *)(v0 + 105) == 1))
    return 0;
  else
    return RESceneGetECSManagerNullable() != 0;
}

uint64_t __RKEntityAction.addStateObserver(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[1] = a2;
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v4, a1);
  return swift_endAccess();
}

uint64_t __RKEntityAction.removeStateObserver(_:)(uint64_t a1)
{
  __int128 v3;

  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a1, &v3);
  swift_endAccess();
  return outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for __RKEntityAction.ActionStateObservation?);
}

uint64_t __RKEntityAction.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  swift_beginAccess();
  if (*(_QWORD *)(v0 + 16))
  {
    swift_retain();
    REEntityGetName();
    v1 = String.init(cString:)();
    v3 = v2;
    swift_release();
  }
  else
  {
    v1 = 0;
    v3 = (void *)0xE000000000000000;
  }
  v4 = _typeName(_:qualified:)();
  v5._countAndFlagsBits = v1;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 0x3A74656772617420;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3A657461747320;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Bool __swiftcall __RKEntityAction.stop()()
{
  uint64_t v0;
  Swift::Bool v1;
  uint64_t v3;
  char v4;

  swift_beginAccess();
  if (*(_BYTE *)(v0 + 104) != 1 || *(_QWORD *)(v0 + 96) != 1)
    return 0;
  *(_QWORD *)(v0 + 96) = 3;
  v1 = 1;
  *(_BYTE *)(v0 + 104) = 1;
  v3 = 1;
  v4 = 1;
  __RKEntityAction.state.didset((uint64_t)&v3);
  return v1;
}

BOOL __RKEntityAction.isExclusiveWith(action:)(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;

  result = 0;
  if (v1 != a1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 89) == 1)
    {
      swift_beginAccess();
      if ((*(_BYTE *)(a1 + 89) & 1) != 0)
        return 1;
    }
  }
  return result;
}

double specialized Dictionary.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }
    outlined init with take of __RKEntityAction.ActionStateObservation(*(_QWORD *)(v9 + 56) + 16 * v7, (uint64_t)a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = xmmword_21BE56B70;
  }
  return result;
}

uint64_t specialized Dictionary.removeValue(forKey:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t Trace;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v15;
    }
    v10 = *(_QWORD *)(v9 + 56);
    Trace = type metadata accessor for LoadTrace(0);
    v12 = *(_QWORD *)(Trace - 8);
    outlined init with take of LoadTrace(v10 + *(_QWORD *)(v12 + 72) * v7, a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, Trace);
  }
  else
  {
    v14 = type metadata accessor for LoadTrace(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

RealityKit::__RKEntityActionMultiplePerformBehavior_optional __swiftcall __RKEntityActionMultiplePerformBehavior.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__RKEntityActionMultiplePerformBehavior_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionMultiplePerformBehavior.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static __RKEntityActionMultiplePerformBehavior.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityActionMultiplePerformBehavior.allCases.getter;
}

uint64_t __RKEntityActionMultiplePerformBehavior.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x722065726F6E6769;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x657220776F6C6C61;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionMultiplePerformBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionMultiplePerformBehavior()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityActionMultiplePerformBehavior()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionMultiplePerformBehavior()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKEntityActionMultiplePerformBehavior_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityActionMultiplePerformBehavior(Swift::String *a1)
{
  return __RKEntityActionMultiplePerformBehavior.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityActionMultiplePerformBehavior(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xED00007473657571;
  v4 = 0xEE00747365757165;
  v5 = 0x722065726F6E6769;
  if (v2 != 1)
  {
    v5 = 0xD000000000000014;
    v4 = 0x800000021BE81880;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x657220776F6C6C61;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityActionMultiplePerformBehavior()
{
  lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityActionMultiplePerformBehavior()
{
  lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityActionMultiplePerformBehavior(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityActionMultiplePerformBehavior;
}

uint64_t __RKEntityActionContext.trigger.getter()
{
  return swift_retain();
}

uint64_t __RKEntityActionContext.trigger.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*__RKEntityActionContext.trigger.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionContext.scene.getter()
{
  return swift_retain();
}

uint64_t __RKEntityActionContext.scene.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*__RKEntityActionContext.scene.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionContext.init(trigger:scene:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t __RKEntityAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  __RKEntityAction.init(targetEntity:)(a1);
  return v2;
}

uint64_t __RKEntityAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t key path setter for __RKEntityAction.targetEntity : __RKEntityAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  swift_retain();
  return swift_release();
}

uint64_t key path getter for __RKEntityAction.completionHandler : __RKEntityAction@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(unsigned __int8 *);

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(_QWORD *)(v3 + 80);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for __RKEntityAction.completionHandler : __RKEntityAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char);
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 72);
  *(_QWORD *)(v7 + 72) = v6;
  *(_QWORD *)(v7 + 80) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t key path setter for __RKEntityAction.state : __RKEntityAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  char v9;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 96);
  v6 = *(_BYTE *)(v4 + 104);
  *(_QWORD *)(v4 + 96) = v2;
  *(_BYTE *)(v4 + 104) = v3;
  v8 = v5;
  v9 = v6;
  return __RKEntityAction.state.didset((uint64_t)&v8);
}

uint64_t __RKEntityAction.state.didset(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  int v4;
  _QWORD *v5;
  uint64_t result;
  double v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  int64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  _QWORD v44[3];
  char v45;
  double v46;
  int64_t v47;
  _QWORD *v48;
  __int128 v49;
  uint64_t v50;
  int64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  char v55[8];
  uint64_t v56;
  double v57;
  _QWORD v58[2];
  uint64_t v59;
  _QWORD v60[2];
  _QWORD v61[3];

  v2 = v1;
  v3 = *(double *)a1;
  v4 = *(unsigned __int8 *)(a1 + 8);
  v5 = (_QWORD *)(*(_QWORD *)&v1 + 96);
  result = swift_beginAccess();
  v7 = *(double *)(*(_QWORD *)&v2 + 96);
  v8 = *(_BYTE *)(*(_QWORD *)&v2 + 104);
  v52 = v4;
  if (v4 == 1)
    __asm { BR              X11 }
  if (v3 != v7)
    v8 = 1;
  if ((v8 & 1) != 0)
  {
    v48 = v5;
    v59 = 0;
    v60[0] = 0xE000000000000000;
    v57 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8285;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 8250;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    v13 = swift_release();
    MEMORY[0x24BDAC7A8](v13);
    *(double *)&v44[2] = v3;
    v45 = v52;
    v46 = v2;
    v61[0] = v14;
    v61[1] = 0xE100000000000000;
    v15 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v15, v61, partial apply for implicit closure #1 in __RKEntityAction.state.didset, v44);
    swift_bridgeObjectRelease();
    v16 = (uint64_t *)(*(_QWORD *)&v2 + 64);
    swift_beginAccess();
    v17 = *(_QWORD *)(*(_QWORD *)&v2 + 64);
    v18 = *(_QWORD *)(v17 + 64);
    v50 = v17 + 64;
    v19 = 1 << *(_BYTE *)(v17 + 32);
    v20 = -1;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    v21 = v20 & v18;
    v51 = (unint64_t)(v19 + 63) >> 6;
    v47 = v51 - 1;
    swift_bridgeObjectRetain();
    v22 = 0;
    v49 = xmmword_21BE56B70;
    while (v21)
    {
      v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v28 = v27 | (v22 << 6);
LABEL_14:
      v29 = *(_QWORD *)(v17 + 56);
      v57 = *(double *)(*(_QWORD *)(v17 + 48) + 8 * v28);
      outlined init with copy of __RKEntityAction.ActionStateObservation(v29 + 16 * v28, (uint64_t)v58);
LABEL_39:
      outlined init with take of Transform?((uint64_t)&v57, (uint64_t)&v59, &demangling cache variable for type metadata for (key: ObjectIdentifier, value: __RKEntityAction.ActionStateObservation)?);
      if (!v60[0] && v60[1] == 1)
      {
        result = swift_release();
        if (*(_BYTE *)(*(_QWORD *)&v2 + 104) == 1 && *v48 >= 2uLL)
        {
          v38 = *(void (**)(uint64_t))(*(_QWORD *)&v2 + 32);
          if (v38)
          {
            *(_QWORD *)(*(_QWORD *)&v2 + 32) = 0;
            *(_QWORD *)(*(_QWORD *)&v2 + 40) = 0;
            swift_retain();
            v39 = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v38);
            v38(v39);
            outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v38);
          }
          result = swift_beginAccess();
          v40 = *(void (**)(uint64_t))(*(_QWORD *)&v2 + 72);
          if (v40)
          {
            if (*(_QWORD *)(*(_QWORD *)&v2 + 96) == 2)
              v41 = *(unsigned __int8 *)(*(_QWORD *)&v2 + 104);
            else
              v41 = 0;
            swift_retain();
            v40(v41);
            result = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v40);
          }
          v42 = *(void (**)(uint64_t))(*(_QWORD *)&v2 + 48);
          if (v42)
          {
            v43 = swift_retain();
            v42(v43);
            return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v42);
          }
        }
        return result;
      }
      v23 = v59;
      outlined init with take of __RKEntityAction.ActionStateObservation((uint64_t)v60, (uint64_t)v55);
      if (MEMORY[0x22077301C](v55))
      {
        v24 = v56;
        ObjectType = swift_getObjectType();
        v57 = v3;
        LOBYTE(v58[0]) = v52;
        v26 = *(_BYTE *)(*(_QWORD *)&v2 + 104);
        *(_QWORD *)&v54 = *(_QWORD *)(*(_QWORD *)&v2 + 96);
        BYTE8(v54) = v26;
        (*(void (**)(double, double *, __int128 *, uint64_t, uint64_t))(v24 + 8))(COERCE_DOUBLE(*(_QWORD *)&v2), &v57, &v54, ObjectType, v24);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_beginAccess();
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
        if ((v33 & 1) != 0)
        {
          v34 = v32;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v36 = *v16;
          v53 = *v16;
          *v16 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v36 = v53;
          }
          outlined init with take of __RKEntityAction.ActionStateObservation(*(_QWORD *)(v36 + 56) + 16 * v34, (uint64_t)&v54);
          specialized _NativeDictionary._delete(at:)(v34, v36);
          *v16 = v36;
          swift_bridgeObjectRelease();
        }
        else
        {
          v54 = v49;
        }
        swift_endAccess();
        outlined destroy of BodyTrackingComponent?((uint64_t)&v54, &demangling cache variable for type metadata for __RKEntityAction.ActionStateObservation?);
      }
      outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?((uint64_t)v55);
    }
    v30 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
      JUMPOUT(0x21BAED69CLL);
    }
    if (v30 >= v51)
      goto LABEL_38;
    v31 = *(_QWORD *)(v50 + 8 * v30);
    if (!v31)
    {
      v37 = v22 + 2;
      ++v22;
      if (v30 + 1 >= v51)
        goto LABEL_38;
      v31 = *(_QWORD *)(v50 + 8 * v37);
      if (!v31)
      {
        v22 = v30 + 1;
        if (v30 + 2 >= v51)
          goto LABEL_38;
        v31 = *(_QWORD *)(v50 + 8 * (v30 + 2));
        if (v31)
        {
          v30 += 2;
          goto LABEL_18;
        }
        v37 = v30 + 3;
        v22 = v30 + 2;
        if (v30 + 3 >= v51)
          goto LABEL_38;
        v31 = *(_QWORD *)(v50 + 8 * v37);
        if (!v31)
        {
          while (1)
          {
            v30 = v37 + 1;
            if (__OFADD__(v37, 1))
              goto LABEL_54;
            if (v30 >= v51)
              break;
            v31 = *(_QWORD *)(v50 + 8 * v30);
            ++v37;
            if (v31)
              goto LABEL_18;
          }
          v22 = v47;
LABEL_38:
          v21 = 0;
          v57 = 0.0;
          v58[0] = 0;
          v58[1] = 1;
          goto LABEL_39;
        }
      }
      v30 = v37;
    }
LABEL_18:
    v21 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v30 << 6);
    v22 = v30;
    goto LABEL_14;
  }
  return result;
}

uint64_t implicit closure #1 in __RKEntityAction.state.didset()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 540945696;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t __RKEntityAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  os_log_type_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;
  uint64_t v9[3];

  v9[0] = StaticString.description.getter();
  v9[1] = v1;
  v2._countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v3 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v3, v9);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_BYTE *)(v0 + 104);
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  v7 = v4;
  v8 = v5;
  __RKEntityAction.state.didset((uint64_t)&v7);
  return 1;
}

uint64_t __RKEntityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  v2 = type metadata accessor for __RKEntityAction();
  v3 = swift_allocObject();
  v4 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t __RKEntityAction.clone(matching:newEntity:)()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD v3[4];

  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)v0 + 464))(v3, 0);
  type metadata accessor for __RKEntityAction();
  if (swift_dynamicCast())
    return v2;
  else
    return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityAction()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 440))();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v17;
  __int16 v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  char v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a7;
  v39 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(boxed_opaque_existential_1, a1, a7);
  v17 = (_QWORD *)*a6;
  v18 = a4 & 0x101;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v18);
  v21 = v17[2];
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_14;
  }
  v24 = v19;
  v25 = v17[3];
  if (v25 >= v23 && (a5 & 1) != 0)
  {
LABEL_7:
    v26 = (_QWORD *)*a6;
    if ((v24 & 1) != 0)
    {
LABEL_8:
      v27 = v26[7] + 40 * v20;
      __swift_destroy_boxed_opaque_existential_1(v27);
      return outlined init with take of BindableDataInternal(&v37, v27);
    }
    goto LABEL_11;
  }
  if (v25 >= v23 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, a5 & 1);
  v29 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v18);
  if ((v24 & 1) != (v30 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v20 = v29;
  v26 = (_QWORD *)*a6;
  if ((v24 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v37, v38);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v35 + 16))(v34, v32);
  specialized _NativeDictionary._insert(at:key:value:)(v20, a2, a3, v18, (uint64_t)v34, v26, a7, a8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a7;
  v23 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(boxed_opaque_existential_1, a5, a7);
  a6[(a1 >> 6) + 8] |= 1 << a1;
  v16 = a6[6] + 24 * a1;
  *(_QWORD *)v16 = a2;
  *(_QWORD *)(v16 + 8) = a3;
  *(_BYTE *)(v16 + 16) = a4 & 1;
  *(_BYTE *)(v16 + 17) = HIBYTE(a4) & 1;
  result = outlined init with take of BindableDataInternal(&v21, a6[7] + 40 * a1);
  v18 = a6[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a6[2] = v20;
  return result;
}

uint64_t specialized static __RKEntityAction.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;

  v2 = *(double *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
    return ((uint64_t (*)(void))((char *)&loc_21BAEDCA0 + 4 * byte_21BE5F0D0[*(_QWORD *)&v2]))();
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    return 0;
  return v2 == *(double *)a2;
}

uint64_t sub_21BAEDCD8@<X0>(uint64_t a1@<X8>)
{
  char v1;
  char v2;

  if (a1 == 2)
    v2 = v1;
  else
    v2 = 0;
  if ((v2 & 1) == 0)
    JUMPOUT(0x21BAEDCB8);
  return 1;
}

uint64_t sub_21BAEDCEC@<X0>(uint64_t a1@<X8>)
{
  char v1;
  char v2;

  if (a1 == 3)
    v2 = v1;
  else
    v2 = 0;
  if ((v2 & 1) == 0)
    JUMPOUT(0x21BAEDCB8);
  return 1;
}

uint64_t sub_21BAEDD00@<X0>(unint64_t a1@<X8>)
{
  char v1;
  char v2;

  if (a1 > 3)
    v2 = v1;
  else
    v2 = 0;
  if ((v2 & 1) == 0)
    JUMPOUT(0x21BAEDCB8);
  return 1;
}

uint64_t sub_21BAEDD14@<X0>(uint64_t a1@<X8>)
{
  char v1;
  char v2;

  if (a1 == 1)
    v2 = v1;
  else
    v2 = 0;
  if ((v2 & 1) == 0)
    JUMPOUT(0x21BAEDCB8);
  return 1;
}

uint64_t type metadata accessor for __RKEntityAction()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type [__RKEntityActionMultiplePerformBehavior] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [__RKEntityActionMultiplePerformBehavior] and conformance [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityActionMultiplePerformBehavior] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityActionMultiplePerformBehavior]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityActionMultiplePerformBehavior] and conformance [A]);
  }
  return result;
}

uint64_t sub_21BAEDDE0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_21BAEDE34@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 88);
  return result;
}

uint64_t sub_21BAEDE78(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 88) = v2;
  return result;
}

uint64_t sub_21BAEDEB8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 89);
  return result;
}

uint64_t sub_21BAEDEFC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 89) = v2;
  return result;
}

uint64_t sub_21BAEDF3C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 90);
  return result;
}

uint64_t sub_21BAEDF80(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 90) = v2;
  return result;
}

uint64_t sub_21BAEDFC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 104);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 96);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_21BAEE010@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 105);
  return result;
}

uint64_t sub_21BAEE054(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 105) = v2;
  return result;
}

uint64_t dispatch thunk of __RKEntityActionStateObserver.action(_:didChangeStateFrom:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionMultiplePerformBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BAEE0E8 + 4 * byte_21BE5F0DA[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BAEE11C + 4 * byte_21BE5F0D5[v4]))();
}

uint64_t sub_21BAEE11C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAEE124(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BAEE12CLL);
  return result;
}

uint64_t sub_21BAEE138(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BAEE140);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BAEE144(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BAEE14C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionMultiplePerformBehavior()
{
  return &type metadata for __RKEntityActionMultiplePerformBehavior;
}

uint64_t destroy for __RKEntityActionContext()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntityActionContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for __RKEntityActionContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for __RKEntityActionContext(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __RKEntityActionContext()
{
  return &type metadata for __RKEntityActionContext;
}

uint64_t method lookup function for __RKEntityAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityAction.__allocating_init(targetEntity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of __RKEntityAction.targetEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of __RKEntityAction.targetEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of __RKEntityAction.targetEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of __RKEntityAction.completionHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityAction.completionHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of __RKEntityAction.completionHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityAction.isAlternate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of __RKEntityAction.isAlternate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of __RKEntityAction.isAlternate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of __RKEntityAction.isExclusive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of __RKEntityAction.isExclusive.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of __RKEntityAction.isExclusive.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of __RKEntityAction.exclusiveBlocksForCompletion.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of __RKEntityAction.exclusiveBlocksForCompletion.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of __RKEntityAction.exclusiveBlocksForCompletion.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of __RKEntityAction.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of __RKEntityAction.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of __RKEntityAction.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of __RKEntityAction.multiplePerformBehaviour.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of __RKEntityAction.multiplePerformBehaviour.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of __RKEntityAction.multiplePerformBehaviour.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of __RKEntityAction.performAction(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of __RKEntityAction.shouldContinueOnPerform(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of __RKEntityAction.preloadAssets()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of __RKEntityAction.perform(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of __RKEntityAction.addStateObserver(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of __RKEntityAction.removeStateObserver(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of __RKEntityAction.reversed()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of __RKEntityAction.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of __RKEntityAction.stop()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of __RKEntityAction.isExclusiveWith(action:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of __RKEntityAction.copy(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of __RKEntityAction.clone(matching:newEntity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of __RKEntityAction.prefersInitialOrdering()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t storeEnumTagSinglePayload for __RKEntityAction.State(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityAction.State()
{
  return &type metadata for __RKEntityAction.State;
}

ValueMetadata *type metadata accessor for __RKEntityAction.ActionStateObservation()
{
  return &type metadata for __RKEntityAction.ActionStateObservation;
}

uint64_t sub_21BAEE46C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(char a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t partial apply for implicit closure #1 in __RKEntityAction.state.didset()
{
  return implicit closure #1 in __RKEntityAction.state.didset();
}

void static AdaptiveResolutionComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 4006;
}

RealityFoundation::AdaptiveResolutionComponent __swiftcall AdaptiveResolutionComponent.init()()
{
  _DWORD *v0;
  RealityFoundation::AdaptiveResolutionComponent result;

  *v0 = 0;
  return result;
}

float AdaptiveResolutionComponent.pixelsPerMeter.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance AdaptiveResolutionComponent@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  REComponentGetEntity();
  REAdaptiveResolutionStateComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
    result = REAdaptiveResolutionStateComponentGetPixelsPerMeter();
  else
    v3 = 0;
  *a1 = v3;
  return result;
}

uint64_t static AdaptiveResolutionComponent.__fromCore(_:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  REComponentGetEntity();
  REAdaptiveResolutionStateComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
    result = REAdaptiveResolutionStateComponentGetPixelsPerMeter();
  else
    v3 = 0;
  *a1 = v3;
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance AdaptiveResolutionComponent(_DWORD *a1@<X8>)
{
  *a1 = 4006;
}

ValueMetadata *type metadata accessor for AdaptiveResolutionComponent()
{
  return &type metadata for AdaptiveResolutionComponent;
}

uint64_t AcousticMeshResource.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t AcousticMeshResource.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t static AcousticMeshResource.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  type metadata accessor for AcousticMeshResource();
  v2 = swift_allocObject();
  RERetain();
  *(_QWORD *)(v2 + 16) = v1;
  return v2;
}

uint64_t type metadata accessor for AcousticMeshResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for AcousticMeshResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AcousticMeshResource.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

__n128 RETransform.position.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void RETransform.position.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*RETransform.position.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 RETransform.orientation.getter()
{
  __n128 *v0;

  return v0[1];
}

void RETransform.orientation.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*RETransform.orientation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 RETransform.scale.getter()
{
  __n128 *v0;

  return v0[2];
}

void RETransform.scale.setter(__n128 a1)
{
  __n128 *v1;

  v1[2] = a1;
}

uint64_t (*RETransform.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RETransform.matrix.getter()
{
  uint64_t v0;

  return specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v0, *(float32x4_t *)(v0 + 16), COERCE_FLOAT(*(_OWORD *)(v0 + 32)));
}

void key path setter for RETransform.matrix : RETransform(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  float32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  __int128 v8;

  v5 = *(float32x4_t *)a1;
  v6 = *((int32x4_t *)a1 + 1);
  v7 = *((int8x16_t *)a1 + 2);
  v3 = a1[3];
  HIDWORD(v3) = 0;
  v8 = v3;
  REDecomposeMatrix();
  *(__n64 *)&v4 = simd_float4x4.scale.getter(v5, v6, v7);
  *a2 = v8;
  a2[1] = 0u;
  a2[2] = v4;
}

void RETransform.matrix.setter(float32x4_t a1, int32x4_t a2, int8x16_t a3, __n128 a4)
{
  __n128 *v4;
  __n128 v6;
  __n128 v10;

  a4.n128_u32[3] = 0;
  v10 = a4;
  REDecomposeMatrix();
  v6.n128_u64[0] = simd_float4x4.scale.getter(a1, a2, a3).n64_u64[0];
  *v4 = v10;
  v4[1] = 0u;
  v4[2] = v6;
}

void (*RETransform.matrix.modify(_QWORD *a1))(int32x4_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[14] = v1;
  *(double *)&v4 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v1, *(float32x4_t *)(v1 + 16), COERCE_FLOAT(*(_OWORD *)(v1 + 32)));
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = v6;
  *((_OWORD *)v3 + 3) = v7;
  return RETransform.matrix.modify;
}

void RETransform.matrix.modify(int32x4_t **a1)
{
  int32x4_t *v1;
  int32x4_t v2;
  int32x4_t *v3;
  int32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;

  v1 = *a1;
  v6 = (*a1)[1];
  v7 = *(float32x4_t *)*a1;
  v5 = (int8x16_t)(*a1)[2];
  v9 = (*a1)[3];
  v1[4] = 0u;
  v1[5] = 0u;
  v1[6] = 0u;
  REDecomposeMatrix();
  v8 = v1[5];
  *(__n64 *)v2.i8 = simd_float4x4.scale.getter(v7, v6, v5);
  v3 = (int32x4_t *)v1[7].i64[0];
  v4 = v9;
  v4.i32[3] = 0;
  *v3 = v4;
  v3[1] = v8;
  v3[2] = v2;
  free(v1);
}

void sub_21BAEE9A0(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(double *)&v3 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)a1, *(float32x4_t *)(a1 + 16), COERCE_FLOAT(*(_OWORD *)(a1 + 32)));
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

void sub_21BAEE9D0(_OWORD *a1, _OWORD *a2)
{
  key path setter for RETransform.matrix : RETransform(a1, a2);
}

ValueMetadata *type metadata accessor for RETransform()
{
  return &type metadata for RETransform;
}

void static SpotLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 50;
}

void static SpotLightComponent.Shadow.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 77;
}

void __swiftcall SpotLightComponent.Shadow.init()(RealityKit::SpotLightComponent::Shadow *__return_ptr retstr)
{
  retstr->__depthBias = 1.0;
  retstr->__cullModeOverride.value = RealityFoundation_MaterialParameterTypes_FaceCulling_unknownDefault;
  retstr->__zNear.value = 0.0;
  retstr->__zNear.is_nil = 1;
  retstr->__zFar.value = 0.0;
  retstr->__zFar.is_nil = 1;
}

uint64_t static SpotLightComponent.Shadow.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  char v4;
  char ZNear;
  uint64_t result;

  RESpotLightShadowMapComponentGetDepthBias();
  v3 = v2;
  if (RESpotLightShadowMapComponentGetCullModeEx())
    v4 = 1;
  else
    v4 = 3;
  ZNear = RESpotLightShadowMapComponentGetZNear();
  result = RESpotLightShadowMapComponentGetZFar();
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = ZNear ^ 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = result ^ 1;
  return result;
}

void SpotLightComponent.Shadow.depthBias.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

_BYTE *SpotLightComponent.Shadow.cullModeOverride.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = *result;
  return result;
}

int *SpotLightComponent.Shadow.zNear.setter(int *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_DWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 12) = v3;
  return result;
}

int *SpotLightComponent.Shadow.zFar.setter(int *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_DWORD *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 20) = v3;
  return result;
}

uint64_t SpotLightComponent.Shadow.__toCore(_:)()
{
  RESpotLightShadowMapComponentSetDepthBias();
  RESpotLightShadowMapComponentSetCullMode();
  RESpotLightShadowMapComponentSetZNear();
  RESpotLightShadowMapComponentSetZFar();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance SpotLightComponent.Shadow(_DWORD *a1@<X8>)
{
  *a1 = 77;
}

id SpotLightComponent.__color.getter()
{
  id *v0;

  return *v0;
}

void SpotLightComponent.__color.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*SpotLightComponent.__color.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float SpotLightComponent.intensity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void SpotLightComponent.intensity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*SpotLightComponent.intensity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float SpotLightComponent.innerAngleInDegrees.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void SpotLightComponent.innerAngleInDegrees.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*SpotLightComponent.innerAngleInDegrees.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float SpotLightComponent.outerAngleInDegrees.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void SpotLightComponent.outerAngleInDegrees.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*SpotLightComponent.outerAngleInDegrees.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float SpotLightComponent.attenuationRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 20);
}

void SpotLightComponent.attenuationRadius.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 20) = a1;
}

uint64_t (*SpotLightComponent.attenuationRadius.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{

  *(_QWORD *)a2 = a1;
  *(float *)(a2 + 8) = a3;
  *(float *)(a2 + 12) = a4;
  *(float *)(a2 + 16) = a5;
  *(float *)(a2 + 20) = a6;
  *(_DWORD *)(a2 + 24) = 0x40000000;
}

void static SpotLightComponent.__fromCore(_:)(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  RESpotLightComponentGetColorGamut3F();
  RESpotLightComponentGetIntensity();
  v3 = v2;
  RESpotLightComponentGetInnerAngle();
  v12 = v4;
  RESpotLightComponentGetOuterAngle();
  v11 = v5;
  RESpotLightComponentGetAttenuationRadius();
  v7 = v6;
  RESpotLightComponentGetAttenuationFalloffExponent();
  v9 = v8;
  v10 = RECreateCGColorFromColorGamut();

  *(_QWORD *)a1 = v10;
  *(_DWORD *)(a1 + 8) = v3;
  *(float32x2_t *)(a1 + 12) = vdiv_f32(vmul_f32((float32x2_t)__PAIR64__(v11, v12), (float32x2_t)vdup_n_s32(0x43340000u)), (float32x2_t)vdup_n_s32(0x40490FDAu));
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v9;
}

void SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, float a7@<S4>)
{

  *(_QWORD *)a2 = a1;
  *(float *)(a2 + 8) = a3;
  *(float *)(a2 + 12) = a4;
  *(float *)(a2 + 16) = a5;
  *(float *)(a2 + 20) = a6;
  *(float *)(a2 + 24) = a7;
}

uint64_t SpotLightComponent.__toCore(_:)()
{
  RESpotLightComponentSetOuterAngle();
  RESpotLightComponentSetInnerAngle();
  RECGColorToColorGamut();
  RESpotLightComponentSetColorGamut3F();
  RESpotLightComponentSetIntensity();
  RESpotLightComponentSetAttenuationRadius();
  RESpotLightComponentSetAttenuationFalloffExponent();
  return RENetworkMarkComponentDirty();
}

float SpotLightComponent.attenuationFalloffExponent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

void protocol witness for static Component.__coreComponentType.getter in conformance SpotLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 50;
}

void SpotLightComponent.attenuationFalloffExponent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 24) = a1;
}

float (*SpotLightComponent.attenuationFalloffExponent.modify(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 24);
  return SpotLightComponent.attenuationFalloffExponent.modify;
}

float SpotLightComponent.attenuationFalloffExponent.modify(float *a1)
{
  float result;

  result = a1[2];
  *(float *)(*(_QWORD *)a1 + 24) = result;
  return result;
}

float SpotLightComponent.Shadow.depthBias.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

float (*SpotLightComponent.Shadow.depthBias.modify(uint64_t a1))(uint64_t a1)
{
  _DWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return SpotLightComponent.Shadow.depthBias.modify;
}

float SpotLightComponent.Shadow.depthBias.modify(uint64_t a1)
{
  float result;

  result = *(float *)(a1 + 8);
  **(float **)a1 = result;
  return result;
}

void SpotLightComponent.Shadow.cullModeOverride.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

_BYTE *(*SpotLightComponent.Shadow.cullModeOverride.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 4);
  return SpotLightComponent.Shadow.cullModeOverride.modify;
}

_BYTE *SpotLightComponent.Shadow.cullModeOverride.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 4) = result[8];
  return result;
}

uint64_t static SpotLightComponent.Shadow.ShadowClippingPlane.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = *(unsigned __int8 *)(a2 + 4);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(float *)a1 == *(float *)a2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = *(unsigned __int8 *)(a2 + 4);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(float *)a1 == *(float *)a2;
  return result;
}

void SpotLightComponent.Shadow.zNear.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = *(_BYTE *)(v1 + 12);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t *(*SpotLightComponent.Shadow.zNear.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;
  int v3;

  *(_QWORD *)a1 = v1;
  v2 = *(_BYTE *)(v1 + 12);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v2;
  return SpotLightComponent.Shadow.zNear.modify;
}

uint64_t *SpotLightComponent.Shadow.zNear.modify(uint64_t *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = *result;
  v2 = *((_DWORD *)result + 2);
  v3 = *((_BYTE *)result + 12);
  if (v3)
    v2 = 0;
  *(_DWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 12) = v3;
  return result;
}

void SpotLightComponent.Shadow.zFar.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = *(_BYTE *)(v1 + 20);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t *(*SpotLightComponent.Shadow.zFar.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;
  int v3;

  *(_QWORD *)a1 = v1;
  v2 = *(_BYTE *)(v1 + 20);
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v2;
  return SpotLightComponent.Shadow.zFar.modify;
}

uint64_t *SpotLightComponent.Shadow.zFar.modify(uint64_t *result)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = *result;
  v2 = *((_DWORD *)result + 2);
  v3 = *((_BYTE *)result + 12);
  if (v3)
    v2 = 0;
  *(_DWORD *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 20) = v3;
  return result;
}

void __swiftcall SpotLightComponent.Shadow.init(depthBias:cullMode:zNear:zFar:)(RealityKit::SpotLightComponent::Shadow *__return_ptr retstr, Swift::Float depthBias, RealityFoundation::MaterialParameterTypes::FaceCulling_optional cullMode, Swift::Float zNear, Swift::Float zFar)
{
  RealityFoundation::MaterialParameterTypes::FaceCulling v5;

  v5 = *(_BYTE *)cullMode.value;
  retstr->__depthBias = depthBias;
  retstr->__cullModeOverride.value = v5;
  retstr->__zNear.value = 0.0;
  retstr->__zNear.is_nil = 1;
  retstr->__zFar.value = 0.0;
  retstr->__zFar.is_nil = 1;
}

uint64_t SpotLightComponent.Shadow.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  char v26;
  int v27;
  char v28;

  v22 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = *((_BYTE *)v1 + 4);
  v11 = v1[2];
  v12 = *((unsigned __int8 *)v1 + 12);
  v13 = v1[4];
  v14 = *((unsigned __int8 *)v1 + 20);
  v23 = v9;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v15 + 32) = 0x6169426874706564;
  *(_QWORD *)(v15 + 40) = 0xE900000000000073;
  v16 = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v15 + 48) = v9;
  *(_QWORD *)(v15 + 72) = v16;
  *(_QWORD *)(v15 + 80) = 0xD000000000000010;
  *(_QWORD *)(v15 + 88) = 0x800000021BE820F0;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  *(_BYTE *)(v15 + 96) = v10;
  *(_QWORD *)(v15 + 120) = v17;
  *(_QWORD *)(v15 + 128) = 0x7261654E7ALL;
  *(_QWORD *)(v15 + 136) = 0xE500000000000000;
  if (v12)
    v18 = 0;
  else
    v18 = v11;
  *(_DWORD *)(v15 + 144) = v18;
  *(_BYTE *)(v15 + 148) = v12;
  *(_QWORD *)(v15 + 168) = &type metadata for SpotLightComponent.Shadow.ShadowClippingPlane;
  *(_QWORD *)(v15 + 176) = 1918977658;
  *(_QWORD *)(v15 + 184) = 0xE400000000000000;
  *(_QWORD *)(v15 + 216) = &type metadata for SpotLightComponent.Shadow.ShadowClippingPlane;
  if (v14)
    v19 = 0;
  else
    v19 = v13;
  *(_DWORD *)(v15 + 192) = v19;
  *(_BYTE *)(v15 + 196) = v14;
  v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static SpotLightComponent.Shadow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  char v4;
  float v5;
  char v6;
  int v7;
  char v8;
  char v9;
  uint64_t result;

  if (*(float *)a1 != *(float *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 12);
  v5 = *(float *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 20);
  v7 = *(unsigned __int8 *)(a2 + 4);
  v8 = *(_BYTE *)(a2 + 12);
  v9 = *(_BYTE *)(a2 + 20);
  if (v2 == 3)
  {
    if (v7 != 3)
      return 0;
  }
  else
  {
    result = 0;
    if (v7 == 3 || v2 != v7)
      return result;
  }
  if ((v4 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 12))
      return 0;
  }
  else
  {
    if (v3 != *(float *)(a2 + 8))
      v8 = 1;
    if ((v8 & 1) != 0)
      return 0;
  }
  if ((v6 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return 0;
  }
  else
  {
    if (v5 != *(float *)(a2 + 16))
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  return 1;
}

BOOL specialized static SpotLightComponent.== infix(_:_:)(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  char v10;
  _BOOL8 result;
  float v15;
  float v16;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v15 = a2[6];
  v16 = a1[6];
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  v10 = static _CFObject.== infix(_:_:)();
  result = 0;
  if ((v10 & 1) != 0 && v2 == v6 && v3 == v7 && v4 == v8 && v5 == v9)
    return v16 == v15;
  return result;
}

float sub_21BAEF62C@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 24);
  *a2 = result;
  return result;
}

float sub_21BAEF638(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(float *)(a2 + 24) = *a1;
  return result;
}

float sub_21BAEF644@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_21BAEF650(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_21BAEF65C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 4);
  return result;
}

_BYTE *sub_21BAEF668(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 4) = *result;
  return result;
}

uint64_t sub_21BAEF674@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  char v3;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(_BYTE *)(result + 12);
  if (v3)
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

int *sub_21BAEF690(int *result, uint64_t a2)
{
  int v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_DWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 12) = v3;
  return result;
}

uint64_t sub_21BAEF6AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  char v3;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(_BYTE *)(result + 20);
  if (v3)
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

int *sub_21BAEF6C8(int *result, uint64_t a2)
{
  int v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_DWORD *)(a2 + 16) = v2;
  *(_BYTE *)(a2 + 20) = v3;
  return result;
}

uint64_t initializeWithCopy for SpotLightComponent(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for SpotLightComponent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SpotLightComponent(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpotLightComponent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 28))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotLightComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotLightComponent()
{
  return &type metadata for SpotLightComponent;
}

__n128 __swift_memcpy21_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpotLightComponent.Shadow(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 253);
  if (*(unsigned __int8 *)(a1 + 4) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 4) < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotLightComponent.Shadow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotLightComponent.Shadow()
{
  return &type metadata for SpotLightComponent.Shadow;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t getEnumTag for SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotLightComponent.Shadow.ShadowClippingPlane()
{
  return &type metadata for SpotLightComponent.Shadow.ShadowClippingPlane;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS17RealityFoundation13AudioMixGroupV_G_s6UInt64Vs5NeverOTg504_s17e12Foundation23gh105GroupsComponentV013removeDeleteddE033_08DDF3E25FB130FB10258EDBEAA04A6FLL9componentys13OpaquePointerV_tFs6j7VAA0cD5I53Vcfu_33_84c271c9209633a7b8bbe39b70b1e066AlJTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v35 = *(_QWORD *)(a1 + 16);
  v37 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v37;
  result = specialized Dictionary.Values.startIndex.getter(a1);
  v5 = result;
  v7 = v35;
  v6 = a1;
  v8 = 0;
  v10 = v9 & 1;
  v11 = a1 + 64;
  v12 = v4;
  v13 = a1 + 96;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v6 + 32))
  {
    v15 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v11 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_29;
    if (*(_DWORD *)(v6 + 36) != (_DWORD)v4)
      goto LABEL_30;
    v16 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80 * v5);
    v18 = *(_QWORD *)(v37 + 16);
    v17 = *(_QWORD *)(v37 + 24);
    if (v18 >= v17 >> 1)
    {
      v31 = v4;
      v32 = v13;
      v33 = v12;
      v34 = v11;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      v4 = v31;
      v13 = v32;
      v12 = v33;
      v11 = v34;
      v7 = v35;
      v6 = a1;
    }
    *(_QWORD *)(v37 + 16) = v18 + 1;
    *(_QWORD *)(v37 + 8 * v18 + 32) = v16;
    if ((v10 & 1) != 0)
      goto LABEL_34;
    v14 = 1 << *(_BYTE *)(v6 + 32);
    if (v5 >= v14)
      goto LABEL_31;
    v19 = *(_QWORD *)(v11 + 8 * v15);
    if ((v19 & (1 << v5)) == 0)
      goto LABEL_32;
    if (*(_DWORD *)(v6 + 36) != (_DWORD)v4)
      goto LABEL_33;
    v20 = v19 & (-2 << (v5 & 0x3F));
    if (v20)
    {
      v14 = __clz(__rbit64(v20)) | v5 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = v15 + 1;
      v22 = (unint64_t)(v14 + 63) >> 6;
      if (v15 + 1 < v22)
      {
        v23 = *(_QWORD *)(v11 + 8 * v21);
        if (!v23)
        {
          v21 = v15 + 2;
          if (v15 + 2 >= v22)
            goto LABEL_4;
          v23 = *(_QWORD *)(v11 + 8 * v21);
          if (!v23)
          {
            v21 = v15 + 3;
            if (v15 + 3 >= v22)
              goto LABEL_4;
            v23 = *(_QWORD *)(v11 + 8 * v21);
            if (!v23)
            {
              while (v22 - 4 != v15)
              {
                v23 = *(_QWORD *)(v13 + 8 * v15++);
                if (v23)
                {
                  v24 = v5;
                  v25 = v11;
                  v26 = v12;
                  v27 = v13;
                  result = outlined consume of [String : AnimationResource].Index._Variant(v24, v4, 0);
                  v13 = v27;
                  v12 = v26;
                  v11 = v25;
                  v7 = v35;
                  v6 = a1;
                  v21 = v15 + 3;
                  goto LABEL_18;
                }
              }
              v28 = v11;
              v29 = v12;
              v30 = v13;
              result = outlined consume of [String : AnimationResource].Index._Variant(v5, v4, 0);
              v13 = v30;
              v12 = v29;
              v11 = v28;
              v7 = v35;
              v6 = a1;
              goto LABEL_4;
            }
          }
        }
LABEL_18:
        v14 = __clz(__rbit64(v23)) + (v21 << 6);
      }
    }
LABEL_4:
    v10 = 0;
    ++v8;
    v4 = v12;
    v5 = v14;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void static AudioMixGroupsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3013;
}

uint64_t AudioMixGroupsComponent.mixGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioMixGroupsComponent.mixGroups.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AudioMixGroupsComponent.mixGroups.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::AudioMixGroupsComponent __swiftcall AudioMixGroupsComponent.init(mixGroups:)(Swift::OpaquePointer mixGroups)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  RealityFoundation::AudioMixGroupsComponent result;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v3 = v1;
  v4 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = *((_QWORD *)mixGroups._rawValue + 2);
  if (v5)
  {
    v30 = v3;
    swift_bridgeObjectRetain();
    v6 = (char *)mixGroups._rawValue + 56;
    while (1)
    {
      v31 = v5;
      v32 = *((_QWORD *)v6 - 3);
      v33 = *((_QWORD *)v6 - 2);
      v34 = *(v6 - 8);
      v35 = *(_QWORD *)v6;
      v8 = v6[8];
      v9 = v6[9];
      v11 = *((_QWORD *)v6 + 2);
      v10 = *((_QWORD *)v6 + 3);
      v13 = *((_QWORD *)v6 + 4);
      v12 = *((_QWORD *)v6 + 5);
      v14 = v6[48];
      swift_bridgeObjectRetain_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      v18 = v4[2];
      v19 = (v16 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        break;
      v21 = v16;
      if (v4[3] >= v20)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
        v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_18;
        v17 = v22;
      }
      if ((v21 & 1) != 0)
      {
        v7 = v4[7] + 80 * v17;
        *(_QWORD *)v7 = v32;
        *(_QWORD *)(v7 + 8) = v33;
        *(_BYTE *)(v7 + 16) = v34;
        *(_QWORD *)(v7 + 24) = v35;
        *(_BYTE *)(v7 + 32) = v8;
        *(_BYTE *)(v7 + 33) = v9;
        *(_QWORD *)(v7 + 40) = v11;
        *(_QWORD *)(v7 + 48) = v10;
        *(_QWORD *)(v7 + 56) = v13;
        *(_QWORD *)(v7 + 64) = v12;
        *(_BYTE *)(v7 + 72) = v14;
        swift_bridgeObjectRelease();
      }
      else
      {
        v4[(v17 >> 6) + 8] |= 1 << v17;
        v24 = (uint64_t *)(v4[6] + 16 * v17);
        *v24 = v11;
        v24[1] = v10;
        v25 = v4[7] + 80 * v17;
        *(_QWORD *)v25 = v32;
        *(_QWORD *)(v25 + 8) = v33;
        *(_BYTE *)(v25 + 16) = v34;
        *(_QWORD *)(v25 + 24) = v35;
        *(_BYTE *)(v25 + 32) = v8;
        *(_BYTE *)(v25 + 33) = v9;
        *(_QWORD *)(v25 + 40) = v11;
        *(_QWORD *)(v25 + 48) = v10;
        *(_QWORD *)(v25 + 56) = v13;
        *(_QWORD *)(v25 + 64) = v12;
        *(_BYTE *)(v25 + 72) = v14;
        v26 = v4[2];
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_17;
        v4[2] = v28;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 += 80;
      v5 = v31 - 1;
      if (v31 == 1)
      {
        swift_bridgeObjectRelease();
        v3 = v30;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    result.mixGroups._rawValue = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_15:
    result.mixGroups._rawValue = (void *)swift_bridgeObjectRelease();
    *v3 = v4;
  }
  return result;
}

uint64_t AudioMixGroupsComponent.set(_:)(_OWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _OWORD v17[2];
  __int128 v18;
  _OWORD v19[2];

  v2 = v1;
  v3 = a1[3];
  v18 = a1[2];
  v19[0] = v3;
  *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)a1 + 57);
  v4 = a1[1];
  v17[0] = *a1;
  v17[1] = v4;
  if (one-time initialization token for audio != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.audio);
  outlined retain of AudioMixGroup((uint64_t)v17);
  outlined retain of AudioMixGroup((uint64_t)v17);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = *((_QWORD *)&v18 + 1);
    v11 = *(_QWORD *)&v19[0];
    outlined retain of AudioMixGroup((uint64_t)v17);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined release of AudioMixGroup((uint64_t)v17);
    outlined release of AudioMixGroup((uint64_t)v17);
    outlined release of AudioMixGroup((uint64_t)v17);
    _os_log_impl(&dword_21B9AA000, v6, v7, "[API/RealityKit] AudioMixGroupsComponent.set %s.", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v9, -1, -1);
    MEMORY[0x220772F44](v8, -1, -1);
  }
  else
  {
    outlined release of AudioMixGroup((uint64_t)v17);
    outlined release of AudioMixGroup((uint64_t)v17);
  }

  v12 = *((_QWORD *)&v18 + 1);
  v13 = *(_QWORD *)&v19[0];
  outlined retain of AudioMixGroup((uint64_t)v17);
  outlined retain of AudioMixGroup((uint64_t)v17);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v2;
  *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v12, v13, isUniquelyReferenced_nonNull_native);
  *v2 = v16;
  swift_bridgeObjectRelease();
  return outlined release of AudioMixGroup((uint64_t)v17);
}

Swift::Void __swiftcall AudioMixGroupsComponent.remove(named:)(Swift::String named)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8[6];

  object = named._object;
  countAndFlagsBits = named._countAndFlagsBits;
  if (one-time initialization token for audio != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.audio);
  swift_bridgeObjectRetain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v8[0] = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_21B9AA000, v4, v5, "[API/RealityKit] AudioMixGroupsComponent.remove %s.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v7, -1, -1);
    MEMORY[0x220772F44](v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  specialized Dictionary._Variant.removeValue(forKey:)(countAndFlagsBits, (uint64_t)object, (uint64_t)v8);
  swift_bridgeObjectRelease();
}

double AudioMixGroupsComponent.mixGroup(named:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double result;

  v5 = *v3;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v5 + 56) + 80 * v8;
      v11 = *(_BYTE *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      v13 = *(_BYTE *)(v10 + 32);
      v14 = *(_BYTE *)(v10 + 33);
      v16 = *(_QWORD *)(v10 + 40);
      v15 = *(_QWORD *)(v10 + 48);
      v17 = *(_BYTE *)(v10 + 72);
      *(_OWORD *)a3 = *(_OWORD *)v10;
      *(_BYTE *)(a3 + 16) = v11;
      *(_QWORD *)(a3 + 24) = v12;
      *(_BYTE *)(a3 + 32) = v13;
      *(_BYTE *)(a3 + 33) = v14;
      *(_QWORD *)(a3 + 40) = v16;
      *(_QWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 56) = *(_OWORD *)(v10 + 56);
      *(_BYTE *)(a3 + 72) = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return result;
    }
    swift_bridgeObjectRelease();
  }
  result = 0.0;
  *(_OWORD *)(a3 + 57) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t AudioMixGroupsComponent.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static AudioMixGroupsComponent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

Swift::Int AudioMixGroupsComponent.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioMixGroupsComponent()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioMixGroupsComponent(uint64_t a1)
{
  uint64_t *v1;

  specialized Dictionary<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioMixGroupsComponent()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioMixGroupsComponent(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t static AudioMixGroupsComponent.__fromCore(_:)()
{
  uint64_t result;
  __int128 v1;

  (id)REAudioMixGroupsComponentGetGroups();
  *(_QWORD *)&v1 = 0;
  type metadata accessor for NSDictionary();
  result = static Array._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in static AudioMixGroupsComponent.__fromCore(_:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  id v4;
  uint64_t result;
  id v6;
  int v7;
  uint64_t v8;
  int v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v3 = *a1;
  *(_QWORD *)&v29 = 1701667150;
  *((_QWORD *)&v29 + 1) = 0xE400000000000000;
  v4 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  result = swift_unknownObjectRelease();
  if (!v4)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v28, &v29);
  swift_dynamicCast();
  v30 = v26;
  v15 = v27;
  *(_QWORD *)&v24 = 17481;
  *((_QWORD *)&v24 + 1) = 0xE200000000000000;
  v6 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  outlined init with take of Any?((uint64_t)v23, (uint64_t)&v24);
  if (v25)
  {
    v7 = swift_dynamicCast();
    if (v7)
      v8 = v21;
    else
      v8 = 0;
    v9 = v7 ^ 1;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v24);
    v8 = 0;
    v9 = 1;
  }
  *(_QWORD *)&v24 = 1852399943;
  *((_QWORD *)&v24 + 1) = 0xE400000000000000;
  v10 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  result = swift_unknownObjectRelease();
  if (!v10)
    goto LABEL_18;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v23, &v24);
  swift_dynamicCast();
  v11 = v22;
  *(_QWORD *)&v21 = 0x6465657053;
  *((_QWORD *)&v21 + 1) = 0xE500000000000000;
  v12 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  result = swift_unknownObjectRelease();
  if (!v12)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v20, &v21);
  swift_dynamicCast();
  v13 = v19;
  *(_QWORD *)&v18 = 0x746174536574754DLL;
  *((_QWORD *)&v18 + 1) = 0xE900000000000065;
  v14 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  result = swift_unknownObjectRelease();
  if (!v14)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v17, &v18);
  result = swift_dynamicCast();
  if (v9)
  {
    result = REAudioMixGroupsComponentCreateMixGroupID();
    v8 = result;
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = v30;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v11;
  *(_QWORD *)(a2 + 64) = v13;
  *(_BYTE *)(a2 + 72) = v16;
  return result;
}

uint64_t AudioMixGroupsComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v26;
  int64_t v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char v36;

  v2 = *a1;
  v3 = *v1;
  *(_QWORD *)&v28 = *v1;
  AudioMixGroupsComponent.removeDeletedMixGroups(component:)();
  if (one-time initialization token for audio != -1)
LABEL_31:
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.audio);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_21B9AA000, v5, v6, "[RealityKit/CoreRE] [MixGroup] About to update mix groups.", v7, 2u);
    MEMORY[0x220772F44](v7, -1, -1);
  }

  v8 = v3 + 64;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v3 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v12)
      goto LABEL_29;
    v26 = *(_QWORD *)(v8 + 8 * v14);
    if (!v26)
      break;
LABEL_24:
    v11 = (v26 - 1) & v26;
    v16 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_8:
    v17 = *(_QWORD *)(v3 + 56) + 80 * v16;
    v18 = *(_BYTE *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    v20 = *(_BYTE *)(v17 + 32);
    v21 = *(_BYTE *)(v17 + 33);
    v22 = *(_QWORD *)(v17 + 40);
    v23 = *(_QWORD *)(v17 + 48);
    v24 = *(_BYTE *)(v17 + 72);
    v28 = *(_OWORD *)v17;
    v29 = v18;
    v30 = v19;
    v31 = v20;
    v32 = v21;
    v33 = v22;
    v34 = v23;
    v35 = *(_OWORD *)(v17 + 56);
    v36 = v24;
    result = closure #1 in AudioMixGroupsComponent.__toCore(_:)((double *)&v28, v2);
  }
  v27 = v14 + 1;
  if (v14 + 1 >= v12)
    goto LABEL_29;
  v26 = *(_QWORD *)(v8 + 8 * v27);
  if (v26)
    goto LABEL_23;
  v27 = v14 + 2;
  if (v14 + 2 >= v12)
    goto LABEL_29;
  v26 = *(_QWORD *)(v8 + 8 * v27);
  if (v26)
    goto LABEL_23;
  v27 = v14 + 3;
  if (v14 + 3 >= v12)
    goto LABEL_29;
  v26 = *(_QWORD *)(v8 + 8 * v27);
  if (v26)
    goto LABEL_23;
  v27 = v14 + 4;
  if (v14 + 4 >= v12)
    goto LABEL_29;
  v26 = *(_QWORD *)(v8 + 8 * v27);
  if (v26)
    goto LABEL_23;
  v27 = v14 + 5;
  if (v14 + 5 >= v12)
  {
LABEL_29:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v26 = *(_QWORD *)(v8 + 8 * v27);
  if (v26)
  {
LABEL_23:
    v14 = v27;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v14 >= v12)
      goto LABEL_29;
    v26 = *(_QWORD *)(v8 + 8 * v14);
    ++v27;
    if (v26)
      goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t AudioMixGroupsComponent.removeDeletedMixGroups(component:)()
{
  uint64_t result;
  uint64_t v1;

  (id)REAudioMixGroupsComponentGetGroups();
  v1 = 0;
  type metadata accessor for NSDictionary();
  result = static Array._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in AudioMixGroupsComponent.__toCore(_:)(double *a1, uint64_t a2)
{
  double v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 16);
  v5 = *((unsigned __int8 *)a1 + 32);
  v6 = *((unsigned __int8 *)a1 + 33);
  v8 = *((_QWORD *)a1 + 5);
  v7 = *((_QWORD *)a1 + 6);
  v9 = a1[7];
  v10 = a1[8];
  v44 = *((unsigned __int8 *)a1 + 72);
  if (REAudioMixGroupsComponentHasGroup())
  {
    v40 = v5;
    if (one-time initialization token for audio != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.audio);
    swift_bridgeObjectRetain_n();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_bridgeObjectRetain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v42 = v4;
      v14 = swift_slowAlloc();
      v38 = swift_slowAlloc();
      v46 = v38;
      *(_DWORD *)v14 = 136315906;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 1040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 18) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 28) = 1024;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v12, v13, "[RealityKit/CoreRE] [MixGroup] Updating %s. Speed: %.*fx. IsMuted: %{BOOL}d.", (uint8_t *)v14, 0x22u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v38, -1, -1);
      v15 = v14;
      v4 = v42;
      MEMORY[0x220772F44](v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    result = REAudioMixGroupsComponentUpdateGroup();
    v5 = v40;
    if (v6)
    {
      swift_bridgeObjectRetain_n();
      getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
      getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v43 = v4;
        v25 = swift_slowAlloc();
        v45 = v8;
        v26 = swift_slowAlloc();
        v46 = v26;
        *(_DWORD *)v25 = 136315650;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v7, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v25 + 12) = 1040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 18) = 2048;
        v5 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_21B9AA000, v23, v24, "[RealityKit/CoreRE] [MixGroup] Updating %s. Gain: %.*fdB.", (uint8_t *)v25, 0x1Cu);
        swift_arrayDestroy();
        v27 = v26;
        v8 = v45;
        MEMORY[0x220772F44](v27, -1, -1);
        v28 = v25;
        v4 = v43;
        MEMORY[0x220772F44](v28, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      result = REAudioMixGroupsComponentUpdateGroupGain();
      if (((v4 | v5) & 1) != 0)
        return result;
      goto LABEL_20;
    }
  }
  else
  {
    if (one-time initialization token for audio != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.audio);
    swift_bridgeObjectRetain_n();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_bridgeObjectRetain_n();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_bridgeObjectRetain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v41 = v5;
      v19 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v46 = v39;
      *(_DWORD *)v19 = 136316418;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 12) = 1040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 18) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 28) = 1040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 34) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 44) = 1024;
      swift_bridgeObjectRelease();
      v20 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v17, v18, "[RealityKit/CoreRE] [MixGroup] Creating %s. Gain: %.*fdB. Speed: %.*fx. IsMuted: %{BOOL}d.", (uint8_t *)v19, 0x32u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v39, -1, -1);
      v21 = v19;
      v5 = v41;
      MEMORY[0x220772F44](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      v20 = v44;
    }
    v31 = String.utf8CString.getter();
    v29 = v9;
    v30 = v10;
    MEMORY[0x22076B7A4](a2, *(_QWORD *)&v3, v31 + 32, v20, v29, v30);
    result = swift_release();
  }
  if (((v4 | v5) & 1) != 0)
    return result;
LABEL_20:
  v32 = v8;
  if (one-time initialization token for audio != -1)
    swift_once();
  v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.audio);
  swift_bridgeObjectRetain_n();
  getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
  getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
  getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
  getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc();
    v37 = swift_slowAlloc();
    v46 = v37;
    *(_DWORD *)v36 = 136316162;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v7, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 12) = 1040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 18) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 28) = 1040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 34) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21B9AA000, v34, v35, "[RealityKit/CoreRE] [MixGroup] Fading %s. Gain: %.*fdB. Duration: %.*fs", (uint8_t *)v36, 0x2Cu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v37, -1, -1);
    MEMORY[0x220772F44](v36, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return REAudioMixGroupsComponentFadeGroup();
}

void protocol witness for static Component.__coreComponentType.getter in conformance AudioMixGroupsComponent(_DWORD *a1@<X8>)
{
  *a1 = 3013;
}

uint64_t AudioMixGroupsComponent.customMirror.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v8 + 32) = 0x70756F724778696DLL;
  *(_QWORD *)(v8 + 40) = 0xE900000000000073;
  v9 = swift_bridgeObjectRetain();
  v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
  *(_QWORD *)(v8 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AudioMixGroup]);
  *(_QWORD *)(v8 + 48) = v10;
  v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t outlined retain of AudioMixGroup(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AudioMixGroup(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt8 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;

  v19 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v18 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v8 = v7 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v18)
      goto LABEL_25;
    v16 = *(_QWORD *)(v19 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v18)
        goto LABEL_25;
      v16 = *(_QWORD *)(v19 + 8 * v6);
      if (!v16)
        break;
    }
LABEL_24:
    v4 = (v16 - 1) & v16;
    v8 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    v9 = *(_QWORD *)(a2 + 56) + 80 * v8;
    v10 = *(_QWORD *)(v9 + 56);
    v11 = *(_QWORD *)(v9 + 64);
    v12 = *(_BYTE *)(v9 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v13 = v10;
    else
      v13 = 0;
    Hasher._combine(_:)(v13);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v14 = v11;
    else
      v14 = 0;
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v12);
    swift_bridgeObjectRelease();
    v5 ^= Hasher._finalize()();
  }
  v17 = v15 + 2;
  if (v17 >= v18)
  {
LABEL_25:
    swift_release();
    Hasher._combine(_:)(v5);
    return;
  }
  v16 = *(_QWORD *)(v19 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_24;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v18)
      goto LABEL_25;
    v16 = *(_QWORD *)(v19 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
}

unint64_t type metadata accessor for NSDictionary()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSDictionary;
  if (!lazy cache variable for type metadata for NSDictionary)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioMixGroupsComponent and conformance AudioMixGroupsComponent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioMixGroupsComponent and conformance AudioMixGroupsComponent;
  if (!lazy protocol witness table cache variable for type AudioMixGroupsComponent and conformance AudioMixGroupsComponent)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioMixGroupsComponent, &type metadata for AudioMixGroupsComponent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioMixGroupsComponent and conformance AudioMixGroupsComponent);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioMixGroupsComponent()
{
  return &type metadata for AudioMixGroupsComponent;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit17AudioFileResourceCG_s6UInt32Vs5NeverOTg504_s17d12Foundation22fg5Grouph26CyACSay0A3Kit0cdF0CGKcfcs6I55VAFcfu_33_0669798b827e02531357d74ef579fa48AfITf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int LayoutTag;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v9 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v9;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](v5, a1);
      else
        swift_retain();
      LayoutTag = REAudioFileAssetGetLayoutTag();
      swift_release();
      v8 = *(_QWORD *)(v9 + 16);
      v7 = *(_QWORD *)(v9 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      ++v5;
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_DWORD *)(v9 + 4 * v8 + 32) = LayoutTag;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v15 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (Swift::Int *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[5];

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1();
  result = Set.init(minimumCapacity:)();
  v9 = result;
  if (v2)
  {
    v4 = (__int128 *)(a1 + 32);
    do
    {
      v5 = v4[3];
      v10[2] = v4[2];
      v10[3] = v5;
      v10[4] = v4[4];
      v7 = *v4;
      v6 = v4[1];
      v4 += 5;
      v10[0] = v7;
      v10[1] = v6;
      specialized Set._Variant.insert(_:)((uint64_t)&v8, (Swift::Int)v10);
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type UUID? and conformance <A> A?();
  result = Set.init(minimumCapacity:)();
  v14 = result;
  if (v9)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    do
    {
      outlined init with copy of UUID?(v11, (uint64_t)v5);
      specialized Set._Variant.insert(_:)((uint64_t)v8, (uint64_t)v5);
      outlined destroy of UUID?((uint64_t)v8);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned int *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t AudioFileGroupResource.resources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioFileGroupResource.__allocating_init(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  v6[9] = dispatch thunk of Actor.unownedExecutor.getter();
  v6[10] = v7;
  return swift_task_switch();
}

uint64_t AudioFileGroupResource.__allocating_init(named:from:in:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;

  v1 = *(void **)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v13 = *(_QWORD *)(v0 + 32);
  v14 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 58;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 88) = v14;
  v6 = v1;
  static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:)(v13, v14, v1);
  v8 = v7;

  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v0 + 96) = v9;
  RERetain();
  swift_release();
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)
                                                          + async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = AudioFileGroupResource.__allocating_init(named:from:in:);
  return v12(v9, v13, (uint64_t)v14);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(void **)(v0 + 48);
  swift_release();
  type metadata accessor for AudioFileGroupResource();
  swift_allocObject();
  v3 = AudioFileGroupResource.init(fromCore:)(v1);
  RERelease();

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;

  swift_release();
  RERelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AudioFileGroupResource.__allocating_init(_:)(unint64_t a1)
{
  swift_allocObject();
  return AudioFileGroupResource.init(_:)(a1);
}

uint64_t AudioFileGroupResource.init(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  uint64_t v31;
  void *v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    if (v5)
      goto LABEL_3;
LABEL_28:
    swift_bridgeObjectRelease();
    swift_release();
    lazy protocol witness table accessor for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error();
    swift_allocError();
    v16 = 1;
    goto LABEL_29;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v31)
    goto LABEL_28;
LABEL_3:
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit17AudioFileResourceCG_s6UInt32Vs5NeverOTg504_s17d12Foundation22fg5Grouph26CyACSay0A3Kit0cdF0CGKcfcs6I55VAFcfu_33_0669798b827e02531357d74ef579fa48AfITf3nnnpk_nTf1cn_n(a1);
  v7 = specialized Set.init<A>(_:)(v6);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v8 != 1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    lazy protocol witness table accessor for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error();
    swift_allocError();
    v16 = 2;
LABEL_29:
    *v15 = v16;
    goto LABEL_30;
  }
  v9 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v9, (uint64_t)v35);
  v10 = v36;
  v11 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  specialized RandomNumberGenerator.next<A>(upperBound:)(0xFFFFFFFFFFFFFFFFLL);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13 = (void *)MEMORY[0x220768C3C](0xD000000000000014, 0x800000021BE87A50);
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14)
  {
    v34 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_33;
    }
    v33 = v13;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v14; ++i)
      {
        v18 = *(_QWORD *)(MEMORY[0x220769770](i, a1) + 16);
        swift_unknownObjectRelease();
        v20 = *(_QWORD *)(v34 + 16);
        v19 = *(_QWORD *)(v34 + 24);
        if (v20 >= v19 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        *(_QWORD *)(v34 + 16) = v20 + 1;
        *(_QWORD *)(v34 + 8 * v20 + 32) = v18;
      }
    }
    else
    {
      v21 = a1 + 32;
      v22 = *(_QWORD *)(v34 + 16);
      v23 = v14;
      do
      {
        v24 = *(_QWORD *)(*(_QWORD *)v21 + 16);
        v25 = *(_QWORD *)(v34 + 24);
        if (v22 >= v25 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v22 + 1, 1);
        *(_QWORD *)(v34 + 16) = v22 + 1;
        *(_QWORD *)(v34 + 8 * v22 + 32) = v24;
        v21 += 8;
        ++v22;
        --v23;
      }
      while (v23);
    }
    v13 = v33;
  }
  v14 = REAudioFileGroupAssetCreateWithFileAssets();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    swift_release();
    lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
    swift_allocError();
    *v30 = 0x2E6E776F6E6B6E55;
    v30[1] = 0xE800000000000000;
LABEL_30:
    swift_willThrow();
    type metadata accessor for AudioFileGroupResource();
    swift_deallocPartialClassInstance();
    return v2;
  }
  if (one-time initialization token for audio != -1)
LABEL_33:
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.audio);
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v29 = 134217984;
    v35[0] = REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21B9AA000, v27, v28, "[API/RealityKit] Loading an AudioFileGroupResource with REAssetID: %llu", v29, 0xCu);
    MEMORY[0x220772F44](v29, -1, -1);
  }

  *(_QWORD *)(v2 + 24) = a1;
  swift_release();
  v2 = AudioResource.init(fromCore:)(v14);
  RERelease();
  return v2;
}

uint64_t AudioFileGroupResource.__allocating_init(fromCore:)(uint64_t a1)
{
  swift_allocObject();
  return AudioFileGroupResource.init(fromCore:)(a1);
}

uint64_t AudioFileGroupResource.init(fromCore:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __objc2_class_ro *v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t AssetAtIndex;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_1;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[40];
  uint64_t v39;

  swift_retain();
  result = REAudioFileGroupAssetGetAssetCount();
  v4 = MEMORY[0x24BEE4AF8];
  v39 = MEMORY[0x24BEE4AF8];
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  v5 = result;
  if (!result)
    goto LABEL_24;
  v32 = v1;
  v6 = 0;
  v7 = &RKChangeSceneActionRuntimeTechnique;
  v8 = &unk_25519C000;
  v36 = xmmword_21BE411F0;
  v33 = a1;
  do
  {
    AssetAtIndex = REAudioFileGroupAssetGetAssetAtIndex();
    if (AssetAtIndex)
    {
      v13 = AssetAtIndex;
      v14 = (id)REAssetGetSwiftObject();
      type metadata accessor for AudioResource();
      if (swift_dynamicCastClass())
        goto LABEL_8;
      swift_unknownObjectRelease();
      v16 = REAssetHandleAssetType();
      if (v7[9].weak_ivar_lyt != (void *)-1)
        swift_once();
      v17 = v8[229];
      if (!*(_QWORD *)(v17 + 16) || (v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) == 0))
      {
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = v36;
        v10 = (id)REAssetGetType();
        *(_QWORD *)(v9 + 56) = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
        *(_QWORD *)(v9 + 64) = lazy protocol witness table accessor for type NSString and conformance NSObject();
        *(_QWORD *)(v9 + 32) = v10;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        v11 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        goto LABEL_5;
      }
      v20 = *(_QWORD *)(v17 + 56);
      v21 = *(_QWORD *)(v20 + 16 * v18 + 8);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 16);
      v34 = *(_OWORD *)(v20 + 16 * v18);
      v23 = v34;
      v24 = type metadata accessor for Optional();
      v35 = &v32;
      v25 = *(_QWORD *)(v24 - 8);
      v26 = MEMORY[0x24BDAC7A8](v24);
      v28 = (char *)&v32 - v27;
      v22(v13, v23, v21, v26);
      v29 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, v23) == 1)
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
        memset(v38, 0, sizeof(v38));
      }
      else
      {
        *(_OWORD *)&v38[24] = v34;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v38);
        (*(void (**)(uint64_t *, char *, uint64_t))(v29 + 32))(boxed_opaque_existential_1, v28, v23);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadableResource?);
      v31 = swift_dynamicCast();
      a1 = v33;
      v7 = &RKChangeSceneActionRuntimeTechnique;
      v8 = (_QWORD *)&unk_25519C000;
      if (v31)
      {
        if (v37)
        {
LABEL_8:
          type metadata accessor for AudioFileResource();
          if (swift_dynamicCastClass())
          {
            v15 = swift_retain();
            MEMORY[0x220768F0C](v15);
            if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          swift_release();
        }
      }
    }
LABEL_5:
    ++v6;
  }
  while (v5 != v6);
  v4 = v39;
  v1 = v32;
LABEL_24:
  *(_QWORD *)(v1 + 24) = v4;
  swift_release();
  return AudioResource.init(fromCore:)(a1);
}

uint64_t static AudioFileGroupResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
}

uint64_t AudioFileGroupResource.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t AudioFileGroupResource.deinit()
{
  uint64_t v0;

  v0 = AudioResource.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioFileGroupResource.__deallocating_deinit()
{
  AudioResource.deinit();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t AudioFileGroupResource.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v2 >= 1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v5 = MEMORY[0x220769770](i, v1);
        Hasher._combine(_:)(*(_QWORD *)(v5 + 16));
        swift_unknownObjectRelease();
      }
    }
    else
    {
      for (j = 0; j != v2; ++j)
      {
        v7 = *(_QWORD *)(v1 + 8 * j + 32);
        Hasher._combine(_:)(*(_QWORD *)(v7 + 16));
      }
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Int AudioFileGroupResource.hashValue.getter()
{
  Hasher.init(_seed:)();
  AudioFileGroupResource.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioFileGroupResource()
{
  Hasher.init(_seed:)();
  AudioFileGroupResource.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioFileGroupResource()
{
  return AudioFileGroupResource.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioFileGroupResource()
{
  Hasher.init(_seed:)();
  AudioFileGroupResource.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AudioFileGroupResource.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v8 + 32) = 0x656372756F736572;
  *(_QWORD *)(v8 + 40) = 0xE900000000000073;
  v9 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v8 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AudioFileResource]);
  *(_QWORD *)(v8 + 48) = v9;
  v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  type metadata accessor for AudioFileGroupResource();
  swift_retain();
  swift_bridgeObjectRetain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AudioFileGroupResource()
{
  return AudioFileGroupResource.customMirror.getter();
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x220772F5C](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x220772F5C](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AudioFileGroupResource()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error;
  if (!lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioFileGroupResource.Error, &type metadata for AudioFileGroupResource.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error;
  if (!lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioFileGroupResource.Error, &type metadata for AudioFileGroupResource.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.CoreREError and conformance AudioResource.CoreREError;
  if (!lazy protocol witness table cache variable for type AudioResource.CoreREError and conformance AudioResource.CoreREError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.CoreREError, &type metadata for AudioResource.CoreREError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.CoreREError and conformance AudioResource.CoreREError);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AudioFileGroupResource(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type AudioFileGroupResource and conformance AudioResource, a2, (uint64_t (*)(uint64_t))type metadata accessor for AudioFileGroupResource, (uint64_t)&protocol conformance descriptor for AudioResource);
}

uint64_t method lookup function for AudioFileGroupResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioFileGroupResource.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

unint64_t lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlane_v1, &type metadata for CollisionPlane_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlane_v1, &type metadata for CollisionPlane_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlane_v1, &type metadata for CollisionPlane_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlane_v1, &type metadata for CollisionPlane_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type UUID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UUID? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UUID?);
    v2 = lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE4AB0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory;
  if (!lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkSendBlockingCategory, &type metadata for NetworkSendBlockingCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory;
  if (!lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkSendBlockingCategory, &type metadata for NetworkSendBlockingCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory);
  }
  return result;
}

void static RKARSegmentationComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 46;
}

uint64_t RKARSegmentationComponent.segmentationBuffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RKARSegmentationComponent.segmentationBuffer.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*RKARSegmentationComponent.segmentationBuffer.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RKARSegmentationComponent.estimatedDepthData.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RKARSegmentationComponent.estimatedDepthData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*RKARSegmentationComponent.estimatedDepthData.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RKARSegmentationComponent.cameraTextureY.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RKARSegmentationComponent.cameraTextureY.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*RKARSegmentationComponent.cameraTextureY.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RKARSegmentationComponent.cameraTextureCbCr.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RKARSegmentationComponent.cameraTextureCbCr.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*RKARSegmentationComponent.cameraTextureCbCr.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RKARSegmentationComponent.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t RKARSegmentationComponent.init(segmentationBuffer:estimatedDepthData:cameraTextureY:cameraTextureCbCr:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

id static RKARSegmentationComponent.__fromCore(_:)@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  id v3;
  id v4;
  id result;

  v2 = (id)REARSegmentationComponentGetSegmentationBuffer();
  v3 = (id)REARSegmentationComponentGetEstimatedDepthData();
  v4 = (id)REARSegmentationComponentGetCameraTextureY();
  result = (id)REARSegmentationComponentGetCameraTextureCbCr();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = result;
  return result;
}

uint64_t RKARSegmentationComponent.__toCore(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  if (v1)
    REARSegmentationComponentSetSegmentationBuffer();
  if (v2)
    REARSegmentationComponentSetEstimatedDepthData();
  if (v4)
    REARSegmentationComponentSetCameraTextureY();
  if (v3)
    REARSegmentationComponentSetCameraTextureCbCr();
  return RENetworkMarkComponentDirty();
}

id protocol witness for static Component.__fromCore(_:) in conformance RKARSegmentationComponent@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  id v3;
  id v4;
  id result;

  v2 = (id)REARSegmentationComponentGetSegmentationBuffer();
  v3 = (id)REARSegmentationComponentGetEstimatedDepthData();
  v4 = (id)REARSegmentationComponentGetCameraTextureY();
  result = (id)REARSegmentationComponentGetCameraTextureCbCr();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance RKARSegmentationComponent()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  if (v1)
    REARSegmentationComponentSetSegmentationBuffer();
  if (v2)
    REARSegmentationComponentSetEstimatedDepthData();
  if (v4)
    REARSegmentationComponentSetCameraTextureY();
  if (v3)
    REARSegmentationComponentSetCameraTextureCbCr();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance RKARSegmentationComponent(_DWORD *a1@<X8>)
{
  *a1 = 46;
}

uint64_t destroy for RKARSegmentationComponent()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

_QWORD *initializeWithCopy for RKARSegmentationComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RKARSegmentationComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_OWORD *assignWithTake for RKARSegmentationComponent(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  *a1 = *a2;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RKARSegmentationComponent(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RKARSegmentationComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RKARSegmentationComponent()
{
  return &type metadata for RKARSegmentationComponent;
}

uint64_t __RKEntityTrigger.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKEntityTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEntityTrigger.reversible.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t __RKEntityTrigger.reversible.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t __RKEntityTrigger.shouldReverse.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t __RKEntityTrigger.shouldReverse.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 17) = a1;
  return result;
}

uint64_t (*__RKEntityTrigger.shouldReverse.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityTrigger.shouldFireAlternate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t __RKEntityTrigger.shouldFireAlternate.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 18) = a1;
  return result;
}

uint64_t (*__RKEntityTrigger.shouldFireAlternate.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityTrigger.matches(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  type metadata accessor for __RKEntityTriggerGroup();
  v1 = swift_dynamicCastClass();
  if (!v1)
    return 0;
  v2 = v1;
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 24);
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_4;
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    return v4;
  }
LABEL_23:
  swift_retain();
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_19;
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x220769770](0, v3);
LABEL_7:
    v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 184);
    v8 = v7(v6);
    swift_release();
    if ((v8 & 1) != 0)
    {
      v4 = 1;
    }
    else
    {
      v9 = 0;
      v10 = v4 - 1;
      while (1)
      {
        v4 = v10 != v9;
        if (v10 == v9)
          break;
        v11 = v9 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v12 = MEMORY[0x220769770](v9 + 1, v3);
          if (__OFADD__(v11, 1))
            goto LABEL_21;
        }
        else
        {
          if (v11 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_22;
          v12 = *(_QWORD *)(v3 + 8 * v9 + 40);
          swift_retain();
          if (__OFADD__(v11, 1))
          {
LABEL_21:
            __break(1u);
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        v13 = v7(v12);
        swift_release();
        ++v9;
        if ((v13 & 1) != 0)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityTrigger.description.getter()
{
  return _typeName(_:qualified:)();
}

uint64_t __RKEntityTrigger.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTrigger()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t __RKEntityTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for __RKEntityTrigger();
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for __RKEntityTrigger()
{
  return objc_opt_self();
}

uint64_t sub_21BAF43FC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_21BAF4440(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_21BAF4480@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 17);
  return result;
}

uint64_t sub_21BAF44C4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 17) = v2;
  return result;
}

uint64_t sub_21BAF4504@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 18);
  return result;
}

uint64_t sub_21BAF4548(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 18) = v2;
  return result;
}

uint64_t method lookup function for __RKEntityTrigger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityTrigger.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of __RKEntityTrigger.reversible.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of __RKEntityTrigger.reversible.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of __RKEntityTrigger.reversible.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldReverse.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldReverse.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldReverse.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldFireAlternate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldFireAlternate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldFireAlternate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of __RKEntityTrigger.matches(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of __RKEntityTrigger.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of __RKEntityTrigger.clone(matching:newEntity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

double AnimationView.init(name:source:targetPath:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double result;
  __int128 v31;
  char v36;
  char v37;
  int8x16_t v38;
  char v39;
  _BYTE v40[40];
  _OWORD v41[9];
  uint64_t v42;

  v22 = *(_QWORD *)a4;
  v23 = *(_QWORD *)(a4 + 8);
  v24 = *(_BYTE *)(a4 + 16);
  v25 = *a6;
  v26 = *a7;
  outlined init with copy of __REAssetService(a3, (uint64_t)v40);
  v38.i64[0] = v22;
  v38.i64[1] = v23;
  v39 = v24;
  v37 = v25;
  v36 = v26;
  AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)((uint64_t)v40, a1, a2, &v38, a5, &v37, &v36, a8, (uint64_t)v41, a10, a11, a12, a13 & 1, a14, a15 & 1, a16, a17 & 1);
  __swift_destroy_boxed_opaque_existential_1(a3);
  v27 = v41[7];
  *(_OWORD *)(a9 + 96) = v41[6];
  *(_OWORD *)(a9 + 112) = v27;
  *(_OWORD *)(a9 + 128) = v41[8];
  *(_QWORD *)(a9 + 144) = v42;
  v28 = v41[3];
  *(_OWORD *)(a9 + 32) = v41[2];
  *(_OWORD *)(a9 + 48) = v28;
  v29 = v41[5];
  *(_OWORD *)(a9 + 64) = v41[4];
  *(_OWORD *)(a9 + 80) = v29;
  result = *(double *)v41;
  v31 = v41[1];
  *(_OWORD *)a9 = v41[0];
  *(_OWORD *)(a9 + 16) = v31;
  return result;
}

uint64_t FromToByAnimation.init(name:from:to:by:duration:additive:targetPath:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, unsigned __int8 *a14, char *a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23)
{
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  _BYTE v46[12];
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67[2];
  char v68;
  uint64_t v69[2];
  int v70;
  char v71;

  v60 = a8;
  v62 = a6;
  v53 = a5;
  v63 = a4;
  v64 = a3;
  v61 = a2;
  v58 = a9;
  v59 = a1;
  v56 = a18;
  v57 = a16;
  v54 = a20;
  v52 = a23;
  v49 = a22;
  v55 = a17 & 1;
  v51 = a19 & 1;
  v50 = a21 & 1;
  v28 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v30 = &v46[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v31);
  v33 = &v46[-v32];
  v35 = MEMORY[0x24BDAC7A8](v34);
  v37 = &v46[-v36];
  v39 = *(_QWORD *)a7;
  v38 = *(_QWORD *)(a7 + 8);
  LOBYTE(a7) = *(_BYTE *)(a7 + 16);
  v47 = *a14;
  v40 = *a15;
  v42 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v41 + 16);
  v42(&v46[-v36], v64, v28, v35);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v42)(v33, v63, v28);
  v43 = v53;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v42)(v30, v53, v28);
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  v71 = 10;
  v67[0] = v39;
  v67[1] = v38;
  v68 = a7;
  v66 = v47;
  v65 = v40;
  FromToByAnimation.init(name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(v59, v61, (uint64_t)v37, (uint64_t)v33, (uint64_t)v30, v69, v62, v67, v58, a10, a11, a12, a13, v60, &v66, &v65, v57, v55, v56,
    v51,
    v54,
    v50,
    v49,
    v52);
  v44 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v44(v43, v28);
  v44(v63, v28);
  return ((uint64_t (*)(uint64_t, uint64_t))v44)(v64, v28);
}

uint64_t OrbitAnimation.init(name:duration:axis:startTransform:spinClockwise:orientToPath:rotationCount:additive:targetPath:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t *a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>, float a15@<S5>, double a16@<D6>, double a17@<D7>, char *a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,float a25)
{
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v49[2];
  char v50;
  char v51;
  char v52;
  char v53;
  char v54[8];
  _OWORD v55[9];
  uint64_t v56;
  char v57[10];

  v33 = *a6;
  v34 = a6[1];
  v35 = *((_BYTE *)a6 + 16);
  v36 = *a8;
  v37 = *a18;
  v49[0] = 0;
  v49[1] = 0;
  v50 = -1;
  v57[0] = v36;
  v54[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a1, a2, v49, 0, v57, v54, a19, a20 & 1, (uint64_t)v55, a16, a17, a25, a21, a22 & 1, a23, a24 & 1);
  type metadata accessor for TimelineDefinition();
  v38 = swift_allocObject();
  v39 = v55[7];
  *(_OWORD *)(a9 + 152) = v55[6];
  *(_OWORD *)(a9 + 168) = v39;
  *(_OWORD *)(a9 + 184) = v55[8];
  v40 = v55[3];
  *(_OWORD *)(a9 + 88) = v55[2];
  *(_OWORD *)(a9 + 104) = v40;
  v41 = v55[5];
  *(_OWORD *)(a9 + 120) = v55[4];
  *(_OWORD *)(a9 + 136) = v41;
  v42 = v55[1];
  *(_OWORD *)(a9 + 56) = v55[0];
  *(_QWORD *)(v38 + 16) = 0;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = v33;
  *(_QWORD *)(a9 + 24) = v34;
  *(_BYTE *)(a9 + 32) = v35;
  *(_DWORD *)(a9 + 36) = a7;
  *(_BYTE *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 41) = v37;
  *(_BYTE *)(a9 + 42) = 0;
  *(_BYTE *)(a9 + 43) = a5;
  *(_QWORD *)(a9 + 48) = v38;
  *(_QWORD *)(a9 + 200) = v56;
  *(_OWORD *)(a9 + 72) = v42;
  *(double *)(a9 + 208) = a10;
  *(_BYTE *)(a9 + 216) = 0;
  *(__n128 *)(a9 + 224) = a11;
  *(_BYTE *)(a9 + 240) = v53;
  *(__n128 *)(a9 + 256) = a12;
  *(__n128 *)(a9 + 272) = a13;
  *(__n128 *)(a9 + 288) = a14;
  *(_BYTE *)(a9 + 304) = v52;
  *(_BYTE *)(a9 + 305) = a3;
  *(_BYTE *)(a9 + 306) = a4;
  *(float *)(a9 + 308) = a15;
  *(_BYTE *)(a9 + 312) = v51;
  return swift_bridgeObjectRetain();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for AccessibilityComponent.RotorTypeInternal(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for __RKEntityTriggerSpecification);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for __RKEntityActionSpecification);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  int64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[10 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[10 * v2] && (unint64_t)v9 < a1 + 32 + 80 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 80 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[65 * v9 + 4];
  if (a1 + 32 < v10 + 520 * v8 && v10 < a1 + 32 + 520 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[13 * v8 + 4];
  if (a1 + 32 < v9 + 104 * v2 && v9 < a1 + 32 + 104 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t ChildCount;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v1;
  ChildCount = REEntityGetChildCount();
  if (ChildCount < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v22 + v2;
    if (!__OFADD__(v22, v2))
      goto LABEL_8;
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v2 = ChildCount;
  if (ChildCount)
  {
    v6 = 0;
    while (v6 < REEntityGetChildCount())
    {
      if (v2 == ++v6)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_6:
  if ((unint64_t)*v3 >> 62)
    goto LABEL_26;
  v7 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v2;
  if (__OFADD__(v7, v2))
    goto LABEL_28;
LABEL_8:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v11 = 0;
  if ((isUniquelyReferenced_nonNull_bridgeObject & 1) != 0
    && (v9 & 0x8000000000000000) == 0
    && (v9 & 0x4000000000000000) == 0)
  {
    v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8)
    v13 = v8;
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x22076977C](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  *v3 = v14;
  v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (*(_QWORD *)(v12 + 24) >> 1) - v15;
  v17 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v29, v12 + 8 * v15 + 32, v16, a1);
  if (v17 < v2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v17 >= 1)
  {
    v18 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = __OFADD__(v18, v17);
    v20 = v18 + v17;
    if (v19)
    {
      __break(1u);
      goto LABEL_42;
    }
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
  }
  if (v17 == v16)
  {
LABEL_30:
    v16 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = specialized Entity.ChildCollection.IndexingIterator.next()();
    if (!v23)
      goto LABEL_23;
    v24 = v23;
    while (1)
    {
LABEL_33:
      v25 = *v3 & 0xFFFFFFFFFFFFFF8;
      if (v16 + 1 > *(_QWORD *)(v25 + 0x18) >> 1)
      {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v25 = *v3 & 0xFFFFFFFFFFFFFF8;
      }
      v26 = *(_QWORD *)(v25 + 24) >> 1;
      if (v16 < v26)
        break;
      *(_QWORD *)(v25 + 16) = v16;
    }
    v27 = v25 + 32;
    while (1)
    {
      *(_QWORD *)(v27 + 8 * v16++) = v24;
      v28 = specialized Entity.ChildCollection.IndexingIterator.next()();
      if (!v28)
        break;
      v24 = v28;
      if (v26 == v16)
      {
        v16 = v26;
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v26;
        goto LABEL_33;
      }
    }
LABEL_42:
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v16;
  }
LABEL_23:
  swift_release();
  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for __RKEntityInteractionSpecification);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 2 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 2 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized Array.append<A>(contentsOf:)(Swift::Int result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = String.UTF8View._foreignCount()();
    v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v3 = result & 0xFFFFFFFFFFFFLL;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *v2 = v4;
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || *((_QWORD *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6)
        v8 = v5 + v3;
      else
        v8 = v5;
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      *v2 = v4;
    }
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v9 & 1) != 0)
      goto LABEL_22;
    v10 = result;
    result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *v2 = v4;
        return result;
      }
      v11 = *((_QWORD *)v4 + 2);
      v12 = __OFADD__(v11, v10);
      v13 = v11 + v10;
      if (!v12)
      {
        *((_QWORD *)v4 + 2) = v13;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for Entity, &lazy protocol witness table cache variable for type [Entity] and conformance [A], &demangling cache variable for type metadata for [Entity], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for __REAsset, &lazy protocol witness table cache variable for type [__REAsset] and conformance [A], &demangling cache variable for type metadata for [__REAsset], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for __RKEntityTapTrigger, &lazy protocol witness table cache variable for type [__RKEntityTapTrigger] and conformance [A], &demangling cache variable for type metadata for [__RKEntityTapTrigger], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v5 + v3 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v4 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v3)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v8 = *(_QWORD *)(v4 + 16);
  if ((*(_QWORD *)(v4 + 24) >> 1) - v8 < v3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = (void *)(v4 + 8 * v8 + 32);
  if (a1 + 32 < (unint64_t)v9 + 8 * v3 && (unint64_t)v9 < a1 + 32 + 8 * v3)
    goto LABEL_21;
  memcpy(v9, (const void *)(a1 + 32), 8 * v3);
  if (!v3)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v2 = v4;
    return result;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v11, v3);
  v13 = v11 + v3;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v13;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x22076977C](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

char *specialized Array.append<A>(contentsOf:)(char *result, char *a2)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = (uint64_t)a2;
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v3[3] >> 1, v9 < v5))
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v3);
    v9 = v3[3] >> 1;
  }
  v11 = v3[2];
  v12 = v9 - v11;
  result = specialized UnsafeMutableBufferPointer._copyContents(initializing:)((char *)&v3[2 * v11 + 4], v9 - v11, v7, v6);
  if (v13 < v6)
    goto LABEL_15;
  if (v13 >= 1)
  {
    v14 = v3[2];
    v15 = __OFADD__(v14, v13);
    v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
LABEL_33:
      v23 = v12 + 1;
LABEL_34:
      v3[2] = v23;
      goto LABEL_13;
    }
    v3[2] = v16;
  }
  if (v13 != v12)
    goto LABEL_13;
LABEL_16:
  if (result)
    v17 = result == a2;
  else
    v17 = 1;
  if (!v17)
  {
    v12 = v3[2];
    v18 = result + 16;
    v19 = *(_QWORD *)result;
    v20 = *((_QWORD *)result + 1);
    while (1)
    {
      v21 = v3[3];
      v22 = v21 >> 1;
      v23 = v12 + 1;
      if ((uint64_t)(v21 >> 1) < v12 + 1)
      {
        v30 = a2;
        v28 = v3;
        v29 = v19;
        result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v12 + 1, 1, v28);
        v19 = v29;
        a2 = v30;
        v3 = result;
        v22 = *((_QWORD *)result + 3) >> 1;
        if (v12 >= v22)
          goto LABEL_21;
LABEL_24:
        v24 = &v3[2 * v12];
        v24[4] = v19;
        v24[5] = v20;
        if (v18 == a2)
          goto LABEL_34;
        v25 = v18;
        v18 += 16;
        while (1)
        {
          v26 = *(_OWORD *)v25;
          v25 += 16;
          v27 = v26;
          if (v22 - 1 == v12)
            break;
          *(_OWORD *)&v3[2 * v12++ + 6] = v27;
          v18 += 16;
          if (v25 == a2)
            goto LABEL_33;
        }
        v20 = *((_QWORD *)&v27 + 1);
        v19 = v27;
        v12 = v22;
        v3[2] = v22;
      }
      else
      {
        if (v12 < v22)
          goto LABEL_24;
LABEL_21:
        v3[2] = v12;
      }
    }
  }
LABEL_13:
  *(_QWORD *)v2 = v3;
  return result;
}

uint64_t static MeshResource.__generateFace(from:fillMesh:)(uint64_t a1, char a2)
{
  unint64_t v2;
  char **p_name;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  __int16 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  __int16 *v25;
  unsigned __int16 v26;
  int v27;
  unint64_t v28;
  id v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  outlined init with copy of Any(a1, (uint64_t)v30);
  type metadata accessor for ARFaceGeometry();
  swift_dynamicCast();
  p_name = &stru_24DFECFF8.name;
  v5 = (unint64_t)objc_msgSend(v29, sel_vertexCount);
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_35;
  v6 = v5;
  if (HIDWORD(v5))
    goto LABEL_35;
  v7 = (unint64_t)objc_msgSend(v29, sel_triangleCount);
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_35;
  v8 = v7;
  if (HIDWORD(v7))
    goto LABEL_35;
  v9 = (__int16 *)objc_msgSend(v29, sel_triangleIndices);
  v10 = (uint64_t)objc_msgSend(v29, sel_triangleCount);
  v11 = (unsigned __int128)(v10 * (__int128)3) >> 64;
  v12 = 3 * v10;
  if (v11 != (3 * v10) >> 63)
  {
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, (int64_t)p_name, 1);
    v13 = v30[0];
    goto LABEL_10;
  }
  if (!v12)
    goto LABEL_11;
  v30[0] = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 1)
    goto LABEL_30;
  if (*v9 < 0)
    goto LABEL_35;
  v13 = v30[0];
  v6 = (unsigned __int16)*v9;
  v2 = *(_QWORD *)(v30[0] + 16);
  v11 = *(_QWORD *)(v30[0] + 24);
  p_name = (char **)(v2 + 1);
  if (v2 >= v11 >> 1)
    goto LABEL_31;
LABEL_10:
  *(_QWORD *)(v13 + 16) = p_name;
  *(_DWORD *)(v13 + 4 * v2 + 32) = v6;
  v14 = v12 - 1;
  if (v12 != 1)
  {
    v24 = v2 + 9;
    v25 = v9 + 1;
    while (1)
    {
      v27 = *v25++;
      v26 = v27;
      if (v27 < 0)
        break;
      v30[0] = v13;
      v28 = *(_QWORD *)(v13 + 24);
      if (v24 - 8 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v24 - 7, 1);
        v13 = v30[0];
      }
      *(_QWORD *)(v13 + 16) = v24 - 7;
      *(_DWORD *)(v13 + 4 * v24++) = v26;
      if (!--v14)
        goto LABEL_11;
    }
    while (1)
    {
LABEL_35:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
LABEL_11:
  if ((a2 & 1) != 0)
  {
    if (v8 >= 0xFFFFFFDE)
    {
      __break(1u);
    }
    else
    {
      specialized Array.append<A>(contentsOf:)((uint64_t)&outlined read-only object #0 of static MeshResource.__generateFace(from:fillMesh:));
      v15 = v8 + 56;
      if (v8 + 34 < 0xFFFFFFEA)
      {
        specialized Array.append<A>(contentsOf:)((uint64_t)&outlined read-only object #1 of static MeshResource.__generateFace(from:fillMesh:));
        v8 += 78;
        if (v15 < 0xFFFFFFEA)
        {
          specialized Array.append<A>(contentsOf:)((uint64_t)&outlined read-only object #2 of static MeshResource.__generateFace(from:fillMesh:));
          goto LABEL_16;
        }
LABEL_34:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_34;
  }
LABEL_16:
  specialized Array.init(repeating:count:)(3, v8);
  specialized _copyCollectionToContiguousArray<A>(_:)((char *)objc_msgSend(v29, sel_vertices), (uint64_t)objc_msgSend(v29, sel_vertexCount));
  specialized _copyCollectionToContiguousArray<A>(_:)((char *)objc_msgSend(v29, sel_textureCoordinates), (uint64_t)objc_msgSend(v29, sel_vertexCount));
  swift_bridgeObjectRetain();
  v16 = REGeomMeshCreateFromCoreAttributes();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v16)
  {
    v17 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v17, (uint64_t)v30);
    v18 = v31;
    v19 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    v20 = REAssetManagerMeshMemoryAssetCreate();
    if (v20)
    {
      v21 = v20;
      swift_bridgeObjectRelease();
      if ((id)REAssetGetSwiftObject())
      {
        type metadata accessor for MeshResource();
        v22 = swift_dynamicCastClass();
        if (v22)
        {
LABEL_22:
          RERelease();
          RERelease();

          return v22;
        }
        swift_unknownObjectRelease();
      }
      type metadata accessor for MeshResource();
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v21;
      RERetain();
      REAssetSetSwiftObject();
      goto LABEL_22;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationResource?);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v4[2] = a2;
      v8 = v4;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v5 = a2 - 2;
        if (v5)
        {
          v6 = v4 + 6;
          do
          {
            *v6++ = a1;
            swift_retain();
            --v5;
          }
          while (v5);
        }
        swift_retain();
      }
    }
    else
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      swift_release();
    }
    specialized Array._endMutation()();
    return (uint64_t)v8;
  }
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __n128 *v8;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v5 = a1;
    if (a1)
    {
      type metadata accessor for simd_float4x4(0);
      result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(result + 16) = v5;
      v7 = 32;
      do
      {
        v8 = (__n128 *)(result + v7);
        *v8 = a2;
        v8[1] = a3;
        v8[2] = a4;
        v8[3] = a5;
        v7 += 64;
        --v5;
      }
      while (v5);
    }
    else
    {
      return MEMORY[0x24BEE4AF8];
    }
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __n128 *v7;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v4 = a1;
    if (a1)
    {
      result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(result + 16) = v4;
      v6 = 32;
      do
      {
        v7 = (__n128 *)(result + v6);
        *v7 = a2;
        v7[1] = a3;
        v7[2] = a4;
        v6 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      return MEMORY[0x24BEE4AF8];
    }
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(char a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1 & 1, a2);
    return v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, double a2, double a3)
{
  uint64_t result;
  double *v5;
  unint64_t v6;
  double v7;
  double v8;
  int64x2_t v9;
  int64x2_t v10;
  double *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  type metadata accessor for CGPoint(0);
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v5 = (double *)(result + 32);
  if (a1 < 4)
  {
    v6 = 0;
    v7 = a3;
    v8 = a2;
LABEL_9:
    v14 = a1 - v6;
    do
    {
      *v5 = v8;
      v5[1] = v7;
      v5 += 2;
      --v14;
    }
    while (v14);
    return result;
  }
  v6 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += 2 * (a1 & 0xFFFFFFFFFFFFFFFCLL);
  v8 = a2;
  v9 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v7 = a3;
  v10 = vdupq_lane_s64(*(uint64_t *)&a3, 0);
  v11 = (double *)(result + 64);
  v12 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v13 = v11 - 4;
    vst2q_f64(v13, *(float64x2x2_t *)v9.i8);
    vst2q_f64(v11, *(float64x2x2_t *)v9.i8);
    v11 += 8;
    v12 -= 4;
  }
  while (v12);
  if (v6 != a1)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  _WORD *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = vdupq_n_s16(a1);
  v8 = (int16x8_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, __n128 a2)
{
  uint64_t result;
  uint64_t v4;
  __n128 *v5;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v4 = 0;
    *(_QWORD *)(result + 16) = a1;
    do
    {
      v5 = (__n128 *)(result + 16 * v4++);
      v5[2] = a2;
    }
    while (a1 != v4);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

unint64_t type metadata accessor for ARFaceGeometry()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ARFaceGeometry;
  if (!lazy cache variable for type metadata for ARFaceGeometry)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARFaceGeometry);
  }
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  _OWORD v18[10];

  result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    v10 = 0;
LABEL_15:
    *a1 = a4;
    a1[1] = v10;
    return v10;
  }
  if (!a3)
  {
LABEL_13:
    v10 = a3;
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      v9 = (_OWORD *)(a4 + 32);
      v10 = 1;
      while (1)
      {
        v11 = v9[7];
        v18[6] = v9[6];
        v18[7] = v11;
        v12 = v9[9];
        v18[8] = v9[8];
        v18[9] = v12;
        v13 = v9[3];
        v18[2] = v9[2];
        v18[3] = v13;
        v14 = v9[5];
        v18[4] = v9[4];
        v18[5] = v14;
        v15 = v9[1];
        v18[0] = *v9;
        v18[1] = v15;
        memmove(a2, v9, 0xA0uLL);
        if (a3 == v10)
        {
          outlined retain of IKRig.Constraint((uint64_t)v18);
          goto LABEL_13;
        }
        v16 = *(_QWORD *)(a4 + 16);
        if (v10 == v16)
          break;
        a2 += 160;
        outlined retain of IKRig.Constraint((uint64_t)v18);
        v9 += 10;
        if (v10++ >= v16)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      outlined retain of IKRig.Constraint((uint64_t)v18);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  _OWORD v18[11];

  result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    v10 = 0;
LABEL_15:
    *a1 = a4;
    a1[1] = v10;
    return v10;
  }
  if (!a3)
  {
LABEL_13:
    v10 = a3;
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      v9 = (_OWORD *)(a4 + 32);
      v10 = 1;
      while (1)
      {
        v11 = v9[9];
        v18[8] = v9[8];
        v18[9] = v11;
        v18[10] = v9[10];
        v12 = v9[5];
        v18[4] = v9[4];
        v18[5] = v12;
        v13 = v9[7];
        v18[6] = v9[6];
        v18[7] = v13;
        v14 = v9[1];
        v18[0] = *v9;
        v18[1] = v14;
        v15 = v9[3];
        v18[2] = v9[2];
        v18[3] = v15;
        memmove(a2, v9, 0xB0uLL);
        if (a3 == v10)
        {
          outlined retain of String?((uint64_t)v18);
          goto LABEL_13;
        }
        v16 = *(_QWORD *)(a4 + 16);
        if (v10 == v16)
          break;
        a2 += 176;
        outlined retain of String?((uint64_t)v18);
        v9 += 11;
        if (v10++ >= v16)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      outlined retain of String?((uint64_t)v18);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = swift_bridgeObjectRelease();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = 0;
      v11 = a4 + 32;
      while (v10 < *(_QWORD *)(a4 + 16))
      {
        result = outlined init with copy of MeshResource._Proto_Level_v1(v11, a2);
        if (a3 - 1 == v10)
          goto LABEL_11;
        a2 += 96;
        ++v10;
        v11 += 96;
        if (v9 == v10)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    a3 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v7 = specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(a4);
  result = swift_release();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *a1 = v7;
    a1[1] = v7;
    a1[2] = a3;
    swift_bridgeObjectRetain();
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = v7[2];
    if (v9)
    {
      v10 = 0;
      v11 = (uint64_t)(v7 + 4);
      while (v10 < v7[2])
      {
        result = outlined init with copy of __REAssetService(v11, a2);
        if (a3 - 1 == v10)
          goto LABEL_11;
        a2 += 40;
        ++v10;
        v11 += 40;
        if (v9 == v10)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    a3 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  uint64_t PinCount;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[5];
  _BYTE v31[96];

  swift_retain();
  REPinComponentGetComponentType();
  if (REEntityGetComponentByClass())
    PinCount = REPinComponentGetPinCount();
  else
    PinCount = 0;
  result = swift_release();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    v10 = -1;
    goto LABEL_21;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v20 = a3;
    a3 = PinCount & ~(PinCount >> 63);
    if (PinCount >= 1)
    {
      v10 = 0;
      while (1)
      {
        REPinComponentGetComponentType();
        result = REEntityGetComponentByClass();
        if (!result)
          goto LABEL_23;
        REPinComponentGetPinNameAtIndex();
        v11 = String.init(cString:)();
        v13 = v12;
        REPinComponentGetPinOffsetPoseAtIndex();
        v15 = v14;
        HIDWORD(v15) = HIDWORD(v22);
        v21 = v16;
        v22 = v15;
        if (REPinComponentIsSkeletalJointPinAtIndex())
        {
          REPinComponentGetSkeletalJointNameAtIndex();
          v17 = String.init(cString:)();
          v19 = v18;
          swift_weakInit();
          v26 = 0;
          v27 = 0;
          v28 = v22;
          v29 = v21;
          swift_weakAssign();
          v24 = v11;
          v25 = v13;
          swift_bridgeObjectRelease();
          v26 = v17;
          v27 = v19;
        }
        else
        {
          swift_weakInit();
          v26 = 0;
          v27 = 0;
          v28 = v22;
          v29 = v21;
          swift_weakAssign();
          v24 = v11;
          v25 = v13;
          swift_bridgeObjectRelease();
          v26 = 0;
          v27 = 0;
        }
        outlined init with take of GeometricPin((uint64_t)v23, (uint64_t)v30);
        outlined init with take of GeometricPin((uint64_t)v30, (uint64_t)v31);
        outlined init with take of GeometricPin((uint64_t)v31, a2);
        if (v20 - 1 == v10)
        {
          a3 = v20;
          goto LABEL_21;
        }
        a2 += 80;
        if (a3 == ++v10)
          goto LABEL_19;
      }
    }
    v10 = 0;
LABEL_19:
    memset(v30, 0, sizeof(v30));
    outlined destroy of GeometricPin?((uint64_t)v30);
LABEL_21:
    *a1 = a4;
    a1[1] = PinCount;
    a1[2] = v10;
    return a3;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, _QWORD *a2, uint64_t a3)
{
  __int128 *v3;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30[8];
  char v31[8];
  char v32[8];
  uint64_t v33[2];
  char v34[8];
  unint64_t v35;
  uint64_t v36;

  v7 = v3[1];
  v27 = *v3;
  v28 = v7;
  v29 = *((_QWORD *)v3 + 4);
  outlined init with take of Transform?((uint64_t)&v27 + 8, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)&v35, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  v8 = v35;
  if (!v35)
  {
    outlined init with take of Transform?((uint64_t)&v27, (uint64_t)v30, &demangling cache variable for type metadata for AnimationLibraryResource?);
    outlined init with take of Transform?((uint64_t)v30, (uint64_t)&v36, &demangling cache variable for type metadata for AnimationLibraryResource?);
    if (v36)
      v9 = AnimationLibraryResource.keyedResources.getter();
    else
      v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v8 = v9;
  }
  outlined init with take of Transform?((uint64_t)&v27, (uint64_t)v34, &demangling cache variable for type metadata for AnimationLibraryResource?);
  outlined release of TimelineDefinition?((uint64_t)v34);
  outlined init with take of Transform?((uint64_t)&v28, (uint64_t)v33, &demangling cache variable for type metadata for String??);
  outlined release of String??(v33);
  outlined init with take of Transform?((uint64_t)&v29, (uint64_t)v32, &demangling cache variable for type metadata for [AnimationResource]?);
  result = outlined release of [String : String]((uint64_t)v32);
  v11 = v8 + 64;
  v12 = -1 << *(_BYTE *)(v8 + 32);
  if (-v12 < 64)
    v13 = ~(-1 << -(char)v12);
  else
    v13 = -1;
  v14 = v13 & *(_QWORD *)(v8 + 64);
  if (!a2)
  {
    v15 = 0;
    a3 = 0;
LABEL_44:
    *a1 = v8;
    a1[1] = v11;
    a1[2] = ~v12;
    a1[3] = v15;
    a1[4] = v14;
    return a3;
  }
  if (!a3)
  {
    v15 = 0;
    goto LABEL_44;
  }
  if (a3 < 0)
    goto LABEL_46;
  v15 = 0;
  v16 = 0;
  v17 = (unint64_t)(63 - v12) >> 6;
  v26 = -1 << *(_BYTE *)(v8 + 32);
  if (!v14)
    goto LABEL_14;
LABEL_13:
  v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v19 = v18 | (v15 << 6);
  while (1)
  {
    ++v16;
    v23 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v24 = v23[1];
    v25 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19);
    *a2 = *v23;
    a2[1] = v24;
    a2[2] = v25;
    if (v16 == a3)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_43;
    }
    a2 += 3;
    swift_bridgeObjectRetain();
    result = swift_retain();
    if (v14)
      goto LABEL_13;
LABEL_14:
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v20 >= v17)
      goto LABEL_38;
    v21 = *(_QWORD *)(v11 + 8 * v20);
    if (!v21)
    {
      v15 += 2;
      if (v20 + 1 >= v17)
      {
        v14 = 0;
        v15 = v20;
      }
      else
      {
        v21 = *(_QWORD *)(v11 + 8 * v15);
        if (v21)
          goto LABEL_19;
        v22 = v20 + 2;
        if (v20 + 2 >= v17)
          goto LABEL_38;
        v21 = *(_QWORD *)(v11 + 8 * v22);
        if (v21)
        {
LABEL_22:
          v20 = v22;
          goto LABEL_23;
        }
        v15 = v20 + 3;
        if (v20 + 3 < v17)
        {
          v21 = *(_QWORD *)(v11 + 8 * v15);
          if (v21)
          {
LABEL_19:
            v20 = v15;
            goto LABEL_23;
          }
          v22 = v20 + 4;
          if (v20 + 4 >= v17)
          {
LABEL_38:
            v14 = 0;
            goto LABEL_42;
          }
          v21 = *(_QWORD *)(v11 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              v20 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_47;
              if (v20 >= v17)
              {
                v14 = 0;
                v15 = v17 - 1;
                goto LABEL_42;
              }
              v21 = *(_QWORD *)(v11 + 8 * v20);
              ++v22;
              if (v21)
                goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
        v14 = 0;
        v15 = v20 + 2;
      }
LABEL_42:
      a3 = v16;
LABEL_43:
      v12 = v26;
      goto LABEL_44;
    }
LABEL_23:
    v14 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v15 = v20;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  char v31[8];
  char v32[8];
  unint64_t v33;
  uint64_t v34;

  v4 = v3;
  v8 = *(_OWORD *)(v3 + 16);
  v29[0] = *(_OWORD *)v3;
  v29[1] = v8;
  v30 = *(_QWORD *)(v3 + 32);
  outlined init with take of Transform?((uint64_t)v29 + 8, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  v9 = v33;
  if (!v33)
  {
    outlined init with take of Transform?((uint64_t)v29, (uint64_t)v31, &demangling cache variable for type metadata for AnimationLibraryResource?);
    outlined init with take of Transform?((uint64_t)v31, (uint64_t)&v34, &demangling cache variable for type metadata for AnimationLibraryResource?);
    if (v34)
      v10 = AnimationLibraryResource.keyedResources.getter();
    else
      v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v9 = v10;
  }
  v11 = v9 + 64;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = -1 << *(_BYTE *)(v9 + 32);
  outlined retain of [String : String]((uint64_t)v32);
  result = outlined release of AnimationLibraryComponent(v4);
  if (-v13 < 64)
    v15 = ~(-1 << -(char)v13);
  else
    v15 = -1;
  v16 = v15 & v12;
  if (!a2)
  {
    v17 = 0;
    a3 = 0;
LABEL_44:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = ~v13;
    a1[3] = v17;
    a1[4] = v16;
    return a3;
  }
  if (!a3)
  {
    v17 = 0;
    goto LABEL_44;
  }
  if (a3 < 0)
    goto LABEL_46;
  v17 = 0;
  v18 = 0;
  v28 = v13;
  v19 = (unint64_t)(63 - v13) >> 6;
  if (!v16)
    goto LABEL_14;
LABEL_13:
  v20 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v21 = v20 | (v17 << 6);
  while (1)
  {
    ++v18;
    v25 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v21);
    v26 = v25[1];
    v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    *a2 = *v25;
    a2[1] = v26;
    a2[2] = v27;
    if (v18 == a3)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_43;
    }
    a2 += 3;
    swift_bridgeObjectRetain();
    result = swift_retain();
    if (v16)
      goto LABEL_13;
LABEL_14:
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v22 >= v19)
      goto LABEL_38;
    v23 = *(_QWORD *)(v11 + 8 * v22);
    if (!v23)
    {
      v17 += 2;
      if (v22 + 1 >= v19)
      {
        v16 = 0;
        v17 = v22;
      }
      else
      {
        v23 = *(_QWORD *)(v11 + 8 * v17);
        if (v23)
          goto LABEL_19;
        v24 = v22 + 2;
        if (v22 + 2 >= v19)
          goto LABEL_38;
        v23 = *(_QWORD *)(v11 + 8 * v24);
        if (v23)
        {
LABEL_22:
          v22 = v24;
          goto LABEL_23;
        }
        v17 = v22 + 3;
        if (v22 + 3 < v19)
        {
          v23 = *(_QWORD *)(v11 + 8 * v17);
          if (v23)
          {
LABEL_19:
            v22 = v17;
            goto LABEL_23;
          }
          v24 = v22 + 4;
          if (v22 + 4 >= v19)
          {
LABEL_38:
            v16 = 0;
            goto LABEL_42;
          }
          v23 = *(_QWORD *)(v11 + 8 * v24);
          if (!v23)
          {
            while (1)
            {
              v22 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_47;
              if (v22 >= v19)
              {
                v16 = 0;
                v17 = v19 - 1;
                goto LABEL_42;
              }
              v23 = *(_QWORD *)(v11 + 8 * v22);
              ++v24;
              if (v23)
                goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
        v16 = 0;
        v17 = v22 + 2;
      }
LABEL_42:
      a3 = v18;
LABEL_43:
      v13 = v28;
      goto LABEL_44;
    }
LABEL_23:
    v16 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v17 = v22;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      v9 = (uint64_t *)(a4 + 48);
      v10 = 1;
      while (1)
      {
        v11 = *(v9 - 1);
        v12 = *v9;
        *a2 = *(v9 - 2);
        a2[1] = v11;
        a2[2] = v12;
        if (a3 == v10)
          break;
        v13 = *(_QWORD *)(a4 + 16);
        if (v10 == v13)
        {
          a3 = v10;
          break;
        }
        v9 += 3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2 += 3;
        if (v10++ >= v13)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  unint64_t v18;

  result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      v17 = a1;
      v18 = a3;
      v9 = (uint64_t *)(a4 + 72);
      v10 = 1;
      while (1)
      {
        v11 = *(v9 - 4);
        v13 = *(v9 - 3);
        v12 = *(v9 - 2);
        v15 = *(v9 - 1);
        v14 = *v9;
        *a2 = *(v9 - 5);
        a2[1] = v11;
        a2[2] = v13;
        a2[3] = v12;
        a2[4] = v15;
        a2[5] = v14;
        if (a3 == v10)
          break;
        a1 = *(_QWORD **)(a4 + 16);
        if ((_QWORD *)v10 == a1)
        {
          a3 = v10;
          break;
        }
        v9 += 6;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2 += 6;
        v16 = v10++ >= (unint64_t)a1;
        a3 = v18;
        if (v16)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1 = v17;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  unint64_t v20;

  result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      v9 = 0;
      v10 = 1;
      while (1)
      {
        v11 = a2 + v9;
        v12 = *(_QWORD *)(a4 + v9 + 40);
        v13 = *(_QWORD *)(a4 + v9 + 48);
        v14 = *(_QWORD *)(a4 + v9 + 56);
        v15 = *(_OWORD *)(a4 + v9 + 64);
        v16 = *(_OWORD *)(a4 + v9 + 80);
        v17 = *(_OWORD *)(a4 + v9 + 96);
        v18 = *(_OWORD *)(a4 + v9 + 112);
        v19 = *(_BYTE *)(a4 + v9 + 128);
        *(_QWORD *)v11 = *(_QWORD *)(a4 + v9 + 32);
        *(_QWORD *)(v11 + 8) = v12;
        *(_QWORD *)(v11 + 16) = v13;
        *(_QWORD *)(v11 + 24) = v14;
        *(_OWORD *)(v11 + 32) = v15;
        *(_OWORD *)(v11 + 48) = v16;
        *(_OWORD *)(v11 + 64) = v17;
        *(_OWORD *)(v11 + 80) = v18;
        *(_BYTE *)(v11 + 96) = v19;
        if (a3 == v10)
          break;
        v20 = *(_QWORD *)(a4 + 16);
        if (v10 == v20)
        {
          a3 = v10;
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 += 112;
        if (v10++ >= v20)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  _QWORD *v22;

  result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      v22 = a1;
      v9 = 0;
      v10 = 1;
      while (1)
      {
        v11 = a2 + v9;
        v12 = *(_QWORD *)(a4 + v9 + 40);
        v14 = *(_QWORD *)(a4 + v9 + 48);
        v13 = *(_QWORD *)(a4 + v9 + 56);
        v15 = *(_QWORD *)(a4 + v9 + 64);
        v16 = *(_DWORD *)(a4 + v9 + 72);
        v17 = *(_BYTE *)(a4 + v9 + 76);
        v18 = *(_QWORD *)(a4 + v9 + 80);
        v19 = *(_BYTE *)(a4 + v9 + 88);
        *(_QWORD *)v11 = *(_QWORD *)(a4 + v9 + 32);
        *(_QWORD *)(v11 + 8) = v12;
        *(_QWORD *)(v11 + 16) = v14;
        *(_QWORD *)(v11 + 24) = v13;
        *(_QWORD *)(v11 + 32) = v15;
        *(_DWORD *)(v11 + 40) = v16;
        *(_BYTE *)(v11 + 44) = v17;
        *(_QWORD *)(v11 + 48) = v18;
        *(_BYTE *)(v11 + 56) = v19;
        if (a3 == v10)
          break;
        v20 = *(_QWORD *)(a4 + 16);
        if (v10 == v20)
        {
          a3 = v10;
          break;
        }
        a1 = (_QWORD *)(v10 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 += 64;
        if (v10++ >= v20)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1 = v22;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = result;
  if (!a2)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_14;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_14:
    *v5 = a4;
    v5[1] = v6;
    return (_QWORD *)v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      v7 = a2;
      v8 = (uint64_t *)(a4 + 56);
      v9 = 1;
      while (1)
      {
        v10 = *(v8 - 2);
        v12 = *(v8 - 1);
        v11 = *v8;
        *v7 = *(v8 - 3);
        v7[1] = v10;
        v7[2] = v12;
        v7[3] = v11;
        if (v6 == v9)
          break;
        v13 = *(_QWORD *)(a4 + 16);
        if (v9 == v13)
        {
          v6 = v9;
          break;
        }
        v8 += 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 += 4;
        if (v9++ >= v13)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;

  if (!a2)
  {
    a3 = 0;
    goto LABEL_21;
  }
  if (!a3)
  {
LABEL_21:
    *result = a4;
    result[1] = a3;
    return (_QWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = *(_QWORD *)(a4 + 16);
    if (!v4)
    {
LABEL_20:
      a3 = v4;
      goto LABEL_21;
    }
    *a2 = *(_DWORD *)(a4 + 32);
    if (a3 != 1)
    {
      v5 = a3 - 2;
      if (a3 - 2 >= (unint64_t)(v4 - 1))
        v5 = v4 - 1;
      v6 = v5 + 1;
      if (v6 < 9 || (((unint64_t)a2 - a4) & 0xFFFFFFFFFFFFFFE0) == 0x20)
      {
        v7 = 1;
        v8 = a2 + 1;
      }
      else
      {
        v9 = v6 & 7;
        if ((v6 & 7) == 0)
          v9 = 8;
        v10 = v6 - v9;
        v11 = &a2[v6 - v9];
        v7 = v10 + 1;
        v12 = (__int128 *)(a4 + 52);
        v13 = a2 + 5;
        do
        {
          v14 = *v12;
          *(v13 - 1) = *(v12 - 1);
          *v13 = v14;
          v12 += 2;
          v13 += 2;
          v10 -= 8;
        }
        while (v10);
        v8 = v11 + 1;
      }
      while (v4 != v7)
      {
        *v8++ = *(_DWORD *)(a4 + 32 + 4 * v7);
        if (a3 == ++v7)
          goto LABEL_21;
      }
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v17;

  if (!a2)
  {
LABEL_11:
    v5 = 0;
    goto LABEL_14;
  }
  v5 = a3;
  if (!a3)
  {
LABEL_14:
    *result = a4;
    result[1] = v5;
    return (_QWORD *)v5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      v17 = result;
      v7 = 0;
      v8 = 1;
      while (1)
      {
        v9 = *(_BYTE *)(a4 + v7 + 48);
        v10 = a2 + v7;
        v11 = *(_QWORD *)(a4 + v7 + 56);
        v12 = *(_QWORD *)(a4 + v7 + 64);
        v14 = *(_QWORD *)(a4 + v7 + 72);
        v13 = *(_QWORD *)(a4 + v7 + 80);
        *(_OWORD *)v10 = *(_OWORD *)(a4 + v7 + 32);
        *(_BYTE *)(v10 + 16) = v9;
        *(_QWORD *)(v10 + 24) = v11;
        *(_QWORD *)(v10 + 32) = v12;
        *(_QWORD *)(v10 + 40) = v14;
        *(_QWORD *)(v10 + 48) = v13;
        if (v5 == v8)
          break;
        v15 = *(_QWORD *)(a4 + 16);
        if (v8 == v15)
        {
          v5 = v8;
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = (_QWORD *)swift_bridgeObjectRetain();
        v7 += 56;
        if (v8++ >= v15)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = v17;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;

  if (!a2)
    goto LABEL_11;
  if (!a3)
    goto LABEL_12;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(a4 + 16);
    if (v5)
    {
      if (one-time initialization token for identity == -1)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  v16 = a3;
  v17 = a2;
  v15 = a1;
  swift_once();
  v5 = *(_QWORD *)(a4 + 16);
  if (!v5)
    __break(1u);
  a1 = v15;
  a3 = v16;
  a2 = v17;
LABEL_6:
  v6 = *(_OWORD *)(a4 + 48);
  v7 = *(_OWORD *)(a4 + 64);
  *a2 = *(_OWORD *)(a4 + 32);
  a2[1] = v6;
  a2[2] = v7;
  if (a3 != 1)
  {
    v8 = a2 + 5;
    v9 = (__int128 *)(a4 + 112);
    v10 = 1;
    while (v5 != v10)
    {
      ++v10;
      v11 = *(v9 - 2);
      v12 = *(v9 - 1);
      v13 = *v9;
      v9 += 3;
      *(v8 - 2) = v11;
      *(v8 - 1) = v12;
      *v8 = v13;
      v8 += 3;
      if (a3 == v10)
        goto LABEL_12;
    }
    a3 = v5;
  }
LABEL_12:
  *a1 = a4;
  a1[1] = a3;
  return a3;
}

{
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
        __break(1u);
      v7 = a2;
      v8 = 0;
      if (DRMeshGetPartCount())
      {
        v11 = a3;
        v9 = a3 - 1;
        while (1)
        {
          DRMeshGetPartAt();
          *v7 = 0uLL;
          v7[1] = xmmword_21BE5F820;
          v7[2] = xmmword_21BE52460;
          v7[3] = xmmword_21BE52470;
          if (v9 == v8)
            break;
          ++v8;
          v7 += 4;
          if (v8 == DRMeshGetPartCount())
            goto LABEL_12;
        }
        v8 = v11;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
  }
LABEL_12:
  *a1 = a4;
  a1[1] = v8;
  return v8;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v7 = (_QWORD *)result;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_12;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_12:
    v9 = a4;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5 + 16);
    if (v9 != a4)
    {
      v10 = a2;
      v11 = a3 - 1;
      v12 = a5 + 40 * a4 + 32;
      v13 = a4;
      while ((a4 & 0x8000000000000000) == 0)
      {
        if (v13 >= *(_QWORD *)(a5 + 16))
          goto LABEL_16;
        ++v13;
        result = outlined init with copy of __REAssetService(v12, v10);
        if (!v11)
        {
          v9 = v13;
          goto LABEL_13;
        }
        v10 += 40;
        --v11;
        v12 += 40;
        if (v9 == v13)
          goto LABEL_10;
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_10:
    v8 = v9 - a4;
LABEL_13:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v9;
    return v8;
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  swift_bridgeObjectRelease();
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_21;
      v4 = a4 >> 62;
      if (a4 >> 62)
      {
LABEL_22:
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9)
          goto LABEL_6;
      }
      else
      {
        v9 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v9)
        {
LABEL_6:
          v9 = 0;
          v13 = a3--;
          do
          {
            if ((a4 & 0xC000000000000001) != 0)
            {
              v11 = MEMORY[0x220769770](v9, a4);
            }
            else
            {
              if (v9 >= *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_21:
                __break(1u);
                goto LABEL_22;
              }
              v11 = swift_retain();
            }
            *(_QWORD *)(a2 + 8 * v9) = v11;
            if (a3 == v9)
            {
              v9 = v13;
              break;
            }
            if (v4)
            {
              swift_bridgeObjectRetain();
              v10 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v10 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            ++v9;
          }
          while (v9 != v10);
        }
      }
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 0;
  }
  *a1 = a4;
  a1[1] = v9;
  return v9;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Object;
  unsigned __int8 *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  ValueMetadata *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSString *v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v5 = (_QWORD *)result;
  if (!a2)
  {
LABEL_42:
    v6 = 0;
    goto LABEL_45;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_45:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (REEntityGetChildCount())
    {
      v31 = v5;
      if (REEntityGetChildCount() >= 1)
      {
        v8 = 0;
        v9 = v6 - 1;
        v10 = &type metadata for __EntityInfoComponent;
        do
        {
          result = REEntityGetChild();
          if (!result)
            goto LABEL_49;
          v11 = result;
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v12 = swift_dynamicCastClassUnconditional();
          }
          else
          {
            result = REEntityIsBeingDestroyed();
            if ((result & 1) != 0)
              goto LABEL_47;
            specialized static SceneManager.customComponentType(_:)((uint64_t)v10, (uint64_t)&protocol witness table for __EntityInfoComponent);
            if (REEntityGetCustomComponent())
            {
              Object = RECustomComponentGetObject();
              if (Object)
              {
                v14 = *(unsigned __int8 **)Object;
                if (*(_QWORD *)(Object + 8))
                  v15 = 1;
                else
                  v15 = v14 == 0;
                if (v15)
                {
                  result = swift_retain();
                }
                else
                {
                  v16 = *v14;
                  v17 = String.init(utf8String:)();
                  if (v18)
                    v19 = v17;
                  else
                    v19 = 0;
                  if (v18)
                    v20 = v18;
                  else
                    v20 = 0xE000000000000000;
                  v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v16 == 42, v19, v20);
                  swift_bridgeObjectRelease();
                  type metadata accessor for IntrospectionDataCleanupHelper();
                  result = swift_allocObject();
                  *(_QWORD *)(result + 16) = v14;
                }
                if (!v14)
                  goto LABEL_50;
                v21 = v10;
                swift_retain();
                v22 = String.init(utf8String:)();
                v24 = v23;
                swift_release();
                v25 = v24 ? v22 : 0;
                if (!v24)
                  v24 = 0xE000000000000000;
                v26 = (NSString *)MEMORY[0x220768C3C](v25, v24);
                swift_bridgeObjectRelease();
                v27 = NSClassFromString(v26);

                swift_release();
                v10 = v21;
                v9 = v6 - 1;
                if (v27)
                {
                  swift_getObjCClassMetadata();
                  type metadata accessor for Entity();
                  v28 = swift_dynamicCastMetatype();
                  if (v28)
                  {
                    v29 = (*(uint64_t (**)(void))(v28 + 232))();
                    v30 = *(_QWORD *)(v29 + 16);
                    swift_retain();
                    MEMORY[0x22076D160](v30, 0);
                    *(_QWORD *)(v29 + 16) = v11;
                    MEMORY[0x22076D160](v11, v29);
                    swift_release();
                    goto LABEL_37;
                  }
                }
              }
            }
            v12 = makeEntity(for:)(v11);
          }
          v29 = v12;
LABEL_37:
          result = REEntityGetChildCount();
          if (v8 >= result)
          {
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          *(_QWORD *)(a2 + 8 * v8) = v29;
          if (v9 == v8)
            goto LABEL_44;
          v5 = (_QWORD *)(v8 + 1);
          if (v8 + 1 == REEntityGetChildCount())
          {
            v6 = v8 + 1;
LABEL_44:
            v5 = v31;
            goto LABEL_45;
          }
          ++v8;
        }
        while (v8 < REEntityGetChildCount());
      }
      __break(1u);
    }
    goto LABEL_42;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Object;
  unsigned __int8 *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  ValueMetadata *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSString *v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v5 = (_QWORD *)result;
  if (!a2)
  {
LABEL_42:
    v6 = 0;
    goto LABEL_45;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_45:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (REEntityGetChildCount() >= 1)
    {
      v31 = v5;
      if (REEntityGetChildCount() >= 1)
      {
        v8 = 0;
        v9 = v6 - 1;
        v10 = &type metadata for __EntityInfoComponent;
        do
        {
          result = REEntityGetChild();
          if (!result)
            goto LABEL_49;
          v11 = result;
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v12 = swift_dynamicCastClassUnconditional();
          }
          else
          {
            result = REEntityIsBeingDestroyed();
            if ((result & 1) != 0)
              goto LABEL_47;
            specialized static SceneManager.customComponentType(_:)((uint64_t)v10, (uint64_t)&protocol witness table for __EntityInfoComponent);
            if (REEntityGetCustomComponent())
            {
              Object = RECustomComponentGetObject();
              if (Object)
              {
                v14 = *(unsigned __int8 **)Object;
                if (*(_QWORD *)(Object + 8))
                  v15 = 1;
                else
                  v15 = v14 == 0;
                if (v15)
                {
                  result = swift_retain();
                }
                else
                {
                  v16 = *v14;
                  v17 = String.init(utf8String:)();
                  if (v18)
                    v19 = v17;
                  else
                    v19 = 0;
                  if (v18)
                    v20 = v18;
                  else
                    v20 = 0xE000000000000000;
                  v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v16 == 42, v19, v20);
                  swift_bridgeObjectRelease();
                  type metadata accessor for IntrospectionDataCleanupHelper();
                  result = swift_allocObject();
                  *(_QWORD *)(result + 16) = v14;
                }
                if (!v14)
                  goto LABEL_50;
                v21 = v10;
                swift_retain();
                v22 = String.init(utf8String:)();
                v24 = v23;
                swift_release();
                v25 = v24 ? v22 : 0;
                if (!v24)
                  v24 = 0xE000000000000000;
                v26 = (NSString *)MEMORY[0x220768C3C](v25, v24);
                swift_bridgeObjectRelease();
                v27 = NSClassFromString(v26);

                swift_release();
                v10 = v21;
                v9 = v6 - 1;
                if (v27)
                {
                  swift_getObjCClassMetadata();
                  type metadata accessor for Entity();
                  v28 = swift_dynamicCastMetatype();
                  if (v28)
                  {
                    v29 = (*(uint64_t (**)(void))(v28 + 232))();
                    v30 = *(_QWORD *)(v29 + 16);
                    swift_retain();
                    MEMORY[0x22076D160](v30, 0);
                    *(_QWORD *)(v29 + 16) = v11;
                    MEMORY[0x22076D160](v11, v29);
                    swift_release();
                    goto LABEL_37;
                  }
                }
              }
            }
            v12 = makeEntity(for:)(v11);
          }
          v29 = v12;
LABEL_37:
          result = REEntityGetChildCount();
          if (v8 >= result)
          {
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          *(_QWORD *)(a2 + 8 * v8) = v29;
          if (v9 == v8)
            goto LABEL_44;
          v5 = (_QWORD *)(v8 + 1);
          if (v8 + 1 >= REEntityGetChildCount())
          {
            v6 = v8 + 1;
LABEL_44:
            v5 = v31;
            goto LABEL_45;
          }
          ++v8;
        }
        while (v8 < REEntityGetChildCount());
      }
      __break(1u);
    }
    goto LABEL_42;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v29 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    v20 = *(_QWORD *)(a4 + 56) + 80 * v16;
    v21 = *(_BYTE *)(v20 + 16);
    ++v13;
    v22 = *(_QWORD *)(v20 + 24);
    v23 = *(_BYTE *)(v20 + 32);
    v24 = *(_BYTE *)(v20 + 33);
    v26 = *(_QWORD *)(v20 + 40);
    v25 = *(_QWORD *)(v20 + 48);
    v27 = *(_BYTE *)(v20 + 72);
    v28 = *(_OWORD *)(v20 + 56);
    *(_OWORD *)v11 = *(_OWORD *)v20;
    *(_BYTE *)(v11 + 16) = v21;
    *(_QWORD *)(v11 + 24) = v22;
    *(_BYTE *)(v11 + 32) = v23;
    *(_BYTE *)(v11 + 33) = v24;
    *(_QWORD *)(v11 + 40) = v26;
    *(_QWORD *)(v11 + 48) = v25;
    *(_OWORD *)(v11 + 56) = v28;
    *(_BYTE *)(v11 + 72) = v27;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 80;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v29;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t Shared;
  uint64_t v15;
  _QWORD *v16;
  uint64_t Default;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt Class;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[6];

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v7 = a5;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v7;
    return (_QWORD *)a3;
  }
  if (a3 < 0)
    goto LABEL_60;
  if (a5 == a6)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  v43 = result;
  v44 = a5;
  v8 = a5 + 1;
  if (__OFADD__(a5, 1))
    goto LABEL_59;
  v9 = a2;
  v10 = &static __Engine.customComponents;
  v11 = 1;
  v12 = a5;
  v45 = a3;
  while (2)
  {
    v47 = v12;
    v7 = v8;
    result = (_QWORD *)REEntityGetComponentCount();
    if (v8 >= (uint64_t)result)
      goto LABEL_11;
    while (1)
    {
      Shared = REEngineGetShared();
      if (Shared)
      {
        v15 = Shared;
        if (one-time initialization token for lock != -1)
          swift_once();
        os_unfair_lock_lock((os_unfair_lock_t)(v10[80] + 16));
        if (!static __ServiceLocator.sharedEngine || *((_QWORD *)static __ServiceLocator.sharedEngine + 3) != v15)
        {
          type metadata accessor for __Engine();
          swift_allocObject();
          static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v15);
          swift_release();
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v10[80] + 16));
        v16 = static __ServiceLocator.sharedEngine;
        if (static __ServiceLocator.sharedEngine)
          goto LABEL_44;
      }
      else
      {
        static __ServiceLocator.sharedEngine = 0;
        swift_release();
        v16 = static __ServiceLocator.sharedEngine;
        if (static __ServiceLocator.sharedEngine)
          goto LABEL_44;
      }
      Default = REEngineConfigurationCreateDefault();
      type metadata accessor for EngineConfiguration();
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = Default;
      if ((int)REGetRetainCount() >= 2)
      {
        swift_retain();
        v19 = REEngineConfigurationClone();
        v20 = swift_allocObject();
        *(_QWORD *)(v20 + 16) = v19;
        swift_release_n();
        v18 = v20;
      }
      REEngineConfigurationSetClockMode();
      if (one-time initialization token for defaultServices != -1)
        swift_once();
      if ((int)REGetRetainCount() >= 2)
      {
        swift_retain();
        v21 = REEngineConfigurationClone();
        v22 = swift_allocObject();
        *(_QWORD *)(v22 + 16) = v21;
        swift_release_n();
        v18 = v22;
      }
      REEngineConfigurationSetServicesToCreate();
      if ((int)REGetRetainCount() >= 2)
      {
        swift_retain();
        v23 = REEngineConfigurationClone();
        v24 = swift_allocObject();
        *(_QWORD *)(v24 + 16) = v23;
        swift_release_n();
        v18 = v24;
      }
      REEngineConfigurationSetServicesToUpdate();
      if ((int)REGetRetainCount() >= 2)
      {
        swift_retain();
        v25 = REEngineConfigurationClone();
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = v25;
        swift_release_n();
        v18 = v26;
      }
      REEngineConfigurationSetStartupOptions();
      if (one-time initialization token for defaultRenderFlags != -1)
        swift_once();
      if ((int)REGetRetainCount() >= 2)
      {
        swift_retain();
        v27 = REEngineConfigurationClone();
        v28 = swift_allocObject();
        *(_QWORD *)(v28 + 16) = v27;
        swift_release_n();
        v18 = v28;
      }
      v10 = &static __Engine.customComponents;
      REEngineConfigurationSetRenderFlags();
      if (!specialized static __ServiceLocator.__sharedEngine.getter())
      {
        v49[0] = v18;
        v29 = specialized static __Engine.makeSharedEngine(_:)(v49);
        REEngineSetShared();
        static __ServiceLocator.sharedEngine = v29;
        v10 = &static __Engine.customComponents;
        swift_release();
        static __ServiceLocator.createdSharedEngine = 1;
      }
      swift_release();
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      result = (_QWORD *)specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
      v16 = static __ServiceLocator.sharedEngine;
      if (!static __ServiceLocator.sharedEngine)
        goto LABEL_62;
LABEL_44:
      result = (_QWORD *)swift_beginAccess();
      v30 = v16[5];
      if (!v30)
        goto LABEL_61;
      v31 = v30 + 80;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v31, (uint64_t)v49);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
      type metadata accessor for SceneManager();
      swift_dynamicCast();
      REEntityGetComponentAtIndex();
      Class = REComponentGetClass();
      swift_beginAccess();
      v33 = *(_QWORD *)(v48 + 16);
      swift_beginAccess();
      v34 = *(_QWORD *)(v33 + 24);
      if (*(_QWORD *)(v34 + 16))
      {
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
        if ((v36 & 1) != 0)
        {
          v13 = *(unsigned __int8 *)(*(_QWORD *)(v34 + 56) + 80 * v35 + 48);
          result = (_QWORD *)swift_release();
          if (v13 == 2)
            goto LABEL_11;
          goto LABEL_17;
        }
      }
      if (one-time initialization token for handlesToCustomComponentTypes != -1)
        swift_once();
      swift_beginAccess();
      v37 = static SceneManager.handlesToCustomComponentTypes;
      if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16))
      {
        v38 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
        if ((v39 & 1) != 0)
          break;
      }
      swift_endAccess();
LABEL_55:
      swift_release();
LABEL_17:
      ++v7;
      result = (_QWORD *)REEntityGetComponentCount();
      if (v7 >= (uint64_t)result)
        goto LABEL_11;
    }
    v40 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 16 * v38);
    swift_endAccess();
    v41 = *(_QWORD *)(v48 + 16);
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v41 + 16) + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v40);
      if ((v42 & 1) != 0)
        goto LABEL_55;
    }
    result = (_QWORD *)swift_release();
LABEL_11:
    *v9 = v47;
    a3 = v45;
    if (v11 == v45)
      goto LABEL_58;
    if (v7 == a6)
    {
      v7 = a6;
      a3 = v11;
LABEL_58:
      result = v43;
      a5 = v44;
      goto LABEL_7;
    }
    ++v11;
    ++v9;
    v12 = v7;
    v8 = v7 + 1;
    if (!__OFADD__(v7, 1))
      continue;
    break;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (_QWORD *)result;
  if (!a2)
    goto LABEL_11;
  v6 = a3;
  if (!a3)
    goto LABEL_12;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (Scene.AnchorCollection.endIndex.getter() >= 1)
    {
      result = Scene.AnchorCollection.subscript.getter(0);
      *a2 = result;
      a2[1] = v8;
      if (v6 != 1)
      {
        v9 = a2 + 3;
        v10 = 1;
        while (v6 != v10)
        {
          if (v10 >= Scene.AnchorCollection.endIndex.getter())
          {
            v6 = v10;
            goto LABEL_12;
          }
          result = Scene.AnchorCollection.subscript.getter(v10);
          *(v9 - 1) = result;
          *v9 = v11;
          v9 += 2;
          if (v6 == ++v10)
            goto LABEL_12;
        }
        __break(1u);
        goto LABEL_15;
      }
LABEL_12:
      *v5 = a4;
      v5[1] = v6;
      return v6;
    }
LABEL_11:
    v6 = 0;
    goto LABEL_12;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  v28 = result;
  v11 = 0;
  v12 = 0;
  v29 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = *(_QWORD *)(a4 + 56) + (v14 << 6);
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v21 = *(_QWORD *)(v18 + 32);
    v23 = *(_WORD *)(v18 + 40);
    v24 = *(_DWORD *)(v18 + 44);
    v26 = *(_QWORD *)(v18 + 48);
    v25 = *(_QWORD *)(v18 + 56);
    *(_QWORD *)v10 = *(_QWORD *)v18;
    *(_QWORD *)(v10 + 8) = v19;
    *(_QWORD *)(v10 + 16) = v20;
    *(_QWORD *)(v10 + 24) = v22;
    *(_QWORD *)(v10 + 32) = v21;
    *(_WORD *)(v10 + 40) = v23;
    *(_DWORD *)(v10 + 44) = v24;
    *(_QWORD *)(v10 + 48) = v26;
    *(_QWORD *)(v10 + 56) = v25;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v29)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v29)
      {
        v8 = 0;
        v11 = v15;
      }
      else
      {
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (v16)
          goto LABEL_14;
        v17 = v15 + 2;
        if (v15 + 2 >= v29)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          v15 = v17;
          goto LABEL_18;
        }
        v11 = v15 + 3;
        if (v15 + 3 < v29)
        {
          v16 = *(_QWORD *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            v15 = v11;
            goto LABEL_18;
          }
          v17 = v15 + 4;
          if (v15 + 4 >= v29)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v16 = *(_QWORD *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v15 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v15 >= v29)
              {
                v8 = 0;
                v11 = v29 - 1;
                goto LABEL_37;
              }
              v16 = *(_QWORD *)(v5 + 8 * v15);
              ++v17;
              if (v16)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v15 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v27;
      result = v28;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v29 = -1 << *(_BYTE *)(a4 + 32);
  v30 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    v19 = *(_QWORD *)(a4 + 56) + 80 * v15;
    ++v12;
    v20 = *(_QWORD *)(v19 + 24);
    v21 = *(_DWORD *)(v19 + 32);
    v22 = *(_BYTE *)(v19 + 36);
    v23 = *(_QWORD *)(v19 + 40);
    v24 = *(_BYTE *)(v19 + 48);
    v26 = *(_QWORD *)(v19 + 56);
    v25 = *(_QWORD *)(v19 + 64);
    v27 = *(_QWORD *)(v19 + 72);
    v28 = *(_OWORD *)(v19 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v19;
    *(_OWORD *)(v10 + 8) = v28;
    *(_QWORD *)(v10 + 24) = v20;
    *(_DWORD *)(v10 + 32) = v21;
    *(_BYTE *)(v10 + 36) = v22;
    *(_QWORD *)(v10 + 40) = v23;
    *(_BYTE *)(v10 + 48) = v24;
    *(_QWORD *)(v10 + 56) = v26;
    *(_QWORD *)(v10 + 64) = v25;
    *(_QWORD *)(v10 + 72) = v27;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 80;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v29;
      result = v30;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type [Component] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of GeometricPin?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometricPin?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of AnimationLibraryComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of String??(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *outlined release of String??(uint64_t *a1)
{
  outlined consume of String??(*a1, a1[1]);
  return a1;
}

uint64_t outlined init with copy of MeshResource._Proto_Level_v1(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MeshResource._Proto_Level_v1(a2, a1);
  return a2;
}

uint64_t outlined retain of IKRig.Constraint(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void specialized static CGImageRef.image(with:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

CGImageRef sub_21BAFA964(uint64_t a1, uint64_t a2)
{
  const __CFData *isa;
  CGImageSource *v3;
  size_t PrimaryImageIndex;
  CGImageRef ImageAtIndex;

  if ((a2 & 0xFF000000000000) == 0)
    return 0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = CGImageSourceCreateWithData(isa, 0);

  if (!v3)
    return 0;
  PrimaryImageIndex = CGImageSourceGetPrimaryImageIndex(v3);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v3, PrimaryImageIndex, 0);

  return ImageAtIndex;
}

uint64_t REEventDispatcher.receive(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v14;

  v1 = type metadata accessor for AnySubscriber();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - v3;
  v5 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - v6;
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  OrderedCoatCheckBag.makeIterator()(v9, v1);
  AnyIterator.next()();
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  if (v10(v7, 1, v1) != 1)
  {
    v11 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    do
    {
      v11(v4, v7, v1);
      dispatch thunk of AnySubscriberBase.receive(_:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      AnyIterator.next()();
    }
    while (v10(v7, 1, v1) != 1);
  }
  swift_release();
  v12 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v12;
}

uint64_t REEventDispatcher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, __n128);
  uint64_t v37;
  int v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (*v53)();
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  os_unfair_lock_s *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;

  v100 = a1;
  v101 = a3;
  v97 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v5 = type metadata accessor for AnySubscriber();
  v92 = type metadata accessor for Optional();
  v89 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v90 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v85 - v8;
  v10 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  MEMORY[0x24BDAC7A8](v11);
  v85 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v88 = (char *)&v85 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v87 = (char *)&v85 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v99 = (char *)&v85 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v85 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v95 = (uint64_t)&v85 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v85 - v24;
  v26 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v86 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v93 = (char **)((char *)&v85 - v30);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v85 - v33;
  v91 = v35;
  v36 = *(void (**)(char *, __n128))(v35 + 16);
  v37 = v100;
  v36(v25, v32);
  v38 = swift_dynamicCast();
  v102 = v26;
  v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v98 = v34;
  if (v38)
  {
    v39(v9, 0, 1, v5);
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v34, v9, v5);
    v40 = a2;
    v41 = v37;
  }
  else
  {
    v39(v9, 1, 1, v5);
    v42 = *(void (**)(char *, uint64_t))(v89 + 8);
    v42(v9, v92);
    v43 = v95;
    ((void (*)(uint64_t, uint64_t, uint64_t))v36)(v95, v37, a2);
    ((void (*)(char *, uint64_t, uint64_t))v36)(v20, v43, a2);
    v44 = v90;
    v40 = a2;
    if (swift_dynamicCast())
    {
      v39(v44, 0, 1, v5);
      v45 = v102;
      v46 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
      v47 = v86;
      v46(v86, v44, v5);
      v48 = v93;
      v46((char *)v93, v47, v5);
      v41 = v100;
      v34 = v98;
      v49 = v91;
      v50 = v95;
    }
    else
    {
      v39(v44, 1, 1, v5);
      v42(v44, v92);
      v51 = v93;
      v50 = v95;
      dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter();
      type metadata accessor for AnySubscriberBox();
      ((void (*)(char *, uint64_t, uint64_t))v36)(v99, v50, a2);
      *v51 = AnySubscriberBox.__allocating_init(_:)();
      ((void (*)(char *, uint64_t, uint64_t))v36)(v87, v50, a2);
      v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of BindableDataInternal(&v103, (uint64_t)&v106);
        outlined init with take of BindableDataInternal(&v106, (uint64_t)&v103);
        v52 = swift_allocObject();
        outlined init with take of BindableDataInternal(&v103, v52 + 16);
        v53 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
      }
      else
      {
        v105 = 0;
        v103 = 0u;
        v104 = 0u;
        outlined destroy of BodyTrackingComponent?((uint64_t)&v103, &demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        v54 = _typeName(_:qualified:)();
        v56 = v55;
        v52 = swift_allocObject();
        *(_QWORD *)(v52 + 16) = v54;
        *(_QWORD *)(v52 + 24) = v56;
        v53 = protocol witness for CodingKey.stringValue.getter in conformance UnkeyedDC.IndexedCodingKey;
      }
      v57 = v99;
      v41 = v100;
      v49 = v91;
      v48 = v93;
      v93[1] = v53;
      v48[2] = v52;
      ((void (*)(char *, uint64_t, uint64_t))v36)(v57, v50, v40);
      v58 = (*(unsigned __int8 *)(v49 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      v59 = (char *)swift_allocObject();
      *((_QWORD *)v59 + 2) = v97;
      *((_QWORD *)v59 + 3) = v40;
      *((_QWORD *)v59 + 4) = v101;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v59[v58], v57, v40);
      v48[3] = partial apply for closure #3 in AnySubscriber.init<A>(_:);
      v48[4] = v59;
      ((void (*)(char *, uint64_t, uint64_t))v36)(v88, v50, v40);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
      if (swift_dynamicCast())
      {
        outlined init with take of BindableDataInternal(&v103, (uint64_t)&v106);
        outlined init with take of BindableDataInternal(&v106, (uint64_t)&v103);
        v60 = swift_allocObject();
        outlined init with take of BindableDataInternal(&v103, v60 + 16);
        v48[5] = partial apply for closure #4 in AnySubscriber.init<A>(_:);
        v48[6] = v60;
        v45 = v102;
        v34 = v98;
      }
      else
      {
        v105 = 0;
        v103 = 0u;
        v104 = 0u;
        outlined destroy of BodyTrackingComponent?((uint64_t)&v103, &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
        ((void (*)(char *, uint64_t, uint64_t))v36)(v85, v50, v40);
        v61 = swift_dynamicCast();
        v45 = v102;
        v34 = v98;
        if (v61)
        {
          outlined init with take of BindableDataInternal(&v103, (uint64_t)&v106);
          outlined init with take of BindableDataInternal(&v106, (uint64_t)&v103);
          v62 = swift_allocObject();
          outlined init with take of BindableDataInternal(&v103, v62 + 16);
          v48[5] = partial apply for closure #5 in AnySubscriber.init<A>(_:);
          v48[6] = v62;
        }
        else
        {
          v105 = 0;
          v103 = 0u;
          v104 = 0u;
          outlined destroy of BodyTrackingComponent?((uint64_t)&v103, &demangling cache variable for type metadata for CustomStringConvertible?);
          swift_getDynamicType();
          v63 = _typeName(_:qualified:)();
          v65 = v64;
          v66 = swift_allocObject();
          *(_QWORD *)(v66 + 16) = v63;
          *(_QWORD *)(v66 + 24) = v65;
          v48 = v93;
          v93[5] = partial apply for closure #6 in AnySubscriber.init<A>(_:);
          v48[6] = v66;
        }
      }
    }
    (*(void (**)(char *, _QWORD *, uint64_t))(v45 + 32))(v34, v48, v5);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v40);
  }
  v94 = v5;
  v67 = v96;
  v68 = (os_unfair_lock_s *)(v96[8] + 16);
  os_unfair_lock_lock(v68);
  swift_beginAccess();
  v71 = type metadata accessor for OrderedCoatCheckBag(0, v5, v69, v70);
  v91 = OrderedCoatCheckBag.append(_:)((uint64_t)v34, v71, v72, v73);
  v75 = v74;
  swift_endAccess();
  os_unfair_lock_unlock(v68);
  v76 = v97;
  v77 = v101;
  v78 = type metadata accessor for REEventDispatcher.EventSubscription(0, v97, v40, v101);
  v100 = v67[3];
  v95 = v67[4];
  v93 = (_QWORD *)v67[5];
  v79 = v67[7];
  v92 = v67[6];
  v80 = (uint64_t)v99;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v99, v41, v40);
  v81 = swift_allocObject();
  swift_weakInit();
  v82 = (_QWORD *)swift_allocObject();
  v82[2] = v76;
  v82[3] = v40;
  v82[4] = v77;
  v82[5] = v81;
  v82[6] = v91;
  v82[7] = v75;
  swift_allocObject();
  swift_bridgeObjectRetain();
  v83 = REEventDispatcher.EventSubscription.init(coreHandle:sourceObject:componentType:matching:downstream:cancellationHandler:)(v100, v95, (uint64_t)v93, v92, v79, v80, (uint64_t)partial apply for closure #1 in REEventDispatcher.receive<A>(subscriber:), (uint64_t)v82);
  v107 = v78;
  v108 = MEMORY[0x220772E3C](&protocol conformance descriptor for REEventDispatcher<A>.EventSubscription<A1>, v78);
  *(_QWORD *)&v106 = v83;
  dispatch thunk of Subscriber.receive(subscription:)();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v98, v94);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v106);
}

uint64_t closure #1 in REEventDispatcher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  _BYTE v18[24];

  v5 = type metadata accessor for AnySubscriber();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v18[-v8];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v11 = result;
    v12 = *(os_unfair_lock_s **)(result + 64);
    swift_retain();
    os_unfair_lock_lock(v12 + 4);
    swift_release();
    swift_beginAccess();
    v15 = type metadata accessor for OrderedCoatCheckBag(0, v5, v13, v14);
    OrderedCoatCheckBag.remove(_:)(a2, a3, v15, v16, v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_endAccess();
    v17 = *(os_unfair_lock_s **)(v11 + 64);
    swift_retain();
    os_unfair_lock_unlock(v17 + 4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *REEventDispatcher.EventSubscription.__allocating_init(coreHandle:sourceObject:componentType:matching:downstream:cancellationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_allocObject();
  return REEventDispatcher.EventSubscription.init(coreHandle:sourceObject:componentType:matching:downstream:cancellationHandler:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t *REEventDispatcher.EventSubscription.init(coreHandle:sourceObject:componentType:matching:downstream:cancellationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  void *v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t *v46;

  v39 = a7;
  v40 = a8;
  v33 = a5;
  v31[1] = a3;
  v31[2] = a4;
  v35 = a2;
  v11 = *v8;
  v12 = *(_QWORD *)(*v8 + 88);
  v32 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v32 - 8);
  v14 = MEMORY[0x24BDAC7A8](v32);
  v16 = (char *)v31 - v15;
  v8[3] = 0;
  v8[4] = 0;
  *((_BYTE *)v8 + 40) = 1;
  v17 = (uint64_t)v8 + *(_QWORD *)(v11 + 120);
  v18 = *(_QWORD *)(v12 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56);
  v19(v17, 1, 1, v12, v14);
  v20 = (uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 128));
  *v20 = 0;
  v20[1] = 0;
  v36 = v20;
  v37 = v18;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 136)) = 0;
  v34 = a1;
  v8[2] = a1;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v38 = a6;
  v21(v16, a6, v12);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v19)(v16, 0, 1, v12);
  v22 = v33;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v17, v16, v32);
  swift_endAccess();
  getEventID<A>(_:)(*(_QWORD *)(v11 + 80), *(_QWORD *)(v11 + 80));
  swift_retain();
  if (v22)
  {
    v45 = (uint64_t (*)(uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in REEventDispatcher.EventSubscription.init(coreHandle:sourceObject:componentType:matching:downstream:cancellationHandler:);
    v46 = v8;
    aBlock = MEMORY[0x24BDAC760];
    v42 = 1107296256;
    v43 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    v44 = &block_descriptor_3;
    v23 = _Block_copy(&aBlock);
    swift_release();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    RETimelineEventFilter();
  }
  else
  {
    v45 = partial apply for implicit closure #4 in implicit closure #3 in REEventDispatcher.EventSubscription.init(coreHandle:sourceObject:componentType:matching:downstream:cancellationHandler:);
    v46 = v8;
    aBlock = MEMORY[0x24BDAC760];
    v42 = 1107296256;
    v43 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    v44 = &block_descriptor_9;
    v23 = _Block_copy(&aBlock);
  }
  swift_release();
  v24 = REEventBusSubscribeWithMatch();
  v26 = v25;
  _Block_release(v23);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v12);
  v8[3] = v24;
  v8[4] = v26;
  *((_BYTE *)v8 + 40) = 0;
  v27 = v36;
  v28 = *v36;
  v29 = v40;
  *v36 = v39;
  v27[1] = v29;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v28);
  return v8;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v6 = v5(a2, a3);
  swift_release();
  return v6;
}

uint64_t REEventDispatcher.EventSubscription.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 120);
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128)));
  return v0;
}

uint64_t REEventDispatcher.EventSubscription.__deallocating_deinit()
{
  REEventDispatcher.EventSubscription.deinit();
  return swift_deallocClassInstance();
}

uint64_t REEventDispatcher.deinit()
{
  uint64_t v0;

  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t REEventDispatcher.__deallocating_deinit()
{
  REEventDispatcher.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance REEventDispatcher<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return REEventDispatcher.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance REEventDispatcher<A>(_QWORD *a1)
{
  return specialized REEventDispatcher.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance REEventDispatcher<A>()
{
  return REEventDispatcher.receive(_:)();
}

uint64_t REEventDispatcher.EventSubscription.request(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;

  v3 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136));
  swift_beginAccess();
  v4 = *v3;
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    return swift_endAccess();
  static Subscribers.Demand.unlimited.getter();
  v5 = static Subscribers.Demand.== infix(_:_:)();
  v6 = static Subscribers.Demand.unlimited.getter();
  if ((v5 & 1) != 0)
  {
LABEL_9:
    *v3 = v6;
    return swift_endAccess();
  }
  result = static Subscribers.Demand.== infix(_:_:)();
  if ((result & 1) != 0)
    goto LABEL_7;
  if ((v4 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = v4 + a1;
  if (__OFADD__(v4, a1))
  {
LABEL_7:
    v6 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t REEventDispatcher.EventSubscription.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v13 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v1 - 8) + 56))((char *)&v13 - v5, 1, 1, v1, v4);
  v7 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v7, v6, v2);
  swift_endAccess();
  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
  {
    MEMORY[0x22076D1F0](*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    *(_BYTE *)(v0 + 40) = 1;
  }
  v8 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  v9 = (void (*)(uint64_t))*v8;
  if (*v8)
  {
    v10 = swift_retain();
    v9(v10);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v9);
    v11 = *v8;
  }
  else
  {
    v11 = 0;
  }
  *v8 = 0;
  v8[1] = 0;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
}

uint64_t protocol witness for Subscription.request(_:) in conformance REEventDispatcher<A>.EventSubscription<A1>(uint64_t a1)
{
  return REEventDispatcher.EventSubscription.request(_:)(a1);
}

uint64_t protocol witness for Cancellable.cancel() in conformance REEventDispatcher<A>.EventSubscription<A1>()
{
  return REEventDispatcher.EventSubscription.cancel()();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance REEventDispatcher<A>.EventSubscription<A1>()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t __REEventSubscriber.combineIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for REEventDispatcher(0, *(_QWORD *)(a1 + 16), a3, a4);
  MEMORY[0x220772E3C](&protocol conformance descriptor for REEventDispatcher<A>, v4);
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t type metadata accessor for REEventDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for REEventDispatcher);
}

uint64_t __REEventSubscriber.init(dispatcher:sourceObject:componentType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = a2;
  a4[1] = a3;
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = result;
  return result;
}

uint64_t __REEventSubscriber.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return specialized __REEventSubscriber.receive(subscription:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t __REEventSubscriber.receive(_:)()
{
  return REEventDispatcher.receive(_:)();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance __REEventSubscriber<A>(uint64_t a1, uint64_t a2)
{
  return specialized __REEventSubscriber.receive(subscription:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v22;
  __int128 v23[2];
  uint64_t v24;
  _QWORD v25[4];

  v6 = type metadata accessor for Mirror.AncestorRepresentation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v19((char *)v23 - v20, a1, a4, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomReflectable);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of BindableDataInternal(v23, (uint64_t)v25);
    __swift_project_boxed_opaque_existential_1(v25, v25[3]);
    dispatch thunk of CustomReflectable.customMirror.getter();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    v24 = 0;
    memset(v23, 0, sizeof(v23));
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for CustomReflectable?);
    ((void (*)(char *, uint64_t, uint64_t))v19)(v15, a1, a4);
    v22 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE43C0], v6);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
}

_QWORD *specialized REEventDispatcher.init(eventBus:coreHandle:sourceObject:componentType:matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  v6[8] = v13;
  type metadata accessor for AnySubscriber();
  v6[9] = __RKEntityLookAtCameraAction.reversed()();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  v6[7] = a6;
  swift_unownedRetain();
  return v6;
}

{
  _QWORD *v6;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  v6[8] = v13;
  v6[9] = 0;
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  v6[7] = a6;
  swift_unownedRetain();
  return v6;
}

_QWORD *specialized REEventDispatcher.__allocating_init(eventBus:coreHandle:sourceObject:componentType:matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  type metadata accessor for REEventDispatcher(0, *(_QWORD *)(v6 + 80), a3, a4);
  swift_allocObject();
  return specialized REEventDispatcher.init(eventBus:coreHandle:sourceObject:componentType:matching:)(a1, a2, a3, a4, a5, a6);
}

uint64_t specialized REEventDispatcher.receive(subscription:)(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  static Subscribers.Demand.unlimited.getter();
  return dispatch thunk of Subscription.request(_:)();
}

void base witness table accessor for CustomCombineIdentifierConvertible in __REEventSubscriber<A>()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in __REEventSubscriber<A>()
{
  return MEMORY[0x24BEE40A8];
}

uint64_t type metadata completion function for REEventDispatcher()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for REEventDispatcher.EventSubscription()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for REEventDispatcher.EventSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for REEventDispatcher.EventSubscription);
}

uint64_t destroy for __REEventSubscriber()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for __REEventSubscriber(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for __REEventSubscriber(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for __REEventSubscriber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REEventSubscriber(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __REEventSubscriber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for __REEventSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __REEventSubscriber);
}

void base witness table accessor for Cancellable in REEventDispatcher<A>.EventSubscription<A1>()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomCombineIdentifierConvertible in REEventDispatcher<A>.EventSubscription<A1>()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomCombineIdentifierConvertible in REEventDispatcher<A>()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t specialized REEventDispatcher.EventSubscription.handleEvent(sourceObject:payloadRef:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v45 = a1;
  v46 = v3;
  v44 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v44 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v42 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)&v39 - v6;
  v7 = *(_QWORD *)(v2 + 88);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v39 - v10;
  v12 = *(_QWORD *)(v7 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v41 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v39 - v16;
  v43 = v2;
  v18 = (uint64_t)v1 + *(_QWORD *)(v2 + 120);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v18, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  v40 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v40(v17, v11, v7);
  v19 = (uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 136));
  swift_beginAccess();
  v20 = *v19;
  static Subscribers.Demand.unlimited.getter();
  result = static Subscribers.Demand.== infix(_:_:)();
  v22 = v46;
  v23 = v17;
  v24 = v12;
  if ((result & 1) == 0)
  {
    if (v20 < 0)
    {
      __break(1u);
      goto LABEL_24;
    }
    if (!v20)
    {
      v36 = *(void (**)(char *, uint64_t))(v12 + 8);
LABEL_19:
      v37 = v17;
      goto LABEL_20;
    }
  }
  UnsafeRawPointer.load<A>(fromByteOffset:as:)();
  swift_beginAccess();
  v25 = *v19;
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) != 0)
    {
      v26 = static Subscribers.Demand.unlimited.getter();
LABEL_12:
      *v19 = v26;
      goto LABEL_13;
    }
    if ((v25 & 0x8000000000000000) == 0)
    {
      if (v25)
      {
        v26 = v25 - 1;
        goto LABEL_12;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_13:
  swift_endAccess();
  if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
  {
    v38 = v47;
    dispatch thunk of Subscriber.receive(_:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v22);
    v36 = *(void (**)(char *, uint64_t))(v12 + 8);
    goto LABEL_19;
  }
  result = (uint64_t)specialized static __ServiceLocator.__sharedEngine.getter();
  if (result)
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v28 = v41;
    v27(v41, v17, v7);
    v29 = v44;
    v30 = v42;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v42, v47, v22);
    v31 = *(unsigned __int8 *)(v24 + 80);
    v45 = v24;
    v32 = (v31 + 40) & ~v31;
    v33 = (v13 + *(unsigned __int8 *)(v29 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    v34 = v23;
    v35 = (char *)swift_allocObject();
    *((_QWORD *)v35 + 2) = v22;
    *((_QWORD *)v35 + 3) = v7;
    *((_QWORD *)v35 + 4) = *(_QWORD *)(v43 + 96);
    v40(&v35[v32], v28, v7);
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v35[v33], v30, v22);
    swift_retain();
    __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in REEventDispatcher.EventSubscription.handleEvent(sourceObject:payloadRef:), (uint64_t)v35);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v47, v22);
    v36 = *(void (**)(char *, uint64_t))(v45 + 8);
    v37 = v34;
LABEL_20:
    v36(v37, v7);
    return 0;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_21BAFC86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = (v3 + *(_QWORD *)(v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + v3);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in REEventDispatcher.EventSubscription.handleEvent(sourceObject:payloadRef:)()
{
  return dispatch thunk of Subscriber.receive(_:)();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in REEventDispatcher.EventSubscription.init(coreHandle:sourceObject:componentType:matching:downstream:cancellationHandler:)(uint64_t a1, uint64_t a2)
{
  return specialized REEventDispatcher.EventSubscription.handleEvent(sourceObject:payloadRef:)(a2);
}

uint64_t sub_21BAFC958()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #3 in AnySubscriber.init<A>(_:)(v0 + ((v2 + 40) & ~v2), *(_QWORD *)(v0 + 16), MEMORY[0x24BEE4078], v1);
}

uint64_t sub_21BAFC9D8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in AnySubscriber.init<A>(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BAFCA14()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BAFCA38()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in REEventDispatcher.receive<A>(subscriber:)()
{
  uint64_t *v0;

  return closure #1 in REEventDispatcher.receive<A>(subscriber:)(v0[5], v0[6], v0[7]);
}

uint64_t sub_21BAFCA6C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in AnySubscriber.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  result = dispatch thunk of CustomStringConvertible.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t partial apply for closure #4 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t partial apply for closure #1 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t one-time initialization function for name()
{
  uint64_t result;

  result = MEMORY[0x220768C3C](0xD00000000000001ELL, 0x800000021BE84B30);
  static __RKCustomTriggerNotification.name = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x220768C3C](0xD000000000000017, 0x800000021BE8F7B0);
  static __RKEntityCustomAction.RKEntityCustomActionNotification.name = result;
  return result;
}

uint64_t __RKCustomTrigger.__allocating_init(identifier:customArguments:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  if (!a3)
    a3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v6 + 40) = a3;
  *(_WORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 18) = 0;
  return v6;
}

uint64_t __RKCustomTrigger.init(identifier:customArguments:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  if (a3)
  {
    v4 = a3;
    swift_retain();
  }
  else
  {
    swift_retain();
    v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  *(_QWORD *)(v3 + 40) = v4;
  swift_release();
  *(_WORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 18) = 0;
  return v3;
}

uint64_t __RKCustomTrigger.matches(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;

  type metadata accessor for __RKCustomTrigger();
  v1 = swift_dynamicCastClass();
  if (v1)
  {
    v2 = v1;
    v3 = v0[3] == *(_QWORD *)(v1 + 24) && v0[4] == *(_QWORD *)(v1 + 32);
    if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v4 = v0[5];
      v5 = *(_QWORD *)(v2 + 40);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = specialized static Dictionary<>.== infix(_:_:)(v4, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      if ((v6 & 1) != 0)
        return 1;
    }
  }
  type metadata accessor for __RKEntityTriggerGroup();
  v8 = swift_dynamicCastClass();
  if (!v8)
    return 0;
  v9 = v8;
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 24);
  if (v10 >> 62)
  {
LABEL_36:
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v7 = result;
    if (!result)
      goto LABEL_20;
  }
  else
  {
    v7 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (!v7)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_release();
      return v7;
    }
  }
  v12 = v10 & 0xC000000000000001;
  if ((v10 & 0xC000000000000001) != 0)
  {
    v13 = MEMORY[0x220769770](0, v10);
  }
  else
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v13 = *(_QWORD *)(v10 + 32);
    swift_retain();
  }
  v14 = __RKCustomTrigger.matches(with:)(v13);
  result = swift_release();
  if ((v14 & 1) != 0)
  {
LABEL_16:
    v7 = 1;
    goto LABEL_20;
  }
  if (v7 == 1)
  {
    v7 = 0;
    goto LABEL_20;
  }
  if (v12)
  {
    v15 = MEMORY[0x220769770](1, v10);
    goto LABEL_26;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v15 = *(_QWORD *)(v10 + 40);
    swift_retain();
LABEL_26:
    v16 = __RKCustomTrigger.matches(with:)(v15);
    result = swift_release();
    if ((v16 & 1) == 0)
    {
      v17 = 0;
      v18 = v7 - 2;
      while (1)
      {
        v7 = v18 != v17;
        if (v18 == v17)
          goto LABEL_20;
        v21 = v17 + 2;
        if (v12)
        {
          v19 = MEMORY[0x220769770](v17 + 2, v10);
          if (__OFADD__(v21, 1))
            goto LABEL_35;
        }
        else
        {
          if (v21 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_40;
          v19 = *(_QWORD *)(v10 + 8 * v17 + 48);
          swift_retain();
          if (__OFADD__(v21, 1))
          {
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
        }
        v20 = __RKCustomTrigger.matches(with:)(v19);
        result = swift_release();
        ++v17;
        if ((v20 & 1) != 0)
          goto LABEL_20;
      }
    }
    goto LABEL_16;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for __RKCustomTrigger()
{
  return objc_opt_self();
}

uint64_t __RKCustomTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v1[3];
  v3 = v1[4];
  v5 = v1[5];
  v6 = type metadata accessor for __RKCustomTrigger();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v5;
  *(_WORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 18) = 0;
  a1[3] = v6;
  *a1 = v7;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void __RKCustomTrigger.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKCustomTrigger.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKCustomTrigger.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t __RKCustomTrigger.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKCustomTrigger.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t __RKEntityCustomTrigger.__allocating_init(targetEntity:identifier:customArguments:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 48) = 0;
  swift_beginAccess();
  *(_QWORD *)(v8 + 48) = a1;
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  if (!a4)
    a4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(v8 + 40) = a4;
  swift_release();
  *(_WORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 18) = 0;
  return v8;
}

uint64_t __RKEntityCustomTrigger.init(targetEntity:identifier:customArguments:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = 0;
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = a1;
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  if (!a4)
    a4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(v4 + 40) = a4;
  swift_release();
  *(_WORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 18) = 0;
  return v4;
}

uint64_t __RKEntityCustomTrigger.matches(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  _QWORD v45[2];
  _QWORD *v46;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v45 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v45 - v16;
  type metadata accessor for __RKEntityCustomTrigger();
  v18 = swift_dynamicCastClass();
  if (!v18)
    goto LABEL_21;
  v19 = v18;
  if ((v46[3] != *(_QWORD *)(v18 + 24) || v46[4] != *(_QWORD *)(v18 + 32))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_21;
  }
  v45[0] = v5;
  v20 = v46;
  swift_beginAccess();
  if (v20[6])
  {
    swift_retain();
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v17);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, 1, 1, v2);
    swift_retain();
  }
  swift_beginAccess();
  v21 = *(_QWORD *)(v19 + 48);
  v45[1] = a1;
  if (v21)
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v14);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v14, 1, 1, v2);
  }
  v22 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v8);
  outlined init with copy of UUID?((uint64_t)v14, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v23((uint64_t)v8, 1, v2) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    if (v23(v22, 1, v2) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  outlined init with copy of UUID?((uint64_t)v8, (uint64_t)v11);
  if (v23(v22, 1, v2) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
LABEL_16:
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_20:
    swift_release();
    goto LABEL_21;
  }
  v24 = v45[0];
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v45[0], v22, v2);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  v26 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v26(v24, v2);
  outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  v26((uint64_t)v11, v2);
  outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  if ((v25 & 1) == 0)
    goto LABEL_20;
LABEL_18:
  v27 = v46[5];
  v28 = *(_QWORD *)(v19 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = specialized static Dictionary<>.== infix(_:_:)(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if ((v29 & 1) != 0)
    return 1;
LABEL_21:
  type metadata accessor for __RKEntityTriggerGroup();
  v31 = swift_dynamicCastClass();
  if (!v31)
    return 0;
  v32 = v31;
  swift_beginAccess();
  v33 = *(_QWORD *)(v32 + 24);
  if (v33 >> 62)
  {
LABEL_46:
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v30 = result;
    if (!result)
      goto LABEL_47;
  }
  else
  {
    v30 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (!v30)
    {
LABEL_47:
      swift_bridgeObjectRelease();
      swift_release();
      return v30;
    }
  }
  v35 = v33 & 0xC000000000000001;
  if ((v33 & 0xC000000000000001) != 0)
  {
    v36 = MEMORY[0x220769770](0, v33);
  }
  else
  {
    if (!*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    v36 = *(_QWORD *)(v33 + 32);
    swift_retain();
  }
  v37 = __RKEntityCustomTrigger.matches(with:)(v36);
  result = swift_release();
  if ((v37 & 1) != 0)
  {
LABEL_28:
    v30 = 1;
    goto LABEL_47;
  }
  if (v30 == 1)
  {
    v30 = 0;
    goto LABEL_47;
  }
  if (v35)
  {
    v38 = MEMORY[0x220769770](1, v33);
    goto LABEL_36;
  }
  if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v38 = *(_QWORD *)(v33 + 40);
    swift_retain();
LABEL_36:
    v39 = __RKEntityCustomTrigger.matches(with:)(v38);
    result = swift_release();
    if ((v39 & 1) == 0)
    {
      v40 = 0;
      v41 = v30 - 2;
      while (1)
      {
        v30 = v41 != v40;
        if (v41 == v40)
          goto LABEL_47;
        v44 = v40 + 2;
        if (v35)
        {
          v42 = MEMORY[0x220769770](v40 + 2, v33);
          if (__OFADD__(v44, 1))
            goto LABEL_45;
        }
        else
        {
          if (v44 >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v42 = *(_QWORD *)(v33 + 8 * v40 + 48);
          swift_retain();
          if (__OFADD__(v44, 1))
          {
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
        }
        v43 = __RKEntityCustomTrigger.matches(with:)(v42);
        result = swift_release();
        ++v40;
        if ((v43 & 1) != 0)
          goto LABEL_47;
      }
    }
    goto LABEL_28;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t __RKEntityCustomTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_beginAccess();
  v4 = v1[3];
  v3 = v1[4];
  v6 = v1[5];
  v5 = v1[6];
  v7 = type metadata accessor for __RKEntityCustomTrigger();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 48) = 0;
  swift_beginAccess();
  *(_QWORD *)(v8 + 48) = v5;
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 24) = v4;
  *(_QWORD *)(v8 + 32) = v3;
  swift_release();
  *(_QWORD *)(v8 + 40) = v6;
  result = swift_release();
  *(_WORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 18) = 0;
  a1[3] = v7;
  *a1 = v8;
  return result;
}

uint64_t __RKEntityCustomTrigger.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  swift_beginAccess();
  v5 = v2[6];
  if (!v5 || *(_QWORD *)(v5 + 16) != *(_QWORD *)(a1 + 16))
    return 0;
  v8 = v2[3];
  v7 = v2[4];
  swift_bridgeObjectRetain();
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for __RKEntityCustomTrigger();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 48) = 0;
  swift_beginAccess();
  *(_QWORD *)(v6 + 48) = a2;
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v9;
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 18) = 0;
  return v6;
}

void __RKEntityCustomTrigger.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityCustomTrigger.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityCustomTrigger.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t __RKEntityCustomTrigger.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t __RKEntityCustomTrigger.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityCustomTrigger()
{
  return objc_opt_self();
}

uint64_t sub_21BAFDCC0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_retain();
}

ValueMetadata *type metadata accessor for __RKCustomTriggerNotification()
{
  return &type metadata for __RKCustomTriggerNotification;
}

uint64_t method lookup function for __RKCustomTrigger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKCustomTrigger.__allocating_init(identifier:customArguments:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t method lookup function for __RKEntityCustomTrigger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityCustomTrigger.targetEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of __RKEntityCustomTrigger.targetEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of __RKEntityCustomTrigger.targetEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of __RKEntityCustomTrigger.__allocating_init(targetEntity:identifier:customArguments:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t RERenderFrameWorkload.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t RERenderFrameWorkload.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

void RERenderFrameWorkload.configure(_:)()
{
  JUMPOUT(0x22076F68CLL);
}

Swift::Void __swiftcall RERenderFrameWorkload.commit()()
{
  RERenderFrameWorkloadCommit();
}

void RERenderFrameWorkload.addScheduledHandler(handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  void *v6;
  _QWORD v7[6];

  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = v2;
  v7[4] = partial apply for closure #2 in closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:);
  v7[5] = v5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v7[3] = &block_descriptor_10;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_retain();
  swift_release();
  RERenderFrameWorkloadAddScheduledHandler();
  _Block_release(v6);
}

uint64_t sub_21BAFDE8C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t closure #1 in RERenderFrameWorkload.addCompletedHandler(handler:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  return a2(a4);
}

Swift::Void __swiftcall RERenderFrameWorkload.commitWithImmediatePresent()()
{
  RERenderFrameWorkloadCommitWithImmediatePresent();
}

uint64_t type metadata accessor for RERenderFrameWorkload()
{
  return objc_opt_self();
}

uint64_t method lookup function for RERenderFrameWorkload()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RERenderFrameWorkload.configure(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of RERenderFrameWorkload.commit()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of RERenderFrameWorkload.addScheduledHandler(handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of RERenderFrameWorkload.commitWithImmediatePresent()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t PhotogrammetryMetadataHelper.exifDict.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v1 + 16) || (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v3), (v5 & 1) == 0))
  {
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_8:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (swift_dynamicCast())
    return v7;
  else
    return 0;
}

uint64_t PhotogrammetryMetadataHelper.dateTimeOriginal.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  Swift::String v54;
  void *v55;
  id v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t (*v58)(char *, uint64_t, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  Swift::String v65;
  uint64_t v66;
  Swift::String v67;
  __int128 v68;
  __int128 v69;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = PhotogrammetryMetadataHelper.exifDict.getter();
  if (!v9)
  {
    v68 = 0u;
    v69 = 0u;
    goto LABEL_12;
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v10 + 16) || (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) == 0))
  {
    v68 = 0u;
    v69 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v13, (uint64_t)&v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v69 + 1))
  {
LABEL_12:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  if ((swift_dynamicCast() & 1) == 0)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  countAndFlagsBits = v67._countAndFlagsBits;
  object = v67._object;
  v17 = PhotogrammetryMetadataHelper.exifDict.getter();
  if (!v17)
  {
    v68 = 0u;
    v69 = 0u;
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v18 = v17;
  v66 = countAndFlagsBits;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v18 + 16) && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v22 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v21, (uint64_t)&v68);
  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v69 + 1))
    goto LABEL_22;
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  v65 = v67;
  v24 = PhotogrammetryMetadataHelper.exifDict.getter();
  if (!v24)
  {
    v68 = 0u;
    v69 = 0u;
LABEL_37:
    v37 = 808464430;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_75:
    v51 = (void *)0xE400000000000000;
LABEL_76:
    v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
    v53 = (void *)MEMORY[0x220768C3C](0xD000000000000018, 0x800000021BE87D90);
    objc_msgSend(v52, sel_setDateFormat_, v53);

    *(_QWORD *)&v68 = v66;
    *((_QWORD *)&v68 + 1) = object;
    swift_bridgeObjectRetain();
    v54._countAndFlagsBits = v37;
    v54._object = v51;
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = (void *)MEMORY[0x220768C3C](v68, *((_QWORD *)&v68 + 1));
    swift_bridgeObjectRelease();
    v56 = objc_msgSend(v52, sel_dateFromString_, v55);

    if (v56)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v57 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v57(v8, v5, v2);
      v58 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v58(v8, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
      {
        v57(a1, v8, v2);
        v59 = a1;
        v60 = 0;
        return v58(v59, v60, 1, v2);
      }
    }
    else
    {

      v58 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v58(v8, 1, 1, v2);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for Date?);
    v59 = a1;
    v60 = 1;
    return v58(v59, v60, 1, v2);
  }
  v25 = v24;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v25 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v25 + 56) + 32 * v28, (uint64_t)&v68);
  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v69 + 1))
    goto LABEL_37;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_74:
    v37 = 808464430;
    goto LABEL_75;
  }
  result = v67._countAndFlagsBits;
  v30 = ((unint64_t)v67._object >> 56) & 0xF;
  v31 = v67._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v67._object & 0x2000000000000000) != 0)
    v32 = ((unint64_t)v67._object >> 56) & 0xF;
  else
    v32 = v67._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v32)
  {
    v37 = 808464430;
    swift_bridgeObjectRelease();
    goto LABEL_75;
  }
  if (((uint64_t)v67._object & 0x1000000000000000) != 0)
  {
    v34 = specialized _parseInteger<A, B>(ascii:radix:)(v67._countAndFlagsBits, (uint64_t)v67._object, 10);
    v36 = v64;
    goto LABEL_72;
  }
  if (((uint64_t)v67._object & 0x2000000000000000) == 0)
  {
    if ((v67._countAndFlagsBits & 0x1000000000000000) != 0)
      v33 = (unsigned __int8 *)(((uint64_t)v67._object & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v34 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v33, v31, 10);
    v36 = v35 & 1;
LABEL_72:
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v47 = swift_allocObject();
      v48 = MEMORY[0x24BEE1768];
      *(_OWORD *)(v47 + 16) = xmmword_21BE411F0;
      v49 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v47 + 56) = v48;
      *(_QWORD *)(v47 + 64) = v49;
      *(_QWORD *)(v47 + 32) = v34;
      v37 = String.init(format:_:)();
      v51 = v50;
      goto LABEL_76;
    }
    goto LABEL_74;
  }
  *(_QWORD *)&v68 = v67._countAndFlagsBits;
  *((_QWORD *)&v68 + 1) = (uint64_t)v67._object & 0xFFFFFFFFFFFFFFLL;
  if (LOBYTE(v67._countAndFlagsBits) == 43)
  {
    if (!v30)
      goto LABEL_92;
    if (v30 == 1 || (BYTE1(v67._countAndFlagsBits) - 48) > 9u)
      goto LABEL_59;
    v34 = (BYTE1(v67._countAndFlagsBits) - 48);
    if (v30 != 2)
    {
      if ((BYTE2(v67._countAndFlagsBits) - 48) > 9u)
        goto LABEL_59;
      v34 = 10 * (BYTE1(v67._countAndFlagsBits) - 48)
          + (BYTE2(v67._countAndFlagsBits) - 48);
      v38 = v30 - 3;
      if (v38)
      {
        v39 = (unsigned __int8 *)&v68 + 3;
        while (1)
        {
          v40 = *v39 - 48;
          if (v40 > 9)
            goto LABEL_59;
          v41 = 10 * v34;
          if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63)
            goto LABEL_59;
          v34 = v41 + v40;
          if (__OFADD__(v41, v40))
            goto LABEL_59;
          v36 = 0;
          ++v39;
          if (!--v38)
            goto LABEL_72;
        }
      }
    }
LABEL_71:
    v36 = 0;
    goto LABEL_72;
  }
  if (LOBYTE(v67._countAndFlagsBits) != 45)
  {
    if (!v30 || (LOBYTE(v67._countAndFlagsBits) - 48) > 9u)
      goto LABEL_59;
    v34 = (LOBYTE(v67._countAndFlagsBits) - 48);
    if (v30 != 1)
    {
      if ((BYTE1(v67._countAndFlagsBits) - 48) > 9u)
        goto LABEL_59;
      v34 = 10 * (LOBYTE(v67._countAndFlagsBits) - 48)
          + (BYTE1(v67._countAndFlagsBits) - 48);
      v42 = v30 - 2;
      if (v42)
      {
        v43 = (unsigned __int8 *)&v68 + 2;
        while (1)
        {
          v44 = *v43 - 48;
          if (v44 > 9)
            goto LABEL_59;
          v45 = 10 * v34;
          if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63)
            goto LABEL_59;
          v34 = v45 + v44;
          if (__OFADD__(v45, v44))
            goto LABEL_59;
          v36 = 0;
          ++v43;
          if (!--v42)
            goto LABEL_72;
        }
      }
    }
    goto LABEL_71;
  }
  if (v30)
  {
    if (v30 != 1 && (BYTE1(v67._countAndFlagsBits) - 48) <= 9u)
    {
      if (v30 == 2)
      {
        v36 = 0;
        v34 = -(uint64_t)(BYTE1(v67._countAndFlagsBits) - 48);
        goto LABEL_72;
      }
      if ((BYTE2(v67._countAndFlagsBits) - 48) <= 9u)
      {
        v34 = -10 * (BYTE1(v67._countAndFlagsBits) - 48)
            - (BYTE2(v67._countAndFlagsBits) - 48);
        v46 = v30 - 3;
        if (!v46)
          goto LABEL_71;
        v61 = (unsigned __int8 *)&v68 + 3;
        while (1)
        {
          v62 = *v61 - 48;
          if (v62 > 9)
            break;
          v63 = 10 * v34;
          if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63)
            break;
          v34 = v63 - v62;
          if (__OFSUB__(v63, v62))
            break;
          v36 = 0;
          ++v61;
          if (!--v46)
            goto LABEL_72;
        }
      }
    }
LABEL_59:
    v34 = 0;
    v36 = 1;
    goto LABEL_72;
  }
  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

uint64_t PhotogrammetryMetadataHelper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PhotogrammetryMetadataHelper()
{
  return objc_opt_self();
}

BOOL static IKRig.Constraint.ID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t specialized Array.subscript.modify(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = (uint64_t)v4;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v4 = (_QWORD *)result;
  *v2 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4[2] > a2)
    return (uint64_t)destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = (uint64_t)v4;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v4 = (_QWORD *)result;
  *v2 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4[2] > a2)
    return (uint64_t)destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*specialized Array.subscript.modify(uint64_t **a1, unint64_t a2))()
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*result)();

  *a1 = v2;
  v4 = *v2;
  result = (uint64_t (*)())swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v4;
  if (!(_DWORD)result || v4 < 0 || (v4 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    return Array.subscript.modifyspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*result)();

  *a1 = v2;
  v4 = *v2;
  result = (uint64_t (*)())swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v4;
  if (!(_DWORD)result || v4 < 0 || (v4 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    return Array.subscript.modifyspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.modifyspecialized ()
{
  return specialized Array._endMutation()();
}

uint64_t IKSolverDefinition.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t IKSolverDefinition.rigDefinition.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  *a1 = v1[1];
  a1[1] = v1[2];
  a1[2] = v2;
  a1[3] = v3;
  a1[4] = v4;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 IKSolverDefinition.rigDefinition.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v3 = a1->n128_u64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = a1->n128_u64[1];
  result = a1[1];
  v5 = a1[2];
  *(__n128 *)(v1 + 24) = result;
  *(__n128 *)(v1 + 40) = v5;
  return result;
}

uint64_t (*IKSolverDefinition.rigDefinition.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double IKSolverDefinition.init(id:rig:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  uint64_t v4;
  double result;

  *(_QWORD *)(a3 + 16) = a2[1];
  v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a3 + 24) = *((_OWORD *)a2 + 1);
  v4 = *a2;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 40) = v3;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a3 + 56) = xmmword_21BE41200;
  *(_BYTE *)(a3 + 72) = 6;
  *(_OWORD *)(a3 + 80) = xmmword_21BE41200;
  *(_BYTE *)(a3 + 96) = 6;
  return result;
}

uint64_t IKRig.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t IKRig.maxIterations.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*IKRig.maxIterations.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float IKRig.globalFkWeight.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void IKRig.globalFkWeight.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*IKRig.globalFkWeight.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float IKRig.globalLimitsWeight.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void IKRig.globalLimitsWeight.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*IKRig.globalLimitsWeight.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKRig.joints.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 IKRig.joints.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*IKRig.joints.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKRig.constraints.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 IKRig.constraints.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*IKRig.constraints.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.init(for:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v13;
  __n128 v14;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_AI5IKRigVALVs5NeverOTg504_s17d11Foundation5k15V3forAC0A3Kit12fg5CAAE8i10V_tKcfcAC5J10VAiJVXEfU_AKTf1cn_nTf4ng_n(v5, v3, v4, v5);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  IKRig.JointCollection.init(_:)(v6, &v14);
  v13 = v14;
  IKRig.ConstraintsCollection.init(_:)(MEMORY[0x24BEE4AF8]);
  a2->n128_u64[0] = 120;
  __asm { FMOV            V1.2S, #1.0 }
  a2->n128_u64[1] = _D1;
  result = v14;
  a2[1] = v13;
  a2[2] = result;
  return result;
}

double IKRig.Joint.init(name:parentID:restTransform:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>, __n128 a6@<Q1>, __n128 a7@<Q2>)
{
  uint64_t v10;
  char v11;
  __int128 v12;
  double result;

  v10 = *a3;
  v11 = *((_BYTE *)a3 + 8);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of IKRig.Joint.init(name:parentID:restTransform:));
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = v10;
  *(_BYTE *)(a4 + 24) = v11;
  *(__n128 *)(a4 + 32) = a5;
  *(__n128 *)(a4 + 48) = a6;
  *(__n128 *)(a4 + 64) = a7;
  *(_BYTE *)(a4 + 80) = 1;
  *(_OWORD *)(a4 + 96) = v12;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 120) = 0;
  *(_QWORD *)(a4 + 128) = 0x300000000;
  result = 0.0;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_QWORD *)(a4 + 168) = 0;
  return result;
}

uint64_t IKRig.JointCollection.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];
  uint64_t v20;

  v20 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v4 = v20;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v18 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v6 = 0;
    v17 = a1;
    v7 = (uint64_t *)(a1 + 40);
    do
    {
      v8 = *v7;
      v19[0] = *(v7 - 1);
      v19[1] = v8;
      v9 = StringProtocol.hash.getter();
      v20 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v4 = v20;
      }
      v7 += 22;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v9;
      *(_QWORD *)(v12 + 40) = v6;
      *(_QWORD *)(v4 + 16) = v11 + 1;
      ++v6;
    }
    while (v5 != v6);
    a1 = v17;
    swift_bridgeObjectRelease_n();
    a2 = v18;
    if (*(_QWORD *)(v4 + 16))
      goto LABEL_7;
LABEL_9:
    v13 = MEMORY[0x24BEE4B00];
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v20 + 16))
    goto LABEL_9;
LABEL_7:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Joint.ID, Int>);
  v13 = static _DictionaryStorage.allocate(capacity:)();
LABEL_10:
  v19[0] = v13;
  v14 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v14, 1, v19);
  result = swift_release();
  v16 = v19[0];
  *a2 = a1;
  a2[1] = v16;
  return result;
}

double IKRig.ConstraintsCollection.init(arrayLiteral:)@<D0>(Swift::OpaquePointer a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  IKRig.ConstraintsCollection.init(_:)(a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t IKRig.Joint.id.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  lazy protocol witness table accessor for type String and conformance String();
  result = StringProtocol.hash.getter();
  *a1 = result;
  return result;
}

uint64_t IKRig.Joint.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void IKRig.Joint.parentID.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t IKRig.Joint.parentID.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 24) = v2;
  return result;
}

uint64_t (*IKRig.Joint.parentID.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Joint.restTransform.getter()
{
  __n128 *v0;

  return v0[2];
}

void IKRig.Joint.restTransform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  __n128 *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
}

uint64_t (*IKRig.Joint.restTransform.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKRig.Joint.active.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t IKRig.Joint.active.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*IKRig.Joint.active.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Joint.fkWeightPerAxis.getter()
{
  __n128 *v0;

  return v0[6];
}

void IKRig.Joint.fkWeightPerAxis.setter(__n128 a1)
{
  __n128 *v1;

  v1[6] = a1;
}

uint64_t (*IKRig.Joint.fkWeightPerAxis.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Joint.rotationStiffness.getter()
{
  __n128 *v0;

  return v0[7];
}

void IKRig.Joint.rotationStiffness.setter(__n128 a1)
{
  __n128 *v1;

  v1[7] = a1;
}

uint64_t (*IKRig.Joint.rotationStiffness.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Joint.limits.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 160);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 IKRig.Joint.limits.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 144) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 160) = result;
  return result;
}

uint64_t (*IKRig.Joint.limits.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static IKRig.Joint.LimitsDefinition.Axis.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void IKRig.Joint.LimitsDefinition.Axis.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int IKRig.Joint.LimitsDefinition.Axis.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

float IKRig.Joint.LimitsDefinition.weight.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void IKRig.Joint.LimitsDefinition.weight.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*IKRig.Joint.LimitsDefinition.weight.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void IKRig.Joint.LimitsDefinition.boneAxis.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

_BYTE *IKRig.Joint.LimitsDefinition.boneAxis.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = *result;
  return result;
}

uint64_t (*IKRig.Joint.LimitsDefinition.boneAxis.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Joint.LimitsDefinition.minimumAngles.getter()
{
  __n128 *v0;

  return v0[1];
}

void IKRig.Joint.LimitsDefinition.minimumAngles.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*IKRig.Joint.LimitsDefinition.minimumAngles.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*IKRig.Joint.LimitsDefinition.maximumAngles.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Joint.LimitsDefinition.init(weight:boneAxis:minimumAngles:maximumAngles:)@<Q0>(unsigned __int8 *a1@<X0>, __n128 *a2@<X8>, float a3@<S0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  unsigned __int8 v7;
  __n128 result;

  v7 = *a1;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of IKRig.Joint.LimitsDefinition.init(weight:boneAxis:minimumAngles:maximumAngles:));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of IKRig.Joint.LimitsDefinition.init(weight:boneAxis:minimumAngles:maximumAngles:));
  a2->n128_f32[0] = a3;
  a2->n128_u8[4] = v7;
  result = a5;
  a2[1] = a4;
  a2[2] = a5;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance IKRig.Joint@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  lazy protocol witness table accessor for type String and conformance String();
  result = StringProtocol.hash.getter();
  *a1 = result;
  return result;
}

void IKRig.Constraint.ID.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t IKRig.Constraint.id.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  lazy protocol witness table accessor for type String and conformance String();
  result = StringProtocol.hash.getter();
  *a1 = result;
  return result;
}

uint64_t IKRig.Constraint.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IKRig.Constraint.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*IKRig.Constraint.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKRig.Constraint.jointName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IKRig.Constraint.jointName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*IKRig.Constraint.jointName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Constraint.offset.getter()
{
  __n128 *v0;

  return v0[2];
}

void IKRig.Constraint.offset.setter(__n128 a1, __n128 a2, __n128 a3)
{
  __n128 *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
}

uint64_t (*IKRig.Constraint.offset.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Constraint.positionDemand.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 80);
  v3 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 IKRig.Constraint.positionDemand.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 96) = v3;
  return result;
}

uint64_t (*IKRig.Constraint.positionDemand.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Constraint.orientationDemand.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 144);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 IKRig.Constraint.orientationDemand.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 112) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 128) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 144) = result;
  return result;
}

uint64_t (*IKRig.Constraint.orientationDemand.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKRig.Constraint.IKPositionDemand.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;

  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of IKRig.Constraint.IKPositionDemand.init());
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

BOOL static IKRig.Constraint.IKPositionDemand.Mode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void IKRig.Constraint.IKPositionDemand.Mode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int IKRig.Constraint.IKPositionDemand.Mode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void IKRig.Constraint.IKPositionDemand.mode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *IKRig.Constraint.IKPositionDemand.mode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*IKRig.Constraint.IKPositionDemand.mode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKRig.Constraint.IKPositionDemand.influenceDepthMaxJointCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t IKRig.Constraint.IKPositionDemand.influenceDepthMaxJointCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*IKRig.Constraint.IKPositionDemand.influenceDepthMaxJointCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Constraint.IKPositionDemand.weight.getter()
{
  __n128 *v0;

  return v0[1];
}

void IKRig.Constraint.IKPositionDemand.weight.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*IKRig.Constraint.IKPositionDemand.weight.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKRig.Constraint.IKOrientationDemand.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;

  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of IKRig.Constraint.IKOrientationDemand.init());
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

__n128 IKRig.Constraint.IKOrientationDemand.mode.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 IKRig.Constraint.IKOrientationDemand.mode.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*IKRig.Constraint.IKOrientationDemand.mode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKRig.Constraint.IKOrientationDemand.influenceDepthMaxJointCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t IKRig.Constraint.IKOrientationDemand.influenceDepthMaxJointCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*IKRig.Constraint.IKOrientationDemand.influenceDepthMaxJointCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKRig.Constraint.IKOrientationDemand.weight.getter()
{
  __n128 *v0;

  return v0[2];
}

void IKRig.Constraint.IKOrientationDemand.weight.setter(__n128 a1)
{
  __n128 *v1;

  v1[2] = a1;
}

uint64_t (*IKRig.Constraint.IKOrientationDemand.weight.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 static IKRig.Constraint.point(named:on:positionWeight:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static IKRig.Constraint.point(named:on:positionWeight:));
  v11 = one-time initialization token for identity;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 != -1)
    swift_once();
  v12 = static Transform.identity;
  v13 = xmmword_2551B1050;
  v14 = xmmword_2551B1060;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_OWORD *)(a5 + 32) = v12;
  *(_OWORD *)(a5 + 48) = v13;
  *(_OWORD *)(a5 + 64) = v14;
  *(_OWORD *)(a5 + 80) = xmmword_21BE5FCA0;
  result = a6;
  *(__n128 *)(a5 + 96) = a6;
  *(_QWORD *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 120) = 0;
  *(_QWORD *)(a5 + 128) = 255;
  *(_QWORD *)(a5 + 136) = 0;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 152) = 0;
  return result;
}

__n128 static IKRig.Constraint.orient(named:on:orientationWeight:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static IKRig.Constraint.orient(named:on:orientationWeight:));
  v11 = one-time initialization token for identity;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 != -1)
    swift_once();
  v12 = static Transform.identity;
  v13 = xmmword_2551B1050;
  v14 = xmmword_2551B1060;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_OWORD *)(a5 + 32) = v12;
  *(_OWORD *)(a5 + 48) = v13;
  *(_OWORD *)(a5 + 64) = v14;
  *(_QWORD *)(a5 + 80) = 2;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_QWORD *)(a5 + 120) = 0;
  result = a6;
  *(_OWORD *)(a5 + 128) = xmmword_21BE5FCB0;
  *(__n128 *)(a5 + 144) = a6;
  return result;
}

__n128 static IKRig.Constraint.parent(named:on:positionWeight:orientationWeight:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>)
{
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static IKRig.Constraint.parent(named:on:positionWeight:orientationWeight:));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static IKRig.Constraint.parent(named:on:positionWeight:orientationWeight:));
  v12 = one-time initialization token for identity;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = static Transform.identity;
  v14 = xmmword_2551B1050;
  v15 = xmmword_2551B1060;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_OWORD *)(a5 + 32) = v13;
  *(_OWORD *)(a5 + 48) = v14;
  *(_OWORD *)(a5 + 64) = v15;
  *(_OWORD *)(a5 + 80) = xmmword_21BE5FCA0;
  *(__n128 *)(a5 + 96) = a6;
  *(_QWORD *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 120) = 0;
  result = a7;
  *(_OWORD *)(a5 + 128) = xmmword_21BE5FCB0;
  *(__n128 *)(a5 + 144) = a7;
  return result;
}

__n128 static IKRig.Constraint.lookAtAdditive(named:on:lookingAlong:orientationWeight:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>)
{
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static IKRig.Constraint.lookAtAdditive(named:on:lookingAlong:orientationWeight:));
  v12 = one-time initialization token for identity;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = static Transform.identity;
  v14 = xmmword_2551B1050;
  v15 = xmmword_2551B1060;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_OWORD *)(a5 + 32) = v13;
  *(_OWORD *)(a5 + 48) = v14;
  *(_OWORD *)(a5 + 64) = v15;
  *(_QWORD *)(a5 + 80) = 2;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(__n128 *)(a5 + 112) = a6;
  *(_OWORD *)(a5 + 128) = xmmword_21BE5FCA0;
  result = a7;
  *(__n128 *)(a5 + 144) = a7;
  return result;
}

__n128 static IKRig.Constraint.lookAtAbsolute(named:on:lookingAlong:orientationWeight:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>)
{
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static IKRig.Constraint.lookAtAbsolute(named:on:lookingAlong:orientationWeight:));
  v12 = one-time initialization token for identity;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = static Transform.identity;
  v14 = xmmword_2551B1050;
  v15 = xmmword_2551B1060;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_OWORD *)(a5 + 32) = v13;
  *(_OWORD *)(a5 + 48) = v14;
  *(_OWORD *)(a5 + 64) = v15;
  *(_QWORD *)(a5 + 80) = 2;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(__n128 *)(a5 + 112) = a6;
  *(_OWORD *)(a5 + 128) = xmmword_21BE5FCC0;
  result = a7;
  *(__n128 *)(a5 + 144) = a7;
  return result;
}

uint64_t IKRig.JointCollection.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[11];
  _OWORD __dst[11];

  v3 = v2;
  v5 = v2[1];
  if (*(_QWORD *)(v5 + 16) && (v6 = *v3, result = specialized __RawDictionaryStorage.find<A>(_:)(*a1), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * result);
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(_QWORD *)(v6 + 16))
    {
      v10 = (_OWORD *)(v6 + 176 * v9);
      v11 = v10[2];
      v12 = v10[4];
      v20[1] = v10[3];
      v20[2] = v12;
      v20[0] = v11;
      v13 = v10[5];
      v14 = v10[6];
      v15 = v10[8];
      v20[5] = v10[7];
      v20[6] = v15;
      v20[3] = v13;
      v20[4] = v14;
      v16 = v10[9];
      v17 = v10[10];
      v18 = v10[12];
      v20[9] = v10[11];
      v20[10] = v18;
      v20[7] = v16;
      v20[8] = v17;
      memmove(__dst, v10 + 2, 0xB0uLL);
      destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(__dst, v19);
      outlined init with take of Transform?((uint64_t)__dst, a2, &demangling cache variable for type metadata for IKRig.Joint?);
      return outlined retain of String?((uint64_t)v20);
    }
    __break(1u);
  }
  else
  {
    _s17RealityFoundation5IKRigV5JointVSgWOi0_(__dst);
    return outlined init with take of Transform?((uint64_t)__dst, a2, &demangling cache variable for type metadata for IKRig.Joint?);
  }
  return result;
}

uint64_t key path getter for IKRig.JointCollection.subscript(_:) : IKRig.JointCollection@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[176];
  _OWORD v8[11];

  v4 = *a2;
  v8[0] = *a1;
  v6 = v4;
  IKRig.JointCollection.subscript.getter(&v6, (uint64_t)v7);
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v8, &demangling cache variable for type metadata for IKRig.Joint?);
  return outlined init with take of Transform?((uint64_t)v8, a3, &demangling cache variable for type metadata for IKRig.Joint?);
}

uint64_t key path setter for IKRig.JointCollection.subscript(_:) : IKRig.JointCollection(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  _BYTE v6[176];
  _BYTE v7[176];

  v3 = *a3;
  outlined init with take of Transform?(a1, (uint64_t)v7, &demangling cache variable for type metadata for IKRig.Joint?);
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for IKRig.Joint?);
  v5 = v3;
  outlined retain of String?((uint64_t)v7);
  return IKRig.JointCollection.subscript.setter((uint64_t)v6, &v5);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[22];
  _BYTE v9[176];

  v3 = *a3;
  v4 = a3[1];
  outlined init with take of Transform?(a1, (uint64_t)v9, &demangling cache variable for type metadata for IKRig.Joint?);
  v8[0] = v3;
  v8[1] = v4;
  outlined retain of String?((uint64_t)v9);
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.hash.getter();
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for IKRig.Joint?);
  v7 = v5;
  return IKRig.JointCollection.subscript.setter((uint64_t)v8, &v7);
}

uint64_t IKRig.JointCollection.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[11];
  _BYTE v30[176];
  _OWORD v31[11];

  v3 = v2;
  outlined init with take of Transform?(a1, (uint64_t)v30, &demangling cache variable for type metadata for IKRig.Joint?);
  v5 = *a2;
  outlined init with take of Transform?((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for IKRig.Joint?);
  result = getEnumTag for AudioFileResource.Error((uint64_t)v31);
  if ((_DWORD)result != 1)
  {
    v29[0] = v31[0];
    lazy protocol witness table accessor for type String and conformance String();
    if (StringProtocol.hash.getter() == v5)
    {
      v7 = *(_QWORD *)(v3 + 8);
      if (*(_QWORD *)(v7 + 16))
      {
        v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
        if ((v9 & 1) != 0)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
          v11 = *(_QWORD **)v3;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            if ((v10 & 0x8000000000000000) == 0)
              goto LABEL_7;
          }
          else
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
            v11 = (_QWORD *)result;
            if ((v10 & 0x8000000000000000) == 0)
            {
LABEL_7:
              if (v10 < v11[2])
              {
                v12 = &v11[22 * v10];
                v13 = v12[2];
                v14 = v12[4];
                v29[1] = v12[3];
                v29[2] = v14;
                v29[0] = v13;
                v15 = v12[5];
                v16 = v12[6];
                v17 = v12[8];
                v29[5] = v12[7];
                v29[6] = v17;
                v29[3] = v15;
                v29[4] = v16;
                v18 = v12[9];
                v19 = v12[10];
                v20 = v12[12];
                v29[9] = v12[11];
                v29[10] = v20;
                v29[7] = v18;
                v29[8] = v19;
                v21 = v31[0];
                v22 = v31[2];
                v12[3] = v31[1];
                v12[4] = v22;
                v12[2] = v21;
                v23 = v31[3];
                v24 = v31[4];
                v25 = v31[6];
                v12[7] = v31[5];
                v12[8] = v25;
                v12[5] = v23;
                v12[6] = v24;
                v26 = v31[7];
                v27 = v31[8];
                v28 = v31[10];
                v12[11] = v31[9];
                v12[12] = v28;
                v12[9] = v26;
                v12[10] = v27;
                result = outlined release of IKRig.Joint?((uint64_t)v29);
                *(_QWORD *)v3 = v11;
                return result;
              }
              goto LABEL_13;
            }
          }
          __break(1u);
LABEL_13:
          __break(1u);
          return result;
        }
      }
    }
    return outlined release of IKRig.Joint?((uint64_t)v30);
  }
  return result;
}

void (*IKRig.JointCollection.subscript.modify(_QWORD *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  char *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*result)(uint64_t *, char);
  char v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v5 = (char *)malloc(0x2D0uLL);
  *a1 = v5;
  v6 = v5 + 176;
  *((_QWORD *)v5 + 88) = v2;
  v7 = *a2;
  *((_QWORD *)v5 + 89) = *a2;
  v8 = v2[1];
  if (!*(_QWORD *)(v8 + 16)
    || (v9 = *v2,
        result = (void (*)(uint64_t *, char))specialized __RawDictionaryStorage.find<A>(_:)(v7),
        (v11 & 1) == 0))
  {
    _s17RealityFoundation5IKRigV5JointVSgWOi0_(v6);
    outlined init with take of Transform?((uint64_t)v6, (uint64_t)v5, &demangling cache variable for type metadata for IKRig.Joint?);
    return IKRig.JointCollection.subscript.modify;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * (_QWORD)result);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(_QWORD *)(v9 + 16))
  {
    v13 = (_OWORD *)(v9 + 176 * v12);
    v14 = v13[2];
    v15 = v13[4];
    *((_OWORD *)v5 + 23) = v13[3];
    *((_OWORD *)v5 + 24) = v15;
    *((_OWORD *)v5 + 22) = v14;
    v16 = v13[5];
    v17 = v13[6];
    v18 = v13[8];
    *((_OWORD *)v5 + 27) = v13[7];
    *((_OWORD *)v5 + 28) = v18;
    *((_OWORD *)v5 + 25) = v16;
    *((_OWORD *)v5 + 26) = v17;
    v19 = v13[9];
    v20 = v13[10];
    v21 = v13[12];
    *((_OWORD *)v5 + 31) = v13[11];
    *((_OWORD *)v5 + 32) = v21;
    *((_OWORD *)v5 + 29) = v19;
    *((_OWORD *)v5 + 30) = v20;
    memmove(v6, v13 + 2, 0xB0uLL);
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v6, v22);
    outlined init with take of Transform?((uint64_t)v6, (uint64_t)v5, &demangling cache variable for type metadata for IKRig.Joint?);
    outlined retain of String?((uint64_t)(v5 + 352));
    return IKRig.JointCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

void IKRig.JointCollection.subscript.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  v3 = *a1 + 176;
  v4 = *a1 + 352;
  if ((a2 & 1) != 0)
  {
    v5 = v2[89];
    outlined init with take of Transform?(*a1, v4, &demangling cache variable for type metadata for IKRig.Joint?);
    outlined init with take of Transform?(v4, (uint64_t)(v2 + 66), &demangling cache variable for type metadata for IKRig.Joint?);
    v7 = v5;
    outlined retain of String?(v4);
    IKRig.JointCollection.subscript.setter((uint64_t)(v2 + 66), &v7);
    outlined init with take of Transform?((uint64_t)v2, v3, &demangling cache variable for type metadata for IKRig.Joint?);
    outlined release of IKRig.Joint?(v3);
  }
  else
  {
    v6 = v2[89];
    outlined init with take of Transform?(*a1, v3, &demangling cache variable for type metadata for IKRig.Joint?);
    outlined init with take of Transform?(v3, v4, &demangling cache variable for type metadata for IKRig.Joint?);
    v7 = v6;
    IKRig.JointCollection.subscript.setter(v4, &v7);
  }
  free(v2);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (_QWORD *)*a1;
  v3 = *a1 + 176;
  v4 = *a1 + 352;
  if ((a2 & 1) != 0)
  {
    v5 = v2[89];
    v6 = v2[88];
    outlined init with take of Transform?(*a1, v4, &demangling cache variable for type metadata for IKRig.Joint?);
    v2[66] = v6;
    v2[67] = v5;
    outlined retain of String?(v4);
    v7 = StringProtocol.hash.getter();
    outlined init with take of Transform?(v4, (uint64_t)(v2 + 66), &demangling cache variable for type metadata for IKRig.Joint?);
    v11 = v7;
    IKRig.JointCollection.subscript.setter((uint64_t)(v2 + 66), &v11);
    outlined init with take of Transform?((uint64_t)v2, v3, &demangling cache variable for type metadata for IKRig.Joint?);
    outlined release of IKRig.Joint?(v3);
  }
  else
  {
    v8 = v2[89];
    v9 = v2[88];
    outlined init with take of Transform?(*a1, v3, &demangling cache variable for type metadata for IKRig.Joint?);
    v2[44] = v9;
    v2[45] = v8;
    v10 = StringProtocol.hash.getter();
    outlined init with take of Transform?(v3, v4, &demangling cache variable for type metadata for IKRig.Joint?);
    v11 = v10;
    IKRig.JointCollection.subscript.setter(v4, &v11);
  }
  free(v2);
}

uint64_t IKRig.JointCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)&v8 = a1;
  *((_QWORD *)&v8 + 1) = a2;
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.hash.getter();
  v8 = *v3;
  v7 = v5;
  return IKRig.JointCollection.subscript.getter(&v7, a3);
}

uint64_t key path getter for IKRig.JointCollection.subscript(_:) : IKRig.JointCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[176];
  _QWORD v8[22];

  v3 = *a1;
  v4 = a1[1];
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8[0] = v3;
  v8[1] = v4;
  v6 = StringProtocol.hash.getter();
  IKRig.JointCollection.subscript.getter(&v6, (uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v8, &demangling cache variable for type metadata for IKRig.Joint?);
  return outlined init with take of Transform?((uint64_t)v8, a2, &demangling cache variable for type metadata for IKRig.Joint?);
}

uint64_t IKRig.JointCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[22];
  _BYTE v9[176];

  outlined init with take of Transform?(a1, (uint64_t)v9, &demangling cache variable for type metadata for IKRig.Joint?);
  v8[0] = a2;
  v8[1] = a3;
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.hash.getter();
  swift_bridgeObjectRelease();
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for IKRig.Joint?);
  v7 = v5;
  return IKRig.JointCollection.subscript.setter((uint64_t)v8, &v7);
}

void (*IKRig.JointCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t *v3;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*result)(uint64_t *, char);
  char v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v7 = (char *)malloc(0x2E0uLL);
  *a1 = v7;
  *((_QWORD *)v7 + 22) = a2;
  v8 = v7 + 176;
  *((_QWORD *)v7 + 90) = v3;
  *((_QWORD *)v7 + 89) = a3;
  *((_QWORD *)v7 + 88) = a2;
  v10 = *v3;
  v9 = v3[1];
  *((_QWORD *)v7 + 23) = a3;
  *((_QWORD *)v7 + 91) = lazy protocol witness table accessor for type String and conformance String();
  v11 = StringProtocol.hash.getter();
  if (!*(_QWORD *)(v9 + 16)
    || (result = (void (*)(uint64_t *, char))specialized __RawDictionaryStorage.find<A>(_:)(v11),
        (v13 & 1) == 0))
  {
    _s17RealityFoundation5IKRigV5JointVSgWOi0_(v8);
    outlined init with take of Transform?((uint64_t)v8, (uint64_t)v7, &demangling cache variable for type metadata for IKRig.Joint?);
    return IKRig.JointCollection.subscript.modify;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * (_QWORD)result);
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v14 < *(_QWORD *)(v10 + 16))
  {
    v15 = (_OWORD *)(v10 + 176 * v14);
    v16 = v15[2];
    v17 = v15[4];
    *((_OWORD *)v7 + 12) = v15[3];
    *((_OWORD *)v7 + 13) = v17;
    *v8 = v16;
    v18 = v15[5];
    v19 = v15[6];
    v20 = v15[8];
    *((_OWORD *)v7 + 16) = v15[7];
    *((_OWORD *)v7 + 17) = v20;
    *((_OWORD *)v7 + 14) = v18;
    *((_OWORD *)v7 + 15) = v19;
    v21 = v15[9];
    v22 = v15[10];
    v23 = v15[12];
    *((_OWORD *)v7 + 20) = v15[11];
    *((_OWORD *)v7 + 21) = v23;
    *((_OWORD *)v7 + 18) = v21;
    *((_OWORD *)v7 + 19) = v22;
    memmove(v7 + 352, v15 + 2, 0xB0uLL);
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v7 + 352, v24);
    outlined init with take of Transform?((uint64_t)(v7 + 352), (uint64_t)v7, &demangling cache variable for type metadata for IKRig.Joint?);
    outlined retain of String?((uint64_t)v8);
    return IKRig.JointCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t IKRig.JointCollection.forEach(descendantOf:inclusive:update:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;

  v6 = v5;
  lazy protocol witness table accessor for type String and conformance String();
  result = StringProtocol.hash.getter();
  v11 = v5[1];
  if (!*(_QWORD *)(v11 + 16))
    return result;
  result = specialized __RawDictionaryStorage.find<A>(_:)(result);
  if ((v12 & 1) == 0)
    return result;
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * result);
  v14 = *v5;
  if ((a3 & 1) == 0)
    goto LABEL_8;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_128;
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    return result;
  }
  while (1)
  {
    if (v13 >= *(_QWORD *)(v14 + 16))
      goto LABEL_130;
    a4((_QWORD *)(v14 + 176 * v13 + 32));
    *v6 = v14;
LABEL_8:
    v15 = (_QWORD *)specialized Array.init(repeating:count:)(MEMORY[0x24BEE4AF8], *(_QWORD *)(v14 + 16));
    v16 = *(_QWORD *)(v14 + 16);
    if (v16)
    {
      v65 = (_QWORD *)v13;
      swift_bridgeObjectRetain();
      v17 = 0;
      v14 += 56;
      v69 = v16;
      v71 = v11;
      do
      {
        if ((*(_BYTE *)v14 & 1) == 0)
        {
          if (*(_QWORD *)(v11 + 16))
          {
            v18 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v14 - 8));
            if ((v19 & 1) != 0)
            {
              v11 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v18);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                if ((v11 & 0x8000000000000000) != 0)
                  goto LABEL_111;
              }
              else
              {
                v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
                if ((v11 & 0x8000000000000000) != 0)
                  goto LABEL_111;
              }
              if (v11 >= v15[2])
                goto LABEL_110;
              v20 = (_QWORD *)v15[v11 + 4];
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v68 = v15 + 4;
              v15[v11 + 4] = v20;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
                v68[v11] = v20;
              }
              v16 = v69;
              v13 = v20[2];
              v22 = v20[3];
              if (v13 >= v22 >> 1)
              {
                v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v13 + 1, 1, v20);
                v68[v11] = v20;
              }
              v20[2] = v13 + 1;
              v20[v13 + 4] = v17;
              v11 = v71;
            }
          }
        }
        ++v17;
        v14 += 176;
      }
      while (v16 != v17);
      swift_bridgeObjectRelease();
      v13 = (unint64_t)v65;
    }
    if ((v13 & 0x8000000000000000) != 0)
      goto LABEL_118;
    if (v13 < v15[2])
      break;
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v14);
    v14 = result;
    if ((v13 & 0x8000000000000000) != 0)
      goto LABEL_129;
  }
  v72 = v15 + 4;
  v23 = v15[v13 + 4];
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
    return swift_bridgeObjectRelease();
  v25 = v23 + 32;
  swift_bridgeObjectRetain();
  v26 = 0;
  v53 = v25;
  v54 = v24;
  while (1)
  {
    v60 = v26;
    v14 = *(_QWORD *)(v25 + 8 * v26);
    v13 = *v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_100;
    }
    else
    {
      v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v13);
      if ((v14 & 0x8000000000000000) != 0)
      {
LABEL_100:
        __break(1u);
        return swift_bridgeObjectRelease();
      }
    }
    if (v14 >= *(_QWORD *)(v13 + 16))
      goto LABEL_120;
    a4((_QWORD *)(v13 + 176 * v14 + 32));
    *v6 = v13;
    if (v14 >= v15[2])
      goto LABEL_121;
    v27 = v72[v14];
    v28 = *(_QWORD *)(v27 + 16);
    if (v28)
      break;
LABEL_97:
    v26 = v60 + 1;
    v25 = v53;
    if (v60 + 1 == v54)
      goto LABEL_106;
  }
  v29 = v27 + 32;
  swift_bridgeObjectRetain();
  v30 = 0;
  v51 = v29;
  v52 = v28;
LABEL_35:
  v58 = v30;
  v14 = *(_QWORD *)(v29 + 8 * v30);
  v13 = *v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_127;
  }
  else
  {
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v13);
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_127;
  }
  if (v14 >= *(_QWORD *)(v13 + 16))
    goto LABEL_122;
  a4((_QWORD *)(v13 + 176 * v14 + 32));
  *v6 = v13;
  if (v14 >= v15[2])
    goto LABEL_123;
  v31 = v72[v14];
  v57 = *(_QWORD *)(v31 + 16);
  if (!v57)
    goto LABEL_93;
  v32 = v31 + 32;
  swift_bridgeObjectRetain();
  v33 = 0;
  v50 = v32;
LABEL_41:
  v59 = v33;
  v14 = *(_QWORD *)(v32 + 8 * v33);
  v13 = *v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_126;
  }
  else
  {
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v13);
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_126;
  }
  if (v14 >= *(_QWORD *)(v13 + 16))
    goto LABEL_124;
  a4((_QWORD *)(v13 + 176 * v14 + 32));
  *v6 = v13;
  if (v14 >= v15[2])
    goto LABEL_125;
  v34 = v72[v14];
  v61 = *(_QWORD *)(v34 + 16);
  if (!v61)
    goto LABEL_89;
  v35 = v34 + 32;
  swift_bridgeObjectRetain();
  v36 = 0;
  v55 = v35;
LABEL_47:
  v62 = v36;
  v14 = *(_QWORD *)(v35 + 8 * v36);
  v13 = *v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_117;
  }
  else
  {
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v13);
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_117;
  }
  if (v14 >= *(_QWORD *)(v13 + 16))
    goto LABEL_115;
  a4((_QWORD *)(v13 + 176 * v14 + 32));
  *v6 = v13;
  if (v14 >= v15[2])
  {
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  v37 = v72[v14];
  v11 = *(_QWORD *)(v37 + 16);
  if (!v11)
    goto LABEL_85;
  v63 = v37 + 32;
  swift_bridgeObjectRetain();
  v38 = 0;
  v56 = v11;
  while (1)
  {
    v64 = v38;
    v14 = *(_QWORD *)(v63 + 8 * v38);
    v13 = *v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_114;
    }
    else
    {
      v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v13);
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_114;
    }
    if (v14 >= *(_QWORD *)(v13 + 16))
      goto LABEL_112;
    a4((_QWORD *)(v13 + 176 * v14 + 32));
    *v6 = v13;
    if (v14 >= v15[2])
      goto LABEL_113;
    v39 = v72[v14];
    v67 = *(_QWORD **)(v39 + 16);
    if (v67)
      break;
LABEL_54:
    v38 = v64 + 1;
    if (v64 + 1 == v11)
    {
      swift_bridgeObjectRelease();
LABEL_85:
      v36 = v62 + 1;
      v35 = v55;
      if (v62 + 1 != v61)
        goto LABEL_47;
      swift_bridgeObjectRelease();
LABEL_89:
      v33 = v59 + 1;
      v32 = v50;
      if (v59 + 1 == v57)
      {
        swift_bridgeObjectRelease();
LABEL_93:
        v30 = v58 + 1;
        v29 = v51;
        if (v58 + 1 == v52)
        {
          swift_bridgeObjectRelease();
          goto LABEL_97;
        }
        goto LABEL_35;
      }
      goto LABEL_41;
    }
  }
  v66 = v39 + 32;
  swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(v66 + 8 * v13);
    v14 = *v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_109;
    }
    else
    {
      v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v14);
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_109;
    }
    if (v11 >= *(_QWORD *)(v14 + 16))
    {
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    a4((_QWORD *)(v14 + 176 * v11 + 32));
    *v6 = v14;
    if (v11 >= v15[2])
      goto LABEL_108;
    v40 = v72[v11];
    v41 = *(_QWORD *)(v40 + 16);
    if (v41)
      break;
LABEL_62:
    if ((_QWORD *)++v13 == v67)
    {
      swift_bridgeObjectRelease();
      v11 = v56;
      goto LABEL_54;
    }
  }
  v70 = (_QWORD *)v13;
  v42 = v40 + 32;
  swift_bridgeObjectRetain();
  v43 = 0;
  while (1)
  {
    v44 = *(_QWORD *)(v42 + 8 * v43);
    v45 = (_QWORD *)*v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      break;
    if ((v44 & 0x8000000000000000) != 0)
      goto LABEL_103;
LABEL_72:
    if (v44 >= v45[2])
      goto LABEL_104;
    a4(&v45[22 * v44 + 4]);
    *v6 = (uint64_t)v45;
    if (v44 >= v15[2])
      goto LABEL_105;
    v46 = v72[v44];
    v47 = *(_QWORD *)(v46 + 16);
    swift_bridgeObjectRetain();
    if (v47)
    {
      v48 = (unint64_t *)(v46 + 32);
      do
      {
        v49 = *v48++;
        updateChildren #1 (of:) in IKRig.JointCollection.forEach(descendantOf:inclusive:update:)(v49, a4, a5, v6, (uint64_t)v15);
        --v47;
      }
      while (v47);
    }
    swift_bridgeObjectRelease();
    if (++v43 == v41)
    {
      swift_bridgeObjectRelease();
      v13 = (unint64_t)v70;
      goto LABEL_62;
    }
  }
  v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
  if ((v44 & 0x8000000000000000) == 0)
    goto LABEL_72;
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t updateChildren #1 (of:) in IKRig.JointCollection.forEach(descendantOf:inclusive:update:)(unint64_t a1, uint64_t (*a2)(_QWORD *), uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;

  v10 = (_QWORD *)*a4;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a4 = (uint64_t)v10;
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  v10 = (_QWORD *)result;
  *a4 = result;
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_11;
LABEL_3:
  if (v10[2] <= a1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = a2(&v10[22 * a1 + 4]);
  if (*(_QWORD *)(a5 + 16) <= a1)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v12 = *(_QWORD *)(a5 + 8 * a1 + 32);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v13; ++i)
    {
      v15 = *(_QWORD *)(v12 + 8 * i + 32);
      updateChildren #1 (of:) in IKRig.JointCollection.forEach(descendantOf:inclusive:update:)(v15, a2, a3, a4, a5);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t IKRig.JointCollection.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

BOOL IKRig.JointCollection.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

Swift::Bool __swiftcall IKRig.JointCollection.contains(_:)(RealityFoundation::IKRig::Joint::ID a1)
{
  return IKRig.JointCollection.contains(_:)((_QWORD *)a1.nameHash, (void (*)(_QWORD))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKRig.JointCollection.set(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t result;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 *v43;
  _OWORD v44[11];
  _OWORD v45[11];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v3 = v2;
  v5 = a1[9];
  v65 = a1[8];
  v66 = v5;
  v67 = a1[10];
  v6 = a1[5];
  v61 = a1[4];
  v62 = v6;
  v7 = a1[7];
  v63 = a1[6];
  v64 = v7;
  v8 = a1[1];
  v57 = *a1;
  v58 = v8;
  v9 = a1[3];
  v59 = a1[2];
  v60 = v9;
  v46 = v57;
  lazy protocol witness table accessor for type String and conformance String();
  v10 = StringProtocol.hash.getter();
  v11 = *(_QWORD **)(v2 + 8);
  if (!v11[2] || (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v13 & 1) == 0))
  {
    _s17RealityFoundation5IKRigV5JointVSgWOi0_(&v46);
    v43 = &v46;
    return outlined init with take of Transform?((uint64_t)v43, a2, &demangling cache variable for type metadata for IKRig.Joint?);
  }
  v14 = *(_QWORD *)(v11[7] + 8 * v12);
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD **)v3;
    if (v14 < *(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v15 = &v11[22 * v14];
      v16 = v15[2];
      v17 = v15[4];
      v47 = v15[3];
      v48 = v17;
      v46 = v16;
      v18 = v15[5];
      v19 = v15[6];
      v20 = v15[8];
      v51 = v15[7];
      v52 = v20;
      v49 = v18;
      v50 = v19;
      v21 = v15[9];
      v22 = v15[10];
      v23 = v15[12];
      v55 = v15[11];
      v56 = v23;
      v53 = v21;
      v54 = v22;
      outlined retain of String?((uint64_t)&v46);
      outlined retain of String?((uint64_t)&v57);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_12:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  v11 = (_QWORD *)result;
LABEL_6:
  if (v14 < v11[2])
  {
    v25 = &v11[22 * v14];
    v26 = v25[2];
    v27 = v25[4];
    v44[1] = v25[3];
    v44[2] = v27;
    v44[0] = v26;
    v28 = v25[5];
    v29 = v25[6];
    v30 = v25[8];
    v44[5] = v25[7];
    v44[6] = v30;
    v44[3] = v28;
    v44[4] = v29;
    v31 = v25[9];
    v32 = v25[10];
    v33 = v25[12];
    v44[9] = v25[11];
    v44[10] = v33;
    v44[7] = v31;
    v44[8] = v32;
    v34 = v57;
    v35 = v59;
    v25[3] = v58;
    v25[4] = v35;
    v25[2] = v34;
    v36 = v60;
    v37 = v61;
    v38 = v63;
    v25[7] = v62;
    v25[8] = v38;
    v25[5] = v36;
    v25[6] = v37;
    v39 = v64;
    v40 = v65;
    v41 = v67;
    v25[11] = v66;
    v25[12] = v41;
    v25[9] = v39;
    v25[10] = v40;
    outlined release of IKRig.Joint?((uint64_t)v44);
    *(_QWORD *)v3 = v11;
    v45[8] = v54;
    v45[9] = v55;
    v45[10] = v56;
    v45[4] = v50;
    v45[5] = v51;
    v45[6] = v52;
    v45[7] = v53;
    v45[0] = v46;
    v45[1] = v47;
    v45[2] = v48;
    v45[3] = v49;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v45, v42);
    v43 = v45;
    return outlined init with take of Transform?((uint64_t)v43, a2, &demangling cache variable for type metadata for IKRig.Joint?);
  }
  __break(1u);
  return result;
}

uint64_t IKRig.JointCollection.startIndex.getter()
{
  return 0;
}

unint64_t IKRig.JointCollection.subscript.getter@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[11];

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = (_OWORD *)(*(_QWORD *)v2 + 176 * result);
    v4 = v3[2];
    v5 = v3[4];
    v17[1] = v3[3];
    v17[2] = v5;
    v17[0] = v4;
    v6 = v3[5];
    v7 = v3[6];
    v8 = v3[8];
    v17[5] = v3[7];
    v17[6] = v8;
    v17[3] = v6;
    v17[4] = v7;
    v9 = v3[9];
    v10 = v3[10];
    v11 = v3[12];
    v17[9] = v3[11];
    v17[10] = v11;
    v17[7] = v9;
    v17[8] = v10;
    v12 = v3[11];
    a2[8] = v3[10];
    a2[9] = v12;
    a2[10] = v3[12];
    v13 = v3[7];
    a2[4] = v3[6];
    a2[5] = v13;
    v14 = v3[9];
    a2[6] = v3[8];
    a2[7] = v14;
    v15 = v3[3];
    *a2 = v3[2];
    a2[1] = v15;
    v16 = v3[5];
    a2[2] = v3[4];
    a2[3] = v16;
    return outlined retain of String?((uint64_t)v17);
  }
  __break(1u);
  return result;
}

uint64_t key path getter for IKRig.JointCollection.subscript(_:) : IKRig.JointCollection@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[11];

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    v4 = (_OWORD *)(*(_QWORD *)result + 176 * v3);
    v5 = v4[2];
    v6 = v4[4];
    v18[1] = v4[3];
    v18[2] = v6;
    v18[0] = v5;
    v7 = v4[5];
    v8 = v4[6];
    v9 = v4[8];
    v18[5] = v4[7];
    v18[6] = v9;
    v18[3] = v7;
    v18[4] = v8;
    v10 = v4[9];
    v11 = v4[10];
    v12 = v4[12];
    v18[9] = v4[11];
    v18[10] = v12;
    v18[7] = v10;
    v18[8] = v11;
    v13 = v4[11];
    a3[8] = v4[10];
    a3[9] = v13;
    a3[10] = v4[12];
    v14 = v4[7];
    a3[4] = v4[6];
    a3[5] = v14;
    v15 = v4[9];
    a3[6] = v4[8];
    a3[7] = v15;
    v16 = v4[3];
    *a3 = v4[2];
    a3[1] = v16;
    v17 = v4[5];
    a3[2] = v4[4];
    a3[3] = v17;
    return outlined retain of String?((uint64_t)v18);
  }
  __break(1u);
  return result;
}

uint64_t key path setter for IKRig.JointCollection.subscript(_:) : IKRig.JointCollection(__int128 *a1, _QWORD **a2, unint64_t *a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t result;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[11];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v4 = *a3;
  v5 = a1[9];
  v38 = a1[8];
  v39 = v5;
  v40 = a1[10];
  v6 = a1[5];
  v34 = a1[4];
  v35 = v6;
  v7 = a1[7];
  v36 = a1[6];
  v37 = v7;
  v8 = a1[1];
  v30 = *a1;
  v31 = v8;
  v9 = a1[3];
  v32 = a1[2];
  v33 = v9;
  v10 = *a2;
  outlined retain of String?((uint64_t)&v30);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  v10 = (_QWORD *)result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < v10[2])
  {
    v12 = &v10[22 * v4];
    v13 = v12[2];
    v14 = v12[4];
    v29[1] = v12[3];
    v29[2] = v14;
    v29[0] = v13;
    v15 = v12[5];
    v16 = v12[6];
    v17 = v12[8];
    v29[5] = v12[7];
    v29[6] = v17;
    v29[3] = v15;
    v29[4] = v16;
    v18 = v12[9];
    v19 = v12[10];
    v20 = v12[12];
    v29[9] = v12[11];
    v29[10] = v20;
    v29[7] = v18;
    v29[8] = v19;
    v21 = v30;
    v22 = v32;
    v12[3] = v31;
    v12[4] = v22;
    v12[2] = v21;
    v23 = v33;
    v24 = v34;
    v25 = v36;
    v12[7] = v35;
    v12[8] = v25;
    v12[5] = v23;
    v12[6] = v24;
    v26 = v37;
    v27 = v38;
    v28 = v40;
    v12[11] = v39;
    v12[12] = v28;
    v12[9] = v26;
    v12[10] = v27;
    result = outlined release of IKRig.Joint?((uint64_t)v29);
    *a2 = v10;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t IKRig.JointCollection.subscript.setter(_OWORD *a1, unint64_t a2)
{
  _QWORD **v2;
  _QWORD *v5;
  uint64_t result;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[11];

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = (_QWORD *)result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v5[2] > a2)
  {
    v7 = &v5[22 * a2];
    v8 = v7[2];
    v9 = v7[4];
    v21[1] = v7[3];
    v21[2] = v9;
    v21[0] = v8;
    v10 = v7[5];
    v11 = v7[6];
    v12 = v7[8];
    v21[5] = v7[7];
    v21[6] = v12;
    v21[3] = v10;
    v21[4] = v11;
    v13 = v7[9];
    v14 = v7[10];
    v15 = v7[12];
    v21[9] = v7[11];
    v21[10] = v15;
    v21[7] = v13;
    v21[8] = v14;
    v16 = a1[9];
    v7[10] = a1[8];
    v7[11] = v16;
    v7[12] = a1[10];
    v17 = a1[5];
    v7[6] = a1[4];
    v7[7] = v17;
    v18 = a1[7];
    v7[8] = a1[6];
    v7[9] = v18;
    v19 = a1[1];
    v7[2] = *a1;
    v7[3] = v19;
    v20 = a1[3];
    v7[4] = a1[2];
    v7[5] = v20;
    result = outlined release of IKRig.Joint?((uint64_t)v21);
    *v2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*IKRig.JointCollection.subscript.modify(_QWORD *a1, unint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Array.subscript.modify((uint64_t)v4, a2);
  return IKRig.JointCollection.subscript.modify;
}

Swift::Int __swiftcall IKRig.JointCollection.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t IKRig.JointCollection.Iterator.next()@<X0>(void *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[11];

  v3 = v1[1];
  v4 = *(_QWORD *)(*v1 + 16);
  if (v3 == v4)
  {
    _s17RealityFoundation5IKRigV5JointVSgWOi0_(v16);
    return outlined init with take of Transform?((uint64_t)v16, (uint64_t)a1, &demangling cache variable for type metadata for IKRig.Joint?);
  }
  else if (v3 >= v4)
  {
    __break(1u);
  }
  else
  {
    v6 = (_OWORD *)(*v1 + 176 * v3);
    v7 = v6[2];
    v8 = v6[4];
    v16[1] = v6[3];
    v16[2] = v8;
    v16[0] = v7;
    v9 = v6[5];
    v10 = v6[6];
    v11 = v6[8];
    v16[5] = v6[7];
    v16[6] = v11;
    v16[3] = v9;
    v16[4] = v10;
    v12 = v6[9];
    v13 = v6[10];
    v14 = v6[12];
    v16[9] = v6[11];
    v16[10] = v14;
    v16[7] = v12;
    v16[8] = v13;
    memmove(a1, v6 + 2, 0xB0uLL);
    v1[1] = v3 + 1;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v15);
    return outlined retain of String?((uint64_t)v16);
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance IKRig.JointCollection.Iterator@<X0>(void *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[11];

  v3 = v1[1];
  v4 = *(_QWORD *)(*v1 + 16);
  if (v3 == v4)
  {
    _s17RealityFoundation5IKRigV5JointVSgWOi0_(v16);
    return outlined init with take of Transform?((uint64_t)v16, (uint64_t)a1, &demangling cache variable for type metadata for IKRig.Joint?);
  }
  else if (v3 >= v4)
  {
    __break(1u);
  }
  else
  {
    v6 = (_OWORD *)(*v1 + 176 * v3);
    v7 = v6[2];
    v8 = v6[4];
    v16[1] = v6[3];
    v16[2] = v8;
    v16[0] = v7;
    v9 = v6[5];
    v10 = v6[6];
    v11 = v6[8];
    v16[5] = v6[7];
    v16[6] = v11;
    v16[3] = v9;
    v16[4] = v10;
    v12 = v6[9];
    v13 = v6[10];
    v14 = v6[12];
    v16[9] = v6[11];
    v16[10] = v14;
    v16[7] = v12;
    v16[8] = v13;
    memmove(a1, v6 + 2, 0xB0uLL);
    v1[1] = v3 + 1;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v15);
    return outlined retain of String?((uint64_t)v16);
  }
  return result;
}

uint64_t IKRig.JointCollection.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = 0;
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance IKRig.JointCollection(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IKRig.JointCollection(_QWORD *a1, unint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = IKRig.JointCollection.subscript.read(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_OWORD *IKRig.JointCollection.subscript.read(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  _OWORD *result;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  result = malloc(0x210uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = (uint64_t)result;
    v7 = (_OWORD *)(*(_QWORD *)v2 + 176 * a2);
    v8 = v7[2];
    v9 = v7[4];
    result[1] = v7[3];
    result[2] = v9;
    *result = v8;
    v10 = v7[5];
    v11 = v7[6];
    v12 = v7[8];
    result[5] = v7[7];
    result[6] = v12;
    result[3] = v10;
    result[4] = v11;
    v13 = v7[9];
    v14 = v7[10];
    v15 = v7[12];
    result[9] = v7[11];
    result[10] = v15;
    result[7] = v13;
    result[8] = v14;
    memmove(result + 11, v7 + 2, 0xB0uLL);
    outlined retain of String?(v6);
    return IKRig.JointCollection.subscript.read;
  }
  __break(1u);
  return result;
}

void IKRig.JointCollection.subscript.read(_OWORD **a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v1 = *a1;
  v2 = (uint64_t)(*a1 + 22);
  v3 = v1[20];
  v1[30] = v1[19];
  v1[31] = v3;
  v1[32] = v1[21];
  v4 = v1[16];
  v1[26] = v1[15];
  v1[27] = v4;
  v5 = v1[18];
  v1[28] = v1[17];
  v1[29] = v5;
  v6 = v1[12];
  v1[22] = v1[11];
  v1[23] = v6;
  v7 = v1[14];
  v1[24] = v1[13];
  v1[25] = v7;
  outlined release of IKRig.Joint?(v2);
  free(v1);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance IKRig.JointCollection()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance IKRig.JointCollection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance IKRig.JointCollection(a1, a2, a3, specialized Collection.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance IKRig.JointCollection()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IKRig.JointCollection(_QWORD *a1, char *a2, unint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

RealityFoundation::IKRig::ConstraintsCollection __swiftcall IKRig.ConstraintsCollection.init(_:)(Swift::OpaquePointer a1)
{
  Swift::OpaquePointer *v1;
  Swift::OpaquePointer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  RealityFoundation::IKRig::ConstraintsCollection result;
  void *rawValue;
  Swift::OpaquePointer *v20;
  _QWORD v21[2];
  uint64_t v22;

  v3 = v1;
  v22 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v4 = v22;
  v5 = *((_QWORD *)a1._rawValue + 2);
  if (v5)
  {
    v20 = v3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v6 = 0;
    rawValue = a1._rawValue;
    v7 = (uint64_t *)((char *)a1._rawValue + 40);
    do
    {
      v8 = *v7;
      v21[0] = *(v7 - 1);
      v21[1] = v8;
      v9 = StringProtocol.hash.getter();
      v22 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v4 = v22;
      }
      v7 += 20;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v9;
      *(_QWORD *)(v12 + 40) = v6;
      *(_QWORD *)(v4 + 16) = v11 + 1;
      ++v6;
    }
    while (v5 != v6);
    a1._rawValue = rawValue;
    swift_bridgeObjectRelease_n();
    v3 = v20;
    if (*(_QWORD *)(v4 + 16))
      goto LABEL_7;
LABEL_9:
    v13 = MEMORY[0x24BEE4B00];
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v22 + 16))
    goto LABEL_9;
LABEL_7:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Constraint.ID, Int>);
  v13 = static _DictionaryStorage.allocate(capacity:)();
LABEL_10:
  v21[0] = v13;
  v14 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v14, 1, v21);
  v15 = (void *)swift_release();
  v17 = (void *)v21[0];
  v3->_rawValue = a1._rawValue;
  v3[1]._rawValue = v17;
  result.lookUpHelper._rawValue = v16;
  result.storage._rawValue = v15;
  return result;
}

uint64_t IKRig.ConstraintsCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)&v8 = a1;
  *((_QWORD *)&v8 + 1) = a2;
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.hash.getter();
  v8 = *v3;
  v7 = v5;
  return IKRig.ConstraintsCollection.subscript.getter(&v7, a3);
}

uint64_t key path getter for IKRig.ConstraintsCollection.subscript(_:) : IKRig.ConstraintsCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[160];
  _QWORD v8[20];

  v3 = *a1;
  v4 = a1[1];
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8[0] = v3;
  v8[1] = v4;
  v6 = StringProtocol.hash.getter();
  IKRig.ConstraintsCollection.subscript.getter(&v6, (uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v8, &demangling cache variable for type metadata for IKRig.Constraint?);
  return outlined init with take of Transform?((uint64_t)v8, a2, &demangling cache variable for type metadata for IKRig.Constraint?);
}

uint64_t key path setter for IKRig.ConstraintsCollection.subscript(_:) : IKRig.ConstraintsCollection(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[20];
  _QWORD v9[20];

  v3 = *a3;
  v4 = a3[1];
  outlined init with take of Transform?(a1, (uint64_t)v9, &demangling cache variable for type metadata for IKRig.Constraint?);
  v8[0] = v3;
  v8[1] = v4;
  outlined retain of IKRig.Constraint?(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of IKRig.Constraint?);
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.hash.getter();
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for IKRig.Constraint?);
  v7 = v5;
  return IKRig.ConstraintsCollection.subscript.setter((uint64_t)v8, &v7);
}

{
  uint64_t v3;
  uint64_t v5;
  _BYTE v6[160];
  _QWORD v7[20];

  v3 = *a3;
  outlined init with take of Transform?(a1, (uint64_t)v7, &demangling cache variable for type metadata for IKRig.Constraint?);
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for IKRig.Constraint?);
  v5 = v3;
  outlined retain of IKRig.Constraint?(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of IKRig.Constraint?);
  return IKRig.ConstraintsCollection.subscript.setter((uint64_t)v6, &v5);
}

uint64_t IKRig.ConstraintsCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[20];
  _BYTE v9[160];

  outlined init with take of Transform?(a1, (uint64_t)v9, &demangling cache variable for type metadata for IKRig.Constraint?);
  v8[0] = a2;
  v8[1] = a3;
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.hash.getter();
  swift_bridgeObjectRelease();
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for IKRig.Constraint?);
  v7 = v5;
  return IKRig.ConstraintsCollection.subscript.setter((uint64_t)v8, &v7);
}

uint64_t IKRig.ConstraintsCollection.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[10];
  _OWORD __dst[10];

  v3 = v2;
  v5 = v2[1];
  if (*(_QWORD *)(v5 + 16) && (v6 = *v3, result = specialized __RawDictionaryStorage.find<A>(_:)(*a1), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * result);
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(_QWORD *)(v6 + 16))
    {
      v10 = (_OWORD *)(v6 + 160 * v9);
      v11 = v10[3];
      v19[0] = v10[2];
      v19[1] = v11;
      v12 = v10[4];
      v13 = v10[5];
      v14 = v10[7];
      v19[4] = v10[6];
      v19[5] = v14;
      v19[2] = v12;
      v19[3] = v13;
      v15 = v10[8];
      v16 = v10[9];
      v17 = v10[11];
      v19[8] = v10[10];
      v19[9] = v17;
      v19[6] = v15;
      v19[7] = v16;
      memmove(__dst, v10 + 2, 0xA0uLL);
      destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(__dst, v18);
      outlined init with take of Transform?((uint64_t)__dst, a2, &demangling cache variable for type metadata for IKRig.Constraint?);
      return outlined retain of IKRig.Constraint((uint64_t)v19);
    }
    __break(1u);
  }
  else
  {
    _s17RealityFoundation5IKRigV10ConstraintVSgWOi0_(__dst);
    return outlined init with take of Transform?((uint64_t)__dst, a2, &demangling cache variable for type metadata for IKRig.Constraint?);
  }
  return result;
}

uint64_t IKRig.ConstraintsCollection.subscript.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t result;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[10];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[160];

  v3 = (_QWORD **)v2;
  outlined init with take of Transform?(a1, (uint64_t)v47, &demangling cache variable for type metadata for IKRig.Constraint?);
  v5 = *(_QWORD *)(v2 + 8);
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(*a2);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
      outlined init with take of Transform?((uint64_t)v47, (uint64_t)&v37, &demangling cache variable for type metadata for IKRig.Constraint?);
      if (getEnumTag for AudioFileResource.Error((uint64_t)&v37) == 1)
      {
        specialized Array.remove(at:)(v8, v36);
        return outlined release of IKRig.Constraint((uint64_t)v36);
      }
      v10 = *v3;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        if ((v8 & 0x8000000000000000) == 0)
          goto LABEL_13;
      }
      else
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        v10 = (_QWORD *)result;
        if ((v8 & 0x8000000000000000) == 0)
        {
LABEL_13:
          if (v8 < v10[2])
          {
            v21 = &v10[20 * v8];
            v22 = v21[3];
            v36[0] = v21[2];
            v36[1] = v22;
            v23 = v21[4];
            v24 = v21[5];
            v25 = v21[7];
            v36[4] = v21[6];
            v36[5] = v25;
            v36[2] = v23;
            v36[3] = v24;
            v26 = v21[8];
            v27 = v21[9];
            v28 = v21[11];
            v36[8] = v21[10];
            v36[9] = v28;
            v36[6] = v26;
            v36[7] = v27;
            v29 = v38;
            v21[2] = v37;
            v21[3] = v29;
            v30 = v39;
            v31 = v40;
            v32 = v42;
            v21[6] = v41;
            v21[7] = v32;
            v21[4] = v30;
            v21[5] = v31;
            v33 = v43;
            v34 = v44;
            v35 = v46;
            v21[10] = v45;
            v21[11] = v35;
            v21[8] = v33;
            v21[9] = v34;
            result = outlined release of IKRig.Constraint((uint64_t)v36);
            goto LABEL_15;
          }
LABEL_19:
          __break(1u);
          return result;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
  }
  outlined init with take of Transform?((uint64_t)v47, (uint64_t)&v37, &demangling cache variable for type metadata for IKRig.Constraint?);
  result = getEnumTag for AudioFileResource.Error((uint64_t)&v37);
  if ((_DWORD)result == 1)
    return result;
  v10 = *v3;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)result;
  }
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
    v10 = (_QWORD *)result;
  }
  v10[2] = v12 + 1;
  v13 = &v10[20 * v12];
  v14 = v38;
  v13[2] = v37;
  v13[3] = v14;
  v15 = v39;
  v16 = v40;
  v17 = v42;
  v13[6] = v41;
  v13[7] = v17;
  v13[4] = v15;
  v13[5] = v16;
  v18 = v43;
  v19 = v44;
  v20 = v46;
  v13[10] = v45;
  v13[11] = v20;
  v13[8] = v18;
  v13[9] = v19;
LABEL_15:
  *v3 = v10;
  return result;
}

void (*IKRig.ConstraintsCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t *v3;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*result)(uint64_t *, char);
  char v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v7 = (char *)malloc(0x2A0uLL);
  *a1 = v7;
  *((_QWORD *)v7 + 20) = a2;
  v8 = v7 + 160;
  *((_QWORD *)v7 + 82) = v3;
  *((_QWORD *)v7 + 81) = a3;
  *((_QWORD *)v7 + 80) = a2;
  v10 = *v3;
  v9 = v3[1];
  *((_QWORD *)v7 + 21) = a3;
  *((_QWORD *)v7 + 83) = lazy protocol witness table accessor for type String and conformance String();
  v11 = StringProtocol.hash.getter();
  if (!*(_QWORD *)(v9 + 16)
    || (result = (void (*)(uint64_t *, char))specialized __RawDictionaryStorage.find<A>(_:)(v11),
        (v13 & 1) == 0))
  {
    _s17RealityFoundation5IKRigV10ConstraintVSgWOi0_(v8);
    outlined init with take of Transform?((uint64_t)v8, (uint64_t)v7, &demangling cache variable for type metadata for IKRig.Constraint?);
    return IKRig.ConstraintsCollection.subscript.modify;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * (_QWORD)result);
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v14 < *(_QWORD *)(v10 + 16))
  {
    v15 = (_OWORD *)(v10 + 160 * v14);
    v16 = v15[3];
    *v8 = v15[2];
    *((_OWORD *)v7 + 11) = v16;
    v17 = v15[4];
    v18 = v15[5];
    v19 = v15[7];
    *((_OWORD *)v7 + 14) = v15[6];
    *((_OWORD *)v7 + 15) = v19;
    *((_OWORD *)v7 + 12) = v17;
    *((_OWORD *)v7 + 13) = v18;
    v20 = v15[8];
    v21 = v15[9];
    v22 = v15[11];
    *((_OWORD *)v7 + 18) = v15[10];
    *((_OWORD *)v7 + 19) = v22;
    *((_OWORD *)v7 + 16) = v20;
    *((_OWORD *)v7 + 17) = v21;
    memmove(v7 + 320, v15 + 2, 0xA0uLL);
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v7 + 320, v23);
    outlined init with take of Transform?((uint64_t)(v7 + 320), (uint64_t)v7, &demangling cache variable for type metadata for IKRig.Constraint?);
    outlined retain of IKRig.Constraint((uint64_t)v8);
    return IKRig.ConstraintsCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

void IKRig.ConstraintsCollection.subscript.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (_QWORD *)*a1;
  v3 = (_QWORD *)(*a1 + 160);
  v4 = (_QWORD *)(*a1 + 320);
  if ((a2 & 1) != 0)
  {
    v5 = v2[81];
    v6 = v2[80];
    outlined init with take of Transform?(*a1, (uint64_t)v4, &demangling cache variable for type metadata for IKRig.Constraint?);
    v2[60] = v6;
    v2[61] = v5;
    outlined retain of IKRig.Constraint?(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of IKRig.Constraint?);
    v7 = StringProtocol.hash.getter();
    outlined init with take of Transform?((uint64_t)v4, (uint64_t)(v2 + 60), &demangling cache variable for type metadata for IKRig.Constraint?);
    v11 = v7;
    IKRig.ConstraintsCollection.subscript.setter((uint64_t)(v2 + 60), &v11);
    outlined init with take of Transform?((uint64_t)v2, (uint64_t)v3, &demangling cache variable for type metadata for IKRig.Constraint?);
    outlined retain of IKRig.Constraint?(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of IKRig.Constraint?);
  }
  else
  {
    v8 = v2[81];
    v9 = v2[80];
    outlined init with take of Transform?(*a1, (uint64_t)v3, &demangling cache variable for type metadata for IKRig.Constraint?);
    v2[40] = v9;
    v2[41] = v8;
    v10 = StringProtocol.hash.getter();
    outlined init with take of Transform?((uint64_t)v3, (uint64_t)v4, &demangling cache variable for type metadata for IKRig.Constraint?);
    v11 = v10;
    IKRig.ConstraintsCollection.subscript.setter((uint64_t)v4, &v11);
  }
  free(v2);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  v3 = (_QWORD *)(*a1 + 160);
  v4 = (_QWORD *)(*a1 + 320);
  if ((a2 & 1) != 0)
  {
    v5 = v2[81];
    outlined init with take of Transform?(*a1, (uint64_t)v4, &demangling cache variable for type metadata for IKRig.Constraint?);
    outlined init with take of Transform?((uint64_t)v4, (uint64_t)(v2 + 60), &demangling cache variable for type metadata for IKRig.Constraint?);
    v7 = v5;
    outlined retain of IKRig.Constraint?(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of IKRig.Constraint?);
    IKRig.ConstraintsCollection.subscript.setter((uint64_t)(v2 + 60), &v7);
    outlined init with take of Transform?((uint64_t)v2, (uint64_t)v3, &demangling cache variable for type metadata for IKRig.Constraint?);
    outlined retain of IKRig.Constraint?(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of IKRig.Constraint?);
  }
  else
  {
    v6 = v2[81];
    outlined init with take of Transform?(*a1, (uint64_t)v3, &demangling cache variable for type metadata for IKRig.Constraint?);
    outlined init with take of Transform?((uint64_t)v3, (uint64_t)v4, &demangling cache variable for type metadata for IKRig.Constraint?);
    v7 = v6;
    IKRig.ConstraintsCollection.subscript.setter((uint64_t)v4, &v7);
  }
  free(v2);
}

uint64_t key path getter for IKRig.ConstraintsCollection.subscript(_:) : IKRig.ConstraintsCollection@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[160];
  _OWORD v8[10];

  v4 = *a2;
  v8[0] = *a1;
  v6 = v4;
  IKRig.ConstraintsCollection.subscript.getter(&v6, (uint64_t)v7);
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v8, &demangling cache variable for type metadata for IKRig.Constraint?);
  return outlined init with take of Transform?((uint64_t)v8, a3, &demangling cache variable for type metadata for IKRig.Constraint?);
}

void (*IKRig.ConstraintsCollection.subscript.modify(_QWORD *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  char *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*result)(uint64_t *, char);
  char v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v5 = (char *)malloc(0x290uLL);
  *a1 = v5;
  v6 = v5 + 160;
  *((_QWORD *)v5 + 80) = v2;
  v7 = *a2;
  *((_QWORD *)v5 + 81) = *a2;
  v8 = v2[1];
  if (!*(_QWORD *)(v8 + 16)
    || (v9 = *v2,
        result = (void (*)(uint64_t *, char))specialized __RawDictionaryStorage.find<A>(_:)(v7),
        (v11 & 1) == 0))
  {
    _s17RealityFoundation5IKRigV10ConstraintVSgWOi0_(v6);
    outlined init with take of Transform?((uint64_t)v6, (uint64_t)v5, &demangling cache variable for type metadata for IKRig.Constraint?);
    return IKRig.ConstraintsCollection.subscript.modify;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * (_QWORD)result);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(_QWORD *)(v9 + 16))
  {
    v13 = (_OWORD *)(v9 + 160 * v12);
    v14 = v13[3];
    *((_OWORD *)v5 + 20) = v13[2];
    *((_OWORD *)v5 + 21) = v14;
    v15 = v13[4];
    v16 = v13[5];
    v17 = v13[7];
    *((_OWORD *)v5 + 24) = v13[6];
    *((_OWORD *)v5 + 25) = v17;
    *((_OWORD *)v5 + 22) = v15;
    *((_OWORD *)v5 + 23) = v16;
    v18 = v13[8];
    v19 = v13[9];
    v20 = v13[11];
    *((_OWORD *)v5 + 28) = v13[10];
    *((_OWORD *)v5 + 29) = v20;
    *((_OWORD *)v5 + 26) = v18;
    *((_OWORD *)v5 + 27) = v19;
    memmove(v6, v13 + 2, 0xA0uLL);
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v6, v21);
    outlined init with take of Transform?((uint64_t)v6, (uint64_t)v5, &demangling cache variable for type metadata for IKRig.Constraint?);
    outlined retain of IKRig.Constraint((uint64_t)(v5 + 320));
    return IKRig.ConstraintsCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall IKRig.ConstraintsCollection.contains(_:)(RealityFoundation::IKRig::Constraint::ID a1)
{
  return IKRig.JointCollection.contains(_:)((_QWORD *)a1.nameHash, (void (*)(_QWORD))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKRig.JointCollection.contains(_:)(_QWORD *a1, void (*a2)(_QWORD))
{
  uint64_t v2;
  char v3;

  if (*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16))
    a2(*a1);
  else
    v3 = 0;
  return v3 & 1;
}

uint64_t IKRig.ConstraintsCollection.set(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 *v40;
  _OWORD v41[10];
  _OWORD v42[10];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v3 = v2;
  v5 = a1[7];
  v59 = a1[6];
  v60 = v5;
  v6 = a1[9];
  v61 = a1[8];
  v62 = v6;
  v7 = a1[3];
  v55 = a1[2];
  v56 = v7;
  v8 = a1[5];
  v57 = a1[4];
  v58 = v8;
  v9 = a1[1];
  v53 = *a1;
  v54 = v9;
  v43 = v53;
  lazy protocol witness table accessor for type String and conformance String();
  v10 = StringProtocol.hash.getter();
  v11 = *(_QWORD **)(v2 + 8);
  if (!v11[2] || (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v13 & 1) == 0))
  {
    _s17RealityFoundation5IKRigV10ConstraintVSgWOi0_(&v43);
    v40 = &v43;
    return outlined init with take of Transform?((uint64_t)v40, a2, &demangling cache variable for type metadata for IKRig.Constraint?);
  }
  v14 = *(_QWORD *)(v11[7] + 8 * v12);
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD **)v3;
    if (v14 < *(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v15 = &v11[20 * v14];
      v16 = v15[3];
      v43 = v15[2];
      v44 = v16;
      v17 = v15[4];
      v18 = v15[5];
      v19 = v15[7];
      v47 = v15[6];
      v48 = v19;
      v45 = v17;
      v46 = v18;
      v20 = v15[8];
      v21 = v15[9];
      v22 = v15[11];
      v51 = v15[10];
      v52 = v22;
      v49 = v20;
      v50 = v21;
      outlined retain of IKRig.Constraint((uint64_t)&v43);
      outlined retain of IKRig.Constraint((uint64_t)&v53);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_12:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  v11 = (_QWORD *)result;
LABEL_6:
  if (v14 < v11[2])
  {
    v24 = &v11[20 * v14];
    v25 = v24[3];
    v41[0] = v24[2];
    v41[1] = v25;
    v26 = v24[4];
    v27 = v24[5];
    v28 = v24[7];
    v41[4] = v24[6];
    v41[5] = v28;
    v41[2] = v26;
    v41[3] = v27;
    v29 = v24[8];
    v30 = v24[9];
    v31 = v24[11];
    v41[8] = v24[10];
    v41[9] = v31;
    v41[6] = v29;
    v41[7] = v30;
    v32 = v54;
    v24[2] = v53;
    v24[3] = v32;
    v33 = v55;
    v34 = v56;
    v35 = v58;
    v24[6] = v57;
    v24[7] = v35;
    v24[4] = v33;
    v24[5] = v34;
    v36 = v59;
    v37 = v60;
    v38 = v62;
    v24[10] = v61;
    v24[11] = v38;
    v24[8] = v36;
    v24[9] = v37;
    outlined release of IKRig.Constraint((uint64_t)v41);
    *(_QWORD *)v3 = v11;
    v42[6] = v49;
    v42[7] = v50;
    v42[8] = v51;
    v42[9] = v52;
    v42[2] = v45;
    v42[3] = v46;
    v42[4] = v47;
    v42[5] = v48;
    v42[0] = v43;
    v42[1] = v44;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v42, v39);
    v40 = v42;
    return outlined init with take of Transform?((uint64_t)v40, a2, &demangling cache variable for type metadata for IKRig.Constraint?);
  }
  __break(1u);
  return result;
}

uint64_t IKRig.ConstraintsCollection.startIndex.getter()
{
  return 0;
}

unint64_t IKRig.ConstraintsCollection.subscript.getter@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[10];

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = (_OWORD *)(*(_QWORD *)v2 + 160 * result);
    v4 = v3[3];
    v16[0] = v3[2];
    v16[1] = v4;
    v5 = v3[4];
    v6 = v3[5];
    v7 = v3[7];
    v16[4] = v3[6];
    v16[5] = v7;
    v16[2] = v5;
    v16[3] = v6;
    v8 = v3[8];
    v9 = v3[9];
    v10 = v3[11];
    v16[8] = v3[10];
    v16[9] = v10;
    v16[6] = v8;
    v16[7] = v9;
    v11 = v3[9];
    a2[6] = v3[8];
    a2[7] = v11;
    v12 = v3[11];
    a2[8] = v3[10];
    a2[9] = v12;
    v13 = v3[5];
    a2[2] = v3[4];
    a2[3] = v13;
    v14 = v3[7];
    a2[4] = v3[6];
    a2[5] = v14;
    v15 = v3[3];
    *a2 = v3[2];
    a2[1] = v15;
    return outlined retain of IKRig.Constraint((uint64_t)v16);
  }
  __break(1u);
  return result;
}

uint64_t key path getter for IKRig.ConstraintsCollection.subscript(_:) : IKRig.ConstraintsCollection@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[10];

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    v4 = (_OWORD *)(*(_QWORD *)result + 160 * v3);
    v5 = v4[3];
    v17[0] = v4[2];
    v17[1] = v5;
    v6 = v4[4];
    v7 = v4[5];
    v8 = v4[7];
    v17[4] = v4[6];
    v17[5] = v8;
    v17[2] = v6;
    v17[3] = v7;
    v9 = v4[8];
    v10 = v4[9];
    v11 = v4[11];
    v17[8] = v4[10];
    v17[9] = v11;
    v17[6] = v9;
    v17[7] = v10;
    v12 = v4[9];
    a3[6] = v4[8];
    a3[7] = v12;
    v13 = v4[11];
    a3[8] = v4[10];
    a3[9] = v13;
    v14 = v4[5];
    a3[2] = v4[4];
    a3[3] = v14;
    v15 = v4[7];
    a3[4] = v4[6];
    a3[5] = v15;
    v16 = v4[3];
    *a3 = v4[2];
    a3[1] = v16;
    return outlined retain of IKRig.Constraint((uint64_t)v17);
  }
  __break(1u);
  return result;
}

uint64_t key path setter for IKRig.ConstraintsCollection.subscript(_:) : IKRig.ConstraintsCollection(__int128 *a1, _QWORD **a2, unint64_t *a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t result;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[10];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v4 = *a3;
  v5 = a1[7];
  v34 = a1[6];
  v35 = v5;
  v6 = a1[9];
  v36 = a1[8];
  v37 = v6;
  v7 = a1[3];
  v30 = a1[2];
  v31 = v7;
  v8 = a1[5];
  v32 = a1[4];
  v33 = v8;
  v9 = a1[1];
  v28 = *a1;
  v29 = v9;
  v10 = *a2;
  outlined retain of IKRig.Constraint((uint64_t)&v28);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  v10 = (_QWORD *)result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < v10[2])
  {
    v12 = &v10[20 * v4];
    v13 = v12[3];
    v27[0] = v12[2];
    v27[1] = v13;
    v14 = v12[4];
    v15 = v12[5];
    v16 = v12[7];
    v27[4] = v12[6];
    v27[5] = v16;
    v27[2] = v14;
    v27[3] = v15;
    v17 = v12[8];
    v18 = v12[9];
    v19 = v12[11];
    v27[8] = v12[10];
    v27[9] = v19;
    v27[6] = v17;
    v27[7] = v18;
    v20 = v29;
    v12[2] = v28;
    v12[3] = v20;
    v21 = v30;
    v22 = v31;
    v23 = v33;
    v12[6] = v32;
    v12[7] = v23;
    v12[4] = v21;
    v12[5] = v22;
    v24 = v34;
    v25 = v35;
    v26 = v37;
    v12[10] = v36;
    v12[11] = v26;
    v12[8] = v24;
    v12[9] = v25;
    result = outlined release of IKRig.Constraint((uint64_t)v27);
    *a2 = v10;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t IKRig.ConstraintsCollection.subscript.setter(_OWORD *a1, unint64_t a2)
{
  _QWORD **v2;
  _QWORD *v5;
  uint64_t result;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[10];

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = (_QWORD *)result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v5[2] > a2)
  {
    v7 = &v5[20 * a2];
    v8 = v7[3];
    v20[0] = v7[2];
    v20[1] = v8;
    v9 = v7[4];
    v10 = v7[5];
    v11 = v7[7];
    v20[4] = v7[6];
    v20[5] = v11;
    v20[2] = v9;
    v20[3] = v10;
    v12 = v7[8];
    v13 = v7[9];
    v14 = v7[11];
    v20[8] = v7[10];
    v20[9] = v14;
    v20[6] = v12;
    v20[7] = v13;
    v15 = a1[7];
    v7[8] = a1[6];
    v7[9] = v15;
    v16 = a1[9];
    v7[10] = a1[8];
    v7[11] = v16;
    v17 = a1[3];
    v7[4] = a1[2];
    v7[5] = v17;
    v18 = a1[5];
    v7[6] = a1[4];
    v7[7] = v18;
    v19 = a1[1];
    v7[2] = *a1;
    v7[3] = v19;
    result = outlined release of IKRig.Constraint((uint64_t)v20);
    *v2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*IKRig.ConstraintsCollection.subscript.modify(_QWORD *a1, unint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Array.subscript.modify((uint64_t)v4, a2);
  return IKRig.JointCollection.subscript.modify;
}

void IKRig.JointCollection.subscript.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t IKRig.ConstraintsCollection.Iterator.next()@<X0>(void *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[10];

  v3 = v1[1];
  v4 = *(_QWORD *)(*v1 + 16);
  if (v3 == v4)
  {
    _s17RealityFoundation5IKRigV10ConstraintVSgWOi0_(v15);
    return outlined init with take of Transform?((uint64_t)v15, (uint64_t)a1, &demangling cache variable for type metadata for IKRig.Constraint?);
  }
  else if (v3 >= v4)
  {
    __break(1u);
  }
  else
  {
    v6 = (_OWORD *)(*v1 + 160 * v3);
    v7 = v6[3];
    v15[0] = v6[2];
    v15[1] = v7;
    v8 = v6[4];
    v9 = v6[5];
    v10 = v6[7];
    v15[4] = v6[6];
    v15[5] = v10;
    v15[2] = v8;
    v15[3] = v9;
    v11 = v6[8];
    v12 = v6[9];
    v13 = v6[11];
    v15[8] = v6[10];
    v15[9] = v13;
    v15[6] = v11;
    v15[7] = v12;
    memmove(a1, v6 + 2, 0xA0uLL);
    v1[1] = v3 + 1;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v14);
    return outlined retain of IKRig.Constraint((uint64_t)v15);
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance IKRig.ConstraintsCollection.Iterator@<X0>(void *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[10];

  v3 = v1[1];
  v4 = *(_QWORD *)(*v1 + 16);
  if (v3 == v4)
  {
    _s17RealityFoundation5IKRigV10ConstraintVSgWOi0_(v15);
    return outlined init with take of Transform?((uint64_t)v15, (uint64_t)a1, &demangling cache variable for type metadata for IKRig.Constraint?);
  }
  else if (v3 >= v4)
  {
    __break(1u);
  }
  else
  {
    v6 = (_OWORD *)(*v1 + 160 * v3);
    v7 = v6[3];
    v15[0] = v6[2];
    v15[1] = v7;
    v8 = v6[4];
    v9 = v6[5];
    v10 = v6[7];
    v15[4] = v6[6];
    v15[5] = v10;
    v15[2] = v8;
    v15[3] = v9;
    v11 = v6[8];
    v12 = v6[9];
    v13 = v6[11];
    v15[8] = v6[10];
    v15[9] = v13;
    v15[6] = v11;
    v15[7] = v12;
    memmove(a1, v6 + 2, 0xA0uLL);
    v1[1] = v3 + 1;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v14);
    return outlined retain of IKRig.Constraint((uint64_t)v15);
  }
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IKRig.ConstraintsCollection(_QWORD *a1, unint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = IKRig.ConstraintsCollection.subscript.read(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_OWORD *IKRig.ConstraintsCollection.subscript.read(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  _OWORD *result;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  result = malloc(0x1E0uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = (uint64_t)result;
    v7 = (_OWORD *)(*(_QWORD *)v2 + 160 * a2);
    v8 = v7[3];
    *result = v7[2];
    result[1] = v8;
    v9 = v7[4];
    v10 = v7[5];
    v11 = v7[7];
    result[4] = v7[6];
    result[5] = v11;
    result[2] = v9;
    result[3] = v10;
    v12 = v7[8];
    v13 = v7[9];
    v14 = v7[11];
    result[8] = v7[10];
    result[9] = v14;
    result[6] = v12;
    result[7] = v13;
    memmove(result + 10, v7 + 2, 0xA0uLL);
    outlined retain of IKRig.Constraint(v6);
    return IKRig.ConstraintsCollection.subscript.read;
  }
  __break(1u);
  return result;
}

void IKRig.ConstraintsCollection.subscript.read(_OWORD **a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v1 = *a1;
  v2 = (uint64_t)(*a1 + 20);
  v3 = v1[17];
  v1[26] = v1[16];
  v1[27] = v3;
  v4 = v1[19];
  v1[28] = v1[18];
  v1[29] = v4;
  v5 = v1[13];
  v1[22] = v1[12];
  v1[23] = v5;
  v6 = v1[15];
  v1[24] = v1[14];
  v1[25] = v6;
  v7 = v1[11];
  v1[20] = v1[10];
  v1[21] = v7;
  outlined release of IKRig.Constraint(v2);
  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance IKRig.JointCollection@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    v5 = v2[1];
    a2[2] = result;
    a2[3] = v5;
    *a2 = v3;
    a2[1] = v4;
    swift_bridgeObjectRetain();
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance IKRig.JointCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  v4 = *(_QWORD *)(v2 + 16);
  a1[2] = 0;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t *protocol witness for Collection.index(_:offsetBy:) in conformance IKRig.JointCollection@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = *result;
    if (!a2)
    {
LABEL_6:
      *a3 = v3;
      return result;
    }
    v4 = v3 ^ 0x7FFFFFFFFFFFFFFFLL;
    v5 = a2 - 1;
    while (v4 > v5)
    {
      ++v3;
      if (!--a2)
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance IKRig.JointCollection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result;
  char v7;

  result = a4(*a1, a2, *a3);
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for Collection.distance(from:to:) in conformance IKRig.JointCollection(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v2 = *result;
  v3 = *a2;
  if (*a2 < *result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*a2 == *result)
    return 0;
  v4 = (uint64_t *)(v3 - v2);
  if (v3 > v2)
  {
    result = 0;
    v5 = v3 + ~v2;
    while (v5 <= 0x7FFFFFFFFFFFFFFELL)
    {
      result = (uint64_t *)((char *)result + 1);
      if (v4 == result)
        return result;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance IKRig.JointCollection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = 0;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.ConstraintsCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IKRig.JointCollection(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  _QWORD *v3;
  uint64_t v4;

  v4 = a3(*v3, v3[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IKRig.ConstraintsCollection(_QWORD *a1, char *a2, unint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance IKRig.ConstraintsCollection@<D0>(Swift::OpaquePointer a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  IKRig.ConstraintsCollection.init(_:)(a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_AI5IKRigVALVs5NeverOTg504_s17d11Foundation5k15V3forAC0A3Kit12fg5CAAE8i10V_tKcfcAC5J10VAiJVXEfU_AKTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  int64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[15];
  _BYTE v53[7];
  uint64_t v54;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v54 = MEMORY[0x24BEE4AF8];
  v41 = v4;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v8 = v41;
  v9 = 0;
  v5 = v54;
  v10 = a1 + 32;
  while (1)
  {
    v11 = (uint64_t *)(v10 + 144 * v9);
    v12 = *v11;
    v13 = v11[1];
    v46 = *((_OWORD *)v11 + 7);
    v47 = *((_OWORD *)v11 + 6);
    v45 = *((_OWORD *)v11 + 8);
    if ((v11[3] & 1) != 0)
    {
      v14 = 0;
      v15 = 0uLL;
      do
      {
        v16 = *((_DWORD *)&outlined read-only object #0 of closure #1 in IKRig.init(for:) + v14 + 8);
        v48 = v15;
        *(_DWORD *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) = v16;
        v15 = v48;
        ++v14;
      }
      while (v14 != 3);
      v42 = v48;
      LOBYTE(v50) = 1;
      v17 = v13;
      swift_bridgeObjectRetain();
      v18 = 0;
      v19 = v50;
      v21 = v46;
      v20 = v47;
      v23 = v42;
      v22 = v45;
      goto LABEL_12;
    }
    v24 = v11[2];
    if ((v24 & 0x8000000000000000) != 0)
      break;
    if (v24 >= *(_QWORD *)(a4 + 16))
      goto LABEL_17;
    v25 = (uint64_t *)(a4 + 32 + 144 * v24);
    v27 = *v25;
    v26 = v25[1];
    v50 = v27;
    v51 = v26;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    v28 = StringProtocol.hash.getter();
    v29 = 0;
    v30 = 0uLL;
    do
    {
      v31 = *((_DWORD *)&outlined read-only object #1 of closure #1 in IKRig.init(for:) + v29 + 8);
      v49 = v30;
      *(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v29 & 3))) = v31;
      v30 = v49;
      ++v29;
    }
    while (v29 != 3);
    v32 = v28;
    v43 = v49;
    v17 = v13;
    swift_bridgeObjectRelease();
    v19 = 0;
    v10 = a1 + 32;
    v21 = v46;
    v20 = v47;
    v23 = v43;
    v22 = v45;
    v18 = v32;
    v8 = v41;
LABEL_12:
    v54 = v5;
    v34 = *(_QWORD *)(v5 + 16);
    v33 = *(_QWORD *)(v5 + 24);
    v35 = v5;
    if (v34 >= v33 >> 1)
    {
      v40 = v18;
      v44 = v23;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
      v18 = v40;
      v23 = v44;
      v22 = v45;
      v21 = v46;
      v20 = v47;
      v10 = a1 + 32;
      v8 = v41;
      v35 = v54;
    }
    ++v9;
    *(_QWORD *)(v35 + 16) = v34 + 1;
    v36 = v35 + 176 * v34;
    *(_QWORD *)(v36 + 32) = v12;
    *(_QWORD *)(v36 + 40) = v17;
    *(_QWORD *)(v36 + 48) = v18;
    *(_BYTE *)(v36 + 56) = v19;
    v37 = *(_DWORD *)&v53[3];
    *(_DWORD *)(v36 + 57) = *(_DWORD *)v53;
    *(_DWORD *)(v36 + 60) = v37;
    *(_OWORD *)(v36 + 64) = v20;
    *(_OWORD *)(v36 + 80) = v21;
    *(_OWORD *)(v36 + 96) = v22;
    *(_BYTE *)(v36 + 112) = 1;
    v38 = *(_QWORD *)v52;
    *(_QWORD *)(v36 + 120) = *(_QWORD *)&v52[7];
    *(_QWORD *)(v36 + 113) = v38;
    *(_OWORD *)(v36 + 128) = v23;
    *(_QWORD *)(v36 + 144) = 0;
    *(_QWORD *)(v36 + 152) = 0;
    *(_QWORD *)(v36 + 160) = 0x300000000;
    *(_QWORD *)(v36 + 200) = 0;
    *(_OWORD *)(v36 + 184) = 0u;
    *(_OWORD *)(v36 + 168) = 0u;
    v5 = v35;
    if (v9 == v8)
      return v5;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  __break(1u);
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

double _s17RealityFoundation5IKRigV5JointVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t outlined release of IKRig.Joint?(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

double _s17RealityFoundation5IKRigV10ConstraintVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined release of IKRig.Constraint(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined copy of IKRig.Constraint?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *outlined retain of IKRig.Constraint?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t outlined consume of IKRig.Constraint?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKRig.Joint.ID and conformance IKRig.Joint.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.Joint.ID and conformance IKRig.Joint.ID;
  if (!lazy protocol witness table cache variable for type IKRig.Joint.ID and conformance IKRig.Joint.ID)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.Joint.ID, &type metadata for IKRig.Joint.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.Joint.ID and conformance IKRig.Joint.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.Joint.ID and conformance IKRig.Joint.ID;
  if (!lazy protocol witness table cache variable for type IKRig.Joint.ID and conformance IKRig.Joint.ID)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.Joint.ID, &type metadata for IKRig.Joint.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.Joint.ID and conformance IKRig.Joint.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKRig.Joint.LimitsDefinition.Axis and conformance IKRig.Joint.LimitsDefinition.Axis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.Joint.LimitsDefinition.Axis and conformance IKRig.Joint.LimitsDefinition.Axis;
  if (!lazy protocol witness table cache variable for type IKRig.Joint.LimitsDefinition.Axis and conformance IKRig.Joint.LimitsDefinition.Axis)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.Joint.LimitsDefinition.Axis, &type metadata for IKRig.Joint.LimitsDefinition.Axis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.Joint.LimitsDefinition.Axis and conformance IKRig.Joint.LimitsDefinition.Axis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKRig.Constraint.ID and conformance IKRig.Constraint.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.Constraint.ID and conformance IKRig.Constraint.ID;
  if (!lazy protocol witness table cache variable for type IKRig.Constraint.ID and conformance IKRig.Constraint.ID)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.Constraint.ID, &type metadata for IKRig.Constraint.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.Constraint.ID and conformance IKRig.Constraint.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.Constraint.ID and conformance IKRig.Constraint.ID;
  if (!lazy protocol witness table cache variable for type IKRig.Constraint.ID and conformance IKRig.Constraint.ID)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.Constraint.ID, &type metadata for IKRig.Constraint.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.Constraint.ID and conformance IKRig.Constraint.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKRig.Constraint.IKPositionDemand.Mode and conformance IKRig.Constraint.IKPositionDemand.Mode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.Constraint.IKPositionDemand.Mode and conformance IKRig.Constraint.IKPositionDemand.Mode;
  if (!lazy protocol witness table cache variable for type IKRig.Constraint.IKPositionDemand.Mode and conformance IKRig.Constraint.IKPositionDemand.Mode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.Constraint.IKPositionDemand.Mode, &type metadata for IKRig.Constraint.IKPositionDemand.Mode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.Constraint.IKPositionDemand.Mode and conformance IKRig.Constraint.IKPositionDemand.Mode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKRig.JointCollection and conformance IKRig.JointCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.JointCollection and conformance IKRig.JointCollection;
  if (!lazy protocol witness table cache variable for type IKRig.JointCollection and conformance IKRig.JointCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.JointCollection, &type metadata for IKRig.JointCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.JointCollection and conformance IKRig.JointCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IKRig.JointCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<IKRig.JointCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IKRig.JointCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IKRig.JointCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<IKRig.JointCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IKRig.JointCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type IKRig.JointCollection.Iterator and conformance IKRig.JointCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.JointCollection.Iterator and conformance IKRig.JointCollection.Iterator;
  if (!lazy protocol witness table cache variable for type IKRig.JointCollection.Iterator and conformance IKRig.JointCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.JointCollection.Iterator, &type metadata for IKRig.JointCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.JointCollection.Iterator and conformance IKRig.JointCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKRig.ConstraintsCollection and conformance IKRig.ConstraintsCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.ConstraintsCollection and conformance IKRig.ConstraintsCollection;
  if (!lazy protocol witness table cache variable for type IKRig.ConstraintsCollection and conformance IKRig.ConstraintsCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.ConstraintsCollection, &type metadata for IKRig.ConstraintsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.ConstraintsCollection and conformance IKRig.ConstraintsCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IKRig.ConstraintsCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<IKRig.ConstraintsCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IKRig.ConstraintsCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IKRig.ConstraintsCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<IKRig.ConstraintsCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IKRig.ConstraintsCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type IKRig.ConstraintsCollection.Iterator and conformance IKRig.ConstraintsCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKRig.ConstraintsCollection.Iterator and conformance IKRig.ConstraintsCollection.Iterator;
  if (!lazy protocol witness table cache variable for type IKRig.ConstraintsCollection.Iterator and conformance IKRig.ConstraintsCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKRig.ConstraintsCollection.Iterator, &type metadata for IKRig.ConstraintsCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKRig.ConstraintsCollection.Iterator and conformance IKRig.ConstraintsCollection.Iterator);
  }
  return result;
}

uint64_t sub_21BB03BC4()
{
  return 0;
}

uint64_t sub_21BB03BDC()
{
  return 0;
}

uint64_t sub_21BB03BF4()
{
  return 0;
}

uint64_t sub_21BB03C0C()
{
  return 0;
}

uint64_t sub_21BB03C24()
{
  return 0;
}

uint64_t sub_21BB03C3C()
{
  return 0;
}

uint64_t destroy for IKSolverDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  return outlined consume of BindTarget(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t initializeWithCopy for IKSolverDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of BindTarget(v6, v7, v8);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(v2 + 80);
  v10 = *(_QWORD *)(v2 + 88);
  LOBYTE(v2) = *(_BYTE *)(v2 + 96);
  outlined copy of BindTarget(v9, v10, v2);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = v2;
  return a1;
}

uint64_t assignWithCopy for IKSolverDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_BYTE *)(v2 + 72);
  outlined copy of BindTarget(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  v9 = *(_BYTE *)(a1 + 72);
  *(_BYTE *)(a1 + 72) = v6;
  outlined consume of BindTarget(v7, v8, v9);
  v10 = *(_QWORD *)(v2 + 80);
  v11 = *(_QWORD *)(v2 + 88);
  LOBYTE(v2) = *(_BYTE *)(v2 + 96);
  outlined copy of BindTarget(v10, v11, v2);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  v14 = *(_BYTE *)(a1 + 96);
  *(_BYTE *)(a1 + 96) = v2;
  outlined consume of BindTarget(v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for IKSolverDefinition(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(_BYTE *)(a2 + 72);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(_BYTE *)(a1 + 72);
  *(_BYTE *)(a1 + 72) = v4;
  outlined consume of BindTarget(v5, v6, v7);
  v8 = *(_BYTE *)(a2 + 96);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v11 = *(_BYTE *)(a1 + 96);
  *(_BYTE *)(a1 + 96) = v8;
  outlined consume of BindTarget(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for IKSolverDefinition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IKSolverDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IKSolverDefinition()
{
  return &type metadata for IKSolverDefinition;
}

uint64_t destroy for IKRig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for IKRig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IKRig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IKRig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IKRig()
{
  return &type metadata for IKRig;
}

uint64_t initializeWithCopy for IKRig.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IKRig.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v5 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 128) = v5;
  return a1;
}

__n128 __swift_memcpy176_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for IKRig.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 128) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for IKRig.Joint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IKRig.Joint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IKRig.Joint()
{
  return &type metadata for IKRig.Joint;
}

ValueMetadata *type metadata accessor for IKRig.Joint.ID()
{
  return &type metadata for IKRig.Joint.ID;
}

uint64_t getEnumTagSinglePayload for IKRig.Joint.LimitsDefinition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IKRig.Joint.LimitsDefinition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IKRig.Joint.LimitsDefinition()
{
  return &type metadata for IKRig.Joint.LimitsDefinition;
}

uint64_t storeEnumTagSinglePayload for IKRig.Joint.LimitsDefinition.Axis(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BB04504 + 4 * byte_21BE5FCD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BB04538 + 4 * byte_21BE5FCD0[v4]))();
}

uint64_t sub_21BB04538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB04540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB04548);
  return result;
}

uint64_t sub_21BB04554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB0455CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BB04560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB04568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IKRig.Joint.LimitsDefinition.Axis()
{
  return &type metadata for IKRig.Joint.LimitsDefinition.Axis;
}

uint64_t destroy for IKRig.Constraint()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IKRig.Constraint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IKRig.Constraint(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  return a1;
}

__n128 __swift_memcpy160_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for IKRig.Constraint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for IKRig.Constraint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IKRig.Constraint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IKRig.Constraint()
{
  return &type metadata for IKRig.Constraint;
}

ValueMetadata *type metadata accessor for IKRig.Constraint.ID()
{
  return &type metadata for IKRig.Constraint.ID;
}

uint64_t getEnumTagSinglePayload for IKRig.Constraint.IKPositionDemand(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[32])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IKRig.Constraint.IKPositionDemand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for IKRig.Constraint.IKPositionDemand()
{
  return &type metadata for IKRig.Constraint.IKPositionDemand;
}

uint64_t storeEnumTagSinglePayload for IKRig.Constraint.IKPositionDemand.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BB048E8 + 4 * byte_21BE5FCDF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BB0491C + 4 * byte_21BE5FCDA[v4]))();
}

uint64_t sub_21BB0491C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB04924(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB0492CLL);
  return result;
}

uint64_t sub_21BB04938(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB04940);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BB04944(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB0494C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IKRig.Constraint.IKPositionDemand.Mode()
{
  return &type metadata for IKRig.Constraint.IKPositionDemand.Mode;
}

uint64_t getEnumTagSinglePayload for IKRig.Constraint.IKOrientationDemand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IKRig.Constraint.IKOrientationDemand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IKRig.Constraint.IKOrientationDemand()
{
  return &type metadata for IKRig.Constraint.IKOrientationDemand;
}

uint64_t getEnumTagSinglePayload for IKRig.Constraint.IKOrientationDemand.Mode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IKRig.Constraint.IKOrientationDemand.Mode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for IKRig.Constraint.IKOrientationDemand.Mode(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for IKRig.Constraint.IKOrientationDemand.Mode(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for IKRig.Constraint.IKOrientationDemand.Mode()
{
  return &type metadata for IKRig.Constraint.IKOrientationDemand.Mode;
}

ValueMetadata *type metadata accessor for IKRig.JointCollection()
{
  return &type metadata for IKRig.JointCollection;
}

ValueMetadata *type metadata accessor for IKRig.JointCollection.Iterator()
{
  return &type metadata for IKRig.JointCollection.Iterator;
}

ValueMetadata *type metadata accessor for IKRig.ConstraintsCollection()
{
  return &type metadata for IKRig.ConstraintsCollection;
}

ValueMetadata *type metadata accessor for IKRig.ConstraintsCollection.Iterator()
{
  return &type metadata for IKRig.ConstraintsCollection.Iterator;
}

uint64_t ImpulseAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t ImpulseAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of ActionEntityResolution();
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*ImpulseAction.targetEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ImpulseAction.linearImpulse.getter()
{
  __n128 *v0;

  return v0[2];
}

void ImpulseAction.linearImpulse.setter(__n128 a1)
{
  __n128 *v1;

  v1[2] = a1;
}

uint64_t (*ImpulseAction.linearImpulse.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ImpulseAction.animatedValueType.getter()
{
  return 0;
}

uint64_t ImpulseAction.init(targetEntity:linearImpulse:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  char v3;

  v3 = *(_BYTE *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_BYTE *)(a2 + 16) = v3;
  *(__n128 *)(a2 + 32) = a3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ImpulseAction.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D497261656E696CLL;
  else
    return 0x6E45746567726174;
}

